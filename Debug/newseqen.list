
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c850  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000213c  0800c9e8  0800c9e8  0001c9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb24  0800eb24  000284d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb24  0800eb24  0001eb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb2c  0800eb2c  000284d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb2c  0800eb2c  0001eb2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb30  0800eb30  0001eb30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000084d8  20000000  0800eb34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009670  200084d8  0801700c  000284d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011b48  0801700c  00031b48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000284d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001844b  00000000  00000000  00028508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002840  00000000  00000000  00040953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  00043198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a0  00000000  00000000  00044620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018daa  00000000  00000000  000459c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019038  00000000  00000000  0005e76a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1b41  00000000  00000000  000777a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  001192e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ad0  00000000  00000000  001193a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  0011ee74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200084d8 	.word	0x200084d8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c9d0 	.word	0x0800c9d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200084dc 	.word	0x200084dc
 80001d4:	0800c9d0 	.word	0x0800c9d0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2uiz>:
 80007b4:	004a      	lsls	r2, r1, #1
 80007b6:	d211      	bcs.n	80007dc <__aeabi_d2uiz+0x28>
 80007b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007bc:	d211      	bcs.n	80007e2 <__aeabi_d2uiz+0x2e>
 80007be:	d50d      	bpl.n	80007dc <__aeabi_d2uiz+0x28>
 80007c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c8:	d40e      	bmi.n	80007e8 <__aeabi_d2uiz+0x34>
 80007ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007d6:	fa23 f002 	lsr.w	r0, r3, r2
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007e6:	d102      	bne.n	80007ee <__aeabi_d2uiz+0x3a>
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	4770      	bx	lr
 80007ee:	f04f 0000 	mov.w	r0, #0
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_d2f>:
 80007f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007fc:	bf24      	itt	cs
 80007fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000802:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000806:	d90d      	bls.n	8000824 <__aeabi_d2f+0x30>
 8000808:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800080c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000810:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000814:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000818:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000828:	d121      	bne.n	800086e <__aeabi_d2f+0x7a>
 800082a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800082e:	bfbc      	itt	lt
 8000830:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000834:	4770      	bxlt	lr
 8000836:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800083a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800083e:	f1c2 0218 	rsb	r2, r2, #24
 8000842:	f1c2 0c20 	rsb	ip, r2, #32
 8000846:	fa10 f30c 	lsls.w	r3, r0, ip
 800084a:	fa20 f002 	lsr.w	r0, r0, r2
 800084e:	bf18      	it	ne
 8000850:	f040 0001 	orrne.w	r0, r0, #1
 8000854:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000858:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800085c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000860:	ea40 000c 	orr.w	r0, r0, ip
 8000864:	fa23 f302 	lsr.w	r3, r3, r2
 8000868:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800086c:	e7cc      	b.n	8000808 <__aeabi_d2f+0x14>
 800086e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000872:	d107      	bne.n	8000884 <__aeabi_d2f+0x90>
 8000874:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000878:	bf1e      	ittt	ne
 800087a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800087e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000882:	4770      	bxne	lr
 8000884:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000888:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800088c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <__aeabi_uldivmod>:
 8000894:	b953      	cbnz	r3, 80008ac <__aeabi_uldivmod+0x18>
 8000896:	b94a      	cbnz	r2, 80008ac <__aeabi_uldivmod+0x18>
 8000898:	2900      	cmp	r1, #0
 800089a:	bf08      	it	eq
 800089c:	2800      	cmpeq	r0, #0
 800089e:	bf1c      	itt	ne
 80008a0:	f04f 31ff 	movne.w	r1, #4294967295
 80008a4:	f04f 30ff 	movne.w	r0, #4294967295
 80008a8:	f000 b974 	b.w	8000b94 <__aeabi_idiv0>
 80008ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b4:	f000 f806 	bl	80008c4 <__udivmoddi4>
 80008b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c0:	b004      	add	sp, #16
 80008c2:	4770      	bx	lr

080008c4 <__udivmoddi4>:
 80008c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c8:	9d08      	ldr	r5, [sp, #32]
 80008ca:	4604      	mov	r4, r0
 80008cc:	468e      	mov	lr, r1
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d14d      	bne.n	800096e <__udivmoddi4+0xaa>
 80008d2:	428a      	cmp	r2, r1
 80008d4:	4694      	mov	ip, r2
 80008d6:	d969      	bls.n	80009ac <__udivmoddi4+0xe8>
 80008d8:	fab2 f282 	clz	r2, r2
 80008dc:	b152      	cbz	r2, 80008f4 <__udivmoddi4+0x30>
 80008de:	fa01 f302 	lsl.w	r3, r1, r2
 80008e2:	f1c2 0120 	rsb	r1, r2, #32
 80008e6:	fa20 f101 	lsr.w	r1, r0, r1
 80008ea:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ee:	ea41 0e03 	orr.w	lr, r1, r3
 80008f2:	4094      	lsls	r4, r2
 80008f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f8:	0c21      	lsrs	r1, r4, #16
 80008fa:	fbbe f6f8 	udiv	r6, lr, r8
 80008fe:	fa1f f78c 	uxth.w	r7, ip
 8000902:	fb08 e316 	mls	r3, r8, r6, lr
 8000906:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800090a:	fb06 f107 	mul.w	r1, r6, r7
 800090e:	4299      	cmp	r1, r3
 8000910:	d90a      	bls.n	8000928 <__udivmoddi4+0x64>
 8000912:	eb1c 0303 	adds.w	r3, ip, r3
 8000916:	f106 30ff 	add.w	r0, r6, #4294967295
 800091a:	f080 811f 	bcs.w	8000b5c <__udivmoddi4+0x298>
 800091e:	4299      	cmp	r1, r3
 8000920:	f240 811c 	bls.w	8000b5c <__udivmoddi4+0x298>
 8000924:	3e02      	subs	r6, #2
 8000926:	4463      	add	r3, ip
 8000928:	1a5b      	subs	r3, r3, r1
 800092a:	b2a4      	uxth	r4, r4
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3310 	mls	r3, r8, r0, r3
 8000934:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000938:	fb00 f707 	mul.w	r7, r0, r7
 800093c:	42a7      	cmp	r7, r4
 800093e:	d90a      	bls.n	8000956 <__udivmoddi4+0x92>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f100 33ff 	add.w	r3, r0, #4294967295
 8000948:	f080 810a 	bcs.w	8000b60 <__udivmoddi4+0x29c>
 800094c:	42a7      	cmp	r7, r4
 800094e:	f240 8107 	bls.w	8000b60 <__udivmoddi4+0x29c>
 8000952:	4464      	add	r4, ip
 8000954:	3802      	subs	r0, #2
 8000956:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800095a:	1be4      	subs	r4, r4, r7
 800095c:	2600      	movs	r6, #0
 800095e:	b11d      	cbz	r5, 8000968 <__udivmoddi4+0xa4>
 8000960:	40d4      	lsrs	r4, r2
 8000962:	2300      	movs	r3, #0
 8000964:	e9c5 4300 	strd	r4, r3, [r5]
 8000968:	4631      	mov	r1, r6
 800096a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096e:	428b      	cmp	r3, r1
 8000970:	d909      	bls.n	8000986 <__udivmoddi4+0xc2>
 8000972:	2d00      	cmp	r5, #0
 8000974:	f000 80ef 	beq.w	8000b56 <__udivmoddi4+0x292>
 8000978:	2600      	movs	r6, #0
 800097a:	e9c5 0100 	strd	r0, r1, [r5]
 800097e:	4630      	mov	r0, r6
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	fab3 f683 	clz	r6, r3
 800098a:	2e00      	cmp	r6, #0
 800098c:	d14a      	bne.n	8000a24 <__udivmoddi4+0x160>
 800098e:	428b      	cmp	r3, r1
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xd4>
 8000992:	4282      	cmp	r2, r0
 8000994:	f200 80f9 	bhi.w	8000b8a <__udivmoddi4+0x2c6>
 8000998:	1a84      	subs	r4, r0, r2
 800099a:	eb61 0303 	sbc.w	r3, r1, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	469e      	mov	lr, r3
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d0e0      	beq.n	8000968 <__udivmoddi4+0xa4>
 80009a6:	e9c5 4e00 	strd	r4, lr, [r5]
 80009aa:	e7dd      	b.n	8000968 <__udivmoddi4+0xa4>
 80009ac:	b902      	cbnz	r2, 80009b0 <__udivmoddi4+0xec>
 80009ae:	deff      	udf	#255	; 0xff
 80009b0:	fab2 f282 	clz	r2, r2
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	f040 8092 	bne.w	8000ade <__udivmoddi4+0x21a>
 80009ba:	eba1 010c 	sub.w	r1, r1, ip
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2601      	movs	r6, #1
 80009c8:	0c20      	lsrs	r0, r4, #16
 80009ca:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ce:	fb07 1113 	mls	r1, r7, r3, r1
 80009d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009d6:	fb0e f003 	mul.w	r0, lr, r3
 80009da:	4288      	cmp	r0, r1
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x12c>
 80009de:	eb1c 0101 	adds.w	r1, ip, r1
 80009e2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x12a>
 80009e8:	4288      	cmp	r0, r1
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2c0>
 80009ee:	4643      	mov	r3, r8
 80009f0:	1a09      	subs	r1, r1, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1110 	mls	r1, r7, r0, r1
 80009fc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x156>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x154>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2ca>
 8000a18:	4608      	mov	r0, r1
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	e79c      	b.n	800095e <__udivmoddi4+0x9a>
 8000a24:	f1c6 0720 	rsb	r7, r6, #32
 8000a28:	40b3      	lsls	r3, r6
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa20 f407 	lsr.w	r4, r0, r7
 8000a36:	fa01 f306 	lsl.w	r3, r1, r6
 8000a3a:	431c      	orrs	r4, r3
 8000a3c:	40f9      	lsrs	r1, r7
 8000a3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a42:	fa00 f306 	lsl.w	r3, r0, r6
 8000a46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a4a:	0c20      	lsrs	r0, r4, #16
 8000a4c:	fa1f fe8c 	uxth.w	lr, ip
 8000a50:	fb09 1118 	mls	r1, r9, r8, r1
 8000a54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a58:	fb08 f00e 	mul.w	r0, r8, lr
 8000a5c:	4288      	cmp	r0, r1
 8000a5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b8>
 8000a64:	eb1c 0101 	adds.w	r1, ip, r1
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2bc>
 8000a70:	4288      	cmp	r0, r1
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2bc>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4461      	add	r1, ip
 8000a7c:	1a09      	subs	r1, r1, r0
 8000a7e:	b2a4      	uxth	r4, r4
 8000a80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a84:	fb09 1110 	mls	r1, r9, r0, r1
 8000a88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a90:	458e      	cmp	lr, r1
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1e2>
 8000a94:	eb1c 0101 	adds.w	r1, ip, r1
 8000a98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2b4>
 8000a9e:	458e      	cmp	lr, r1
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2b4>
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	4461      	add	r1, ip
 8000aa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aaa:	fba0 9402 	umull	r9, r4, r0, r2
 8000aae:	eba1 010e 	sub.w	r1, r1, lr
 8000ab2:	42a1      	cmp	r1, r4
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46a6      	mov	lr, r4
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x2a4>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x2a0>
 8000abc:	b15d      	cbz	r5, 8000ad6 <__udivmoddi4+0x212>
 8000abe:	ebb3 0208 	subs.w	r2, r3, r8
 8000ac2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ac6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aca:	fa22 f306 	lsr.w	r3, r2, r6
 8000ace:	40f1      	lsrs	r1, r6
 8000ad0:	431f      	orrs	r7, r3
 8000ad2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	40d8      	lsrs	r0, r3
 8000ae4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aec:	4091      	lsls	r1, r2
 8000aee:	4301      	orrs	r1, r0
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000afc:	fb07 3610 	mls	r6, r7, r0, r3
 8000b00:	0c0b      	lsrs	r3, r1, #16
 8000b02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b06:	fb00 f60e 	mul.w	r6, r0, lr
 8000b0a:	429e      	cmp	r6, r3
 8000b0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x260>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b8>
 8000b1c:	429e      	cmp	r6, r3
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b8>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4463      	add	r3, ip
 8000b24:	1b9b      	subs	r3, r3, r6
 8000b26:	b289      	uxth	r1, r1
 8000b28:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b2c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b34:	fb06 f30e 	mul.w	r3, r6, lr
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x28a>
 8000b3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b40:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2b0>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2b0>
 8000b4a:	3e02      	subs	r6, #2
 8000b4c:	4461      	add	r1, ip
 8000b4e:	1ac9      	subs	r1, r1, r3
 8000b50:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0x104>
 8000b56:	462e      	mov	r6, r5
 8000b58:	4628      	mov	r0, r5
 8000b5a:	e705      	b.n	8000968 <__udivmoddi4+0xa4>
 8000b5c:	4606      	mov	r6, r0
 8000b5e:	e6e3      	b.n	8000928 <__udivmoddi4+0x64>
 8000b60:	4618      	mov	r0, r3
 8000b62:	e6f8      	b.n	8000956 <__udivmoddi4+0x92>
 8000b64:	454b      	cmp	r3, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f8>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b70:	3801      	subs	r0, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f8>
 8000b74:	4646      	mov	r6, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x28a>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1e2>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x260>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b8>
 8000b84:	3b02      	subs	r3, #2
 8000b86:	4461      	add	r1, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x12c>
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	e709      	b.n	80009a2 <__udivmoddi4+0xde>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x156>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70fb      	strb	r3, [r7, #3]


	char menu_string2[8];
	//var_index=var_index&15;    //set var index ie  LFO[1].rate ,false
	uint8_t menu_countr=0; //  menu vars
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	75fb      	strb	r3, [r7, #23]
	uint8_t *menu_vars_var1=NULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]

	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000bac:	4bba      	ldr	r3, [pc, #744]	; (8000e98 <menu_vars+0x300>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	801a      	strh	r2, [r3, #0]
 8000bb2:	e01d      	b.n	8000bf0 <menu_vars+0x58>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000bb4:	4bb8      	ldr	r3, [pc, #736]	; (8000e98 <menu_vars+0x300>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4bb8      	ldr	r3, [pc, #736]	; (8000e9c <menu_vars+0x304>)
 8000bbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	6810      	ldr	r0, [r2, #0]
 8000bc6:	6851      	ldr	r1, [r2, #4]
 8000bc8:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	2208      	movs	r2, #8
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f00b fe5c 	bl	800c890 <strncmp>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d102      	bne.n	8000be4 <menu_vars+0x4c>
			menu_countr = i;
 8000bde:	4bae      	ldr	r3, [pc, #696]	; (8000e98 <menu_vars+0x300>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000be4:	4bac      	ldr	r3, [pc, #688]	; (8000e98 <menu_vars+0x300>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	4baa      	ldr	r3, [pc, #680]	; (8000e98 <menu_vars+0x300>)
 8000bee:	801a      	strh	r2, [r3, #0]
 8000bf0:	4ba9      	ldr	r3, [pc, #676]	; (8000e98 <menu_vars+0x300>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	2b36      	cmp	r3, #54	; 0x36
 8000bf6:	d9dd      	bls.n	8000bb4 <menu_vars+0x1c>

		}
	}
	menu_vars_ref=menu_countr ;
 8000bf8:	4aa9      	ldr	r2, [pc, #676]	; (8000ea0 <menu_vars+0x308>)
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
 8000bfc:	7013      	strb	r3, [r2, #0]
	if (var_index>menu_vars_index_limit[menu_countr]) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
 8000c00:	4aa8      	ldr	r2, [pc, #672]	; (8000ea4 <menu_vars+0x30c>)
 8000c02:	5cd3      	ldrb	r3, [r2, r3]
 8000c04:	78fa      	ldrb	r2, [r7, #3]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d903      	bls.n	8000c12 <menu_vars+0x7a>
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	4aa5      	ldr	r2, [pc, #660]	; (8000ea4 <menu_vars+0x30c>)
 8000c0e:	5cd3      	ldrb	r3, [r2, r3]
 8000c10:	70fb      	strb	r3, [r7, #3]

	switch(menu_countr){
 8000c12:	7dfb      	ldrb	r3, [r7, #23]
 8000c14:	2b35      	cmp	r3, #53	; 0x35
 8000c16:	f200 8224 	bhi.w	8001062 <menu_vars+0x4ca>
 8000c1a:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <menu_vars+0x88>)
 8000c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c20:	08000cf9 	.word	0x08000cf9
 8000c24:	08000cff 	.word	0x08000cff
 8000c28:	08000d11 	.word	0x08000d11
 8000c2c:	08000d25 	.word	0x08000d25
 8000c30:	08000d39 	.word	0x08000d39
 8000c34:	08000d4d 	.word	0x08000d4d
 8000c38:	08000d61 	.word	0x08000d61
 8000c3c:	08000d67 	.word	0x08000d67
 8000c40:	08000d79 	.word	0x08000d79
 8000c44:	08000d8d 	.word	0x08000d8d
 8000c48:	08000da1 	.word	0x08000da1
 8000c4c:	08000db5 	.word	0x08000db5
 8000c50:	08000dbb 	.word	0x08000dbb
 8000c54:	08000dcd 	.word	0x08000dcd
 8000c58:	08000de1 	.word	0x08000de1
 8000c5c:	08000df5 	.word	0x08000df5
 8000c60:	08000e09 	.word	0x08000e09
 8000c64:	08000e1d 	.word	0x08000e1d
 8000c68:	08000e31 	.word	0x08000e31
 8000c6c:	08000e45 	.word	0x08000e45
 8000c70:	08000e59 	.word	0x08000e59
 8000c74:	08000e6d 	.word	0x08000e6d
 8000c78:	08000e73 	.word	0x08000e73
 8000c7c:	08000e79 	.word	0x08000e79
 8000c80:	08000e7f 	.word	0x08000e7f
 8000c84:	08000e8b 	.word	0x08000e8b
 8000c88:	08000ec1 	.word	0x08000ec1
 8000c8c:	08000ecf 	.word	0x08000ecf
 8000c90:	08000edb 	.word	0x08000edb
 8000c94:	08000ee9 	.word	0x08000ee9
 8000c98:	08000ef7 	.word	0x08000ef7
 8000c9c:	08000f05 	.word	0x08000f05
 8000ca0:	08000f13 	.word	0x08000f13
 8000ca4:	08000f21 	.word	0x08000f21
 8000ca8:	08000f2f 	.word	0x08000f2f
 8000cac:	08000f3d 	.word	0x08000f3d
 8000cb0:	08000f51 	.word	0x08000f51
 8000cb4:	08000f63 	.word	0x08000f63
 8000cb8:	08000f77 	.word	0x08000f77
 8000cbc:	08000f8b 	.word	0x08000f8b
 8000cc0:	08000f9f 	.word	0x08000f9f
 8000cc4:	08000fb1 	.word	0x08000fb1
 8000cc8:	08000fc5 	.word	0x08000fc5
 8000ccc:	08000fd9 	.word	0x08000fd9
 8000cd0:	08000fed 	.word	0x08000fed
 8000cd4:	08000ff3 	.word	0x08000ff3
 8000cd8:	08000ff9 	.word	0x08000ff9
 8000cdc:	08000fff 	.word	0x08000fff
 8000ce0:	08001005 	.word	0x08001005
 8000ce4:	0800100b 	.word	0x0800100b
 8000ce8:	0800101d 	.word	0x0800101d
 8000cec:	08001031 	.word	0x08001031
 8000cf0:	08001045 	.word	0x08001045
 8000cf4:	08001059 	.word	0x08001059
	case 0:     menu_vars_var1= NULL; break;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	e1b4      	b.n	8001068 <menu_vars+0x4d0>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000cfe:	78fa      	ldrb	r2, [r7, #3]
 8000d00:	4613      	mov	r3, r2
 8000d02:	011b      	lsls	r3, r3, #4
 8000d04:	4413      	add	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4a67      	ldr	r2, [pc, #412]	; (8000ea8 <menu_vars+0x310>)
 8000d0a:	4413      	add	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	e1ab      	b.n	8001068 <menu_vars+0x4d0>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000d10:	78fa      	ldrb	r2, [r7, #3]
 8000d12:	4613      	mov	r3, r2
 8000d14:	011b      	lsls	r3, r3, #4
 8000d16:	4413      	add	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4a63      	ldr	r2, [pc, #396]	; (8000ea8 <menu_vars+0x310>)
 8000d1c:	4413      	add	r3, r2
 8000d1e:	3301      	adds	r3, #1
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	e1a1      	b.n	8001068 <menu_vars+0x4d0>
	case 3:     menu_vars_var1= &LFO[var_index].delay    ; break;
 8000d24:	78fa      	ldrb	r2, [r7, #3]
 8000d26:	4613      	mov	r3, r2
 8000d28:	011b      	lsls	r3, r3, #4
 8000d2a:	4413      	add	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4a5e      	ldr	r2, [pc, #376]	; (8000ea8 <menu_vars+0x310>)
 8000d30:	4413      	add	r3, r2
 8000d32:	3304      	adds	r3, #4
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	e197      	b.n	8001068 <menu_vars+0x4d0>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000d38:	78fa      	ldrb	r2, [r7, #3]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	011b      	lsls	r3, r3, #4
 8000d3e:	4413      	add	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4a59      	ldr	r2, [pc, #356]	; (8000ea8 <menu_vars+0x310>)
 8000d44:	4413      	add	r3, r2
 8000d46:	3303      	adds	r3, #3
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	e18d      	b.n	8001068 <menu_vars+0x4d0>
	case 5:     menu_vars_var1= &patch[var_index].target    ; break;  // velocity etc
 8000d4c:	78fa      	ldrb	r2, [r7, #3]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4413      	add	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	4a55      	ldr	r2, [pc, #340]	; (8000eac <menu_vars+0x314>)
 8000d58:	4413      	add	r3, r2
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	e183      	b.n	8001068 <menu_vars+0x4d0>
	case 6:     menu_vars_var1= NULL   ; break;
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	e180      	b.n	8001068 <menu_vars+0x4d0>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000d66:	78fb      	ldrb	r3, [r7, #3]
 8000d68:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d6c:	fb02 f303 	mul.w	r3, r2, r3
 8000d70:	4a4f      	ldr	r2, [pc, #316]	; (8000eb0 <menu_vars+0x318>)
 8000d72:	4413      	add	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	e177      	b.n	8001068 <menu_vars+0x4d0>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d7e:	fb02 f303 	mul.w	r3, r2, r3
 8000d82:	4a4b      	ldr	r2, [pc, #300]	; (8000eb0 <menu_vars+0x318>)
 8000d84:	4413      	add	r3, r2
 8000d86:	3301      	adds	r3, #1
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	e16d      	b.n	8001068 <menu_vars+0x4d0>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000d8c:	78fb      	ldrb	r3, [r7, #3]
 8000d8e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d92:	fb02 f303 	mul.w	r3, r2, r3
 8000d96:	4a46      	ldr	r2, [pc, #280]	; (8000eb0 <menu_vars+0x318>)
 8000d98:	4413      	add	r3, r2
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	e163      	b.n	8001068 <menu_vars+0x4d0>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000da0:	78fb      	ldrb	r3, [r7, #3]
 8000da2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000da6:	fb02 f303 	mul.w	r3, r2, r3
 8000daa:	4a41      	ldr	r2, [pc, #260]	; (8000eb0 <menu_vars+0x318>)
 8000dac:	4413      	add	r3, r2
 8000dae:	3303      	adds	r3, #3
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	e159      	b.n	8001068 <menu_vars+0x4d0>
	case 11:     menu_vars_var1= NULL  ; break;
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	e156      	b.n	8001068 <menu_vars+0x4d0>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000dba:	78fa      	ldrb	r2, [r7, #3]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	1a9b      	subs	r3, r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4a3b      	ldr	r2, [pc, #236]	; (8000eb4 <menu_vars+0x31c>)
 8000dc6:	4413      	add	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	e14d      	b.n	8001068 <menu_vars+0x4d0>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000dcc:	78fa      	ldrb	r2, [r7, #3]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	1a9b      	subs	r3, r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	4a37      	ldr	r2, [pc, #220]	; (8000eb4 <menu_vars+0x31c>)
 8000dd8:	4413      	add	r3, r2
 8000dda:	3301      	adds	r3, #1
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	e143      	b.n	8001068 <menu_vars+0x4d0>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000de0:	78fa      	ldrb	r2, [r7, #3]
 8000de2:	4613      	mov	r3, r2
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	1a9b      	subs	r3, r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	4a32      	ldr	r2, [pc, #200]	; (8000eb4 <menu_vars+0x31c>)
 8000dec:	4413      	add	r3, r2
 8000dee:	3302      	adds	r3, #2
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	e139      	b.n	8001068 <menu_vars+0x4d0>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000df4:	78fa      	ldrb	r2, [r7, #3]
 8000df6:	4613      	mov	r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	1a9b      	subs	r3, r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4a2d      	ldr	r2, [pc, #180]	; (8000eb4 <menu_vars+0x31c>)
 8000e00:	4413      	add	r3, r2
 8000e02:	3303      	adds	r3, #3
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	e12f      	b.n	8001068 <menu_vars+0x4d0>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000e08:	78fa      	ldrb	r2, [r7, #3]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	1a9b      	subs	r3, r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	4a28      	ldr	r2, [pc, #160]	; (8000eb4 <menu_vars+0x31c>)
 8000e14:	4413      	add	r3, r2
 8000e16:	3304      	adds	r3, #4
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	e125      	b.n	8001068 <menu_vars+0x4d0>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000e1c:	78fa      	ldrb	r2, [r7, #3]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	1a9b      	subs	r3, r3, r2
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	4a23      	ldr	r2, [pc, #140]	; (8000eb4 <menu_vars+0x31c>)
 8000e28:	4413      	add	r3, r2
 8000e2a:	3305      	adds	r3, #5
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	e11b      	b.n	8001068 <menu_vars+0x4d0>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000e30:	78fa      	ldrb	r2, [r7, #3]
 8000e32:	4613      	mov	r3, r2
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	1a9b      	subs	r3, r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <menu_vars+0x31c>)
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3306      	adds	r3, #6
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	e111      	b.n	8001068 <menu_vars+0x4d0>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 8000e44:	78fa      	ldrb	r2, [r7, #3]
 8000e46:	4613      	mov	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	1a9b      	subs	r3, r3, r2
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4a19      	ldr	r2, [pc, #100]	; (8000eb4 <menu_vars+0x31c>)
 8000e50:	4413      	add	r3, r2
 8000e52:	3307      	adds	r3, #7
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	e107      	b.n	8001068 <menu_vars+0x4d0>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000e58:	78fa      	ldrb	r2, [r7, #3]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	1a9b      	subs	r3, r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	3308      	adds	r3, #8
 8000e64:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <menu_vars+0x31c>)
 8000e66:	4413      	add	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	e0fd      	b.n	8001068 <menu_vars+0x4d0>
	case 21:     menu_vars_var1= NULL   ; break;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	e0fa      	b.n	8001068 <menu_vars+0x4d0>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <menu_vars+0x320>)
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	e0f7      	b.n	8001068 <menu_vars+0x4d0>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <menu_vars+0x324>)
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	e0f4      	b.n	8001068 <menu_vars+0x4d0>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000e7e:	78fb      	ldrb	r3, [r7, #3]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <menu_vars+0x320>)
 8000e82:	4413      	add	r3, r2
 8000e84:	3302      	adds	r3, #2
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	e0ee      	b.n	8001068 <menu_vars+0x4d0>
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000e8a:	78fb      	ldrb	r3, [r7, #3]
 8000e8c:	3310      	adds	r3, #16
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <menu_vars+0x320>)
 8000e90:	4413      	add	r3, r2
 8000e92:	3303      	adds	r3, #3
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	e0e7      	b.n	8001068 <menu_vars+0x4d0>
 8000e98:	200089c2 	.word	0x200089c2
 8000e9c:	20000230 	.word	0x20000230
 8000ea0:	2000f791 	.word	0x2000f791
 8000ea4:	0800dd54 	.word	0x0800dd54
 8000ea8:	2000bfc4 	.word	0x2000bfc4
 8000eac:	2000ce2c 	.word	0x2000ce2c
 8000eb0:	2000c370 	.word	0x2000c370
 8000eb4:	20000158 	.word	0x20000158
 8000eb8:	2000cdfc 	.word	0x2000cdfc
 8000ebc:	2000cdfd 	.word	0x2000cdfd
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 8000ec0:	78fb      	ldrb	r3, [r7, #3]
 8000ec2:	3320      	adds	r3, #32
 8000ec4:	4a6b      	ldr	r2, [pc, #428]	; (8001074 <menu_vars+0x4dc>)
 8000ec6:	4413      	add	r3, r2
 8000ec8:	3304      	adds	r3, #4
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	e0cc      	b.n	8001068 <menu_vars+0x4d0>
	case 27: 	menu_vars_var1=&filter[var_index].cutoff_1 ;break;
 8000ece:	78fb      	ldrb	r3, [r7, #3]
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	4a69      	ldr	r2, [pc, #420]	; (8001078 <menu_vars+0x4e0>)
 8000ed4:	4413      	add	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	e0c6      	b.n	8001068 <menu_vars+0x4d0>
	case 28: 	menu_vars_var1=&filter[var_index].cutoff_2 ;break;  // fine tune
 8000eda:	78fb      	ldrb	r3, [r7, #3]
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	4a66      	ldr	r2, [pc, #408]	; (8001078 <menu_vars+0x4e0>)
 8000ee0:	4413      	add	r3, r2
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	e0bf      	b.n	8001068 <menu_vars+0x4d0>
	case 29: 	menu_vars_var1=&filter[var_index].resonance ;break;
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	4a62      	ldr	r2, [pc, #392]	; (8001078 <menu_vars+0x4e0>)
 8000eee:	4413      	add	r3, r2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	e0b8      	b.n	8001068 <menu_vars+0x4d0>
	case 30: 	menu_vars_var1=&filter[var_index].q_level  ;break;
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	4a5f      	ldr	r2, [pc, #380]	; (8001078 <menu_vars+0x4e0>)
 8000efc:	4413      	add	r3, r2
 8000efe:	3303      	adds	r3, #3
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	e0b1      	b.n	8001068 <menu_vars+0x4d0>
	case 31: 	menu_vars_var1=&filter[var_index].level;break;
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	4a5b      	ldr	r2, [pc, #364]	; (8001078 <menu_vars+0x4e0>)
 8000f0a:	4413      	add	r3, r2
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	e0aa      	b.n	8001068 <menu_vars+0x4d0>
	case 32: 	menu_vars_var1=&filter[var_index].feedback ;break;
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	4a58      	ldr	r2, [pc, #352]	; (8001078 <menu_vars+0x4e0>)
 8000f18:	4413      	add	r3, r2
 8000f1a:	3307      	adds	r3, #7
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	e0a3      	b.n	8001068 <menu_vars+0x4d0>
	case 33: 	menu_vars_var1=&filter[var_index].out_mix ;break;
 8000f20:	78fb      	ldrb	r3, [r7, #3]
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	4a54      	ldr	r2, [pc, #336]	; (8001078 <menu_vars+0x4e0>)
 8000f26:	4413      	add	r3, r2
 8000f28:	3306      	adds	r3, #6
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	e09c      	b.n	8001068 <menu_vars+0x4d0>
	case 34: 	menu_vars_var1=&filter[var_index].poles ;break;
 8000f2e:	78fb      	ldrb	r3, [r7, #3]
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	4a51      	ldr	r2, [pc, #324]	; (8001078 <menu_vars+0x4e0>)
 8000f34:	4413      	add	r3, r2
 8000f36:	3305      	adds	r3, #5
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	e095      	b.n	8001068 <menu_vars+0x4d0>
	case 35:     menu_vars_var1= &patch[var_index].target_index    ; break;     // select note
 8000f3c:	78fa      	ldrb	r2, [r7, #3]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	4a4d      	ldr	r2, [pc, #308]	; (800107c <menu_vars+0x4e4>)
 8000f48:	4413      	add	r3, r2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	e08b      	b.n	8001068 <menu_vars+0x4d0>
	case 36: 	menu_vars_var1=&patch[var_index].input1 ;break;
 8000f50:	78fa      	ldrb	r2, [r7, #3]
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	4a48      	ldr	r2, [pc, #288]	; (800107c <menu_vars+0x4e4>)
 8000f5c:	4413      	add	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	e082      	b.n	8001068 <menu_vars+0x4d0>
	case 37: 	menu_vars_var1=&patch[var_index].input2 ;break;
 8000f62:	78fa      	ldrb	r2, [r7, #3]
 8000f64:	4613      	mov	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	4a43      	ldr	r2, [pc, #268]	; (800107c <menu_vars+0x4e4>)
 8000f6e:	4413      	add	r3, r2
 8000f70:	3303      	adds	r3, #3
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	e078      	b.n	8001068 <menu_vars+0x4d0>
	case 38: 	menu_vars_var1=&patch[var_index].in_mix ;break;
 8000f76:	78fa      	ldrb	r2, [r7, #3]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	4a3e      	ldr	r2, [pc, #248]	; (800107c <menu_vars+0x4e4>)
 8000f82:	4413      	add	r3, r2
 8000f84:	3304      	adds	r3, #4
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	e06e      	b.n	8001068 <menu_vars+0x4d0>
	case 39: 	menu_vars_var1=&patch[var_index].in_offset ;break;
 8000f8a:	78fa      	ldrb	r2, [r7, #3]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	4a39      	ldr	r2, [pc, #228]	; (800107c <menu_vars+0x4e4>)
 8000f96:	4413      	add	r3, r2
 8000f98:	3305      	adds	r3, #5
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	e064      	b.n	8001068 <menu_vars+0x4d0>
	case 40:     menu_vars_var1= &LFO_slave1[var_index].rate   ; break;
 8000f9e:	78fa      	ldrb	r2, [r7, #3]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	4a35      	ldr	r2, [pc, #212]	; (8001080 <menu_vars+0x4e8>)
 8000faa:	4413      	add	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	e05b      	b.n	8001068 <menu_vars+0x4d0>
	case 41:     menu_vars_var1= &LFO_slave1[var_index].depth    ; break;
 8000fb0:	78fa      	ldrb	r2, [r7, #3]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4a31      	ldr	r2, [pc, #196]	; (8001080 <menu_vars+0x4e8>)
 8000fbc:	4413      	add	r3, r2
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	e051      	b.n	8001068 <menu_vars+0x4d0>
	case 42:     menu_vars_var1= &LFO_slave1[var_index].delay    ; break;
 8000fc4:	78fa      	ldrb	r2, [r7, #3]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4a2c      	ldr	r2, [pc, #176]	; (8001080 <menu_vars+0x4e8>)
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	e047      	b.n	8001068 <menu_vars+0x4d0>
	case 43:     menu_vars_var1= &LFO_slave1[var_index].offset    ; break;
 8000fd8:	78fa      	ldrb	r2, [r7, #3]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4a27      	ldr	r2, [pc, #156]	; (8001080 <menu_vars+0x4e8>)
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3303      	adds	r3, #3
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	e03d      	b.n	8001068 <menu_vars+0x4d0>
	case 44: 	menu_vars_var1=&sampler.start_MSB ;break;
 8000fec:	4b25      	ldr	r3, [pc, #148]	; (8001084 <menu_vars+0x4ec>)
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	e03a      	b.n	8001068 <menu_vars+0x4d0>
	case 45: 	menu_vars_var1=&sampler.start_LSB ;break;
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <menu_vars+0x4f0>)
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	e037      	b.n	8001068 <menu_vars+0x4d0>
	case 46: 	menu_vars_var1=&sampler.end_MSB ;break;
 8000ff8:	4b24      	ldr	r3, [pc, #144]	; (800108c <menu_vars+0x4f4>)
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	e034      	b.n	8001068 <menu_vars+0x4d0>
	case 47: 	menu_vars_var1=&sampler.end_LSB ;break;
 8000ffe:	4b24      	ldr	r3, [pc, #144]	; (8001090 <menu_vars+0x4f8>)
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	e031      	b.n	8001068 <menu_vars+0x4d0>
	case 48: 	menu_vars_var1=&sampler.offset ;break;
 8001004:	4b23      	ldr	r3, [pc, #140]	; (8001094 <menu_vars+0x4fc>)
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	e02e      	b.n	8001068 <menu_vars+0x4d0>
	case 49:     menu_vars_var1= &LFO_square[var_index].rate   ; break;
 800100a:	78fa      	ldrb	r2, [r7, #3]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4a20      	ldr	r2, [pc, #128]	; (8001098 <menu_vars+0x500>)
 8001016:	4413      	add	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	e025      	b.n	8001068 <menu_vars+0x4d0>
	case 50:     menu_vars_var1= &LFO_square[var_index].depth    ; break;
 800101c:	78fa      	ldrb	r2, [r7, #3]
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <menu_vars+0x500>)
 8001028:	4413      	add	r3, r2
 800102a:	3301      	adds	r3, #1
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	e01b      	b.n	8001068 <menu_vars+0x4d0>
	case 51:     menu_vars_var1= &LFO_square[var_index].offset    ; break;
 8001030:	78fa      	ldrb	r2, [r7, #3]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <menu_vars+0x500>)
 800103c:	4413      	add	r3, r2
 800103e:	3302      	adds	r3, #2
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	e011      	b.n	8001068 <menu_vars+0x4d0>
	case 52:     menu_vars_var1= &LFO_square[var_index].delay    ; break;
 8001044:	78fa      	ldrb	r2, [r7, #3]
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4a12      	ldr	r2, [pc, #72]	; (8001098 <menu_vars+0x500>)
 8001050:	4413      	add	r3, r2
 8001052:	3303      	adds	r3, #3
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	e007      	b.n	8001068 <menu_vars+0x4d0>
	case 53:     menu_vars_var1= &LCD_Info[var_index]    ; break; // send as char
 8001058:	78fb      	ldrb	r3, [r7, #3]
 800105a:	4a10      	ldr	r2, [pc, #64]	; (800109c <menu_vars+0x504>)
 800105c:	4413      	add	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	e002      	b.n	8001068 <menu_vars+0x4d0>


	default :		menu_vars_var1= NULL   ; break;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	bf00      	nop

	}
    // copy back address  ,ok
	// return the result number for later reference
	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
 8001068:	693b      	ldr	r3, [r7, #16]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	2000cdfc 	.word	0x2000cdfc
 8001078:	200001e4 	.word	0x200001e4
 800107c:	2000ce2c 	.word	0x2000ce2c
 8001080:	2000c26c 	.word	0x2000c26c
 8001084:	20000212 	.word	0x20000212
 8001088:	20000213 	.word	0x20000213
 800108c:	20000214 	.word	0x20000214
 8001090:	20000215 	.word	0x20000215
 8001094:	20000208 	.word	0x20000208
 8001098:	2000c2a8 	.word	0x2000c2a8
 800109c:	20010bac 	.word	0x20010bac

080010a0 <menu_parser>:
}




void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0

	    char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 80010a6:	4a6b      	ldr	r2, [pc, #428]	; (8001254 <menu_parser+0x1b4>)
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010b0:	e883 0003 	stmia.w	r3, {r0, r1}
	    char menu_string2[8]="hhhhhhhh";
 80010b4:	4a68      	ldr	r2, [pc, #416]	; (8001258 <menu_parser+0x1b8>)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010bc:	e883 0003 	stmia.w	r3, {r0, r1}
	    uint8_t string_counter=0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	75fb      	strb	r3, [r7, #23]
    	    uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 80010c4:	f640 23ae 	movw	r3, #2734	; 0xaae
 80010c8:	82bb      	strh	r3, [r7, #20]

	    if (string_search>menu_searchsize) {                    //this is ok
 80010ca:	4b64      	ldr	r3, [pc, #400]	; (800125c <menu_parser+0x1bc>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	8aba      	ldrh	r2, [r7, #20]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	f0c0 80bb 	bcc.w	800124c <menu_parser+0x1ac>
		    return;    }    // check if bigger than search area
	    //if (menu_counter>240)  return;
	    memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 80010d6:	4b61      	ldr	r3, [pc, #388]	; (800125c <menu_parser+0x1bc>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	4b60      	ldr	r3, [pc, #384]	; (8001260 <menu_parser+0x1c0>)
 80010de:	441a      	add	r2, r3
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	6810      	ldr	r0, [r2, #0]
 80010e6:	6851      	ldr	r1, [r2, #4]
 80010e8:	c303      	stmia	r3!, {r0, r1}
	    ////////////////////////////
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 80010ea:	2300      	movs	r3, #0
 80010ec:	75fb      	strb	r3, [r7, #23]
 80010ee:	e092      	b.n	8001216 <menu_parser+0x176>

		    memcpy(menu_string2,menu_titles_final[string_counter],8);
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	4a5c      	ldr	r2, [pc, #368]	; (8001264 <menu_parser+0x1c4>)
 80010f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	6810      	ldr	r0, [r2, #0]
 80010fc:	6851      	ldr	r1, [r2, #4]
 80010fe:	c303      	stmia	r3!, {r0, r1}
		    if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 8001100:	1d39      	adds	r1, r7, #4
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	2208      	movs	r2, #8
 8001108:	4618      	mov	r0, r3
 800110a:	f00b fbc1 	bl	800c890 <strncmp>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d17d      	bne.n	8001210 <menu_parser+0x170>
		    {

			    if ((menu_counter>110 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 8001114:	4b54      	ldr	r3, [pc, #336]	; (8001268 <menu_parser+0x1c8>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	2b6e      	cmp	r3, #110	; 0x6e
 800111a:	d909      	bls.n	8001130 <menu_parser+0x90>
 800111c:	4b52      	ldr	r3, [pc, #328]	; (8001268 <menu_parser+0x1c8>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	2b7f      	cmp	r3, #127	; 0x7f
 8001122:	d805      	bhi.n	8001130 <menu_parser+0x90>
 8001124:	4b50      	ldr	r3, [pc, #320]	; (8001268 <menu_parser+0x1c8>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	3310      	adds	r3, #16
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b4e      	ldr	r3, [pc, #312]	; (8001268 <menu_parser+0x1c8>)
 800112e:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>238)&&(menu_counter<256 )) menu_counter=menu_counter+16; // skip
 8001130:	4b4d      	ldr	r3, [pc, #308]	; (8001268 <menu_parser+0x1c8>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	2bee      	cmp	r3, #238	; 0xee
 8001136:	d909      	bls.n	800114c <menu_parser+0xac>
 8001138:	4b4b      	ldr	r3, [pc, #300]	; (8001268 <menu_parser+0x1c8>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	2bff      	cmp	r3, #255	; 0xff
 800113e:	d805      	bhi.n	800114c <menu_parser+0xac>
 8001140:	4b49      	ldr	r3, [pc, #292]	; (8001268 <menu_parser+0x1c8>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	3310      	adds	r3, #16
 8001146:	b29a      	uxth	r2, r3
 8001148:	4b47      	ldr	r3, [pc, #284]	; (8001268 <menu_parser+0x1c8>)
 800114a:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>367)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
 800114c:	4b46      	ldr	r3, [pc, #280]	; (8001268 <menu_parser+0x1c8>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8001154:	d30a      	bcc.n	800116c <menu_parser+0xcc>
 8001156:	4b44      	ldr	r3, [pc, #272]	; (8001268 <menu_parser+0x1c8>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800115e:	d205      	bcs.n	800116c <menu_parser+0xcc>
 8001160:	4b41      	ldr	r3, [pc, #260]	; (8001268 <menu_parser+0x1c8>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	3310      	adds	r3, #16
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b3f      	ldr	r3, [pc, #252]	; (8001268 <menu_parser+0x1c8>)
 800116a:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>495)&&(menu_counter<512 )) menu_counter=menu_counter+16; // skip
 800116c:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <menu_parser+0x1c8>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8001174:	d30a      	bcc.n	800118c <menu_parser+0xec>
 8001176:	4b3c      	ldr	r3, [pc, #240]	; (8001268 <menu_parser+0x1c8>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800117e:	d205      	bcs.n	800118c <menu_parser+0xec>
 8001180:	4b39      	ldr	r3, [pc, #228]	; (8001268 <menu_parser+0x1c8>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	3310      	adds	r3, #16
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b37      	ldr	r3, [pc, #220]	; (8001268 <menu_parser+0x1c8>)
 800118a:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>623)&&(menu_counter<640 )) menu_counter=menu_counter+16; // skip
 800118c:	4b36      	ldr	r3, [pc, #216]	; (8001268 <menu_parser+0x1c8>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8001194:	d30a      	bcc.n	80011ac <menu_parser+0x10c>
 8001196:	4b34      	ldr	r3, [pc, #208]	; (8001268 <menu_parser+0x1c8>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800119e:	d205      	bcs.n	80011ac <menu_parser+0x10c>
 80011a0:	4b31      	ldr	r3, [pc, #196]	; (8001268 <menu_parser+0x1c8>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	3310      	adds	r3, #16
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <menu_parser+0x1c8>)
 80011aa:	801a      	strh	r2, [r3, #0]
			    menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	041a      	lsls	r2, r3, #16
 80011b0:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <menu_parser+0x1c8>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011b8:	18d1      	adds	r1, r2, r3
 80011ba:	4b2c      	ldr	r3, [pc, #176]	; (800126c <menu_parser+0x1cc>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <menu_parser+0x1d0>)
 80011c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    			    memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <menu_parser+0x1cc>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b29      	ldr	r3, [pc, #164]	; (8001274 <menu_parser+0x1d4>)
 80011d0:	18d0      	adds	r0, r2, r3
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <menu_parser+0x1bc>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	3b02      	subs	r3, #2
 80011d8:	4a21      	ldr	r2, [pc, #132]	; (8001260 <menu_parser+0x1c0>)
 80011da:	4413      	add	r3, r2
 80011dc:	2202      	movs	r2, #2
 80011de:	4619      	mov	r1, r3
 80011e0:	f00b fb40 	bl	800c864 <memcpy>
        			    menu_title_count++;
 80011e4:	4b21      	ldr	r3, [pc, #132]	; (800126c <menu_parser+0x1cc>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <menu_parser+0x1cc>)
 80011ee:	701a      	strb	r2, [r3, #0]
			    menu_counter++;
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <menu_parser+0x1c8>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <menu_parser+0x1c8>)
 80011fa:	801a      	strh	r2, [r3, #0]
			    space_check=0;
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <menu_parser+0x1d8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
			    string_search=string_search+8;     // advance search position
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <menu_parser+0x1bc>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	3308      	adds	r3, #8
 8001208:	b29a      	uxth	r2, r3
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <menu_parser+0x1bc>)
 800120c:	801a      	strh	r2, [r3, #0]
    			    return;}
 800120e:	e01e      	b.n	800124e <menu_parser+0x1ae>
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 8001210:	7dfb      	ldrb	r3, [r7, #23]
 8001212:	3301      	adds	r3, #1
 8001214:	75fb      	strb	r3, [r7, #23]
 8001216:	7dfb      	ldrb	r3, [r7, #23]
 8001218:	2b36      	cmp	r3, #54	; 0x36
 800121a:	f67f af69 	bls.w	80010f0 <menu_parser+0x50>
    	    }
        if (space_check>1)  menu_counter++;   //this is ok
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <menu_parser+0x1d8>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d905      	bls.n	8001232 <menu_parser+0x192>
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <menu_parser+0x1c8>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	b29a      	uxth	r2, r3
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <menu_parser+0x1c8>)
 8001230:	801a      	strh	r2, [r3, #0]
	    space_check++;  // count empty spaces or fill characters
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <menu_parser+0x1d8>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <menu_parser+0x1d8>)
 800123c:	701a      	strb	r2, [r3, #0]
	    string_search++;
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <menu_parser+0x1bc>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	b29a      	uxth	r2, r3
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <menu_parser+0x1bc>)
 8001248:	801a      	strh	r2, [r3, #0]
	    return;
 800124a:	e000      	b.n	800124e <menu_parser+0x1ae>
		    return;    }    // check if bigger than search area
 800124c:	bf00      	nop

    }
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	0800ce50 	.word	0x0800ce50
 8001258:	0800ce58 	.word	0x0800ce58
 800125c:	2000d14c 	.word	0x2000d14c
 8001260:	0800d29c 	.word	0x0800d29c
 8001264:	20000230 	.word	0x20000230
 8001268:	2000d14e 	.word	0x2000d14e
 800126c:	2000d151 	.word	0x2000d151
 8001270:	2000d154 	.word	0x2000d154
 8001274:	2000d554 	.word	0x2000d554
 8001278:	2000d150 	.word	0x2000d150

0800127c <patch_target_parse>:

void patch_target_parse(void){    // records ptr for target options , works ok
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
uint8_t skip=0;
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
		uint8_t counter;

for (counter=0;counter<20;counter++){
 8001286:	2300      	movs	r3, #0
 8001288:	73bb      	strb	r3, [r7, #14]
 800128a:	e0f5      	b.n	8001478 <patch_target_parse+0x1fc>

			uint16_t* output_hold;
			uint8_t input_hold=patch[counter].input1;
 800128c:	7bba      	ldrb	r2, [r7, #14]
 800128e:	497f      	ldr	r1, [pc, #508]	; (800148c <patch_target_parse+0x210>)
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	440b      	add	r3, r1
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	717b      	strb	r3, [r7, #5]
			if (patch[counter].input1>=menu_lookup_count) patch[counter].input1=0;    // limit
 800129e:	7bba      	ldrb	r2, [r7, #14]
 80012a0:	497a      	ldr	r1, [pc, #488]	; (800148c <patch_target_parse+0x210>)
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	440b      	add	r3, r1
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b36      	cmp	r3, #54	; 0x36
 80012b0:	d908      	bls.n	80012c4 <patch_target_parse+0x48>
 80012b2:	7bba      	ldrb	r2, [r7, #14]
 80012b4:	4975      	ldr	r1, [pc, #468]	; (800148c <patch_target_parse+0x210>)
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	440b      	add	r3, r1
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]

			switch(input_hold&3){     // lfo now , can add adsr later
 80012c4:	797b      	ldrb	r3, [r7, #5]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d840      	bhi.n	8001350 <patch_target_parse+0xd4>
 80012ce:	a201      	add	r2, pc, #4	; (adr r2, 80012d4 <patch_target_parse+0x58>)
 80012d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d4:	080012e5 	.word	0x080012e5
 80012d8:	080012ff 	.word	0x080012ff
 80012dc:	0800131b 	.word	0x0800131b
 80012e0:	08001337 	.word	0x08001337

						case 0:   output_hold=&LFO[input_hold>>2].out[0];break;
 80012e4:	797b      	ldrb	r3, [r7, #5]
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	461a      	mov	r2, r3
 80012ec:	4613      	mov	r3, r2
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4a66      	ldr	r2, [pc, #408]	; (8001490 <patch_target_parse+0x214>)
 80012f6:	4413      	add	r3, r2
 80012f8:	3306      	adds	r3, #6
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	e028      	b.n	8001350 <patch_target_parse+0xd4>
						case 1:   output_hold=&LFO[input_hold>>2].out_saw[0];break;
 80012fe:	797b      	ldrb	r3, [r7, #5]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	b2db      	uxtb	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	4613      	mov	r3, r2
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	4413      	add	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	3318      	adds	r3, #24
 8001310:	4a5f      	ldr	r2, [pc, #380]	; (8001490 <patch_target_parse+0x214>)
 8001312:	4413      	add	r3, r2
 8001314:	3302      	adds	r3, #2
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	e01a      	b.n	8001350 <patch_target_parse+0xd4>
						case 2:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 800131a:	797b      	ldrb	r3, [r7, #5]
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	b2db      	uxtb	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	4613      	mov	r3, r2
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	4413      	add	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	3328      	adds	r3, #40	; 0x28
 800132c:	4a58      	ldr	r2, [pc, #352]	; (8001490 <patch_target_parse+0x214>)
 800132e:	4413      	add	r3, r2
 8001330:	3306      	adds	r3, #6
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	e00c      	b.n	8001350 <patch_target_parse+0xd4>
						//case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
						case 3:   output_hold=&LFO_square[input_hold>>2].out[0];break;
 8001336:	797b      	ldrb	r3, [r7, #5]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	b2db      	uxtb	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4a53      	ldr	r2, [pc, #332]	; (8001494 <patch_target_parse+0x218>)
 8001348:	4413      	add	r3, r2
 800134a:	3304      	adds	r3, #4
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	bf00      	nop
			}

			patch[counter].in1_ptr=output_hold;   // sets input pointer to first sample , default is lfo[0].out [0]
 8001350:	7bba      	ldrb	r2, [r7, #14]
 8001352:	494e      	ldr	r1, [pc, #312]	; (800148c <patch_target_parse+0x210>)
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	440b      	add	r3, r1
 800135e:	3320      	adds	r3, #32
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	601a      	str	r2, [r3, #0]
			if (patch[counter].target) {  // test if above zero
 8001364:	7bba      	ldrb	r2, [r7, #14]
 8001366:	4949      	ldr	r1, [pc, #292]	; (800148c <patch_target_parse+0x210>)
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	440b      	add	r3, r1
 8001372:	3301      	adds	r3, #1
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d07b      	beq.n	8001472 <patch_target_parse+0x1f6>
				uint8_t target_input=patch[counter].target; // copy to avoid messed up pointer
 800137a:	7bba      	ldrb	r2, [r7, #14]
 800137c:	4943      	ldr	r1, [pc, #268]	; (800148c <patch_target_parse+0x210>)
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	440b      	add	r3, r1
 8001388:	3301      	adds	r3, #1
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	e00a      	b.n	80013aa <patch_target_parse+0x12e>
					if (patch_skip_list[target_input]==1)  target_input++;
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	4a40      	ldr	r2, [pc, #256]	; (8001498 <patch_target_parse+0x21c>)
 8001398:	5cd3      	ldrb	r3, [r2, r3]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d102      	bne.n	80013a4 <patch_target_parse+0x128>
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	3301      	adds	r3, #1
 80013a2:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	3301      	adds	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	2b36      	cmp	r3, #54	; 0x36
 80013ae:	d9f1      	bls.n	8001394 <patch_target_parse+0x118>
				}  // test against list and skip option if on 1
				if (target_input>(menu_lookup_count-1)) target_input=menu_lookup_count-1;
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b36      	cmp	r3, #54	; 0x36
 80013b4:	d901      	bls.n	80013ba <patch_target_parse+0x13e>
 80013b6:	2336      	movs	r3, #54	; 0x36
 80013b8:	71fb      	strb	r3, [r7, #7]
				if (target_input!=35)  {     // make target index is not selected
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b23      	cmp	r3, #35	; 0x23
 80013be:	d04e      	beq.n	800145e <patch_target_parse+0x1e2>
			patch[counter].target=target_input; // write back corrected value
 80013c0:	7bba      	ldrb	r2, [r7, #14]
 80013c2:	4932      	ldr	r1, [pc, #200]	; (800148c <patch_target_parse+0x210>)
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	440b      	add	r3, r1
 80013ce:	3301      	adds	r3, #1
 80013d0:	79fa      	ldrb	r2, [r7, #7]
 80013d2:	701a      	strb	r2, [r3, #0]

			uint8_t target_index=patch[counter].target_index;
 80013d4:	7bba      	ldrb	r2, [r7, #14]
 80013d6:	492d      	ldr	r1, [pc, #180]	; (800148c <patch_target_parse+0x210>)
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	440b      	add	r3, r1
 80013e2:	3302      	adds	r3, #2
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	71bb      	strb	r3, [r7, #6]
			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	4a2c      	ldr	r2, [pc, #176]	; (800149c <patch_target_parse+0x220>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	79ba      	ldrb	r2, [r7, #6]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d903      	bls.n	80013fc <patch_target_parse+0x180>
			{	target_index=menu_vars_index_limit[target_index]; }
 80013f4:	79bb      	ldrb	r3, [r7, #6]
 80013f6:	4a29      	ldr	r2, [pc, #164]	; (800149c <patch_target_parse+0x220>)
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
 80013fa:	71bb      	strb	r3, [r7, #6]
			patch[counter].target_index=target_index;
 80013fc:	7bba      	ldrb	r2, [r7, #14]
 80013fe:	4923      	ldr	r1, [pc, #140]	; (800148c <patch_target_parse+0x210>)
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	440b      	add	r3, r1
 800140a:	3302      	adds	r3, #2
 800140c:	79ba      	ldrb	r2, [r7, #6]
 800140e:	701a      	strb	r2, [r3, #0]
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	4a23      	ldr	r2, [pc, #140]	; (80014a0 <patch_target_parse+0x224>)
 8001414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001418:	79ba      	ldrb	r2, [r7, #6]
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fbbb 	bl	8000b98 <menu_vars>
 8001422:	6038      	str	r0, [r7, #0]
			if (target_out_ptr)           {patch[counter].out_ptr =target_out_ptr;     // write ptr
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d023      	beq.n	8001472 <patch_target_parse+0x1f6>
 800142a:	7bba      	ldrb	r2, [r7, #14]
 800142c:	4917      	ldr	r1, [pc, #92]	; (800148c <patch_target_parse+0x210>)
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	440b      	add	r3, r1
 8001438:	331c      	adds	r3, #28
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	601a      	str	r2, [r3, #0]
			patch[counter].limiter=menu_vars_limiter[menu_vars_ref]; }      // writes limiter value for particular patch , deosnt save
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <patch_target_parse+0x228>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	4619      	mov	r1, r3
 8001444:	7bba      	ldrb	r2, [r7, #14]
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <patch_target_parse+0x22c>)
 8001448:	5c58      	ldrb	r0, [r3, r1]
 800144a:	4910      	ldr	r1, [pc, #64]	; (800148c <patch_target_parse+0x210>)
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	440b      	add	r3, r1
 8001456:	3324      	adds	r3, #36	; 0x24
 8001458:	4602      	mov	r2, r0
 800145a:	701a      	strb	r2, [r3, #0]
 800145c:	e009      	b.n	8001472 <patch_target_parse+0x1f6>
				}
				else patch[counter].target=0;  // write back 0 if failed
 800145e:	7bba      	ldrb	r2, [r7, #14]
 8001460:	490a      	ldr	r1, [pc, #40]	; (800148c <patch_target_parse+0x210>)
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	440b      	add	r3, r1
 800146c:	3301      	adds	r3, #1
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
for (counter=0;counter<20;counter++){
 8001472:	7bbb      	ldrb	r3, [r7, #14]
 8001474:	3301      	adds	r3, #1
 8001476:	73bb      	strb	r3, [r7, #14]
 8001478:	7bbb      	ldrb	r3, [r7, #14]
 800147a:	2b13      	cmp	r3, #19
 800147c:	f67f af06 	bls.w	800128c <patch_target_parse+0x10>
			}
		}
	}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000ce2c 	.word	0x2000ce2c
 8001490:	2000bfc4 	.word	0x2000bfc4
 8001494:	2000c2a8 	.word	0x2000c2a8
 8001498:	0800ddc4 	.word	0x0800ddc4
 800149c:	0800dd54 	.word	0x0800dd54
 80014a0:	20000230 	.word	0x20000230
 80014a4:	2000f791 	.word	0x2000f791
 80014a8:	0800dd8c 	.word	0x0800dd8c

080014ac <patch_target_replace>:
			*ptr_to_modify =var_replaced;   // replace original value,ok
		}
	}
}

	void patch_target_replace(void){					// sttaight value replace  ,ok
 80014ac:	b490      	push	{r4, r7}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
	    uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 80014b2:	4b36      	ldr	r3, [pc, #216]	; (800158c <patch_target_replace+0xe0>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	737b      	strb	r3, [r7, #13]
	    uint8_t counter;
	    for (counter=0;counter<20;counter++){
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
 80014c0:	e05a      	b.n	8001578 <patch_target_replace+0xcc>



		    if (patch[counter].target) {         // check first for enable
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	4932      	ldr	r1, [pc, #200]	; (8001590 <patch_target_replace+0xe4>)
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	440b      	add	r3, r1
 80014d0:	3301      	adds	r3, #1
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d04c      	beq.n	8001572 <patch_target_replace+0xc6>

			    patch[counter].output[loop_position]=*(patch[counter].in1_ptr+(loop_position));   //write output here
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	492d      	ldr	r1, [pc, #180]	; (8001590 <patch_target_replace+0xe4>)
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	440b      	add	r3, r1
 80014e6:	3320      	adds	r3, #32
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	7b7b      	ldrb	r3, [r7, #13]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	7b79      	ldrb	r1, [r7, #13]
 80014f4:	881c      	ldrh	r4, [r3, #0]
 80014f6:	4826      	ldr	r0, [pc, #152]	; (8001590 <patch_target_replace+0xe4>)
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4403      	add	r3, r0
 8001506:	4622      	mov	r2, r4
 8001508:	80da      	strh	r2, [r3, #6]


			    uint8_t  *ptr_to_modify =patch[counter].out_ptr;       // select address , not always 8 bit ,ok
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	4920      	ldr	r1, [pc, #128]	; (8001590 <patch_target_replace+0xe4>)
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	440b      	add	r3, r1
 8001518:	331c      	adds	r3, #28
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	60bb      	str	r3, [r7, #8]
			    uint16_t lfo_out_temp=  (patch[counter].output [loop_position])>>8;  // 0-256,
 800151e:	7bfa      	ldrb	r2, [r7, #15]
 8001520:	7b79      	ldrb	r1, [r7, #13]
 8001522:	481b      	ldr	r0, [pc, #108]	; (8001590 <patch_target_replace+0xe4>)
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4403      	add	r3, r0
 8001532:	88db      	ldrh	r3, [r3, #6]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	80fb      	strh	r3, [r7, #6]
			    uint8_t lfo_mod1=ptr_to_modify; //ok
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	717b      	strb	r3, [r7, #5]

			    uint8_t  var_replaced =  lfo_out_temp &255 ;   // grab lfo out *    data to be modfied
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	73bb      	strb	r3, [r7, #14]

			    if (var_replaced>patch[counter].limiter) var_replaced=patch[counter].limiter;  // limit lfo output
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	4913      	ldr	r1, [pc, #76]	; (8001590 <patch_target_replace+0xe4>)
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	3324      	adds	r3, #36	; 0x24
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	7bba      	ldrb	r2, [r7, #14]
 8001554:	429a      	cmp	r2, r3
 8001556:	d909      	bls.n	800156c <patch_target_replace+0xc0>
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	490d      	ldr	r1, [pc, #52]	; (8001590 <patch_target_replace+0xe4>)
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	440b      	add	r3, r1
 8001566:	3324      	adds	r3, #36	; 0x24
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	73bb      	strb	r3, [r7, #14]

			    *ptr_to_modify =var_replaced;   // replace original value,ok
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	7bba      	ldrb	r2, [r7, #14]
 8001570:	701a      	strb	r2, [r3, #0]
	    for (counter=0;counter<20;counter++){
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	3301      	adds	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	2b13      	cmp	r3, #19
 800157c:	d9a1      	bls.n	80014c2 <patch_target_replace+0x16>
		    }
	    }
    }
 800157e:	bf00      	nop
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bc90      	pop	{r4, r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	2000d768 	.word	0x2000d768
 8001590:	2000ce2c 	.word	0x2000ce2c

08001594 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable
	{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
		if(TIM10==htim->Instance){     // send spi to display , ok
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a2e      	ldr	r2, [pc, #184]	; (800165c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d118      	bne.n	80015d8 <HAL_TIM_PeriodElapsedCallback+0x44>
		    HAL_SPI_Transmit_DMA(&hspi2,spi_tx_block+block_counter,54);
 80015a6:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80015ae:	4413      	add	r3, r2
 80015b0:	2236      	movs	r2, #54	; 0x36
 80015b2:	4619      	mov	r1, r3
 80015b4:	482c      	ldr	r0, [pc, #176]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80015b6:	f008 ff61 	bl	800a47c <HAL_SPI_Transmit_DMA>
		    			if (block_counter<3456) block_counter=block_counter+54; else block_counter=0;
 80015ba:	4b29      	ldr	r3, [pc, #164]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 80015c2:	d206      	bcs.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x3e>
 80015c4:	4b26      	ldr	r3, [pc, #152]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	3336      	adds	r3, #54	; 0x36
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015ce:	801a      	strh	r2, [r3, #0]
 80015d0:	e002      	b.n	80015d8 <HAL_TIM_PeriodElapsedCallback+0x44>
 80015d2:	4b23      	ldr	r3, [pc, #140]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	801a      	strh	r2, [r3, #0]

		}
		if(TIM3==htim->Instance)			//
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a23      	ldr	r2, [pc, #140]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d137      	bne.n	8001652 <HAL_TIM_PeriodElapsedCallback+0xbe>
	{
		    time_proc++;
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	3301      	adds	r3, #1
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4b21      	ldr	r3, [pc, #132]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80015ec:	801a      	strh	r2, [r3, #0]
			play_hold=play_sample[sample_point<<1]; // this is 2
 80015ee:	4b21      	ldr	r3, [pc, #132]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4a20      	ldr	r2, [pc, #128]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80015f8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80015fc:	4b1f      	ldr	r3, [pc, #124]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80015fe:	801a      	strh	r2, [r3, #0]
			play_hold2=play_sample[(sample_point<<1)+1];
 8001600:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	3301      	adds	r3, #1
 800160a:	4a1b      	ldr	r2, [pc, #108]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800160c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001612:	801a      	strh	r2, [r3, #0]
			if (sample_point>1022)    {bank_write=2;sample_point=0;} else sample_point++;
 8001614:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	b29b      	uxth	r3, r3
 800161a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800161e:	4293      	cmp	r3, r2
 8001620:	d906      	bls.n	8001630 <HAL_TIM_PeriodElapsedCallback+0x9c>
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001624:	2202      	movs	r2, #2
 8001626:	801a      	strh	r2, [r3, #0]
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800162a:	2200      	movs	r2, #0
 800162c:	801a      	strh	r2, [r3, #0]
 800162e:	e006      	b.n	800163e <HAL_TIM_PeriodElapsedCallback+0xaa>
 8001630:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	b29b      	uxth	r3, r3
 8001636:	3301      	adds	r3, #1
 8001638:	b29a      	uxth	r2, r3
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800163c:	801a      	strh	r2, [r3, #0]

	TIM3->CCR1=play_hold ;  // keep readin sample storage
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	b29a      	uxth	r2, r3
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001646:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=play_hold2 ;   // load up counter on ch2
 8001648:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	b29a      	uxth	r2, r3
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001650:	639a      	str	r2, [r3, #56]	; 0x38
	}
	}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40014400 	.word	0x40014400
 8001660:	2001099c 	.word	0x2001099c
 8001664:	2000f99c 	.word	0x2000f99c
 8001668:	20011824 	.word	0x20011824
 800166c:	40000400 	.word	0x40000400
 8001670:	2000bfc0 	.word	0x2000bfc0
 8001674:	200099c8 	.word	0x200099c8
 8001678:	200089c4 	.word	0x200089c4
 800167c:	200099ca 	.word	0x200099ca
 8001680:	200099cc 	.word	0x200099cc
 8001684:	2000014e 	.word	0x2000014e

08001688 <analoginputloopb>:



    void analoginputloopb(void){  //works ,getting obsolete
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0


	    menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 800168c:	4b32      	ldr	r3, [pc, #200]	; (8001758 <analoginputloopb+0xd0>)
 800168e:	889b      	ldrh	r3, [r3, #4]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	b29b      	uxth	r3, r3
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4b31      	ldr	r3, [pc, #196]	; (800175c <analoginputloopb+0xd4>)
 8001698:	701a      	strb	r2, [r3, #0]
		//    menuSelectX=cursor_menu[2]&15;  // Y select inside page
        		    cursor_menu[1]=0;
 800169a:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <analoginputloopb+0xd0>)
 800169c:	2200      	movs	r2, #0
 800169e:	805a      	strh	r2, [r3, #2]
   		    cursor_menu[2]=enc2_dir;
 80016a0:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <analoginputloopb+0xd8>)
 80016a2:	881a      	ldrh	r2, [r3, #0]
 80016a4:	4b2c      	ldr	r3, [pc, #176]	; (8001758 <analoginputloopb+0xd0>)
 80016a6:	809a      	strh	r2, [r3, #4]

	    enc_temp=(((TIM2->CNT)+32767)>>1)&65535		;  // read counter tim2 ,divider ok
 80016a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80016b2:	337f      	adds	r3, #127	; 0x7f
 80016b4:	085b      	lsrs	r3, r3, #1
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <analoginputloopb+0xdc>)
 80016ba:	801a      	strh	r2, [r3, #0]
	 //   enc2_store[enc2_store_count]=(((TIM4->CNT)+32767)>>1)&65535;  // read counter tim4, noisy
	    enc2_temp=(((TIM4->CNT)+32767)>>1)&65535;
 80016bc:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <analoginputloopb+0xe0>)
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80016c4:	337f      	adds	r3, #127	; 0x7f
 80016c6:	085b      	lsrs	r3, r3, #1
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	4b28      	ldr	r3, [pc, #160]	; (800176c <analoginputloopb+0xe4>)
 80016cc:	801a      	strh	r2, [r3, #0]
	    enc2_store3=enc2_store2>>2;
	    enc2_temp=enc2_store3;
*/


	    if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;   //menu itme value change
 80016ce:	4b25      	ldr	r3, [pc, #148]	; (8001764 <analoginputloopb+0xdc>)
 80016d0:	881a      	ldrh	r2, [r3, #0]
 80016d2:	4b27      	ldr	r3, [pc, #156]	; (8001770 <analoginputloopb+0xe8>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d908      	bls.n	80016ec <analoginputloopb+0x64>
 80016da:	4b26      	ldr	r3, [pc, #152]	; (8001774 <analoginputloopb+0xec>)
 80016dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	b21a      	sxth	r2, r3
 80016e8:	4b22      	ldr	r3, [pc, #136]	; (8001774 <analoginputloopb+0xec>)
 80016ea:	801a      	strh	r2, [r3, #0]
	    if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 80016ec:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <analoginputloopb+0xdc>)
 80016ee:	881a      	ldrh	r2, [r3, #0]
 80016f0:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <analoginputloopb+0xe8>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d208      	bcs.n	800170a <analoginputloopb+0x82>
 80016f8:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <analoginputloopb+0xec>)
 80016fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3301      	adds	r3, #1
 8001702:	b29b      	uxth	r3, r3
 8001704:	b21a      	sxth	r2, r3
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <analoginputloopb+0xec>)
 8001708:	801a      	strh	r2, [r3, #0]


   //   if (enc2_temp>511) enc2_temp=511;  //mem overflow somewhere

      enc2_dir=65535-enc2_temp; //temp to try source data
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <analoginputloopb+0xe4>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	43db      	mvns	r3, r3
 8001710:	b29a      	uxth	r2, r3
 8001712:	4b13      	ldr	r3, [pc, #76]	; (8001760 <analoginputloopb+0xd8>)
 8001714:	801a      	strh	r2, [r3, #0]


      if (enc_dir>32760) enc_dir=0;
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <analoginputloopb+0xec>)
 8001718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171c:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001720:	4293      	cmp	r3, r2
 8001722:	dd02      	ble.n	800172a <analoginputloopb+0xa2>
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <analoginputloopb+0xec>)
 8001726:	2200      	movs	r2, #0
 8001728:	801a      	strh	r2, [r3, #0]
			    if (enc_dir<0) enc_dir=16383;
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <analoginputloopb+0xec>)
 800172c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001730:	2b00      	cmp	r3, #0
 8001732:	da03      	bge.n	800173c <analoginputloopb+0xb4>
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <analoginputloopb+0xec>)
 8001736:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800173a:	801a      	strh	r2, [r3, #0]

			    enc_tempB=enc_temp;
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <analoginputloopb+0xdc>)
 800173e:	881a      	ldrh	r2, [r3, #0]
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <analoginputloopb+0xe8>)
 8001742:	801a      	strh	r2, [r3, #0]

					    enc2_tempB=enc2_temp; // to effective as counter not getting reset
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <analoginputloopb+0xe4>)
 8001746:	881a      	ldrh	r2, [r3, #0]
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <analoginputloopb+0xf0>)
 800174a:	801a      	strh	r2, [r3, #0]


 //   potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count


    }
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	2000b210 	.word	0x2000b210
 800175c:	200089ba 	.word	0x200089ba
 8001760:	2000b1fa 	.word	0x2000b1fa
 8001764:	2000b1f2 	.word	0x2000b1f2
 8001768:	40000800 	.word	0x40000800
 800176c:	2000b1f6 	.word	0x2000b1f6
 8001770:	2000b1f4 	.word	0x2000b1f4
 8001774:	2000b1fc 	.word	0x2000b1fc
 8001778:	2000b1f8 	.word	0x2000b1f8

0800177c <note_reset>:


void note_reset (void){          // reset deafult values before modulation , in case it gets left  with no modulator
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

	note[0].velocity=255;note[1].velocity=255;note[2].velocity=255;note[3].velocity=255;note[4].velocity=255;note[5].velocity=255;note[6].velocity=255
 8001780:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <note_reset+0x78>)
 8001782:	22ff      	movs	r2, #255	; 0xff
 8001784:	71da      	strb	r2, [r3, #7]
 8001786:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <note_reset+0x78>)
 8001788:	22ff      	movs	r2, #255	; 0xff
 800178a:	755a      	strb	r2, [r3, #21]
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <note_reset+0x78>)
 800178e:	22ff      	movs	r2, #255	; 0xff
 8001790:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001794:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <note_reset+0x78>)
 8001796:	22ff      	movs	r2, #255	; 0xff
 8001798:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <note_reset+0x78>)
 800179e:	22ff      	movs	r2, #255	; 0xff
 80017a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <note_reset+0x78>)
 80017a6:	22ff      	movs	r2, #255	; 0xff
 80017a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <note_reset+0x78>)
 80017ae:	22ff      	movs	r2, #255	; 0xff
 80017b0:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
																;note[0].detune=0;note[1].detune=0;note[2].detune=0;note[3].detune=0;note[4].detune=0;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <note_reset+0x78>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	721a      	strb	r2, [r3, #8]
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <note_reset+0x78>)
 80017bc:	2200      	movs	r2, #0
 80017be:	759a      	strb	r2, [r3, #22]
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <note_reset+0x78>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <note_reset+0x78>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <note_reset+0x78>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	note[5].detune=0;note[6].detune=0;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <note_reset+0x78>)
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <note_reset+0x78>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c


}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000158 	.word	0x20000158

080017f8 <main_initial>:

void main_initial(void){
 80017f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fa:	b0db      	sub	sp, #364	; 0x16c
 80017fc:	af04      	add	r7, sp, #16
	const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 80017fe:	4bc4      	ldr	r3, [pc, #784]	; (8001b10 <main_initial+0x318>)
 8001800:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150



	HAL_DMA_Init(&hdma_spi2_tx);
 8001804:	48c3      	ldr	r0, [pc, #780]	; (8001b14 <main_initial+0x31c>)
 8001806:	f006 f923 	bl	8007a50 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi1_rx);
 800180a:	48c3      	ldr	r0, [pc, #780]	; (8001b18 <main_initial+0x320>)
 800180c:	f006 f920 	bl	8007a50 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi1_tx);
 8001810:	48c2      	ldr	r0, [pc, #776]	; (8001b1c <main_initial+0x324>)
 8001812:	f006 f91d 	bl	8007a50 <HAL_DMA_Init>


	//LL_SPI_Enable(SPI2);

	  HAL_SPI_Init(&hspi2); // write to register hspi2
 8001816:	48c2      	ldr	r0, [pc, #776]	; (8001b20 <main_initial+0x328>)
 8001818:	f008 fac8 	bl	8009dac <HAL_SPI_Init>
	  HAL_SPI_Init(&hspi1); // write to register hspi2
 800181c:	48c1      	ldr	r0, [pc, #772]	; (8001b24 <main_initial+0x32c>)
 800181e:	f008 fac5 	bl	8009dac <HAL_SPI_Init>
	  // lcd_init(); // keep this late or have issues
	//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
	//TIM1->CCER=0;
	HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8001822:	48c1      	ldr	r0, [pc, #772]	; (8001b28 <main_initial+0x330>)
 8001824:	f009 fb14 	bl	800ae50 <HAL_TIM_Base_Start_IT>
	TIM3->CCER=0;
 8001828:	4bc0      	ldr	r3, [pc, #768]	; (8001b2c <main_initial+0x334>)
 800182a:	2200      	movs	r2, #0
 800182c:	621a      	str	r2, [r3, #32]
	HAL_TIM_Base_Start(&htim2);
 800182e:	48c0      	ldr	r0, [pc, #768]	; (8001b30 <main_initial+0x338>)
 8001830:	f009 fab4 	bl	800ad9c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8001834:	48bf      	ldr	r0, [pc, #764]	; (8001b34 <main_initial+0x33c>)
 8001836:	f009 fab1 	bl	800ad9c <HAL_TIM_Base_Start>
	//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800183a:	2100      	movs	r1, #0
 800183c:	48ba      	ldr	r0, [pc, #744]	; (8001b28 <main_initial+0x330>)
 800183e:	f009 fc1b 	bl	800b078 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001842:	2104      	movs	r1, #4
 8001844:	48b8      	ldr	r0, [pc, #736]	; (8001b28 <main_initial+0x330>)
 8001846:	f009 fc17 	bl	800b078 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
	TIM2->CNT=32000;
 800184a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800184e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001852:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_ADC_Start(&hadc1);
 8001854:	48b8      	ldr	r0, [pc, #736]	; (8001b38 <main_initial+0x340>)
 8001856:	f004 ffbd 	bl	80067d4 <HAL_ADC_Start>
	HAL_ADC_Start_DMA(&hadc1, adc_source, 3072); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 800185a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800185e:	49b7      	ldr	r1, [pc, #732]	; (8001b3c <main_initial+0x344>)
 8001860:	48b5      	ldr	r0, [pc, #724]	; (8001b38 <main_initial+0x340>)
 8001862:	f005 f8f7 	bl	8006a54 <HAL_ADC_Start_DMA>



	HAL_I2C_MspInit(&hi2c2);
 8001866:	48b6      	ldr	r0, [pc, #728]	; (8001b40 <main_initial+0x348>)
 8001868:	f004 fb44 	bl	8005ef4 <HAL_I2C_MspInit>
	uint8_t	send_spi1[260]={0x02,0,1,0,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page program ,24bit(address)  +1-255 byte data  (page)
 800186c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001870:	f5a3 768a 	sub.w	r6, r3, #276	; 0x114
 8001874:	4bb3      	ldr	r3, [pc, #716]	; (8001b44 <main_initial+0x34c>)
 8001876:	4634      	mov	r4, r6
 8001878:	461d      	mov	r5, r3
 800187a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800187e:	682b      	ldr	r3, [r5, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	8022      	strh	r2, [r4, #0]
 8001884:	3402      	adds	r4, #2
 8001886:	0c1b      	lsrs	r3, r3, #16
 8001888:	7023      	strb	r3, [r4, #0]
 800188a:	f106 0313 	add.w	r3, r6, #19
 800188e:	22f1      	movs	r2, #241	; 0xf1
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f00a fff4 	bl	800c880 <memset>
	HAL_SPI_Receive(&hspi1, return_spi1, 2, 1000);   // manuf return sif correct , 0xEF,0x17 which is correct, then repeats when more request

	*/


	HAL_Delay(5);
 8001898:	2005      	movs	r0, #5
 800189a:	f004 ff33 	bl	8006704 <HAL_Delay>

	//               ----                  16Mbyte   flash   , w25q128   -----  16M (24bit) * 8bits   ( 1 page 256 bytes)
		send_spi1[0]=0x06; //enable write  , only lasts for single operation
 800189e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80018a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80018a6:	2206      	movs	r2, #6
 80018a8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // start
 80018aa:	2200      	movs	r2, #0
 80018ac:	2110      	movs	r1, #16
 80018ae:	48a6      	ldr	r0, [pc, #664]	; (8001b48 <main_initial+0x350>)
 80018b0:	f006 fe32 	bl	8008518 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);       // enable write
 80018b4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80018b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018bc:	2201      	movs	r2, #1
 80018be:	4899      	ldr	r0, [pc, #612]	; (8001b24 <main_initial+0x32c>)
 80018c0:	f008 fafd 	bl	8009ebe <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // end
 80018c4:	2201      	movs	r2, #1
 80018c6:	2110      	movs	r1, #16
 80018c8:	489f      	ldr	r0, [pc, #636]	; (8001b48 <main_initial+0x350>)
 80018ca:	f006 fe25 	bl	8008518 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80018ce:	2005      	movs	r0, #5
 80018d0:	f004 ff18 	bl	8006704 <HAL_Delay>
		send_spi1[0]=0x52; //sector erase
 80018d4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80018d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80018dc:	2252      	movs	r2, #82	; 0x52
 80018de:	701a      	strb	r2, [r3, #0]
		send_spi1[1]=255; //24bit address msb
 80018e0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80018e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80018e8:	22ff      	movs	r2, #255	; 0xff
 80018ea:	705a      	strb	r2, [r3, #1]
		send_spi1[2]=128; //24bit address
 80018ec:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80018f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80018f4:	2280      	movs	r2, #128	; 0x80
 80018f6:	709a      	strb	r2, [r3, #2]
		send_spi1[3]=0; //24bit address lsb
 80018f8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80018fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001900:	2200      	movs	r2, #0
 8001902:	70da      	strb	r2, [r3, #3]
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 8001904:	2200      	movs	r2, #0
 8001906:	2110      	movs	r1, #16
 8001908:	488f      	ldr	r0, [pc, #572]	; (8001b48 <main_initial+0x350>)
 800190a:	f006 fe05 	bl	8008518 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works       4kbytes   (block erase=32kbytes)
 800190e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001916:	2204      	movs	r2, #4
 8001918:	4882      	ldr	r0, [pc, #520]	; (8001b24 <main_initial+0x32c>)
 800191a:	f008 fad0 	bl	8009ebe <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 800191e:	2201      	movs	r2, #1
 8001920:	2110      	movs	r1, #16
 8001922:	4889      	ldr	r0, [pc, #548]	; (8001b48 <main_initial+0x350>)
 8001924:	f006 fdf8 	bl	8008518 <HAL_GPIO_WritePin>


		send_spi1[0]=0x05; //read status register  if writing
 8001928:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800192c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001930:	2205      	movs	r2, #5
 8001932:	701a      	strb	r2, [r3, #0]
		send_spi1[1]=0; //2
 8001934:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001938:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800193c:	2200      	movs	r2, #0
 800193e:	705a      	strb	r2, [r3, #1]
		status_reg[1]=1; // set busy on
 8001940:	4b82      	ldr	r3, [pc, #520]	; (8001b4c <main_initial+0x354>)
 8001942:	2201      	movs	r2, #1
 8001944:	705a      	strb	r2, [r3, #1]

		while (status_reg[1]&1){								// check if write busy
 8001946:	e012      	b.n	800196e <main_initial+0x176>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2110      	movs	r1, #16
 800194c:	487e      	ldr	r0, [pc, #504]	; (8001b48 <main_initial+0x350>)
 800194e:	f006 fde3 	bl	8008518 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 8001952:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001956:	23c8      	movs	r3, #200	; 0xc8
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2302      	movs	r3, #2
 800195c:	4a7b      	ldr	r2, [pc, #492]	; (8001b4c <main_initial+0x354>)
 800195e:	4871      	ldr	r0, [pc, #452]	; (8001b24 <main_initial+0x32c>)
 8001960:	f008 fbe9 	bl	800a136 <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001964:	2201      	movs	r2, #1
 8001966:	2110      	movs	r1, #16
 8001968:	4877      	ldr	r0, [pc, #476]	; (8001b48 <main_initial+0x350>)
 800196a:	f006 fdd5 	bl	8008518 <HAL_GPIO_WritePin>
		while (status_reg[1]&1){								// check if write busy
 800196e:	4b77      	ldr	r3, [pc, #476]	; (8001b4c <main_initial+0x354>)
 8001970:	785b      	ldrb	r3, [r3, #1]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1e6      	bne.n	8001948 <main_initial+0x150>
		}


		send_spi1[0]=0x06; //enable write  , only lasts for single operation
 800197a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800197e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001982:	2206      	movs	r2, #6
 8001984:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // start
 8001986:	2200      	movs	r2, #0
 8001988:	2110      	movs	r1, #16
 800198a:	486f      	ldr	r0, [pc, #444]	; (8001b48 <main_initial+0x350>)
 800198c:	f006 fdc4 	bl	8008518 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);       // enable write
 8001990:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001998:	2201      	movs	r2, #1
 800199a:	4862      	ldr	r0, [pc, #392]	; (8001b24 <main_initial+0x32c>)
 800199c:	f008 fa8f 	bl	8009ebe <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // end
 80019a0:	2201      	movs	r2, #1
 80019a2:	2110      	movs	r1, #16
 80019a4:	4868      	ldr	r0, [pc, #416]	; (8001b48 <main_initial+0x350>)
 80019a6:	f006 fdb7 	bl	8008518 <HAL_GPIO_WritePin>
				HAL_Delay(5);
 80019aa:	2005      	movs	r0, #5
 80019ac:	f004 feaa 	bl	8006704 <HAL_Delay>
				send_spi1[0]=0x52; //sector erase
 80019b0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80019b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80019b8:	2252      	movs	r2, #82	; 0x52
 80019ba:	701a      	strb	r2, [r3, #0]
				send_spi1[1]=255; //24bit address msb
 80019bc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80019c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80019c4:	22ff      	movs	r2, #255	; 0xff
 80019c6:	705a      	strb	r2, [r3, #1]
				send_spi1[2]=0; //24bit address
 80019c8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80019cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80019d0:	2200      	movs	r2, #0
 80019d2:	709a      	strb	r2, [r3, #2]
				send_spi1[3]=0; //24bit address lsb
 80019d4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80019d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80019dc:	2200      	movs	r2, #0
 80019de:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 80019e0:	2200      	movs	r2, #0
 80019e2:	2110      	movs	r1, #16
 80019e4:	4858      	ldr	r0, [pc, #352]	; (8001b48 <main_initial+0x350>)
 80019e6:	f006 fd97 	bl	8008518 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works       4kbytes   (block erase=32kbytes)
 80019ea:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80019ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f2:	2204      	movs	r2, #4
 80019f4:	484b      	ldr	r0, [pc, #300]	; (8001b24 <main_initial+0x32c>)
 80019f6:	f008 fa62 	bl	8009ebe <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80019fa:	2201      	movs	r2, #1
 80019fc:	2110      	movs	r1, #16
 80019fe:	4852      	ldr	r0, [pc, #328]	; (8001b48 <main_initial+0x350>)
 8001a00:	f006 fd8a 	bl	8008518 <HAL_GPIO_WritePin>





		HAL_Delay(250);
 8001a04:	20fa      	movs	r0, #250	; 0xfa
 8001a06:	f004 fe7d 	bl	8006704 <HAL_Delay>
		send_spi1[0]=0x04; //disable write
 8001a0a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001a0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a12:	2204      	movs	r2, #4
 8001a14:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // low
 8001a16:	2200      	movs	r2, #0
 8001a18:	2110      	movs	r1, #16
 8001a1a:	484b      	ldr	r0, [pc, #300]	; (8001b48 <main_initial+0x350>)
 8001a1c:	f006 fd7c 	bl	8008518 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8001a20:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a28:	2201      	movs	r2, #1
 8001a2a:	483e      	ldr	r0, [pc, #248]	; (8001b24 <main_initial+0x32c>)
 8001a2c:	f008 fa47 	bl	8009ebe <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // high end
 8001a30:	2201      	movs	r2, #1
 8001a32:	2110      	movs	r1, #16
 8001a34:	4844      	ldr	r0, [pc, #272]	; (8001b48 <main_initial+0x350>)
 8001a36:	f006 fd6f 	bl	8008518 <HAL_GPIO_WritePin>





		byte_swap(RAM,sizeof(RAM));    // correct order
 8001a3a:	f248 01b8 	movw	r1, #32952	; 0x80b8
 8001a3e:	4844      	ldr	r0, [pc, #272]	; (8001b50 <main_initial+0x358>)
 8001a40:	f002 fed0 	bl	80047e4 <byte_swap>
				sample_save(511,RAM, sizeof(RAM));  // write sample no 255
 8001a44:	f248 02b8 	movw	r2, #32952	; 0x80b8
 8001a48:	4941      	ldr	r1, [pc, #260]	; (8001b50 <main_initial+0x358>)
 8001a4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a4e:	f002 fefd 	bl	800484c <sample_save>
				send_spi1[0]=sampler_ram_clear_test(511);  // test written ok
 8001a52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a56:	f002 fe6d 	bl	8004734 <sampler_ram_clear_test>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001a62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a66:	701a      	strb	r2, [r3, #0]





	uint8_t potSource2[64]={0};    // { [0 ... 112] = 64 };
 8001a68:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001a6c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	3304      	adds	r3, #4
 8001a76:	223c      	movs	r2, #60	; 0x3c
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f00a ff00 	bl	800c880 <memset>
	uint16_t mem_count2=0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
	uint16_t mem_counter=0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156

//flash_block_erase(0);



	flash_read_block2[0]=0x03; //read page 1
 8001a8c:	4b31      	ldr	r3, [pc, #196]	; (8001b54 <main_initial+0x35c>)
 8001a8e:	2203      	movs	r2, #3
 8001a90:	701a      	strb	r2, [r3, #0]
		flash_read_block2[1]=255;			// last patch for now
 8001a92:	4b30      	ldr	r3, [pc, #192]	; (8001b54 <main_initial+0x35c>)
 8001a94:	22ff      	movs	r2, #255	; 0xff
 8001a96:	705a      	strb	r2, [r3, #1]
		flash_read_block2[2]=128;		// 1->127  = 32kbyte,but need 512 per step , only counts to 16383 ,    64*512
 8001a98:	4b2e      	ldr	r3, [pc, #184]	; (8001b54 <main_initial+0x35c>)
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	709a      	strb	r2, [r3, #2]
		flash_read_block2[3]=0;
 8001a9e:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <main_initial+0x35c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	70da      	strb	r2, [r3, #3]

		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);HAL_SPI_TransmitReceive_DMA(&hspi1,flash_read_block2,flash_read_block2,1028);HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	2110      	movs	r1, #16
 8001aa8:	4827      	ldr	r0, [pc, #156]	; (8001b48 <main_initial+0x350>)
 8001aaa:	f006 fd35 	bl	8008518 <HAL_GPIO_WritePin>
 8001aae:	f240 4304 	movw	r3, #1028	; 0x404
 8001ab2:	4a28      	ldr	r2, [pc, #160]	; (8001b54 <main_initial+0x35c>)
 8001ab4:	4927      	ldr	r1, [pc, #156]	; (8001b54 <main_initial+0x35c>)
 8001ab6:	481b      	ldr	r0, [pc, #108]	; (8001b24 <main_initial+0x32c>)
 8001ab8:	f008 fd96 	bl	800a5e8 <HAL_SPI_TransmitReceive_DMA>
 8001abc:	2200      	movs	r2, #0
 8001abe:	2110      	movs	r1, #16
 8001ac0:	4821      	ldr	r0, [pc, #132]	; (8001b48 <main_initial+0x350>)
 8001ac2:	f006 fd29 	bl	8008518 <HAL_GPIO_WritePin>



	HAL_I2C_Mem_Read (&hi2c2,160,64, 2 , potSource, 512,1000); //ok
 8001ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aca:	9302      	str	r3, [sp, #8]
 8001acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <main_initial+0x360>)
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	2240      	movs	r2, #64	; 0x40
 8001ada:	21a0      	movs	r1, #160	; 0xa0
 8001adc:	4818      	ldr	r0, [pc, #96]	; (8001b40 <main_initial+0x348>)
 8001ade:	f006 ff8b 	bl	80089f8 <HAL_I2C_Mem_Read>


		memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 8001ae2:	4a1e      	ldr	r2, [pc, #120]	; (8001b5c <main_initial+0x364>)
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <main_initial+0x360>)
 8001ae6:	4614      	mov	r4, r2
 8001ae8:	461d      	mov	r5, r3
 8001aea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001af2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001af6:	c407      	stmia	r4!, {r0, r1, r2}
 8001af8:	8023      	strh	r3, [r4, #0]
	    memcpy(&note,potSource+156,160 );   // this works but keep checking for fragmentation
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <main_initial+0x368>)
 8001afc:	22a0      	movs	r2, #160	; 0xa0
 8001afe:	4619      	mov	r1, r3
 8001b00:	4818      	ldr	r0, [pc, #96]	; (8001b64 <main_initial+0x36c>)
 8001b02:	f00a feaf 	bl	800c864 <memcpy>

	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
 8001b0c:	e0ad      	b.n	8001c6a <main_initial+0x472>
 8001b0e:	bf00      	nop
 8001b10:	0800d2f0 	.word	0x0800d2f0
 8001b14:	2001193c 	.word	0x2001193c
 8001b18:	2001187c 	.word	0x2001187c
 8001b1c:	200118dc 	.word	0x200118dc
 8001b20:	20011824 	.word	0x20011824
 8001b24:	200117cc 	.word	0x200117cc
 8001b28:	200119e4 	.word	0x200119e4
 8001b2c:	40000400 	.word	0x40000400
 8001b30:	2001199c 	.word	0x2001199c
 8001b34:	20011a2c 	.word	0x20011a2c
 8001b38:	200116d0 	.word	0x200116d0
 8001b3c:	200099d4 	.word	0x200099d4
 8001b40:	20011778 	.word	0x20011778
 8001b44:	0800ce60 	.word	0x0800ce60
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	20000154 	.word	0x20000154
 8001b50:	200003b0 	.word	0x200003b0
 8001b54:	20010e40 	.word	0x20010e40
 8001b58:	20008758 	.word	0x20008758
 8001b5c:	2000cdfc 	.word	0x2000cdfc
 8001b60:	200087f4 	.word	0x200087f4
 8001b64:	20000158 	.word	0x20000158

			memcpy(&LFO[mem_counter],potSource+46+(mem_counter*6),6 );  // + 60 ,ok here
 8001b68:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4aaa      	ldr	r2, [pc, #680]	; (8001e20 <main_initial+0x628>)
 8001b76:	1898      	adds	r0, r3, r2
 8001b78:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	332e      	adds	r3, #46	; 0x2e
 8001b86:	4aa7      	ldr	r2, [pc, #668]	; (8001e24 <main_initial+0x62c>)
 8001b88:	4413      	add	r3, r2
 8001b8a:	2206      	movs	r2, #6
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f00a fe69 	bl	800c864 <memcpy>
			memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 8001b92:	f8b7 3156 	ldrh.w	r3, [r7, #342]	; 0x156
 8001b96:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	4aa2      	ldr	r2, [pc, #648]	; (8001e28 <main_initial+0x630>)
 8001ba0:	1898      	adds	r0, r3, r2
 8001ba2:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	336a      	adds	r3, #106	; 0x6a
 8001bae:	4a9d      	ldr	r2, [pc, #628]	; (8001e24 <main_initial+0x62c>)
 8001bb0:	4413      	add	r3, r2
 8001bb2:	2205      	movs	r2, #5
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f00a fe55 	bl	800c864 <memcpy>
			memcpy(&patch[mem_counter],potSource+316+(mem_counter*3),3 );
 8001bba:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4a99      	ldr	r2, [pc, #612]	; (8001e2c <main_initial+0x634>)
 8001bc8:	1898      	adds	r0, r3, r2
 8001bca:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001bd8:	4a92      	ldr	r2, [pc, #584]	; (8001e24 <main_initial+0x62c>)
 8001bda:	4413      	add	r3, r2
 8001bdc:	2203      	movs	r2, #3
 8001bde:	4619      	mov	r1, r3
 8001be0:	f00a fe40 	bl	800c864 <memcpy>
			memcpy(&patch[mem_counter+10],potSource+346+(mem_counter*3),3 );
 8001be4:	f8b7 3156 	ldrh.w	r3, [r7, #342]	; 0x156
 8001be8:	f103 020a 	add.w	r2, r3, #10
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4a8d      	ldr	r2, [pc, #564]	; (8001e2c <main_initial+0x634>)
 8001bf6:	1898      	adds	r0, r3, r2
 8001bf8:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	f503 73ad 	add.w	r3, r3, #346	; 0x15a
 8001c06:	4a87      	ldr	r2, [pc, #540]	; (8001e24 <main_initial+0x62c>)
 8001c08:	4413      	add	r3, r2
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f00a fe29 	bl	800c864 <memcpy>
			memcpy(&LFO_slave1[mem_counter],potSource+376+(mem_counter*6),6 );  // + 60 ,ok here
 8001c12:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 8001c16:	4613      	mov	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4413      	add	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4a84      	ldr	r2, [pc, #528]	; (8001e30 <main_initial+0x638>)
 8001c20:	1898      	adds	r0, r3, r2
 8001c22:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c32:	4a7c      	ldr	r2, [pc, #496]	; (8001e24 <main_initial+0x62c>)
 8001c34:	4413      	add	r3, r2
 8001c36:	2206      	movs	r2, #6
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f00a fe13 	bl	800c864 <memcpy>
			memcpy(&LFO_square[mem_counter],potSource+436+(mem_counter*4),4 );
 8001c3e:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 8001c42:	4613      	mov	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4a7a      	ldr	r2, [pc, #488]	; (8001e34 <main_initial+0x63c>)
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 8001c52:	0092      	lsls	r2, r2, #2
 8001c54:	f502 72da 	add.w	r2, r2, #436	; 0x1b4
 8001c58:	4972      	ldr	r1, [pc, #456]	; (8001e24 <main_initial+0x62c>)
 8001c5a:	440a      	add	r2, r1
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	601a      	str	r2, [r3, #0]
	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001c60:	f8b7 3156 	ldrh.w	r3, [r7, #342]	; 0x156
 8001c64:	3301      	adds	r3, #1
 8001c66:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
 8001c6a:	f8b7 3156 	ldrh.w	r3, [r7, #342]	; 0x156
 8001c6e:	2b09      	cmp	r3, #9
 8001c70:	f67f af7a 	bls.w	8001b68 <main_initial+0x370>
	    }


		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001c74:	4b70      	ldr	r3, [pc, #448]	; (8001e38 <main_initial+0x640>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	801a      	strh	r2, [r3, #0]
 8001c7a:	e057      	b.n	8001d2c <main_initial+0x534>

		for 	(n=0;n<18;n++){					// this is ok
 8001c7c:	4b6f      	ldr	r3, [pc, #444]	; (8001e3c <main_initial+0x644>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	801a      	strh	r2, [r3, #0]
 8001c82:	e049      	b.n	8001d18 <main_initial+0x520>
			if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 8001c84:	4b6d      	ldr	r3, [pc, #436]	; (8001e3c <main_initial+0x644>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d114      	bne.n	8001cb6 <main_initial+0x4be>
 8001c8c:	4b6a      	ldr	r3, [pc, #424]	; (8001e38 <main_initial+0x640>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	f003 031f 	and.w	r3, r3, #31
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	4b67      	ldr	r3, [pc, #412]	; (8001e38 <main_initial+0x640>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	440b      	add	r3, r1
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4b64      	ldr	r3, [pc, #400]	; (8001e3c <main_initial+0x644>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	440b      	add	r3, r1
 8001cae:	3a80      	subs	r2, #128	; 0x80
 8001cb0:	b2d1      	uxtb	r1, r2
 8001cb2:	4a63      	ldr	r2, [pc, #396]	; (8001e40 <main_initial+0x648>)
 8001cb4:	54d1      	strb	r1, [r2, r3]
			if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 8001cb6:	4b61      	ldr	r3, [pc, #388]	; (8001e3c <main_initial+0x644>)
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d114      	bne.n	8001ce8 <main_initial+0x4f0>
 8001cbe:	4b5e      	ldr	r3, [pc, #376]	; (8001e38 <main_initial+0x640>)
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	3310      	adds	r3, #16
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b5b      	ldr	r3, [pc, #364]	; (8001e38 <main_initial+0x640>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	440b      	add	r3, r1
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4b58      	ldr	r3, [pc, #352]	; (8001e3c <main_initial+0x644>)
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	440b      	add	r3, r1
 8001ce0:	00d2      	lsls	r2, r2, #3
 8001ce2:	b2d1      	uxtb	r1, r2
 8001ce4:	4a56      	ldr	r2, [pc, #344]	; (8001e40 <main_initial+0x648>)
 8001ce6:	54d1      	strb	r1, [r2, r3]
			if (n>1)  gfx_ram[(i*18)+n] = 255;
 8001ce8:	4b54      	ldr	r3, [pc, #336]	; (8001e3c <main_initial+0x644>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d90d      	bls.n	8001d0c <main_initial+0x514>
 8001cf0:	4b51      	ldr	r3, [pc, #324]	; (8001e38 <main_initial+0x640>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b4e      	ldr	r3, [pc, #312]	; (8001e3c <main_initial+0x644>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	4413      	add	r3, r2
 8001d06:	4a4e      	ldr	r2, [pc, #312]	; (8001e40 <main_initial+0x648>)
 8001d08:	21ff      	movs	r1, #255	; 0xff
 8001d0a:	54d1      	strb	r1, [r2, r3]
		for 	(n=0;n<18;n++){					// this is ok
 8001d0c:	4b4b      	ldr	r3, [pc, #300]	; (8001e3c <main_initial+0x644>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	4b49      	ldr	r3, [pc, #292]	; (8001e3c <main_initial+0x644>)
 8001d16:	801a      	strh	r2, [r3, #0]
 8001d18:	4b48      	ldr	r3, [pc, #288]	; (8001e3c <main_initial+0x644>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	2b11      	cmp	r3, #17
 8001d1e:	d9b1      	bls.n	8001c84 <main_initial+0x48c>
		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001d20:	4b45      	ldr	r3, [pc, #276]	; (8001e38 <main_initial+0x640>)
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	3301      	adds	r3, #1
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b43      	ldr	r3, [pc, #268]	; (8001e38 <main_initial+0x640>)
 8001d2a:	801a      	strh	r2, [r3, #0]
 8001d2c:	4b42      	ldr	r3, [pc, #264]	; (8001e38 <main_initial+0x640>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	2b3f      	cmp	r3, #63	; 0x3f
 8001d32:	d9a3      	bls.n	8001c7c <main_initial+0x484>

		}

		}
	seq.pos=0;
 8001d34:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <main_initial+0x64c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]


	uint32_t  tempo_hold=1;  // calculate tempo look up
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148


	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001d40:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <main_initial+0x640>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	801a      	strh	r2, [r3, #0]
 8001d46:	e01a      	b.n	8001d7e <main_initial+0x586>
	  		tempo_hold=i;
 8001d48:	4b3b      	ldr	r3, [pc, #236]	; (8001e38 <main_initial+0x640>)
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	  		tempo_hold=(60*seq_sample_rate)/(tempo_hold*16); //
 8001d50:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	4a3c      	ldr	r2, [pc, #240]	; (8001e48 <main_initial+0x650>)
 8001d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

	  	tempo_lut[i]=tempo_hold;
 8001d60:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <main_initial+0x640>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001d6a:	b299      	uxth	r1, r3
 8001d6c:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <main_initial+0x654>)
 8001d6e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001d72:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <main_initial+0x640>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	3301      	adds	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	4b2f      	ldr	r3, [pc, #188]	; (8001e38 <main_initial+0x640>)
 8001d7c:	801a      	strh	r2, [r3, #0]
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <main_initial+0x640>)
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	2bff      	cmp	r3, #255	; 0xff
 8001d84:	d9e0      	bls.n	8001d48 <main_initial+0x550>
	  	}

	//isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount

		noteTiming=24;
 8001d86:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <main_initial+0x658>)
 8001d88:	2218      	movs	r2, #24
 8001d8a:	701a      	strb	r2, [r3, #0]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <main_initial+0x640>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	801a      	strh	r2, [r3, #0]
 8001d92:	e00b      	b.n	8001dac <main_initial+0x5b4>
			spell[i]=67;
 8001d94:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <main_initial+0x640>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <main_initial+0x65c>)
 8001d9c:	2143      	movs	r1, #67	; 0x43
 8001d9e:	5499      	strb	r1, [r3, r2]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001da0:	4b25      	ldr	r3, [pc, #148]	; (8001e38 <main_initial+0x640>)
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	3301      	adds	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <main_initial+0x640>)
 8001daa:	801a      	strh	r2, [r3, #0]
 8001dac:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <main_initial+0x640>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001db4:	d3ee      	bcc.n	8001d94 <main_initial+0x59c>

		}

		gfx_clear();
 8001db6:	f002 f9db 	bl	8004170 <gfx_clear>
	uint16_t pars_counter;

	for (pars_counter=0;pars_counter<1000;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8a7 3154 	strh.w	r3, [r7, #340]	; 0x154
 8001dc0:	e006      	b.n	8001dd0 <main_initial+0x5d8>

			menu_parser();  // run it closer to default_menu size ,times, if default_menu is corrupt gfx breaks pretty bad
 8001dc2:	f7ff f96d 	bl	80010a0 <menu_parser>
	for (pars_counter=0;pars_counter<1000;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001dc6:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f8a7 3154 	strh.w	r3, [r7, #340]	; 0x154
 8001dd0:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8001dd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dd8:	d3f3      	bcc.n	8001dc2 <main_initial+0x5ca>

		}
	for (i=0;i<16384;i++) {     // change for 32khz   1-256 bpm
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <main_initial+0x640>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	801a      	strh	r2, [r3, #0]
 8001de0:	e005      	b.n	8001dee <main_initial+0x5f6>
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <main_initial+0x640>)
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	3301      	adds	r3, #1
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <main_initial+0x640>)
 8001dec:	801a      	strh	r2, [r3, #0]
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <main_initial+0x640>)
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df6:	d3f4      	bcc.n	8001de2 <main_initial+0x5ea>
//	RAM[i]=0;      disable for now
	}
	for (i=0;i<1024;i++) {     // change for 32khz   1-256 bpm
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <main_initial+0x640>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	801a      	strh	r2, [r3, #0]
 8001dfe:	e005      	b.n	8001e0c <main_initial+0x614>
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <main_initial+0x640>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	3301      	adds	r3, #1
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <main_initial+0x640>)
 8001e0a:	801a      	strh	r2, [r3, #0]
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <main_initial+0x640>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e14:	d3f4      	bcc.n	8001e00 <main_initial+0x608>

	}



		for (pars_counter=0;pars_counter<512;pars_counter++)	  default_menu3[pars_counter>>1]=64;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f8a7 3154 	strh.w	r3, [r7, #340]	; 0x154
 8001e1c:	e029      	b.n	8001e72 <main_initial+0x67a>
 8001e1e:	bf00      	nop
 8001e20:	2000bfc4 	.word	0x2000bfc4
 8001e24:	20008758 	.word	0x20008758
 8001e28:	2000c370 	.word	0x2000c370
 8001e2c:	2000ce2c 	.word	0x2000ce2c
 8001e30:	2000c26c 	.word	0x2000c26c
 8001e34:	2000c2a8 	.word	0x2000c2a8
 8001e38:	200089c2 	.word	0x200089c2
 8001e3c:	200089bc 	.word	0x200089bc
 8001e40:	2000b728 	.word	0x2000b728
 8001e44:	2000cdfc 	.word	0x2000cdfc
 8001e48:	0020b584 	.word	0x0020b584
 8001e4c:	2000b324 	.word	0x2000b324
 8001e50:	20008554 	.word	0x20008554
 8001e54:	20000000 	.word	0x20000000
 8001e58:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8001e5c:	085b      	lsrs	r3, r3, #1
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b21      	ldr	r3, [pc, #132]	; (8001ee8 <main_initial+0x6f0>)
 8001e64:	2140      	movs	r1, #64	; 0x40
 8001e66:	5499      	strb	r1, [r3, r2]
 8001e68:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	f8a7 3154 	strh.w	r3, [r7, #340]	; 0x154
 8001e72:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8001e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e7a:	d3ed      	bcc.n	8001e58 <main_initial+0x660>

		default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 8001e7c:	481a      	ldr	r0, [pc, #104]	; (8001ee8 <main_initial+0x6f0>)
 8001e7e:	f7fe f9ab 	bl	80001d8 <strlen>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	4b19      	ldr	r3, [pc, #100]	; (8001eec <main_initial+0x6f4>)
 8001e88:	801a      	strh	r2, [r3, #0]
			menu_title_count--;  //count back one
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <main_initial+0x6f8>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <main_initial+0x6f8>)
 8001e94:	701a      	strb	r2, [r3, #0]
			display_clear ();
 8001e96:	f002 f9ad 	bl	80041f4 <display_clear>
			for (pars_counter=0;pars_counter<menu_title_count;pars_counter++)	default_menu3 [menu_title_lut[pars_counter]&1023]=48;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f8a7 3154 	strh.w	r3, [r7, #340]	; 0x154
 8001ea0:	e00e      	b.n	8001ec0 <main_initial+0x6c8>
 8001ea2:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8001ea6:	4a13      	ldr	r2, [pc, #76]	; (8001ef4 <main_initial+0x6fc>)
 8001ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <main_initial+0x6f0>)
 8001eb2:	2130      	movs	r1, #48	; 0x30
 8001eb4:	54d1      	strb	r1, [r2, r3]
 8001eb6:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f8a7 3154 	strh.w	r3, [r7, #340]	; 0x154
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <main_initial+0x6f8>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d3e9      	bcc.n	8001ea2 <main_initial+0x6aa>
			note_reset();
 8001ece:	f7ff fc55 	bl	800177c <note_reset>


			menuSelect=0;
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <main_initial+0x700>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
	// fill up sample
	firstbarLoop=0;
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <main_initial+0x704>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
	//sample_ram =  &RAM[0];    //  allocate half a second

}
 8001ede:	bf00      	nop
 8001ee0:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ee8:	200112d0 	.word	0x200112d0
 8001eec:	2000d762 	.word	0x2000d762
 8001ef0:	2000d151 	.word	0x2000d151
 8001ef4:	2000d154 	.word	0x2000d154
 8001ef8:	200089ba 	.word	0x200089ba
 8001efc:	200089bb 	.word	0x200089bb

08001f00 <patch_lists>:
void sampler_save(void){


}

void patch_lists(void){   //   ok
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
    uint8_t  list_counter;
    uint8_t list_counter2=0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	71bb      	strb	r3, [r7, #6]
    for (list_counter=0;list_counter<20;list_counter++){
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	71fb      	strb	r3, [r7, #7]
 8001f0e:	e02e      	b.n	8001f6e <patch_lists+0x6e>

	if ((patch[list_counter].input1&3)== 3   )    { LFO_sqr_list[list_counter2]   =  (patch[list_counter].target_index&7)+48;   // only writes sqr related  to list ,others left off
 8001f10:	79fa      	ldrb	r2, [r7, #7]
 8001f12:	491c      	ldr	r1, [pc, #112]	; (8001f84 <patch_lists+0x84>)
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	440b      	add	r3, r1
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d11f      	bne.n	8001f68 <patch_lists+0x68>
 8001f28:	79fa      	ldrb	r2, [r7, #7]
 8001f2a:	4916      	ldr	r1, [pc, #88]	; (8001f84 <patch_lists+0x84>)
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	440b      	add	r3, r1
 8001f36:	3302      	adds	r3, #2
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	79bb      	ldrb	r3, [r7, #6]
 8001f42:	3230      	adds	r2, #48	; 0x30
 8001f44:	b2d1      	uxtb	r1, r2
 8001f46:	4a10      	ldr	r2, [pc, #64]	; (8001f88 <patch_lists+0x88>)
 8001f48:	54d1      	strb	r1, [r2, r3]
	sqr_target_list[list_counter2] =  (patch[list_counter].target);   //just
 8001f4a:	79fa      	ldrb	r2, [r7, #7]
 8001f4c:	79b9      	ldrb	r1, [r7, #6]
 8001f4e:	480d      	ldr	r0, [pc, #52]	; (8001f84 <patch_lists+0x84>)
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4403      	add	r3, r0
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	781a      	ldrb	r2, [r3, #0]
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <patch_lists+0x8c>)
 8001f60:	545a      	strb	r2, [r3, r1]
	list_counter2++;
 8001f62:	79bb      	ldrb	r3, [r7, #6]
 8001f64:	3301      	adds	r3, #1
 8001f66:	71bb      	strb	r3, [r7, #6]
    for (list_counter=0;list_counter<20;list_counter++){
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	71fb      	strb	r3, [r7, #7]
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	2b13      	cmp	r3, #19
 8001f72:	d9cd      	bls.n	8001f10 <patch_lists+0x10>
	}

    }

}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	2000ce2c 	.word	0x2000ce2c
 8001f88:	200109a0 	.word	0x200109a0
 8001f8c:	20010c10 	.word	0x20010c10

08001f90 <sampling>:


return  output;

}
void sampling(void){						// 330 atm or 8.5ms
 8001f90:	b5b0      	push	{r4, r5, r7, lr}
 8001f92:	f5ad 7d6e 	sub.w	sp, sp, #952	; 0x3b8
 8001f96:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;

//time_proc=0;

	time_proc=0;
 8001f98:	4bc3      	ldr	r3, [pc, #780]	; (80022a8 <sampling+0x318>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	801a      	strh	r2, [r3, #0]
	int32_t sample_accus[10] ={0,0,0,0,0,0,0,0,0,0};
 8001f9e:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8001fa2:	2228      	movs	r2, #40	; 0x28
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f00a fc6a 	bl	800c880 <memset>
uint8_t mask_i;
int32_t sample_Accu[10] ={0,0,0,0,0,0,0,0,0,0};   // accu for sample output or lookup
 8001fac:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8001fb0:	2228      	movs	r2, #40	; 0x28
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f00a fc63 	bl	800c880 <memset>
uint16_t tuned_list[10];
int32_t sample_adc;
int32_t ram_temp;
uint16_t sample_counts_temp[40]={1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
 8001fba:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	2350      	movs	r3, #80	; 0x50
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2100      	movs	r1, #0
 8001fca:	f00a fc59 	bl	800c880 <memset>
 8001fce:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001fd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	801a      	strh	r2, [r3, #0]
 8001fda:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	805a      	strh	r2, [r3, #2]
 8001fe6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fee:	2201      	movs	r2, #1
 8001ff0:	809a      	strh	r2, [r3, #4]
 8001ff2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	80da      	strh	r2, [r3, #6]
 8001ffe:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002006:	2201      	movs	r2, #1
 8002008:	811a      	strh	r2, [r3, #8]
 800200a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800200e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002012:	2201      	movs	r2, #1
 8002014:	815a      	strh	r2, [r3, #10]
 8002016:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800201a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800201e:	2201      	movs	r2, #1
 8002020:	819a      	strh	r2, [r3, #12]
 8002022:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800202a:	2201      	movs	r2, #1
 800202c:	81da      	strh	r2, [r3, #14]
 800202e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002036:	2201      	movs	r2, #1
 8002038:	821a      	strh	r2, [r3, #16]
 800203a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800203e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002042:	2201      	movs	r2, #1
 8002044:	825a      	strh	r2, [r3, #18]
 8002046:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800204a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800204e:	2201      	movs	r2, #1
 8002050:	829a      	strh	r2, [r3, #20]
 8002052:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800205a:	2201      	movs	r2, #1
 800205c:	82da      	strh	r2, [r3, #22]
 800205e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002066:	2201      	movs	r2, #1
 8002068:	831a      	strh	r2, [r3, #24]
 800206a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800206e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002072:	2201      	movs	r2, #1
 8002074:	835a      	strh	r2, [r3, #26]
 8002076:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800207a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800207e:	2201      	movs	r2, #1
 8002080:	839a      	strh	r2, [r3, #28]
 8002082:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800208a:	2201      	movs	r2, #1
 800208c:	83da      	strh	r2, [r3, #30]
 800208e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002096:	2201      	movs	r2, #1
 8002098:	841a      	strh	r2, [r3, #32]
 800209a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800209e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020a2:	2201      	movs	r2, #1
 80020a4:	845a      	strh	r2, [r3, #34]	; 0x22
 80020a6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80020aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020ae:	2201      	movs	r2, #1
 80020b0:	849a      	strh	r2, [r3, #36]	; 0x24
 80020b2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80020b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020ba:	2201      	movs	r2, #1
 80020bc:	84da      	strh	r2, [r3, #38]	; 0x26
 80020be:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80020c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020c6:	2201      	movs	r2, #1
 80020c8:	851a      	strh	r2, [r3, #40]	; 0x28
 80020ca:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80020ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020d2:	2201      	movs	r2, #1
 80020d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020d6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80020da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020de:	2201      	movs	r2, #1
 80020e0:	859a      	strh	r2, [r3, #44]	; 0x2c
 80020e2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80020e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020ea:	2201      	movs	r2, #1
 80020ec:	85da      	strh	r2, [r3, #46]	; 0x2e
 80020ee:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80020f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020f6:	2201      	movs	r2, #1
 80020f8:	861a      	strh	r2, [r3, #48]	; 0x30
 80020fa:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80020fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002102:	2201      	movs	r2, #1
 8002104:	865a      	strh	r2, [r3, #50]	; 0x32
 8002106:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800210a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800210e:	2201      	movs	r2, #1
 8002110:	869a      	strh	r2, [r3, #52]	; 0x34
 8002112:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800211a:	2201      	movs	r2, #1
 800211c:	86da      	strh	r2, [r3, #54]	; 0x36
 800211e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002126:	2201      	movs	r2, #1
 8002128:	871a      	strh	r2, [r3, #56]	; 0x38
 800212a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800212e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002132:	2201      	movs	r2, #1
 8002134:	875a      	strh	r2, [r3, #58]	; 0x3a
 8002136:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800213a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800213e:	2201      	movs	r2, #1
 8002140:	879a      	strh	r2, [r3, #60]	; 0x3c
 8002142:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800214a:	2201      	movs	r2, #1
 800214c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800214e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002156:	2201      	movs	r2, #1
 8002158:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800215c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002164:	2201      	movs	r2, #1
 8002166:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800216a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800216e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002172:	2201      	movs	r2, #1
 8002174:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8002178:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800217c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002180:	2201      	movs	r2, #1
 8002182:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002186:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800218a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800218e:	2201      	movs	r2, #1
 8002190:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
uint8_t flash_result;

//if ((sampler.record_enable==0) && (flash_flag))   {  flash_page_read ((sampler.ram_seq)<<1 ); flash_flag=0;}

if (bank_write==2)  {sample_pointD=512;}  else sample_pointD=0;
 8002194:	4b45      	ldr	r3, [pc, #276]	; (80022ac <sampling+0x31c>)
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d104      	bne.n	80021a6 <sampling+0x216>
 800219c:	4b44      	ldr	r3, [pc, #272]	; (80022b0 <sampling+0x320>)
 800219e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a2:	801a      	strh	r2, [r3, #0]
 80021a4:	e002      	b.n	80021ac <sampling+0x21c>
 80021a6:	4b42      	ldr	r3, [pc, #264]	; (80022b0 <sampling+0x320>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	801a      	strh	r2, [r3, #0]

bank_write=0;
 80021ac:	4b3f      	ldr	r3, [pc, #252]	; (80022ac <sampling+0x31c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	801a      	strh	r2, [r3, #0]
memcpy(notes_joined,seq.notes1,16);
 80021b2:	2210      	movs	r2, #16
 80021b4:	493f      	ldr	r1, [pc, #252]	; (80022b4 <sampling+0x324>)
 80021b6:	4840      	ldr	r0, [pc, #256]	; (80022b8 <sampling+0x328>)
 80021b8:	f00a fb54 	bl	800c864 <memcpy>
memcpy(notes_joined+16,seq.notes2,16);
 80021bc:	4b3f      	ldr	r3, [pc, #252]	; (80022bc <sampling+0x32c>)
 80021be:	2210      	movs	r2, #16
 80021c0:	493f      	ldr	r1, [pc, #252]	; (80022c0 <sampling+0x330>)
 80021c2:	4618      	mov	r0, r3
 80021c4:	f00a fb4e 	bl	800c864 <memcpy>
sample_pointB=sample_pointD;
 80021c8:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <sampling+0x320>)
 80021ca:	881a      	ldrh	r2, [r3, #0]
 80021cc:	4b3d      	ldr	r3, [pc, #244]	; (80022c4 <sampling+0x334>)
 80021ce:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8a7 33b4 	strh.w	r3, [r7, #948]	; 0x3b4

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 80021d6:	4b3c      	ldr	r3, [pc, #240]	; (80022c8 <sampling+0x338>)
 80021d8:	785b      	ldrb	r3, [r3, #1]
 80021da:	461a      	mov	r2, r3
 80021dc:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <sampling+0x33c>)
 80021de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021e2:	f8a7 33b2 	strh.w	r3, [r7, #946]	; 0x3b2
if (seq.tempo<40)  tempo_mod=511;  // syncs to main loop
 80021e6:	4b38      	ldr	r3, [pc, #224]	; (80022c8 <sampling+0x338>)
 80021e8:	785b      	ldrb	r3, [r3, #1]
 80021ea:	2b27      	cmp	r3, #39	; 0x27
 80021ec:	d803      	bhi.n	80021f6 <sampling+0x266>
 80021ee:	f240 13ff 	movw	r3, #511	; 0x1ff
 80021f2:	f8a7 33b2 	strh.w	r3, [r7, #946]	; 0x3b2
uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s

tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 80021f6:	f8b7 33b2 	ldrh.w	r3, [r7, #946]	; 0x3b2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	da00      	bge.n	8002200 <sampling+0x270>
 80021fe:	331f      	adds	r3, #31
 8002200:	115b      	asrs	r3, r3, #5
 8002202:	461a      	mov	r2, r3
 8002204:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002208:	fb93 f3f2 	sdiv	r3, r3, r2
 800220c:	ee07 3a90 	vmov	s15, r3
 8002210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002214:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <sampling+0x340>)
 8002216:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 800221a:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <sampling+0x340>)
 800221c:	ed93 7a00 	vldr	s14, [r3]
 8002220:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80022d4 <sampling+0x344>
 8002224:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002228:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <sampling+0x340>)
 800222a:	edc3 7a00 	vstr	s15, [r3]

if ((tempo_mod==511 )   && (sampler.ram_seq<=256)    && (seq.pos>>4)      )   { next_isr=0; tempo_count=0; }   //  this should sync  rough
 800222e:	f8b7 33b2 	ldrh.w	r3, [r7, #946]	; 0x3b2
 8002232:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002236:	4293      	cmp	r3, r2
 8002238:	d110      	bne.n	800225c <sampling+0x2cc>
 800223a:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <sampling+0x348>)
 800223c:	8b1b      	ldrh	r3, [r3, #24]
 800223e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002242:	d80b      	bhi.n	800225c <sampling+0x2cc>
 8002244:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <sampling+0x338>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <sampling+0x2cc>
 8002250:	4b22      	ldr	r3, [pc, #136]	; (80022dc <sampling+0x34c>)
 8002252:	2200      	movs	r2, #0
 8002254:	801a      	strh	r2, [r3, #0]
 8002256:	4b22      	ldr	r3, [pc, #136]	; (80022e0 <sampling+0x350>)
 8002258:	2200      	movs	r2, #0
 800225a:	801a      	strh	r2, [r3, #0]

seqpos_i=0; //reset
 800225c:	4b21      	ldr	r3, [pc, #132]	; (80022e4 <sampling+0x354>)
 800225e:	2200      	movs	r2, #0
 8002260:	801a      	strh	r2, [r3, #0]

uint8_t looper_dat[8]={1,3,7,15};
 8002262:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002266:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800226a:	491f      	ldr	r1, [pc, #124]	; (80022e8 <sampling+0x358>)
 800226c:	4613      	mov	r3, r2
 800226e:	c903      	ldmia	r1, {r0, r1}
 8002270:	6018      	str	r0, [r3, #0]
 8002272:	3304      	adds	r3, #4
 8002274:	7019      	strb	r1, [r3, #0]
 8002276:	1d53      	adds	r3, r2, #5
 8002278:	2200      	movs	r2, #0
 800227a:	801a      	strh	r2, [r3, #0]
 800227c:	709a      	strb	r2, [r3, #2]
uint32_t lfo_tempo_hold;

if (tempo_mod_hold!=tempo_mod){					// lfo lut calculate only when changes tempo
 800227e:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <sampling+0x35c>)
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	f8b7 23b2 	ldrh.w	r2, [r7, #946]	; 0x3b2
 8002286:	429a      	cmp	r2, r3
 8002288:	d05e      	beq.n	8002348 <sampling+0x3b8>

		float lfo_tempo_calc=((1647099*4)/(tempo_mod)); // deafualt 1 note    12867  at 512
 800228a:	f8b7 33b2 	ldrh.w	r3, [r7, #946]	; 0x3b2
 800228e:	4a18      	ldr	r2, [pc, #96]	; (80022f0 <sampling+0x360>)
 8002290:	fb92 f3f3 	sdiv	r3, r2, r3
 8002294:	ee07 3a90 	vmov	s15, r3
 8002298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800229c:	edc7 7ae9 	vstr	s15, [r7, #932]	; 0x3a4


						for (i=0;i<256;i++){								// 128 is 1 note
 80022a0:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <sampling+0x364>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	801a      	strh	r2, [r3, #0]
 80022a6:	e04b      	b.n	8002340 <sampling+0x3b0>
 80022a8:	2000bfc0 	.word	0x2000bfc0
 80022ac:	2000014e 	.word	0x2000014e
 80022b0:	200099ce 	.word	0x200099ce
 80022b4:	2000cdfe 	.word	0x2000cdfe
 80022b8:	2000f770 	.word	0x2000f770
 80022bc:	2000f780 	.word	0x2000f780
 80022c0:	2000ce0f 	.word	0x2000ce0f
 80022c4:	200089c0 	.word	0x200089c0
 80022c8:	2000cdfc 	.word	0x2000cdfc
 80022cc:	2000b324 	.word	0x2000b324
 80022d0:	2000bbb0 	.word	0x2000bbb0
 80022d4:	42a00000 	.word	0x42a00000
 80022d8:	20000204 	.word	0x20000204
 80022dc:	2000b1d4 	.word	0x2000b1d4
 80022e0:	2000b200 	.word	0x2000b200
 80022e4:	20010c24 	.word	0x20010c24
 80022e8:	0800cf64 	.word	0x0800cf64
 80022ec:	2000b724 	.word	0x2000b724
 80022f0:	006487ec 	.word	0x006487ec
 80022f4:	200089c2 	.word	0x200089c2
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/16;               //  at 64 its 12867
 80022f8:	4b5a      	ldr	r3, [pc, #360]	; (8002464 <sampling+0x4d4>)
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	3301      	adds	r3, #1
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002306:	edd7 7ae9 	vldr	s15, [r7, #932]	; 0x3a4
 800230a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800230e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002312:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800231a:	ee17 3a90 	vmov	r3, s15
 800231e:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
	lfo_tempo_lut[i]= lfo_tempo_hold;
 8002322:	4b50      	ldr	r3, [pc, #320]	; (8002464 <sampling+0x4d4>)
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800232c:	b299      	uxth	r1, r3
 800232e:	4b4e      	ldr	r3, [pc, #312]	; (8002468 <sampling+0x4d8>)
 8002330:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						for (i=0;i<256;i++){								// 128 is 1 note
 8002334:	4b4b      	ldr	r3, [pc, #300]	; (8002464 <sampling+0x4d4>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	4b49      	ldr	r3, [pc, #292]	; (8002464 <sampling+0x4d4>)
 800233e:	801a      	strh	r2, [r3, #0]
 8002340:	4b48      	ldr	r3, [pc, #288]	; (8002464 <sampling+0x4d4>)
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	2bff      	cmp	r3, #255	; 0xff
 8002346:	d9d7      	bls.n	80022f8 <sampling+0x368>

}}
tempo_mod_hold=tempo_mod;   // for lfo
 8002348:	4a48      	ldr	r2, [pc, #288]	; (800246c <sampling+0x4dc>)
 800234a:	f8b7 33b2 	ldrh.w	r3, [r7, #946]	; 0x3b2
 800234e:	8013      	strh	r3, [r2, #0]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 8002350:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002354:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002358:	4618      	mov	r0, r3
 800235a:	2344      	movs	r3, #68	; 0x44
 800235c:	461a      	mov	r2, r3
 800235e:	2100      	movs	r1, #0
 8002360:	f00a fa8e 	bl	800c880 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 8002364:	4b3f      	ldr	r3, [pc, #252]	; (8002464 <sampling+0x4d4>)
 8002366:	2200      	movs	r2, #0
 8002368:	801a      	strh	r2, [r3, #0]
 800236a:	e00f      	b.n	800238c <sampling+0x3fc>
 800236c:	4b3d      	ldr	r3, [pc, #244]	; (8002464 <sampling+0x4d4>)
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	4619      	mov	r1, r3
 8002372:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002376:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800237a:	2200      	movs	r2, #0
 800237c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002380:	4b38      	ldr	r3, [pc, #224]	; (8002464 <sampling+0x4d4>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	4b36      	ldr	r3, [pc, #216]	; (8002464 <sampling+0x4d4>)
 800238a:	801a      	strh	r2, [r3, #0]
 800238c:	4b35      	ldr	r3, [pc, #212]	; (8002464 <sampling+0x4d4>)
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	2b0f      	cmp	r3, #15
 8002392:	d9eb      	bls.n	800236c <sampling+0x3dc>
	//potSource[150]=(freq_point[0])*100; //0-2

potSource[380]=(lcd_temp/100) +48;  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 8002394:	4b36      	ldr	r3, [pc, #216]	; (8002470 <sampling+0x4e0>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	4a36      	ldr	r2, [pc, #216]	; (8002474 <sampling+0x4e4>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	3330      	adds	r3, #48	; 0x30
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b34      	ldr	r3, [pc, #208]	; (8002478 <sampling+0x4e8>)
 80023a8:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
potSource[381]=((lcd_temp %100)/10)+48;		 // 0-160 to 0-10
 80023ac:	4b30      	ldr	r3, [pc, #192]	; (8002470 <sampling+0x4e0>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4a30      	ldr	r2, [pc, #192]	; (8002474 <sampling+0x4e4>)
 80023b2:	fba2 1203 	umull	r1, r2, r2, r3
 80023b6:	0952      	lsrs	r2, r2, #5
 80023b8:	2164      	movs	r1, #100	; 0x64
 80023ba:	fb01 f202 	mul.w	r2, r1, r2
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	4a2e      	ldr	r2, [pc, #184]	; (800247c <sampling+0x4ec>)
 80023c4:	fba2 2303 	umull	r2, r3, r2, r3
 80023c8:	08db      	lsrs	r3, r3, #3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	3330      	adds	r3, #48	; 0x30
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	4b29      	ldr	r3, [pc, #164]	; (8002478 <sampling+0x4e8>)
 80023d2:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
potSource[382]=(lcd_temp%10)+48;
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <sampling+0x4e0>)
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	4b28      	ldr	r3, [pc, #160]	; (800247c <sampling+0x4ec>)
 80023dc:	fba3 1302 	umull	r1, r3, r3, r2
 80023e0:	08d9      	lsrs	r1, r3, #3
 80023e2:	460b      	mov	r3, r1
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	3330      	adds	r3, #48	; 0x30
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4b21      	ldr	r3, [pc, #132]	; (8002478 <sampling+0x4e8>)
 80023f4:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e

LCD_Info[0]  =( seq.pos/100) +48;
 80023f8:	4b21      	ldr	r3, [pc, #132]	; (8002480 <sampling+0x4f0>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	4a1d      	ldr	r2, [pc, #116]	; (8002474 <sampling+0x4e4>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	b2db      	uxtb	r3, r3
 8002406:	3330      	adds	r3, #48	; 0x30
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <sampling+0x4f4>)
 800240c:	701a      	strb	r2, [r3, #0]
LCD_Info[1]  =( (seq.pos%100) /10)+48;
 800240e:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <sampling+0x4f0>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	4a18      	ldr	r2, [pc, #96]	; (8002474 <sampling+0x4e4>)
 8002414:	fba2 1203 	umull	r1, r2, r2, r3
 8002418:	0952      	lsrs	r2, r2, #5
 800241a:	2164      	movs	r1, #100	; 0x64
 800241c:	fb01 f202 	mul.w	r2, r1, r2
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	b2db      	uxtb	r3, r3
 8002424:	4a15      	ldr	r2, [pc, #84]	; (800247c <sampling+0x4ec>)
 8002426:	fba2 2303 	umull	r2, r3, r2, r3
 800242a:	08db      	lsrs	r3, r3, #3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	3330      	adds	r3, #48	; 0x30
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <sampling+0x4f4>)
 8002434:	705a      	strb	r2, [r3, #1]
LCD_Info[2]  =( seq.pos%10)+48 ;
 8002436:	4b12      	ldr	r3, [pc, #72]	; (8002480 <sampling+0x4f0>)
 8002438:	781a      	ldrb	r2, [r3, #0]
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <sampling+0x4ec>)
 800243c:	fba3 1302 	umull	r1, r3, r3, r2
 8002440:	08d9      	lsrs	r1, r3, #3
 8002442:	460b      	mov	r3, r1
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	3330      	adds	r3, #48	; 0x30
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <sampling+0x4f4>)
 8002454:	709a      	strb	r2, [r3, #2]
patch_lists();
 8002456:	f7ff fd53 	bl	8001f00 <patch_lists>
int32_t* osc_pointers[10];   // sample outs
uint8_t pars_counter;

//if (sampler.ram_seq>15871)  sampler.ram_seq=0;  //else sampler.ram_seq=sampler.ram_seq+1024;
//setup pointers for osc options
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 800245a:	2300      	movs	r3, #0
 800245c:	f887 33b1 	strb.w	r3, [r7, #945]	; 0x3b1
 8002460:	e0fe      	b.n	8002660 <sampling+0x6d0>
 8002462:	bf00      	nop
 8002464:	200089c2 	.word	0x200089c2
 8002468:	2000b524 	.word	0x2000b524
 800246c:	2000b724 	.word	0x2000b724
 8002470:	2000d766 	.word	0x2000d766
 8002474:	51eb851f 	.word	0x51eb851f
 8002478:	20008758 	.word	0x20008758
 800247c:	cccccccd 	.word	0xcccccccd
 8002480:	2000cdfc 	.word	0x2000cdfc
 8002484:	20010bac 	.word	0x20010bac


		sample_accus[pars_counter]=sample_accus_hold[pars_counter];
 8002488:	f897 23b1 	ldrb.w	r2, [r7, #945]	; 0x3b1
 800248c:	f897 33b1 	ldrb.w	r3, [r7, #945]	; 0x3b1
 8002490:	49ac      	ldr	r1, [pc, #688]	; (8002744 <sampling+0x7b4>)
 8002492:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800249c:	443b      	add	r3, r7
 800249e:	f843 2c74 	str.w	r2, [r3, #-116]
	 if (note[pars_counter].osc==0) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 80024a2:	f897 23b1 	ldrb.w	r2, [r7, #945]	; 0x3b1
 80024a6:	49a8      	ldr	r1, [pc, #672]	; (8002748 <sampling+0x7b8>)
 80024a8:	4613      	mov	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	440b      	add	r3, r1
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10a      	bne.n	80024ce <sampling+0x53e>
 80024b8:	f897 23b1 	ldrb.w	r2, [r7, #945]	; 0x3b1
 80024bc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80024c0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80024c4:	f507 7147 	add.w	r1, r7, #796	; 0x31c
 80024c8:	3114      	adds	r1, #20
 80024ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 	 	 	 if (note[pars_counter].osc==1) osc_pointers[pars_counter]=&sample_accus[pars_counter];   // saw
 80024ce:	f897 23b1 	ldrb.w	r2, [r7, #945]	; 0x3b1
 80024d2:	499d      	ldr	r1, [pc, #628]	; (8002748 <sampling+0x7b8>)
 80024d4:	4613      	mov	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	440b      	add	r3, r1
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d10d      	bne.n	8002500 <sampling+0x570>
 80024e4:	f897 33b1 	ldrb.w	r3, [r7, #945]	; 0x3b1
 80024e8:	f897 23b1 	ldrb.w	r2, [r7, #945]	; 0x3b1
 80024ec:	f507 7151 	add.w	r1, r7, #836	; 0x344
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4419      	add	r1, r3
 80024f4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80024f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80024fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==2) osc_pointers[pars_counter]=&sample_Accu[pars_counter];		// tri
 8002500:	f897 23b1 	ldrb.w	r2, [r7, #945]	; 0x3b1
 8002504:	4990      	ldr	r1, [pc, #576]	; (8002748 <sampling+0x7b8>)
 8002506:	4613      	mov	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	440b      	add	r3, r1
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d10d      	bne.n	8002532 <sampling+0x5a2>
 8002516:	f897 33b1 	ldrb.w	r3, [r7, #945]	; 0x3b1
 800251a:	f897 23b1 	ldrb.w	r2, [r7, #945]	; 0x3b1
 800251e:	f507 7147 	add.w	r1, r7, #796	; 0x31c
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4419      	add	r1, r3
 8002526:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800252a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800252e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==3) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];sampler.one_shot=sampler.one_shot | (1<<pars_counter);}   // sine
 8002532:	f897 23b1 	ldrb.w	r2, [r7, #945]	; 0x3b1
 8002536:	4984      	ldr	r1, [pc, #528]	; (8002748 <sampling+0x7b8>)
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	440b      	add	r3, r1
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b03      	cmp	r3, #3
 8002546:	d11c      	bne.n	8002582 <sampling+0x5f2>
 8002548:	f897 33b1 	ldrb.w	r3, [r7, #945]	; 0x3b1
 800254c:	3306      	adds	r3, #6
 800254e:	f897 23b1 	ldrb.w	r2, [r7, #945]	; 0x3b1
 8002552:	f507 7147 	add.w	r1, r7, #796	; 0x31c
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4419      	add	r1, r3
 800255a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800255e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002566:	4b79      	ldr	r3, [pc, #484]	; (800274c <sampling+0x7bc>)
 8002568:	78db      	ldrb	r3, [r3, #3]
 800256a:	b25a      	sxtb	r2, r3
 800256c:	f897 33b1 	ldrb.w	r3, [r7, #945]	; 0x3b1
 8002570:	2101      	movs	r1, #1
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	b25b      	sxtb	r3, r3
 8002578:	4313      	orrs	r3, r2
 800257a:	b25b      	sxtb	r3, r3
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b73      	ldr	r3, [pc, #460]	; (800274c <sampling+0x7bc>)
 8002580:	70da      	strb	r2, [r3, #3]
	 			if (note[pars_counter].osc==4) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];sampler.one_shot=sampler.one_shot &  ~(1<<pars_counter);}  // looping sample
 8002582:	f897 23b1 	ldrb.w	r2, [r7, #945]	; 0x3b1
 8002586:	4970      	ldr	r1, [pc, #448]	; (8002748 <sampling+0x7b8>)
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	440b      	add	r3, r1
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b04      	cmp	r3, #4
 8002596:	d11e      	bne.n	80025d6 <sampling+0x646>
 8002598:	f897 33b1 	ldrb.w	r3, [r7, #945]	; 0x3b1
 800259c:	3306      	adds	r3, #6
 800259e:	f897 23b1 	ldrb.w	r2, [r7, #945]	; 0x3b1
 80025a2:	f507 7147 	add.w	r1, r7, #796	; 0x31c
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4419      	add	r1, r3
 80025aa:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80025ae:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80025b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80025b6:	4b65      	ldr	r3, [pc, #404]	; (800274c <sampling+0x7bc>)
 80025b8:	78db      	ldrb	r3, [r3, #3]
 80025ba:	b25a      	sxtb	r2, r3
 80025bc:	f897 33b1 	ldrb.w	r3, [r7, #945]	; 0x3b1
 80025c0:	2101      	movs	r1, #1
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	b25b      	sxtb	r3, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	b25b      	sxtb	r3, r3
 80025cc:	4013      	ands	r3, r2
 80025ce:	b25b      	sxtb	r3, r3
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4b5e      	ldr	r3, [pc, #376]	; (800274c <sampling+0x7bc>)
 80025d4:	70da      	strb	r2, [r3, #3]
	 			if (note[pars_counter].osc==5) osc_pointers[pars_counter]=&sample_adc;   // sine
 80025d6:	f897 23b1 	ldrb.w	r2, [r7, #945]	; 0x3b1
 80025da:	495b      	ldr	r1, [pc, #364]	; (8002748 <sampling+0x7b8>)
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	440b      	add	r3, r1
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b05      	cmp	r3, #5
 80025ea:	d109      	bne.n	8002600 <sampling+0x670>
 80025ec:	f897 23b1 	ldrb.w	r2, [r7, #945]	; 0x3b1
 80025f0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80025f4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80025f8:	f507 7141 	add.w	r1, r7, #772	; 0x304
 80025fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==6) osc_pointers[pars_counter]=&ram_temp ;   // sine
 8002600:	f897 23b1 	ldrb.w	r2, [r7, #945]	; 0x3b1
 8002604:	4950      	ldr	r1, [pc, #320]	; (8002748 <sampling+0x7b8>)
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	440b      	add	r3, r1
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b06      	cmp	r3, #6
 8002614:	d109      	bne.n	800262a <sampling+0x69a>
 8002616:	f897 23b1 	ldrb.w	r2, [r7, #945]	; 0x3b1
 800261a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800261e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002622:	f507 7140 	add.w	r1, r7, #768	; 0x300
 8002626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc>6) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 800262a:	f897 23b1 	ldrb.w	r2, [r7, #945]	; 0x3b1
 800262e:	4946      	ldr	r1, [pc, #280]	; (8002748 <sampling+0x7b8>)
 8002630:	4613      	mov	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	440b      	add	r3, r1
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b06      	cmp	r3, #6
 800263e:	d90a      	bls.n	8002656 <sampling+0x6c6>
 8002640:	f897 23b1 	ldrb.w	r2, [r7, #945]	; 0x3b1
 8002644:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002648:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800264c:	f507 7147 	add.w	r1, r7, #796	; 0x31c
 8002650:	3114      	adds	r1, #20
 8002652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 8002656:	f897 33b1 	ldrb.w	r3, [r7, #945]	; 0x3b1
 800265a:	3301      	adds	r3, #1
 800265c:	f887 33b1 	strb.w	r3, [r7, #945]	; 0x3b1
 8002660:	f897 33b1 	ldrb.w	r3, [r7, #945]	; 0x3b1
 8002664:	2b03      	cmp	r3, #3
 8002666:	f67f af0f 	bls.w	8002488 <sampling+0x4f8>


 }

note_holdA=0;
 800266a:	4b39      	ldr	r3, [pc, #228]	; (8002750 <sampling+0x7c0>)
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]

// some good phasin and delays here
uint8_t cross_fade[2]={0,0};
 8002670:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002674:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002678:	2200      	movs	r2, #0
 800267a:	801a      	strh	r2, [r3, #0]
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 800267c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002680:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002684:	4a33      	ldr	r2, [pc, #204]	; (8002754 <sampling+0x7c4>)
 8002686:	461c      	mov	r4, r3
 8002688:	4615      	mov	r5, r2
 800268a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800268c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800268e:	682b      	ldr	r3, [r5, #0]
 8002690:	7023      	strb	r3, [r4, #0]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)					{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
}*/
isr_change=0;
 8002692:	4b31      	ldr	r3, [pc, #196]	; (8002758 <sampling+0x7c8>)
 8002694:	2200      	movs	r2, #0
 8002696:	801a      	strh	r2, [r3, #0]
uint8_t seq_dat=(1<<(((adc_values[0]>>3))+1))-1;
 8002698:	4b30      	ldr	r3, [pc, #192]	; (800275c <sampling+0x7cc>)
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	08db      	lsrs	r3, r3, #3
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3301      	adds	r3, #1
 80026a2:	2201      	movs	r2, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	f887 339f 	strb.w	r3, [r7, #927]	; 0x39f
///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 80026b0:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <sampling+0x7d0>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	801a      	strh	r2, [r3, #0]
 80026b6:	e202      	b.n	8002abe <sampling+0xb2e>

	i_total=i+sample_pointB;
 80026b8:	4b29      	ldr	r3, [pc, #164]	; (8002760 <sampling+0x7d0>)
 80026ba:	881a      	ldrh	r2, [r3, #0]
 80026bc:	4b29      	ldr	r3, [pc, #164]	; (8002764 <sampling+0x7d4>)
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	4413      	add	r3, r2
 80026c2:	f8a7 338e 	strh.w	r3, [r7, #910]	; 0x38e
	sampling_position=i>>6;   //   0-8 steps
 80026c6:	4b26      	ldr	r3, [pc, #152]	; (8002760 <sampling+0x7d0>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	099b      	lsrs	r3, r3, #6
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	4b25      	ldr	r3, [pc, #148]	; (8002768 <sampling+0x7d8>)
 80026d2:	701a      	strb	r2, [r3, #0]
	sampling_position_b=(sampling_position+7)&7;
 80026d4:	4b24      	ldr	r3, [pc, #144]	; (8002768 <sampling+0x7d8>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	3307      	adds	r3, #7
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4b22      	ldr	r3, [pc, #136]	; (800276c <sampling+0x7dc>)
 80026e4:	701a      	strb	r2, [r3, #0]
	note_plain=seq.notes1[seq.pos & 7 ];
 80026e6:	4b22      	ldr	r3, [pc, #136]	; (8002770 <sampling+0x7e0>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	4a20      	ldr	r2, [pc, #128]	; (8002770 <sampling+0x7e0>)
 80026f0:	4413      	add	r3, r2
 80026f2:	789b      	ldrb	r3, [r3, #2]
 80026f4:	f887 3373 	strb.w	r3, [r7, #883]	; 0x373
potValues[i&255]=potSource[i&255]>>4; //just to update values
 80026f8:	4b19      	ldr	r3, [pc, #100]	; (8002760 <sampling+0x7d0>)
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	4a1d      	ldr	r2, [pc, #116]	; (8002774 <sampling+0x7e4>)
 8002700:	5cd2      	ldrb	r2, [r2, r3]
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <sampling+0x7d0>)
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	0912      	lsrs	r2, r2, #4
 800270a:	b2d1      	uxtb	r1, r2
 800270c:	4a1a      	ldr	r2, [pc, #104]	; (8002778 <sampling+0x7e8>)
 800270e:	54d1      	strb	r1, [r2, r3]

//tempo_large++;
//if (tempo_large>=(tempo_mod*4096))  tempo_large=0;     // use it count for lfo long  16*16 notes

if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;isr_change=next_isr+1;  }  else {tempo_count++;  }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 8002710:	4b1a      	ldr	r3, [pc, #104]	; (800277c <sampling+0x7ec>)
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	f8b7 23b2 	ldrh.w	r2, [r7, #946]	; 0x3b2
 8002718:	429a      	cmp	r2, r3
 800271a:	d833      	bhi.n	8002784 <sampling+0x7f4>
 800271c:	4b18      	ldr	r3, [pc, #96]	; (8002780 <sampling+0x7f0>)
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	3301      	adds	r3, #1
 8002722:	b29b      	uxth	r3, r3
 8002724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002728:	b29a      	uxth	r2, r3
 800272a:	4b15      	ldr	r3, [pc, #84]	; (8002780 <sampling+0x7f0>)
 800272c:	801a      	strh	r2, [r3, #0]
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <sampling+0x7ec>)
 8002730:	2200      	movs	r2, #0
 8002732:	801a      	strh	r2, [r3, #0]
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <sampling+0x7f0>)
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	3301      	adds	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <sampling+0x7c8>)
 800273e:	801a      	strh	r2, [r3, #0]
 8002740:	e026      	b.n	8002790 <sampling+0x800>
 8002742:	bf00      	nop
 8002744:	2000b1d8 	.word	0x2000b1d8
 8002748:	20000158 	.word	0x20000158
 800274c:	20000204 	.word	0x20000204
 8002750:	2000b1d6 	.word	0x2000b1d6
 8002754:	0800cf6c 	.word	0x0800cf6c
 8002758:	200089b8 	.word	0x200089b8
 800275c:	20000144 	.word	0x20000144
 8002760:	200089c2 	.word	0x200089c2
 8002764:	200089c0 	.word	0x200089c0
 8002768:	2000d768 	.word	0x2000d768
 800276c:	2000d769 	.word	0x2000d769
 8002770:	2000cdfc 	.word	0x2000cdfc
 8002774:	20008758 	.word	0x20008758
 8002778:	20008558 	.word	0x20008558
 800277c:	2000b200 	.word	0x2000b200
 8002780:	2000b1d4 	.word	0x2000b1d4
 8002784:	4b94      	ldr	r3, [pc, #592]	; (80029d8 <sampling+0xa48>)
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	3301      	adds	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	4b92      	ldr	r3, [pc, #584]	; (80029d8 <sampling+0xa48>)
 800278e:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8002790:	2300      	movs	r3, #0
 8002792:	f8a7 33b4 	strh.w	r3, [r7, #948]	; 0x3b4
	if ((next_isr>>4) != (seq.pos)) { 					//     min 6400 cycles per seq.pos ,         next note step 140ms
 8002796:	4b91      	ldr	r3, [pc, #580]	; (80029dc <sampling+0xa4c>)
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	b29a      	uxth	r2, r3
 800279e:	4b90      	ldr	r3, [pc, #576]	; (80029e0 <sampling+0xa50>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d009      	beq.n	80027bc <sampling+0x82c>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 80027a8:	4b8c      	ldr	r3, [pc, #560]	; (80029dc <sampling+0xa4c>)
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4b8b      	ldr	r3, [pc, #556]	; (80029e0 <sampling+0xa50>)
 80027b4:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 80027b6:	2301      	movs	r3, #1
 80027b8:	f8a7 33b4 	strh.w	r3, [r7, #948]	; 0x3b4
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}

	if ((next_isr&7)==0+(sampler.offset&7))	note[3].position=1;  // for sample     run always
 80027bc:	4b87      	ldr	r3, [pc, #540]	; (80029dc <sampling+0xa4c>)
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b88      	ldr	r3, [pc, #544]	; (80029e4 <sampling+0xa54>)
 80027c4:	791b      	ldrb	r3, [r3, #4]
 80027c6:	4053      	eors	r3, r2
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d103      	bne.n	80027d8 <sampling+0x848>
 80027d0:	4b85      	ldr	r3, [pc, #532]	; (80029e8 <sampling+0xa58>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos ie once in ten bankwrites ,rare
 80027d8:	f8b7 33b4 	ldrh.w	r3, [r7, #948]	; 0x3b4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 815e 	beq.w	8002a9e <sampling+0xb0e>
	{
		serial_tosend=1;
 80027e2:	4b82      	ldr	r3, [pc, #520]	; (80029ec <sampling+0xa5c>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
		//note_reset();
		//note[1].timeshift=(adc_values[1])&31; //assigned pots to start of loopers 0-16,works
		seqpos_i=i+1;   //record postion
 80027e8:	4b81      	ldr	r3, [pc, #516]	; (80029f0 <sampling+0xa60>)
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	3301      	adds	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	4b80      	ldr	r3, [pc, #512]	; (80029f4 <sampling+0xa64>)
 80027f2:	801a      	strh	r2, [r3, #0]


	//	note[2].timeshift=note[1].timeshift=note[3].timeshift=note[4].timeshift;
		uint8_t   loop_temp1[4];
		loop_temp1[0]=seq.pos&7;
 80027f4:	4b7a      	ldr	r3, [pc, #488]	; (80029e0 <sampling+0xa50>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002802:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8002806:	701a      	strb	r2, [r3, #0]
		loop_temp1[1]=adc_values[1]>>2;
 8002808:	4b7b      	ldr	r3, [pc, #492]	; (80029f8 <sampling+0xa68>)
 800280a:	885b      	ldrh	r3, [r3, #2]
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	b29b      	uxth	r3, r3
 8002810:	b2da      	uxtb	r2, r3
 8002812:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002816:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 800281a:	705a      	strb	r2, [r3, #1]
		loop_temp1[2]=adc_values[2]>>2;
 800281c:	4b76      	ldr	r3, [pc, #472]	; (80029f8 <sampling+0xa68>)
 800281e:	889b      	ldrh	r3, [r3, #4]
 8002820:	089b      	lsrs	r3, r3, #2
 8002822:	b29b      	uxth	r3, r3
 8002824:	b2da      	uxtb	r2, r3
 8002826:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800282a:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 800282e:	709a      	strb	r2, [r3, #2]
		loop_temp1[3]=adc_values[0]>>2;
 8002830:	4b71      	ldr	r3, [pc, #452]	; (80029f8 <sampling+0xa68>)
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	b29b      	uxth	r3, r3
 8002838:	b2da      	uxtb	r2, r3
 800283a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800283e:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8002842:	70da      	strb	r2, [r3, #3]

		//loop_temp1=(seq.pos&seq_dat); // loop position and length


		seq.loop[0]=(note[0].timeshift+loop_temp1[0]+loop_temp1[1])&31;
 8002844:	4b68      	ldr	r3, [pc, #416]	; (80029e8 <sampling+0xa58>)
 8002846:	799a      	ldrb	r2, [r3, #6]
 8002848:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800284c:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	4413      	add	r3, r2
 8002854:	b2da      	uxtb	r2, r3
 8002856:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800285a:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 800285e:	785b      	ldrb	r3, [r3, #1]
 8002860:	4413      	add	r3, r2
 8002862:	b2db      	uxtb	r3, r3
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4b5d      	ldr	r3, [pc, #372]	; (80029e0 <sampling+0xa50>)
 800286c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		seq.loop[1]=(note[1].timeshift+loop_temp1[0]+loop_temp1[2])&31;
 8002870:	4b5d      	ldr	r3, [pc, #372]	; (80029e8 <sampling+0xa58>)
 8002872:	7d1a      	ldrb	r2, [r3, #20]
 8002874:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002878:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	4413      	add	r3, r2
 8002880:	b2da      	uxtb	r2, r3
 8002882:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002886:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 800288a:	789b      	ldrb	r3, [r3, #2]
 800288c:	4413      	add	r3, r2
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4b52      	ldr	r3, [pc, #328]	; (80029e0 <sampling+0xa50>)
 8002898:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		seq.loop[2]=(note[2].timeshift+loop_temp1[0])&31; // this is really handy with sync to notes
 800289c:	4b52      	ldr	r3, [pc, #328]	; (80029e8 <sampling+0xa58>)
 800289e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80028a2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80028a6:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	4413      	add	r3, r2
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4b4a      	ldr	r3, [pc, #296]	; (80029e0 <sampling+0xa50>)
 80028b8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		seq.loop[3]=(note[3].timeshift+loop_temp1[0]+loop_temp1[3])&31;
 80028bc:	4b4a      	ldr	r3, [pc, #296]	; (80029e8 <sampling+0xa58>)
 80028be:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80028c2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80028c6:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	4413      	add	r3, r2
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80028d4:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80028d8:	78db      	ldrb	r3, [r3, #3]
 80028da:	4413      	add	r3, r2
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f003 031f 	and.w	r3, r3, #31
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	4b3e      	ldr	r3, [pc, #248]	; (80029e0 <sampling+0xa50>)
 80028e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		//seq.loop[5]=(note[5].timeshift+loop_temp1[0])&31;


			note[0].pitch=(notes_joined[seq.loop[0]])+(note[0].transpose);    // maybe join 1 and 2
 80028ea:	4b3d      	ldr	r3, [pc, #244]	; (80029e0 <sampling+0xa50>)
 80028ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b42      	ldr	r3, [pc, #264]	; (80029fc <sampling+0xa6c>)
 80028f4:	5c9a      	ldrb	r2, [r3, r2]
 80028f6:	4b3c      	ldr	r3, [pc, #240]	; (80029e8 <sampling+0xa58>)
 80028f8:	795b      	ldrb	r3, [r3, #5]
 80028fa:	4413      	add	r3, r2
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	4b3a      	ldr	r3, [pc, #232]	; (80029e8 <sampling+0xa58>)
 8002900:	709a      	strb	r2, [r3, #2]
			//note[0].pitch=note[1].pitch+(note[0].transpose); // just double
			note[1].pitch=(notes_joined[seq.loop[1]])+(note[1].transpose);  //loop 8 notes from pos and x times
 8002902:	4b37      	ldr	r3, [pc, #220]	; (80029e0 <sampling+0xa50>)
 8002904:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002908:	461a      	mov	r2, r3
 800290a:	4b3c      	ldr	r3, [pc, #240]	; (80029fc <sampling+0xa6c>)
 800290c:	5c9a      	ldrb	r2, [r3, r2]
 800290e:	4b36      	ldr	r3, [pc, #216]	; (80029e8 <sampling+0xa58>)
 8002910:	7cdb      	ldrb	r3, [r3, #19]
 8002912:	4413      	add	r3, r2
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4b34      	ldr	r3, [pc, #208]	; (80029e8 <sampling+0xa58>)
 8002918:	741a      	strb	r2, [r3, #16]
			note[2].pitch=(notes_joined[seq.loop[2]])+(note[2].transpose);  //loop 8 notes from pos and x times
 800291a:	4b31      	ldr	r3, [pc, #196]	; (80029e0 <sampling+0xa50>)
 800291c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002920:	461a      	mov	r2, r3
 8002922:	4b36      	ldr	r3, [pc, #216]	; (80029fc <sampling+0xa6c>)
 8002924:	5c9a      	ldrb	r2, [r3, r2]
 8002926:	4b30      	ldr	r3, [pc, #192]	; (80029e8 <sampling+0xa58>)
 8002928:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800292c:	4413      	add	r3, r2
 800292e:	b2da      	uxtb	r2, r3
 8002930:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <sampling+0xa58>)
 8002932:	779a      	strb	r2, [r3, #30]

		note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8002934:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <sampling+0xa50>)
 8002936:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800293a:	461a      	mov	r2, r3
 800293c:	4b2f      	ldr	r3, [pc, #188]	; (80029fc <sampling+0xa6c>)
 800293e:	5c9a      	ldrb	r2, [r3, r2]
 8002940:	4b29      	ldr	r3, [pc, #164]	; (80029e8 <sampling+0xa58>)
 8002942:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002946:	4413      	add	r3, r2
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <sampling+0xa58>)
 800294c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
//	if (note[3].pitch) 		{note[3].pitch=note[3].pitch+(note[3].transpose>>4);	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off

//	note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose);  //
		patch_target_replace();
 8002950:	f7fe fdac 	bl	80014ac <patch_target_replace>
		uint8_t detune_temp=0;
 8002954:	2300      	movs	r3, #0
 8002956:	f887 33b0 	strb.w	r3, [r7, #944]	; 0x3b0
//		if(detune_temp>27) detune_temp=27;
		   //this is for sine skip mask

//	note[3].tuned=sine_lut[MajorNote[detune_temp]];	//sets freq ,1.0594  * 16536 =17518  ,
//	note[3].tuned= (note[3].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
		mask_result =0;
 800295a:	4b29      	ldr	r3, [pc, #164]	; (8002a00 <sampling+0xa70>)
 800295c:	2200      	movs	r2, #0
 800295e:	801a      	strh	r2, [r3, #0]

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002960:	2300      	movs	r3, #0
 8002962:	f887 33b7 	strb.w	r3, [r7, #951]	; 0x3b7
 8002966:	e095      	b.n	8002a94 <sampling+0xb04>
   // note[0].tuned=7181;
  //  detune_temp=(note[mask_i].pitch+(note[mask_i].detune))&31    ;
	//	if(detune_temp>27) detune_temp=27;


		    detune_temp=note[mask_i].pitch+note[mask_i].detune;
 8002968:	f897 23b7 	ldrb.w	r2, [r7, #951]	; 0x3b7
 800296c:	491e      	ldr	r1, [pc, #120]	; (80029e8 <sampling+0xa58>)
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	440b      	add	r3, r1
 8002978:	3302      	adds	r3, #2
 800297a:	7819      	ldrb	r1, [r3, #0]
 800297c:	f897 23b7 	ldrb.w	r2, [r7, #951]	; 0x3b7
 8002980:	4819      	ldr	r0, [pc, #100]	; (80029e8 <sampling+0xa58>)
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4403      	add	r3, r0
 800298c:	3308      	adds	r3, #8
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	440b      	add	r3, r1
 8002992:	f887 33b0 	strb.w	r3, [r7, #944]	; 0x3b0

	//if	   (detune_temp>=30) detune_temp=30;
	//note[mask_i].tuned=(sample_Noteadd[MajorNote[detune_temp]]);   // put unit tune here

		        if (detune_temp>pitch_limit ) detune_temp=pitch_limit;
 8002996:	f897 33b0 	ldrb.w	r3, [r7, #944]	; 0x3b0
 800299a:	2b3c      	cmp	r3, #60	; 0x3c
 800299c:	d902      	bls.n	80029a4 <sampling+0xa14>
 800299e:	233c      	movs	r3, #60	; 0x3c
 80029a0:	f887 33b0 	strb.w	r3, [r7, #944]	; 0x3b0
		    if (detune_temp>30 )   note[mask_i].tuned=sample_Noteadd[MinorNote[detune_temp-31]];    // for now
 80029a4:	f897 33b0 	ldrb.w	r3, [r7, #944]	; 0x3b0
 80029a8:	2b1e      	cmp	r3, #30
 80029aa:	d92f      	bls.n	8002a0c <sampling+0xa7c>
 80029ac:	f897 33b0 	ldrb.w	r3, [r7, #944]	; 0x3b0
 80029b0:	3b1f      	subs	r3, #31
 80029b2:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <sampling+0xa74>)
 80029b4:	5cd3      	ldrb	r3, [r2, r3]
 80029b6:	4619      	mov	r1, r3
 80029b8:	f897 23b7 	ldrb.w	r2, [r7, #951]	; 0x3b7
 80029bc:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <sampling+0xa78>)
 80029be:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80029c2:	4909      	ldr	r1, [pc, #36]	; (80029e8 <sampling+0xa58>)
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	440b      	add	r3, r1
 80029ce:	330c      	adds	r3, #12
 80029d0:	4602      	mov	r2, r0
 80029d2:	801a      	strh	r2, [r3, #0]
 80029d4:	e02d      	b.n	8002a32 <sampling+0xaa2>
 80029d6:	bf00      	nop
 80029d8:	2000b200 	.word	0x2000b200
 80029dc:	2000b1d4 	.word	0x2000b1d4
 80029e0:	2000cdfc 	.word	0x2000cdfc
 80029e4:	20000204 	.word	0x20000204
 80029e8:	20000158 	.word	0x20000158
 80029ec:	2000f995 	.word	0x2000f995
 80029f0:	200089c2 	.word	0x200089c2
 80029f4:	20010c24 	.word	0x20010c24
 80029f8:	20000144 	.word	0x20000144
 80029fc:	2000f770 	.word	0x2000f770
 8002a00:	200099d0 	.word	0x200099d0
 8002a04:	0800d214 	.word	0x0800d214
 8002a08:	0800d234 	.word	0x0800d234
	else note[mask_i].tuned=sample_Noteadd[MajorNote[detune_temp]];
 8002a0c:	f897 33b0 	ldrb.w	r3, [r7, #944]	; 0x3b0
 8002a10:	4a9d      	ldr	r2, [pc, #628]	; (8002c88 <sampling+0xcf8>)
 8002a12:	5cd3      	ldrb	r3, [r2, r3]
 8002a14:	4619      	mov	r1, r3
 8002a16:	f897 23b7 	ldrb.w	r2, [r7, #951]	; 0x3b7
 8002a1a:	4b9c      	ldr	r3, [pc, #624]	; (8002c8c <sampling+0xcfc>)
 8002a1c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8002a20:	499b      	ldr	r1, [pc, #620]	; (8002c90 <sampling+0xd00>)
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	440b      	add	r3, r1
 8002a2c:	330c      	adds	r3, #12
 8002a2e:	4602      	mov	r2, r0
 8002a30:	801a      	strh	r2, [r3, #0]

	//note[mask_i].tuned=sample_Noteadd[MajorNote[detune_temp]];   // put unit tune here

		float tune_temp=note[mask_i].tuned;
 8002a32:	f897 23b7 	ldrb.w	r2, [r7, #951]	; 0x3b7
 8002a36:	4996      	ldr	r1, [pc, #600]	; (8002c90 <sampling+0xd00>)
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	440b      	add	r3, r1
 8002a42:	330c      	adds	r3, #12
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4e:	edc7 7adb 	vstr	s15, [r7, #876]	; 0x36c
		note[mask_i].tuned=tune_temp*0.99;	// this works
 8002a52:	f8d7 036c 	ldr.w	r0, [r7, #876]	; 0x36c
 8002a56:	f7fd fe55 	bl	8000704 <__aeabi_f2d>
 8002a5a:	a389      	add	r3, pc, #548	; (adr r3, 8002c80 <sampling+0xcf0>)
 8002a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a60:	f7fd fbc2 	bl	80001e8 <__aeabi_dmul>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	f897 43b7 	ldrb.w	r4, [r7, #951]	; 0x3b7
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	4619      	mov	r1, r3
 8002a70:	f7fd fea0 	bl	80007b4 <__aeabi_d2uiz>
 8002a74:	4603      	mov	r3, r0
 8002a76:	b299      	uxth	r1, r3
 8002a78:	4a85      	ldr	r2, [pc, #532]	; (8002c90 <sampling+0xd00>)
 8002a7a:	4623      	mov	r3, r4
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	1b1b      	subs	r3, r3, r4
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4413      	add	r3, r2
 8002a84:	330c      	adds	r3, #12
 8002a86:	460a      	mov	r2, r1
 8002a88:	801a      	strh	r2, [r3, #0]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002a8a:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f887 33b7 	strb.w	r3, [r7, #951]	; 0x3b7
 8002a94:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	f67f af65 	bls.w	8002968 <sampling+0x9d8>
		//note_tuned[3]=2751;
	} // end of note calcualte



	if ((i&63)==0)
 8002a9e:	4b7d      	ldr	r3, [pc, #500]	; (8002c94 <sampling+0xd04>)
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d103      	bne.n	8002ab2 <sampling+0xb22>
	{
	    LFO_square_one_pulse();
 8002aaa:	f000 fe51 	bl	8003750 <LFO_square_one_pulse>

		LFO_source_synced();
 8002aae:	f000 fefb 	bl	80038a8 <LFO_source_synced>
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002ab2:	4b78      	ldr	r3, [pc, #480]	; (8002c94 <sampling+0xd04>)
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	4b76      	ldr	r3, [pc, #472]	; (8002c94 <sampling+0xd04>)
 8002abc:	801a      	strh	r2, [r3, #0]
 8002abe:	4b75      	ldr	r3, [pc, #468]	; (8002c94 <sampling+0xd04>)
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac6:	f4ff adf7 	bcc.w	80026b8 <sampling+0x728>
int32_t  sample_temp3;
int32_t  sample_temp4;
int32_t  sample_temp5;


memcpy(&sample_counts_temp,sample_counts_holder,80);
 8002aca:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ad2:	4a71      	ldr	r2, [pc, #452]	; (8002c98 <sampling+0xd08>)
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	2350      	movs	r3, #80	; 0x50
 8002ada:	461a      	mov	r2, r3
 8002adc:	f009 fec2 	bl	800c864 <memcpy>

sample_counts_temp[30]=note[0].tuned;
 8002ae0:	4b6b      	ldr	r3, [pc, #428]	; (8002c90 <sampling+0xd00>)
 8002ae2:	899a      	ldrh	r2, [r3, #12]
 8002ae4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002aec:	879a      	strh	r2, [r3, #60]	; 0x3c
sample_counts_temp[31]=note[1].tuned;
 8002aee:	4b68      	ldr	r3, [pc, #416]	; (8002c90 <sampling+0xd00>)
 8002af0:	8b5a      	ldrh	r2, [r3, #26]
 8002af2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002afa:	87da      	strh	r2, [r3, #62]	; 0x3e
sample_counts_temp[32]=note[2].tuned;
 8002afc:	4b64      	ldr	r3, [pc, #400]	; (8002c90 <sampling+0xd00>)
 8002afe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8002b00:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002b08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
sample_counts_temp[33]=note[3].tuned;
 8002b0c:	4b60      	ldr	r3, [pc, #384]	; (8002c90 <sampling+0xd00>)
 8002b0e:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8002b10:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002b18:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42


uint32_t*  sine_ptr_temp[5];
	sampler.start=(sampler.start_MSB<<8)+sampler.start_LSB;
 8002b1c:	4b5f      	ldr	r3, [pc, #380]	; (8002c9c <sampling+0xd0c>)
 8002b1e:	7b9b      	ldrb	r3, [r3, #14]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	4b5d      	ldr	r3, [pc, #372]	; (8002c9c <sampling+0xd0c>)
 8002b28:	7bdb      	ldrb	r3, [r3, #15]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	4b5a      	ldr	r3, [pc, #360]	; (8002c9c <sampling+0xd0c>)
 8002b32:	80da      	strh	r2, [r3, #6]
	sampler.end=(sampler.end_MSB<<8)+sampler.end_LSB;
 8002b34:	4b59      	ldr	r3, [pc, #356]	; (8002c9c <sampling+0xd0c>)
 8002b36:	7c1b      	ldrb	r3, [r3, #16]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	4b57      	ldr	r3, [pc, #348]	; (8002c9c <sampling+0xd0c>)
 8002b40:	7c5b      	ldrb	r3, [r3, #17]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	4b54      	ldr	r3, [pc, #336]	; (8002c9c <sampling+0xd0c>)
 8002b4a:	811a      	strh	r2, [r3, #8]
	if ((sampler.one_shot&2) && (sine_counter[7]>(sampler.end-1000))&& (note[1].osc==3))     {note[0].position=0; sine_counter[7] =0;}
	if ((sampler.one_shot&4) && (sine_counter[11]>(sampler.end-1000))&& (note[2].osc==3))     {note[0].position=0; sine_counter[8] =0;}
	if ((sampler.one_shot&8) && (sine_counter[14]>(sampler.end-1000))&& (note[3].osc==3))  {note[0].position=0; sine_counter[9] =0;}
*/

	sine_ptr_temp[0]=&sine_counter[3];
 8002b4c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002b50:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b54:	4a52      	ldr	r2, [pc, #328]	; (8002ca0 <sampling+0xd10>)
 8002b56:	601a      	str	r2, [r3, #0]
	sine_ptr_temp[1]=&sine_counter[6];
 8002b58:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002b5c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b60:	4a50      	ldr	r2, [pc, #320]	; (8002ca4 <sampling+0xd14>)
 8002b62:	605a      	str	r2, [r3, #4]
	sine_ptr_temp[2]=&sine_counter[9];
 8002b64:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002b68:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b6c:	4a4e      	ldr	r2, [pc, #312]	; (8002ca8 <sampling+0xd18>)
 8002b6e:	609a      	str	r2, [r3, #8]
	sine_ptr_temp[3]=&sine_counter[12];
 8002b70:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002b74:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b78:	4a4c      	ldr	r2, [pc, #304]	; (8002cac <sampling+0xd1c>)
 8002b7a:	60da      	str	r2, [r3, #12]


	if(sampler.start_MSB>sampler.end_MSB) sampler.start_MSB=0; //flip to 0  for now
 8002b7c:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <sampling+0xd0c>)
 8002b7e:	7b9a      	ldrb	r2, [r3, #14]
 8002b80:	4b46      	ldr	r3, [pc, #280]	; (8002c9c <sampling+0xd0c>)
 8002b82:	7c1b      	ldrb	r3, [r3, #16]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d902      	bls.n	8002b8e <sampling+0xbfe>
 8002b88:	4b44      	ldr	r3, [pc, #272]	; (8002c9c <sampling+0xd0c>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	739a      	strb	r2, [r3, #14]
	if (sampler.ram_seq<sampler.start)      sampler.ram_seq=sampler.start;
 8002b8e:	4b43      	ldr	r3, [pc, #268]	; (8002c9c <sampling+0xd0c>)
 8002b90:	8b1a      	ldrh	r2, [r3, #24]
 8002b92:	4b42      	ldr	r3, [pc, #264]	; (8002c9c <sampling+0xd0c>)
 8002b94:	88db      	ldrh	r3, [r3, #6]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d203      	bcs.n	8002ba2 <sampling+0xc12>
 8002b9a:	4b40      	ldr	r3, [pc, #256]	; (8002c9c <sampling+0xd0c>)
 8002b9c:	88da      	ldrh	r2, [r3, #6]
 8002b9e:	4b3f      	ldr	r3, [pc, #252]	; (8002c9c <sampling+0xd0c>)
 8002ba0:	831a      	strh	r2, [r3, #24]
	if ((sampler.ram_seq+256)>sampler.end) sampler.ram_seq=sampler.start;     // just for playback counter
 8002ba2:	4b3e      	ldr	r3, [pc, #248]	; (8002c9c <sampling+0xd0c>)
 8002ba4:	8b1b      	ldrh	r3, [r3, #24]
 8002ba6:	33ff      	adds	r3, #255	; 0xff
 8002ba8:	4a3c      	ldr	r2, [pc, #240]	; (8002c9c <sampling+0xd0c>)
 8002baa:	8912      	ldrh	r2, [r2, #8]
 8002bac:	4293      	cmp	r3, r2
 8002bae:	db03      	blt.n	8002bb8 <sampling+0xc28>
 8002bb0:	4b3a      	ldr	r3, [pc, #232]	; (8002c9c <sampling+0xd0c>)
 8002bb2:	88da      	ldrh	r2, [r3, #6]
 8002bb4:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <sampling+0xd0c>)
 8002bb6:	831a      	strh	r2, [r3, #24]

	sampler.length=sampler.end-sampler.start;
 8002bb8:	4b38      	ldr	r3, [pc, #224]	; (8002c9c <sampling+0xd0c>)
 8002bba:	891a      	ldrh	r2, [r3, #8]
 8002bbc:	4b37      	ldr	r3, [pc, #220]	; (8002c9c <sampling+0xd0c>)
 8002bbe:	88db      	ldrh	r3, [r3, #6]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	4b35      	ldr	r3, [pc, #212]	; (8002c9c <sampling+0xd0c>)
 8002bc6:	815a      	strh	r2, [r3, #10]
//	 if(!note[3].position )	sampler_offset=(sampler.offset&15)*1024;   // use positon to trigger   , this needs to be better

	if(sine_counter[9]<=sampler.start) sine_counter[9]=sampler.start;
 8002bc8:	4b39      	ldr	r3, [pc, #228]	; (8002cb0 <sampling+0xd20>)
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	4a33      	ldr	r2, [pc, #204]	; (8002c9c <sampling+0xd0c>)
 8002bce:	88d2      	ldrh	r2, [r2, #6]
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d804      	bhi.n	8002bde <sampling+0xc4e>
 8002bd4:	4b31      	ldr	r3, [pc, #196]	; (8002c9c <sampling+0xd0c>)
 8002bd6:	88db      	ldrh	r3, [r3, #6]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b35      	ldr	r3, [pc, #212]	; (8002cb0 <sampling+0xd20>)
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24


	//if (sine_counter[9]>((sampler.length+sampler.start+sampler_offset)-256))   {sine_counter[9]=sampler.start+sampler_offset; note[3].position=0;}// jump to start , turn off
	if (sine_counter[9]>((sampler.length+sampler.start)-256))   {sine_counter[9]=sampler.start; note[3].position=0;}
 8002bde:	4b34      	ldr	r3, [pc, #208]	; (8002cb0 <sampling+0xd20>)
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	4a2e      	ldr	r2, [pc, #184]	; (8002c9c <sampling+0xd0c>)
 8002be4:	8952      	ldrh	r2, [r2, #10]
 8002be6:	4611      	mov	r1, r2
 8002be8:	4a2c      	ldr	r2, [pc, #176]	; (8002c9c <sampling+0xd0c>)
 8002bea:	88d2      	ldrh	r2, [r2, #6]
 8002bec:	440a      	add	r2, r1
 8002bee:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d908      	bls.n	8002c08 <sampling+0xc78>
 8002bf6:	4b29      	ldr	r3, [pc, #164]	; (8002c9c <sampling+0xd0c>)
 8002bf8:	88db      	ldrh	r3, [r3, #6]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	4b2c      	ldr	r3, [pc, #176]	; (8002cb0 <sampling+0xd20>)
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24
 8002c00:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <sampling+0xd00>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	sampler.start_ptr=&RAM[sine_counter[9]];
 8002c08:	4b29      	ldr	r3, [pc, #164]	; (8002cb0 <sampling+0xd20>)
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4a29      	ldr	r2, [pc, #164]	; (8002cb4 <sampling+0xd24>)
 8002c10:	4413      	add	r3, r2
 8002c12:	4a22      	ldr	r2, [pc, #136]	; (8002c9c <sampling+0xd0c>)
 8002c14:	6153      	str	r3, [r2, #20]
	//sampler.start_ptr=&RAM[sine_counter[9]-sampler_offset];    // only 256
//	sampler_offset=(sampler.offset&15)*(sampler.length>>4);

//tuned_list[0]=6397;
uint16_t accu_count[4];
memcpy(&accu_count,sample_accu_counter,8);  // copy counters
 8002c16:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002c1a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c1e:	4a26      	ldr	r2, [pc, #152]	; (8002cb8 <sampling+0xd28>)
 8002c20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c24:	e883 0003 	stmia.w	r3, {r0, r1}

memcpy(&sample_accus,sample_accus_hold,16);    // this is good
 8002c28:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8002c2c:	2210      	movs	r2, #16
 8002c2e:	4923      	ldr	r1, [pc, #140]	; (8002cbc <sampling+0xd2c>)
 8002c30:	4618      	mov	r0, r3
 8002c32:	f009 fe17 	bl	800c864 <memcpy>


uint8_t*  sample_block_ptr=&flash_read_block ;    // temporary only
 8002c36:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <sampling+0xd30>)
 8002c38:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
*/



	if(counter_16>64) counter_16=0;
 8002c3c:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <sampling+0xd34>)
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	2b40      	cmp	r3, #64	; 0x40
 8002c42:	d902      	bls.n	8002c4a <sampling+0xcba>
 8002c44:	4b1f      	ldr	r3, [pc, #124]	; (8002cc4 <sampling+0xd34>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	801a      	strh	r2, [r3, #0]

	  uint32_t sample_flash_address=(511<<16)+((128+counter_16) <<8);  // change this soemthing mroe friendly
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <sampling+0xd34>)
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	3380      	adds	r3, #128	; 0x80
 8002c50:	021b      	lsls	r3, r3, #8
 8002c52:	f103 73ff 	add.w	r3, r3, #33423360	; 0x1fe0000
 8002c56:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002c5a:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
	sampler_1k_load(sample_flash_address);
 8002c5e:	f8d7 0394 	ldr.w	r0, [r7, #916]	; 0x394
 8002c62:	f001 ff25 	bl	8004ab0 <sampler_1k_load>

	counter_16=counter_16+2;   // jump 512 bytes
 8002c66:	4b17      	ldr	r3, [pc, #92]	; (8002cc4 <sampling+0xd34>)
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <sampling+0xd34>)
 8002c70:	801a      	strh	r2, [r3, #0]

	uint16_t*   ram_ptr=  &flash_read_block;  // pointer goes to LSB !!!!
 8002c72:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <sampling+0xd30>)
 8002c74:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390





for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <sampling+0xd04>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	801a      	strh	r2, [r3, #0]
 8002c7e:	e24f      	b.n	8003120 <sampling+0x1190>
 8002c80:	7ae147ae 	.word	0x7ae147ae
 8002c84:	3fefae14 	.word	0x3fefae14
 8002c88:	0800d1f4 	.word	0x0800d1f4
 8002c8c:	0800d234 	.word	0x0800d234
 8002c90:	20000158 	.word	0x20000158
 8002c94:	200089c2 	.word	0x200089c2
 8002c98:	200084f4 	.word	0x200084f4
 8002c9c:	20000204 	.word	0x20000204
 8002ca0:	20008964 	.word	0x20008964
 8002ca4:	20008970 	.word	0x20008970
 8002ca8:	2000897c 	.word	0x2000897c
 8002cac:	20008988 	.word	0x20008988
 8002cb0:	20008958 	.word	0x20008958
 8002cb4:	200003b0 	.word	0x200003b0
 8002cb8:	20008544 	.word	0x20008544
 8002cbc:	2000b1d8 	.word	0x2000b1d8
 8002cc0:	20010c2c 	.word	0x20010c2c
 8002cc4:	20011248 	.word	0x20011248
	i_total=i+sample_pointB;
 8002cc8:	4bcf      	ldr	r3, [pc, #828]	; (8003008 <sampling+0x1078>)
 8002cca:	881a      	ldrh	r2, [r3, #0]
 8002ccc:	4bcf      	ldr	r3, [pc, #828]	; (800300c <sampling+0x107c>)
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f8a7 338e 	strh.w	r3, [r7, #910]	; 0x38e
	sampling_position=(i>>6);
 8002cd6:	4bcc      	ldr	r3, [pc, #816]	; (8003008 <sampling+0x1078>)
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	099b      	lsrs	r3, r3, #6
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	4bcb      	ldr	r3, [pc, #812]	; (8003010 <sampling+0x1080>)
 8002ce2:	701a      	strb	r2, [r3, #0]


	sample_adc=input_holder[i>>1];
 8002ce4:	4bc8      	ldr	r3, [pc, #800]	; (8003008 <sampling+0x1078>)
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	085b      	lsrs	r3, r3, #1
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	4bc9      	ldr	r3, [pc, #804]	; (8003014 <sampling+0x1084>)
 8002cf0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002cf4:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
	sample_adc=(sample_adc-2040)<<11;
 8002cf8:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8002cfc:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8002d00:	02db      	lsls	r3, r3, #11
 8002d02:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304

	    ram_temp=*(ram_ptr+(i>>1));    // works
 8002d06:	4bc0      	ldr	r3, [pc, #768]	; (8003008 <sampling+0x1078>)
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	f8d7 2390 	ldr.w	r2, [r7, #912]	; 0x390
 8002d14:	4413      	add	r3, r2
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
	debug_value=ram_temp;
 8002d1c:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 8002d20:	ee07 3a90 	vmov	s15, r3
 8002d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d28:	4bbb      	ldr	r3, [pc, #748]	; (8003018 <sampling+0x1088>)
 8002d2a:	edc3 7a00 	vstr	s15, [r3]
	ram_temp=(ram_temp-32767)<<4;
 8002d2e:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 8002d32:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002d36:	3b7f      	subs	r3, #127	; 0x7f
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300



	if(i&1)  sampler.ram_seq=sampler.ram_seq+1;  // half speed
 8002d3e:	4bb2      	ldr	r3, [pc, #712]	; (8003008 <sampling+0x1078>)
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <sampling+0xdc6>
 8002d4a:	4bb4      	ldr	r3, [pc, #720]	; (800301c <sampling+0x108c>)
 8002d4c:	8b1b      	ldrh	r3, [r3, #24]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	4bb2      	ldr	r3, [pc, #712]	; (800301c <sampling+0x108c>)
 8002d54:	831a      	strh	r2, [r3, #24]

	if (i==seqpos_i) {sample_counts_temp[20]=sample_counts_temp[30]; 		//delay tuned changed till correct time
 8002d56:	4bac      	ldr	r3, [pc, #688]	; (8003008 <sampling+0x1078>)
 8002d58:	881a      	ldrh	r2, [r3, #0]
 8002d5a:	4bb1      	ldr	r3, [pc, #708]	; (8003020 <sampling+0x1090>)
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d129      	bne.n	8002db6 <sampling+0xe26>
 8002d62:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d6a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002d6c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d74:	851a      	strh	r2, [r3, #40]	; 0x28
	sample_counts_temp[21]=sample_counts_temp[31];
 8002d76:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d7e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002d80:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d88:	855a      	strh	r2, [r3, #42]	; 0x2a
	sample_counts_temp[22]=sample_counts_temp[32];
 8002d8a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002d8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d92:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002d96:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d9e:	859a      	strh	r2, [r3, #44]	; 0x2c
	sample_counts_temp[23]=sample_counts_temp[33];
 8002da0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002da8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002dac:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002db4:	85da      	strh	r2, [r3, #46]	; 0x2e
	}

	if ((i&63)==0)	{
 8002db6:	4b94      	ldr	r3, [pc, #592]	; (8003008 <sampling+0x1078>)
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f040 8095 	bne.w	8002eee <sampling+0xf5e>
	  //  LFO_source_new(); // calculate lfo maybe 8 times for now
	    patch_target_replace();    // update values , not too bad
 8002dc4:	f7fe fb72 	bl	80014ac <patch_target_replace>
float freq_temp=arm_sin_f32(filter[0].cutoff_1*0.006159)    ;   // need this for useful filter
 8002dc8:	4b96      	ldr	r3, [pc, #600]	; (8003024 <sampling+0x1094>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fd fc87 	bl	80006e0 <__aeabi_i2d>
 8002dd2:	a389      	add	r3, pc, #548	; (adr r3, 8002ff8 <sampling+0x1068>)
 8002dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd8:	f7fd fa06 	bl	80001e8 <__aeabi_dmul>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	f7fd fd06 	bl	80007f4 <__aeabi_d2f>
 8002de8:	4603      	mov	r3, r0
 8002dea:	ee00 3a10 	vmov	s0, r3
 8002dee:	f009 fcc7 	bl	800c780 <arm_sin_f32>
 8002df2:	ed87 0ae2 	vstr	s0, [r7, #904]	; 0x388
	freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 8002df6:	4b86      	ldr	r3, [pc, #536]	; (8003010 <sampling+0x1080>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dfe:	edd7 7ae2 	vldr	s15, [r7, #904]	; 0x388
 8002e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e06:	4a88      	ldr	r2, [pc, #544]	; (8003028 <sampling+0x1098>)
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.006)    ;
 8002e10:	4b84      	ldr	r3, [pc, #528]	; (8003024 <sampling+0x1094>)
 8002e12:	7a1b      	ldrb	r3, [r3, #8]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fd fc63 	bl	80006e0 <__aeabi_i2d>
 8002e1a:	a379      	add	r3, pc, #484	; (adr r3, 8003000 <sampling+0x1070>)
 8002e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e20:	f7fd f9e2 	bl	80001e8 <__aeabi_dmul>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4610      	mov	r0, r2
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	f7fd fce2 	bl	80007f4 <__aeabi_d2f>
 8002e30:	4603      	mov	r3, r0
 8002e32:	ee00 3a10 	vmov	s0, r3
 8002e36:	f009 fca3 	bl	800c780 <arm_sin_f32>
 8002e3a:	ed87 0ae2 	vstr	s0, [r7, #904]	; 0x388
	freq_pointer[1] [sampling_position] =1-freq_temp ; // filter lfos
 8002e3e:	4b74      	ldr	r3, [pc, #464]	; (8003010 <sampling+0x1080>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e46:	edd7 7ae2 	vldr	s15, [r7, #904]	; 0x388
 8002e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e4e:	4a76      	ldr	r2, [pc, #472]	; (8003028 <sampling+0x1098>)
 8002e50:	3309      	adds	r3, #9
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	edc3 7a00 	vstr	s15, [r3]
	freq_temp=arm_sin_f32(filter[2].cutoff_1*0.006)    ;
 8002e5a:	4b72      	ldr	r3, [pc, #456]	; (8003024 <sampling+0x1094>)
 8002e5c:	7c1b      	ldrb	r3, [r3, #16]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fd fc3e 	bl	80006e0 <__aeabi_i2d>
 8002e64:	a366      	add	r3, pc, #408	; (adr r3, 8003000 <sampling+0x1070>)
 8002e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6a:	f7fd f9bd 	bl	80001e8 <__aeabi_dmul>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4610      	mov	r0, r2
 8002e74:	4619      	mov	r1, r3
 8002e76:	f7fd fcbd 	bl	80007f4 <__aeabi_d2f>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	ee00 3a10 	vmov	s0, r3
 8002e80:	f009 fc7e 	bl	800c780 <arm_sin_f32>
 8002e84:	ed87 0ae2 	vstr	s0, [r7, #904]	; 0x388
	freq_pointer[2] [sampling_position] =1-freq_temp ; // filter lfos
 8002e88:	4b61      	ldr	r3, [pc, #388]	; (8003010 <sampling+0x1080>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e90:	edd7 7ae2 	vldr	s15, [r7, #904]	; 0x388
 8002e94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e98:	4a63      	ldr	r2, [pc, #396]	; (8003028 <sampling+0x1098>)
 8002e9a:	3312      	adds	r3, #18
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[3].cutoff_1*0.006)    ;
 8002ea4:	4b5f      	ldr	r3, [pc, #380]	; (8003024 <sampling+0x1094>)
 8002ea6:	7e1b      	ldrb	r3, [r3, #24]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd fc19 	bl	80006e0 <__aeabi_i2d>
 8002eae:	a354      	add	r3, pc, #336	; (adr r3, 8003000 <sampling+0x1070>)
 8002eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb4:	f7fd f998 	bl	80001e8 <__aeabi_dmul>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	f7fd fc98 	bl	80007f4 <__aeabi_d2f>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	ee00 3a10 	vmov	s0, r3
 8002eca:	f009 fc59 	bl	800c780 <arm_sin_f32>
 8002ece:	ed87 0ae2 	vstr	s0, [r7, #904]	; 0x388
	freq_pointer[3] [sampling_position] =1-freq_temp ; // filter lfos
 8002ed2:	4b4f      	ldr	r3, [pc, #316]	; (8003010 <sampling+0x1080>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002eda:	edd7 7ae2 	vldr	s15, [r7, #904]	; 0x388
 8002ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee2:	4a51      	ldr	r2, [pc, #324]	; (8003028 <sampling+0x1098>)
 8002ee4:	331b      	adds	r3, #27
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	edc3 7a00 	vstr	s15, [r3]

	}

		sample_accus[0] = sample_accus[0] + sample_counts_temp[20];  // normal adder full volume
 8002eee:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8002ef2:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8002ef6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002efa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8002efc:	4413      	add	r3, r2
 8002efe:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
		sample_accus[1] = sample_accus[1] + sample_counts_temp[21];
 8002f02:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8002f06:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8002f0a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002f0e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8002f10:	4413      	add	r3, r2
 8002f12:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
		sample_accus[2] = sample_accus[2] + sample_counts_temp[22]; // bouncing somewhere
 8002f16:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002f1a:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8002f1e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002f22:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002f24:	4413      	add	r3, r2
 8002f26:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
		sample_accus[3] = sample_accus[3] + sample_counts_temp[23];  // 6 cycles
 8002f2a:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002f2e:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8002f32:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002f36:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8002f38:	4413      	add	r3, r2
 8002f3a:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350

			if (sample_accus[0]>524287) sample_accus[0] =-0-sample_accus[0] ; // faster >  than &  ,strange,  or is even worse
 8002f3e:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8002f42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f46:	db04      	blt.n	8002f52 <sampling+0xfc2>
 8002f48:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8002f4c:	425b      	negs	r3, r3
 8002f4e:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
			if (sample_accus[1]>524287) sample_accus[1] =-0-sample_accus[1] ; // faster >  than &  ,strange
 8002f52:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8002f56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f5a:	db04      	blt.n	8002f66 <sampling+0xfd6>
 8002f5c:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8002f60:	425b      	negs	r3, r3
 8002f62:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
			if (sample_accus[2]>524287) sample_accus[2] =-0-sample_accus[2] ; //
 8002f66:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002f6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f6e:	db04      	blt.n	8002f7a <sampling+0xfea>
 8002f70:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002f74:	425b      	negs	r3, r3
 8002f76:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
			if (sample_accus[3]>524287) sample_accus[3] =-0-sample_accus[3] ; //  6 cycles
 8002f7a:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002f7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f82:	db04      	blt.n	8002f8e <sampling+0xffe>
 8002f84:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002f88:	425b      	negs	r3, r3
 8002f8a:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
//		if (sample_accus[0]>(1048575)) sample_accus[0] =-0-sample_accus[0] ; // faster >  than &  ,strange,  or is even worse
//		if (sample_accus[1]>1048575) sample_accus[1] =-0-sample_accus[1] ; // faster >  than &  ,strange
//		if (sample_accus[2]>1048575) sample_accus[2] =-0-sample_accus[2] ; //
//		if (sample_accus[3]>1048575) sample_accus[3] =-0-sample_accus[3] ; //

	sample_Accu[0]=(abs(sample_accus[0])-262144)<<1;
 8002f8e:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	bfb8      	it	lt
 8002f96:	425b      	neglt	r3, r3
 8002f98:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
	sample_Accu[1]=(abs(sample_accus[1])-262144)<<1;
 8002fa2:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bfb8      	it	lt
 8002faa:	425b      	neglt	r3, r3
 8002fac:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
	sample_Accu[2]=(abs(sample_accus[2])-262144)<<1;
 8002fb6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bfb8      	it	lt
 8002fbe:	425b      	neglt	r3, r3
 8002fc0:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
	sample_Accu[3]=(abs(sample_accus[3])-262144)<<1;
 8002fca:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bfb8      	it	lt
 8002fd2:	425b      	neglt	r3, r3
 8002fd4:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328



					sample_temp1=(*osc_pointers[0])*note[0].velocity;// needs cut a bit  maybe some diff vol settings
 8002fde:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002fe2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a10      	ldr	r2, [pc, #64]	; (800302c <sampling+0x109c>)
 8002fec:	79d2      	ldrb	r2, [r2, #7]
 8002fee:	fb02 f303 	mul.w	r3, r2, r3
 8002ff2:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8002ff6:	e01b      	b.n	8003030 <sampling+0x10a0>
 8002ff8:	f9378ee3 	.word	0xf9378ee3
 8002ffc:	3f793a2d 	.word	0x3f793a2d
 8003000:	bc6a7efa 	.word	0xbc6a7efa
 8003004:	3f789374 	.word	0x3f789374
 8003008:	200089c2 	.word	0x200089c2
 800300c:	200089c0 	.word	0x200089c0
 8003010:	2000d768 	.word	0x2000d768
 8003014:	2000bbb8 	.word	0x2000bbb8
 8003018:	20010c28 	.word	0x20010c28
 800301c:	20000204 	.word	0x20000204
 8003020:	20010c24 	.word	0x20010c24
 8003024:	200001e4 	.word	0x200001e4
 8003028:	2000b290 	.word	0x2000b290
 800302c:	20000158 	.word	0x20000158
					sample_temp2=(sample_temp1)>>2;
 8003030:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8003034:	109b      	asrs	r3, r3, #2
 8003036:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380

					sample_temp1=(*osc_pointers[1])*note[1].velocity; // needs cut a bit  ,default 20bit
 800303a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800303e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a4f      	ldr	r2, [pc, #316]	; (8003184 <sampling+0x11f4>)
 8003048:	7d52      	ldrb	r2, [r2, #21]
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
					sample_temp3=sample_temp1>>2; // 20+8
 8003052:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8003056:	109b      	asrs	r3, r3, #2
 8003058:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c

					sample_temp1=(*osc_pointers[2])*note[2].velocity;      // needs some gain fine tune !
 800305c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003060:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a46      	ldr	r2, [pc, #280]	; (8003184 <sampling+0x11f4>)
 800306a:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800306e:	fb02 f303 	mul.w	r3, r2, r3
 8003072:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
					sample_temp4 =sample_temp1>>2;    // 64 default 20+8
 8003076:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 800307a:	109b      	asrs	r3, r3, #2
 800307c:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378

					if (note[3].position) sample_Accu[9]=((*(sampler.start_ptr+(i>>1))-32767)<<4)+(sample_Accu[9]>>1); // bit hot , also  add avr
 8003080:	4b40      	ldr	r3, [pc, #256]	; (8003184 <sampling+0x11f4>)
 8003082:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003086:	2b00      	cmp	r3, #0
 8003088:	d012      	beq.n	80030b0 <sampling+0x1120>
 800308a:	4b3f      	ldr	r3, [pc, #252]	; (8003188 <sampling+0x11f8>)
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	4b3f      	ldr	r3, [pc, #252]	; (800318c <sampling+0x11fc>)
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	b29b      	uxth	r3, r3
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 80030a0:	3b7f      	subs	r3, #127	; 0x7f
 80030a2:	011a      	lsls	r2, r3, #4
 80030a4:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 80030a8:	105b      	asrs	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340


					sample_temp1=(*osc_pointers[3])*	note[3].velocity;  // sine out is 16bit, add 4 then 16+8
 80030b0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80030b4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a31      	ldr	r2, [pc, #196]	; (8003184 <sampling+0x11f4>)
 80030be:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 80030c2:	fb02 f303 	mul.w	r3, r2, r3
 80030c6:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384



					sample_temp5 =sample_temp1>>2;
 80030ca:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 80030ce:	109b      	asrs	r3, r3, #2
 80030d0:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
					//sample_Accu[3] =sine_out>>4;
	play_holder0[i]=sample_temp2;  // write to bank
 80030d4:	4b2d      	ldr	r3, [pc, #180]	; (800318c <sampling+0x11fc>)
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	4619      	mov	r1, r3
 80030da:	4a2d      	ldr	r2, [pc, #180]	; (8003190 <sampling+0x1200>)
 80030dc:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 80030e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder1[i]=sample_temp3;
 80030e4:	4b29      	ldr	r3, [pc, #164]	; (800318c <sampling+0x11fc>)
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	4619      	mov	r1, r3
 80030ea:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <sampling+0x1204>)
 80030ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80030f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder2[i]=sample_temp4;
 80030f4:	4b25      	ldr	r3, [pc, #148]	; (800318c <sampling+0x11fc>)
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	4619      	mov	r1, r3
 80030fa:	4a27      	ldr	r2, [pc, #156]	; (8003198 <sampling+0x1208>)
 80030fc:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8003100:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder3[i]=sample_temp5;
 8003104:	4b21      	ldr	r3, [pc, #132]	; (800318c <sampling+0x11fc>)
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	4619      	mov	r1, r3
 800310a:	4a24      	ldr	r2, [pc, #144]	; (800319c <sampling+0x120c>)
 800310c:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8003110:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8003114:	4b1d      	ldr	r3, [pc, #116]	; (800318c <sampling+0x11fc>)
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	3301      	adds	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	4b1b      	ldr	r3, [pc, #108]	; (800318c <sampling+0x11fc>)
 800311e:	801a      	strh	r2, [r3, #0]
 8003120:	4b1a      	ldr	r3, [pc, #104]	; (800318c <sampling+0x11fc>)
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003128:	f4ff adce 	bcc.w	8002cc8 <sampling+0xd38>
	} // end of osc , doing some sound

						    if(note[3].position)		sine_counter[9]=sine_counter[9]+256;  // count up when on
 800312c:	4b15      	ldr	r3, [pc, #84]	; (8003184 <sampling+0x11f4>)
 800312e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <sampling+0x11b2>
 8003136:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <sampling+0x1210>)
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800313e:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <sampling+0x1210>)
 8003140:	6253      	str	r3, [r2, #36]	; 0x24

    memcpy(&sample_accus_hold,sample_accus,16);
 8003142:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8003146:	2210      	movs	r2, #16
 8003148:	4619      	mov	r1, r3
 800314a:	4816      	ldr	r0, [pc, #88]	; (80031a4 <sampling+0x1214>)
 800314c:	f009 fb8a 	bl	800c864 <memcpy>
    memcpy(&sample_accu_counter,accu_count,8);   // copy back
 8003150:	4915      	ldr	r1, [pc, #84]	; (80031a8 <sampling+0x1218>)
 8003152:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003156:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 800315a:	460b      	mov	r3, r1
 800315c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003160:	e883 0003 	stmia.w	r3, {r0, r1}
    memcpy(&sample_counts_holder,sample_counts_temp,80);
 8003164:	4a11      	ldr	r2, [pc, #68]	; (80031ac <sampling+0x121c>)
 8003166:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800316a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800316e:	4610      	mov	r0, r2
 8003170:	4619      	mov	r1, r3
 8003172:	2350      	movs	r3, #80	; 0x50
 8003174:	461a      	mov	r2, r3
 8003176:	f009 fb75 	bl	800c864 <memcpy>
    int32_t filter_Accu2;

    //uint16_t* click=&input_holder[0];


			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <sampling+0x11fc>)
 800317c:	2200      	movs	r2, #0
 800317e:	801a      	strh	r2, [r3, #0]
 8003180:	e2b3      	b.n	80036ea <sampling+0x175a>
 8003182:	bf00      	nop
 8003184:	20000158 	.word	0x20000158
 8003188:	20000204 	.word	0x20000204
 800318c:	200089c2 	.word	0x200089c2
 8003190:	2000ef6c 	.word	0x2000ef6c
 8003194:	2000d76c 	.word	0x2000d76c
 8003198:	2000df6c 	.word	0x2000df6c
 800319c:	2000e76c 	.word	0x2000e76c
 80031a0:	20008958 	.word	0x20008958
 80031a4:	2000b1d8 	.word	0x2000b1d8
 80031a8:	20008544 	.word	0x20008544
 80031ac:	200084f4 	.word	0x200084f4
				i_total=i+sample_pointB;
 80031b0:	4bbd      	ldr	r3, [pc, #756]	; (80034a8 <sampling+0x1518>)
 80031b2:	881a      	ldrh	r2, [r3, #0]
 80031b4:	4bbd      	ldr	r3, [pc, #756]	; (80034ac <sampling+0x151c>)
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	4413      	add	r3, r2
 80031ba:	f8a7 338e 	strh.w	r3, [r7, #910]	; 0x38e

			sampling_position=(i>>6);
 80031be:	4bba      	ldr	r3, [pc, #744]	; (80034a8 <sampling+0x1518>)
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	099b      	lsrs	r3, r3, #6
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	4bb9      	ldr	r3, [pc, #740]	; (80034b0 <sampling+0x1520>)
 80031ca:	701a      	strb	r2, [r3, #0]
			// filter 1
			if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 80031cc:	4bb6      	ldr	r3, [pc, #728]	; (80034a8 <sampling+0x1518>)
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80031da:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80031de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e2:	4ab1      	ldr	r2, [pc, #708]	; (80034a8 <sampling+0x1518>)
 80031e4:	8812      	ldrh	r2, [r2, #0]
 80031e6:	f002 021f 	and.w	r2, r2, #31
 80031ea:	2101      	movs	r1, #1
 80031ec:	fa01 f202 	lsl.w	r2, r1, r2
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d10f      	bne.n	8003214 <sampling+0x1284>
 80031f4:	4baf      	ldr	r3, [pc, #700]	; (80034b4 <sampling+0x1524>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	711a      	strb	r2, [r3, #4]
 80031fa:	4baf      	ldr	r3, [pc, #700]	; (80034b8 <sampling+0x1528>)
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	3301      	adds	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	4bad      	ldr	r3, [pc, #692]	; (80034b8 <sampling+0x1528>)
 8003204:	801a      	strh	r2, [r3, #0]
 8003206:	4bac      	ldr	r3, [pc, #688]	; (80034b8 <sampling+0x1528>)
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800320e:	b29a      	uxth	r2, r3
 8003210:	4ba9      	ldr	r3, [pc, #676]	; (80034b8 <sampling+0x1528>)
 8003212:	801a      	strh	r2, [r3, #0]

			phase_bank0[i&31]= sample_Accu[0]=play_holder0[i];
 8003214:	4ba4      	ldr	r3, [pc, #656]	; (80034a8 <sampling+0x1518>)
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	4ba8      	ldr	r3, [pc, #672]	; (80034bc <sampling+0x152c>)
 800321c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003220:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8003224:	4ba0      	ldr	r3, [pc, #640]	; (80034a8 <sampling+0x1518>)
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 8003230:	49a3      	ldr	r1, [pc, #652]	; (80034c0 <sampling+0x1530>)
 8003232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank1[i&31]=sample_Accu[1]=play_holder1[i] ; // saw
 8003236:	4b9c      	ldr	r3, [pc, #624]	; (80034a8 <sampling+0x1518>)
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	4ba1      	ldr	r3, [pc, #644]	; (80034c4 <sampling+0x1534>)
 800323e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003242:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8003246:	4b98      	ldr	r3, [pc, #608]	; (80034a8 <sampling+0x1518>)
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 8003252:	499d      	ldr	r1, [pc, #628]	; (80034c8 <sampling+0x1538>)
 8003254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank2[i&31]=sample_Accu[2]=play_holder2[i];  // sine input
 8003258:	4b93      	ldr	r3, [pc, #588]	; (80034a8 <sampling+0x1518>)
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	4b9b      	ldr	r3, [pc, #620]	; (80034cc <sampling+0x153c>)
 8003260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003264:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8003268:	4b8f      	ldr	r3, [pc, #572]	; (80034a8 <sampling+0x1518>)
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 8003274:	4996      	ldr	r1, [pc, #600]	; (80034d0 <sampling+0x1540>)
 8003276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank3[i&31]=sample_Accu[3]=play_holder3[i] ;
 800327a:	4b8b      	ldr	r3, [pc, #556]	; (80034a8 <sampling+0x1518>)
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	4b94      	ldr	r3, [pc, #592]	; (80034d4 <sampling+0x1544>)
 8003282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003286:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 800328a:	4b87      	ldr	r3, [pc, #540]	; (80034a8 <sampling+0x1518>)
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	f003 031f 	and.w	r3, r3, #31
 8003292:	f8d7 2328 	ldr.w	r2, [r7, #808]	; 0x328
 8003296:	4990      	ldr	r1, [pc, #576]	; (80034d8 <sampling+0x1548>)
 8003298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	if (filter[0].resonance)	sample_Accu[0]=(sample_Accu[0]>>1)+(phase_bank0[  ((i&31)+(31-(filter[0].resonance&31)))&31]>>1); // PHASER
 800329c:	4b8f      	ldr	r3, [pc, #572]	; (80034dc <sampling+0x154c>)
 800329e:	789b      	ldrb	r3, [r3, #2]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d012      	beq.n	80032ca <sampling+0x133a>
 80032a4:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 80032a8:	105a      	asrs	r2, r3, #1
 80032aa:	4b7f      	ldr	r3, [pc, #508]	; (80034a8 <sampling+0x1518>)
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	4619      	mov	r1, r3
 80032b0:	4b8a      	ldr	r3, [pc, #552]	; (80034dc <sampling+0x154c>)
 80032b2:	789b      	ldrb	r3, [r3, #2]
 80032b4:	1acb      	subs	r3, r1, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	4980      	ldr	r1, [pc, #512]	; (80034c0 <sampling+0x1530>)
 80032be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032c2:	105b      	asrs	r3, r3, #1
 80032c4:	4413      	add	r3, r2
 80032c6:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
	if (filter[1].resonance)	sample_Accu[1]=(sample_Accu[1]>>1)+(phase_bank1[  ((i&31)+(31-(filter[1].resonance&31)))&31]>>1);
 80032ca:	4b84      	ldr	r3, [pc, #528]	; (80034dc <sampling+0x154c>)
 80032cc:	7a9b      	ldrb	r3, [r3, #10]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d012      	beq.n	80032f8 <sampling+0x1368>
 80032d2:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 80032d6:	105a      	asrs	r2, r3, #1
 80032d8:	4b73      	ldr	r3, [pc, #460]	; (80034a8 <sampling+0x1518>)
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	4619      	mov	r1, r3
 80032de:	4b7f      	ldr	r3, [pc, #508]	; (80034dc <sampling+0x154c>)
 80032e0:	7a9b      	ldrb	r3, [r3, #10]
 80032e2:	1acb      	subs	r3, r1, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	4977      	ldr	r1, [pc, #476]	; (80034c8 <sampling+0x1538>)
 80032ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032f0:	105b      	asrs	r3, r3, #1
 80032f2:	4413      	add	r3, r2
 80032f4:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
	if (filter[2].resonance)	sample_Accu[2]=(sample_Accu[2]>>1)+(phase_bank2[  ((i&31)+(31-(filter[2].resonance&31)))&31]>>1);
 80032f8:	4b78      	ldr	r3, [pc, #480]	; (80034dc <sampling+0x154c>)
 80032fa:	7c9b      	ldrb	r3, [r3, #18]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d012      	beq.n	8003326 <sampling+0x1396>
 8003300:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8003304:	105a      	asrs	r2, r3, #1
 8003306:	4b68      	ldr	r3, [pc, #416]	; (80034a8 <sampling+0x1518>)
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	4619      	mov	r1, r3
 800330c:	4b73      	ldr	r3, [pc, #460]	; (80034dc <sampling+0x154c>)
 800330e:	7c9b      	ldrb	r3, [r3, #18]
 8003310:	1acb      	subs	r3, r1, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	496d      	ldr	r1, [pc, #436]	; (80034d0 <sampling+0x1540>)
 800331a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800331e:	105b      	asrs	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
	if (filter[3].resonance)	sample_Accu[3]=(sample_Accu[3]>>1)+(phase_bank3[  ((i&31)+(31-(filter[3].resonance&31)))&31]>>1);
 8003326:	4b6d      	ldr	r3, [pc, #436]	; (80034dc <sampling+0x154c>)
 8003328:	7e9b      	ldrb	r3, [r3, #26]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d012      	beq.n	8003354 <sampling+0x13c4>
 800332e:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8003332:	105a      	asrs	r2, r3, #1
 8003334:	4b5c      	ldr	r3, [pc, #368]	; (80034a8 <sampling+0x1518>)
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	4619      	mov	r1, r3
 800333a:	4b68      	ldr	r3, [pc, #416]	; (80034dc <sampling+0x154c>)
 800333c:	7e9b      	ldrb	r3, [r3, #26]
 800333e:	1acb      	subs	r3, r1, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	4964      	ldr	r1, [pc, #400]	; (80034d8 <sampling+0x1548>)
 8003348:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800334c:	105b      	asrs	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
	// this section is about 100 tmr cycles
			if ((i&63)==0){frq_point();
 8003354:	4b54      	ldr	r3, [pc, #336]	; (80034a8 <sampling+0x1518>)
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <sampling+0x13d4>
 8003360:	f000 fbea 	bl	8003b38 <frq_point>


   // vol lfo


		filter_accus[1]=sample_Accu[0]; // saw
 8003364:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8003368:	ee07 3a90 	vmov	s15, r3
 800336c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003370:	4b5b      	ldr	r3, [pc, #364]	; (80034e0 <sampling+0x1550>)
 8003372:	edc3 7a01 	vstr	s15, [r3, #4]
		filter_accus[1]=filter_accus[1]-(filter_accus[3]*filter_res[0]);
 8003376:	4b5a      	ldr	r3, [pc, #360]	; (80034e0 <sampling+0x1550>)
 8003378:	ed93 7a01 	vldr	s14, [r3, #4]
 800337c:	4b58      	ldr	r3, [pc, #352]	; (80034e0 <sampling+0x1550>)
 800337e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003382:	4b58      	ldr	r3, [pc, #352]	; (80034e4 <sampling+0x1554>)
 8003384:	edd3 7a00 	vldr	s15, [r3]
 8003388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800338c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003390:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <sampling+0x1550>)
 8003392:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);      //short=fast , adding makes it slower
 8003396:	4b52      	ldr	r3, [pc, #328]	; (80034e0 <sampling+0x1550>)
 8003398:	ed93 7a01 	vldr	s14, [r3, #4]
 800339c:	4b52      	ldr	r3, [pc, #328]	; (80034e8 <sampling+0x1558>)
 800339e:	edd3 7a00 	vldr	s15, [r3]
 80033a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033a6:	4b4e      	ldr	r3, [pc, #312]	; (80034e0 <sampling+0x1550>)
 80033a8:	edd3 6a02 	vldr	s13, [r3, #8]
 80033ac:	4b4e      	ldr	r3, [pc, #312]	; (80034e8 <sampling+0x1558>)
 80033ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80033b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ba:	4b49      	ldr	r3, [pc, #292]	; (80034e0 <sampling+0x1550>)
 80033bc:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);			// int32 after conversions is no quicker
 80033c0:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <sampling+0x1550>)
 80033c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80033c6:	4b48      	ldr	r3, [pc, #288]	; (80034e8 <sampling+0x1558>)
 80033c8:	edd3 7a00 	vldr	s15, [r3]
 80033cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033d0:	4b43      	ldr	r3, [pc, #268]	; (80034e0 <sampling+0x1550>)
 80033d2:	edd3 6a03 	vldr	s13, [r3, #12]
 80033d6:	4b44      	ldr	r3, [pc, #272]	; (80034e8 <sampling+0x1558>)
 80033d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80033dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e4:	4b3e      	ldr	r3, [pc, #248]	; (80034e0 <sampling+0x1550>)
 80033e6:	edc3 7a03 	vstr	s15, [r3, #12]
		sample_Accu[0]=filter_accus[3];
 80033ea:	4b3d      	ldr	r3, [pc, #244]	; (80034e0 <sampling+0x1550>)
 80033ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80033f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033f4:	ee17 3a90 	vmov	r3, s15
 80033f8:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c

	//	sample_Accu[3]=play_holder2[i] >>5;
		filter_accus[4]=sample_Accu[1];
 80033fc:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8003400:	ee07 3a90 	vmov	s15, r3
 8003404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003408:	4b35      	ldr	r3, [pc, #212]	; (80034e0 <sampling+0x1550>)
 800340a:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[4]=filter_accus[4]-(filter_accus[6]*filter_res[1]);
 800340e:	4b34      	ldr	r3, [pc, #208]	; (80034e0 <sampling+0x1550>)
 8003410:	ed93 7a04 	vldr	s14, [r3, #16]
 8003414:	4b32      	ldr	r3, [pc, #200]	; (80034e0 <sampling+0x1550>)
 8003416:	edd3 6a06 	vldr	s13, [r3, #24]
 800341a:	4b32      	ldr	r3, [pc, #200]	; (80034e4 <sampling+0x1554>)
 800341c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003420:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003428:	4b2d      	ldr	r3, [pc, #180]	; (80034e0 <sampling+0x1550>)
 800342a:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[2])+(filter_accus[5]*freq_point[3]);   // 30 cyles for 2 poles
 800342e:	4b2c      	ldr	r3, [pc, #176]	; (80034e0 <sampling+0x1550>)
 8003430:	ed93 7a04 	vldr	s14, [r3, #16]
 8003434:	4b2c      	ldr	r3, [pc, #176]	; (80034e8 <sampling+0x1558>)
 8003436:	edd3 7a02 	vldr	s15, [r3, #8]
 800343a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800343e:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <sampling+0x1550>)
 8003440:	edd3 6a05 	vldr	s13, [r3, #20]
 8003444:	4b28      	ldr	r3, [pc, #160]	; (80034e8 <sampling+0x1558>)
 8003446:	edd3 7a03 	vldr	s15, [r3, #12]
 800344a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800344e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003452:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <sampling+0x1550>)
 8003454:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_accus[6]=(filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]);
 8003458:	4b21      	ldr	r3, [pc, #132]	; (80034e0 <sampling+0x1550>)
 800345a:	ed93 7a05 	vldr	s14, [r3, #20]
 800345e:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <sampling+0x1558>)
 8003460:	edd3 7a02 	vldr	s15, [r3, #8]
 8003464:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003468:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <sampling+0x1550>)
 800346a:	edd3 6a06 	vldr	s13, [r3, #24]
 800346e:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <sampling+0x1558>)
 8003470:	edd3 7a03 	vldr	s15, [r3, #12]
 8003474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800347c:	4b18      	ldr	r3, [pc, #96]	; (80034e0 <sampling+0x1550>)
 800347e:	edc3 7a06 	vstr	s15, [r3, #24]
		sample_Accu[1]=filter_accus[6];
 8003482:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <sampling+0x1550>)
 8003484:	edd3 7a06 	vldr	s15, [r3, #24]
 8003488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800348c:	ee17 3a90 	vmov	r3, s15
 8003490:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320

		filter_accus[7]=sample_Accu[2];
 8003494:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8003498:	ee07 3a90 	vmov	s15, r3
 800349c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034a0:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <sampling+0x1550>)
 80034a2:	edc3 7a07 	vstr	s15, [r3, #28]
 80034a6:	e021      	b.n	80034ec <sampling+0x155c>
 80034a8:	200089c2 	.word	0x200089c2
 80034ac:	200089c0 	.word	0x200089c0
 80034b0:	2000d768 	.word	0x2000d768
 80034b4:	2000c370 	.word	0x2000c370
 80034b8:	2000b320 	.word	0x2000b320
 80034bc:	2000ef6c 	.word	0x2000ef6c
 80034c0:	200109ac 	.word	0x200109ac
 80034c4:	2000d76c 	.word	0x2000d76c
 80034c8:	20010a2c 	.word	0x20010a2c
 80034cc:	2000df6c 	.word	0x2000df6c
 80034d0:	20010aac 	.word	0x20010aac
 80034d4:	2000e76c 	.word	0x2000e76c
 80034d8:	20010b2c 	.word	0x20010b2c
 80034dc:	200001e4 	.word	0x200001e4
 80034e0:	2000b234 	.word	0x2000b234
 80034e4:	2000b220 	.word	0x2000b220
 80034e8:	2000b270 	.word	0x2000b270
		filter_accus[7]=filter_accus[7]-(filter_accus[9]*filter_res[2]);  // resonance
 80034ec:	4b8c      	ldr	r3, [pc, #560]	; (8003720 <sampling+0x1790>)
 80034ee:	ed93 7a07 	vldr	s14, [r3, #28]
 80034f2:	4b8b      	ldr	r3, [pc, #556]	; (8003720 <sampling+0x1790>)
 80034f4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80034f8:	4b8a      	ldr	r3, [pc, #552]	; (8003724 <sampling+0x1794>)
 80034fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80034fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003506:	4b86      	ldr	r3, [pc, #536]	; (8003720 <sampling+0x1790>)
 8003508:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[4])+(filter_accus[8]*freq_point[5]);   // 30 cyles for 2 poles
 800350c:	4b84      	ldr	r3, [pc, #528]	; (8003720 <sampling+0x1790>)
 800350e:	ed93 7a07 	vldr	s14, [r3, #28]
 8003512:	4b85      	ldr	r3, [pc, #532]	; (8003728 <sampling+0x1798>)
 8003514:	edd3 7a04 	vldr	s15, [r3, #16]
 8003518:	ee27 7a27 	vmul.f32	s14, s14, s15
 800351c:	4b80      	ldr	r3, [pc, #512]	; (8003720 <sampling+0x1790>)
 800351e:	edd3 6a08 	vldr	s13, [r3, #32]
 8003522:	4b81      	ldr	r3, [pc, #516]	; (8003728 <sampling+0x1798>)
 8003524:	edd3 7a05 	vldr	s15, [r3, #20]
 8003528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800352c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003530:	4b7b      	ldr	r3, [pc, #492]	; (8003720 <sampling+0x1790>)
 8003532:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]);
 8003536:	4b7a      	ldr	r3, [pc, #488]	; (8003720 <sampling+0x1790>)
 8003538:	ed93 7a08 	vldr	s14, [r3, #32]
 800353c:	4b7a      	ldr	r3, [pc, #488]	; (8003728 <sampling+0x1798>)
 800353e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003542:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003546:	4b76      	ldr	r3, [pc, #472]	; (8003720 <sampling+0x1790>)
 8003548:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800354c:	4b76      	ldr	r3, [pc, #472]	; (8003728 <sampling+0x1798>)
 800354e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800355a:	4b71      	ldr	r3, [pc, #452]	; (8003720 <sampling+0x1790>)
 800355c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				sample_Accu[2]=filter_accus[9];
 8003560:	4b6f      	ldr	r3, [pc, #444]	; (8003720 <sampling+0x1790>)
 8003562:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003566:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800356a:	ee17 3a90 	vmov	r3, s15
 800356e:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324

				filter_accus[10]=sample_Accu[3];
 8003572:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8003576:	ee07 3a90 	vmov	s15, r3
 800357a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800357e:	4b68      	ldr	r3, [pc, #416]	; (8003720 <sampling+0x1790>)
 8003580:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_accus[10]=filter_accus[10]-(filter_accus[12]*filter_res[3]);
 8003584:	4b66      	ldr	r3, [pc, #408]	; (8003720 <sampling+0x1790>)
 8003586:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800358a:	4b65      	ldr	r3, [pc, #404]	; (8003720 <sampling+0x1790>)
 800358c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8003590:	4b64      	ldr	r3, [pc, #400]	; (8003724 <sampling+0x1794>)
 8003592:	edd3 7a03 	vldr	s15, [r3, #12]
 8003596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800359a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800359e:	4b60      	ldr	r3, [pc, #384]	; (8003720 <sampling+0x1790>)
 80035a0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
						filter_accus[11]=(filter_accus[10]*freq_point[6])+(filter_accus[11]*freq_point[7]);   // 30 cyles for 2 poles
 80035a4:	4b5e      	ldr	r3, [pc, #376]	; (8003720 <sampling+0x1790>)
 80035a6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80035aa:	4b5f      	ldr	r3, [pc, #380]	; (8003728 <sampling+0x1798>)
 80035ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80035b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035b4:	4b5a      	ldr	r3, [pc, #360]	; (8003720 <sampling+0x1790>)
 80035b6:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80035ba:	4b5b      	ldr	r3, [pc, #364]	; (8003728 <sampling+0x1798>)
 80035bc:	edd3 7a07 	vldr	s15, [r3, #28]
 80035c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035c8:	4b55      	ldr	r3, [pc, #340]	; (8003720 <sampling+0x1790>)
 80035ca:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
						filter_accus[12]=(filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]);
 80035ce:	4b54      	ldr	r3, [pc, #336]	; (8003720 <sampling+0x1790>)
 80035d0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80035d4:	4b54      	ldr	r3, [pc, #336]	; (8003728 <sampling+0x1798>)
 80035d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80035da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035de:	4b50      	ldr	r3, [pc, #320]	; (8003720 <sampling+0x1790>)
 80035e0:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80035e4:	4b50      	ldr	r3, [pc, #320]	; (8003728 <sampling+0x1798>)
 80035e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80035ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f2:	4b4b      	ldr	r3, [pc, #300]	; (8003720 <sampling+0x1790>)
 80035f4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
						sample_Accu[3]=filter_accus[12];
 80035f8:	4b49      	ldr	r3, [pc, #292]	; (8003720 <sampling+0x1790>)
 80035fa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80035fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003602:	ee17 3a90 	vmov	r3, s15
 8003606:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
	//	filter_accus[11]=filter_accus[5]; //write back new value
		//sample_Accu[0] =sample_Accu[1];

				//sample_Accu[0]=(sample_Accu[0]>>2)+(play_holder0[(i+550)&511]>>2);   // just need 7 samples for aphaser at 500 hz

		filter_Accu=filter_Accu2=0;
 800360a:	2300      	movs	r3, #0
 800360c:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8003610:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8003614:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
		filter_Accu=(sample_Accu[0]+sample_Accu[1])>>16;
 8003618:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 800361c:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8003620:	4413      	add	r3, r2
 8003622:	141b      	asrs	r3, r3, #16
 8003624:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac



		filter_Accu2=(sample_Accu[2]+sample_Accu[3])>>16; //filter + drum out
 8003628:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 800362c:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8003630:	4413      	add	r3, r2
 8003632:	141b      	asrs	r3, r3, #16
 8003634:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
		//filter_Accu=play_holder0[i];


		 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8003638:	4b3c      	ldr	r3, [pc, #240]	; (800372c <sampling+0x179c>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2bc7      	cmp	r3, #199	; 0xc7
 800363e:	d005      	beq.n	800364c <sampling+0x16bc>
 8003640:	4b3a      	ldr	r3, [pc, #232]	; (800372c <sampling+0x179c>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	3301      	adds	r3, #1
 8003646:	b2da      	uxtb	r2, r3
 8003648:	4b38      	ldr	r3, [pc, #224]	; (800372c <sampling+0x179c>)
 800364a:	701a      	strb	r2, [r3, #0]

		 //if (filter_Accu>0xFFFF) {filter_Accu=0xFFFF;clipping++;} else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
		 if (filter_Accu>0x3FF) {filter_Accu=0x3FF;clipping++;} else if (filter_Accu<-1023) filter_Accu=-1023;  // limiter to 11 bits
 800364c:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8003650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003654:	db0a      	blt.n	800366c <sampling+0x16dc>
 8003656:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800365a:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 800365e:	4b34      	ldr	r3, [pc, #208]	; (8003730 <sampling+0x17a0>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	3301      	adds	r3, #1
 8003664:	b2da      	uxtb	r2, r3
 8003666:	4b32      	ldr	r3, [pc, #200]	; (8003730 <sampling+0x17a0>)
 8003668:	701a      	strb	r2, [r3, #0]
 800366a:	e007      	b.n	800367c <sampling+0x16ec>
 800366c:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8003670:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8003674:	dc02      	bgt.n	800367c <sampling+0x16ec>
 8003676:	4b2f      	ldr	r3, [pc, #188]	; (8003734 <sampling+0x17a4>)
 8003678:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
		 if (filter_Accu2>0x3FF) {filter_Accu2=0x3FF;clipping++;} else if (filter_Accu2<-1023) filter_Accu2=-1023;  // limiter to 11 bits
 800367c:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8003680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003684:	db0a      	blt.n	800369c <sampling+0x170c>
 8003686:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800368a:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 800368e:	4b28      	ldr	r3, [pc, #160]	; (8003730 <sampling+0x17a0>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	3301      	adds	r3, #1
 8003694:	b2da      	uxtb	r2, r3
 8003696:	4b26      	ldr	r3, [pc, #152]	; (8003730 <sampling+0x17a0>)
 8003698:	701a      	strb	r2, [r3, #0]
 800369a:	e007      	b.n	80036ac <sampling+0x171c>
 800369c:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80036a0:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 80036a4:	dc02      	bgt.n	80036ac <sampling+0x171c>
 80036a6:	4b23      	ldr	r3, [pc, #140]	; (8003734 <sampling+0x17a4>)
 80036a8:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8



		 play_sample[(i_total<<1)]=(filter_Accu)+1023;   // final output disable for now 2544
 80036ac:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	f8b7 338e 	ldrh.w	r3, [r7, #910]	; 0x38e
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80036bc:	b291      	uxth	r1, r2
 80036be:	4a1e      	ldr	r2, [pc, #120]	; (8003738 <sampling+0x17a8>)
 80036c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		 play_sample[(i_total<<1)+1]=(filter_Accu2)+1023;
 80036c4:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	f8b7 338e 	ldrh.w	r3, [r7, #910]	; 0x38e
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	3301      	adds	r3, #1
 80036d2:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80036d6:	b291      	uxth	r1, r2
 80036d8:	4a17      	ldr	r2, [pc, #92]	; (8003738 <sampling+0x17a8>)
 80036da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 80036de:	4b17      	ldr	r3, [pc, #92]	; (800373c <sampling+0x17ac>)
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	3301      	adds	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <sampling+0x17ac>)
 80036e8:	801a      	strh	r2, [r3, #0]
 80036ea:	4b14      	ldr	r3, [pc, #80]	; (800373c <sampling+0x17ac>)
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f2:	f4ff ad5d 	bcc.w	80031b0 <sampling+0x1220>
		} // end of filer


		//time_final=time_proc;   // in samples

		if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 80036f6:	4b12      	ldr	r3, [pc, #72]	; (8003740 <sampling+0x17b0>)
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d006      	beq.n	800370c <sampling+0x177c>
 80036fe:	4b11      	ldr	r3, [pc, #68]	; (8003744 <sampling+0x17b4>)
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	b29b      	uxth	r3, r3
 8003704:	3301      	adds	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <sampling+0x17b4>)
 800370a:	801a      	strh	r2, [r3, #0]
		time_final[0]=time_proc;
 800370c:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <sampling+0x17b8>)
 800370e:	881a      	ldrh	r2, [r3, #0]
 8003710:	4b0e      	ldr	r3, [pc, #56]	; (800374c <sampling+0x17bc>)
 8003712:	801a      	strh	r2, [r3, #0]


		//bank_write=0;   /// total 320 sample time (39khz)
		}
 8003714:	bf00      	nop
 8003716:	f507 776e 	add.w	r7, r7, #952	; 0x3b8
 800371a:	46bd      	mov	sp, r7
 800371c:	bdb0      	pop	{r4, r5, r7, pc}
 800371e:	bf00      	nop
 8003720:	2000b234 	.word	0x2000b234
 8003724:	2000b220 	.word	0x2000b220
 8003728:	2000b270 	.word	0x2000b270
 800372c:	2000b1f0 	.word	0x2000b1f0
 8003730:	2000f76c 	.word	0x2000f76c
 8003734:	fffffc01 	.word	0xfffffc01
 8003738:	200089c4 	.word	0x200089c4
 800373c:	200089c2 	.word	0x200089c2
 8003740:	2000014e 	.word	0x2000014e
 8003744:	2000bfc2 	.word	0x2000bfc2
 8003748:	2000bfc0 	.word	0x2000bfc0
 800374c:	2000bfbc 	.word	0x2000bfbc

08003750 <LFO_square_one_pulse>:
    *(return_array + 2) = sine_tuned;
    return (sine_tempA);   // add back to start value -20k-20k  or about 16bit

    }

void LFO_square_one_pulse(void){   // sends one pulse synced to seq.pos , rate= pulse width in notes , delay = start position
 8003750:	b490      	push	{r4, r7}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
       // uint16_t  temp_pulse=0;
	uint8_t seqpos = seq.pos ;
 8003756:	4b50      	ldr	r3, [pc, #320]	; (8003898 <LFO_square_one_pulse+0x148>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	70fb      	strb	r3, [r7, #3]
     //   uint16_t counter_up; // starts at 0+delay
	//uint8_t pulse_high;
	uint8_t pulse_low;
	uint8_t seq_div=7;
 800375c:	2307      	movs	r3, #7
 800375e:	71bb      	strb	r3, [r7, #6]
	uint8_t lfo_c ;
	uint16_t pulse_length;     // 1 note -32 ? with fractions  0-8 then 0-16 then 0-32 then 0-64 ,repeat
	uint8_t delay;

	for (lfo_c=0;lfo_c<10;lfo_c++){
 8003760:	2300      	movs	r3, #0
 8003762:	717b      	strb	r3, [r7, #5]
 8003764:	e08e      	b.n	8003884 <LFO_square_one_pulse+0x134>

	    pulse_length=LFO_square[lfo_c].rate;
 8003766:	797a      	ldrb	r2, [r7, #5]
 8003768:	494c      	ldr	r1, [pc, #304]	; (800389c <LFO_square_one_pulse+0x14c>)
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	803b      	strh	r3, [r7, #0]
	    if (LFO_square[lfo_c].delay<8) delay=LFO_square[lfo_c].delay;  else delay=7;
 8003778:	797a      	ldrb	r2, [r7, #5]
 800377a:	4948      	ldr	r1, [pc, #288]	; (800389c <LFO_square_one_pulse+0x14c>)
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	3303      	adds	r3, #3
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b07      	cmp	r3, #7
 800378c:	d80a      	bhi.n	80037a4 <LFO_square_one_pulse+0x54>
 800378e:	797a      	ldrb	r2, [r7, #5]
 8003790:	4942      	ldr	r1, [pc, #264]	; (800389c <LFO_square_one_pulse+0x14c>)
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	3303      	adds	r3, #3
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	713b      	strb	r3, [r7, #4]
 80037a2:	e001      	b.n	80037a8 <LFO_square_one_pulse+0x58>
 80037a4:	2307      	movs	r3, #7
 80037a6:	713b      	strb	r3, [r7, #4]

	    if (pulse_length<120)  {pulse_low=pulse_length-56;seq_div=63;}  // This is the end
 80037a8:	883b      	ldrh	r3, [r7, #0]
 80037aa:	2b77      	cmp	r3, #119	; 0x77
 80037ac:	d805      	bhi.n	80037ba <LFO_square_one_pulse+0x6a>
 80037ae:	883b      	ldrh	r3, [r7, #0]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	3b38      	subs	r3, #56	; 0x38
 80037b4:	71fb      	strb	r3, [r7, #7]
 80037b6:	233f      	movs	r3, #63	; 0x3f
 80037b8:	71bb      	strb	r3, [r7, #6]
	    if (pulse_length<56)  {pulse_low=pulse_length-24;seq_div=31;}
 80037ba:	883b      	ldrh	r3, [r7, #0]
 80037bc:	2b37      	cmp	r3, #55	; 0x37
 80037be:	d805      	bhi.n	80037cc <LFO_square_one_pulse+0x7c>
 80037c0:	883b      	ldrh	r3, [r7, #0]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	3b18      	subs	r3, #24
 80037c6:	71fb      	strb	r3, [r7, #7]
 80037c8:	231f      	movs	r3, #31
 80037ca:	71bb      	strb	r3, [r7, #6]
	    if (pulse_length<24)  {pulse_low=pulse_length-8; seq_div=15;}
 80037cc:	883b      	ldrh	r3, [r7, #0]
 80037ce:	2b17      	cmp	r3, #23
 80037d0:	d805      	bhi.n	80037de <LFO_square_one_pulse+0x8e>
 80037d2:	883b      	ldrh	r3, [r7, #0]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	3b08      	subs	r3, #8
 80037d8:	71fb      	strb	r3, [r7, #7]
 80037da:	230f      	movs	r3, #15
 80037dc:	71bb      	strb	r3, [r7, #6]
	    if (pulse_length<8)  {pulse_low=pulse_length; seq_div=7;}
 80037de:	883b      	ldrh	r3, [r7, #0]
 80037e0:	2b07      	cmp	r3, #7
 80037e2:	d803      	bhi.n	80037ec <LFO_square_one_pulse+0x9c>
 80037e4:	883b      	ldrh	r3, [r7, #0]
 80037e6:	71fb      	strb	r3, [r7, #7]
 80037e8:	2307      	movs	r3, #7
 80037ea:	71bb      	strb	r3, [r7, #6]

	    delay=(delay*seq_div)>>3;   // this is the start
 80037ec:	793b      	ldrb	r3, [r7, #4]
 80037ee:	79ba      	ldrb	r2, [r7, #6]
 80037f0:	fb02 f303 	mul.w	r3, r2, r3
 80037f4:	10db      	asrs	r3, r3, #3
 80037f6:	713b      	strb	r3, [r7, #4]

	    if (((seqpos&seq_div)<=pulse_low)  &&	((seqpos&seq_div)>=delay))	LFO_square[lfo_c].out[sampling_position]=((LFO_square[lfo_c].depth))<<8;  // high
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	79bb      	ldrb	r3, [r7, #6]
 80037fc:	4013      	ands	r3, r2
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	79fa      	ldrb	r2, [r7, #7]
 8003802:	429a      	cmp	r2, r3
 8003804:	d321      	bcc.n	800384a <LFO_square_one_pulse+0xfa>
 8003806:	78fa      	ldrb	r2, [r7, #3]
 8003808:	79bb      	ldrb	r3, [r7, #6]
 800380a:	4013      	ands	r3, r2
 800380c:	b2db      	uxtb	r3, r3
 800380e:	793a      	ldrb	r2, [r7, #4]
 8003810:	429a      	cmp	r2, r3
 8003812:	d81a      	bhi.n	800384a <LFO_square_one_pulse+0xfa>
 8003814:	797a      	ldrb	r2, [r7, #5]
 8003816:	4921      	ldr	r1, [pc, #132]	; (800389c <LFO_square_one_pulse+0x14c>)
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	3301      	adds	r3, #1
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	b29b      	uxth	r3, r3
 8003828:	797a      	ldrb	r2, [r7, #5]
 800382a:	491d      	ldr	r1, [pc, #116]	; (80038a0 <LFO_square_one_pulse+0x150>)
 800382c:	7809      	ldrb	r1, [r1, #0]
 800382e:	460c      	mov	r4, r1
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	b298      	uxth	r0, r3
 8003834:	4919      	ldr	r1, [pc, #100]	; (800389c <LFO_square_one_pulse+0x14c>)
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	4423      	add	r3, r4
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	440b      	add	r3, r1
 8003844:	4602      	mov	r2, r0
 8003846:	809a      	strh	r2, [r3, #4]
 8003848:	e019      	b.n	800387e <LFO_square_one_pulse+0x12e>
	    else LFO_square[lfo_c].out[sampling_position]=(LFO_square[lfo_c].offset)<<8;		//low
 800384a:	797a      	ldrb	r2, [r7, #5]
 800384c:	4913      	ldr	r1, [pc, #76]	; (800389c <LFO_square_one_pulse+0x14c>)
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	3302      	adds	r3, #2
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	b29b      	uxth	r3, r3
 800385e:	797a      	ldrb	r2, [r7, #5]
 8003860:	490f      	ldr	r1, [pc, #60]	; (80038a0 <LFO_square_one_pulse+0x150>)
 8003862:	7809      	ldrb	r1, [r1, #0]
 8003864:	460c      	mov	r4, r1
 8003866:	021b      	lsls	r3, r3, #8
 8003868:	b298      	uxth	r0, r3
 800386a:	490c      	ldr	r1, [pc, #48]	; (800389c <LFO_square_one_pulse+0x14c>)
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	4423      	add	r3, r4
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	440b      	add	r3, r1
 800387a:	4602      	mov	r2, r0
 800387c:	809a      	strh	r2, [r3, #4]
	for (lfo_c=0;lfo_c<10;lfo_c++){
 800387e:	797b      	ldrb	r3, [r7, #5]
 8003880:	3301      	adds	r3, #1
 8003882:	717b      	strb	r3, [r7, #5]
 8003884:	797b      	ldrb	r3, [r7, #5]
 8003886:	2b09      	cmp	r3, #9
 8003888:	f67f af6d 	bls.w	8003766 <LFO_square_one_pulse+0x16>

	}
    }
 800388c:	bf00      	nop
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bc90      	pop	{r4, r7}
 8003896:	4770      	bx	lr
 8003898:	2000cdfc 	.word	0x2000cdfc
 800389c:	2000c2a8 	.word	0x2000c2a8
 80038a0:	2000d768 	.word	0x2000d768
 80038a4:	00000000 	.word	0x00000000

080038a8 <LFO_source_synced>:



	}

void LFO_source_synced(void){     // lfo , ok
 80038a8:	b590      	push	{r4, r7, lr}
 80038aa:	b08d      	sub	sp, #52	; 0x34
 80038ac:	af00      	add	r7, sp, #0


	float	freq_temp=0;
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
	float 	freq2_temp=0;
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t 	freq_saw=0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t lfo_c ;
	float offset=0;
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	613b      	str	r3, [r7, #16]
	uint32_t lfo_accu_temp;
	int16_t  output_hold;
	int32_t freq_tri;
	uint32_t offset2;
	uint32_t freq_temp_saw;
	uint32_t delay_value=0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]
	uint16_t rate;

	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 80038c8:	2300      	movs	r3, #0
 80038ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80038ce:	e117      	b.n	8003b00 <LFO_source_synced+0x258>

	rate= LFO[lfo_c].rate;
 80038d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80038d4:	4992      	ldr	r1, [pc, #584]	; (8003b20 <LFO_source_synced+0x278>)
 80038d6:	4613      	mov	r3, r2
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	837b      	strh	r3, [r7, #26]
	if (rate>10) rate=10;
 80038e4:	8b7b      	ldrh	r3, [r7, #26]
 80038e6:	2b0a      	cmp	r3, #10
 80038e8:	d901      	bls.n	80038ee <LFO_source_synced+0x46>
 80038ea:	230a      	movs	r3, #10
 80038ec:	837b      	strh	r3, [r7, #26]

	lfo_accu_temp=(next_isr&((1<<rate)-1))*(65535>>rate);   // calculate from next_isr
 80038ee:	4b8d      	ldr	r3, [pc, #564]	; (8003b24 <LFO_source_synced+0x27c>)
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	4619      	mov	r1, r3
 80038f4:	8b7b      	ldrh	r3, [r7, #26]
 80038f6:	2201      	movs	r2, #1
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	400b      	ands	r3, r1
 8003900:	8b7a      	ldrh	r2, [r7, #26]
 8003902:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003906:	fa41 f202 	asr.w	r2, r1, r2
 800390a:	fb02 f303 	mul.w	r3, r2, r3
 800390e:	60bb      	str	r3, [r7, #8]

	// if (lfo_c==0)     debug_value=lfo_accu_temp;

	 delay_value=8192*(LFO[lfo_c].delay&7);  //not ok
 8003910:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003914:	4982      	ldr	r1, [pc, #520]	; (8003b20 <LFO_source_synced+0x278>)
 8003916:	4613      	mov	r3, r2
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	3304      	adds	r3, #4
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	035b      	lsls	r3, r3, #13
 800392a:	60fb      	str	r3, [r7, #12]

	 freq_temp=lfo_accu_temp*0.0000479376;
 800392c:	68b8      	ldr	r0, [r7, #8]
 800392e:	f7fc fec7 	bl	80006c0 <__aeabi_ui2d>
 8003932:	a379      	add	r3, pc, #484	; (adr r3, 8003b18 <LFO_source_synced+0x270>)
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	f7fc fc56 	bl	80001e8 <__aeabi_dmul>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4610      	mov	r0, r2
 8003942:	4619      	mov	r1, r3
 8003944:	f7fc ff56 	bl	80007f4 <__aeabi_d2f>
 8003948:	4603      	mov	r3, r0
 800394a:	617b      	str	r3, [r7, #20]

	 freq2_temp=arm_sin_f32(freq_temp);   // +10 cycles
 800394c:	ed97 0a05 	vldr	s0, [r7, #20]
 8003950:	f008 ff16 	bl	800c780 <arm_sin_f32>
 8003954:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	freq_temp=LFO[lfo_c].depth;
 8003958:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800395c:	4970      	ldr	r1, [pc, #448]	; (8003b20 <LFO_source_synced+0x278>)
 800395e:	4613      	mov	r3, r2
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	4413      	add	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	3301      	adds	r3, #1
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	ee07 3a90 	vmov	s15, r3
 8003970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003974:	edc7 7a05 	vstr	s15, [r7, #20]
	 freq_temp= (freq2_temp*freq_temp)*256;
 8003978:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800397c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003984:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003b28 <LFO_source_synced+0x280>
 8003988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800398c:	edc7 7a05 	vstr	s15, [r7, #20]

	 freq_temp_saw=(lfo_accu_temp+delay_value)&65535        ;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4413      	add	r3, r2
 8003996:	b29b      	uxth	r3, r3
 8003998:	61fb      	str	r3, [r7, #28]

 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
 800399a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800399e:	4960      	ldr	r1, [pc, #384]	; (8003b20 <LFO_source_synced+0x278>)
 80039a0:	4613      	mov	r3, r2
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	3303      	adds	r3, #3
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	021b      	lsls	r3, r3, #8
 80039b0:	ee07 3a90 	vmov	s15, r3
 80039b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039b8:	edc7 7a04 	vstr	s15, [r7, #16]
			offset2=offset;
 80039bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80039c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039c4:	ee17 3a90 	vmov	r3, s15
 80039c8:	607b      	str	r3, [r7, #4]
 		freq2_temp=(freq_temp+offset);
 80039ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80039ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80039d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039d6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		if (freq2_temp>65534)  freq2_temp=65535;
 80039da:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80039de:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003b2c <LFO_source_synced+0x284>
 80039e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ea:	dd01      	ble.n	80039f0 <LFO_source_synced+0x148>
 80039ec:	4b50      	ldr	r3, [pc, #320]	; (8003b30 <LFO_source_synced+0x288>)
 80039ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	//	if (freq2_temp<-32766) {  freq2_temp=-32767; }  // clip to 13bit -/+ 8000

						output_hold=freq2_temp;
 80039f0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80039f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039f8:	ee17 3a90 	vmov	r3, s15
 80039fc:	807b      	strh	r3, [r7, #2]
				if (freq_temp_saw>65534)  freq_temp_saw=65535;
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d902      	bls.n	8003a0e <LFO_source_synced+0x166>
 8003a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a0c:	61fb      	str	r3, [r7, #28]
					//	lfo_accu_temp=lfo_accu_temp/6;
					freq_saw=((freq_temp_saw*LFO[lfo_c].depth)>>8)+offset2;   // 51 000  + offset
 8003a0e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a12:	4943      	ldr	r1, [pc, #268]	; (8003b20 <LFO_source_synced+0x278>)
 8003a14:	4613      	mov	r3, r2
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	3301      	adds	r3, #1
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	fb02 f303 	mul.w	r3, r2, r3
 8003a2a:	0a1b      	lsrs	r3, r3, #8
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	4413      	add	r3, r2
 8003a30:	62bb      	str	r3, [r7, #40]	; 0x28

					if (freq_saw>65534)  freq_saw=65535;   // clip
 8003a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d902      	bls.n	8003a42 <LFO_source_synced+0x19a>
 8003a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a40:	62bb      	str	r3, [r7, #40]	; 0x28
				//	freq_saw=65535-freq_saw;
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 8003a42:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a46:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <LFO_source_synced+0x28c>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	461c      	mov	r4, r3
 8003a4c:	8878      	ldrh	r0, [r7, #2]
 8003a4e:	4934      	ldr	r1, [pc, #208]	; (8003b20 <LFO_source_synced+0x278>)
 8003a50:	4613      	mov	r3, r2
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	4413      	add	r3, r2
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	4423      	add	r3, r4
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	440b      	add	r3, r1
 8003a5e:	4602      	mov	r2, r0
 8003a60:	80da      	strh	r2, [r3, #6]
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;    // saw 16 bit
 8003a62:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a66:	4b33      	ldr	r3, [pc, #204]	; (8003b34 <LFO_source_synced+0x28c>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	461c      	mov	r4, r3
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	b298      	uxth	r0, r3
 8003a70:	492b      	ldr	r1, [pc, #172]	; (8003b20 <LFO_source_synced+0x278>)
 8003a72:	4613      	mov	r3, r2
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	4413      	add	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4423      	add	r3, r4
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	440b      	add	r3, r1
 8003a82:	4602      	mov	r2, r0
 8003a84:	805a      	strh	r2, [r3, #2]


				   if(freq_temp_saw<32768)   freq_tri=freq_temp_saw; else freq_tri=65536-freq_temp_saw;    // 0-32767
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a8c:	d202      	bcs.n	8003a94 <LFO_source_synced+0x1ec>
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	623b      	str	r3, [r7, #32]
 8003a92:	e003      	b.n	8003a9c <LFO_source_synced+0x1f4>
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8003a9a:	623b      	str	r3, [r7, #32]
				   freq_tri=((freq_tri*LFO[lfo_c].depth)>>7)+offset2 ; // tri 16 bit
 8003a9c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003aa0:	491f      	ldr	r1, [pc, #124]	; (8003b20 <LFO_source_synced+0x278>)
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	3301      	adds	r3, #1
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	fb02 f303 	mul.w	r3, r2, r3
 8003ab8:	11db      	asrs	r3, r3, #7
 8003aba:	461a      	mov	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4413      	add	r3, r2
 8003ac0:	623b      	str	r3, [r7, #32]
				//   freq_tri=((freq_tri*255)>>7)+offset2 ; // tri 16 bit
				   if (freq_tri>65534)  freq_tri=65535;   // clip
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	dd02      	ble.n	8003ad2 <LFO_source_synced+0x22a>
 8003acc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ad0:	623b      	str	r3, [r7, #32]
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 8003ad2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003ad6:	4b17      	ldr	r3, [pc, #92]	; (8003b34 <LFO_source_synced+0x28c>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	461c      	mov	r4, r3
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	b298      	uxth	r0, r3
 8003ae0:	490f      	ldr	r1, [pc, #60]	; (8003b20 <LFO_source_synced+0x278>)
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	4413      	add	r3, r2
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	4423      	add	r3, r4
 8003aec:	3314      	adds	r3, #20
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	440b      	add	r3, r1
 8003af2:	4602      	mov	r2, r0
 8003af4:	80da      	strh	r2, [r3, #6]
	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003af6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003afa:	3301      	adds	r3, #1
 8003afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b04:	2b09      	cmp	r3, #9
 8003b06:	f67f aee3 	bls.w	80038d0 <LFO_source_synced+0x28>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch



	}
 8003b0a:	bf00      	nop
 8003b0c:	bf00      	nop
 8003b0e:	3734      	adds	r7, #52	; 0x34
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd90      	pop	{r4, r7, pc}
 8003b14:	f3af 8000 	nop.w
 8003b18:	64dc8498 	.word	0x64dc8498
 8003b1c:	3f092213 	.word	0x3f092213
 8003b20:	2000bfc4 	.word	0x2000bfc4
 8003b24:	2000b1d4 	.word	0x2000b1d4
 8003b28:	43800000 	.word	0x43800000
 8003b2c:	477ffe00 	.word	0x477ffe00
 8003b30:	477fff00 	.word	0x477fff00
 8003b34:	2000d768 	.word	0x2000d768

08003b38 <frq_point>:


void  frq_point(void){
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
	freq_point[0]=freq_pointer[0] [sampling_position];; // load up coeffs
 8003b3c:	4b84      	ldr	r3, [pc, #528]	; (8003d50 <frq_point+0x218>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	4a84      	ldr	r2, [pc, #528]	; (8003d54 <frq_point+0x21c>)
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a83      	ldr	r2, [pc, #524]	; (8003d58 <frq_point+0x220>)
 8003b4a:	6013      	str	r3, [r2, #0]

			freq_point[2]=freq_pointer[1] [sampling_position];  // ok , array was too short
 8003b4c:	4b80      	ldr	r3, [pc, #512]	; (8003d50 <frq_point+0x218>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	4a80      	ldr	r2, [pc, #512]	; (8003d54 <frq_point+0x21c>)
 8003b52:	3309      	adds	r3, #9
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a7f      	ldr	r2, [pc, #508]	; (8003d58 <frq_point+0x220>)
 8003b5c:	6093      	str	r3, [r2, #8]
			freq_point[4]=freq_pointer[2] [sampling_position];  // ok , array was too short
 8003b5e:	4b7c      	ldr	r3, [pc, #496]	; (8003d50 <frq_point+0x218>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	4a7c      	ldr	r2, [pc, #496]	; (8003d54 <frq_point+0x21c>)
 8003b64:	3312      	adds	r3, #18
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a7a      	ldr	r2, [pc, #488]	; (8003d58 <frq_point+0x220>)
 8003b6e:	6113      	str	r3, [r2, #16]
			freq_point[6]=freq_pointer[3] [sampling_position];  // ok , array was too short
 8003b70:	4b77      	ldr	r3, [pc, #476]	; (8003d50 <frq_point+0x218>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	4a77      	ldr	r2, [pc, #476]	; (8003d54 <frq_point+0x21c>)
 8003b76:	331b      	adds	r3, #27
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a76      	ldr	r2, [pc, #472]	; (8003d58 <frq_point+0x220>)
 8003b80:	6193      	str	r3, [r2, #24]

			if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 8003b82:	4b75      	ldr	r3, [pc, #468]	; (8003d58 <frq_point+0x220>)
 8003b84:	edd3 7a00 	vldr	s15, [r3]
 8003b88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b94:	dd04      	ble.n	8003ba0 <frq_point+0x68>
 8003b96:	4b70      	ldr	r3, [pc, #448]	; (8003d58 <frq_point+0x220>)
 8003b98:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	e00b      	b.n	8003bb8 <frq_point+0x80>
 8003ba0:	4b6d      	ldr	r3, [pc, #436]	; (8003d58 <frq_point+0x220>)
 8003ba2:	edd3 7a00 	vldr	s15, [r3]
 8003ba6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bae:	d503      	bpl.n	8003bb8 <frq_point+0x80>
 8003bb0:	4b69      	ldr	r3, [pc, #420]	; (8003d58 <frq_point+0x220>)
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
			if (freq_point[4]>1) freq_point[4]=1; else if (freq_point[4]<0) freq_point[4]=0;// just in case
 8003bb8:	4b67      	ldr	r3, [pc, #412]	; (8003d58 <frq_point+0x220>)
 8003bba:	edd3 7a04 	vldr	s15, [r3, #16]
 8003bbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bca:	dd04      	ble.n	8003bd6 <frq_point+0x9e>
 8003bcc:	4b62      	ldr	r3, [pc, #392]	; (8003d58 <frq_point+0x220>)
 8003bce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003bd2:	611a      	str	r2, [r3, #16]
 8003bd4:	e00b      	b.n	8003bee <frq_point+0xb6>
 8003bd6:	4b60      	ldr	r3, [pc, #384]	; (8003d58 <frq_point+0x220>)
 8003bd8:	edd3 7a04 	vldr	s15, [r3, #16]
 8003bdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be4:	d503      	bpl.n	8003bee <frq_point+0xb6>
 8003be6:	4b5c      	ldr	r3, [pc, #368]	; (8003d58 <frq_point+0x220>)
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	611a      	str	r2, [r3, #16]
			if (freq_point[2]>1) freq_point[2]=1; else if (freq_point[2]<0) freq_point[2]=0;// just in case
 8003bee:	4b5a      	ldr	r3, [pc, #360]	; (8003d58 <frq_point+0x220>)
 8003bf0:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c00:	dd04      	ble.n	8003c0c <frq_point+0xd4>
 8003c02:	4b55      	ldr	r3, [pc, #340]	; (8003d58 <frq_point+0x220>)
 8003c04:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003c08:	609a      	str	r2, [r3, #8]
 8003c0a:	e00b      	b.n	8003c24 <frq_point+0xec>
 8003c0c:	4b52      	ldr	r3, [pc, #328]	; (8003d58 <frq_point+0x220>)
 8003c0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c1a:	d503      	bpl.n	8003c24 <frq_point+0xec>
 8003c1c:	4b4e      	ldr	r3, [pc, #312]	; (8003d58 <frq_point+0x220>)
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	609a      	str	r2, [r3, #8]
			if (freq_point[6]>1) freq_point[6]=1; else if (freq_point[6]<0) freq_point[6]=0;// just in case
 8003c24:	4b4c      	ldr	r3, [pc, #304]	; (8003d58 <frq_point+0x220>)
 8003c26:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c36:	dd04      	ble.n	8003c42 <frq_point+0x10a>
 8003c38:	4b47      	ldr	r3, [pc, #284]	; (8003d58 <frq_point+0x220>)
 8003c3a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003c3e:	619a      	str	r2, [r3, #24]
 8003c40:	e00b      	b.n	8003c5a <frq_point+0x122>
 8003c42:	4b45      	ldr	r3, [pc, #276]	; (8003d58 <frq_point+0x220>)
 8003c44:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c50:	d503      	bpl.n	8003c5a <frq_point+0x122>
 8003c52:	4b41      	ldr	r3, [pc, #260]	; (8003d58 <frq_point+0x220>)
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	619a      	str	r2, [r3, #24]

			freq_point[1]=1-freq_point[0];
 8003c5a:	4b3f      	ldr	r3, [pc, #252]	; (8003d58 <frq_point+0x220>)
 8003c5c:	edd3 7a00 	vldr	s15, [r3]
 8003c60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c68:	4b3b      	ldr	r3, [pc, #236]	; (8003d58 <frq_point+0x220>)
 8003c6a:	edc3 7a01 	vstr	s15, [r3, #4]
			freq_point[3]=1-freq_point[2];
 8003c6e:	4b3a      	ldr	r3, [pc, #232]	; (8003d58 <frq_point+0x220>)
 8003c70:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c7c:	4b36      	ldr	r3, [pc, #216]	; (8003d58 <frq_point+0x220>)
 8003c7e:	edc3 7a03 	vstr	s15, [r3, #12]
			freq_point[5]=1-freq_point[4];
 8003c82:	4b35      	ldr	r3, [pc, #212]	; (8003d58 <frq_point+0x220>)
 8003c84:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c90:	4b31      	ldr	r3, [pc, #196]	; (8003d58 <frq_point+0x220>)
 8003c92:	edc3 7a05 	vstr	s15, [r3, #20]
			freq_point[7]=1-freq_point[6];
 8003c96:	4b30      	ldr	r3, [pc, #192]	; (8003d58 <frq_point+0x220>)
 8003c98:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ca4:	4b2c      	ldr	r3, [pc, #176]	; (8003d58 <frq_point+0x220>)
 8003ca6:	edc3 7a07 	vstr	s15, [r3, #28]

			filter_res[0]=freq_point[0]*0.2;
 8003caa:	4b2b      	ldr	r3, [pc, #172]	; (8003d58 <frq_point+0x220>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fc fd28 	bl	8000704 <__aeabi_f2d>
 8003cb4:	a324      	add	r3, pc, #144	; (adr r3, 8003d48 <frq_point+0x210>)
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	f7fc fa95 	bl	80001e8 <__aeabi_dmul>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	f7fc fd95 	bl	80007f4 <__aeabi_d2f>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	4a23      	ldr	r2, [pc, #140]	; (8003d5c <frq_point+0x224>)
 8003cce:	6013      	str	r3, [r2, #0]
			filter_res[1]=freq_point[1]*0.2;
 8003cd0:	4b21      	ldr	r3, [pc, #132]	; (8003d58 <frq_point+0x220>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fc fd15 	bl	8000704 <__aeabi_f2d>
 8003cda:	a31b      	add	r3, pc, #108	; (adr r3, 8003d48 <frq_point+0x210>)
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	f7fc fa82 	bl	80001e8 <__aeabi_dmul>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	f7fc fd82 	bl	80007f4 <__aeabi_d2f>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4a1a      	ldr	r2, [pc, #104]	; (8003d5c <frq_point+0x224>)
 8003cf4:	6053      	str	r3, [r2, #4]
			filter_res[2]=freq_point[2]*0.2;
 8003cf6:	4b18      	ldr	r3, [pc, #96]	; (8003d58 <frq_point+0x220>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fc fd02 	bl	8000704 <__aeabi_f2d>
 8003d00:	a311      	add	r3, pc, #68	; (adr r3, 8003d48 <frq_point+0x210>)
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	f7fc fa6f 	bl	80001e8 <__aeabi_dmul>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	f7fc fd6f 	bl	80007f4 <__aeabi_d2f>
 8003d16:	4603      	mov	r3, r0
 8003d18:	4a10      	ldr	r2, [pc, #64]	; (8003d5c <frq_point+0x224>)
 8003d1a:	6093      	str	r3, [r2, #8]
			filter_res[3]=freq_point[3]*0.2;
 8003d1c:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <frq_point+0x220>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fc fcef 	bl	8000704 <__aeabi_f2d>
 8003d26:	a308      	add	r3, pc, #32	; (adr r3, 8003d48 <frq_point+0x210>)
 8003d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2c:	f7fc fa5c 	bl	80001e8 <__aeabi_dmul>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4610      	mov	r0, r2
 8003d36:	4619      	mov	r1, r3
 8003d38:	f7fc fd5c 	bl	80007f4 <__aeabi_d2f>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4a07      	ldr	r2, [pc, #28]	; (8003d5c <frq_point+0x224>)
 8003d40:	60d3      	str	r3, [r2, #12]

}
 8003d42:	bf00      	nop
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	9999999a 	.word	0x9999999a
 8003d4c:	3fc99999 	.word	0x3fc99999
 8003d50:	2000d768 	.word	0x2000d768
 8003d54:	2000b290 	.word	0x2000b290
 8003d58:	2000b270 	.word	0x2000b270
 8003d5c:	2000b220 	.word	0x2000b220

08003d60 <display_process>:
// disableplay related data

void display_process(void){							// keep data processing here
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0




}   // end o void
 8003d64:	bf00      	nop
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <displayBuffer2>:


    void displayBuffer2 (void){       // only for feedback line now
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
														    //when scrolling maybe use this only until  settled
	uint16_t feedback_loc=(menu_title_lut[enc_out1]&896)+107;														// start 2*8 bit then squeeze in 20*6 bit characters
 8003d76:	4b72      	ldr	r3, [pc, #456]	; (8003f40 <displayBuffer2+0x1d0>)
 8003d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4b71      	ldr	r3, [pc, #452]	; (8003f44 <displayBuffer2+0x1d4>)
 8003d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	336b      	adds	r3, #107	; 0x6b
 8003d8e:	80bb      	strh	r3, [r7, #4]

	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 8003d90:	4b6b      	ldr	r3, [pc, #428]	; (8003f40 <displayBuffer2+0x1d0>)
 8003d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d96:	461a      	mov	r2, r3
 8003d98:	4b6a      	ldr	r3, [pc, #424]	; (8003f44 <displayBuffer2+0x1d4>)
 8003d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d9e:	0c1b      	lsrs	r3, r3, #16
 8003da0:	70fb      	strb	r3, [r7, #3]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8003da2:	78fb      	ldrb	r3, [r7, #3]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4a68      	ldr	r2, [pc, #416]	; (8003f48 <displayBuffer2+0x1d8>)
 8003da8:	4413      	add	r3, r2
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4b67      	ldr	r3, [pc, #412]	; (8003f4c <displayBuffer2+0x1dc>)
 8003dae:	6810      	ldr	r0, [r2, #0]
 8003db0:	6851      	ldr	r1, [r2, #4]
 8003db2:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 8003db4:	4a66      	ldr	r2, [pc, #408]	; (8003f50 <displayBuffer2+0x1e0>)
 8003db6:	463b      	mov	r3, r7
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	4611      	mov	r1, r2
 8003dbc:	8019      	strh	r1, [r3, #0]
 8003dbe:	3302      	adds	r3, #2
 8003dc0:	0c12      	lsrs	r2, r2, #16
 8003dc2:	701a      	strb	r2, [r3, #0]
	// char temp_char2[]="________";
				 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8003dc4:	4b5e      	ldr	r3, [pc, #376]	; (8003f40 <displayBuffer2+0x1d0>)
 8003dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	461a      	mov	r2, r3
 8003dce:	4b61      	ldr	r3, [pc, #388]	; (8003f54 <displayBuffer2+0x1e4>)
 8003dd0:	4413      	add	r3, r2
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	803b      	strh	r3, [r7, #0]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8003dd8:	463b      	mov	r3, r7
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f008 fd14 	bl	800c808 <atoi>
 8003de0:	4603      	mov	r3, r0
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	4b5c      	ldr	r3, [pc, #368]	; (8003f58 <displayBuffer2+0x1e8>)
 8003de6:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8003de8:	4b5b      	ldr	r3, [pc, #364]	; (8003f58 <displayBuffer2+0x1e8>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	4619      	mov	r1, r3
 8003dee:	4857      	ldr	r0, [pc, #348]	; (8003f4c <displayBuffer2+0x1dc>)
 8003df0:	f7fc fed2 	bl	8000b98 <menu_vars>
 8003df4:	4603      	mov	r3, r0
 8003df6:	4a59      	ldr	r2, [pc, #356]	; (8003f5c <displayBuffer2+0x1ec>)
 8003df8:	6013      	str	r3, [r2, #0]


	     memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 8003dfa:	88bb      	ldrh	r3, [r7, #4]
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	4a58      	ldr	r2, [pc, #352]	; (8003f60 <displayBuffer2+0x1f0>)
 8003e00:	1898      	adds	r0, r3, r2
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4a50      	ldr	r2, [pc, #320]	; (8003f48 <displayBuffer2+0x1d8>)
 8003e08:	4413      	add	r3, r2
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	4619      	mov	r1, r3
 8003e10:	f008 fd28 	bl	800c864 <memcpy>
	     memcpy(default_menu3+feedback_loc+17,potSource+380,3);
 8003e14:	88bb      	ldrh	r3, [r7, #4]
 8003e16:	3311      	adds	r3, #17
 8003e18:	4a51      	ldr	r2, [pc, #324]	; (8003f60 <displayBuffer2+0x1f0>)
 8003e1a:	4413      	add	r3, r2
 8003e1c:	4951      	ldr	r1, [pc, #324]	; (8003f64 <displayBuffer2+0x1f4>)
 8003e1e:	2203      	movs	r2, #3
 8003e20:	4618      	mov	r0, r3
 8003e22:	f008 fd1f 	bl	800c864 <memcpy>
	     memcpy(default_menu3+feedback_loc+5,temp_char,2);
 8003e26:	88bb      	ldrh	r3, [r7, #4]
 8003e28:	3305      	adds	r3, #5
 8003e2a:	4a4d      	ldr	r2, [pc, #308]	; (8003f60 <displayBuffer2+0x1f0>)
 8003e2c:	4413      	add	r3, r2
 8003e2e:	883a      	ldrh	r2, [r7, #0]
 8003e30:	801a      	strh	r2, [r3, #0]

	     if (menu_vars_ref==5) target_display=1;
 8003e32:	4b4d      	ldr	r3, [pc, #308]	; (8003f68 <displayBuffer2+0x1f8>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b05      	cmp	r3, #5
 8003e38:	d102      	bne.n	8003e40 <displayBuffer2+0xd0>
 8003e3a:	4b4c      	ldr	r3, [pc, #304]	; (8003f6c <displayBuffer2+0x1fc>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	701a      	strb	r2, [r3, #0]
	     if (menu_vars_ref==36) target_display=2;
 8003e40:	4b49      	ldr	r3, [pc, #292]	; (8003f68 <displayBuffer2+0x1f8>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b24      	cmp	r3, #36	; 0x24
 8003e46:	d102      	bne.n	8003e4e <displayBuffer2+0xde>
 8003e48:	4b48      	ldr	r3, [pc, #288]	; (8003f6c <displayBuffer2+0x1fc>)
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	701a      	strb	r2, [r3, #0]
	     if((48<menu_vars_ref)    && (menu_vars_ref<53)) target_display=3;
 8003e4e:	4b46      	ldr	r3, [pc, #280]	; (8003f68 <displayBuffer2+0x1f8>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b30      	cmp	r3, #48	; 0x30
 8003e54:	d906      	bls.n	8003e64 <displayBuffer2+0xf4>
 8003e56:	4b44      	ldr	r3, [pc, #272]	; (8003f68 <displayBuffer2+0x1f8>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b34      	cmp	r3, #52	; 0x34
 8003e5c:	d802      	bhi.n	8003e64 <displayBuffer2+0xf4>
 8003e5e:	4b43      	ldr	r3, [pc, #268]	; (8003f6c <displayBuffer2+0x1fc>)
 8003e60:	2203      	movs	r2, #3
 8003e62:	701a      	strb	r2, [r3, #0]
	 //    if((48<menu_vars_ref)    && (menu_vars_ref<53)) memcpy(LCD_Info+3, *(menu_titles_final+(*menu_vars_var)),8);  // send target for LFO_sqr  to LCD_Info


		 if (target_display)      // write LFO.target display , might use it for other things too
 8003e64:	4b41      	ldr	r3, [pc, #260]	; (8003f6c <displayBuffer2+0x1fc>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d054      	beq.n	8003f16 <displayBuffer2+0x1a6>
	     	{
	     		uint8_t target_tmp1=*menu_vars_var ;   // this can be put anywhere now
 8003e6c:	4b3b      	ldr	r3, [pc, #236]	; (8003f5c <displayBuffer2+0x1ec>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	71fb      	strb	r3, [r7, #7]
	     		if (target_tmp1>=menu_lookup_count) target_tmp1=0;    // check in case
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	2b36      	cmp	r3, #54	; 0x36
 8003e78:	d901      	bls.n	8003e7e <displayBuffer2+0x10e>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	71fb      	strb	r3, [r7, #7]
	     		if (target_display==1) memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+target_tmp1),8);  // copy info for LFO
 8003e7e:	4b3b      	ldr	r3, [pc, #236]	; (8003f6c <displayBuffer2+0x1fc>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d10c      	bne.n	8003ea0 <displayBuffer2+0x130>
 8003e86:	88bb      	ldrh	r3, [r7, #4]
 8003e88:	3308      	adds	r3, #8
 8003e8a:	4a35      	ldr	r2, [pc, #212]	; (8003f60 <displayBuffer2+0x1f0>)
 8003e8c:	1898      	adds	r0, r3, r2
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4a2d      	ldr	r2, [pc, #180]	; (8003f48 <displayBuffer2+0x1d8>)
 8003e94:	4413      	add	r3, r2
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2208      	movs	r2, #8
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	f008 fce2 	bl	800c864 <memcpy>
	     		if (target_display==2) memcpy(default_menu3+feedback_loc+8, *(patch_inputs+target_tmp1),8);  // Limited atm
 8003ea0:	4b32      	ldr	r3, [pc, #200]	; (8003f6c <displayBuffer2+0x1fc>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d10c      	bne.n	8003ec2 <displayBuffer2+0x152>
 8003ea8:	88bb      	ldrh	r3, [r7, #4]
 8003eaa:	3308      	adds	r3, #8
 8003eac:	4a2c      	ldr	r2, [pc, #176]	; (8003f60 <displayBuffer2+0x1f0>)
 8003eae:	1898      	adds	r0, r3, r2
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4a2e      	ldr	r2, [pc, #184]	; (8003f70 <displayBuffer2+0x200>)
 8003eb6:	4413      	add	r3, r2
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2208      	movs	r2, #8
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	f008 fcd1 	bl	800c864 <memcpy>
	     	//	if (target_display==3) memcpy(LCD_Info+3,  *(patch[].target+target_tmp1),8);  // Limited atm
	     		if  (target_display==3)   //  patch feedback works ok
 8003ec2:	4b2a      	ldr	r3, [pc, #168]	; (8003f6c <displayBuffer2+0x1fc>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d125      	bne.n	8003f16 <displayBuffer2+0x1a6>
	     		    {    if (LFO_sqr_list[menu_index_in&7])   {memcpy(LCD_Info+3,  menu_titles_final[sqr_target_list[menu_index_in&7]],6);LCD_Info[10]=LFO_sqr_list[menu_index_in&7];
 8003eca:	4b23      	ldr	r3, [pc, #140]	; (8003f58 <displayBuffer2+0x1e8>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	4a28      	ldr	r2, [pc, #160]	; (8003f74 <displayBuffer2+0x204>)
 8003ed4:	5cd3      	ldrb	r3, [r2, r3]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d017      	beq.n	8003f0a <displayBuffer2+0x19a>
 8003eda:	4827      	ldr	r0, [pc, #156]	; (8003f78 <displayBuffer2+0x208>)
 8003edc:	4b1e      	ldr	r3, [pc, #120]	; (8003f58 <displayBuffer2+0x1e8>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	4a25      	ldr	r2, [pc, #148]	; (8003f7c <displayBuffer2+0x20c>)
 8003ee6:	5cd3      	ldrb	r3, [r2, r3]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <displayBuffer2+0x1d8>)
 8003eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ef0:	2206      	movs	r2, #6
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f008 fcb6 	bl	800c864 <memcpy>
 8003ef8:	4b17      	ldr	r3, [pc, #92]	; (8003f58 <displayBuffer2+0x1e8>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	4a1c      	ldr	r2, [pc, #112]	; (8003f74 <displayBuffer2+0x204>)
 8003f02:	5cd2      	ldrb	r2, [r2, r3]
 8003f04:	4b1e      	ldr	r3, [pc, #120]	; (8003f80 <displayBuffer2+0x210>)
 8003f06:	729a      	strb	r2, [r3, #10]
 8003f08:	e005      	b.n	8003f16 <displayBuffer2+0x1a6>

	     		    }  // ok
	     		 else memcpy(LCD_Info+3,"        ",8); //11
 8003f0a:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <displayBuffer2+0x208>)
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	491d      	ldr	r1, [pc, #116]	; (8003f84 <displayBuffer2+0x214>)
 8003f10:	4618      	mov	r0, r3
 8003f12:	f008 fca7 	bl	800c864 <memcpy>
	     		    }
	     	}

	     target_display=0;
 8003f16:	4b15      	ldr	r3, [pc, #84]	; (8003f6c <displayBuffer2+0x1fc>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	701a      	strb	r2, [r3, #0]





	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8003f1c:	4b1a      	ldr	r3, [pc, #104]	; (8003f88 <displayBuffer2+0x218>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b11      	cmp	r3, #17
 8003f22:	d103      	bne.n	8003f2c <displayBuffer2+0x1bc>
 8003f24:	4b18      	ldr	r3, [pc, #96]	; (8003f88 <displayBuffer2+0x218>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	701a      	strb	r2, [r3, #0]


    }    // displayBuffer2
 8003f2a:	e005      	b.n	8003f38 <displayBuffer2+0x1c8>
	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8003f2c:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <displayBuffer2+0x218>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	3301      	adds	r3, #1
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <displayBuffer2+0x218>)
 8003f36:	701a      	strb	r2, [r3, #0]
    }    // displayBuffer2
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20000220 	.word	0x20000220
 8003f44:	2000d154 	.word	0x2000d154
 8003f48:	20000230 	.word	0x20000230
 8003f4c:	2000d758 	.word	0x2000d758
 8003f50:	0800cf8c 	.word	0x0800cf8c
 8003f54:	2000d554 	.word	0x2000d554
 8003f58:	2000d760 	.word	0x2000d760
 8003f5c:	2000d754 	.word	0x2000d754
 8003f60:	200112d0 	.word	0x200112d0
 8003f64:	200088d4 	.word	0x200088d4
 8003f68:	2000f791 	.word	0x2000f791
 8003f6c:	2000d767 	.word	0x2000d767
 8003f70:	2000030c 	.word	0x2000030c
 8003f74:	200109a0 	.word	0x200109a0
 8003f78:	20010baf 	.word	0x20010baf
 8003f7c:	20010c10 	.word	0x20010c10
 8003f80:	20010bac 	.word	0x20010bac
 8003f84:	0800cf80 	.word	0x0800cf80
 8003f88:	20000150 	.word	0x20000150

08003f8c <SPI_command>:

void SPI_command(void){
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8003f92:	4b18      	ldr	r3, [pc, #96]	; (8003ff4 <SPI_command+0x68>)
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d128      	bne.n	8003fec <SPI_command+0x60>
 8003f9a:	4b17      	ldr	r3, [pc, #92]	; (8003ff8 <SPI_command+0x6c>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d124      	bne.n	8003fec <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8003fa2:	4b16      	ldr	r3, [pc, #88]	; (8003ffc <SPI_command+0x70>)
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	0a1b      	lsrs	r3, r3, #8
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <SPI_command+0x2a>
 8003fae:	4b14      	ldr	r3, [pc, #80]	; (8004000 <SPI_command+0x74>)
 8003fb0:	22f8      	movs	r2, #248	; 0xf8
 8003fb2:	701a      	strb	r2, [r3, #0]
 8003fb4:	e002      	b.n	8003fbc <SPI_command+0x30>
 8003fb6:	4b12      	ldr	r3, [pc, #72]	; (8004000 <SPI_command+0x74>)
 8003fb8:	22fa      	movs	r2, #250	; 0xfa
 8003fba:	701a      	strb	r2, [r3, #0]

	spi_store[0]=spi_byte&255;
 8003fbc:	4b10      	ldr	r3, [pc, #64]	; (8004000 <SPI_command+0x74>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8003fc2:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <SPI_command+0x70>)
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <SPI_command+0x70>)
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 8003fda:	4639      	mov	r1, r7
 8003fdc:	2303      	movs	r3, #3
 8003fde:	2203      	movs	r2, #3
 8003fe0:	4808      	ldr	r0, [pc, #32]	; (8004004 <SPI_command+0x78>)
 8003fe2:	f005 ff6c 	bl	8009ebe <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 8003fe6:	4b03      	ldr	r3, [pc, #12]	; (8003ff4 <SPI_command+0x68>)
 8003fe8:	2201      	movs	r2, #1
 8003fea:	801a      	strh	r2, [r3, #0]
}
 8003fec:	bf00      	nop
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	2000b204 	.word	0x2000b204
 8003ff8:	2000b20a 	.word	0x2000b20a
 8003ffc:	2000b208 	.word	0x2000b208
 8004000:	2000b206 	.word	0x2000b206
 8004004:	20011824 	.word	0x20011824

08004008 <display_init>:

void display_init(void){
 8004008:	b5b0      	push	{r4, r5, r7, lr}
 800400a:	b08a      	sub	sp, #40	; 0x28
 800400c:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 800400e:	4b22      	ldr	r3, [pc, #136]	; (8004098 <display_init+0x90>)
 8004010:	1d3c      	adds	r4, r7, #4
 8004012:	461d      	mov	r5, r3
 8004014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800401a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800401c:	682b      	ldr	r3, [r5, #0]
 800401e:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8004020:	4b1e      	ldr	r3, [pc, #120]	; (800409c <display_init+0x94>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d132      	bne.n	800408e <display_init+0x86>

switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8004028:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <display_init+0x98>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b06      	subs	r3, #6
 8004030:	b29a      	uxth	r2, r3
 8004032:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <display_init+0x9c>)
 8004034:	801a      	strh	r2, [r3, #0]
 8004036:	f7ff fe9b 	bl	8003d70 <displayBuffer2>
 800403a:	4b1a      	ldr	r3, [pc, #104]	; (80040a4 <display_init+0x9c>)
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <display_init+0xa0>)
 8004042:	5c9b      	ldrb	r3, [r3, r2]
 8004044:	b29a      	uxth	r2, r3
 8004046:	4b19      	ldr	r3, [pc, #100]	; (80040ac <display_init+0xa4>)
 8004048:	801a      	strh	r2, [r3, #0]
 800404a:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 800404c:	4b14      	ldr	r3, [pc, #80]	; (80040a0 <display_init+0x98>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b05      	cmp	r3, #5
 8004052:	d80b      	bhi.n	800406c <display_init+0x64>
 8004054:	2003      	movs	r0, #3
 8004056:	f002 fb55 	bl	8006704 <HAL_Delay>
 800405a:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <display_init+0x98>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	3328      	adds	r3, #40	; 0x28
 8004062:	443b      	add	r3, r7
 8004064:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8004068:	4b10      	ldr	r3, [pc, #64]	; (80040ac <display_init+0xa4>)
 800406a:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 800406c:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <display_init+0x98>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	3301      	adds	r3, #1
 8004072:	b2da      	uxtb	r2, r3
 8004074:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <display_init+0x98>)
 8004076:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8004078:	4b08      	ldr	r3, [pc, #32]	; (800409c <display_init+0x94>)
 800407a:	2201      	movs	r2, #1
 800407c:	701a      	strb	r2, [r3, #0]
 800407e:	f7ff ff85 	bl	8003f8c <SPI_command>
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <display_init+0x94>)
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
 8004088:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <display_init+0xa8>)
 800408a:	2200      	movs	r2, #0
 800408c:	801a      	strh	r2, [r3, #0]


		  }

		//  if (init==5) display_fill();
}
 800408e:	bf00      	nop
 8004090:	3728      	adds	r7, #40	; 0x28
 8004092:	46bd      	mov	sp, r7
 8004094:	bdb0      	pop	{r4, r5, r7, pc}
 8004096:	bf00      	nop
 8004098:	0800cf90 	.word	0x0800cf90
 800409c:	2000b20a 	.word	0x2000b20a
 80040a0:	2000b20b 	.word	0x2000b20b
 80040a4:	2000b20c 	.word	0x2000b20c
 80040a8:	20000000 	.word	0x20000000
 80040ac:	2000b208 	.word	0x2000b208
 80040b0:	2000b204 	.word	0x2000b204

080040b4 <gfx_TX_block>:
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;

			} HAL_SPI_Transmit_DMA(&hspi2,spi_store,54);  // ok

}
void gfx_TX_block(void){         // send spi to lcd from gfx ram , full page needed initially as it writes commands as well
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	73fb      	strb	r3, [r7, #15]
			uint8_t spi_store3=0;
 80040be:	2300      	movs	r3, #0
 80040c0:	72bb      	strb	r3, [r7, #10]
			uint16_t  up_counter=0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	81bb      	strh	r3, [r7, #12]
			uint8_t line_counter=0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	72fb      	strb	r3, [r7, #11]

			gfx_send_counter=0;
 80040ca:	4b25      	ldr	r3, [pc, #148]	; (8004160 <gfx_TX_block+0xac>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 80040d0:	2300      	movs	r3, #0
 80040d2:	81bb      	strh	r3, [r7, #12]
 80040d4:	e034      	b.n	8004140 <gfx_TX_block+0x8c>


			    spi_store3=gfx_ram[gfx_send_counter];
 80040d6:	4b22      	ldr	r3, [pc, #136]	; (8004160 <gfx_TX_block+0xac>)
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	4b21      	ldr	r3, [pc, #132]	; (8004164 <gfx_TX_block+0xb0>)
 80040de:	5c9b      	ldrb	r3, [r3, r2]
 80040e0:	72bb      	strb	r3, [r7, #10]
			    if (line_counter>1) {spi_store2=250;					// 2ms delay between location commands , data is ok full speed
 80040e2:	7afb      	ldrb	r3, [r7, #11]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d902      	bls.n	80040ee <gfx_TX_block+0x3a>
 80040e8:	23fa      	movs	r3, #250	; 0xfa
 80040ea:	73fb      	strb	r3, [r7, #15]
 80040ec:	e001      	b.n	80040f2 <gfx_TX_block+0x3e>
			}
			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 80040ee:	23f8      	movs	r3, #248	; 0xf8
 80040f0:	73fb      	strb	r3, [r7, #15]

					spi_store[0]=spi_store2;
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	713b      	strb	r3, [r7, #4]
					spi_store[1]=((spi_store3>>4)<<4);
 80040f6:	7abb      	ldrb	r3, [r7, #10]
 80040f8:	091b      	lsrs	r3, r3, #4
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	717b      	strb	r3, [r7, #5]
					spi_store[2]=((spi_store3&15)<<4);
 8004102:	7abb      	ldrb	r3, [r7, #10]
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	b2db      	uxtb	r3, r3
 8004108:	71bb      	strb	r3, [r7, #6]
					memcpy(spi_tx_block+up_counter,spi_store,3);
 800410a:	89bb      	ldrh	r3, [r7, #12]
 800410c:	4a16      	ldr	r2, [pc, #88]	; (8004168 <gfx_TX_block+0xb4>)
 800410e:	4413      	add	r3, r2
 8004110:	461a      	mov	r2, r3
 8004112:	1d3b      	adds	r3, r7, #4
 8004114:	8819      	ldrh	r1, [r3, #0]
 8004116:	789b      	ldrb	r3, [r3, #2]
 8004118:	8011      	strh	r1, [r2, #0]
 800411a:	7093      	strb	r3, [r2, #2]
					if (line_counter==17 ) { line_counter=0;    } else line_counter++; //
 800411c:	7afb      	ldrb	r3, [r7, #11]
 800411e:	2b11      	cmp	r3, #17
 8004120:	d102      	bne.n	8004128 <gfx_TX_block+0x74>
 8004122:	2300      	movs	r3, #0
 8004124:	72fb      	strb	r3, [r7, #11]
 8004126:	e002      	b.n	800412e <gfx_TX_block+0x7a>
 8004128:	7afb      	ldrb	r3, [r7, #11]
 800412a:	3301      	adds	r3, #1
 800412c:	72fb      	strb	r3, [r7, #11]
			 gfx_send_counter++; ;
 800412e:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <gfx_TX_block+0xac>)
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	3301      	adds	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <gfx_TX_block+0xac>)
 8004138:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 800413a:	89bb      	ldrh	r3, [r7, #12]
 800413c:	3303      	adds	r3, #3
 800413e:	81bb      	strh	r3, [r7, #12]
 8004140:	89bb      	ldrh	r3, [r7, #12]
 8004142:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 8004146:	d3c6      	bcc.n	80040d6 <gfx_TX_block+0x22>

			} ;  // ok
			gfx_send_counter=0; disp_end=1;
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <gfx_TX_block+0xac>)
 800414a:	2200      	movs	r2, #0
 800414c:	801a      	strh	r2, [r3, #0]
 800414e:	4b07      	ldr	r3, [pc, #28]	; (800416c <gfx_TX_block+0xb8>)
 8004150:	2201      	movs	r2, #1
 8004152:	701a      	strb	r2, [r3, #0]

}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	2000bbaa 	.word	0x2000bbaa
 8004164:	2000b728 	.word	0x2000b728
 8004168:	2000f99c 	.word	0x2000f99c
 800416c:	2000bbb6 	.word	0x2000bbb6

08004170 <gfx_clear>:

void gfx_clear(void){     // simple gfx ram clear ,besides feedback
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0

	for (n=0;n<1152 ;n=n+18)    {
 8004174:	4b19      	ldr	r3, [pc, #100]	; (80041dc <gfx_clear+0x6c>)
 8004176:	2200      	movs	r2, #0
 8004178:	801a      	strh	r2, [r3, #0]
 800417a:	e01c      	b.n	80041b6 <gfx_clear+0x46>
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 800417c:	4b18      	ldr	r3, [pc, #96]	; (80041e0 <gfx_clear+0x70>)
 800417e:	2202      	movs	r2, #2
 8004180:	801a      	strh	r2, [r3, #0]
 8004182:	e00e      	b.n	80041a2 <gfx_clear+0x32>
 8004184:	4b15      	ldr	r3, [pc, #84]	; (80041dc <gfx_clear+0x6c>)
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	461a      	mov	r2, r3
 800418a:	4b15      	ldr	r3, [pc, #84]	; (80041e0 <gfx_clear+0x70>)
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	4413      	add	r3, r2
 8004190:	4a14      	ldr	r2, [pc, #80]	; (80041e4 <gfx_clear+0x74>)
 8004192:	2100      	movs	r1, #0
 8004194:	54d1      	strb	r1, [r2, r3]
 8004196:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <gfx_clear+0x70>)
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	3301      	adds	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <gfx_clear+0x70>)
 80041a0:	801a      	strh	r2, [r3, #0]
 80041a2:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <gfx_clear+0x70>)
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	2b11      	cmp	r3, #17
 80041a8:	d9ec      	bls.n	8004184 <gfx_clear+0x14>
	for (n=0;n<1152 ;n=n+18)    {
 80041aa:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <gfx_clear+0x6c>)
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	3312      	adds	r3, #18
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <gfx_clear+0x6c>)
 80041b4:	801a      	strh	r2, [r3, #0]
 80041b6:	4b09      	ldr	r3, [pc, #36]	; (80041dc <gfx_clear+0x6c>)
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80041be:	d3dd      	bcc.n	800417c <gfx_clear+0xc>

				}  }
	 gfx_send_swap=0;  // disable line skip
 80041c0:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <gfx_clear+0x78>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 80041c6:	4b09      	ldr	r3, [pc, #36]	; (80041ec <gfx_clear+0x7c>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 80041cc:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <gfx_clear+0x80>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	701a      	strb	r2, [r3, #0]

}
 80041d2:	bf00      	nop
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	200089bc 	.word	0x200089bc
 80041e0:	200089c2 	.word	0x200089c2
 80041e4:	2000b728 	.word	0x2000b728
 80041e8:	2000bbac 	.word	0x2000bbac
 80041ec:	2000bbaa 	.word	0x2000bbaa
 80041f0:	2000bbb6 	.word	0x2000bbb6

080041f4 <display_clear>:

		 gfx_send();

	 }  }

void display_clear (void){ //  simple character clear on default menu3
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0

	uint16_t disp_counter=0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	80fb      	strh	r3, [r7, #6]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 80041fe:	2300      	movs	r3, #0
 8004200:	80fb      	strh	r3, [r7, #6]
 8004202:	e006      	b.n	8004212 <display_clear+0x1e>
		default_menu3[disp_counter]=47;
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	4a08      	ldr	r2, [pc, #32]	; (8004228 <display_clear+0x34>)
 8004208:	212f      	movs	r1, #47	; 0x2f
 800420a:	54d1      	strb	r1, [r2, r3]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	3301      	adds	r3, #1
 8004210:	80fb      	strh	r3, [r7, #6]
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004218:	d3f4      	bcc.n	8004204 <display_clear+0x10>
	}


}
 800421a:	bf00      	nop
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	200112d0 	.word	0x200112d0

0800422c <display_generate>:
void display_generate(void){    // display character generate, 1+1+16 chars
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
uint8_t counter;
	gfx_clear_flag=0;
 8004230:	4b05      	ldr	r3, [pc, #20]	; (8004248 <display_generate+0x1c>)
 8004232:	2200      	movs	r2, #0
 8004234:	701a      	strb	r2, [r3, #0]
//	for (counter=0;counter<18;counter++) {
	display_process();
 8004236:	f7ff fd93 	bl	8003d60 <display_process>
		  displayBuffer2(); // 5 cycles max for the lot or  0.2ms
 800423a:	f7ff fd99 	bl	8003d70 <displayBuffer2>
	// if(!gfx_clear_flag)   gfx_send_swap=1;   // enable line swapping
	 disp_end=0;   ///reset till next full page
 800423e:	4b03      	ldr	r3, [pc, #12]	; (800424c <display_generate+0x20>)
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]

	//  if (!disp_stepper) break;

}
 8004244:	bf00      	nop
 8004246:	bd80      	pop	{r7, pc}
 8004248:	2000d76a 	.word	0x2000d76a
 800424c:	2000bbb6 	.word	0x2000bbb6

08004250 <gfx_line_fill>:



}

void gfx_line_fill (){   // fills a line to gfx_ram from default_menu3 also fills gfx_block
 8004250:	b480      	push	{r7}
 8004252:	b08b      	sub	sp, #44	; 0x2c
 8004254:	af00      	add	r7, sp, #0
		    // this now is the  emain char to disp
   // uint8_t line_selected=(loop_counter&7)+((menu_title_lut[enc_out1]>>7)*8);

    uint16_t cursor= menu_title_lut[enc_out1];
 8004256:	4b5c      	ldr	r3, [pc, #368]	; (80043c8 <gfx_line_fill+0x178>)
 8004258:	f9b3 3000 	ldrsh.w	r3, [r3]
 800425c:	461a      	mov	r2, r3
 800425e:	4b5b      	ldr	r3, [pc, #364]	; (80043cc <gfx_line_fill+0x17c>)
 8004260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004264:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t line_selected=(loop_counter&7)+((cursor>>7)*8);    // thsi needs to be 1024/16
 8004266:	4b5a      	ldr	r3, [pc, #360]	; (80043d0 <gfx_line_fill+0x180>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	b29b      	uxth	r3, r3
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	b29a      	uxth	r2, r3
 8004272:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004274:	09db      	lsrs	r3, r3, #7
 8004276:	b29b      	uxth	r3, r3
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	b29b      	uxth	r3, r3
 800427c:	4413      	add	r3, r2
 800427e:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t start_line=(line_selected&7)*144;
 8004280:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	b29b      	uxth	r3, r3
 8004288:	461a      	mov	r2, r3
 800428a:	00d2      	lsls	r2, r2, #3
 800428c:	4413      	add	r3, r2
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	843b      	strh	r3, [r7, #32]
     uint16_t end_line=start_line+144;
 8004292:	8c3b      	ldrh	r3, [r7, #32]
 8004294:	3390      	adds	r3, #144	; 0x90
 8004296:	83fb      	strh	r3, [r7, #30]
     disp_end=1;
 8004298:	4b4e      	ldr	r3, [pc, #312]	; (80043d4 <gfx_line_fill+0x184>)
 800429a:	2201      	movs	r2, #1
 800429c:	701a      	strb	r2, [r3, #0]
   //  uint8_t  character=default_menu3[(i-2)+(line_selected*16)]-47;
    uint8_t char_skip=0;
 800429e:	2300      	movs	r3, #0
 80042a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     uint16_t character;
     uint8_t spi_store[3];
     uint8_t spi_store3=0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	777b      	strb	r3, [r7, #29]
     uint8_t reverse[16]={0};
 80042a8:	2300      	movs	r3, #0
 80042aa:	607b      	str	r3, [r7, #4]
 80042ac:	f107 0308 	add.w	r3, r7, #8
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	609a      	str	r2, [r3, #8]



     if ((cursor>>4) == line_selected)    reverse [(cursor&15)]=1;
 80042b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042ba:	091b      	lsrs	r3, r3, #4
 80042bc:	b29b      	uxth	r3, r3
 80042be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d107      	bne.n	80042d4 <gfx_line_fill+0x84>
 80042c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	3328      	adds	r3, #40	; 0x28
 80042cc:	443b      	add	r3, r7
 80042ce:	2201      	movs	r2, #1
 80042d0:	f803 2c24 	strb.w	r2, [r3, #-36]

     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 80042d4:	4a40      	ldr	r2, [pc, #256]	; (80043d8 <gfx_line_fill+0x188>)
 80042d6:	8c3b      	ldrh	r3, [r7, #32]
 80042d8:	8013      	strh	r3, [r2, #0]
 80042da:	e068      	b.n	80043ae <gfx_line_fill+0x15e>

	 for (i=0;i<16;i++){
 80042dc:	4b3f      	ldr	r3, [pc, #252]	; (80043dc <gfx_line_fill+0x18c>)
 80042de:	2200      	movs	r2, #0
 80042e0:	801a      	strh	r2, [r3, #0]
 80042e2:	e055      	b.n	8004390 <gfx_line_fill+0x140>
		 character=((default_menu3[i+(line_selected*16)]-47)*8)+char_skip;
 80042e4:	4b3d      	ldr	r3, [pc, #244]	; (80043dc <gfx_line_fill+0x18c>)
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	4413      	add	r3, r2
 80042f0:	4a3b      	ldr	r2, [pc, #236]	; (80043e0 <gfx_line_fill+0x190>)
 80042f2:	5cd3      	ldrb	r3, [r2, r3]
 80042f4:	3b2f      	subs	r3, #47	; 0x2f
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004300:	b29b      	uxth	r3, r3
 8004302:	4413      	add	r3, r2
 8004304:	837b      	strh	r3, [r7, #26]
		 spi_store3= gfx_char[character&1023 ];     // limited characters
 8004306:	8b7b      	ldrh	r3, [r7, #26]
 8004308:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800430c:	4a35      	ldr	r2, [pc, #212]	; (80043e4 <gfx_line_fill+0x194>)
 800430e:	5cd3      	ldrb	r3, [r2, r3]
 8004310:	777b      	strb	r3, [r7, #29]
		spi_store3=spi_store3^(reverse[i]*127);
 8004312:	4b32      	ldr	r3, [pc, #200]	; (80043dc <gfx_line_fill+0x18c>)
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	3328      	adds	r3, #40	; 0x28
 8004318:	443b      	add	r3, r7
 800431a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800431e:	461a      	mov	r2, r3
 8004320:	01d2      	lsls	r2, r2, #7
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	b2db      	uxtb	r3, r3
 8004326:	b25a      	sxtb	r2, r3
 8004328:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800432c:	4053      	eors	r3, r2
 800432e:	b25b      	sxtb	r3, r3
 8004330:	777b      	strb	r3, [r7, #29]
		 gfx_ram[n+i+2]=spi_store3;
 8004332:	4b29      	ldr	r3, [pc, #164]	; (80043d8 <gfx_line_fill+0x188>)
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	4b28      	ldr	r3, [pc, #160]	; (80043dc <gfx_line_fill+0x18c>)
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	4413      	add	r3, r2
 800433e:	3302      	adds	r3, #2
 8004340:	4929      	ldr	r1, [pc, #164]	; (80043e8 <gfx_line_fill+0x198>)
 8004342:	7f7a      	ldrb	r2, [r7, #29]
 8004344:	54ca      	strb	r2, [r1, r3]

						    spi_store[0]=250;
 8004346:	23fa      	movs	r3, #250	; 0xfa
 8004348:	753b      	strb	r3, [r7, #20]
						    spi_store[1]=((spi_store3>>4)<<4);
 800434a:	7f7b      	ldrb	r3, [r7, #29]
 800434c:	091b      	lsrs	r3, r3, #4
 800434e:	b2db      	uxtb	r3, r3
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	b2db      	uxtb	r3, r3
 8004354:	757b      	strb	r3, [r7, #21]
						    spi_store[2]=((spi_store3&15)<<4);
 8004356:	7f7b      	ldrb	r3, [r7, #29]
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	b2db      	uxtb	r3, r3
 800435c:	75bb      	strb	r3, [r7, #22]
						    memcpy(spi_tx_block+(((n+i)*3)+6),spi_store,3);  // writes only data no command
 800435e:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <gfx_line_fill+0x188>)
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <gfx_line_fill+0x18c>)
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	441a      	add	r2, r3
 800436a:	4613      	mov	r3, r2
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	4413      	add	r3, r2
 8004370:	3306      	adds	r3, #6
 8004372:	4a1e      	ldr	r2, [pc, #120]	; (80043ec <gfx_line_fill+0x19c>)
 8004374:	4413      	add	r3, r2
 8004376:	461a      	mov	r2, r3
 8004378:	f107 0314 	add.w	r3, r7, #20
 800437c:	8819      	ldrh	r1, [r3, #0]
 800437e:	789b      	ldrb	r3, [r3, #2]
 8004380:	8011      	strh	r1, [r2, #0]
 8004382:	7093      	strb	r3, [r2, #2]
	 for (i=0;i<16;i++){
 8004384:	4b15      	ldr	r3, [pc, #84]	; (80043dc <gfx_line_fill+0x18c>)
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	3301      	adds	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	4b13      	ldr	r3, [pc, #76]	; (80043dc <gfx_line_fill+0x18c>)
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	4b12      	ldr	r3, [pc, #72]	; (80043dc <gfx_line_fill+0x18c>)
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	2b0f      	cmp	r3, #15
 8004396:	d9a5      	bls.n	80042e4 <gfx_line_fill+0x94>
		     }
	char_skip++;
 8004398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800439c:	3301      	adds	r3, #1
 800439e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 80043a2:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <gfx_line_fill+0x188>)
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	3312      	adds	r3, #18
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <gfx_line_fill+0x188>)
 80043ac:	801a      	strh	r2, [r3, #0]
 80043ae:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <gfx_line_fill+0x188>)
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	8bfa      	ldrh	r2, [r7, #30]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d891      	bhi.n	80042dc <gfx_line_fill+0x8c>
    }
    }
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop
 80043bc:	372c      	adds	r7, #44	; 0x2c
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000220 	.word	0x20000220
 80043cc:	2000d154 	.word	0x2000d154
 80043d0:	200089be 	.word	0x200089be
 80043d4:	2000bbb6 	.word	0x2000bbb6
 80043d8:	200089bc 	.word	0x200089bc
 80043dc:	200089c2 	.word	0x200089c2
 80043e0:	200112d0 	.word	0x200112d0
 80043e4:	0800ddfc 	.word	0x0800ddfc
 80043e8:	2000b728 	.word	0x2000b728
 80043ec:	2000f99c 	.word	0x2000f99c

080043f0 <encoder2>:


void encoder2(void){  // encoder pos and data input
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0


	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 80043f6:	4b5f      	ldr	r3, [pc, #380]	; (8004574 <encoder2+0x184>)
 80043f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043fc:	461a      	mov	r2, r3
 80043fe:	4b5e      	ldr	r3, [pc, #376]	; (8004578 <encoder2+0x188>)
 8004400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004404:	0c1b      	lsrs	r3, r3, #16
 8004406:	71fb      	strb	r3, [r7, #7]

	    memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4a5b      	ldr	r2, [pc, #364]	; (800457c <encoder2+0x18c>)
 800440e:	4413      	add	r3, r2
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4b5b      	ldr	r3, [pc, #364]	; (8004580 <encoder2+0x190>)
 8004414:	6810      	ldr	r0, [r2, #0]
 8004416:	6851      	ldr	r1, [r2, #4]
 8004418:	c303      	stmia	r3!, {r0, r1}
	     char temp_char[]="  ";
 800441a:	4a5a      	ldr	r2, [pc, #360]	; (8004584 <encoder2+0x194>)
 800441c:	1d3b      	adds	r3, r7, #4
 800441e:	6812      	ldr	r2, [r2, #0]
 8004420:	4611      	mov	r1, r2
 8004422:	8019      	strh	r1, [r3, #0]
 8004424:	3302      	adds	r3, #2
 8004426:	0c12      	lsrs	r2, r2, #16
 8004428:	701a      	strb	r2, [r3, #0]
				     memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 800442a:	4b52      	ldr	r3, [pc, #328]	; (8004574 <encoder2+0x184>)
 800442c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	461a      	mov	r2, r3
 8004434:	4b54      	ldr	r3, [pc, #336]	; (8004588 <encoder2+0x198>)
 8004436:	4413      	add	r3, r2
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	b29b      	uxth	r3, r3
 800443c:	80bb      	strh	r3, [r7, #4]
				     menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 800443e:	1d3b      	adds	r3, r7, #4
 8004440:	4618      	mov	r0, r3
 8004442:	f008 f9e1 	bl	800c808 <atoi>
 8004446:	4603      	mov	r3, r0
 8004448:	b2da      	uxtb	r2, r3
 800444a:	4b50      	ldr	r3, [pc, #320]	; (800458c <encoder2+0x19c>)
 800444c:	701a      	strb	r2, [r3, #0]
	    menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 800444e:	4b4f      	ldr	r3, [pc, #316]	; (800458c <encoder2+0x19c>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	4619      	mov	r1, r3
 8004454:	484a      	ldr	r0, [pc, #296]	; (8004580 <encoder2+0x190>)
 8004456:	f7fc fb9f 	bl	8000b98 <menu_vars>
 800445a:	4603      	mov	r3, r0
 800445c:	4a4c      	ldr	r2, [pc, #304]	; (8004590 <encoder2+0x1a0>)
 800445e:	6013      	str	r3, [r2, #0]
		if ((*menu_vars_var)>menu_vars_limiter[menu_vars_ref])     *menu_vars_var=menu_vars_limiter[menu_vars_ref];   // limit value sher too
 8004460:	4b4b      	ldr	r3, [pc, #300]	; (8004590 <encoder2+0x1a0>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	781a      	ldrb	r2, [r3, #0]
 8004466:	4b4b      	ldr	r3, [pc, #300]	; (8004594 <encoder2+0x1a4>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	4619      	mov	r1, r3
 800446c:	4b4a      	ldr	r3, [pc, #296]	; (8004598 <encoder2+0x1a8>)
 800446e:	5c5b      	ldrb	r3, [r3, r1]
 8004470:	429a      	cmp	r2, r3
 8004472:	d907      	bls.n	8004484 <encoder2+0x94>
 8004474:	4b47      	ldr	r3, [pc, #284]	; (8004594 <encoder2+0x1a4>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	4619      	mov	r1, r3
 800447a:	4b45      	ldr	r3, [pc, #276]	; (8004590 <encoder2+0x1a0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a46      	ldr	r2, [pc, #280]	; (8004598 <encoder2+0x1a8>)
 8004480:	5c52      	ldrb	r2, [r2, r1]
 8004482:	701a      	strb	r2, [r3, #0]

	    // input encode ------------------------
	    if ((enc_dir!=enc_mem_dir)  )    ///write back value if encoder changed ;
 8004484:	4b45      	ldr	r3, [pc, #276]	; (800459c <encoder2+0x1ac>)
 8004486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800448a:	461a      	mov	r2, r3
 800448c:	4b44      	ldr	r3, [pc, #272]	; (80045a0 <encoder2+0x1b0>)
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	429a      	cmp	r2, r3
 8004492:	d024      	beq.n	80044de <encoder2+0xee>
	    {
		if (enc_dir>enc_mem_dir) 							*menu_vars_var=((*menu_vars_var)+1)&255;
 8004494:	4b41      	ldr	r3, [pc, #260]	; (800459c <encoder2+0x1ac>)
 8004496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800449a:	461a      	mov	r2, r3
 800449c:	4b40      	ldr	r3, [pc, #256]	; (80045a0 <encoder2+0x1b0>)
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	dd07      	ble.n	80044b4 <encoder2+0xc4>
 80044a4:	4b3a      	ldr	r3, [pc, #232]	; (8004590 <encoder2+0x1a0>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	781a      	ldrb	r2, [r3, #0]
 80044aa:	4b39      	ldr	r3, [pc, #228]	; (8004590 <encoder2+0x1a0>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3201      	adds	r2, #1
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	701a      	strb	r2, [r3, #0]
	    if ((enc_dir<enc_mem_dir)&&(*menu_vars_var))		 *menu_vars_var=((*menu_vars_var)-1)&255;
 80044b4:	4b39      	ldr	r3, [pc, #228]	; (800459c <encoder2+0x1ac>)
 80044b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044ba:	461a      	mov	r2, r3
 80044bc:	4b38      	ldr	r3, [pc, #224]	; (80045a0 <encoder2+0x1b0>)
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	da0c      	bge.n	80044de <encoder2+0xee>
 80044c4:	4b32      	ldr	r3, [pc, #200]	; (8004590 <encoder2+0x1a0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d007      	beq.n	80044de <encoder2+0xee>
 80044ce:	4b30      	ldr	r3, [pc, #192]	; (8004590 <encoder2+0x1a0>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	781a      	ldrb	r2, [r3, #0]
 80044d4:	4b2e      	ldr	r3, [pc, #184]	; (8004590 <encoder2+0x1a0>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3a01      	subs	r2, #1
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]
	    }
	    enc_mem_dir=enc_dir;
 80044de:	4b2f      	ldr	r3, [pc, #188]	; (800459c <encoder2+0x1ac>)
 80044e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	4b2e      	ldr	r3, [pc, #184]	; (80045a0 <encoder2+0x1b0>)
 80044e8:	801a      	strh	r2, [r3, #0]

	    // location encode ------------------------

	    if ((enc2_dir!=enc2_mem_dir)  )    ///write back value if encoder changed ;
 80044ea:	4b2e      	ldr	r3, [pc, #184]	; (80045a4 <encoder2+0x1b4>)
 80044ec:	881a      	ldrh	r2, [r3, #0]
 80044ee:	4b2e      	ldr	r3, [pc, #184]	; (80045a8 <encoder2+0x1b8>)
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d01d      	beq.n	8004532 <encoder2+0x142>
	   	    {
	   		if (enc2_dir>enc2_mem_dir) 							enc_out1++;
 80044f6:	4b2b      	ldr	r3, [pc, #172]	; (80045a4 <encoder2+0x1b4>)
 80044f8:	881a      	ldrh	r2, [r3, #0]
 80044fa:	4b2b      	ldr	r3, [pc, #172]	; (80045a8 <encoder2+0x1b8>)
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d908      	bls.n	8004514 <encoder2+0x124>
 8004502:	4b1c      	ldr	r3, [pc, #112]	; (8004574 <encoder2+0x184>)
 8004504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004508:	b29b      	uxth	r3, r3
 800450a:	3301      	adds	r3, #1
 800450c:	b29b      	uxth	r3, r3
 800450e:	b21a      	sxth	r2, r3
 8004510:	4b18      	ldr	r3, [pc, #96]	; (8004574 <encoder2+0x184>)
 8004512:	801a      	strh	r2, [r3, #0]
	   	    if ((enc2_dir<enc2_mem_dir))		enc_out1--;
 8004514:	4b23      	ldr	r3, [pc, #140]	; (80045a4 <encoder2+0x1b4>)
 8004516:	881a      	ldrh	r2, [r3, #0]
 8004518:	4b23      	ldr	r3, [pc, #140]	; (80045a8 <encoder2+0x1b8>)
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d208      	bcs.n	8004532 <encoder2+0x142>
 8004520:	4b14      	ldr	r3, [pc, #80]	; (8004574 <encoder2+0x184>)
 8004522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004526:	b29b      	uxth	r3, r3
 8004528:	3b01      	subs	r3, #1
 800452a:	b29b      	uxth	r3, r3
 800452c:	b21a      	sxth	r2, r3
 800452e:	4b11      	ldr	r3, [pc, #68]	; (8004574 <encoder2+0x184>)
 8004530:	801a      	strh	r2, [r3, #0]

	   	    }
	   	   if (enc_out1>menu_title_count) enc_out1=0;
 8004532:	4b10      	ldr	r3, [pc, #64]	; (8004574 <encoder2+0x184>)
 8004534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004538:	461a      	mov	r2, r3
 800453a:	4b1c      	ldr	r3, [pc, #112]	; (80045ac <encoder2+0x1bc>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	dd02      	ble.n	8004548 <encoder2+0x158>
 8004542:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <encoder2+0x184>)
 8004544:	2200      	movs	r2, #0
 8004546:	801a      	strh	r2, [r3, #0]
	   	 if (enc_out1<0) enc_out1=menu_title_count;
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <encoder2+0x184>)
 800454a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800454e:	2b00      	cmp	r3, #0
 8004550:	da04      	bge.n	800455c <encoder2+0x16c>
 8004552:	4b16      	ldr	r3, [pc, #88]	; (80045ac <encoder2+0x1bc>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	b21a      	sxth	r2, r3
 8004558:	4b06      	ldr	r3, [pc, #24]	; (8004574 <encoder2+0x184>)
 800455a:	801a      	strh	r2, [r3, #0]

	    enc2_mem_dir=enc2_dir;
 800455c:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <encoder2+0x1b4>)
 800455e:	881a      	ldrh	r2, [r3, #0]
 8004560:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <encoder2+0x1b8>)
 8004562:	801a      	strh	r2, [r3, #0]
	   //-------------------

		    enc2_add=0;
 8004564:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <encoder2+0x1c0>)
 8004566:	2200      	movs	r2, #0
 8004568:	701a      	strb	r2, [r3, #0]

    }
 800456a:	bf00      	nop
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20000220 	.word	0x20000220
 8004578:	2000d154 	.word	0x2000d154
 800457c:	20000230 	.word	0x20000230
 8004580:	2000d758 	.word	0x2000d758
 8004584:	0800cf8c 	.word	0x0800cf8c
 8004588:	2000d554 	.word	0x2000d554
 800458c:	2000d760 	.word	0x2000d760
 8004590:	2000d754 	.word	0x2000d754
 8004594:	2000f791 	.word	0x2000f791
 8004598:	0800dd8c 	.word	0x0800dd8c
 800459c:	2000b1fc 	.word	0x2000b1fc
 80045a0:	2000f996 	.word	0x2000f996
 80045a4:	2000b1fa 	.word	0x2000b1fa
 80045a8:	2000d764 	.word	0x2000d764
 80045ac:	2000d151 	.word	0x2000d151
 80045b0:	2000b1fe 	.word	0x2000b1fe

080045b4 <menu3_fill>:


    void menu3_fill(void){   // looping write into default_menu3
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
	uint16_t   enc_up=disp_up_counter;
 80045ba:	4b4e      	ldr	r3, [pc, #312]	; (80046f4 <menu3_fill+0x140>)
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	81fb      	strh	r3, [r7, #14]

	if(enc_up>menu_title_count) {enc_up=0; disp_up_counter=0;}
 80045c0:	4b4d      	ldr	r3, [pc, #308]	; (80046f8 <menu3_fill+0x144>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	89fa      	ldrh	r2, [r7, #14]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d904      	bls.n	80045d6 <menu3_fill+0x22>
 80045cc:	2300      	movs	r3, #0
 80045ce:	81fb      	strh	r3, [r7, #14]
 80045d0:	4b48      	ldr	r3, [pc, #288]	; (80046f4 <menu3_fill+0x140>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	801a      	strh	r2, [r3, #0]

	uint8_t crap_hold10=(menu_title_lut[enc_up]>>16)&255;   // look up up menu_titles_final
 80045d6:	89fb      	ldrh	r3, [r7, #14]
 80045d8:	4a48      	ldr	r2, [pc, #288]	; (80046fc <menu3_fill+0x148>)
 80045da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045de:	0c1b      	lsrs	r3, r3, #16
 80045e0:	737b      	strb	r3, [r7, #13]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold10),8);	// send back for menu vars ok
 80045e2:	7b7b      	ldrb	r3, [r7, #13]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4a46      	ldr	r2, [pc, #280]	; (8004700 <menu3_fill+0x14c>)
 80045e8:	4413      	add	r3, r2
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	4b45      	ldr	r3, [pc, #276]	; (8004704 <menu3_fill+0x150>)
 80045ee:	6810      	ldr	r0, [r2, #0]
 80045f0:	6851      	ldr	r1, [r2, #4]
 80045f2:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 80045f4:	4a44      	ldr	r2, [pc, #272]	; (8004708 <menu3_fill+0x154>)
 80045f6:	1d3b      	adds	r3, r7, #4
 80045f8:	6812      	ldr	r2, [r2, #0]
 80045fa:	4611      	mov	r1, r2
 80045fc:	8019      	strh	r1, [r3, #0]
 80045fe:	3302      	adds	r3, #2
 8004600:	0c12      	lsrs	r2, r2, #16
 8004602:	701a      	strb	r2, [r3, #0]
				 memcpy(temp_char,menu_index_list+((enc_up*2)),2);   // copy char to char,ok
 8004604:	89fb      	ldrh	r3, [r7, #14]
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	461a      	mov	r2, r3
 800460a:	4b40      	ldr	r3, [pc, #256]	; (800470c <menu3_fill+0x158>)
 800460c:	4413      	add	r3, r2
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b29b      	uxth	r3, r3
 8004612:	80bb      	strh	r3, [r7, #4]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8004614:	1d3b      	adds	r3, r7, #4
 8004616:	4618      	mov	r0, r3
 8004618:	f008 f8f6 	bl	800c808 <atoi>
 800461c:	4603      	mov	r3, r0
 800461e:	b2da      	uxtb	r2, r3
 8004620:	4b3b      	ldr	r3, [pc, #236]	; (8004710 <menu3_fill+0x15c>)
 8004622:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8004624:	4b3a      	ldr	r3, [pc, #232]	; (8004710 <menu3_fill+0x15c>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	4619      	mov	r1, r3
 800462a:	4836      	ldr	r0, [pc, #216]	; (8004704 <menu3_fill+0x150>)
 800462c:	f7fc fab4 	bl	8000b98 <menu_vars>
 8004630:	4603      	mov	r3, r0
 8004632:	4a38      	ldr	r2, [pc, #224]	; (8004714 <menu3_fill+0x160>)
 8004634:	6013      	str	r3, [r2, #0]

			lcd_out3=*menu_vars_var;
 8004636:	4b37      	ldr	r3, [pc, #220]	; (8004714 <menu3_fill+0x160>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	b29a      	uxth	r2, r3
 800463e:	4b36      	ldr	r3, [pc, #216]	; (8004718 <menu3_fill+0x164>)
 8004640:	801a      	strh	r2, [r3, #0]

		if (enc_out1==enc_up) 	lcd_temp=lcd_out3;
 8004642:	4b36      	ldr	r3, [pc, #216]	; (800471c <menu3_fill+0x168>)
 8004644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004648:	461a      	mov	r2, r3
 800464a:	89fb      	ldrh	r3, [r7, #14]
 800464c:	429a      	cmp	r2, r3
 800464e:	d104      	bne.n	800465a <menu3_fill+0xa6>
 8004650:	4b31      	ldr	r3, [pc, #196]	; (8004718 <menu3_fill+0x164>)
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	4b32      	ldr	r3, [pc, #200]	; (8004720 <menu3_fill+0x16c>)
 8004658:	701a      	strb	r2, [r3, #0]

		div_limit=lcd_out3;
 800465a:	4b2f      	ldr	r3, [pc, #188]	; (8004718 <menu3_fill+0x164>)
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	b2da      	uxtb	r2, r3
 8004660:	4b30      	ldr	r3, [pc, #192]	; (8004724 <menu3_fill+0x170>)
 8004662:	701a      	strb	r2, [r3, #0]
			if (div_limit>9) div_limit=9;
 8004664:	4b2f      	ldr	r3, [pc, #188]	; (8004724 <menu3_fill+0x170>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b09      	cmp	r3, #9
 800466a:	d902      	bls.n	8004672 <menu3_fill+0xbe>
 800466c:	4b2d      	ldr	r3, [pc, #180]	; (8004724 <menu3_fill+0x170>)
 800466e:	2209      	movs	r2, #9
 8004670:	701a      	strb	r2, [r3, #0]

		/*    if (lcd_out3>10)							div_limit= lcd_out3>>2;
				if (lcd_out3>40)							div_limit= lcd_out3>>5;*/


				uint16_t crap8=menu_title_lut[enc_up];
 8004672:	89fb      	ldrh	r3, [r7, #14]
 8004674:	4a21      	ldr	r2, [pc, #132]	; (80046fc <menu3_fill+0x148>)
 8004676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800467a:	817b      	strh	r3, [r7, #10]

				default_menu3[crap8]=div_limit+48;
 800467c:	4b29      	ldr	r3, [pc, #164]	; (8004724 <menu3_fill+0x170>)
 800467e:	781a      	ldrb	r2, [r3, #0]
 8004680:	897b      	ldrh	r3, [r7, #10]
 8004682:	3230      	adds	r2, #48	; 0x30
 8004684:	b2d1      	uxtb	r1, r2
 8004686:	4a28      	ldr	r2, [pc, #160]	; (8004728 <menu3_fill+0x174>)
 8004688:	54d1      	strb	r1, [r2, r3]
				if (menu_vars_ref==53)  default_menu3[crap8]=lcd_out3;   // keep in char , ok
 800468a:	4b28      	ldr	r3, [pc, #160]	; (800472c <menu3_fill+0x178>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b35      	cmp	r3, #53	; 0x35
 8004690:	d105      	bne.n	800469e <menu3_fill+0xea>
 8004692:	4b21      	ldr	r3, [pc, #132]	; (8004718 <menu3_fill+0x164>)
 8004694:	881a      	ldrh	r2, [r3, #0]
 8004696:	897b      	ldrh	r3, [r7, #10]
 8004698:	b2d1      	uxtb	r1, r2
 800469a:	4a23      	ldr	r2, [pc, #140]	; (8004728 <menu3_fill+0x174>)
 800469c:	54d1      	strb	r1, [r2, r3]

				if ((menu_vars_ref==24) | (menu_vars_ref==25))  default_menu3[crap8]=major_notes[lcd_out3&31];
 800469e:	4b23      	ldr	r3, [pc, #140]	; (800472c <menu3_fill+0x178>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b18      	cmp	r3, #24
 80046a4:	bf0c      	ite	eq
 80046a6:	2301      	moveq	r3, #1
 80046a8:	2300      	movne	r3, #0
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	4b1f      	ldr	r3, [pc, #124]	; (800472c <menu3_fill+0x178>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b19      	cmp	r3, #25
 80046b2:	bf0c      	ite	eq
 80046b4:	2301      	moveq	r3, #1
 80046b6:	2300      	movne	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	4313      	orrs	r3, r2
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <menu3_fill+0x120>
 80046c2:	4b15      	ldr	r3, [pc, #84]	; (8004718 <menu3_fill+0x164>)
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	f003 021f 	and.w	r2, r3, #31
 80046ca:	897b      	ldrh	r3, [r7, #10]
 80046cc:	4918      	ldr	r1, [pc, #96]	; (8004730 <menu3_fill+0x17c>)
 80046ce:	5c89      	ldrb	r1, [r1, r2]
 80046d0:	4a15      	ldr	r2, [pc, #84]	; (8004728 <menu3_fill+0x174>)
 80046d2:	54d1      	strb	r1, [r2, r3]
				disp_up_counter++;
 80046d4:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <menu3_fill+0x140>)
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	3301      	adds	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <menu3_fill+0x140>)
 80046de:	801a      	strh	r2, [r3, #0]
				disp_up_counter=disp_up_counter&255;
 80046e0:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <menu3_fill+0x140>)
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	4b02      	ldr	r3, [pc, #8]	; (80046f4 <menu3_fill+0x140>)
 80046ea:	801a      	strh	r2, [r3, #0]

    }
 80046ec:	bf00      	nop
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	2000f998 	.word	0x2000f998
 80046f8:	2000d151 	.word	0x2000d151
 80046fc:	2000d154 	.word	0x2000d154
 8004700:	20000230 	.word	0x20000230
 8004704:	2000d758 	.word	0x2000d758
 8004708:	0800cf8c 	.word	0x0800cf8c
 800470c:	2000d554 	.word	0x2000d554
 8004710:	2000d760 	.word	0x2000d760
 8004714:	2000d754 	.word	0x2000d754
 8004718:	2000bbb4 	.word	0x2000bbb4
 800471c:	20000220 	.word	0x20000220
 8004720:	2000d766 	.word	0x2000d766
 8004724:	2000f792 	.word	0x2000f792
 8004728:	200112d0 	.word	0x200112d0
 800472c:	2000f791 	.word	0x2000f791
 8004730:	0800d1d0 	.word	0x0800d1d0

08004734 <sampler_ram_clear_test>:
	//   Everything  with  managing sample data

	uint8_t  sampler_ram_clear_test(uint16_t sample_number){    // returns 15   if location is clear    or ok , else  0  , sample number is  0-511 (slow version)
 8004734:	b580      	push	{r7, lr}
 8004736:	b08c      	sub	sp, #48	; 0x30
 8004738:	af02      	add	r7, sp, #8
 800473a:	4603      	mov	r3, r0
 800473c:	80fb      	strh	r3, [r7, #6]



	//  HAL_SPI_Init(&hspi1); // write to register hspi2
	if (sample_number>511) return 0;
 800473e:	88fb      	ldrh	r3, [r7, #6]
 8004740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004744:	d301      	bcc.n	800474a <sampler_ram_clear_test+0x16>
 8004746:	2300      	movs	r3, #0
 8004748:	e044      	b.n	80047d4 <sampler_ram_clear_test+0xa0>
	MX_SPI1_Init();
 800474a:	f000 ff5d 	bl	8005608 <MX_SPI1_Init>

	uint8_t spi_test[4];
	uint8_t test_counter=0;
 800474e:	2300      	movs	r3, #0
 8004750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t test_return[24]={0};
 8004754:	2300      	movs	r3, #0
 8004756:	60bb      	str	r3, [r7, #8]
 8004758:	f107 030c 	add.w	r3, r7, #12
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	605a      	str	r2, [r3, #4]
 8004762:	609a      	str	r2, [r3, #8]
 8004764:	60da      	str	r2, [r3, #12]
 8004766:	611a      	str	r2, [r3, #16]

	test_return[0]=0x03; //read page 1
 8004768:	2303      	movs	r3, #3
 800476a:	723b      	strb	r3, [r7, #8]
	test_return[1]=sample_number>>1; //24bit address msb
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	085b      	lsrs	r3, r3, #1
 8004770:	b29b      	uxth	r3, r3
 8004772:	b2db      	uxtb	r3, r3
 8004774:	727b      	strb	r3, [r7, #9]
	test_return[2]=(sample_number&1)<<7; //24bit address
 8004776:	88fb      	ldrh	r3, [r7, #6]
 8004778:	01db      	lsls	r3, r3, #7
 800477a:	b2db      	uxtb	r3, r3
 800477c:	72bb      	strb	r3, [r7, #10]
	test_return[3]=0; //24bit address lsb
 800477e:	2300      	movs	r3, #0
 8004780:	72fb      	strb	r3, [r7, #11]
	////	test_return[2]=1; //
	//	test_return[3]=0;



	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8004782:	2200      	movs	r2, #0
 8004784:	2110      	movs	r1, #16
 8004786:	4815      	ldr	r0, [pc, #84]	; (80047dc <sampler_ram_clear_test+0xa8>)
 8004788:	f003 fec6 	bl	8008518 <HAL_GPIO_WritePin>
	//HAL_SPI_ (&hspi1,test_return, 20, 1000);   // works fine
	HAL_SPI_TransmitReceive (&hspi1, test_return,test_return,  24, 100); // request data
 800478c:	f107 0208 	add.w	r2, r7, #8
 8004790:	f107 0108 	add.w	r1, r7, #8
 8004794:	2364      	movs	r3, #100	; 0x64
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	2318      	movs	r3, #24
 800479a:	4811      	ldr	r0, [pc, #68]	; (80047e0 <sampler_ram_clear_test+0xac>)
 800479c:	f005 fccb 	bl	800a136 <HAL_SPI_TransmitReceive>


	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // high end
 80047a0:	2201      	movs	r2, #1
 80047a2:	2110      	movs	r1, #16
 80047a4:	480d      	ldr	r0, [pc, #52]	; (80047dc <sampler_ram_clear_test+0xa8>)
 80047a6:	f003 feb7 	bl	8008518 <HAL_GPIO_WritePin>

	//HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
	for (test_counter=0;test_counter<20;test_counter++){
 80047aa:	2300      	movs	r3, #0
 80047ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80047b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047b4:	2b13      	cmp	r3, #19
 80047b6:	d80c      	bhi.n	80047d2 <sampler_ram_clear_test+0x9e>
	    if (test_return[test_counter+20]!=255) return 0;  else return 15;
 80047b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047bc:	3314      	adds	r3, #20
 80047be:	3328      	adds	r3, #40	; 0x28
 80047c0:	443b      	add	r3, r7
 80047c2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80047c6:	2bff      	cmp	r3, #255	; 0xff
 80047c8:	d001      	beq.n	80047ce <sampler_ram_clear_test+0x9a>
 80047ca:	2300      	movs	r3, #0
 80047cc:	e002      	b.n	80047d4 <sampler_ram_clear_test+0xa0>
 80047ce:	230f      	movs	r3, #15
 80047d0:	e000      	b.n	80047d4 <sampler_ram_clear_test+0xa0>

	}
	return 15;
 80047d2:	230f      	movs	r3, #15
    }
 80047d4:	4618      	mov	r0, r3
 80047d6:	3728      	adds	r7, #40	; 0x28
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40020000 	.word	0x40020000
 80047e0:	200117cc 	.word	0x200117cc

080047e4 <byte_swap>:

	//------------------------------------ this is needed for now
	    void byte_swap(uint8_t* to_swap, uint32_t  array_size){   // sample byte  swap
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
	    uint32_t counter;
	    uint32_t swap_size=array_size*2; // in bytes !
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	613b      	str	r3, [r7, #16]


	    for (counter=0;counter<swap_size;counter=counter+2){
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	e01c      	b.n	8004834 <byte_swap+0x50>


		uint8_t* byte1=&to_swap[counter>>1];
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	085b      	lsrs	r3, r3, #1
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	4413      	add	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]
		uint8_t* byte2=&to_swap[(counter>>1)+1];
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	085b      	lsrs	r3, r3, #1
 8004808:	3301      	adds	r3, #1
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	4413      	add	r3, r2
 800480e:	60bb      	str	r3, [r7, #8]
		to_swap[counter>>1]=*byte2;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	085b      	lsrs	r3, r3, #1
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	4413      	add	r3, r2
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	7812      	ldrb	r2, [r2, #0]
 800481c:	701a      	strb	r2, [r3, #0]
		to_swap[(counter>>1)+1]=*byte1;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	085b      	lsrs	r3, r3, #1
 8004822:	3301      	adds	r3, #1
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	4413      	add	r3, r2
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	7812      	ldrb	r2, [r2, #0]
 800482c:	701a      	strb	r2, [r3, #0]
	    for (counter=0;counter<swap_size;counter=counter+2){
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	3302      	adds	r3, #2
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	429a      	cmp	r2, r3
 800483a:	d3de      	bcc.n	80047fa <byte_swap+0x16>

//		to_swap[counter>>1]=((*byte2)<<8)+(*byte1);

	    }

	}
 800483c:	bf00      	nop
 800483e:	bf00      	nop
 8004840:	371c      	adds	r7, #28
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
	...

0800484c <sample_save>:


	    void sample_save(uint16_t sample_number, uint8_t* sample_data,  uint16_t  sample_size ){				// writes data to flash (slow version )
 800484c:	b580      	push	{r7, lr}
 800484e:	b0c8      	sub	sp, #288	; 0x120
 8004850:	af00      	add	r7, sp, #0
 8004852:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004856:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800485a:	6019      	str	r1, [r3, #0]
 800485c:	4611      	mov	r1, r2
 800485e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004862:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004866:	4602      	mov	r2, r0
 8004868:	801a      	strh	r2, [r3, #0]
 800486a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800486e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004872:	460a      	mov	r2, r1
 8004874:	801a      	strh	r2, [r3, #0]


		if (sampler_ram_clear_test(sample_number)==0) return;    // quit if not empty
 8004876:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800487a:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff ff57 	bl	8004734 <sampler_ram_clear_test>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 8103 	beq.w	8004a94 <sample_save+0x248>
		if (sample_number>511) return ;
 800488e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004892:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800489c:	f080 80fc 	bcs.w	8004a98 <sample_save+0x24c>

		uint8_t spi_test[270]={0};
 80048a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	3304      	adds	r3, #4
 80048ae:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80048b2:	2100      	movs	r1, #0
 80048b4:	4618      	mov	r0, r3
 80048b6:	f007 ffe3 	bl	800c880 <memset>
		//uint16_t size_count=sample_size;

			spi_test[0]=0x03; //read page 1
 80048ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80048c2:	2203      	movs	r2, #3
 80048c4:	701a      	strb	r2, [r3, #0]
			spi_test[1]=sample_number>>1; //24bit address msb
 80048c6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048ca:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80048de:	705a      	strb	r2, [r3, #1]
			spi_test[2]=(sample_number&1)<<7; //24bit address
 80048e0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048e4:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	01db      	lsls	r3, r3, #7
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80048f6:	709a      	strb	r2, [r3, #2]
			spi_test[3]=0; //24bit address lsb
 80048f8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004900:	2200      	movs	r2, #0
 8004902:	70da      	strb	r2, [r3, #3]





			uint16_t write_counter=0;    // write start location
 8004904:	2300      	movs	r3, #0
 8004906:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
			uint8_t second_byte=(sample_number&1)<<7;
 800490a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800490e:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	01db      	lsls	r3, r3, #7
 8004916:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
			uint8_t max_count= sample_size>>8;
 800491a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800491e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	0a1b      	lsrs	r3, r3, #8
 8004926:	b29b      	uxth	r3, r3
 8004928:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			if (max_count>127) max_count=127;
 800492c:	f997 311d 	ldrsb.w	r3, [r7, #285]	; 0x11d
 8004930:	2b00      	cmp	r3, #0
 8004932:	da02      	bge.n	800493a <sample_save+0xee>
 8004934:	237f      	movs	r3, #127	; 0x7f
 8004936:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d

					spi_test[0]=0x06; //enable write
 800493a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800493e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004942:	2206      	movs	r2, #6
 8004944:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8004946:	2200      	movs	r2, #0
 8004948:	2110      	movs	r1, #16
 800494a:	4856      	ldr	r0, [pc, #344]	; (8004aa4 <sample_save+0x258>)
 800494c:	f003 fde4 	bl	8008518 <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 8004950:	f107 010c 	add.w	r1, r7, #12
 8004954:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004958:	2201      	movs	r2, #1
 800495a:	4853      	ldr	r0, [pc, #332]	; (8004aa8 <sample_save+0x25c>)
 800495c:	f005 faaf 	bl	8009ebe <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8004960:	2201      	movs	r2, #1
 8004962:	2110      	movs	r1, #16
 8004964:	484f      	ldr	r0, [pc, #316]	; (8004aa4 <sample_save+0x258>)
 8004966:	f003 fdd7 	bl	8008518 <HAL_GPIO_WritePin>
					HAL_Delay(5);
 800496a:	2005      	movs	r0, #5
 800496c:	f001 feca 	bl	8006704 <HAL_Delay>


					for (write_counter=0;write_counter<=max_count;write_counter++)  {
 8004970:	2300      	movs	r3, #0
 8004972:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 8004976:	e06a      	b.n	8004a4e <sample_save+0x202>

					    spi_test[0]=0x02; //write
 8004978:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800497c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004980:	2202      	movs	r2, #2
 8004982:	701a      	strb	r2, [r3, #0]
					    spi_test[1]=sample_number>>1; //0-256 this stays
 8004984:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004988:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	085b      	lsrs	r3, r3, #1
 8004990:	b29b      	uxth	r3, r3
 8004992:	b2da      	uxtb	r2, r3
 8004994:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004998:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800499c:	705a      	strb	r2, [r3, #1]
					    spi_test[2]=write_counter+second_byte; //  0->127 or 128->255
 800499e:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80049a8:	4413      	add	r3, r2
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80049b4:	709a      	strb	r2, [r3, #2]
					    spi_test[3]=0; //24bit address lsb
 80049b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80049be:	2200      	movs	r2, #0
 80049c0:	70da      	strb	r2, [r3, #3]



				//	    memcpy  (spi_test+4 ,sample_data+(write_counter*256),  256);   // copy data to write buffer  sseems to be rolling over at 256

					    memcpy  (spi_test+4 ,RAM+(write_counter*128), (uint16_t) 256);
 80049c2:	f107 030c 	add.w	r3, r7, #12
 80049c6:	3304      	adds	r3, #4
 80049c8:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 80049cc:	0212      	lsls	r2, r2, #8
 80049ce:	4937      	ldr	r1, [pc, #220]	; (8004aac <sample_save+0x260>)
 80049d0:	4411      	add	r1, r2
 80049d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049d6:	4618      	mov	r0, r3
 80049d8:	f007 ff44 	bl	800c864 <memcpy>

					    spi_test[0]=0x06; //enable write each time
 80049dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80049e4:	2206      	movs	r2, #6
 80049e6:	701a      	strb	r2, [r3, #0]
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80049e8:	2200      	movs	r2, #0
 80049ea:	2110      	movs	r1, #16
 80049ec:	482d      	ldr	r0, [pc, #180]	; (8004aa4 <sample_save+0x258>)
 80049ee:	f003 fd93 	bl	8008518 <HAL_GPIO_WritePin>
					    HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 80049f2:	f107 010c 	add.w	r1, r7, #12
 80049f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049fa:	2201      	movs	r2, #1
 80049fc:	482a      	ldr	r0, [pc, #168]	; (8004aa8 <sample_save+0x25c>)
 80049fe:	f005 fa5e 	bl	8009ebe <HAL_SPI_Transmit>
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8004a02:	2201      	movs	r2, #1
 8004a04:	2110      	movs	r1, #16
 8004a06:	4827      	ldr	r0, [pc, #156]	; (8004aa4 <sample_save+0x258>)
 8004a08:	f003 fd86 	bl	8008518 <HAL_GPIO_WritePin>

					    spi_test[0]=0x02; //write
 8004a0c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a10:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a14:	2202      	movs	r2, #2
 8004a16:	701a      	strb	r2, [r3, #0]
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);   // low
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2110      	movs	r1, #16
 8004a1c:	4821      	ldr	r0, [pc, #132]	; (8004aa4 <sample_save+0x258>)
 8004a1e:	f003 fd7b 	bl	8008518 <HAL_GPIO_WritePin>
					    HAL_SPI_Transmit(&hspi1, spi_test ,260, 1000);  //address,then data
 8004a22:	f107 010c 	add.w	r1, r7, #12
 8004a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a2a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a2e:	481e      	ldr	r0, [pc, #120]	; (8004aa8 <sample_save+0x25c>)
 8004a30:	f005 fa45 	bl	8009ebe <HAL_SPI_Transmit>
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // high end
 8004a34:	2201      	movs	r2, #1
 8004a36:	2110      	movs	r1, #16
 8004a38:	481a      	ldr	r0, [pc, #104]	; (8004aa4 <sample_save+0x258>)
 8004a3a:	f003 fd6d 	bl	8008518 <HAL_GPIO_WritePin>
					    HAL_Delay(10);
 8004a3e:	200a      	movs	r0, #10
 8004a40:	f001 fe60 	bl	8006704 <HAL_Delay>
					for (write_counter=0;write_counter<=max_count;write_counter++)  {
 8004a44:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8004a48:	3301      	adds	r3, #1
 8004a4a:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 8004a4e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d98d      	bls.n	8004978 <sample_save+0x12c>


					}


					spi_test[0]=0x04; //disable write
 8004a5c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a60:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a64:	2204      	movs	r2, #4
 8004a66:	701a      	strb	r2, [r3, #0]
										    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // low
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2110      	movs	r1, #16
 8004a6c:	480d      	ldr	r0, [pc, #52]	; (8004aa4 <sample_save+0x258>)
 8004a6e:	f003 fd53 	bl	8008518 <HAL_GPIO_WritePin>
										    HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 8004a72:	f107 010c 	add.w	r1, r7, #12
 8004a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	480a      	ldr	r0, [pc, #40]	; (8004aa8 <sample_save+0x25c>)
 8004a7e:	f005 fa1e 	bl	8009ebe <HAL_SPI_Transmit>
										    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // high end
 8004a82:	2201      	movs	r2, #1
 8004a84:	2110      	movs	r1, #16
 8004a86:	4807      	ldr	r0, [pc, #28]	; (8004aa4 <sample_save+0x258>)
 8004a88:	f003 fd46 	bl	8008518 <HAL_GPIO_WritePin>
										    HAL_Delay(20);  //should be enough in theory
 8004a8c:	2014      	movs	r0, #20
 8004a8e:	f001 fe39 	bl	8006704 <HAL_Delay>
 8004a92:	e002      	b.n	8004a9a <sample_save+0x24e>
		if (sampler_ram_clear_test(sample_number)==0) return;    // quit if not empty
 8004a94:	bf00      	nop
 8004a96:	e000      	b.n	8004a9a <sample_save+0x24e>
		if (sample_number>511) return ;
 8004a98:	bf00      	nop




	    }
 8004a9a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40020000 	.word	0x40020000
 8004aa8:	200117cc 	.word	0x200117cc
 8004aac:	200003b0 	.word	0x200003b0

08004ab0 <sampler_1k_load>:




	void  sampler_1k_load(uint32_t load_address){   // 24 bit load address , 1kbyte   in 512 byte  chunks
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004abc:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004ac0:	6018      	str	r0, [r3, #0]

	    uint8_t send_spi2[1030]={0} ;
 8004ac2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004ac6:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	f240 4202 	movw	r2, #1026	; 0x402
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f007 fed2 	bl	800c880 <memset>

	    load_address=load_address& 16777215; // 24 bit
 8004adc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004ae0:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004ae4:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8004ae8:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8004aec:	6812      	ldr	r2, [r2, #0]
 8004aee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004af2:	601a      	str	r2, [r3, #0]

	    send_spi2[0]=0x03; //read page 1
 8004af4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004af8:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004afc:	2203      	movs	r2, #3
 8004afe:	701a      	strb	r2, [r3, #0]
	    send_spi2[1]=load_address>>16;			// last patch for now
 8004b00:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004b04:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	0c1b      	lsrs	r3, r3, #16
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004b12:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004b16:	705a      	strb	r2, [r3, #1]
	    send_spi2[2]=(load_address>>8)&255;    //
 8004b18:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004b1c:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	0a1b      	lsrs	r3, r3, #8
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004b2a:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004b2e:	709a      	strb	r2, [r3, #2]
	    send_spi2[3]=load_address&255;     // can start anywhere*/    // usally 0 padded when written
 8004b30:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004b34:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004b40:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004b44:	70da      	strb	r2, [r3, #3]

	    current_spi[0]=send_spi2[0];   // to track  later
 8004b46:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004b4a:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004b4e:	781a      	ldrb	r2, [r3, #0]
 8004b50:	4b32      	ldr	r3, [pc, #200]	; (8004c1c <sampler_1k_load+0x16c>)
 8004b52:	701a      	strb	r2, [r3, #0]
	    current_spi[1]=send_spi2[1];
 8004b54:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004b58:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004b5c:	785a      	ldrb	r2, [r3, #1]
 8004b5e:	4b2f      	ldr	r3, [pc, #188]	; (8004c1c <sampler_1k_load+0x16c>)
 8004b60:	705a      	strb	r2, [r3, #1]
	    current_spi[2]=send_spi2[2];
 8004b62:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004b66:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004b6a:	789a      	ldrb	r2, [r3, #2]
 8004b6c:	4b2b      	ldr	r3, [pc, #172]	; (8004c1c <sampler_1k_load+0x16c>)
 8004b6e:	709a      	strb	r2, [r3, #2]
	    current_spi[3]=send_spi2[3];
 8004b70:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004b74:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004b78:	78da      	ldrb	r2, [r3, #3]
 8004b7a:	4b28      	ldr	r3, [pc, #160]	; (8004c1c <sampler_1k_load+0x16c>)
 8004b7c:	70da      	strb	r2, [r3, #3]

	    if ((flash_flag==3)&&(flash_bank_read==0))  {   memcpy( &flash_read_block, flash_read_block2+516,512); flash_flag=4; }  // second half
 8004b7e:	4b28      	ldr	r3, [pc, #160]	; (8004c20 <sampler_1k_load+0x170>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d10d      	bne.n	8004ba4 <sampler_1k_load+0xf4>
 8004b88:	4b26      	ldr	r3, [pc, #152]	; (8004c24 <sampler_1k_load+0x174>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d109      	bne.n	8004ba4 <sampler_1k_load+0xf4>
 8004b90:	4b25      	ldr	r3, [pc, #148]	; (8004c28 <sampler_1k_load+0x178>)
 8004b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b96:	4619      	mov	r1, r3
 8004b98:	4824      	ldr	r0, [pc, #144]	; (8004c2c <sampler_1k_load+0x17c>)
 8004b9a:	f007 fe63 	bl	800c864 <memcpy>
 8004b9e:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <sampler_1k_load+0x170>)
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	701a      	strb	r2, [r3, #0]
	    if ((flash_flag==2)&&(flash_bank_read==1))   {   memcpy( &flash_read_block, flash_read_block2+4,512);   flash_flag=3;           }  // second half
 8004ba4:	4b1e      	ldr	r3, [pc, #120]	; (8004c20 <sampler_1k_load+0x170>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d10d      	bne.n	8004bca <sampler_1k_load+0x11a>
 8004bae:	4b1d      	ldr	r3, [pc, #116]	; (8004c24 <sampler_1k_load+0x174>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d109      	bne.n	8004bca <sampler_1k_load+0x11a>
 8004bb6:	4b1e      	ldr	r3, [pc, #120]	; (8004c30 <sampler_1k_load+0x180>)
 8004bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	481b      	ldr	r0, [pc, #108]	; (8004c2c <sampler_1k_load+0x17c>)
 8004bc0:	f007 fe50 	bl	800c864 <memcpy>
 8004bc4:	4b16      	ldr	r3, [pc, #88]	; (8004c20 <sampler_1k_load+0x170>)
 8004bc6:	2203      	movs	r2, #3
 8004bc8:	701a      	strb	r2, [r3, #0]
	    flash_bank_read=!flash_bank_read;
 8004bca:	4b16      	ldr	r3, [pc, #88]	; (8004c24 <sampler_1k_load+0x174>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	bf0c      	ite	eq
 8004bd2:	2301      	moveq	r3, #1
 8004bd4:	2300      	movne	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <sampler_1k_load+0x174>)
 8004bdc:	701a      	strb	r2, [r3, #0]

		    if ((flash_flag==4)&&  (flash_bank_read==1) )    {
 8004bde:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <sampler_1k_load+0x170>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d113      	bne.n	8004c10 <sampler_1k_load+0x160>
 8004be8:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <sampler_1k_load+0x174>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d10f      	bne.n	8004c10 <sampler_1k_load+0x160>

			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);HAL_SPI_TransmitReceive_DMA(&hspi1, send_spi2,flash_read_block2,1028);
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	2110      	movs	r1, #16
 8004bf4:	480f      	ldr	r0, [pc, #60]	; (8004c34 <sampler_1k_load+0x184>)
 8004bf6:	f003 fc8f 	bl	8008518 <HAL_GPIO_WritePin>
 8004bfa:	f107 0108 	add.w	r1, r7, #8
 8004bfe:	f240 4304 	movw	r3, #1028	; 0x404
 8004c02:	4a0d      	ldr	r2, [pc, #52]	; (8004c38 <sampler_1k_load+0x188>)
 8004c04:	480d      	ldr	r0, [pc, #52]	; (8004c3c <sampler_1k_load+0x18c>)
 8004c06:	f005 fcef 	bl	800a5e8 <HAL_SPI_TransmitReceive_DMA>
		    //HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  //  terrible internet advice , put cs low before not after  !
		    flash_flag=0;  }
 8004c0a:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <sampler_1k_load+0x170>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]

	}
 8004c10:	bf00      	nop
 8004c12:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	2001124c 	.word	0x2001124c
 8004c20:	2000022c 	.word	0x2000022c
 8004c24:	20011246 	.word	0x20011246
 8004c28:	20011044 	.word	0x20011044
 8004c2c:	20010c2c 	.word	0x20010c2c
 8004c30:	20010e44 	.word	0x20010e44
 8004c34:	40020000 	.word	0x40020000
 8004c38:	20010e40 	.word	0x20010e40
 8004c3c:	200117cc 	.word	0x200117cc

08004c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c42:	b0a5      	sub	sp, #148	; 0x94
 8004c44:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004c46:	f001 fceb 	bl	8006620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004c4a:	f000 fbaf 	bl	80053ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004c4e:	f000 ff57 	bl	8005b00 <MX_GPIO_Init>
  MX_DMA_Init();
 8004c52:	f000 ff0f 	bl	8005a74 <MX_DMA_Init>
  MX_ADC1_Init();
 8004c56:	f000 fc13 	bl	8005480 <MX_ADC1_Init>
  MX_SPI2_Init();
 8004c5a:	f000 fd0b 	bl	8005674 <MX_SPI2_Init>
  MX_TIM3_Init();
 8004c5e:	f000 fd93 	bl	8005788 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004c62:	f000 fe13 	bl	800588c <MX_TIM4_Init>
  MX_I2C2_Init();
 8004c66:	f000 fca1 	bl	80055ac <MX_I2C2_Init>
  MX_SPI1_Init();
 8004c6a:	f000 fccd 	bl	8005608 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004c6e:	f000 fead 	bl	80059cc <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8004c72:	f000 fed5 	bl	8005a20 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8004c76:	f000 fe5f 	bl	8005938 <MX_TIM10_Init>
  MX_TIM2_Init();
 8004c7a:	f000 fd31 	bl	80056e0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

main_initial();   // initial setup
 8004c7e:	f7fc fdbb 	bl	80017f8 <main_initial>
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 8004c82:	4baf      	ldr	r3, [pc, #700]	; (8004f40 <main+0x300>)
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	3301      	adds	r3, #1
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	4bad      	ldr	r3, [pc, #692]	; (8004f40 <main+0x300>)
 8004c8c:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 8004c8e:	4bad      	ldr	r3, [pc, #692]	; (8004f44 <main+0x304>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3301      	adds	r3, #1
 8004c94:	4aab      	ldr	r2, [pc, #684]	; (8004f44 <main+0x304>)
 8004c96:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing

			  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 8004c98:	4baa      	ldr	r3, [pc, #680]	; (8004f44 <main+0x304>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	2b06      	cmp	r3, #6
 8004ca2:	d101      	bne.n	8004ca8 <main+0x68>
 8004ca4:	f7fc fcf0 	bl	8001688 <analoginputloopb>


		if (loop_counter2==4024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 8004ca8:	4ba6      	ldr	r3, [pc, #664]	; (8004f44 <main+0x304>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f640 72b8 	movw	r2, #4024	; 0xfb8
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	f040 8187 	bne.w	8004fc4 <main+0x384>

		    if (mem_count>510) mem_count=0; else mem_count++;
 8004cb6:	4ba4      	ldr	r3, [pc, #656]	; (8004f48 <main+0x308>)
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004cbe:	d903      	bls.n	8004cc8 <main+0x88>
 8004cc0:	4ba1      	ldr	r3, [pc, #644]	; (8004f48 <main+0x308>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	801a      	strh	r2, [r3, #0]
 8004cc6:	e005      	b.n	8004cd4 <main+0x94>
 8004cc8:	4b9f      	ldr	r3, [pc, #636]	; (8004f48 <main+0x308>)
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	4b9d      	ldr	r3, [pc, #628]	; (8004f48 <main+0x308>)
 8004cd2:	801a      	strh	r2, [r3, #0]
		    if (mem_count>460) mem_count=461;  // this might feedback
 8004cd4:	4b9c      	ldr	r3, [pc, #624]	; (8004f48 <main+0x308>)
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8004cdc:	d903      	bls.n	8004ce6 <main+0xa6>
 8004cde:	4b9a      	ldr	r3, [pc, #616]	; (8004f48 <main+0x308>)
 8004ce0:	f240 12cd 	movw	r2, #461	; 0x1cd
 8004ce4:	801a      	strh	r2, [r3, #0]
		   // write to first this was moved for no logical reason ?

			  patch_target_parse(); //
 8004ce6:	f7fc fac9 	bl	800127c <patch_target_parse>
			  uint16_t mem_count2=0;	// read values from stored
 8004cea:	2300      	movs	r3, #0
 8004cec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76


			memcpy(potSource,&seq,46); // about 35
 8004cf0:	4a96      	ldr	r2, [pc, #600]	; (8004f4c <main+0x30c>)
 8004cf2:	4b97      	ldr	r3, [pc, #604]	; (8004f50 <main+0x310>)
 8004cf4:	4614      	mov	r4, r2
 8004cf6:	461d      	mov	r5, r3
 8004cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004d04:	c407      	stmia	r4!, {r0, r1, r2}
 8004d06:	8023      	strh	r3, [r4, #0]

			for(i=0;i<10;i++){
 8004d08:	4b92      	ldr	r3, [pc, #584]	; (8004f54 <main+0x314>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	801a      	strh	r2, [r3, #0]
 8004d0e:	e0a2      	b.n	8004e56 <main+0x216>
					memcpy(potSource+156+(i*14),&note[i],14 );  //grab note settings ,112 total , works
 8004d10:	4b90      	ldr	r3, [pc, #576]	; (8004f54 <main+0x314>)
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	4613      	mov	r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	1a9b      	subs	r3, r3, r2
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	339c      	adds	r3, #156	; 0x9c
 8004d20:	4a8a      	ldr	r2, [pc, #552]	; (8004f4c <main+0x30c>)
 8004d22:	1898      	adds	r0, r3, r2
 8004d24:	4b8b      	ldr	r3, [pc, #556]	; (8004f54 <main+0x314>)
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	4a89      	ldr	r2, [pc, #548]	; (8004f58 <main+0x318>)
 8004d34:	4413      	add	r3, r2
 8004d36:	220e      	movs	r2, #14
 8004d38:	4619      	mov	r1, r3
 8004d3a:	f007 fd93 	bl	800c864 <memcpy>

				memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 8004d3e:	4b85      	ldr	r3, [pc, #532]	; (8004f54 <main+0x314>)
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	461a      	mov	r2, r3
 8004d44:	4613      	mov	r3, r2
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	4413      	add	r3, r2
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	332e      	adds	r3, #46	; 0x2e
 8004d4e:	4a7f      	ldr	r2, [pc, #508]	; (8004f4c <main+0x30c>)
 8004d50:	1898      	adds	r0, r3, r2
 8004d52:	4b80      	ldr	r3, [pc, #512]	; (8004f54 <main+0x314>)
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	4613      	mov	r3, r2
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4a7e      	ldr	r2, [pc, #504]	; (8004f5c <main+0x31c>)
 8004d62:	4413      	add	r3, r2
 8004d64:	2206      	movs	r2, #6
 8004d66:	4619      	mov	r1, r3
 8004d68:	f007 fd7c 	bl	800c864 <memcpy>
				memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 8004d6c:	4b79      	ldr	r3, [pc, #484]	; (8004f54 <main+0x314>)
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	336a      	adds	r3, #106	; 0x6a
 8004d7a:	4a74      	ldr	r2, [pc, #464]	; (8004f4c <main+0x30c>)
 8004d7c:	1898      	adds	r0, r3, r2
 8004d7e:	4b75      	ldr	r3, [pc, #468]	; (8004f54 <main+0x314>)
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8004d88:	fb02 f303 	mul.w	r3, r2, r3
 8004d8c:	4a74      	ldr	r2, [pc, #464]	; (8004f60 <main+0x320>)
 8004d8e:	4413      	add	r3, r2
 8004d90:	2205      	movs	r2, #5
 8004d92:	4619      	mov	r1, r3
 8004d94:	f007 fd66 	bl	800c864 <memcpy>
				memcpy(potSource+316+(i*3),&patch[i],3 );
 8004d98:	4b6e      	ldr	r3, [pc, #440]	; (8004f54 <main+0x314>)
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4613      	mov	r3, r2
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004da8:	4a68      	ldr	r2, [pc, #416]	; (8004f4c <main+0x30c>)
 8004daa:	1898      	adds	r0, r3, r2
 8004dac:	4b69      	ldr	r3, [pc, #420]	; (8004f54 <main+0x314>)
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	4a6a      	ldr	r2, [pc, #424]	; (8004f64 <main+0x324>)
 8004dbc:	4413      	add	r3, r2
 8004dbe:	2203      	movs	r2, #3
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	f007 fd4f 	bl	800c864 <memcpy>
				memcpy(potSource+346+(i*3),&patch[i+10],3 );
 8004dc6:	4b63      	ldr	r3, [pc, #396]	; (8004f54 <main+0x314>)
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4613      	mov	r3, r2
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 73ad 	add.w	r3, r3, #346	; 0x15a
 8004dd6:	4a5d      	ldr	r2, [pc, #372]	; (8004f4c <main+0x30c>)
 8004dd8:	1898      	adds	r0, r3, r2
 8004dda:	4b5e      	ldr	r3, [pc, #376]	; (8004f54 <main+0x314>)
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	f103 020a 	add.w	r2, r3, #10
 8004de2:	4613      	mov	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	4a5e      	ldr	r2, [pc, #376]	; (8004f64 <main+0x324>)
 8004dec:	4413      	add	r3, r2
 8004dee:	2203      	movs	r2, #3
 8004df0:	4619      	mov	r1, r3
 8004df2:	f007 fd37 	bl	800c864 <memcpy>
				memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 8004df6:	4b57      	ldr	r3, [pc, #348]	; (8004f54 <main+0x314>)
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	4413      	add	r3, r2
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004e08:	4a50      	ldr	r2, [pc, #320]	; (8004f4c <main+0x30c>)
 8004e0a:	1898      	adds	r0, r3, r2
 8004e0c:	4b51      	ldr	r3, [pc, #324]	; (8004f54 <main+0x314>)
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	4613      	mov	r3, r2
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	4413      	add	r3, r2
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	4a53      	ldr	r2, [pc, #332]	; (8004f68 <main+0x328>)
 8004e1c:	4413      	add	r3, r2
 8004e1e:	2206      	movs	r2, #6
 8004e20:	4619      	mov	r1, r3
 8004e22:	f007 fd1f 	bl	800c864 <memcpy>
				memcpy(potSource+436+(i*4),&LFO_square[i],4 );
 8004e26:	4b4b      	ldr	r3, [pc, #300]	; (8004f54 <main+0x314>)
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8004e30:	4a46      	ldr	r2, [pc, #280]	; (8004f4c <main+0x30c>)
 8004e32:	441a      	add	r2, r3
 8004e34:	4b47      	ldr	r3, [pc, #284]	; (8004f54 <main+0x314>)
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	4619      	mov	r1, r3
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	494a      	ldr	r1, [pc, #296]	; (8004f6c <main+0x32c>)
 8004e44:	440b      	add	r3, r1
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6013      	str	r3, [r2, #0]
			for(i=0;i<10;i++){
 8004e4a:	4b42      	ldr	r3, [pc, #264]	; (8004f54 <main+0x314>)
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	4b40      	ldr	r3, [pc, #256]	; (8004f54 <main+0x314>)
 8004e54:	801a      	strh	r2, [r3, #0]
 8004e56:	4b3f      	ldr	r3, [pc, #252]	; (8004f54 <main+0x314>)
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	2b09      	cmp	r3, #9
 8004e5c:	f67f af58 	bls.w	8004d10 <main+0xd0>
			}	// copy vars into potSource

			//HAL_UART_Transmit(&huart1,serial_send,4, 100);  //send serial again

			mem_count2=0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			//	mem_buf=0;
					// mem_verify=0;

					// for patch write start at 2048 for now
			 uint8_t mem_buf_list[50]={0};
 8004e66:	2300      	movs	r3, #0
 8004e68:	603b      	str	r3, [r7, #0]
 8004e6a:	1d3b      	adds	r3, r7, #4
 8004e6c:	222e      	movs	r2, #46	; 0x2e
 8004e6e:	2100      	movs	r1, #0
 8004e70:	4618      	mov	r0, r3
 8004e72:	f007 fd05 	bl	800c880 <memset>
			 uint8_t mem_verify_list[50]={0};
 8004e76:	2300      	movs	r3, #0
 8004e78:	637b      	str	r3, [r7, #52]	; 0x34
 8004e7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e7e:	222e      	movs	r2, #46	; 0x2e
 8004e80:	2100      	movs	r1, #0
 8004e82:	4618      	mov	r0, r3
 8004e84:	f007 fcfc 	bl	800c880 <memset>
			 uint8_t read_counter=0;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			//  --   compare 50 bytes
			 memcpy(&mem_buf_list, potSource+mem_count,50);  // copy 50 from potsource
 8004e8e:	4b2e      	ldr	r3, [pc, #184]	; (8004f48 <main+0x308>)
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	461a      	mov	r2, r3
 8004e94:	4b2d      	ldr	r3, [pc, #180]	; (8004f4c <main+0x30c>)
 8004e96:	4413      	add	r3, r2
 8004e98:	461c      	mov	r4, r3
 8004e9a:	463e      	mov	r6, r7
 8004e9c:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8004ea0:	4635      	mov	r5, r6
 8004ea2:	4623      	mov	r3, r4
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	6859      	ldr	r1, [r3, #4]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004eae:	3410      	adds	r4, #16
 8004eb0:	3610      	adds	r6, #16
 8004eb2:	4564      	cmp	r4, ip
 8004eb4:	d1f4      	bne.n	8004ea0 <main+0x260>
 8004eb6:	4632      	mov	r2, r6
 8004eb8:	4623      	mov	r3, r4
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	8013      	strh	r3, [r2, #0]
			 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 8004ebe:	4b22      	ldr	r3, [pc, #136]	; (8004f48 <main+0x308>)
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	099b      	lsrs	r3, r3, #6
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	019b      	lsls	r3, r3, #6
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	4b1e      	ldr	r3, [pc, #120]	; (8004f48 <main+0x308>)
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	4413      	add	r3, r2
 8004eda:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,mem_verify_list, 50,100);    // reading is quick , 50 bytse
 8004ede:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004ee2:	2364      	movs	r3, #100	; 0x64
 8004ee4:	9302      	str	r3, [sp, #8]
 8004ee6:	2332      	movs	r3, #50	; 0x32
 8004ee8:	9301      	str	r3, [sp, #4]
 8004eea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	21a0      	movs	r1, #160	; 0xa0
 8004ef4:	481e      	ldr	r0, [pc, #120]	; (8004f70 <main+0x330>)
 8004ef6:	f003 fd7f 	bl	80089f8 <HAL_I2C_Mem_Read>
			 for (read_counter=0;read_counter<50;read_counter++){
 8004efa:	2300      	movs	r3, #0
 8004efc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004f00:	e018      	b.n	8004f34 <main+0x2f4>

			     if (mem_verify_list[read_counter]!=mem_buf_list[read_counter])  { break;}  // exit if found difference
 8004f02:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004f06:	3380      	adds	r3, #128	; 0x80
 8004f08:	443b      	add	r3, r7
 8004f0a:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8004f0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004f12:	3380      	adds	r3, #128	; 0x80
 8004f14:	443b      	add	r3, r7
 8004f16:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d12a      	bne.n	8004f74 <main+0x334>
			     mem_count++;
 8004f1e:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <main+0x308>)
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	3301      	adds	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	4b08      	ldr	r3, [pc, #32]	; (8004f48 <main+0x308>)
 8004f28:	801a      	strh	r2, [r3, #0]
			 for (read_counter=0;read_counter<50;read_counter++){
 8004f2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004f2e:	3301      	adds	r3, #1
 8004f30:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004f34:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004f38:	2b31      	cmp	r3, #49	; 0x31
 8004f3a:	d9e2      	bls.n	8004f02 <main+0x2c2>
 8004f3c:	e01b      	b.n	8004f76 <main+0x336>
 8004f3e:	bf00      	nop
 8004f40:	200089be 	.word	0x200089be
 8004f44:	2000b218 	.word	0x2000b218
 8004f48:	2000b216 	.word	0x2000b216
 8004f4c:	20008758 	.word	0x20008758
 8004f50:	2000cdfc 	.word	0x2000cdfc
 8004f54:	200089c2 	.word	0x200089c2
 8004f58:	20000158 	.word	0x20000158
 8004f5c:	2000bfc4 	.word	0x2000bfc4
 8004f60:	2000c370 	.word	0x2000c370
 8004f64:	2000ce2c 	.word	0x2000ce2c
 8004f68:	2000c26c 	.word	0x2000c26c
 8004f6c:	2000c2a8 	.word	0x2000c2a8
 8004f70:	20011778 	.word	0x20011778
			     if (mem_verify_list[read_counter]!=mem_buf_list[read_counter])  { break;}  // exit if found difference
 8004f74:	bf00      	nop

			 }
						 // ----- write changed data , might shift these off by one after a while to stop wear
						 mem_buf=potSource[mem_count];
 8004f76:	4b66      	ldr	r3, [pc, #408]	; (8005110 <main+0x4d0>)
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	4b65      	ldr	r3, [pc, #404]	; (8005114 <main+0x4d4>)
 8004f7e:	5c9a      	ldrb	r2, [r3, r2]
 8004f80:	4b65      	ldr	r3, [pc, #404]	; (8005118 <main+0x4d8>)
 8004f82:	701a      	strb	r2, [r3, #0]
						 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 8004f84:	4b62      	ldr	r3, [pc, #392]	; (8005110 <main+0x4d0>)
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	099b      	lsrs	r3, r3, #6
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	019b      	lsls	r3, r3, #6
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	4b5e      	ldr	r3, [pc, #376]	; (8005110 <main+0x4d0>)
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

						HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);   // write changed
 8004fa4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004fa8:	2364      	movs	r3, #100	; 0x64
 8004faa:	9302      	str	r3, [sp, #8]
 8004fac:	2301      	movs	r3, #1
 8004fae:	9301      	str	r3, [sp, #4]
 8004fb0:	4b59      	ldr	r3, [pc, #356]	; (8005118 <main+0x4d8>)
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	21a0      	movs	r1, #160	; 0xa0
 8004fb8:	4858      	ldr	r0, [pc, #352]	; (800511c <main+0x4dc>)
 8004fba:	f003 fc23 	bl	8008804 <HAL_I2C_Mem_Write>



		//if (mem_buf!=mem_verify)	 mem_errors++;  // check writes

		loop_counter2=0; //reset
 8004fbe:	4b58      	ldr	r3, [pc, #352]	; (8005120 <main+0x4e0>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]

		}


	if (serial_tosend){    // send on seq change
 8004fc4:	4b57      	ldr	r3, [pc, #348]	; (8005124 <main+0x4e4>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 8093 	beq.w	80050f4 <main+0x4b4>
		uint16_t mem_counter=0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
		  memcpy(serial_source,&seq,36); // copy bits
 8004fd4:	2224      	movs	r2, #36	; 0x24
 8004fd6:	4954      	ldr	r1, [pc, #336]	; (8005128 <main+0x4e8>)
 8004fd8:	4854      	ldr	r0, [pc, #336]	; (800512c <main+0x4ec>)
 8004fda:	f007 fc43 	bl	800c864 <memcpy>

		  memcpy(serial_source+96,potSource+252,64 );  // 4 * 16
 8004fde:	4b54      	ldr	r3, [pc, #336]	; (8005130 <main+0x4f0>)
 8004fe0:	4954      	ldr	r1, [pc, #336]	; (8005134 <main+0x4f4>)
 8004fe2:	2240      	movs	r2, #64	; 0x40
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f007 fc3d 	bl	800c864 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 8004fea:	2300      	movs	r3, #0
 8004fec:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8004ff0:	e032      	b.n	8005058 <main+0x418>
			  if (mem_counter<4)memcpy(serial_source+96+(mem_counter*7),&note[mem_counter+6],7 );
 8004ff2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d814      	bhi.n	8005024 <main+0x3e4>
 8004ffa:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8004ffe:	4613      	mov	r3, r2
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	3360      	adds	r3, #96	; 0x60
 8005006:	4a49      	ldr	r2, [pc, #292]	; (800512c <main+0x4ec>)
 8005008:	1898      	adds	r0, r3, r2
 800500a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800500e:	1d9a      	adds	r2, r3, #6
 8005010:	4613      	mov	r3, r2
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	4a47      	ldr	r2, [pc, #284]	; (8005138 <main+0x4f8>)
 800501a:	4413      	add	r3, r2
 800501c:	2207      	movs	r2, #7
 800501e:	4619      	mov	r1, r3
 8005020:	f007 fc20 	bl	800c864 <memcpy>
						memcpy(serial_source+36+(mem_counter*6),&LFO_slave1[mem_counter],6 );  // insert lfo settings
 8005024:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8005028:	4613      	mov	r3, r2
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	4413      	add	r3, r2
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	3324      	adds	r3, #36	; 0x24
 8005032:	4a3e      	ldr	r2, [pc, #248]	; (800512c <main+0x4ec>)
 8005034:	1898      	adds	r0, r3, r2
 8005036:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800503a:	4613      	mov	r3, r2
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	4413      	add	r3, r2
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	4a3e      	ldr	r2, [pc, #248]	; (800513c <main+0x4fc>)
 8005044:	4413      	add	r3, r2
 8005046:	2206      	movs	r2, #6
 8005048:	4619      	mov	r1, r3
 800504a:	f007 fc0b 	bl	800c864 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 800504e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8005052:	3301      	adds	r3, #1
 8005054:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8005058:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800505c:	2b09      	cmp	r3, #9
 800505e:	d9c8      	bls.n	8004ff2 <main+0x3b2>
				  }

		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 8005060:	e005      	b.n	800506e <main+0x42e>
			  serial_up++;
 8005062:	4b37      	ldr	r3, [pc, #220]	; (8005140 <main+0x500>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	3301      	adds	r3, #1
 8005068:	b2da      	uxtb	r2, r3
 800506a:	4b35      	ldr	r3, [pc, #212]	; (8005140 <main+0x500>)
 800506c:	701a      	strb	r2, [r3, #0]
		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 800506e:	4b34      	ldr	r3, [pc, #208]	; (8005140 <main+0x500>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	4b33      	ldr	r3, [pc, #204]	; (8005144 <main+0x504>)
 8005076:	5c9a      	ldrb	r2, [r3, r2]
 8005078:	4b31      	ldr	r3, [pc, #196]	; (8005140 <main+0x500>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	4619      	mov	r1, r3
 800507e:	4b2b      	ldr	r3, [pc, #172]	; (800512c <main+0x4ec>)
 8005080:	5c5b      	ldrb	r3, [r3, r1]
 8005082:	429a      	cmp	r2, r3
 8005084:	d103      	bne.n	800508e <main+0x44e>
 8005086:	4b2e      	ldr	r3, [pc, #184]	; (8005140 <main+0x500>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2ba0      	cmp	r3, #160	; 0xa0
 800508c:	d9e9      	bls.n	8005062 <main+0x422>
		  }

		  serial_send[6]=0;
 800508e:	4b2e      	ldr	r3, [pc, #184]	; (8005148 <main+0x508>)
 8005090:	2200      	movs	r2, #0
 8005092:	719a      	strb	r2, [r3, #6]
		  serial_send[7]=seq.pos;  // chase
 8005094:	4b24      	ldr	r3, [pc, #144]	; (8005128 <main+0x4e8>)
 8005096:	781a      	ldrb	r2, [r3, #0]
 8005098:	4b2b      	ldr	r3, [pc, #172]	; (8005148 <main+0x508>)
 800509a:	71da      	strb	r2, [r3, #7]
		  serial_send[2]=serial_up;
 800509c:	4b28      	ldr	r3, [pc, #160]	; (8005140 <main+0x500>)
 800509e:	781a      	ldrb	r2, [r3, #0]
 80050a0:	4b29      	ldr	r3, [pc, #164]	; (8005148 <main+0x508>)
 80050a2:	709a      	strb	r2, [r3, #2]
		  serial_send[3]=serial_source[serial_up];
 80050a4:	4b26      	ldr	r3, [pc, #152]	; (8005140 <main+0x500>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	461a      	mov	r2, r3
 80050aa:	4b20      	ldr	r3, [pc, #128]	; (800512c <main+0x4ec>)
 80050ac:	5c9a      	ldrb	r2, [r3, r2]
 80050ae:	4b26      	ldr	r3, [pc, #152]	; (8005148 <main+0x508>)
 80050b0:	70da      	strb	r2, [r3, #3]
		  serial_source_temp[serial_up]=serial_source[serial_up];
 80050b2:	4b23      	ldr	r3, [pc, #140]	; (8005140 <main+0x500>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	4619      	mov	r1, r3
 80050b8:	4b21      	ldr	r3, [pc, #132]	; (8005140 <main+0x500>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	4b1b      	ldr	r3, [pc, #108]	; (800512c <main+0x4ec>)
 80050c0:	5c59      	ldrb	r1, [r3, r1]
 80050c2:	4b20      	ldr	r3, [pc, #128]	; (8005144 <main+0x504>)
 80050c4:	5499      	strb	r1, [r3, r2]
		  if (serial_up>161) serial_up=0; else serial_up++;
 80050c6:	4b1e      	ldr	r3, [pc, #120]	; (8005140 <main+0x500>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2ba1      	cmp	r3, #161	; 0xa1
 80050cc:	d903      	bls.n	80050d6 <main+0x496>
 80050ce:	4b1c      	ldr	r3, [pc, #112]	; (8005140 <main+0x500>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]
 80050d4:	e005      	b.n	80050e2 <main+0x4a2>
 80050d6:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <main+0x500>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	3301      	adds	r3, #1
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	4b18      	ldr	r3, [pc, #96]	; (8005140 <main+0x500>)
 80050e0:	701a      	strb	r2, [r3, #0]

		  HAL_UART_Transmit(&huart1,serial_send,8, 100);  //send serial
 80050e2:	2364      	movs	r3, #100	; 0x64
 80050e4:	2208      	movs	r2, #8
 80050e6:	4918      	ldr	r1, [pc, #96]	; (8005148 <main+0x508>)
 80050e8:	4818      	ldr	r0, [pc, #96]	; (800514c <main+0x50c>)
 80050ea:	f006 ffd4 	bl	800c096 <HAL_UART_Transmit>
		  serial_tosend=0;
 80050ee:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <main+0x4e4>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	701a      	strb	r2, [r3, #0]
	}

		if (disp_end==1)	  {display_generate();}      // run this after gfx draw page finish
 80050f4:	4b16      	ldr	r3, [pc, #88]	; (8005150 <main+0x510>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <main+0x4c0>
 80050fc:	f7ff f896 	bl	800422c <display_generate>

		if (init<6)				// after 6 its done for good   // no freeze here
 8005100:	4b14      	ldr	r3, [pc, #80]	; (8005154 <main+0x514>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b05      	cmp	r3, #5
 8005106:	d841      	bhi.n	800518c <main+0x54c>
		{
			for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8005108:	4b13      	ldr	r3, [pc, #76]	; (8005158 <main+0x518>)
 800510a:	2200      	movs	r2, #0
 800510c:	801a      	strh	r2, [r3, #0]
 800510e:	e02d      	b.n	800516c <main+0x52c>
 8005110:	2000b216 	.word	0x2000b216
 8005114:	20008758 	.word	0x20008758
 8005118:	2000b21c 	.word	0x2000b21c
 800511c:	20011778 	.word	0x20011778
 8005120:	2000b218 	.word	0x2000b218
 8005124:	2000f995 	.word	0x2000f995
 8005128:	2000cdfc 	.word	0x2000cdfc
 800512c:	2000f794 	.word	0x2000f794
 8005130:	2000f7f4 	.word	0x2000f7f4
 8005134:	20008854 	.word	0x20008854
 8005138:	20000158 	.word	0x20000158
 800513c:	2000c26c 	.word	0x2000c26c
 8005140:	2000f994 	.word	0x2000f994
 8005144:	2000f894 	.word	0x2000f894
 8005148:	20000224 	.word	0x20000224
 800514c:	20011abc 	.word	0x20011abc
 8005150:	2000bbb6 	.word	0x2000bbb6
 8005154:	2000b20b 	.word	0x2000b20b
 8005158:	200089c2 	.word	0x200089c2
 800515c:	f7fe ff54 	bl	8004008 <display_init>
 8005160:	4b81      	ldr	r3, [pc, #516]	; (8005368 <main+0x728>)
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	3301      	adds	r3, #1
 8005166:	b29a      	uxth	r2, r3
 8005168:	4b7f      	ldr	r3, [pc, #508]	; (8005368 <main+0x728>)
 800516a:	801a      	strh	r2, [r3, #0]
 800516c:	4b7e      	ldr	r3, [pc, #504]	; (8005368 <main+0x728>)
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	2b05      	cmp	r3, #5
 8005172:	d9f3      	bls.n	800515c <main+0x51c>

		if (init==6)  {HAL_TIM_Base_Start_IT(&htim10);HAL_TIM_Base_Start(&htim10);	 gfx_TX_block(); 				}
 8005174:	4b7d      	ldr	r3, [pc, #500]	; (800536c <main+0x72c>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b06      	cmp	r3, #6
 800517a:	d107      	bne.n	800518c <main+0x54c>
 800517c:	487c      	ldr	r0, [pc, #496]	; (8005370 <main+0x730>)
 800517e:	f005 fe67 	bl	800ae50 <HAL_TIM_Base_Start_IT>
 8005182:	487b      	ldr	r0, [pc, #492]	; (8005370 <main+0x730>)
 8005184:	f005 fe0a 	bl	800ad9c <HAL_TIM_Base_Start>
 8005188:	f7fe ff94 	bl	80040b4 <gfx_TX_block>
		}

		if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 800518c:	4b77      	ldr	r3, [pc, #476]	; (800536c <main+0x72c>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b05      	cmp	r3, #5
 8005192:	d903      	bls.n	800519c <main+0x55c>


		    //full page in mem for spi

		    //  little too fast
			 menu3_fill();encoder2();
 8005194:	f7ff fa0e 	bl	80045b4 <menu3_fill>
 8005198:	f7ff f92a 	bl	80043f0 <encoder2>
		}


		if (loop_counter2==4000){ // grab adc readings + 3ms , 32 step  // no freeze
 800519c:	4b75      	ldr	r3, [pc, #468]	; (8005374 <main+0x734>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80051a4:	d144      	bne.n	8005230 <main+0x5f0>



			//HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

			HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 80051a6:	4874      	ldr	r0, [pc, #464]	; (8005378 <main+0x738>)
 80051a8:	f002 f858 	bl	800725c <HAL_ADCEx_InjectedStart>
			uint16_t adc_temp1[4]={0,0,0,0};
 80051ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	605a      	str	r2, [r3, #4]

			HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 80051b6:	2101      	movs	r1, #1
 80051b8:	486f      	ldr	r0, [pc, #444]	; (8005378 <main+0x738>)
 80051ba:	f001 fbbf 	bl	800693c <HAL_ADC_PollForConversion>

			adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80051be:	2101      	movs	r1, #1
 80051c0:	486d      	ldr	r0, [pc, #436]	; (8005378 <main+0x738>)
 80051c2:	f002 f961 	bl	8007488 <HAL_ADCEx_InjectedGetValue>
 80051c6:	4603      	mov	r3, r0
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
			adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 80051ce:	2102      	movs	r1, #2
 80051d0:	4869      	ldr	r0, [pc, #420]	; (8005378 <main+0x738>)
 80051d2:	f002 f959 	bl	8007488 <HAL_ADCEx_InjectedGetValue>
 80051d6:	4603      	mov	r3, r0
 80051d8:	b29b      	uxth	r3, r3
 80051da:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 80051de:	2103      	movs	r1, #3
 80051e0:	4865      	ldr	r0, [pc, #404]	; (8005378 <main+0x738>)
 80051e2:	f002 f951 	bl	8007488 <HAL_ADCEx_InjectedGetValue>
 80051e6:	4603      	mov	r3, r0
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			HAL_ADCEx_InjectedStop(&hadc1) ;
 80051ee:	4862      	ldr	r0, [pc, #392]	; (8005378 <main+0x738>)
 80051f0:	f002 f8fe 	bl	80073f0 <HAL_ADCEx_InjectedStop>
			//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
			adc_values[0]=	31- ( adc_temp1[0]>>7);
 80051f4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80051f8:	09db      	lsrs	r3, r3, #7
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	f1c3 031f 	rsb	r3, r3, #31
 8005200:	b29a      	uxth	r2, r3
 8005202:	4b5e      	ldr	r3, [pc, #376]	; (800537c <main+0x73c>)
 8005204:	801a      	strh	r2, [r3, #0]
			adc_values[1]=	 31-( adc_temp1[1]>>7);
 8005206:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800520a:	09db      	lsrs	r3, r3, #7
 800520c:	b29b      	uxth	r3, r3
 800520e:	f1c3 031f 	rsb	r3, r3, #31
 8005212:	b29a      	uxth	r2, r3
 8005214:	4b59      	ldr	r3, [pc, #356]	; (800537c <main+0x73c>)
 8005216:	805a      	strh	r2, [r3, #2]
			adc_values[2]=	 31-( adc_temp1[2]>>7);
 8005218:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800521c:	09db      	lsrs	r3, r3, #7
 800521e:	b29b      	uxth	r3, r3
 8005220:	f1c3 031f 	rsb	r3, r3, #31
 8005224:	b29a      	uxth	r2, r3
 8005226:	4b55      	ldr	r3, [pc, #340]	; (800537c <main+0x73c>)
 8005228:	809a      	strh	r2, [r3, #4]
			//  adc_values[2]=	  adc_temp1[2]>>7;

			loop_counter=0;
 800522a:	4b55      	ldr	r3, [pc, #340]	; (8005380 <main+0x740>)
 800522c:	2200      	movs	r2, #0
 800522e:	701a      	strb	r2, [r3, #0]
		}

		if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8005230:	4b54      	ldr	r3, [pc, #336]	; (8005384 <main+0x744>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b07      	cmp	r3, #7
 8005236:	d106      	bne.n	8005246 <main+0x606>
 8005238:	4b53      	ldr	r3, [pc, #332]	; (8005388 <main+0x748>)
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d102      	bne.n	8005246 <main+0x606>
 8005240:	4b51      	ldr	r3, [pc, #324]	; (8005388 <main+0x748>)
 8005242:	2201      	movs	r2, #1
 8005244:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 8005246:	4b4f      	ldr	r3, [pc, #316]	; (8005384 <main+0x744>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	b2db      	uxtb	r3, r3
 8005250:	461a      	mov	r2, r3
 8005252:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005256:	484d      	ldr	r0, [pc, #308]	; (800538c <main+0x74c>)
 8005258:	f003 f95e 	bl	8008518 <HAL_GPIO_WritePin>
	//	adc_flag=0;
		if (adc_flag) {     //  only for sending out  , poor quality
 800525c:	4b4c      	ldr	r3, [pc, #304]	; (8005390 <main+0x750>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d051      	beq.n	8005308 <main+0x6c8>


			uint16_t    adc_page=0; ;
 8005264:	2300      	movs	r3, #0
 8005266:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			if		(adc_flag==1)	  	{	adc_page=0;			}	//dma start ,needs this and adc start ,set sampling time
 800526a:	4b49      	ldr	r3, [pc, #292]	; (8005390 <main+0x750>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d102      	bne.n	8005278 <main+0x638>
 8005272:	2300      	movs	r3, #0
 8005274:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			if		(adc_flag==2)	  	{	adc_page=1536;  }
 8005278:	4b45      	ldr	r3, [pc, #276]	; (8005390 <main+0x750>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b02      	cmp	r3, #2
 800527e:	d103      	bne.n	8005288 <main+0x648>
 8005280:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005284:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a


			uint16_t    adc_convert_count;
			uint16_t    adc_convert_temp;
			for (i=0;i<512;i++){
 8005288:	4b37      	ldr	r3, [pc, #220]	; (8005368 <main+0x728>)
 800528a:	2200      	movs	r2, #0
 800528c:	801a      	strh	r2, [r3, #0]
 800528e:	e033      	b.n	80052f8 <main+0x6b8>
				adc_convert_count=(i*3)+adc_page;
 8005290:	4b35      	ldr	r3, [pc, #212]	; (8005368 <main+0x728>)
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	0052      	lsls	r2, r2, #1
 8005298:	4413      	add	r3, r2
 800529a:	b29a      	uxth	r2, r3
 800529c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80052a0:	4413      	add	r3, r2
 80052a2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

				adc_convert_temp=adc_source[adc_convert_count]+adc_source[adc_convert_count+1]+adc_source[adc_convert_count+2]; //  17 470 khz  ~
 80052a6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80052aa:	4a3a      	ldr	r2, [pc, #232]	; (8005394 <main+0x754>)
 80052ac:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80052b0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80052b4:	3301      	adds	r3, #1
 80052b6:	4937      	ldr	r1, [pc, #220]	; (8005394 <main+0x754>)
 80052b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80052bc:	4413      	add	r3, r2
 80052be:	b29a      	uxth	r2, r3
 80052c0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80052c4:	3302      	adds	r3, #2
 80052c6:	4933      	ldr	r1, [pc, #204]	; (8005394 <main+0x754>)
 80052c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80052cc:	4413      	add	r3, r2
 80052ce:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
				input_holder[i]=adc_convert_temp/3;
 80052d2:	4b25      	ldr	r3, [pc, #148]	; (8005368 <main+0x728>)
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	4619      	mov	r1, r3
 80052d8:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80052dc:	4a2e      	ldr	r2, [pc, #184]	; (8005398 <main+0x758>)
 80052de:	fba2 2303 	umull	r2, r3, r2, r3
 80052e2:	085b      	lsrs	r3, r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	4b2d      	ldr	r3, [pc, #180]	; (800539c <main+0x75c>)
 80052e8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			for (i=0;i<512;i++){
 80052ec:	4b1e      	ldr	r3, [pc, #120]	; (8005368 <main+0x728>)
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	3301      	adds	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	4b1c      	ldr	r3, [pc, #112]	; (8005368 <main+0x728>)
 80052f6:	801a      	strh	r2, [r3, #0]
 80052f8:	4b1b      	ldr	r3, [pc, #108]	; (8005368 <main+0x728>)
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005300:	d3c6      	bcc.n	8005290 <main+0x650>
				//	input_holder[i]=adc_source[(i*3)+adc_page];

			}
		//	if (sampler.record_enable)  {sampler_ram_record(); sampler.start_MSB=0; sampler.start_LSB=0;sampler.end_MSB=63;}

			adc_flag=0;
 8005302:	4b23      	ldr	r3, [pc, #140]	; (8005390 <main+0x750>)
 8005304:	2200      	movs	r2, #0
 8005306:	701a      	strb	r2, [r3, #0]
		}


		if ((sample_point>512)&&( sample_pointD==512)) bank_write=1;
 8005308:	4b25      	ldr	r3, [pc, #148]	; (80053a0 <main+0x760>)
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b29b      	uxth	r3, r3
 800530e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005312:	d923      	bls.n	800535c <main+0x71c>
 8005314:	4b23      	ldr	r3, [pc, #140]	; (80053a4 <main+0x764>)
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800531c:	d11e      	bne.n	800535c <main+0x71c>
 800531e:	4b22      	ldr	r3, [pc, #136]	; (80053a8 <main+0x768>)
 8005320:	2201      	movs	r2, #1
 8005322:	801a      	strh	r2, [r3, #0]
		while  (bank_write)                         {							// wait for adc , priority
 8005324:	e01a      	b.n	800535c <main+0x71c>

			sampling();
 8005326:	f7fc fe33 	bl	8001f90 <sampling>

			uint8_t up_counter2=0;
 800532a:	2300      	movs	r3, #0
 800532c:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			while ((up_counter2<8) && (init > 5) )								{
 8005330:	e00c      	b.n	800534c <main+0x70c>

			gfx_line_fill();   // just run 8 times between sampling , dont need more
 8005332:	f7fe ff8d 	bl	8004250 <gfx_line_fill>
			up_counter2++;
 8005336:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800533a:	3301      	adds	r3, #1
 800533c:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			loop_counter++;
 8005340:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <main+0x740>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	3301      	adds	r3, #1
 8005346:	b2da      	uxtb	r2, r3
 8005348:	4b0d      	ldr	r3, [pc, #52]	; (8005380 <main+0x740>)
 800534a:	701a      	strb	r2, [r3, #0]
			while ((up_counter2<8) && (init > 5) )								{
 800534c:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8005350:	2b07      	cmp	r3, #7
 8005352:	d803      	bhi.n	800535c <main+0x71c>
 8005354:	4b05      	ldr	r3, [pc, #20]	; (800536c <main+0x72c>)
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	2b05      	cmp	r3, #5
 800535a:	d8ea      	bhi.n	8005332 <main+0x6f2>
		while  (bank_write)                         {							// wait for adc , priority
 800535c:	4b12      	ldr	r3, [pc, #72]	; (80053a8 <main+0x768>)
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1e0      	bne.n	8005326 <main+0x6e6>
	  loop_counter++ ;
 8005364:	e48d      	b.n	8004c82 <main+0x42>
 8005366:	bf00      	nop
 8005368:	200089c2 	.word	0x200089c2
 800536c:	2000b20b 	.word	0x2000b20b
 8005370:	20011a74 	.word	0x20011a74
 8005374:	2000b218 	.word	0x2000b218
 8005378:	200116d0 	.word	0x200116d0
 800537c:	20000144 	.word	0x20000144
 8005380:	200089be 	.word	0x200089be
 8005384:	2000cdfc 	.word	0x2000cdfc
 8005388:	2000b202 	.word	0x2000b202
 800538c:	40020800 	.word	0x40020800
 8005390:	2000bfb8 	.word	0x2000bfb8
 8005394:	200099d4 	.word	0x200099d4
 8005398:	aaaaaaab 	.word	0xaaaaaaab
 800539c:	2000bbb8 	.word	0x2000bbb8
 80053a0:	200099c8 	.word	0x200099c8
 80053a4:	200099ce 	.word	0x200099ce
 80053a8:	2000014e 	.word	0x2000014e

080053ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b094      	sub	sp, #80	; 0x50
 80053b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80053b2:	f107 0320 	add.w	r3, r7, #32
 80053b6:	2230      	movs	r2, #48	; 0x30
 80053b8:	2100      	movs	r1, #0
 80053ba:	4618      	mov	r0, r3
 80053bc:	f007 fa60 	bl	800c880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80053c0:	f107 030c 	add.w	r3, r7, #12
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	605a      	str	r2, [r3, #4]
 80053ca:	609a      	str	r2, [r3, #8]
 80053cc:	60da      	str	r2, [r3, #12]
 80053ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80053d0:	2300      	movs	r3, #0
 80053d2:	60bb      	str	r3, [r7, #8]
 80053d4:	4b28      	ldr	r3, [pc, #160]	; (8005478 <SystemClock_Config+0xcc>)
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	4a27      	ldr	r2, [pc, #156]	; (8005478 <SystemClock_Config+0xcc>)
 80053da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053de:	6413      	str	r3, [r2, #64]	; 0x40
 80053e0:	4b25      	ldr	r3, [pc, #148]	; (8005478 <SystemClock_Config+0xcc>)
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e8:	60bb      	str	r3, [r7, #8]
 80053ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80053ec:	2300      	movs	r3, #0
 80053ee:	607b      	str	r3, [r7, #4]
 80053f0:	4b22      	ldr	r3, [pc, #136]	; (800547c <SystemClock_Config+0xd0>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a21      	ldr	r2, [pc, #132]	; (800547c <SystemClock_Config+0xd0>)
 80053f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	4b1f      	ldr	r3, [pc, #124]	; (800547c <SystemClock_Config+0xd0>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005404:	607b      	str	r3, [r7, #4]
 8005406:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005408:	2302      	movs	r3, #2
 800540a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800540c:	2301      	movs	r3, #1
 800540e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005410:	2310      	movs	r3, #16
 8005412:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005414:	2302      	movs	r3, #2
 8005416:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005418:	2300      	movs	r3, #0
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800541c:	2308      	movs	r3, #8
 800541e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8005420:	2364      	movs	r3, #100	; 0x64
 8005422:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005424:	2302      	movs	r3, #2
 8005426:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005428:	2304      	movs	r3, #4
 800542a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800542c:	f107 0320 	add.w	r3, r7, #32
 8005430:	4618      	mov	r0, r3
 8005432:	f004 f863 	bl	80094fc <HAL_RCC_OscConfig>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800543c:	f000 fc94 	bl	8005d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005440:	230f      	movs	r3, #15
 8005442:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005444:	2302      	movs	r3, #2
 8005446:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005448:	2300      	movs	r3, #0
 800544a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800544c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005450:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005456:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005458:	f107 030c 	add.w	r3, r7, #12
 800545c:	2103      	movs	r1, #3
 800545e:	4618      	mov	r0, r3
 8005460:	f004 fac4 	bl	80099ec <HAL_RCC_ClockConfig>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800546a:	f000 fc7d 	bl	8005d68 <Error_Handler>
  }
}
 800546e:	bf00      	nop
 8005470:	3750      	adds	r7, #80	; 0x50
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	40023800 	.word	0x40023800
 800547c:	40007000 	.word	0x40007000

08005480 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08c      	sub	sp, #48	; 0x30
 8005484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005486:	f107 0320 	add.w	r3, r7, #32
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	605a      	str	r2, [r3, #4]
 8005490:	609a      	str	r2, [r3, #8]
 8005492:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8005494:	463b      	mov	r3, r7
 8005496:	2220      	movs	r2, #32
 8005498:	2100      	movs	r1, #0
 800549a:	4618      	mov	r0, r3
 800549c:	f007 f9f0 	bl	800c880 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80054a0:	4b3e      	ldr	r3, [pc, #248]	; (800559c <MX_ADC1_Init+0x11c>)
 80054a2:	4a3f      	ldr	r2, [pc, #252]	; (80055a0 <MX_ADC1_Init+0x120>)
 80054a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80054a6:	4b3d      	ldr	r3, [pc, #244]	; (800559c <MX_ADC1_Init+0x11c>)
 80054a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80054ae:	4b3b      	ldr	r3, [pc, #236]	; (800559c <MX_ADC1_Init+0x11c>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80054b4:	4b39      	ldr	r3, [pc, #228]	; (800559c <MX_ADC1_Init+0x11c>)
 80054b6:	2201      	movs	r2, #1
 80054b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80054ba:	4b38      	ldr	r3, [pc, #224]	; (800559c <MX_ADC1_Init+0x11c>)
 80054bc:	2201      	movs	r2, #1
 80054be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80054c0:	4b36      	ldr	r3, [pc, #216]	; (800559c <MX_ADC1_Init+0x11c>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80054c8:	4b34      	ldr	r3, [pc, #208]	; (800559c <MX_ADC1_Init+0x11c>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80054ce:	4b33      	ldr	r3, [pc, #204]	; (800559c <MX_ADC1_Init+0x11c>)
 80054d0:	4a34      	ldr	r2, [pc, #208]	; (80055a4 <MX_ADC1_Init+0x124>)
 80054d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80054d4:	4b31      	ldr	r3, [pc, #196]	; (800559c <MX_ADC1_Init+0x11c>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80054da:	4b30      	ldr	r3, [pc, #192]	; (800559c <MX_ADC1_Init+0x11c>)
 80054dc:	2201      	movs	r2, #1
 80054de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80054e0:	4b2e      	ldr	r3, [pc, #184]	; (800559c <MX_ADC1_Init+0x11c>)
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80054e8:	4b2c      	ldr	r3, [pc, #176]	; (800559c <MX_ADC1_Init+0x11c>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80054ee:	482b      	ldr	r0, [pc, #172]	; (800559c <MX_ADC1_Init+0x11c>)
 80054f0:	f001 f92c 	bl	800674c <HAL_ADC_Init>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80054fa:	f000 fc35 	bl	8005d68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80054fe:	2309      	movs	r3, #9
 8005500:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8005502:	2301      	movs	r3, #1
 8005504:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005506:	2306      	movs	r3, #6
 8005508:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800550a:	f107 0320 	add.w	r3, r7, #32
 800550e:	4619      	mov	r1, r3
 8005510:	4822      	ldr	r0, [pc, #136]	; (800559c <MX_ADC1_Init+0x11c>)
 8005512:	f001 fbf3 	bl	8006cfc <HAL_ADC_ConfigChannel>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800551c:	f000 fc24 	bl	8005d68 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8005520:	2300      	movs	r3, #0
 8005522:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8005524:	2301      	movs	r3, #1
 8005526:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8005528:	2303      	movs	r3, #3
 800552a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 800552c:	2303      	movs	r3, #3
 800552e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8005530:	2300      	movs	r3, #0
 8005532:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8005534:	4b1c      	ldr	r3, [pc, #112]	; (80055a8 <MX_ADC1_Init+0x128>)
 8005536:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8005538:	2300      	movs	r3, #0
 800553a:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800553c:	2300      	movs	r3, #0
 800553e:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005544:	463b      	mov	r3, r7
 8005546:	4619      	mov	r1, r3
 8005548:	4814      	ldr	r0, [pc, #80]	; (800559c <MX_ADC1_Init+0x11c>)
 800554a:	f001 ffd5 	bl	80074f8 <HAL_ADCEx_InjectedConfigChannel>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8005554:	f000 fc08 	bl	8005d68 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8005558:	2302      	movs	r3, #2
 800555a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 800555c:	2302      	movs	r3, #2
 800555e:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005560:	463b      	mov	r3, r7
 8005562:	4619      	mov	r1, r3
 8005564:	480d      	ldr	r0, [pc, #52]	; (800559c <MX_ADC1_Init+0x11c>)
 8005566:	f001 ffc7 	bl	80074f8 <HAL_ADCEx_InjectedConfigChannel>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8005570:	f000 fbfa 	bl	8005d68 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8005574:	2308      	movs	r3, #8
 8005576:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8005578:	2303      	movs	r3, #3
 800557a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800557c:	2300      	movs	r3, #0
 800557e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005580:	463b      	mov	r3, r7
 8005582:	4619      	mov	r1, r3
 8005584:	4805      	ldr	r0, [pc, #20]	; (800559c <MX_ADC1_Init+0x11c>)
 8005586:	f001 ffb7 	bl	80074f8 <HAL_ADCEx_InjectedConfigChannel>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8005590:	f000 fbea 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005594:	bf00      	nop
 8005596:	3730      	adds	r7, #48	; 0x30
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	200116d0 	.word	0x200116d0
 80055a0:	40012000 	.word	0x40012000
 80055a4:	0f000001 	.word	0x0f000001
 80055a8:	000f0001 	.word	0x000f0001

080055ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80055b0:	4b12      	ldr	r3, [pc, #72]	; (80055fc <MX_I2C2_Init+0x50>)
 80055b2:	4a13      	ldr	r2, [pc, #76]	; (8005600 <MX_I2C2_Init+0x54>)
 80055b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80055b6:	4b11      	ldr	r3, [pc, #68]	; (80055fc <MX_I2C2_Init+0x50>)
 80055b8:	4a12      	ldr	r2, [pc, #72]	; (8005604 <MX_I2C2_Init+0x58>)
 80055ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80055bc:	4b0f      	ldr	r3, [pc, #60]	; (80055fc <MX_I2C2_Init+0x50>)
 80055be:	2200      	movs	r2, #0
 80055c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80055c2:	4b0e      	ldr	r3, [pc, #56]	; (80055fc <MX_I2C2_Init+0x50>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80055c8:	4b0c      	ldr	r3, [pc, #48]	; (80055fc <MX_I2C2_Init+0x50>)
 80055ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055ce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80055d0:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <MX_I2C2_Init+0x50>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80055d6:	4b09      	ldr	r3, [pc, #36]	; (80055fc <MX_I2C2_Init+0x50>)
 80055d8:	2200      	movs	r2, #0
 80055da:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80055dc:	4b07      	ldr	r3, [pc, #28]	; (80055fc <MX_I2C2_Init+0x50>)
 80055de:	2200      	movs	r2, #0
 80055e0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80055e2:	4b06      	ldr	r3, [pc, #24]	; (80055fc <MX_I2C2_Init+0x50>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80055e8:	4804      	ldr	r0, [pc, #16]	; (80055fc <MX_I2C2_Init+0x50>)
 80055ea:	f002 ffc7 	bl	800857c <HAL_I2C_Init>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80055f4:	f000 fbb8 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80055f8:	bf00      	nop
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	20011778 	.word	0x20011778
 8005600:	40005800 	.word	0x40005800
 8005604:	000186a0 	.word	0x000186a0

08005608 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800560c:	4b17      	ldr	r3, [pc, #92]	; (800566c <MX_SPI1_Init+0x64>)
 800560e:	4a18      	ldr	r2, [pc, #96]	; (8005670 <MX_SPI1_Init+0x68>)
 8005610:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005612:	4b16      	ldr	r3, [pc, #88]	; (800566c <MX_SPI1_Init+0x64>)
 8005614:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005618:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800561a:	4b14      	ldr	r3, [pc, #80]	; (800566c <MX_SPI1_Init+0x64>)
 800561c:	2200      	movs	r2, #0
 800561e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005620:	4b12      	ldr	r3, [pc, #72]	; (800566c <MX_SPI1_Init+0x64>)
 8005622:	2200      	movs	r2, #0
 8005624:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005626:	4b11      	ldr	r3, [pc, #68]	; (800566c <MX_SPI1_Init+0x64>)
 8005628:	2200      	movs	r2, #0
 800562a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800562c:	4b0f      	ldr	r3, [pc, #60]	; (800566c <MX_SPI1_Init+0x64>)
 800562e:	2200      	movs	r2, #0
 8005630:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005632:	4b0e      	ldr	r3, [pc, #56]	; (800566c <MX_SPI1_Init+0x64>)
 8005634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005638:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800563a:	4b0c      	ldr	r3, [pc, #48]	; (800566c <MX_SPI1_Init+0x64>)
 800563c:	2200      	movs	r2, #0
 800563e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005640:	4b0a      	ldr	r3, [pc, #40]	; (800566c <MX_SPI1_Init+0x64>)
 8005642:	2200      	movs	r2, #0
 8005644:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005646:	4b09      	ldr	r3, [pc, #36]	; (800566c <MX_SPI1_Init+0x64>)
 8005648:	2200      	movs	r2, #0
 800564a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800564c:	4b07      	ldr	r3, [pc, #28]	; (800566c <MX_SPI1_Init+0x64>)
 800564e:	2200      	movs	r2, #0
 8005650:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005652:	4b06      	ldr	r3, [pc, #24]	; (800566c <MX_SPI1_Init+0x64>)
 8005654:	220a      	movs	r2, #10
 8005656:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005658:	4804      	ldr	r0, [pc, #16]	; (800566c <MX_SPI1_Init+0x64>)
 800565a:	f004 fba7 	bl	8009dac <HAL_SPI_Init>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005664:	f000 fb80 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005668:	bf00      	nop
 800566a:	bd80      	pop	{r7, pc}
 800566c:	200117cc 	.word	0x200117cc
 8005670:	40013000 	.word	0x40013000

08005674 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005678:	4b17      	ldr	r3, [pc, #92]	; (80056d8 <MX_SPI2_Init+0x64>)
 800567a:	4a18      	ldr	r2, [pc, #96]	; (80056dc <MX_SPI2_Init+0x68>)
 800567c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800567e:	4b16      	ldr	r3, [pc, #88]	; (80056d8 <MX_SPI2_Init+0x64>)
 8005680:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005684:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005686:	4b14      	ldr	r3, [pc, #80]	; (80056d8 <MX_SPI2_Init+0x64>)
 8005688:	2200      	movs	r2, #0
 800568a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800568c:	4b12      	ldr	r3, [pc, #72]	; (80056d8 <MX_SPI2_Init+0x64>)
 800568e:	2200      	movs	r2, #0
 8005690:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005692:	4b11      	ldr	r3, [pc, #68]	; (80056d8 <MX_SPI2_Init+0x64>)
 8005694:	2200      	movs	r2, #0
 8005696:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005698:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <MX_SPI2_Init+0x64>)
 800569a:	2200      	movs	r2, #0
 800569c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800569e:	4b0e      	ldr	r3, [pc, #56]	; (80056d8 <MX_SPI2_Init+0x64>)
 80056a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80056a6:	4b0c      	ldr	r3, [pc, #48]	; (80056d8 <MX_SPI2_Init+0x64>)
 80056a8:	2230      	movs	r2, #48	; 0x30
 80056aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80056ac:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <MX_SPI2_Init+0x64>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80056b2:	4b09      	ldr	r3, [pc, #36]	; (80056d8 <MX_SPI2_Init+0x64>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056b8:	4b07      	ldr	r3, [pc, #28]	; (80056d8 <MX_SPI2_Init+0x64>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80056be:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <MX_SPI2_Init+0x64>)
 80056c0:	220a      	movs	r2, #10
 80056c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80056c4:	4804      	ldr	r0, [pc, #16]	; (80056d8 <MX_SPI2_Init+0x64>)
 80056c6:	f004 fb71 	bl	8009dac <HAL_SPI_Init>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80056d0:	f000 fb4a 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80056d4:	bf00      	nop
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	20011824 	.word	0x20011824
 80056dc:	40003800 	.word	0x40003800

080056e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08c      	sub	sp, #48	; 0x30
 80056e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80056e6:	f107 030c 	add.w	r3, r7, #12
 80056ea:	2224      	movs	r2, #36	; 0x24
 80056ec:	2100      	movs	r1, #0
 80056ee:	4618      	mov	r0, r3
 80056f0:	f007 f8c6 	bl	800c880 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056f4:	1d3b      	adds	r3, r7, #4
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80056fc:	4b21      	ldr	r3, [pc, #132]	; (8005784 <MX_TIM2_Init+0xa4>)
 80056fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005702:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005704:	4b1f      	ldr	r3, [pc, #124]	; (8005784 <MX_TIM2_Init+0xa4>)
 8005706:	2200      	movs	r2, #0
 8005708:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800570a:	4b1e      	ldr	r3, [pc, #120]	; (8005784 <MX_TIM2_Init+0xa4>)
 800570c:	2200      	movs	r2, #0
 800570e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8005710:	4b1c      	ldr	r3, [pc, #112]	; (8005784 <MX_TIM2_Init+0xa4>)
 8005712:	f04f 32ff 	mov.w	r2, #4294967295
 8005716:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005718:	4b1a      	ldr	r3, [pc, #104]	; (8005784 <MX_TIM2_Init+0xa4>)
 800571a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800571e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005720:	4b18      	ldr	r3, [pc, #96]	; (8005784 <MX_TIM2_Init+0xa4>)
 8005722:	2200      	movs	r2, #0
 8005724:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005726:	2301      	movs	r3, #1
 8005728:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800572a:	2302      	movs	r3, #2
 800572c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800572e:	2301      	movs	r3, #1
 8005730:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005732:	2300      	movs	r3, #0
 8005734:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8005736:	2302      	movs	r3, #2
 8005738:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800573a:	2302      	movs	r3, #2
 800573c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800573e:	2301      	movs	r3, #1
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005742:	2300      	movs	r3, #0
 8005744:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8005746:	2302      	movs	r3, #2
 8005748:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800574a:	f107 030c 	add.w	r3, r7, #12
 800574e:	4619      	mov	r1, r3
 8005750:	480c      	ldr	r0, [pc, #48]	; (8005784 <MX_TIM2_Init+0xa4>)
 8005752:	f005 fd41 	bl	800b1d8 <HAL_TIM_Encoder_Init>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800575c:	f000 fb04 	bl	8005d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005760:	2300      	movs	r3, #0
 8005762:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005764:	2300      	movs	r3, #0
 8005766:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005768:	1d3b      	adds	r3, r7, #4
 800576a:	4619      	mov	r1, r3
 800576c:	4805      	ldr	r0, [pc, #20]	; (8005784 <MX_TIM2_Init+0xa4>)
 800576e:	f006 fbbb 	bl	800bee8 <HAL_TIMEx_MasterConfigSynchronization>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8005778:	f000 faf6 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800577c:	bf00      	nop
 800577e:	3730      	adds	r7, #48	; 0x30
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	2001199c 	.word	0x2001199c

08005788 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b08e      	sub	sp, #56	; 0x38
 800578c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800578e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	605a      	str	r2, [r3, #4]
 8005798:	609a      	str	r2, [r3, #8]
 800579a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800579c:	f107 0320 	add.w	r3, r7, #32
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80057a6:	1d3b      	adds	r3, r7, #4
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	605a      	str	r2, [r3, #4]
 80057ae:	609a      	str	r2, [r3, #8]
 80057b0:	60da      	str	r2, [r3, #12]
 80057b2:	611a      	str	r2, [r3, #16]
 80057b4:	615a      	str	r2, [r3, #20]
 80057b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80057b8:	4b32      	ldr	r3, [pc, #200]	; (8005884 <MX_TIM3_Init+0xfc>)
 80057ba:	4a33      	ldr	r2, [pc, #204]	; (8005888 <MX_TIM3_Init+0x100>)
 80057bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80057be:	4b31      	ldr	r3, [pc, #196]	; (8005884 <MX_TIM3_Init+0xfc>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057c4:	4b2f      	ldr	r3, [pc, #188]	; (8005884 <MX_TIM3_Init+0xfc>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2800;
 80057ca:	4b2e      	ldr	r3, [pc, #184]	; (8005884 <MX_TIM3_Init+0xfc>)
 80057cc:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80057d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057d2:	4b2c      	ldr	r3, [pc, #176]	; (8005884 <MX_TIM3_Init+0xfc>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80057d8:	4b2a      	ldr	r3, [pc, #168]	; (8005884 <MX_TIM3_Init+0xfc>)
 80057da:	2280      	movs	r2, #128	; 0x80
 80057dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80057de:	4829      	ldr	r0, [pc, #164]	; (8005884 <MX_TIM3_Init+0xfc>)
 80057e0:	f005 fa8c 	bl	800acfc <HAL_TIM_Base_Init>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80057ea:	f000 fabd 	bl	8005d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80057f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057f8:	4619      	mov	r1, r3
 80057fa:	4822      	ldr	r0, [pc, #136]	; (8005884 <MX_TIM3_Init+0xfc>)
 80057fc:	f005 ffb8 	bl	800b770 <HAL_TIM_ConfigClockSource>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005806:	f000 faaf 	bl	8005d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800580a:	481e      	ldr	r0, [pc, #120]	; (8005884 <MX_TIM3_Init+0xfc>)
 800580c:	f005 fbdb 	bl	800afc6 <HAL_TIM_PWM_Init>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005816:	f000 faa7 	bl	8005d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800581a:	2300      	movs	r3, #0
 800581c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800581e:	2300      	movs	r3, #0
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005822:	f107 0320 	add.w	r3, r7, #32
 8005826:	4619      	mov	r1, r3
 8005828:	4816      	ldr	r0, [pc, #88]	; (8005884 <MX_TIM3_Init+0xfc>)
 800582a:	f006 fb5d 	bl	800bee8 <HAL_TIMEx_MasterConfigSynchronization>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005834:	f000 fa98 	bl	8005d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005838:	2360      	movs	r3, #96	; 0x60
 800583a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005844:	2304      	movs	r3, #4
 8005846:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005848:	1d3b      	adds	r3, r7, #4
 800584a:	2200      	movs	r2, #0
 800584c:	4619      	mov	r1, r3
 800584e:	480d      	ldr	r0, [pc, #52]	; (8005884 <MX_TIM3_Init+0xfc>)
 8005850:	f005 fecc 	bl	800b5ec <HAL_TIM_PWM_ConfigChannel>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800585a:	f000 fa85 	bl	8005d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800585e:	1d3b      	adds	r3, r7, #4
 8005860:	2204      	movs	r2, #4
 8005862:	4619      	mov	r1, r3
 8005864:	4807      	ldr	r0, [pc, #28]	; (8005884 <MX_TIM3_Init+0xfc>)
 8005866:	f005 fec1 	bl	800b5ec <HAL_TIM_PWM_ConfigChannel>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005870:	f000 fa7a 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005874:	4803      	ldr	r0, [pc, #12]	; (8005884 <MX_TIM3_Init+0xfc>)
 8005876:	f000 fd6d 	bl	8006354 <HAL_TIM_MspPostInit>

}
 800587a:	bf00      	nop
 800587c:	3738      	adds	r7, #56	; 0x38
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	200119e4 	.word	0x200119e4
 8005888:	40000400 	.word	0x40000400

0800588c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08c      	sub	sp, #48	; 0x30
 8005890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005892:	f107 030c 	add.w	r3, r7, #12
 8005896:	2224      	movs	r2, #36	; 0x24
 8005898:	2100      	movs	r1, #0
 800589a:	4618      	mov	r0, r3
 800589c:	f006 fff0 	bl	800c880 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058a0:	1d3b      	adds	r3, r7, #4
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80058a8:	4b21      	ldr	r3, [pc, #132]	; (8005930 <MX_TIM4_Init+0xa4>)
 80058aa:	4a22      	ldr	r2, [pc, #136]	; (8005934 <MX_TIM4_Init+0xa8>)
 80058ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80058ae:	4b20      	ldr	r3, [pc, #128]	; (8005930 <MX_TIM4_Init+0xa4>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058b4:	4b1e      	ldr	r3, [pc, #120]	; (8005930 <MX_TIM4_Init+0xa4>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80058ba:	4b1d      	ldr	r3, [pc, #116]	; (8005930 <MX_TIM4_Init+0xa4>)
 80058bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80058c2:	4b1b      	ldr	r3, [pc, #108]	; (8005930 <MX_TIM4_Init+0xa4>)
 80058c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058ca:	4b19      	ldr	r3, [pc, #100]	; (8005930 <MX_TIM4_Init+0xa4>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80058d0:	2302      	movs	r3, #2
 80058d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80058d4:	2302      	movs	r3, #2
 80058d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80058d8:	2301      	movs	r3, #1
 80058da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80058dc:	2300      	movs	r3, #0
 80058de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 80058e0:	2304      	movs	r3, #4
 80058e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80058e4:	2302      	movs	r3, #2
 80058e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80058e8:	2301      	movs	r3, #1
 80058ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80058ec:	2300      	movs	r3, #0
 80058ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 4;
 80058f0:	2304      	movs	r3, #4
 80058f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80058f4:	f107 030c 	add.w	r3, r7, #12
 80058f8:	4619      	mov	r1, r3
 80058fa:	480d      	ldr	r0, [pc, #52]	; (8005930 <MX_TIM4_Init+0xa4>)
 80058fc:	f005 fc6c 	bl	800b1d8 <HAL_TIM_Encoder_Init>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8005906:	f000 fa2f 	bl	8005d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800590a:	2300      	movs	r3, #0
 800590c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800590e:	2300      	movs	r3, #0
 8005910:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005912:	1d3b      	adds	r3, r7, #4
 8005914:	4619      	mov	r1, r3
 8005916:	4806      	ldr	r0, [pc, #24]	; (8005930 <MX_TIM4_Init+0xa4>)
 8005918:	f006 fae6 	bl	800bee8 <HAL_TIMEx_MasterConfigSynchronization>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005922:	f000 fa21 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005926:	bf00      	nop
 8005928:	3730      	adds	r7, #48	; 0x30
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20011a2c 	.word	0x20011a2c
 8005934:	40000800 	.word	0x40000800

08005938 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800593e:	1d3b      	adds	r3, r7, #4
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	605a      	str	r2, [r3, #4]
 8005946:	609a      	str	r2, [r3, #8]
 8005948:	60da      	str	r2, [r3, #12]
 800594a:	611a      	str	r2, [r3, #16]
 800594c:	615a      	str	r2, [r3, #20]
 800594e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005950:	4b1c      	ldr	r3, [pc, #112]	; (80059c4 <MX_TIM10_Init+0x8c>)
 8005952:	4a1d      	ldr	r2, [pc, #116]	; (80059c8 <MX_TIM10_Init+0x90>)
 8005954:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 8005956:	4b1b      	ldr	r3, [pc, #108]	; (80059c4 <MX_TIM10_Init+0x8c>)
 8005958:	2204      	movs	r2, #4
 800595a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800595c:	4b19      	ldr	r3, [pc, #100]	; (80059c4 <MX_TIM10_Init+0x8c>)
 800595e:	2200      	movs	r2, #0
 8005960:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000;
 8005962:	4b18      	ldr	r3, [pc, #96]	; (80059c4 <MX_TIM10_Init+0x8c>)
 8005964:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005968:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800596a:	4b16      	ldr	r3, [pc, #88]	; (80059c4 <MX_TIM10_Init+0x8c>)
 800596c:	2200      	movs	r2, #0
 800596e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005970:	4b14      	ldr	r3, [pc, #80]	; (80059c4 <MX_TIM10_Init+0x8c>)
 8005972:	2280      	movs	r2, #128	; 0x80
 8005974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005976:	4813      	ldr	r0, [pc, #76]	; (80059c4 <MX_TIM10_Init+0x8c>)
 8005978:	f005 f9c0 	bl	800acfc <HAL_TIM_Base_Init>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8005982:	f000 f9f1 	bl	8005d68 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8005986:	480f      	ldr	r0, [pc, #60]	; (80059c4 <MX_TIM10_Init+0x8c>)
 8005988:	f005 fac4 	bl	800af14 <HAL_TIM_OC_Init>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8005992:	f000 f9e9 	bl	8005d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005996:	2300      	movs	r3, #0
 8005998:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80059a2:	2300      	movs	r3, #0
 80059a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80059a6:	1d3b      	adds	r3, r7, #4
 80059a8:	2200      	movs	r2, #0
 80059aa:	4619      	mov	r1, r3
 80059ac:	4805      	ldr	r0, [pc, #20]	; (80059c4 <MX_TIM10_Init+0x8c>)
 80059ae:	f005 fdc1 	bl	800b534 <HAL_TIM_OC_ConfigChannel>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80059b8:	f000 f9d6 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80059bc:	bf00      	nop
 80059be:	3720      	adds	r7, #32
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	20011a74 	.word	0x20011a74
 80059c8:	40014400 	.word	0x40014400

080059cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80059d0:	4b11      	ldr	r3, [pc, #68]	; (8005a18 <MX_USART1_UART_Init+0x4c>)
 80059d2:	4a12      	ldr	r2, [pc, #72]	; (8005a1c <MX_USART1_UART_Init+0x50>)
 80059d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80059d6:	4b10      	ldr	r3, [pc, #64]	; (8005a18 <MX_USART1_UART_Init+0x4c>)
 80059d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80059dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80059de:	4b0e      	ldr	r3, [pc, #56]	; (8005a18 <MX_USART1_UART_Init+0x4c>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80059e4:	4b0c      	ldr	r3, [pc, #48]	; (8005a18 <MX_USART1_UART_Init+0x4c>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80059ea:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <MX_USART1_UART_Init+0x4c>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80059f0:	4b09      	ldr	r3, [pc, #36]	; (8005a18 <MX_USART1_UART_Init+0x4c>)
 80059f2:	2208      	movs	r2, #8
 80059f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059f6:	4b08      	ldr	r3, [pc, #32]	; (8005a18 <MX_USART1_UART_Init+0x4c>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80059fc:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <MX_USART1_UART_Init+0x4c>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8005a02:	4805      	ldr	r0, [pc, #20]	; (8005a18 <MX_USART1_UART_Init+0x4c>)
 8005a04:	f006 faf2 	bl	800bfec <HAL_HalfDuplex_Init>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005a0e:	f000 f9ab 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005a12:	bf00      	nop
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20011abc 	.word	0x20011abc
 8005a1c:	40011000 	.word	0x40011000

08005a20 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005a24:	4b11      	ldr	r3, [pc, #68]	; (8005a6c <MX_USART6_UART_Init+0x4c>)
 8005a26:	4a12      	ldr	r2, [pc, #72]	; (8005a70 <MX_USART6_UART_Init+0x50>)
 8005a28:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005a2a:	4b10      	ldr	r3, [pc, #64]	; (8005a6c <MX_USART6_UART_Init+0x4c>)
 8005a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a30:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005a32:	4b0e      	ldr	r3, [pc, #56]	; (8005a6c <MX_USART6_UART_Init+0x4c>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005a38:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <MX_USART6_UART_Init+0x4c>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005a3e:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <MX_USART6_UART_Init+0x4c>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005a44:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <MX_USART6_UART_Init+0x4c>)
 8005a46:	220c      	movs	r2, #12
 8005a48:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a4a:	4b08      	ldr	r3, [pc, #32]	; (8005a6c <MX_USART6_UART_Init+0x4c>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a50:	4b06      	ldr	r3, [pc, #24]	; (8005a6c <MX_USART6_UART_Init+0x4c>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8005a56:	4805      	ldr	r0, [pc, #20]	; (8005a6c <MX_USART6_UART_Init+0x4c>)
 8005a58:	f006 fac8 	bl	800bfec <HAL_HalfDuplex_Init>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8005a62:	f000 f981 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005a66:	bf00      	nop
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20011b00 	.word	0x20011b00
 8005a70:	40011400 	.word	0x40011400

08005a74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	607b      	str	r3, [r7, #4]
 8005a7e:	4b1f      	ldr	r3, [pc, #124]	; (8005afc <MX_DMA_Init+0x88>)
 8005a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a82:	4a1e      	ldr	r2, [pc, #120]	; (8005afc <MX_DMA_Init+0x88>)
 8005a84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a88:	6313      	str	r3, [r2, #48]	; 0x30
 8005a8a:	4b1c      	ldr	r3, [pc, #112]	; (8005afc <MX_DMA_Init+0x88>)
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a92:	607b      	str	r3, [r7, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005a96:	2300      	movs	r3, #0
 8005a98:	603b      	str	r3, [r7, #0]
 8005a9a:	4b18      	ldr	r3, [pc, #96]	; (8005afc <MX_DMA_Init+0x88>)
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9e:	4a17      	ldr	r2, [pc, #92]	; (8005afc <MX_DMA_Init+0x88>)
 8005aa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8005aa6:	4b15      	ldr	r3, [pc, #84]	; (8005afc <MX_DMA_Init+0x88>)
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2105      	movs	r1, #5
 8005ab6:	200f      	movs	r0, #15
 8005ab8:	f001 ff93 	bl	80079e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005abc:	200f      	movs	r0, #15
 8005abe:	f001 ffac 	bl	8007a1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	2038      	movs	r0, #56	; 0x38
 8005ac8:	f001 ff8b 	bl	80079e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005acc:	2038      	movs	r0, #56	; 0x38
 8005ace:	f001 ffa4 	bl	8007a1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	203a      	movs	r0, #58	; 0x3a
 8005ad8:	f001 ff83 	bl	80079e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005adc:	203a      	movs	r0, #58	; 0x3a
 8005ade:	f001 ff9c 	bl	8007a1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	2102      	movs	r1, #2
 8005ae6:	203c      	movs	r0, #60	; 0x3c
 8005ae8:	f001 ff7b 	bl	80079e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8005aec:	203c      	movs	r0, #60	; 0x3c
 8005aee:	f001 ff94 	bl	8007a1a <HAL_NVIC_EnableIRQ>

}
 8005af2:	bf00      	nop
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	40023800 	.word	0x40023800

08005b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b06:	f107 030c 	add.w	r3, r7, #12
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	605a      	str	r2, [r3, #4]
 8005b10:	609a      	str	r2, [r3, #8]
 8005b12:	60da      	str	r2, [r3, #12]
 8005b14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b16:	2300      	movs	r3, #0
 8005b18:	60bb      	str	r3, [r7, #8]
 8005b1a:	4b35      	ldr	r3, [pc, #212]	; (8005bf0 <MX_GPIO_Init+0xf0>)
 8005b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1e:	4a34      	ldr	r2, [pc, #208]	; (8005bf0 <MX_GPIO_Init+0xf0>)
 8005b20:	f043 0301 	orr.w	r3, r3, #1
 8005b24:	6313      	str	r3, [r2, #48]	; 0x30
 8005b26:	4b32      	ldr	r3, [pc, #200]	; (8005bf0 <MX_GPIO_Init+0xf0>)
 8005b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	60bb      	str	r3, [r7, #8]
 8005b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b32:	2300      	movs	r3, #0
 8005b34:	607b      	str	r3, [r7, #4]
 8005b36:	4b2e      	ldr	r3, [pc, #184]	; (8005bf0 <MX_GPIO_Init+0xf0>)
 8005b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3a:	4a2d      	ldr	r2, [pc, #180]	; (8005bf0 <MX_GPIO_Init+0xf0>)
 8005b3c:	f043 0302 	orr.w	r3, r3, #2
 8005b40:	6313      	str	r3, [r2, #48]	; 0x30
 8005b42:	4b2b      	ldr	r3, [pc, #172]	; (8005bf0 <MX_GPIO_Init+0xf0>)
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	607b      	str	r3, [r7, #4]
 8005b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b4e:	2300      	movs	r3, #0
 8005b50:	603b      	str	r3, [r7, #0]
 8005b52:	4b27      	ldr	r3, [pc, #156]	; (8005bf0 <MX_GPIO_Init+0xf0>)
 8005b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b56:	4a26      	ldr	r2, [pc, #152]	; (8005bf0 <MX_GPIO_Init+0xf0>)
 8005b58:	f043 0304 	orr.w	r3, r3, #4
 8005b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b5e:	4b24      	ldr	r3, [pc, #144]	; (8005bf0 <MX_GPIO_Init+0xf0>)
 8005b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b62:	f003 0304 	and.w	r3, r3, #4
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b70:	4820      	ldr	r0, [pc, #128]	; (8005bf4 <MX_GPIO_Init+0xf4>)
 8005b72:	f002 fcd1 	bl	8008518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8005b76:	2201      	movs	r2, #1
 8005b78:	2110      	movs	r1, #16
 8005b7a:	481f      	ldr	r0, [pc, #124]	; (8005bf8 <MX_GPIO_Init+0xf8>)
 8005b7c:	f002 fccc 	bl	8008518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b86:	2301      	movs	r3, #1
 8005b88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8005b92:	f107 030c 	add.w	r3, r7, #12
 8005b96:	4619      	mov	r1, r3
 8005b98:	4816      	ldr	r0, [pc, #88]	; (8005bf4 <MX_GPIO_Init+0xf4>)
 8005b9a:	f002 fb39 	bl	8008210 <HAL_GPIO_Init>

  /*Configure GPIO pin : record_pin_Pin */
  GPIO_InitStruct.Pin = record_pin_Pin;
 8005b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ba2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005ba4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005baa:	2301      	movs	r3, #1
 8005bac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(record_pin_GPIO_Port, &GPIO_InitStruct);
 8005bae:	f107 030c 	add.w	r3, r7, #12
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4811      	ldr	r0, [pc, #68]	; (8005bfc <MX_GPIO_Init+0xfc>)
 8005bb6:	f002 fb2b 	bl	8008210 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 8005bba:	2310      	movs	r3, #16
 8005bbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 8005bca:	f107 030c 	add.w	r3, r7, #12
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4809      	ldr	r0, [pc, #36]	; (8005bf8 <MX_GPIO_Init+0xf8>)
 8005bd2:	f002 fb1d 	bl	8008210 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	2104      	movs	r1, #4
 8005bda:	2028      	movs	r0, #40	; 0x28
 8005bdc:	f001 ff01 	bl	80079e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005be0:	2028      	movs	r0, #40	; 0x28
 8005be2:	f001 ff1a 	bl	8007a1a <HAL_NVIC_EnableIRQ>

}
 8005be6:	bf00      	nop
 8005be8:	3720      	adds	r7, #32
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	40023800 	.word	0x40023800
 8005bf4:	40020800 	.word	0x40020800
 8005bf8:	40020000 	.word	0x40020000
 8005bfc:	40020400 	.word	0x40020400

08005c00 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */


	void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
		adc_flag=1;
 8005c08:	4b04      	ldr	r3, [pc, #16]	; (8005c1c <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	701a      	strb	r2, [r3, #0]

	}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	2000bfb8 	.word	0x2000bfb8

08005c20 <HAL_ADC_ConvCpltCallback>:
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
	{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
	adc_flag=2;
 8005c28:	4b07      	ldr	r3, [pc, #28]	; (8005c48 <HAL_ADC_ConvCpltCallback+0x28>)
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Stop_DMA(&hadc1); HAL_ADC_Start_DMA(&hadc1,& adc_source, 3072);    // try half sample rate   , its 17606  khz
 8005c2e:	4807      	ldr	r0, [pc, #28]	; (8005c4c <HAL_ADC_ConvCpltCallback+0x2c>)
 8005c30:	f001 f800 	bl	8006c34 <HAL_ADC_Stop_DMA>
 8005c34:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005c38:	4905      	ldr	r1, [pc, #20]	; (8005c50 <HAL_ADC_ConvCpltCallback+0x30>)
 8005c3a:	4804      	ldr	r0, [pc, #16]	; (8005c4c <HAL_ADC_ConvCpltCallback+0x2c>)
 8005c3c:	f000 ff0a 	bl	8006a54 <HAL_ADC_Start_DMA>

	}
 8005c40:	bf00      	nop
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	2000bfb8 	.word	0x2000bfb8
 8005c4c:	200116d0 	.word	0x200116d0
 8005c50:	200099d4 	.word	0x200099d4

08005c54 <HAL_SPI_TxRxHalfCpltCallback>:

	void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef * hspi) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]

	    if (SPI1==hspi->Instance) {
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a12      	ldr	r2, [pc, #72]	; (8005cac <HAL_SPI_TxRxHalfCpltCallback+0x58>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d11d      	bne.n	8005ca2 <HAL_SPI_TxRxHalfCpltCallback+0x4e>

				if  ((flash_read_block2[10]+   flash_read_block2[11]+  flash_read_block2[12]+  flash_read_block2[13])== 1020                  )
 8005c66:	4b12      	ldr	r3, [pc, #72]	; (8005cb0 <HAL_SPI_TxRxHalfCpltCallback+0x5c>)
 8005c68:	7a9b      	ldrb	r3, [r3, #10]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	4b10      	ldr	r3, [pc, #64]	; (8005cb0 <HAL_SPI_TxRxHalfCpltCallback+0x5c>)
 8005c6e:	7adb      	ldrb	r3, [r3, #11]
 8005c70:	4413      	add	r3, r2
 8005c72:	4a0f      	ldr	r2, [pc, #60]	; (8005cb0 <HAL_SPI_TxRxHalfCpltCallback+0x5c>)
 8005c74:	7b12      	ldrb	r2, [r2, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	4a0d      	ldr	r2, [pc, #52]	; (8005cb0 <HAL_SPI_TxRxHalfCpltCallback+0x5c>)
 8005c7a:	7b52      	ldrb	r2, [r2, #13]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8005c82:	d10e      	bne.n	8005ca2 <HAL_SPI_TxRxHalfCpltCallback+0x4e>

				    {
				    error_count++;
 8005c84:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <HAL_SPI_TxRxHalfCpltCallback+0x60>)
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	4b09      	ldr	r3, [pc, #36]	; (8005cb4 <HAL_SPI_TxRxHalfCpltCallback+0x60>)
 8005c90:	801a      	strh	r2, [r3, #0]
			memcpy(&error_data,flash_read_block2,127);  // maybe skipping address,, yup idiot Internet advice
 8005c92:	227f      	movs	r2, #127	; 0x7f
 8005c94:	4906      	ldr	r1, [pc, #24]	; (8005cb0 <HAL_SPI_TxRxHalfCpltCallback+0x5c>)
 8005c96:	4808      	ldr	r0, [pc, #32]	; (8005cb8 <HAL_SPI_TxRxHalfCpltCallback+0x64>)
 8005c98:	f006 fde4 	bl	800c864 <memcpy>

						flash_flag=1;}
 8005c9c:	4b07      	ldr	r3, [pc, #28]	; (8005cbc <HAL_SPI_TxRxHalfCpltCallback+0x68>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	701a      	strb	r2, [r3, #0]


	}		}
 8005ca2:	bf00      	nop
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	40013000 	.word	0x40013000
 8005cb0:	20010e40 	.word	0x20010e40
 8005cb4:	2000bfc2 	.word	0x2000bfc2
 8005cb8:	20011250 	.word	0x20011250
 8005cbc:	2000022c 	.word	0x2000022c

08005cc0 <HAL_SPI_TxRxCpltCallback>:




	void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
		{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]

		   if (SPI1==hspi->Instance) {
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a07      	ldr	r2, [pc, #28]	; (8005cec <HAL_SPI_TxRxCpltCallback+0x2c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d107      	bne.n	8005ce2 <HAL_SPI_TxRxCpltCallback+0x22>


		       flash_flag=2;
 8005cd2:	4b07      	ldr	r3, [pc, #28]	; (8005cf0 <HAL_SPI_TxRxCpltCallback+0x30>)
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	701a      	strb	r2, [r3, #0]
		       HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  //  end
 8005cd8:	2201      	movs	r2, #1
 8005cda:	2110      	movs	r1, #16
 8005cdc:	4805      	ldr	r0, [pc, #20]	; (8005cf4 <HAL_SPI_TxRxCpltCallback+0x34>)
 8005cde:	f002 fc1b 	bl	8008518 <HAL_GPIO_WritePin>
		   }
		}
 8005ce2:	bf00      	nop
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	40013000 	.word	0x40013000
 8005cf0:	2000022c 	.word	0x2000022c
 8005cf4:	40020000 	.word	0x40020000

08005cf8 <HAL_SPI_ErrorCallback>:


	void HAL_SPI_ErrorCallback(SPI_HandleTypeDef * hspi) {
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
	   if (SPI1==hspi->Instance) {
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a07      	ldr	r2, [pc, #28]	; (8005d24 <HAL_SPI_ErrorCallback+0x2c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d106      	bne.n	8005d18 <HAL_SPI_ErrorCallback+0x20>
error_count++;
 8005d0a:	4b07      	ldr	r3, [pc, #28]	; (8005d28 <HAL_SPI_ErrorCallback+0x30>)
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	3301      	adds	r3, #1
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	4b04      	ldr	r3, [pc, #16]	; (8005d28 <HAL_SPI_ErrorCallback+0x30>)
 8005d16:	801a      	strh	r2, [r3, #0]

		   }
	}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	40013000 	.word	0x40013000
 8005d28:	2000bfc2 	.word	0x2000bfc2

08005d2c <HAL_SPI_TxCpltCallback>:




void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
	{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
	    //
	 //   gfx_dma=1;
	//    if (SPI2==hspi->Instance) {gfx_dma=1;}


	}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == record_pin_Pin) {
 8005d4a:	88fb      	ldrh	r3, [r7, #6]
 8005d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d50:	d102      	bne.n	8005d58 <HAL_GPIO_EXTI_Callback+0x18>
   sampler.record_enable=1;
 8005d52:	4b04      	ldr	r3, [pc, #16]	; (8005d64 <HAL_GPIO_EXTI_Callback+0x24>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	701a      	strb	r2, [r3, #0]
  }
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	20000204 	.word	0x20000204

08005d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005d6c:	b672      	cpsid	i
}
 8005d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005d70:	e7fe      	b.n	8005d70 <Error_Handler+0x8>
	...

08005d74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	607b      	str	r3, [r7, #4]
 8005d7e:	4b12      	ldr	r3, [pc, #72]	; (8005dc8 <HAL_MspInit+0x54>)
 8005d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d82:	4a11      	ldr	r2, [pc, #68]	; (8005dc8 <HAL_MspInit+0x54>)
 8005d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d88:	6453      	str	r3, [r2, #68]	; 0x44
 8005d8a:	4b0f      	ldr	r3, [pc, #60]	; (8005dc8 <HAL_MspInit+0x54>)
 8005d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d92:	607b      	str	r3, [r7, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d96:	2300      	movs	r3, #0
 8005d98:	603b      	str	r3, [r7, #0]
 8005d9a:	4b0b      	ldr	r3, [pc, #44]	; (8005dc8 <HAL_MspInit+0x54>)
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	4a0a      	ldr	r2, [pc, #40]	; (8005dc8 <HAL_MspInit+0x54>)
 8005da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da4:	6413      	str	r3, [r2, #64]	; 0x40
 8005da6:	4b08      	ldr	r3, [pc, #32]	; (8005dc8 <HAL_MspInit+0x54>)
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 6, 0);
 8005db2:	2200      	movs	r2, #0
 8005db4:	2106      	movs	r1, #6
 8005db6:	f06f 0003 	mvn.w	r0, #3
 8005dba:	f001 fe12 	bl	80079e2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005dbe:	bf00      	nop
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	40023800 	.word	0x40023800

08005dcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08a      	sub	sp, #40	; 0x28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dd4:	f107 0314 	add.w	r3, r7, #20
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	605a      	str	r2, [r3, #4]
 8005dde:	609a      	str	r2, [r3, #8]
 8005de0:	60da      	str	r2, [r3, #12]
 8005de2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a3c      	ldr	r2, [pc, #240]	; (8005edc <HAL_ADC_MspInit+0x110>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d171      	bne.n	8005ed2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005dee:	2300      	movs	r3, #0
 8005df0:	613b      	str	r3, [r7, #16]
 8005df2:	4b3b      	ldr	r3, [pc, #236]	; (8005ee0 <HAL_ADC_MspInit+0x114>)
 8005df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df6:	4a3a      	ldr	r2, [pc, #232]	; (8005ee0 <HAL_ADC_MspInit+0x114>)
 8005df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8005dfe:	4b38      	ldr	r3, [pc, #224]	; (8005ee0 <HAL_ADC_MspInit+0x114>)
 8005e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e06:	613b      	str	r3, [r7, #16]
 8005e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	4b34      	ldr	r3, [pc, #208]	; (8005ee0 <HAL_ADC_MspInit+0x114>)
 8005e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e12:	4a33      	ldr	r2, [pc, #204]	; (8005ee0 <HAL_ADC_MspInit+0x114>)
 8005e14:	f043 0301 	orr.w	r3, r3, #1
 8005e18:	6313      	str	r3, [r2, #48]	; 0x30
 8005e1a:	4b31      	ldr	r3, [pc, #196]	; (8005ee0 <HAL_ADC_MspInit+0x114>)
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e26:	2300      	movs	r3, #0
 8005e28:	60bb      	str	r3, [r7, #8]
 8005e2a:	4b2d      	ldr	r3, [pc, #180]	; (8005ee0 <HAL_ADC_MspInit+0x114>)
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	4a2c      	ldr	r2, [pc, #176]	; (8005ee0 <HAL_ADC_MspInit+0x114>)
 8005e30:	f043 0302 	orr.w	r3, r3, #2
 8005e34:	6313      	str	r3, [r2, #48]	; 0x30
 8005e36:	4b2a      	ldr	r3, [pc, #168]	; (8005ee0 <HAL_ADC_MspInit+0x114>)
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	60bb      	str	r3, [r7, #8]
 8005e40:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 8005e42:	2305      	movs	r3, #5
 8005e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e46:	2303      	movs	r3, #3
 8005e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e4e:	f107 0314 	add.w	r3, r7, #20
 8005e52:	4619      	mov	r1, r3
 8005e54:	4823      	ldr	r0, [pc, #140]	; (8005ee4 <HAL_ADC_MspInit+0x118>)
 8005e56:	f002 f9db 	bl	8008210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e66:	f107 0314 	add.w	r3, r7, #20
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	481e      	ldr	r0, [pc, #120]	; (8005ee8 <HAL_ADC_MspInit+0x11c>)
 8005e6e:	f002 f9cf 	bl	8008210 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8005e72:	4b1e      	ldr	r3, [pc, #120]	; (8005eec <HAL_ADC_MspInit+0x120>)
 8005e74:	4a1e      	ldr	r2, [pc, #120]	; (8005ef0 <HAL_ADC_MspInit+0x124>)
 8005e76:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005e78:	4b1c      	ldr	r3, [pc, #112]	; (8005eec <HAL_ADC_MspInit+0x120>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e7e:	4b1b      	ldr	r3, [pc, #108]	; (8005eec <HAL_ADC_MspInit+0x120>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e84:	4b19      	ldr	r3, [pc, #100]	; (8005eec <HAL_ADC_MspInit+0x120>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005e8a:	4b18      	ldr	r3, [pc, #96]	; (8005eec <HAL_ADC_MspInit+0x120>)
 8005e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e90:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005e92:	4b16      	ldr	r3, [pc, #88]	; (8005eec <HAL_ADC_MspInit+0x120>)
 8005e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e98:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005e9a:	4b14      	ldr	r3, [pc, #80]	; (8005eec <HAL_ADC_MspInit+0x120>)
 8005e9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ea0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005ea2:	4b12      	ldr	r3, [pc, #72]	; (8005eec <HAL_ADC_MspInit+0x120>)
 8005ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ea8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005eaa:	4b10      	ldr	r3, [pc, #64]	; (8005eec <HAL_ADC_MspInit+0x120>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005eb0:	4b0e      	ldr	r3, [pc, #56]	; (8005eec <HAL_ADC_MspInit+0x120>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005eb6:	480d      	ldr	r0, [pc, #52]	; (8005eec <HAL_ADC_MspInit+0x120>)
 8005eb8:	f001 fdca 	bl	8007a50 <HAL_DMA_Init>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8005ec2:	f7ff ff51 	bl	8005d68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a08      	ldr	r2, [pc, #32]	; (8005eec <HAL_ADC_MspInit+0x120>)
 8005eca:	639a      	str	r2, [r3, #56]	; 0x38
 8005ecc:	4a07      	ldr	r2, [pc, #28]	; (8005eec <HAL_ADC_MspInit+0x120>)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005ed2:	bf00      	nop
 8005ed4:	3728      	adds	r7, #40	; 0x28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	40012000 	.word	0x40012000
 8005ee0:	40023800 	.word	0x40023800
 8005ee4:	40020000 	.word	0x40020000
 8005ee8:	40020400 	.word	0x40020400
 8005eec:	20011718 	.word	0x20011718
 8005ef0:	40026470 	.word	0x40026470

08005ef4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08a      	sub	sp, #40	; 0x28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005efc:	f107 0314 	add.w	r3, r7, #20
 8005f00:	2200      	movs	r2, #0
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	605a      	str	r2, [r3, #4]
 8005f06:	609a      	str	r2, [r3, #8]
 8005f08:	60da      	str	r2, [r3, #12]
 8005f0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a22      	ldr	r2, [pc, #136]	; (8005f9c <HAL_I2C_MspInit+0xa8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d13d      	bne.n	8005f92 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f16:	2300      	movs	r3, #0
 8005f18:	613b      	str	r3, [r7, #16]
 8005f1a:	4b21      	ldr	r3, [pc, #132]	; (8005fa0 <HAL_I2C_MspInit+0xac>)
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1e:	4a20      	ldr	r2, [pc, #128]	; (8005fa0 <HAL_I2C_MspInit+0xac>)
 8005f20:	f043 0302 	orr.w	r3, r3, #2
 8005f24:	6313      	str	r3, [r2, #48]	; 0x30
 8005f26:	4b1e      	ldr	r3, [pc, #120]	; (8005fa0 <HAL_I2C_MspInit+0xac>)
 8005f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f38:	2312      	movs	r3, #18
 8005f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f40:	2303      	movs	r3, #3
 8005f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8005f44:	2309      	movs	r3, #9
 8005f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f48:	f107 0314 	add.w	r3, r7, #20
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4815      	ldr	r0, [pc, #84]	; (8005fa4 <HAL_I2C_MspInit+0xb0>)
 8005f50:	f002 f95e 	bl	8008210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005f54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f5a:	2312      	movs	r3, #18
 8005f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f62:	2303      	movs	r3, #3
 8005f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005f66:	2304      	movs	r3, #4
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f6a:	f107 0314 	add.w	r3, r7, #20
 8005f6e:	4619      	mov	r1, r3
 8005f70:	480c      	ldr	r0, [pc, #48]	; (8005fa4 <HAL_I2C_MspInit+0xb0>)
 8005f72:	f002 f94d 	bl	8008210 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005f76:	2300      	movs	r3, #0
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	4b09      	ldr	r3, [pc, #36]	; (8005fa0 <HAL_I2C_MspInit+0xac>)
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	4a08      	ldr	r2, [pc, #32]	; (8005fa0 <HAL_I2C_MspInit+0xac>)
 8005f80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f84:	6413      	str	r3, [r2, #64]	; 0x40
 8005f86:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <HAL_I2C_MspInit+0xac>)
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005f92:	bf00      	nop
 8005f94:	3728      	adds	r7, #40	; 0x28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	40005800 	.word	0x40005800
 8005fa0:	40023800 	.word	0x40023800
 8005fa4:	40020400 	.word	0x40020400

08005fa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08c      	sub	sp, #48	; 0x30
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fb0:	f107 031c 	add.w	r3, r7, #28
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	605a      	str	r2, [r3, #4]
 8005fba:	609a      	str	r2, [r3, #8]
 8005fbc:	60da      	str	r2, [r3, #12]
 8005fbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a77      	ldr	r2, [pc, #476]	; (80061a4 <HAL_SPI_MspInit+0x1fc>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	f040 8089 	bne.w	80060de <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005fcc:	2300      	movs	r3, #0
 8005fce:	61bb      	str	r3, [r7, #24]
 8005fd0:	4b75      	ldr	r3, [pc, #468]	; (80061a8 <HAL_SPI_MspInit+0x200>)
 8005fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd4:	4a74      	ldr	r2, [pc, #464]	; (80061a8 <HAL_SPI_MspInit+0x200>)
 8005fd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005fda:	6453      	str	r3, [r2, #68]	; 0x44
 8005fdc:	4b72      	ldr	r3, [pc, #456]	; (80061a8 <HAL_SPI_MspInit+0x200>)
 8005fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fe4:	61bb      	str	r3, [r7, #24]
 8005fe6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	4b6e      	ldr	r3, [pc, #440]	; (80061a8 <HAL_SPI_MspInit+0x200>)
 8005fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff0:	4a6d      	ldr	r2, [pc, #436]	; (80061a8 <HAL_SPI_MspInit+0x200>)
 8005ff2:	f043 0301 	orr.w	r3, r3, #1
 8005ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8005ff8:	4b6b      	ldr	r3, [pc, #428]	; (80061a8 <HAL_SPI_MspInit+0x200>)
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8006004:	23e0      	movs	r3, #224	; 0xe0
 8006006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006008:	2302      	movs	r3, #2
 800600a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800600c:	2300      	movs	r3, #0
 800600e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006010:	2302      	movs	r3, #2
 8006012:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006014:	2305      	movs	r3, #5
 8006016:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006018:	f107 031c 	add.w	r3, r7, #28
 800601c:	4619      	mov	r1, r3
 800601e:	4863      	ldr	r0, [pc, #396]	; (80061ac <HAL_SPI_MspInit+0x204>)
 8006020:	f002 f8f6 	bl	8008210 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8006024:	4b62      	ldr	r3, [pc, #392]	; (80061b0 <HAL_SPI_MspInit+0x208>)
 8006026:	4a63      	ldr	r2, [pc, #396]	; (80061b4 <HAL_SPI_MspInit+0x20c>)
 8006028:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800602a:	4b61      	ldr	r3, [pc, #388]	; (80061b0 <HAL_SPI_MspInit+0x208>)
 800602c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006030:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006032:	4b5f      	ldr	r3, [pc, #380]	; (80061b0 <HAL_SPI_MspInit+0x208>)
 8006034:	2200      	movs	r2, #0
 8006036:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006038:	4b5d      	ldr	r3, [pc, #372]	; (80061b0 <HAL_SPI_MspInit+0x208>)
 800603a:	2200      	movs	r2, #0
 800603c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800603e:	4b5c      	ldr	r3, [pc, #368]	; (80061b0 <HAL_SPI_MspInit+0x208>)
 8006040:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006044:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006046:	4b5a      	ldr	r3, [pc, #360]	; (80061b0 <HAL_SPI_MspInit+0x208>)
 8006048:	2200      	movs	r2, #0
 800604a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800604c:	4b58      	ldr	r3, [pc, #352]	; (80061b0 <HAL_SPI_MspInit+0x208>)
 800604e:	2200      	movs	r2, #0
 8006050:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8006052:	4b57      	ldr	r3, [pc, #348]	; (80061b0 <HAL_SPI_MspInit+0x208>)
 8006054:	2200      	movs	r2, #0
 8006056:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006058:	4b55      	ldr	r3, [pc, #340]	; (80061b0 <HAL_SPI_MspInit+0x208>)
 800605a:	2200      	movs	r2, #0
 800605c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800605e:	4b54      	ldr	r3, [pc, #336]	; (80061b0 <HAL_SPI_MspInit+0x208>)
 8006060:	2200      	movs	r2, #0
 8006062:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8006064:	4852      	ldr	r0, [pc, #328]	; (80061b0 <HAL_SPI_MspInit+0x208>)
 8006066:	f001 fcf3 	bl	8007a50 <HAL_DMA_Init>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8006070:	f7ff fe7a 	bl	8005d68 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a4e      	ldr	r2, [pc, #312]	; (80061b0 <HAL_SPI_MspInit+0x208>)
 8006078:	64da      	str	r2, [r3, #76]	; 0x4c
 800607a:	4a4d      	ldr	r2, [pc, #308]	; (80061b0 <HAL_SPI_MspInit+0x208>)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8006080:	4b4d      	ldr	r3, [pc, #308]	; (80061b8 <HAL_SPI_MspInit+0x210>)
 8006082:	4a4e      	ldr	r2, [pc, #312]	; (80061bc <HAL_SPI_MspInit+0x214>)
 8006084:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8006086:	4b4c      	ldr	r3, [pc, #304]	; (80061b8 <HAL_SPI_MspInit+0x210>)
 8006088:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800608c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800608e:	4b4a      	ldr	r3, [pc, #296]	; (80061b8 <HAL_SPI_MspInit+0x210>)
 8006090:	2240      	movs	r2, #64	; 0x40
 8006092:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006094:	4b48      	ldr	r3, [pc, #288]	; (80061b8 <HAL_SPI_MspInit+0x210>)
 8006096:	2200      	movs	r2, #0
 8006098:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800609a:	4b47      	ldr	r3, [pc, #284]	; (80061b8 <HAL_SPI_MspInit+0x210>)
 800609c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060a0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060a2:	4b45      	ldr	r3, [pc, #276]	; (80061b8 <HAL_SPI_MspInit+0x210>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060a8:	4b43      	ldr	r3, [pc, #268]	; (80061b8 <HAL_SPI_MspInit+0x210>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80060ae:	4b42      	ldr	r3, [pc, #264]	; (80061b8 <HAL_SPI_MspInit+0x210>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80060b4:	4b40      	ldr	r3, [pc, #256]	; (80061b8 <HAL_SPI_MspInit+0x210>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80060ba:	4b3f      	ldr	r3, [pc, #252]	; (80061b8 <HAL_SPI_MspInit+0x210>)
 80060bc:	2200      	movs	r2, #0
 80060be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80060c0:	483d      	ldr	r0, [pc, #244]	; (80061b8 <HAL_SPI_MspInit+0x210>)
 80060c2:	f001 fcc5 	bl	8007a50 <HAL_DMA_Init>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80060cc:	f7ff fe4c 	bl	8005d68 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a39      	ldr	r2, [pc, #228]	; (80061b8 <HAL_SPI_MspInit+0x210>)
 80060d4:	649a      	str	r2, [r3, #72]	; 0x48
 80060d6:	4a38      	ldr	r2, [pc, #224]	; (80061b8 <HAL_SPI_MspInit+0x210>)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80060dc:	e05e      	b.n	800619c <HAL_SPI_MspInit+0x1f4>
  else if(hspi->Instance==SPI2)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a37      	ldr	r2, [pc, #220]	; (80061c0 <HAL_SPI_MspInit+0x218>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d159      	bne.n	800619c <HAL_SPI_MspInit+0x1f4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80060e8:	2300      	movs	r3, #0
 80060ea:	613b      	str	r3, [r7, #16]
 80060ec:	4b2e      	ldr	r3, [pc, #184]	; (80061a8 <HAL_SPI_MspInit+0x200>)
 80060ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f0:	4a2d      	ldr	r2, [pc, #180]	; (80061a8 <HAL_SPI_MspInit+0x200>)
 80060f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060f6:	6413      	str	r3, [r2, #64]	; 0x40
 80060f8:	4b2b      	ldr	r3, [pc, #172]	; (80061a8 <HAL_SPI_MspInit+0x200>)
 80060fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006104:	2300      	movs	r3, #0
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	4b27      	ldr	r3, [pc, #156]	; (80061a8 <HAL_SPI_MspInit+0x200>)
 800610a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610c:	4a26      	ldr	r2, [pc, #152]	; (80061a8 <HAL_SPI_MspInit+0x200>)
 800610e:	f043 0302 	orr.w	r3, r3, #2
 8006112:	6313      	str	r3, [r2, #48]	; 0x30
 8006114:	4b24      	ldr	r3, [pc, #144]	; (80061a8 <HAL_SPI_MspInit+0x200>)
 8006116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006118:	f003 0302 	and.w	r3, r3, #2
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8006120:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8006124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006126:	2302      	movs	r3, #2
 8006128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800612a:	2300      	movs	r3, #0
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800612e:	2303      	movs	r3, #3
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006132:	2305      	movs	r3, #5
 8006134:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006136:	f107 031c 	add.w	r3, r7, #28
 800613a:	4619      	mov	r1, r3
 800613c:	4821      	ldr	r0, [pc, #132]	; (80061c4 <HAL_SPI_MspInit+0x21c>)
 800613e:	f002 f867 	bl	8008210 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8006142:	4b21      	ldr	r3, [pc, #132]	; (80061c8 <HAL_SPI_MspInit+0x220>)
 8006144:	4a21      	ldr	r2, [pc, #132]	; (80061cc <HAL_SPI_MspInit+0x224>)
 8006146:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8006148:	4b1f      	ldr	r3, [pc, #124]	; (80061c8 <HAL_SPI_MspInit+0x220>)
 800614a:	2200      	movs	r2, #0
 800614c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800614e:	4b1e      	ldr	r3, [pc, #120]	; (80061c8 <HAL_SPI_MspInit+0x220>)
 8006150:	2240      	movs	r2, #64	; 0x40
 8006152:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006154:	4b1c      	ldr	r3, [pc, #112]	; (80061c8 <HAL_SPI_MspInit+0x220>)
 8006156:	2200      	movs	r2, #0
 8006158:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800615a:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <HAL_SPI_MspInit+0x220>)
 800615c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006160:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006162:	4b19      	ldr	r3, [pc, #100]	; (80061c8 <HAL_SPI_MspInit+0x220>)
 8006164:	2200      	movs	r2, #0
 8006166:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006168:	4b17      	ldr	r3, [pc, #92]	; (80061c8 <HAL_SPI_MspInit+0x220>)
 800616a:	2200      	movs	r2, #0
 800616c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800616e:	4b16      	ldr	r3, [pc, #88]	; (80061c8 <HAL_SPI_MspInit+0x220>)
 8006170:	2200      	movs	r2, #0
 8006172:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006174:	4b14      	ldr	r3, [pc, #80]	; (80061c8 <HAL_SPI_MspInit+0x220>)
 8006176:	2200      	movs	r2, #0
 8006178:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800617a:	4b13      	ldr	r3, [pc, #76]	; (80061c8 <HAL_SPI_MspInit+0x220>)
 800617c:	2200      	movs	r2, #0
 800617e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8006180:	4811      	ldr	r0, [pc, #68]	; (80061c8 <HAL_SPI_MspInit+0x220>)
 8006182:	f001 fc65 	bl	8007a50 <HAL_DMA_Init>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <HAL_SPI_MspInit+0x1e8>
      Error_Handler();
 800618c:	f7ff fdec 	bl	8005d68 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a0d      	ldr	r2, [pc, #52]	; (80061c8 <HAL_SPI_MspInit+0x220>)
 8006194:	649a      	str	r2, [r3, #72]	; 0x48
 8006196:	4a0c      	ldr	r2, [pc, #48]	; (80061c8 <HAL_SPI_MspInit+0x220>)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800619c:	bf00      	nop
 800619e:	3730      	adds	r7, #48	; 0x30
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	40013000 	.word	0x40013000
 80061a8:	40023800 	.word	0x40023800
 80061ac:	40020000 	.word	0x40020000
 80061b0:	2001187c 	.word	0x2001187c
 80061b4:	40026410 	.word	0x40026410
 80061b8:	200118dc 	.word	0x200118dc
 80061bc:	40026440 	.word	0x40026440
 80061c0:	40003800 	.word	0x40003800
 80061c4:	40020400 	.word	0x40020400
 80061c8:	2001193c 	.word	0x2001193c
 80061cc:	40026070 	.word	0x40026070

080061d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08c      	sub	sp, #48	; 0x30
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061d8:	f107 031c 	add.w	r3, r7, #28
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	605a      	str	r2, [r3, #4]
 80061e2:	609a      	str	r2, [r3, #8]
 80061e4:	60da      	str	r2, [r3, #12]
 80061e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f0:	d12d      	bne.n	800624e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80061f2:	2300      	movs	r3, #0
 80061f4:	61bb      	str	r3, [r7, #24]
 80061f6:	4b30      	ldr	r3, [pc, #192]	; (80062b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	4a2f      	ldr	r2, [pc, #188]	; (80062b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80061fc:	f043 0301 	orr.w	r3, r3, #1
 8006200:	6413      	str	r3, [r2, #64]	; 0x40
 8006202:	4b2d      	ldr	r3, [pc, #180]	; (80062b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	61bb      	str	r3, [r7, #24]
 800620c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800620e:	2300      	movs	r3, #0
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	4b29      	ldr	r3, [pc, #164]	; (80062b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006216:	4a28      	ldr	r2, [pc, #160]	; (80062b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006218:	f043 0301 	orr.w	r3, r3, #1
 800621c:	6313      	str	r3, [r2, #48]	; 0x30
 800621e:	4b26      	ldr	r3, [pc, #152]	; (80062b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 800622a:	f248 0302 	movw	r3, #32770	; 0x8002
 800622e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006230:	2302      	movs	r3, #2
 8006232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006234:	2301      	movs	r3, #1
 8006236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006238:	2300      	movs	r3, #0
 800623a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800623c:	2301      	movs	r3, #1
 800623e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006240:	f107 031c 	add.w	r3, r7, #28
 8006244:	4619      	mov	r1, r3
 8006246:	481d      	ldr	r0, [pc, #116]	; (80062bc <HAL_TIM_Encoder_MspInit+0xec>)
 8006248:	f001 ffe2 	bl	8008210 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800624c:	e030      	b.n	80062b0 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1b      	ldr	r2, [pc, #108]	; (80062c0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d12b      	bne.n	80062b0 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006258:	2300      	movs	r3, #0
 800625a:	613b      	str	r3, [r7, #16]
 800625c:	4b16      	ldr	r3, [pc, #88]	; (80062b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800625e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006260:	4a15      	ldr	r2, [pc, #84]	; (80062b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006262:	f043 0304 	orr.w	r3, r3, #4
 8006266:	6413      	str	r3, [r2, #64]	; 0x40
 8006268:	4b13      	ldr	r3, [pc, #76]	; (80062b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800626a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	613b      	str	r3, [r7, #16]
 8006272:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	4b0f      	ldr	r3, [pc, #60]	; (80062b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627c:	4a0e      	ldr	r2, [pc, #56]	; (80062b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800627e:	f043 0302 	orr.w	r3, r3, #2
 8006282:	6313      	str	r3, [r2, #48]	; 0x30
 8006284:	4b0c      	ldr	r3, [pc, #48]	; (80062b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	60fb      	str	r3, [r7, #12]
 800628e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006290:	23c0      	movs	r3, #192	; 0xc0
 8006292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006294:	2302      	movs	r3, #2
 8006296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006298:	2301      	movs	r3, #1
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800629c:	2300      	movs	r3, #0
 800629e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80062a0:	2302      	movs	r3, #2
 80062a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062a4:	f107 031c 	add.w	r3, r7, #28
 80062a8:	4619      	mov	r1, r3
 80062aa:	4806      	ldr	r0, [pc, #24]	; (80062c4 <HAL_TIM_Encoder_MspInit+0xf4>)
 80062ac:	f001 ffb0 	bl	8008210 <HAL_GPIO_Init>
}
 80062b0:	bf00      	nop
 80062b2:	3730      	adds	r7, #48	; 0x30
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40023800 	.word	0x40023800
 80062bc:	40020000 	.word	0x40020000
 80062c0:	40000800 	.word	0x40000800
 80062c4:	40020400 	.word	0x40020400

080062c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a1c      	ldr	r2, [pc, #112]	; (8006348 <HAL_TIM_Base_MspInit+0x80>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d116      	bne.n	8006308 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	4b1b      	ldr	r3, [pc, #108]	; (800634c <HAL_TIM_Base_MspInit+0x84>)
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	4a1a      	ldr	r2, [pc, #104]	; (800634c <HAL_TIM_Base_MspInit+0x84>)
 80062e4:	f043 0302 	orr.w	r3, r3, #2
 80062e8:	6413      	str	r3, [r2, #64]	; 0x40
 80062ea:	4b18      	ldr	r3, [pc, #96]	; (800634c <HAL_TIM_Base_MspInit+0x84>)
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80062f6:	2200      	movs	r2, #0
 80062f8:	2101      	movs	r1, #1
 80062fa:	201d      	movs	r0, #29
 80062fc:	f001 fb71 	bl	80079e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006300:	201d      	movs	r0, #29
 8006302:	f001 fb8a 	bl	8007a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8006306:	e01a      	b.n	800633e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a10      	ldr	r2, [pc, #64]	; (8006350 <HAL_TIM_Base_MspInit+0x88>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d115      	bne.n	800633e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006312:	2300      	movs	r3, #0
 8006314:	60bb      	str	r3, [r7, #8]
 8006316:	4b0d      	ldr	r3, [pc, #52]	; (800634c <HAL_TIM_Base_MspInit+0x84>)
 8006318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631a:	4a0c      	ldr	r2, [pc, #48]	; (800634c <HAL_TIM_Base_MspInit+0x84>)
 800631c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006320:	6453      	str	r3, [r2, #68]	; 0x44
 8006322:	4b0a      	ldr	r3, [pc, #40]	; (800634c <HAL_TIM_Base_MspInit+0x84>)
 8006324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800632a:	60bb      	str	r3, [r7, #8]
 800632c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 800632e:	2200      	movs	r2, #0
 8006330:	2103      	movs	r1, #3
 8006332:	2019      	movs	r0, #25
 8006334:	f001 fb55 	bl	80079e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006338:	2019      	movs	r0, #25
 800633a:	f001 fb6e 	bl	8007a1a <HAL_NVIC_EnableIRQ>
}
 800633e:	bf00      	nop
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	40000400 	.word	0x40000400
 800634c:	40023800 	.word	0x40023800
 8006350:	40014400 	.word	0x40014400

08006354 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800635c:	f107 030c 	add.w	r3, r7, #12
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	605a      	str	r2, [r3, #4]
 8006366:	609a      	str	r2, [r3, #8]
 8006368:	60da      	str	r2, [r3, #12]
 800636a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a12      	ldr	r2, [pc, #72]	; (80063bc <HAL_TIM_MspPostInit+0x68>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d11d      	bne.n	80063b2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006376:	2300      	movs	r3, #0
 8006378:	60bb      	str	r3, [r7, #8]
 800637a:	4b11      	ldr	r3, [pc, #68]	; (80063c0 <HAL_TIM_MspPostInit+0x6c>)
 800637c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637e:	4a10      	ldr	r2, [pc, #64]	; (80063c0 <HAL_TIM_MspPostInit+0x6c>)
 8006380:	f043 0302 	orr.w	r3, r3, #2
 8006384:	6313      	str	r3, [r2, #48]	; 0x30
 8006386:	4b0e      	ldr	r3, [pc, #56]	; (80063c0 <HAL_TIM_MspPostInit+0x6c>)
 8006388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	60bb      	str	r3, [r7, #8]
 8006390:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006392:	2330      	movs	r3, #48	; 0x30
 8006394:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006396:	2302      	movs	r3, #2
 8006398:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800639a:	2300      	movs	r3, #0
 800639c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800639e:	2300      	movs	r3, #0
 80063a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80063a2:	2302      	movs	r3, #2
 80063a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063a6:	f107 030c 	add.w	r3, r7, #12
 80063aa:	4619      	mov	r1, r3
 80063ac:	4805      	ldr	r0, [pc, #20]	; (80063c4 <HAL_TIM_MspPostInit+0x70>)
 80063ae:	f001 ff2f 	bl	8008210 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80063b2:	bf00      	nop
 80063b4:	3720      	adds	r7, #32
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	40000400 	.word	0x40000400
 80063c0:	40023800 	.word	0x40023800
 80063c4:	40020400 	.word	0x40020400

080063c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08c      	sub	sp, #48	; 0x30
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063d0:	f107 031c 	add.w	r3, r7, #28
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	605a      	str	r2, [r3, #4]
 80063da:	609a      	str	r2, [r3, #8]
 80063dc:	60da      	str	r2, [r3, #12]
 80063de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a33      	ldr	r2, [pc, #204]	; (80064b4 <HAL_UART_MspInit+0xec>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d12d      	bne.n	8006446 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80063ea:	2300      	movs	r3, #0
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	4b32      	ldr	r3, [pc, #200]	; (80064b8 <HAL_UART_MspInit+0xf0>)
 80063f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f2:	4a31      	ldr	r2, [pc, #196]	; (80064b8 <HAL_UART_MspInit+0xf0>)
 80063f4:	f043 0310 	orr.w	r3, r3, #16
 80063f8:	6453      	str	r3, [r2, #68]	; 0x44
 80063fa:	4b2f      	ldr	r3, [pc, #188]	; (80064b8 <HAL_UART_MspInit+0xf0>)
 80063fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	61bb      	str	r3, [r7, #24]
 8006404:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006406:	2300      	movs	r3, #0
 8006408:	617b      	str	r3, [r7, #20]
 800640a:	4b2b      	ldr	r3, [pc, #172]	; (80064b8 <HAL_UART_MspInit+0xf0>)
 800640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640e:	4a2a      	ldr	r2, [pc, #168]	; (80064b8 <HAL_UART_MspInit+0xf0>)
 8006410:	f043 0301 	orr.w	r3, r3, #1
 8006414:	6313      	str	r3, [r2, #48]	; 0x30
 8006416:	4b28      	ldr	r3, [pc, #160]	; (80064b8 <HAL_UART_MspInit+0xf0>)
 8006418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006422:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006428:	2302      	movs	r3, #2
 800642a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800642c:	2300      	movs	r3, #0
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006430:	2300      	movs	r3, #0
 8006432:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006434:	2307      	movs	r3, #7
 8006436:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006438:	f107 031c 	add.w	r3, r7, #28
 800643c:	4619      	mov	r1, r3
 800643e:	481f      	ldr	r0, [pc, #124]	; (80064bc <HAL_UART_MspInit+0xf4>)
 8006440:	f001 fee6 	bl	8008210 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006444:	e031      	b.n	80064aa <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a1d      	ldr	r2, [pc, #116]	; (80064c0 <HAL_UART_MspInit+0xf8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d12c      	bne.n	80064aa <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006450:	2300      	movs	r3, #0
 8006452:	613b      	str	r3, [r7, #16]
 8006454:	4b18      	ldr	r3, [pc, #96]	; (80064b8 <HAL_UART_MspInit+0xf0>)
 8006456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006458:	4a17      	ldr	r2, [pc, #92]	; (80064b8 <HAL_UART_MspInit+0xf0>)
 800645a:	f043 0320 	orr.w	r3, r3, #32
 800645e:	6453      	str	r3, [r2, #68]	; 0x44
 8006460:	4b15      	ldr	r3, [pc, #84]	; (80064b8 <HAL_UART_MspInit+0xf0>)
 8006462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006464:	f003 0320 	and.w	r3, r3, #32
 8006468:	613b      	str	r3, [r7, #16]
 800646a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800646c:	2300      	movs	r3, #0
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	4b11      	ldr	r3, [pc, #68]	; (80064b8 <HAL_UART_MspInit+0xf0>)
 8006472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006474:	4a10      	ldr	r2, [pc, #64]	; (80064b8 <HAL_UART_MspInit+0xf0>)
 8006476:	f043 0301 	orr.w	r3, r3, #1
 800647a:	6313      	str	r3, [r2, #48]	; 0x30
 800647c:	4b0e      	ldr	r3, [pc, #56]	; (80064b8 <HAL_UART_MspInit+0xf0>)
 800647e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	60fb      	str	r3, [r7, #12]
 8006486:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006488:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800648c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800648e:	2302      	movs	r3, #2
 8006490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006492:	2301      	movs	r3, #1
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006496:	2300      	movs	r3, #0
 8006498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800649a:	2308      	movs	r3, #8
 800649c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800649e:	f107 031c 	add.w	r3, r7, #28
 80064a2:	4619      	mov	r1, r3
 80064a4:	4805      	ldr	r0, [pc, #20]	; (80064bc <HAL_UART_MspInit+0xf4>)
 80064a6:	f001 feb3 	bl	8008210 <HAL_GPIO_Init>
}
 80064aa:	bf00      	nop
 80064ac:	3730      	adds	r7, #48	; 0x30
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	40011000 	.word	0x40011000
 80064b8:	40023800 	.word	0x40023800
 80064bc:	40020000 	.word	0x40020000
 80064c0:	40011400 	.word	0x40011400

080064c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80064c4:	b480      	push	{r7}
 80064c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80064c8:	e7fe      	b.n	80064c8 <NMI_Handler+0x4>

080064ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80064ca:	b480      	push	{r7}
 80064cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80064ce:	e7fe      	b.n	80064ce <HardFault_Handler+0x4>

080064d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80064d4:	e7fe      	b.n	80064d4 <MemManage_Handler+0x4>

080064d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80064d6:	b480      	push	{r7}
 80064d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80064da:	e7fe      	b.n	80064da <BusFault_Handler+0x4>

080064dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80064e0:	e7fe      	b.n	80064e0 <UsageFault_Handler+0x4>

080064e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80064e2:	b480      	push	{r7}
 80064e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80064e6:	bf00      	nop
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80064f4:	bf00      	nop
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80064fe:	b480      	push	{r7}
 8006500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006502:	bf00      	nop
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006510:	f000 f8d8 	bl	80066c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006514:	bf00      	nop
 8006516:	bd80      	pop	{r7, pc}

08006518 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800651c:	4802      	ldr	r0, [pc, #8]	; (8006528 <DMA1_Stream4_IRQHandler+0x10>)
 800651e:	f001 fc0d 	bl	8007d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006522:	bf00      	nop
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	2001193c 	.word	0x2001193c

0800652c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006530:	4802      	ldr	r0, [pc, #8]	; (800653c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006532:	f004 fef7 	bl	800b324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006536:	bf00      	nop
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20011a74 	.word	0x20011a74

08006540 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006544:	4802      	ldr	r0, [pc, #8]	; (8006550 <TIM3_IRQHandler+0x10>)
 8006546:	f004 feed 	bl	800b324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800654a:	bf00      	nop
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	200119e4 	.word	0x200119e4

08006554 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(record_pin_Pin);
 8006558:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800655c:	f001 fff6 	bl	800854c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006560:	bf00      	nop
 8006562:	bd80      	pop	{r7, pc}

08006564 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8006568:	4802      	ldr	r0, [pc, #8]	; (8006574 <DMA2_Stream0_IRQHandler+0x10>)
 800656a:	f001 fbe7 	bl	8007d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800656e:	bf00      	nop
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	2001187c 	.word	0x2001187c

08006578 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800657c:	4802      	ldr	r0, [pc, #8]	; (8006588 <DMA2_Stream2_IRQHandler+0x10>)
 800657e:	f001 fbdd 	bl	8007d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006582:	bf00      	nop
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	200118dc 	.word	0x200118dc

0800658c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006590:	4802      	ldr	r0, [pc, #8]	; (800659c <DMA2_Stream4_IRQHandler+0x10>)
 8006592:	f001 fbd3 	bl	8007d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8006596:	bf00      	nop
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20011718 	.word	0x20011718

080065a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80065a0:	b480      	push	{r7}
 80065a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80065a4:	4b08      	ldr	r3, [pc, #32]	; (80065c8 <SystemInit+0x28>)
 80065a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065aa:	4a07      	ldr	r2, [pc, #28]	; (80065c8 <SystemInit+0x28>)
 80065ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80065b4:	4b04      	ldr	r3, [pc, #16]	; (80065c8 <SystemInit+0x28>)
 80065b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80065ba:	609a      	str	r2, [r3, #8]
#endif
}
 80065bc:	bf00      	nop
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	e000ed00 	.word	0xe000ed00

080065cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80065cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006604 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80065d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80065d2:	e003      	b.n	80065dc <LoopCopyDataInit>

080065d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80065d4:	4b0c      	ldr	r3, [pc, #48]	; (8006608 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80065d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80065d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80065da:	3104      	adds	r1, #4

080065dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80065dc:	480b      	ldr	r0, [pc, #44]	; (800660c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80065de:	4b0c      	ldr	r3, [pc, #48]	; (8006610 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80065e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80065e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80065e4:	d3f6      	bcc.n	80065d4 <CopyDataInit>
  ldr  r2, =_sbss
 80065e6:	4a0b      	ldr	r2, [pc, #44]	; (8006614 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80065e8:	e002      	b.n	80065f0 <LoopFillZerobss>

080065ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80065ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80065ec:	f842 3b04 	str.w	r3, [r2], #4

080065f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80065f0:	4b09      	ldr	r3, [pc, #36]	; (8006618 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80065f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80065f4:	d3f9      	bcc.n	80065ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80065f6:	f7ff ffd3 	bl	80065a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80065fa:	f006 f90f 	bl	800c81c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80065fe:	f7fe fb1f 	bl	8004c40 <main>
  bx  lr    
 8006602:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006604:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006608:	0800eb34 	.word	0x0800eb34
  ldr  r0, =_sdata
 800660c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006610:	200084d8 	.word	0x200084d8
  ldr  r2, =_sbss
 8006614:	200084d8 	.word	0x200084d8
  ldr  r3, = _ebss
 8006618:	20011b48 	.word	0x20011b48

0800661c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800661c:	e7fe      	b.n	800661c <ADC_IRQHandler>
	...

08006620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006624:	4b0e      	ldr	r3, [pc, #56]	; (8006660 <HAL_Init+0x40>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a0d      	ldr	r2, [pc, #52]	; (8006660 <HAL_Init+0x40>)
 800662a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800662e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006630:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <HAL_Init+0x40>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a0a      	ldr	r2, [pc, #40]	; (8006660 <HAL_Init+0x40>)
 8006636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800663a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800663c:	4b08      	ldr	r3, [pc, #32]	; (8006660 <HAL_Init+0x40>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a07      	ldr	r2, [pc, #28]	; (8006660 <HAL_Init+0x40>)
 8006642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006648:	2003      	movs	r0, #3
 800664a:	f001 f9bf 	bl	80079cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800664e:	2000      	movs	r0, #0
 8006650:	f000 f808 	bl	8006664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006654:	f7ff fb8e 	bl	8005d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	40023c00 	.word	0x40023c00

08006664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800666c:	4b12      	ldr	r3, [pc, #72]	; (80066b8 <HAL_InitTick+0x54>)
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	4b12      	ldr	r3, [pc, #72]	; (80066bc <HAL_InitTick+0x58>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	4619      	mov	r1, r3
 8006676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800667a:	fbb3 f3f1 	udiv	r3, r3, r1
 800667e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006682:	4618      	mov	r0, r3
 8006684:	f001 f9d7 	bl	8007a36 <HAL_SYSTICK_Config>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e00e      	b.n	80066b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b0f      	cmp	r3, #15
 8006696:	d80a      	bhi.n	80066ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006698:	2200      	movs	r2, #0
 800669a:	6879      	ldr	r1, [r7, #4]
 800669c:	f04f 30ff 	mov.w	r0, #4294967295
 80066a0:	f001 f99f 	bl	80079e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80066a4:	4a06      	ldr	r2, [pc, #24]	; (80066c0 <HAL_InitTick+0x5c>)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	e000      	b.n	80066b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	20008468 	.word	0x20008468
 80066bc:	20008470 	.word	0x20008470
 80066c0:	2000846c 	.word	0x2000846c

080066c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80066c4:	b480      	push	{r7}
 80066c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80066c8:	4b06      	ldr	r3, [pc, #24]	; (80066e4 <HAL_IncTick+0x20>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	461a      	mov	r2, r3
 80066ce:	4b06      	ldr	r3, [pc, #24]	; (80066e8 <HAL_IncTick+0x24>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4413      	add	r3, r2
 80066d4:	4a04      	ldr	r2, [pc, #16]	; (80066e8 <HAL_IncTick+0x24>)
 80066d6:	6013      	str	r3, [r2, #0]
}
 80066d8:	bf00      	nop
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	20008470 	.word	0x20008470
 80066e8:	20011b44 	.word	0x20011b44

080066ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
  return uwTick;
 80066f0:	4b03      	ldr	r3, [pc, #12]	; (8006700 <HAL_GetTick+0x14>)
 80066f2:	681b      	ldr	r3, [r3, #0]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	20011b44 	.word	0x20011b44

08006704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800670c:	f7ff ffee 	bl	80066ec <HAL_GetTick>
 8006710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671c:	d005      	beq.n	800672a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800671e:	4b0a      	ldr	r3, [pc, #40]	; (8006748 <HAL_Delay+0x44>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	461a      	mov	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4413      	add	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800672a:	bf00      	nop
 800672c:	f7ff ffde 	bl	80066ec <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	429a      	cmp	r2, r3
 800673a:	d8f7      	bhi.n	800672c <HAL_Delay+0x28>
  {
  }
}
 800673c:	bf00      	nop
 800673e:	bf00      	nop
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20008470 	.word	0x20008470

0800674c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e033      	b.n	80067ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	d109      	bne.n	800677e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7ff fb2e 	bl	8005dcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006782:	f003 0310 	and.w	r3, r3, #16
 8006786:	2b00      	cmp	r3, #0
 8006788:	d118      	bne.n	80067bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006792:	f023 0302 	bic.w	r3, r3, #2
 8006796:	f043 0202 	orr.w	r2, r3, #2
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fbde 	bl	8006f60 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	f023 0303 	bic.w	r3, r3, #3
 80067b2:	f043 0201 	orr.w	r2, r3, #1
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	641a      	str	r2, [r3, #64]	; 0x40
 80067ba:	e001      	b.n	80067c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
	...

080067d4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80067dc:	2300      	movs	r3, #0
 80067de:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d101      	bne.n	80067ee <HAL_ADC_Start+0x1a>
 80067ea:	2302      	movs	r3, #2
 80067ec:	e097      	b.n	800691e <HAL_ADC_Start+0x14a>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b01      	cmp	r3, #1
 8006802:	d018      	beq.n	8006836 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689a      	ldr	r2, [r3, #8]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f042 0201 	orr.w	r2, r2, #1
 8006812:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006814:	4b45      	ldr	r3, [pc, #276]	; (800692c <HAL_ADC_Start+0x158>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a45      	ldr	r2, [pc, #276]	; (8006930 <HAL_ADC_Start+0x15c>)
 800681a:	fba2 2303 	umull	r2, r3, r2, r3
 800681e:	0c9a      	lsrs	r2, r3, #18
 8006820:	4613      	mov	r3, r2
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	4413      	add	r3, r2
 8006826:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006828:	e002      	b.n	8006830 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	3b01      	subs	r3, #1
 800682e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1f9      	bne.n	800682a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b01      	cmp	r3, #1
 8006842:	d15f      	bne.n	8006904 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006848:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800684c:	f023 0301 	bic.w	r3, r3, #1
 8006850:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006862:	2b00      	cmp	r3, #0
 8006864:	d007      	beq.n	8006876 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800686e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800687e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006882:	d106      	bne.n	8006892 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006888:	f023 0206 	bic.w	r2, r3, #6
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	645a      	str	r2, [r3, #68]	; 0x44
 8006890:	e002      	b.n	8006898 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80068a0:	4b24      	ldr	r3, [pc, #144]	; (8006934 <HAL_ADC_Start+0x160>)
 80068a2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80068ac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f003 031f 	and.w	r3, r3, #31
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10f      	bne.n	80068da <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d129      	bne.n	800691c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689a      	ldr	r2, [r3, #8]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80068d6:	609a      	str	r2, [r3, #8]
 80068d8:	e020      	b.n	800691c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a16      	ldr	r2, [pc, #88]	; (8006938 <HAL_ADC_Start+0x164>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d11b      	bne.n	800691c <HAL_ADC_Start+0x148>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d114      	bne.n	800691c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006900:	609a      	str	r2, [r3, #8]
 8006902:	e00b      	b.n	800691c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006908:	f043 0210 	orr.w	r2, r3, #16
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006914:	f043 0201 	orr.w	r2, r3, #1
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	20008468 	.word	0x20008468
 8006930:	431bde83 	.word	0x431bde83
 8006934:	40012300 	.word	0x40012300
 8006938:	40012000 	.word	0x40012000

0800693c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006958:	d113      	bne.n	8006982 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006968:	d10b      	bne.n	8006982 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	f043 0220 	orr.w	r2, r3, #32
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e063      	b.n	8006a4a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006982:	f7ff feb3 	bl	80066ec <HAL_GetTick>
 8006986:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006988:	e021      	b.n	80069ce <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006990:	d01d      	beq.n	80069ce <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d007      	beq.n	80069a8 <HAL_ADC_PollForConversion+0x6c>
 8006998:	f7ff fea8 	bl	80066ec <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d212      	bcs.n	80069ce <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d00b      	beq.n	80069ce <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	f043 0204 	orr.w	r2, r3, #4
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e03d      	b.n	8006a4a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d1d6      	bne.n	800698a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f06f 0212 	mvn.w	r2, #18
 80069e4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d123      	bne.n	8006a48 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d11f      	bne.n	8006a48 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d006      	beq.n	8006a24 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d111      	bne.n	8006a48 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d105      	bne.n	8006a48 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a40:	f043 0201 	orr.w	r2, r3, #1
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
	...

08006a54 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d101      	bne.n	8006a72 <HAL_ADC_Start_DMA+0x1e>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	e0ce      	b.n	8006c10 <HAL_ADC_Start_DMA+0x1bc>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d018      	beq.n	8006aba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689a      	ldr	r2, [r3, #8]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0201 	orr.w	r2, r2, #1
 8006a96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006a98:	4b5f      	ldr	r3, [pc, #380]	; (8006c18 <HAL_ADC_Start_DMA+0x1c4>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a5f      	ldr	r2, [pc, #380]	; (8006c1c <HAL_ADC_Start_DMA+0x1c8>)
 8006a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa2:	0c9a      	lsrs	r2, r3, #18
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	4413      	add	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006aac:	e002      	b.n	8006ab4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1f9      	bne.n	8006aae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ac8:	d107      	bne.n	8006ada <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689a      	ldr	r2, [r3, #8]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ad8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	f040 8086 	bne.w	8006bf6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006af2:	f023 0301 	bic.w	r3, r3, #1
 8006af6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d007      	beq.n	8006b1c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006b14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b28:	d106      	bne.n	8006b38 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2e:	f023 0206 	bic.w	r2, r3, #6
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	645a      	str	r2, [r3, #68]	; 0x44
 8006b36:	e002      	b.n	8006b3e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b46:	4b36      	ldr	r3, [pc, #216]	; (8006c20 <HAL_ADC_Start_DMA+0x1cc>)
 8006b48:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4e:	4a35      	ldr	r2, [pc, #212]	; (8006c24 <HAL_ADC_Start_DMA+0x1d0>)
 8006b50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b56:	4a34      	ldr	r2, [pc, #208]	; (8006c28 <HAL_ADC_Start_DMA+0x1d4>)
 8006b58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5e:	4a33      	ldr	r2, [pc, #204]	; (8006c2c <HAL_ADC_Start_DMA+0x1d8>)
 8006b60:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006b6a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006b7a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689a      	ldr	r2, [r3, #8]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b8a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	334c      	adds	r3, #76	; 0x4c
 8006b96:	4619      	mov	r1, r3
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f001 f806 	bl	8007bac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f003 031f 	and.w	r3, r3, #31
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10f      	bne.n	8006bcc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d129      	bne.n	8006c0e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006bc8:	609a      	str	r2, [r3, #8]
 8006bca:	e020      	b.n	8006c0e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a17      	ldr	r2, [pc, #92]	; (8006c30 <HAL_ADC_Start_DMA+0x1dc>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d11b      	bne.n	8006c0e <HAL_ADC_Start_DMA+0x1ba>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d114      	bne.n	8006c0e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006bf2:	609a      	str	r2, [r3, #8]
 8006bf4:	e00b      	b.n	8006c0e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfa:	f043 0210 	orr.w	r2, r3, #16
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c06:	f043 0201 	orr.w	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	20008468 	.word	0x20008468
 8006c1c:	431bde83 	.word	0x431bde83
 8006c20:	40012300 	.word	0x40012300
 8006c24:	08007159 	.word	0x08007159
 8006c28:	08007213 	.word	0x08007213
 8006c2c:	0800722f 	.word	0x0800722f
 8006c30:	40012000 	.word	0x40012000

08006c34 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d101      	bne.n	8006c4e <HAL_ADC_Stop_DMA+0x1a>
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	e048      	b.n	8006ce0 <HAL_ADC_Stop_DMA+0xac>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0201 	bic.w	r2, r2, #1
 8006c64:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d130      	bne.n	8006cd6 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689a      	ldr	r2, [r3, #8]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c82:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d10f      	bne.n	8006cb2 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 ffe0 	bl	8007c5c <HAL_DMA_Abort>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d005      	beq.n	8006cb2 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8006cc0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006cca:	f023 0301 	bic.w	r3, r3, #1
 8006cce:	f043 0201 	orr.w	r2, r3, #1
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d101      	bne.n	8006d18 <HAL_ADC_ConfigChannel+0x1c>
 8006d14:	2302      	movs	r3, #2
 8006d16:	e113      	b.n	8006f40 <HAL_ADC_ConfigChannel+0x244>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b09      	cmp	r3, #9
 8006d26:	d925      	bls.n	8006d74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68d9      	ldr	r1, [r3, #12]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	461a      	mov	r2, r3
 8006d36:	4613      	mov	r3, r2
 8006d38:	005b      	lsls	r3, r3, #1
 8006d3a:	4413      	add	r3, r2
 8006d3c:	3b1e      	subs	r3, #30
 8006d3e:	2207      	movs	r2, #7
 8006d40:	fa02 f303 	lsl.w	r3, r2, r3
 8006d44:	43da      	mvns	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	400a      	ands	r2, r1
 8006d4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68d9      	ldr	r1, [r3, #12]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	4618      	mov	r0, r3
 8006d60:	4603      	mov	r3, r0
 8006d62:	005b      	lsls	r3, r3, #1
 8006d64:	4403      	add	r3, r0
 8006d66:	3b1e      	subs	r3, #30
 8006d68:	409a      	lsls	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	60da      	str	r2, [r3, #12]
 8006d72:	e022      	b.n	8006dba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6919      	ldr	r1, [r3, #16]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	461a      	mov	r2, r3
 8006d82:	4613      	mov	r3, r2
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	4413      	add	r3, r2
 8006d88:	2207      	movs	r2, #7
 8006d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8e:	43da      	mvns	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	400a      	ands	r2, r1
 8006d96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6919      	ldr	r1, [r3, #16]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	689a      	ldr	r2, [r3, #8]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	4618      	mov	r0, r3
 8006daa:	4603      	mov	r3, r0
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	4403      	add	r3, r0
 8006db0:	409a      	lsls	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	2b06      	cmp	r3, #6
 8006dc0:	d824      	bhi.n	8006e0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	3b05      	subs	r3, #5
 8006dd4:	221f      	movs	r2, #31
 8006dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dda:	43da      	mvns	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	400a      	ands	r2, r1
 8006de2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	4618      	mov	r0, r3
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	4613      	mov	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	3b05      	subs	r3, #5
 8006dfe:	fa00 f203 	lsl.w	r2, r0, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	635a      	str	r2, [r3, #52]	; 0x34
 8006e0a:	e04c      	b.n	8006ea6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2b0c      	cmp	r3, #12
 8006e12:	d824      	bhi.n	8006e5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	3b23      	subs	r3, #35	; 0x23
 8006e26:	221f      	movs	r2, #31
 8006e28:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2c:	43da      	mvns	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	400a      	ands	r2, r1
 8006e34:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	4618      	mov	r0, r3
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	3b23      	subs	r3, #35	; 0x23
 8006e50:	fa00 f203 	lsl.w	r2, r0, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	631a      	str	r2, [r3, #48]	; 0x30
 8006e5c:	e023      	b.n	8006ea6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	3b41      	subs	r3, #65	; 0x41
 8006e70:	221f      	movs	r2, #31
 8006e72:	fa02 f303 	lsl.w	r3, r2, r3
 8006e76:	43da      	mvns	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	400a      	ands	r2, r1
 8006e7e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	4613      	mov	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	3b41      	subs	r3, #65	; 0x41
 8006e9a:	fa00 f203 	lsl.w	r2, r0, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ea6:	4b29      	ldr	r3, [pc, #164]	; (8006f4c <HAL_ADC_ConfigChannel+0x250>)
 8006ea8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a28      	ldr	r2, [pc, #160]	; (8006f50 <HAL_ADC_ConfigChannel+0x254>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d10f      	bne.n	8006ed4 <HAL_ADC_ConfigChannel+0x1d8>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b12      	cmp	r3, #18
 8006eba:	d10b      	bne.n	8006ed4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a1d      	ldr	r2, [pc, #116]	; (8006f50 <HAL_ADC_ConfigChannel+0x254>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d12b      	bne.n	8006f36 <HAL_ADC_ConfigChannel+0x23a>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1c      	ldr	r2, [pc, #112]	; (8006f54 <HAL_ADC_ConfigChannel+0x258>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d003      	beq.n	8006ef0 <HAL_ADC_ConfigChannel+0x1f4>
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b11      	cmp	r3, #17
 8006eee:	d122      	bne.n	8006f36 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a11      	ldr	r2, [pc, #68]	; (8006f54 <HAL_ADC_ConfigChannel+0x258>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d111      	bne.n	8006f36 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006f12:	4b11      	ldr	r3, [pc, #68]	; (8006f58 <HAL_ADC_ConfigChannel+0x25c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a11      	ldr	r2, [pc, #68]	; (8006f5c <HAL_ADC_ConfigChannel+0x260>)
 8006f18:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1c:	0c9a      	lsrs	r2, r3, #18
 8006f1e:	4613      	mov	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006f28:	e002      	b.n	8006f30 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1f9      	bne.n	8006f2a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	40012300 	.word	0x40012300
 8006f50:	40012000 	.word	0x40012000
 8006f54:	10000012 	.word	0x10000012
 8006f58:	20008468 	.word	0x20008468
 8006f5c:	431bde83 	.word	0x431bde83

08006f60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006f68:	4b79      	ldr	r3, [pc, #484]	; (8007150 <ADC_Init+0x1f0>)
 8006f6a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	431a      	orrs	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6859      	ldr	r1, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	021a      	lsls	r2, r3, #8
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006fb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6859      	ldr	r1, [r3, #4]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6899      	ldr	r1, [r3, #8]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff2:	4a58      	ldr	r2, [pc, #352]	; (8007154 <ADC_Init+0x1f4>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d022      	beq.n	800703e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689a      	ldr	r2, [r3, #8]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007006:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6899      	ldr	r1, [r3, #8]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007028:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6899      	ldr	r1, [r3, #8]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	609a      	str	r2, [r3, #8]
 800703c:	e00f      	b.n	800705e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	689a      	ldr	r2, [r3, #8]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800704c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800705c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	689a      	ldr	r2, [r3, #8]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 0202 	bic.w	r2, r2, #2
 800706c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6899      	ldr	r1, [r3, #8]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	7e1b      	ldrb	r3, [r3, #24]
 8007078:	005a      	lsls	r2, r3, #1
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d01b      	beq.n	80070c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800709a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80070aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6859      	ldr	r1, [r3, #4]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b6:	3b01      	subs	r3, #1
 80070b8:	035a      	lsls	r2, r3, #13
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
 80070c2:	e007      	b.n	80070d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80070e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	3b01      	subs	r3, #1
 80070f0:	051a      	lsls	r2, r3, #20
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007108:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6899      	ldr	r1, [r3, #8]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007116:	025a      	lsls	r2, r3, #9
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	430a      	orrs	r2, r1
 800711e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	689a      	ldr	r2, [r3, #8]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800712e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6899      	ldr	r1, [r3, #8]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	029a      	lsls	r2, r3, #10
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	609a      	str	r2, [r3, #8]
}
 8007144:	bf00      	nop
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	40012300 	.word	0x40012300
 8007154:	0f000001 	.word	0x0f000001

08007158 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007164:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800716e:	2b00      	cmp	r3, #0
 8007170:	d13c      	bne.n	80071ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007176:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d12b      	bne.n	80071e4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007190:	2b00      	cmp	r3, #0
 8007192:	d127      	bne.n	80071e4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d006      	beq.n	80071b0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d119      	bne.n	80071e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 0220 	bic.w	r2, r2, #32
 80071be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d105      	bne.n	80071e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071dc:	f043 0201 	orr.w	r2, r3, #1
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f7fe fd1b 	bl	8005c20 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80071ea:	e00e      	b.n	800720a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f0:	f003 0310 	and.w	r3, r3, #16
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d003      	beq.n	8007200 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f7ff fd75 	bl	8006ce8 <HAL_ADC_ErrorCallback>
}
 80071fe:	e004      	b.n	800720a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	4798      	blx	r3
}
 800720a:	bf00      	nop
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f7fe fced 	bl	8005c00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007226:	bf00      	nop
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b084      	sub	sp, #16
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2240      	movs	r2, #64	; 0x40
 8007240:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007246:	f043 0204 	orr.w	r2, r3, #4
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f7ff fd4a 	bl	8006ce8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007254:	bf00      	nop
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	617b      	str	r3, [r7, #20]
 800726c:	2300      	movs	r3, #0
 800726e:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007276:	2b01      	cmp	r3, #1
 8007278:	d101      	bne.n	800727e <HAL_ADCEx_InjectedStart+0x22>
 800727a:	2302      	movs	r3, #2
 800727c:	e0aa      	b.n	80073d4 <HAL_ADCEx_InjectedStart+0x178>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	2b01      	cmp	r3, #1
 8007292:	d018      	beq.n	80072c6 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689a      	ldr	r2, [r3, #8]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f042 0201 	orr.w	r2, r2, #1
 80072a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80072a4:	4b4e      	ldr	r3, [pc, #312]	; (80073e0 <HAL_ADCEx_InjectedStart+0x184>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a4e      	ldr	r2, [pc, #312]	; (80073e4 <HAL_ADCEx_InjectedStart+0x188>)
 80072aa:	fba2 2303 	umull	r2, r3, r2, r3
 80072ae:	0c9a      	lsrs	r2, r3, #18
 80072b0:	4613      	mov	r3, r2
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	4413      	add	r3, r2
 80072b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80072b8:	e002      	b.n	80072c0 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	3b01      	subs	r3, #1
 80072be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1f9      	bne.n	80072ba <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d172      	bne.n	80073ba <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80072dc:	f023 0301 	bic.w	r3, r3, #1
 80072e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d102      	bne.n	80072fa <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f06f 0204 	mvn.w	r2, #4
 800730a:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800730c:	4b36      	ldr	r3, [pc, #216]	; (80073e8 <HAL_ADCEx_InjectedStart+0x18c>)
 800730e:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f003 031f 	and.w	r3, r3, #31
 8007318:	2b00      	cmp	r3, #0
 800731a:	d124      	bne.n	8007366 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007326:	2b00      	cmp	r3, #0
 8007328:	bf0c      	ite	eq
 800732a:	2301      	moveq	r3, #1
 800732c:	2300      	movne	r3, #0
 800732e:	b2db      	uxtb	r3, r3
 8007330:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800733c:	2b00      	cmp	r3, #0
 800733e:	bf0c      	ite	eq
 8007340:	2301      	moveq	r3, #1
 8007342:	2300      	movne	r3, #0
 8007344:	b2db      	uxtb	r3, r3
 8007346:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d041      	beq.n	80073d2 <HAL_ADCEx_InjectedStart+0x176>
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d03e      	beq.n	80073d2 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689a      	ldr	r2, [r3, #8]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007362:	609a      	str	r2, [r3, #8]
 8007364:	e035      	b.n	80073d2 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007370:	2b00      	cmp	r3, #0
 8007372:	bf0c      	ite	eq
 8007374:	2301      	moveq	r3, #1
 8007376:	2300      	movne	r3, #0
 8007378:	b2db      	uxtb	r3, r3
 800737a:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007386:	2b00      	cmp	r3, #0
 8007388:	bf0c      	ite	eq
 800738a:	2301      	moveq	r3, #1
 800738c:	2300      	movne	r3, #0
 800738e:	b2db      	uxtb	r3, r3
 8007390:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a15      	ldr	r2, [pc, #84]	; (80073ec <HAL_ADCEx_InjectedStart+0x190>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d11a      	bne.n	80073d2 <HAL_ADCEx_InjectedStart+0x176>
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d017      	beq.n	80073d2 <HAL_ADCEx_InjectedStart+0x176>
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d014      	beq.n	80073d2 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689a      	ldr	r2, [r3, #8]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80073b6:	609a      	str	r2, [r3, #8]
 80073b8:	e00b      	b.n	80073d2 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	f043 0210 	orr.w	r2, r3, #16
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ca:	f043 0201 	orr.w	r2, r3, #1
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	371c      	adds	r7, #28
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr
 80073e0:	20008468 	.word	0x20008468
 80073e4:	431bde83 	.word	0x431bde83
 80073e8:	40012300 	.word	0x40012300
 80073ec:	40012000 	.word	0x40012000

080073f0 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007402:	2b01      	cmp	r3, #1
 8007404:	d101      	bne.n	800740a <HAL_ADCEx_InjectedStop+0x1a>
 8007406:	2302      	movs	r3, #2
 8007408:	e037      	b.n	800747a <HAL_ADCEx_InjectedStop+0x8a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800741a:	2b00      	cmp	r3, #0
 800741c:	d120      	bne.n	8007460 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8007428:	2b00      	cmp	r3, #0
 800742a:	d119      	bne.n	8007460 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689a      	ldr	r2, [r3, #8]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 0201 	bic.w	r2, r2, #1
 800743a:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d112      	bne.n	8007470 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007452:	f023 0301 	bic.w	r3, r3, #1
 8007456:	f043 0201 	orr.w	r2, r3, #1
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800745e:	e007      	b.n	8007470 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007464:	f043 0220 	orr.w	r2, r3, #32
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8007478:	7bfb      	ldrb	r3, [r7, #15]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
	...

08007488 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8007492:	2300      	movs	r3, #0
 8007494:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f06f 0204 	mvn.w	r2, #4
 800749e:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	3b01      	subs	r3, #1
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d81f      	bhi.n	80074e8 <HAL_ADCEx_InjectedGetValue+0x60>
 80074a8:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <HAL_ADCEx_InjectedGetValue+0x28>)
 80074aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ae:	bf00      	nop
 80074b0:	080074df 	.word	0x080074df
 80074b4:	080074d5 	.word	0x080074d5
 80074b8:	080074cb 	.word	0x080074cb
 80074bc:	080074c1 	.word	0x080074c1
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074c6:	60fb      	str	r3, [r7, #12]
    }  
    break;
 80074c8:	e00f      	b.n	80074ea <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d0:	60fb      	str	r3, [r7, #12]
    }  
    break;
 80074d2:	e00a      	b.n	80074ea <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	60fb      	str	r3, [r7, #12]
    }
    break;
 80074dc:	e005      	b.n	80074ea <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e4:	60fb      	str	r3, [r7, #12]
    }
    break;
 80074e6:	e000      	b.n	80074ea <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 80074e8:	bf00      	nop
  }
  return tmp;
 80074ea:	68fb      	ldr	r3, [r7, #12]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_ADCEx_InjectedConfigChannel+0x18>
 800750c:	2302      	movs	r3, #2
 800750e:	e17e      	b.n	800780e <HAL_ADCEx_InjectedConfigChannel+0x316>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b09      	cmp	r3, #9
 800751e:	d925      	bls.n	800756c <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68d9      	ldr	r1, [r3, #12]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	b29b      	uxth	r3, r3
 800752c:	461a      	mov	r2, r3
 800752e:	4613      	mov	r3, r2
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	4413      	add	r3, r2
 8007534:	3b1e      	subs	r3, #30
 8007536:	2207      	movs	r2, #7
 8007538:	fa02 f303 	lsl.w	r3, r2, r3
 800753c:	43da      	mvns	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	400a      	ands	r2, r1
 8007544:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68d9      	ldr	r1, [r3, #12]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	b29b      	uxth	r3, r3
 8007556:	4618      	mov	r0, r3
 8007558:	4603      	mov	r3, r0
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	4403      	add	r3, r0
 800755e:	3b1e      	subs	r3, #30
 8007560:	409a      	lsls	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	60da      	str	r2, [r3, #12]
 800756a:	e022      	b.n	80075b2 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6919      	ldr	r1, [r3, #16]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	b29b      	uxth	r3, r3
 8007578:	461a      	mov	r2, r3
 800757a:	4613      	mov	r3, r2
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	4413      	add	r3, r2
 8007580:	2207      	movs	r2, #7
 8007582:	fa02 f303 	lsl.w	r3, r2, r3
 8007586:	43da      	mvns	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	400a      	ands	r2, r1
 800758e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6919      	ldr	r1, [r3, #16]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	689a      	ldr	r2, [r3, #8]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	4618      	mov	r0, r3
 80075a2:	4603      	mov	r3, r0
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	4403      	add	r3, r0
 80075a8:	409a      	lsls	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80075c0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	051a      	lsls	r2, r3, #20
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	3303      	adds	r3, #3
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	461a      	mov	r2, r3
 80075f4:	4613      	mov	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	221f      	movs	r2, #31
 80075fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007600:	43da      	mvns	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	400a      	ands	r2, r1
 8007608:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	b29b      	uxth	r3, r3
 8007616:	4618      	mov	r0, r3
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	b2da      	uxtb	r2, r3
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	b2db      	uxtb	r3, r3
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	b2db      	uxtb	r3, r3
 8007628:	3303      	adds	r3, #3
 800762a:	b2db      	uxtb	r3, r3
 800762c:	461a      	mov	r2, r3
 800762e:	4613      	mov	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	fa00 f203 	lsl.w	r2, r0, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	430a      	orrs	r2, r1
 800763e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	4a75      	ldr	r2, [pc, #468]	; (800781c <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d022      	beq.n	8007690 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8007658:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6899      	ldr	r1, [r3, #8]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	699a      	ldr	r2, [r3, #24]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	430a      	orrs	r2, r1
 800766a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800767a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6899      	ldr	r1, [r3, #8]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	69da      	ldr	r2, [r3, #28]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	609a      	str	r2, [r3, #8]
 800768e:	e00f      	b.n	80076b0 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689a      	ldr	r2, [r3, #8]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800769e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689a      	ldr	r2, [r3, #8]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80076ae:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	7d5b      	ldrb	r3, [r3, #21]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d008      	beq.n	80076ca <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076c6:	605a      	str	r2, [r3, #4]
 80076c8:	e007      	b.n	80076da <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076d8:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	7d1b      	ldrb	r3, [r3, #20]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d008      	beq.n	80076f4 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076f0:	605a      	str	r2, [r3, #4]
 80076f2:	e007      	b.n	8007704 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007702:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	2b03      	cmp	r3, #3
 800770a:	d02e      	beq.n	800776a <HAL_ADCEx_InjectedConfigChannel+0x272>
 800770c:	2b03      	cmp	r3, #3
 800770e:	d840      	bhi.n	8007792 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8007710:	2b01      	cmp	r3, #1
 8007712:	d002      	beq.n	800771a <HAL_ADCEx_InjectedConfigChannel+0x222>
 8007714:	2b02      	cmp	r3, #2
 8007716:	d014      	beq.n	8007742 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8007718:	e03b      	b.n	8007792 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	6812      	ldr	r2, [r2, #0]
 8007724:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007728:	f023 030f 	bic.w	r3, r3, #15
 800772c:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6959      	ldr	r1, [r3, #20]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	68da      	ldr	r2, [r3, #12]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	615a      	str	r2, [r3, #20]
      break;
 8007740:	e03b      	b.n	80077ba <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	6812      	ldr	r2, [r2, #0]
 800774c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007750:	f023 030f 	bic.w	r3, r3, #15
 8007754:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6999      	ldr	r1, [r3, #24]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	68da      	ldr	r2, [r3, #12]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	430a      	orrs	r2, r1
 8007766:	619a      	str	r2, [r3, #24]
      break;
 8007768:	e027      	b.n	80077ba <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	6812      	ldr	r2, [r2, #0]
 8007774:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007778:	f023 030f 	bic.w	r3, r3, #15
 800777c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	69d9      	ldr	r1, [r3, #28]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	61da      	str	r2, [r3, #28]
      break;
 8007790:	e013      	b.n	80077ba <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6a1b      	ldr	r3, [r3, #32]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	6812      	ldr	r2, [r2, #0]
 800779c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80077a0:	f023 030f 	bic.w	r3, r3, #15
 80077a4:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6a19      	ldr	r1, [r3, #32]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	68da      	ldr	r2, [r3, #12]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	621a      	str	r2, [r3, #32]
      break;
 80077b8:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80077ba:	4b19      	ldr	r3, [pc, #100]	; (8007820 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80077bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a18      	ldr	r2, [pc, #96]	; (8007824 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d109      	bne.n	80077dc <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b12      	cmp	r3, #18
 80077ce:	d105      	bne.n	80077dc <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a10      	ldr	r2, [pc, #64]	; (8007824 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d10e      	bne.n	8007804 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a0f      	ldr	r2, [pc, #60]	; (8007828 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d003      	beq.n	80077f8 <HAL_ADCEx_InjectedConfigChannel+0x300>
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b11      	cmp	r3, #17
 80077f6:	d105      	bne.n	8007804 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	000f0001 	.word	0x000f0001
 8007820:	40012300 	.word	0x40012300
 8007824:	40012000 	.word	0x40012000
 8007828:	10000012 	.word	0x10000012

0800782c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800783c:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <__NVIC_SetPriorityGrouping+0x44>)
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007848:	4013      	ands	r3, r2
 800784a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800785c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800785e:	4a04      	ldr	r2, [pc, #16]	; (8007870 <__NVIC_SetPriorityGrouping+0x44>)
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	60d3      	str	r3, [r2, #12]
}
 8007864:	bf00      	nop
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	e000ed00 	.word	0xe000ed00

08007874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007874:	b480      	push	{r7}
 8007876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007878:	4b04      	ldr	r3, [pc, #16]	; (800788c <__NVIC_GetPriorityGrouping+0x18>)
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	0a1b      	lsrs	r3, r3, #8
 800787e:	f003 0307 	and.w	r3, r3, #7
}
 8007882:	4618      	mov	r0, r3
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	e000ed00 	.word	0xe000ed00

08007890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800789a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	db0b      	blt.n	80078ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078a2:	79fb      	ldrb	r3, [r7, #7]
 80078a4:	f003 021f 	and.w	r2, r3, #31
 80078a8:	4907      	ldr	r1, [pc, #28]	; (80078c8 <__NVIC_EnableIRQ+0x38>)
 80078aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	2001      	movs	r0, #1
 80078b2:	fa00 f202 	lsl.w	r2, r0, r2
 80078b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	e000e100 	.word	0xe000e100

080078cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	6039      	str	r1, [r7, #0]
 80078d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	db0a      	blt.n	80078f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	490c      	ldr	r1, [pc, #48]	; (8007918 <__NVIC_SetPriority+0x4c>)
 80078e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ea:	0112      	lsls	r2, r2, #4
 80078ec:	b2d2      	uxtb	r2, r2
 80078ee:	440b      	add	r3, r1
 80078f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80078f4:	e00a      	b.n	800790c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	4908      	ldr	r1, [pc, #32]	; (800791c <__NVIC_SetPriority+0x50>)
 80078fc:	79fb      	ldrb	r3, [r7, #7]
 80078fe:	f003 030f 	and.w	r3, r3, #15
 8007902:	3b04      	subs	r3, #4
 8007904:	0112      	lsls	r2, r2, #4
 8007906:	b2d2      	uxtb	r2, r2
 8007908:	440b      	add	r3, r1
 800790a:	761a      	strb	r2, [r3, #24]
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	e000e100 	.word	0xe000e100
 800791c:	e000ed00 	.word	0xe000ed00

08007920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007920:	b480      	push	{r7}
 8007922:	b089      	sub	sp, #36	; 0x24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	f1c3 0307 	rsb	r3, r3, #7
 800793a:	2b04      	cmp	r3, #4
 800793c:	bf28      	it	cs
 800793e:	2304      	movcs	r3, #4
 8007940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	3304      	adds	r3, #4
 8007946:	2b06      	cmp	r3, #6
 8007948:	d902      	bls.n	8007950 <NVIC_EncodePriority+0x30>
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	3b03      	subs	r3, #3
 800794e:	e000      	b.n	8007952 <NVIC_EncodePriority+0x32>
 8007950:	2300      	movs	r3, #0
 8007952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007954:	f04f 32ff 	mov.w	r2, #4294967295
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	fa02 f303 	lsl.w	r3, r2, r3
 800795e:	43da      	mvns	r2, r3
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	401a      	ands	r2, r3
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007968:	f04f 31ff 	mov.w	r1, #4294967295
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	fa01 f303 	lsl.w	r3, r1, r3
 8007972:	43d9      	mvns	r1, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007978:	4313      	orrs	r3, r2
         );
}
 800797a:	4618      	mov	r0, r3
 800797c:	3724      	adds	r7, #36	; 0x24
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
	...

08007988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3b01      	subs	r3, #1
 8007994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007998:	d301      	bcc.n	800799e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800799a:	2301      	movs	r3, #1
 800799c:	e00f      	b.n	80079be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800799e:	4a0a      	ldr	r2, [pc, #40]	; (80079c8 <SysTick_Config+0x40>)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80079a6:	210f      	movs	r1, #15
 80079a8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ac:	f7ff ff8e 	bl	80078cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80079b0:	4b05      	ldr	r3, [pc, #20]	; (80079c8 <SysTick_Config+0x40>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80079b6:	4b04      	ldr	r3, [pc, #16]	; (80079c8 <SysTick_Config+0x40>)
 80079b8:	2207      	movs	r2, #7
 80079ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	e000e010 	.word	0xe000e010

080079cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff ff29 	bl	800782c <__NVIC_SetPriorityGrouping>
}
 80079da:	bf00      	nop
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b086      	sub	sp, #24
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	4603      	mov	r3, r0
 80079ea:	60b9      	str	r1, [r7, #8]
 80079ec:	607a      	str	r2, [r7, #4]
 80079ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80079f0:	2300      	movs	r3, #0
 80079f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80079f4:	f7ff ff3e 	bl	8007874 <__NVIC_GetPriorityGrouping>
 80079f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	68b9      	ldr	r1, [r7, #8]
 80079fe:	6978      	ldr	r0, [r7, #20]
 8007a00:	f7ff ff8e 	bl	8007920 <NVIC_EncodePriority>
 8007a04:	4602      	mov	r2, r0
 8007a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7ff ff5d 	bl	80078cc <__NVIC_SetPriority>
}
 8007a12:	bf00      	nop
 8007a14:	3718      	adds	r7, #24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	4603      	mov	r3, r0
 8007a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7ff ff31 	bl	8007890 <__NVIC_EnableIRQ>
}
 8007a2e:	bf00      	nop
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b082      	sub	sp, #8
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7ff ffa2 	bl	8007988 <SysTick_Config>
 8007a44:	4603      	mov	r3, r0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
	...

08007a50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007a5c:	f7fe fe46 	bl	80066ec <HAL_GetTick>
 8007a60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e099      	b.n	8007ba0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0201 	bic.w	r2, r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a8c:	e00f      	b.n	8007aae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a8e:	f7fe fe2d 	bl	80066ec <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	2b05      	cmp	r3, #5
 8007a9a:	d908      	bls.n	8007aae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2203      	movs	r2, #3
 8007aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e078      	b.n	8007ba0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1e8      	bne.n	8007a8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	4b38      	ldr	r3, [pc, #224]	; (8007ba8 <HAL_DMA_Init+0x158>)
 8007ac8:	4013      	ands	r3, r2
 8007aca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007af2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	d107      	bne.n	8007b18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b10:	4313      	orrs	r3, r2
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f023 0307 	bic.w	r3, r3, #7
 8007b2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	2b04      	cmp	r3, #4
 8007b40:	d117      	bne.n	8007b72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00e      	beq.n	8007b72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fadf 	bl	8008118 <DMA_CheckFifoParam>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d008      	beq.n	8007b72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2240      	movs	r2, #64	; 0x40
 8007b64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e016      	b.n	8007ba0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fa96 	bl	80080ac <DMA_CalcBaseAndBitshift>
 8007b80:	4603      	mov	r3, r0
 8007b82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b88:	223f      	movs	r2, #63	; 0x3f
 8007b8a:	409a      	lsls	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3718      	adds	r7, #24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	f010803f 	.word	0xf010803f

08007bac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d101      	bne.n	8007bd2 <HAL_DMA_Start_IT+0x26>
 8007bce:	2302      	movs	r3, #2
 8007bd0:	e040      	b.n	8007c54 <HAL_DMA_Start_IT+0xa8>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d12f      	bne.n	8007c46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2202      	movs	r2, #2
 8007bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 fa28 	bl	8008050 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c04:	223f      	movs	r2, #63	; 0x3f
 8007c06:	409a      	lsls	r2, r3
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f042 0216 	orr.w	r2, r2, #22
 8007c1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d007      	beq.n	8007c34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f042 0208 	orr.w	r2, r2, #8
 8007c32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f042 0201 	orr.w	r2, r2, #1
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	e005      	b.n	8007c52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007c4e:	2302      	movs	r3, #2
 8007c50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3718      	adds	r7, #24
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007c6a:	f7fe fd3f 	bl	80066ec <HAL_GetTick>
 8007c6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d008      	beq.n	8007c8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2280      	movs	r2, #128	; 0x80
 8007c80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e052      	b.n	8007d34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0216 	bic.w	r2, r2, #22
 8007c9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	695a      	ldr	r2, [r3, #20]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d103      	bne.n	8007cbe <HAL_DMA_Abort+0x62>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d007      	beq.n	8007cce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0208 	bic.w	r2, r2, #8
 8007ccc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f022 0201 	bic.w	r2, r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007cde:	e013      	b.n	8007d08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ce0:	f7fe fd04 	bl	80066ec <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	2b05      	cmp	r3, #5
 8007cec:	d90c      	bls.n	8007d08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2203      	movs	r2, #3
 8007cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e015      	b.n	8007d34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0301 	and.w	r3, r3, #1
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1e4      	bne.n	8007ce0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d1a:	223f      	movs	r2, #63	; 0x3f
 8007d1c:	409a      	lsls	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007d44:	2300      	movs	r3, #0
 8007d46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007d48:	4b8e      	ldr	r3, [pc, #568]	; (8007f84 <HAL_DMA_IRQHandler+0x248>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a8e      	ldr	r2, [pc, #568]	; (8007f88 <HAL_DMA_IRQHandler+0x24c>)
 8007d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d52:	0a9b      	lsrs	r3, r3, #10
 8007d54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d66:	2208      	movs	r2, #8
 8007d68:	409a      	lsls	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d01a      	beq.n	8007da8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0304 	and.w	r3, r3, #4
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d013      	beq.n	8007da8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 0204 	bic.w	r2, r2, #4
 8007d8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d94:	2208      	movs	r2, #8
 8007d96:	409a      	lsls	r2, r3
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da0:	f043 0201 	orr.w	r2, r3, #1
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dac:	2201      	movs	r2, #1
 8007dae:	409a      	lsls	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	4013      	ands	r3, r2
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d012      	beq.n	8007dde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00b      	beq.n	8007dde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dca:	2201      	movs	r2, #1
 8007dcc:	409a      	lsls	r2, r3
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd6:	f043 0202 	orr.w	r2, r3, #2
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007de2:	2204      	movs	r2, #4
 8007de4:	409a      	lsls	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	4013      	ands	r3, r2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d012      	beq.n	8007e14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0302 	and.w	r3, r3, #2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00b      	beq.n	8007e14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e00:	2204      	movs	r2, #4
 8007e02:	409a      	lsls	r2, r3
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e0c:	f043 0204 	orr.w	r2, r3, #4
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e18:	2210      	movs	r2, #16
 8007e1a:	409a      	lsls	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4013      	ands	r3, r2
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d043      	beq.n	8007eac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0308 	and.w	r3, r3, #8
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d03c      	beq.n	8007eac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e36:	2210      	movs	r2, #16
 8007e38:	409a      	lsls	r2, r3
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d018      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d108      	bne.n	8007e6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d024      	beq.n	8007eac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	4798      	blx	r3
 8007e6a:	e01f      	b.n	8007eac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d01b      	beq.n	8007eac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	4798      	blx	r3
 8007e7c:	e016      	b.n	8007eac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d107      	bne.n	8007e9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 0208 	bic.w	r2, r2, #8
 8007e9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d003      	beq.n	8007eac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb0:	2220      	movs	r2, #32
 8007eb2:	409a      	lsls	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 808f 	beq.w	8007fdc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0310 	and.w	r3, r3, #16
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 8087 	beq.w	8007fdc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ed2:	2220      	movs	r2, #32
 8007ed4:	409a      	lsls	r2, r3
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b05      	cmp	r3, #5
 8007ee4:	d136      	bne.n	8007f54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 0216 	bic.w	r2, r2, #22
 8007ef4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	695a      	ldr	r2, [r3, #20]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d103      	bne.n	8007f16 <HAL_DMA_IRQHandler+0x1da>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d007      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 0208 	bic.w	r2, r2, #8
 8007f24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f2a:	223f      	movs	r2, #63	; 0x3f
 8007f2c:	409a      	lsls	r2, r3
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d07e      	beq.n	8008048 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	4798      	blx	r3
        }
        return;
 8007f52:	e079      	b.n	8008048 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d01d      	beq.n	8007f9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10d      	bne.n	8007f8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d031      	beq.n	8007fdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	4798      	blx	r3
 8007f80:	e02c      	b.n	8007fdc <HAL_DMA_IRQHandler+0x2a0>
 8007f82:	bf00      	nop
 8007f84:	20008468 	.word	0x20008468
 8007f88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d023      	beq.n	8007fdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	4798      	blx	r3
 8007f9c:	e01e      	b.n	8007fdc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10f      	bne.n	8007fcc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 0210 	bic.w	r2, r2, #16
 8007fba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d003      	beq.n	8007fdc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d032      	beq.n	800804a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe8:	f003 0301 	and.w	r3, r3, #1
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d022      	beq.n	8008036 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2205      	movs	r2, #5
 8007ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 0201 	bic.w	r2, r2, #1
 8008006:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	3301      	adds	r3, #1
 800800c:	60bb      	str	r3, [r7, #8]
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	429a      	cmp	r2, r3
 8008012:	d307      	bcc.n	8008024 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1f2      	bne.n	8008008 <HAL_DMA_IRQHandler+0x2cc>
 8008022:	e000      	b.n	8008026 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008024:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803a:	2b00      	cmp	r3, #0
 800803c:	d005      	beq.n	800804a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	4798      	blx	r3
 8008046:	e000      	b.n	800804a <HAL_DMA_IRQHandler+0x30e>
        return;
 8008048:	bf00      	nop
    }
  }
}
 800804a:	3718      	adds	r7, #24
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
 800805c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800806c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	2b40      	cmp	r3, #64	; 0x40
 800807c:	d108      	bne.n	8008090 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800808e:	e007      	b.n	80080a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	60da      	str	r2, [r3, #12]
}
 80080a0:	bf00      	nop
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	3b10      	subs	r3, #16
 80080bc:	4a14      	ldr	r2, [pc, #80]	; (8008110 <DMA_CalcBaseAndBitshift+0x64>)
 80080be:	fba2 2303 	umull	r2, r3, r2, r3
 80080c2:	091b      	lsrs	r3, r3, #4
 80080c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80080c6:	4a13      	ldr	r2, [pc, #76]	; (8008114 <DMA_CalcBaseAndBitshift+0x68>)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	4413      	add	r3, r2
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	d909      	bls.n	80080ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80080e2:	f023 0303 	bic.w	r3, r3, #3
 80080e6:	1d1a      	adds	r2, r3, #4
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	659a      	str	r2, [r3, #88]	; 0x58
 80080ec:	e007      	b.n	80080fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80080f6:	f023 0303 	bic.w	r3, r3, #3
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008102:	4618      	mov	r0, r3
 8008104:	3714      	adds	r7, #20
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	aaaaaaab 	.word	0xaaaaaaab
 8008114:	0800e214 	.word	0x0800e214

08008118 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008128:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d11f      	bne.n	8008172 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2b03      	cmp	r3, #3
 8008136:	d856      	bhi.n	80081e6 <DMA_CheckFifoParam+0xce>
 8008138:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <DMA_CheckFifoParam+0x28>)
 800813a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813e:	bf00      	nop
 8008140:	08008151 	.word	0x08008151
 8008144:	08008163 	.word	0x08008163
 8008148:	08008151 	.word	0x08008151
 800814c:	080081e7 	.word	0x080081e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d046      	beq.n	80081ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008160:	e043      	b.n	80081ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008166:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800816a:	d140      	bne.n	80081ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008170:	e03d      	b.n	80081ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800817a:	d121      	bne.n	80081c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2b03      	cmp	r3, #3
 8008180:	d837      	bhi.n	80081f2 <DMA_CheckFifoParam+0xda>
 8008182:	a201      	add	r2, pc, #4	; (adr r2, 8008188 <DMA_CheckFifoParam+0x70>)
 8008184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008188:	08008199 	.word	0x08008199
 800818c:	0800819f 	.word	0x0800819f
 8008190:	08008199 	.word	0x08008199
 8008194:	080081b1 	.word	0x080081b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	73fb      	strb	r3, [r7, #15]
      break;
 800819c:	e030      	b.n	8008200 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d025      	beq.n	80081f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081ae:	e022      	b.n	80081f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80081b8:	d11f      	bne.n	80081fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80081be:	e01c      	b.n	80081fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d903      	bls.n	80081ce <DMA_CheckFifoParam+0xb6>
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2b03      	cmp	r3, #3
 80081ca:	d003      	beq.n	80081d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80081cc:	e018      	b.n	8008200 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	73fb      	strb	r3, [r7, #15]
      break;
 80081d2:	e015      	b.n	8008200 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00e      	beq.n	80081fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	73fb      	strb	r3, [r7, #15]
      break;
 80081e4:	e00b      	b.n	80081fe <DMA_CheckFifoParam+0xe6>
      break;
 80081e6:	bf00      	nop
 80081e8:	e00a      	b.n	8008200 <DMA_CheckFifoParam+0xe8>
      break;
 80081ea:	bf00      	nop
 80081ec:	e008      	b.n	8008200 <DMA_CheckFifoParam+0xe8>
      break;
 80081ee:	bf00      	nop
 80081f0:	e006      	b.n	8008200 <DMA_CheckFifoParam+0xe8>
      break;
 80081f2:	bf00      	nop
 80081f4:	e004      	b.n	8008200 <DMA_CheckFifoParam+0xe8>
      break;
 80081f6:	bf00      	nop
 80081f8:	e002      	b.n	8008200 <DMA_CheckFifoParam+0xe8>
      break;   
 80081fa:	bf00      	nop
 80081fc:	e000      	b.n	8008200 <DMA_CheckFifoParam+0xe8>
      break;
 80081fe:	bf00      	nop
    }
  } 
  
  return status; 
 8008200:	7bfb      	ldrb	r3, [r7, #15]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop

08008210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008210:	b480      	push	{r7}
 8008212:	b089      	sub	sp, #36	; 0x24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800821a:	2300      	movs	r3, #0
 800821c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800821e:	2300      	movs	r3, #0
 8008220:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008222:	2300      	movs	r3, #0
 8008224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008226:	2300      	movs	r3, #0
 8008228:	61fb      	str	r3, [r7, #28]
 800822a:	e159      	b.n	80084e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800822c:	2201      	movs	r2, #1
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	fa02 f303 	lsl.w	r3, r2, r3
 8008234:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	4013      	ands	r3, r2
 800823e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	429a      	cmp	r2, r3
 8008246:	f040 8148 	bne.w	80084da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	f003 0303 	and.w	r3, r3, #3
 8008252:	2b01      	cmp	r3, #1
 8008254:	d005      	beq.n	8008262 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800825e:	2b02      	cmp	r3, #2
 8008260:	d130      	bne.n	80082c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	005b      	lsls	r3, r3, #1
 800826c:	2203      	movs	r2, #3
 800826e:	fa02 f303 	lsl.w	r3, r2, r3
 8008272:	43db      	mvns	r3, r3
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	4013      	ands	r3, r2
 8008278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	005b      	lsls	r3, r3, #1
 8008282:	fa02 f303 	lsl.w	r3, r2, r3
 8008286:	69ba      	ldr	r2, [r7, #24]
 8008288:	4313      	orrs	r3, r2
 800828a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	69ba      	ldr	r2, [r7, #24]
 8008290:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008298:	2201      	movs	r2, #1
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	fa02 f303 	lsl.w	r3, r2, r3
 80082a0:	43db      	mvns	r3, r3
 80082a2:	69ba      	ldr	r2, [r7, #24]
 80082a4:	4013      	ands	r3, r2
 80082a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	091b      	lsrs	r3, r3, #4
 80082ae:	f003 0201 	and.w	r2, r3, #1
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	fa02 f303 	lsl.w	r3, r2, r3
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f003 0303 	and.w	r3, r3, #3
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	d017      	beq.n	8008300 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	2203      	movs	r2, #3
 80082dc:	fa02 f303 	lsl.w	r3, r2, r3
 80082e0:	43db      	mvns	r3, r3
 80082e2:	69ba      	ldr	r2, [r7, #24]
 80082e4:	4013      	ands	r3, r2
 80082e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	005b      	lsls	r3, r3, #1
 80082f0:	fa02 f303 	lsl.w	r3, r2, r3
 80082f4:	69ba      	ldr	r2, [r7, #24]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	69ba      	ldr	r2, [r7, #24]
 80082fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	f003 0303 	and.w	r3, r3, #3
 8008308:	2b02      	cmp	r3, #2
 800830a:	d123      	bne.n	8008354 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	08da      	lsrs	r2, r3, #3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3208      	adds	r2, #8
 8008314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008318:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	f003 0307 	and.w	r3, r3, #7
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	220f      	movs	r2, #15
 8008324:	fa02 f303 	lsl.w	r3, r2, r3
 8008328:	43db      	mvns	r3, r3
 800832a:	69ba      	ldr	r2, [r7, #24]
 800832c:	4013      	ands	r3, r2
 800832e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	691a      	ldr	r2, [r3, #16]
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	f003 0307 	and.w	r3, r3, #7
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	fa02 f303 	lsl.w	r3, r2, r3
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	4313      	orrs	r3, r2
 8008344:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	08da      	lsrs	r2, r3, #3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	3208      	adds	r2, #8
 800834e:	69b9      	ldr	r1, [r7, #24]
 8008350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	005b      	lsls	r3, r3, #1
 800835e:	2203      	movs	r2, #3
 8008360:	fa02 f303 	lsl.w	r3, r2, r3
 8008364:	43db      	mvns	r3, r3
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	4013      	ands	r3, r2
 800836a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	f003 0203 	and.w	r2, r3, #3
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	005b      	lsls	r3, r3, #1
 8008378:	fa02 f303 	lsl.w	r3, r2, r3
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	4313      	orrs	r3, r2
 8008380:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	69ba      	ldr	r2, [r7, #24]
 8008386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 80a2 	beq.w	80084da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008396:	2300      	movs	r3, #0
 8008398:	60fb      	str	r3, [r7, #12]
 800839a:	4b57      	ldr	r3, [pc, #348]	; (80084f8 <HAL_GPIO_Init+0x2e8>)
 800839c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800839e:	4a56      	ldr	r2, [pc, #344]	; (80084f8 <HAL_GPIO_Init+0x2e8>)
 80083a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083a4:	6453      	str	r3, [r2, #68]	; 0x44
 80083a6:	4b54      	ldr	r3, [pc, #336]	; (80084f8 <HAL_GPIO_Init+0x2e8>)
 80083a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083ae:	60fb      	str	r3, [r7, #12]
 80083b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80083b2:	4a52      	ldr	r2, [pc, #328]	; (80084fc <HAL_GPIO_Init+0x2ec>)
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	089b      	lsrs	r3, r3, #2
 80083b8:	3302      	adds	r3, #2
 80083ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	f003 0303 	and.w	r3, r3, #3
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	220f      	movs	r2, #15
 80083ca:	fa02 f303 	lsl.w	r3, r2, r3
 80083ce:	43db      	mvns	r3, r3
 80083d0:	69ba      	ldr	r2, [r7, #24]
 80083d2:	4013      	ands	r3, r2
 80083d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a49      	ldr	r2, [pc, #292]	; (8008500 <HAL_GPIO_Init+0x2f0>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d019      	beq.n	8008412 <HAL_GPIO_Init+0x202>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a48      	ldr	r2, [pc, #288]	; (8008504 <HAL_GPIO_Init+0x2f4>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d013      	beq.n	800840e <HAL_GPIO_Init+0x1fe>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a47      	ldr	r2, [pc, #284]	; (8008508 <HAL_GPIO_Init+0x2f8>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d00d      	beq.n	800840a <HAL_GPIO_Init+0x1fa>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a46      	ldr	r2, [pc, #280]	; (800850c <HAL_GPIO_Init+0x2fc>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d007      	beq.n	8008406 <HAL_GPIO_Init+0x1f6>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a45      	ldr	r2, [pc, #276]	; (8008510 <HAL_GPIO_Init+0x300>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d101      	bne.n	8008402 <HAL_GPIO_Init+0x1f2>
 80083fe:	2304      	movs	r3, #4
 8008400:	e008      	b.n	8008414 <HAL_GPIO_Init+0x204>
 8008402:	2307      	movs	r3, #7
 8008404:	e006      	b.n	8008414 <HAL_GPIO_Init+0x204>
 8008406:	2303      	movs	r3, #3
 8008408:	e004      	b.n	8008414 <HAL_GPIO_Init+0x204>
 800840a:	2302      	movs	r3, #2
 800840c:	e002      	b.n	8008414 <HAL_GPIO_Init+0x204>
 800840e:	2301      	movs	r3, #1
 8008410:	e000      	b.n	8008414 <HAL_GPIO_Init+0x204>
 8008412:	2300      	movs	r3, #0
 8008414:	69fa      	ldr	r2, [r7, #28]
 8008416:	f002 0203 	and.w	r2, r2, #3
 800841a:	0092      	lsls	r2, r2, #2
 800841c:	4093      	lsls	r3, r2
 800841e:	69ba      	ldr	r2, [r7, #24]
 8008420:	4313      	orrs	r3, r2
 8008422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008424:	4935      	ldr	r1, [pc, #212]	; (80084fc <HAL_GPIO_Init+0x2ec>)
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	089b      	lsrs	r3, r3, #2
 800842a:	3302      	adds	r3, #2
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008432:	4b38      	ldr	r3, [pc, #224]	; (8008514 <HAL_GPIO_Init+0x304>)
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	43db      	mvns	r3, r3
 800843c:	69ba      	ldr	r2, [r7, #24]
 800843e:	4013      	ands	r3, r2
 8008440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d003      	beq.n	8008456 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800844e:	69ba      	ldr	r2, [r7, #24]
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	4313      	orrs	r3, r2
 8008454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008456:	4a2f      	ldr	r2, [pc, #188]	; (8008514 <HAL_GPIO_Init+0x304>)
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800845c:	4b2d      	ldr	r3, [pc, #180]	; (8008514 <HAL_GPIO_Init+0x304>)
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	43db      	mvns	r3, r3
 8008466:	69ba      	ldr	r2, [r7, #24]
 8008468:	4013      	ands	r3, r2
 800846a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d003      	beq.n	8008480 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008478:	69ba      	ldr	r2, [r7, #24]
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	4313      	orrs	r3, r2
 800847e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008480:	4a24      	ldr	r2, [pc, #144]	; (8008514 <HAL_GPIO_Init+0x304>)
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008486:	4b23      	ldr	r3, [pc, #140]	; (8008514 <HAL_GPIO_Init+0x304>)
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	43db      	mvns	r3, r3
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	4013      	ands	r3, r2
 8008494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80084aa:	4a1a      	ldr	r2, [pc, #104]	; (8008514 <HAL_GPIO_Init+0x304>)
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80084b0:	4b18      	ldr	r3, [pc, #96]	; (8008514 <HAL_GPIO_Init+0x304>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	43db      	mvns	r3, r3
 80084ba:	69ba      	ldr	r2, [r7, #24]
 80084bc:	4013      	ands	r3, r2
 80084be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d003      	beq.n	80084d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80084cc:	69ba      	ldr	r2, [r7, #24]
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80084d4:	4a0f      	ldr	r2, [pc, #60]	; (8008514 <HAL_GPIO_Init+0x304>)
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	3301      	adds	r3, #1
 80084de:	61fb      	str	r3, [r7, #28]
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	2b0f      	cmp	r3, #15
 80084e4:	f67f aea2 	bls.w	800822c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80084e8:	bf00      	nop
 80084ea:	bf00      	nop
 80084ec:	3724      	adds	r7, #36	; 0x24
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	40023800 	.word	0x40023800
 80084fc:	40013800 	.word	0x40013800
 8008500:	40020000 	.word	0x40020000
 8008504:	40020400 	.word	0x40020400
 8008508:	40020800 	.word	0x40020800
 800850c:	40020c00 	.word	0x40020c00
 8008510:	40021000 	.word	0x40021000
 8008514:	40013c00 	.word	0x40013c00

08008518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	460b      	mov	r3, r1
 8008522:	807b      	strh	r3, [r7, #2]
 8008524:	4613      	mov	r3, r2
 8008526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008528:	787b      	ldrb	r3, [r7, #1]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800852e:	887a      	ldrh	r2, [r7, #2]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008534:	e003      	b.n	800853e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008536:	887b      	ldrh	r3, [r7, #2]
 8008538:	041a      	lsls	r2, r3, #16
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	619a      	str	r2, [r3, #24]
}
 800853e:	bf00      	nop
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
	...

0800854c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	4603      	mov	r3, r0
 8008554:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008556:	4b08      	ldr	r3, [pc, #32]	; (8008578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008558:	695a      	ldr	r2, [r3, #20]
 800855a:	88fb      	ldrh	r3, [r7, #6]
 800855c:	4013      	ands	r3, r2
 800855e:	2b00      	cmp	r3, #0
 8008560:	d006      	beq.n	8008570 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008562:	4a05      	ldr	r2, [pc, #20]	; (8008578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008564:	88fb      	ldrh	r3, [r7, #6]
 8008566:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008568:	88fb      	ldrh	r3, [r7, #6]
 800856a:	4618      	mov	r0, r3
 800856c:	f7fd fbe8 	bl	8005d40 <HAL_GPIO_EXTI_Callback>
  }
}
 8008570:	bf00      	nop
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	40013c00 	.word	0x40013c00

0800857c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e12b      	b.n	80087e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7fd fca6 	bl	8005ef4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2224      	movs	r2, #36	; 0x24
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f022 0201 	bic.w	r2, r2, #1
 80085be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80085e0:	f001 fbbc 	bl	8009d5c <HAL_RCC_GetPCLK1Freq>
 80085e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	4a81      	ldr	r2, [pc, #516]	; (80087f0 <HAL_I2C_Init+0x274>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d807      	bhi.n	8008600 <HAL_I2C_Init+0x84>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	4a80      	ldr	r2, [pc, #512]	; (80087f4 <HAL_I2C_Init+0x278>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	bf94      	ite	ls
 80085f8:	2301      	movls	r3, #1
 80085fa:	2300      	movhi	r3, #0
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	e006      	b.n	800860e <HAL_I2C_Init+0x92>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4a7d      	ldr	r2, [pc, #500]	; (80087f8 <HAL_I2C_Init+0x27c>)
 8008604:	4293      	cmp	r3, r2
 8008606:	bf94      	ite	ls
 8008608:	2301      	movls	r3, #1
 800860a:	2300      	movhi	r3, #0
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e0e7      	b.n	80087e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	4a78      	ldr	r2, [pc, #480]	; (80087fc <HAL_I2C_Init+0x280>)
 800861a:	fba2 2303 	umull	r2, r3, r2, r3
 800861e:	0c9b      	lsrs	r3, r3, #18
 8008620:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	430a      	orrs	r2, r1
 8008634:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	6a1b      	ldr	r3, [r3, #32]
 800863c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	4a6a      	ldr	r2, [pc, #424]	; (80087f0 <HAL_I2C_Init+0x274>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d802      	bhi.n	8008650 <HAL_I2C_Init+0xd4>
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	3301      	adds	r3, #1
 800864e:	e009      	b.n	8008664 <HAL_I2C_Init+0xe8>
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008656:	fb02 f303 	mul.w	r3, r2, r3
 800865a:	4a69      	ldr	r2, [pc, #420]	; (8008800 <HAL_I2C_Init+0x284>)
 800865c:	fba2 2303 	umull	r2, r3, r2, r3
 8008660:	099b      	lsrs	r3, r3, #6
 8008662:	3301      	adds	r3, #1
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	6812      	ldr	r2, [r2, #0]
 8008668:	430b      	orrs	r3, r1
 800866a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	69db      	ldr	r3, [r3, #28]
 8008672:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008676:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	495c      	ldr	r1, [pc, #368]	; (80087f0 <HAL_I2C_Init+0x274>)
 8008680:	428b      	cmp	r3, r1
 8008682:	d819      	bhi.n	80086b8 <HAL_I2C_Init+0x13c>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	1e59      	subs	r1, r3, #1
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	005b      	lsls	r3, r3, #1
 800868e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008692:	1c59      	adds	r1, r3, #1
 8008694:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008698:	400b      	ands	r3, r1
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00a      	beq.n	80086b4 <HAL_I2C_Init+0x138>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	1e59      	subs	r1, r3, #1
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	005b      	lsls	r3, r3, #1
 80086a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80086ac:	3301      	adds	r3, #1
 80086ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086b2:	e051      	b.n	8008758 <HAL_I2C_Init+0x1dc>
 80086b4:	2304      	movs	r3, #4
 80086b6:	e04f      	b.n	8008758 <HAL_I2C_Init+0x1dc>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d111      	bne.n	80086e4 <HAL_I2C_Init+0x168>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	1e58      	subs	r0, r3, #1
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6859      	ldr	r1, [r3, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	005b      	lsls	r3, r3, #1
 80086cc:	440b      	add	r3, r1
 80086ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80086d2:	3301      	adds	r3, #1
 80086d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086d8:	2b00      	cmp	r3, #0
 80086da:	bf0c      	ite	eq
 80086dc:	2301      	moveq	r3, #1
 80086de:	2300      	movne	r3, #0
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	e012      	b.n	800870a <HAL_I2C_Init+0x18e>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	1e58      	subs	r0, r3, #1
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6859      	ldr	r1, [r3, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	440b      	add	r3, r1
 80086f2:	0099      	lsls	r1, r3, #2
 80086f4:	440b      	add	r3, r1
 80086f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80086fa:	3301      	adds	r3, #1
 80086fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008700:	2b00      	cmp	r3, #0
 8008702:	bf0c      	ite	eq
 8008704:	2301      	moveq	r3, #1
 8008706:	2300      	movne	r3, #0
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <HAL_I2C_Init+0x196>
 800870e:	2301      	movs	r3, #1
 8008710:	e022      	b.n	8008758 <HAL_I2C_Init+0x1dc>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10e      	bne.n	8008738 <HAL_I2C_Init+0x1bc>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	1e58      	subs	r0, r3, #1
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6859      	ldr	r1, [r3, #4]
 8008722:	460b      	mov	r3, r1
 8008724:	005b      	lsls	r3, r3, #1
 8008726:	440b      	add	r3, r1
 8008728:	fbb0 f3f3 	udiv	r3, r0, r3
 800872c:	3301      	adds	r3, #1
 800872e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008736:	e00f      	b.n	8008758 <HAL_I2C_Init+0x1dc>
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	1e58      	subs	r0, r3, #1
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6859      	ldr	r1, [r3, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	440b      	add	r3, r1
 8008746:	0099      	lsls	r1, r3, #2
 8008748:	440b      	add	r3, r1
 800874a:	fbb0 f3f3 	udiv	r3, r0, r3
 800874e:	3301      	adds	r3, #1
 8008750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008758:	6879      	ldr	r1, [r7, #4]
 800875a:	6809      	ldr	r1, [r1, #0]
 800875c:	4313      	orrs	r3, r2
 800875e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	69da      	ldr	r2, [r3, #28]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	431a      	orrs	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	430a      	orrs	r2, r1
 800877a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008786:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	6911      	ldr	r1, [r2, #16]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	68d2      	ldr	r2, [r2, #12]
 8008792:	4311      	orrs	r1, r2
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	6812      	ldr	r2, [r2, #0]
 8008798:	430b      	orrs	r3, r1
 800879a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	695a      	ldr	r2, [r3, #20]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	431a      	orrs	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	430a      	orrs	r2, r1
 80087b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f042 0201 	orr.w	r2, r2, #1
 80087c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2220      	movs	r2, #32
 80087d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	000186a0 	.word	0x000186a0
 80087f4:	001e847f 	.word	0x001e847f
 80087f8:	003d08ff 	.word	0x003d08ff
 80087fc:	431bde83 	.word	0x431bde83
 8008800:	10624dd3 	.word	0x10624dd3

08008804 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b088      	sub	sp, #32
 8008808:	af02      	add	r7, sp, #8
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	4608      	mov	r0, r1
 800880e:	4611      	mov	r1, r2
 8008810:	461a      	mov	r2, r3
 8008812:	4603      	mov	r3, r0
 8008814:	817b      	strh	r3, [r7, #10]
 8008816:	460b      	mov	r3, r1
 8008818:	813b      	strh	r3, [r7, #8]
 800881a:	4613      	mov	r3, r2
 800881c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800881e:	f7fd ff65 	bl	80066ec <HAL_GetTick>
 8008822:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b20      	cmp	r3, #32
 800882e:	f040 80d9 	bne.w	80089e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	2319      	movs	r3, #25
 8008838:	2201      	movs	r2, #1
 800883a:	496d      	ldr	r1, [pc, #436]	; (80089f0 <HAL_I2C_Mem_Write+0x1ec>)
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f000 fc7f 	bl	8009140 <I2C_WaitOnFlagUntilTimeout>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d001      	beq.n	800884c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008848:	2302      	movs	r3, #2
 800884a:	e0cc      	b.n	80089e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008852:	2b01      	cmp	r3, #1
 8008854:	d101      	bne.n	800885a <HAL_I2C_Mem_Write+0x56>
 8008856:	2302      	movs	r3, #2
 8008858:	e0c5      	b.n	80089e6 <HAL_I2C_Mem_Write+0x1e2>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2201      	movs	r2, #1
 800885e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b01      	cmp	r3, #1
 800886e:	d007      	beq.n	8008880 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f042 0201 	orr.w	r2, r2, #1
 800887e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800888e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2221      	movs	r2, #33	; 0x21
 8008894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2240      	movs	r2, #64	; 0x40
 800889c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6a3a      	ldr	r2, [r7, #32]
 80088aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80088b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	4a4d      	ldr	r2, [pc, #308]	; (80089f4 <HAL_I2C_Mem_Write+0x1f0>)
 80088c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80088c2:	88f8      	ldrh	r0, [r7, #6]
 80088c4:	893a      	ldrh	r2, [r7, #8]
 80088c6:	8979      	ldrh	r1, [r7, #10]
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	9301      	str	r3, [sp, #4]
 80088cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	4603      	mov	r3, r0
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f000 fab6 	bl	8008e44 <I2C_RequestMemoryWrite>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d052      	beq.n	8008984 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e081      	b.n	80089e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f000 fd00 	bl	80092ec <I2C_WaitOnTXEFlagUntilTimeout>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00d      	beq.n	800890e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f6:	2b04      	cmp	r3, #4
 80088f8:	d107      	bne.n	800890a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008908:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e06b      	b.n	80089e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008912:	781a      	ldrb	r2, [r3, #0]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891e:	1c5a      	adds	r2, r3, #1
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008928:	3b01      	subs	r3, #1
 800892a:	b29a      	uxth	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008934:	b29b      	uxth	r3, r3
 8008936:	3b01      	subs	r3, #1
 8008938:	b29a      	uxth	r2, r3
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	695b      	ldr	r3, [r3, #20]
 8008944:	f003 0304 	and.w	r3, r3, #4
 8008948:	2b04      	cmp	r3, #4
 800894a:	d11b      	bne.n	8008984 <HAL_I2C_Mem_Write+0x180>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008950:	2b00      	cmp	r3, #0
 8008952:	d017      	beq.n	8008984 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008958:	781a      	ldrb	r2, [r3, #0]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008964:	1c5a      	adds	r2, r3, #1
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800896e:	3b01      	subs	r3, #1
 8008970:	b29a      	uxth	r2, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800897a:	b29b      	uxth	r3, r3
 800897c:	3b01      	subs	r3, #1
 800897e:	b29a      	uxth	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1aa      	bne.n	80088e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f000 fcec 	bl	800936e <I2C_WaitOnBTFFlagUntilTimeout>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00d      	beq.n	80089b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a0:	2b04      	cmp	r3, #4
 80089a2:	d107      	bne.n	80089b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e016      	b.n	80089e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2220      	movs	r2, #32
 80089cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	e000      	b.n	80089e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80089e4:	2302      	movs	r3, #2
  }
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3718      	adds	r7, #24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	00100002 	.word	0x00100002
 80089f4:	ffff0000 	.word	0xffff0000

080089f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b08c      	sub	sp, #48	; 0x30
 80089fc:	af02      	add	r7, sp, #8
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	4608      	mov	r0, r1
 8008a02:	4611      	mov	r1, r2
 8008a04:	461a      	mov	r2, r3
 8008a06:	4603      	mov	r3, r0
 8008a08:	817b      	strh	r3, [r7, #10]
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	813b      	strh	r3, [r7, #8]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008a12:	f7fd fe6b 	bl	80066ec <HAL_GetTick>
 8008a16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	2b20      	cmp	r3, #32
 8008a22:	f040 8208 	bne.w	8008e36 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	2319      	movs	r3, #25
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	497b      	ldr	r1, [pc, #492]	; (8008c1c <HAL_I2C_Mem_Read+0x224>)
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f000 fb85 	bl	8009140 <I2C_WaitOnFlagUntilTimeout>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008a3c:	2302      	movs	r3, #2
 8008a3e:	e1fb      	b.n	8008e38 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d101      	bne.n	8008a4e <HAL_I2C_Mem_Read+0x56>
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	e1f4      	b.n	8008e38 <HAL_I2C_Mem_Read+0x440>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2201      	movs	r2, #1
 8008a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 0301 	and.w	r3, r3, #1
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d007      	beq.n	8008a74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f042 0201 	orr.w	r2, r2, #1
 8008a72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2222      	movs	r2, #34	; 0x22
 8008a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2240      	movs	r2, #64	; 0x40
 8008a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	4a5b      	ldr	r2, [pc, #364]	; (8008c20 <HAL_I2C_Mem_Read+0x228>)
 8008ab4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ab6:	88f8      	ldrh	r0, [r7, #6]
 8008ab8:	893a      	ldrh	r2, [r7, #8]
 8008aba:	8979      	ldrh	r1, [r7, #10]
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	9301      	str	r3, [sp, #4]
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f000 fa52 	bl	8008f70 <I2C_RequestMemoryRead>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e1b0      	b.n	8008e38 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d113      	bne.n	8008b06 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ade:	2300      	movs	r3, #0
 8008ae0:	623b      	str	r3, [r7, #32]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	623b      	str	r3, [r7, #32]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	623b      	str	r3, [r7, #32]
 8008af2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b02:	601a      	str	r2, [r3, #0]
 8008b04:	e184      	b.n	8008e10 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d11b      	bne.n	8008b46 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b1e:	2300      	movs	r3, #0
 8008b20:	61fb      	str	r3, [r7, #28]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	61fb      	str	r3, [r7, #28]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	61fb      	str	r3, [r7, #28]
 8008b32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	e164      	b.n	8008e10 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d11b      	bne.n	8008b86 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b6e:	2300      	movs	r3, #0
 8008b70:	61bb      	str	r3, [r7, #24]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	61bb      	str	r3, [r7, #24]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	61bb      	str	r3, [r7, #24]
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	e144      	b.n	8008e10 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b86:	2300      	movs	r3, #0
 8008b88:	617b      	str	r3, [r7, #20]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	617b      	str	r3, [r7, #20]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	617b      	str	r3, [r7, #20]
 8008b9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008b9c:	e138      	b.n	8008e10 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ba2:	2b03      	cmp	r3, #3
 8008ba4:	f200 80f1 	bhi.w	8008d8a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d123      	bne.n	8008bf8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 fc1b 	bl	80093f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e139      	b.n	8008e38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	691a      	ldr	r2, [r3, #16]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bce:	b2d2      	uxtb	r2, r2
 8008bd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd6:	1c5a      	adds	r2, r3, #1
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008be0:	3b01      	subs	r3, #1
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008bf6:	e10b      	b.n	8008e10 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d14e      	bne.n	8008c9e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c06:	2200      	movs	r2, #0
 8008c08:	4906      	ldr	r1, [pc, #24]	; (8008c24 <HAL_I2C_Mem_Read+0x22c>)
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 fa98 	bl	8009140 <I2C_WaitOnFlagUntilTimeout>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d008      	beq.n	8008c28 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e10e      	b.n	8008e38 <HAL_I2C_Mem_Read+0x440>
 8008c1a:	bf00      	nop
 8008c1c:	00100002 	.word	0x00100002
 8008c20:	ffff0000 	.word	0xffff0000
 8008c24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	691a      	ldr	r2, [r3, #16]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c42:	b2d2      	uxtb	r2, r2
 8008c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4a:	1c5a      	adds	r2, r3, #1
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c54:	3b01      	subs	r3, #1
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	3b01      	subs	r3, #1
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	691a      	ldr	r2, [r3, #16]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c74:	b2d2      	uxtb	r2, r2
 8008c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	1c5a      	adds	r2, r3, #1
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c86:	3b01      	subs	r3, #1
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	3b01      	subs	r3, #1
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008c9c:	e0b8      	b.n	8008e10 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	4966      	ldr	r1, [pc, #408]	; (8008e40 <HAL_I2C_Mem_Read+0x448>)
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f000 fa49 	bl	8009140 <I2C_WaitOnFlagUntilTimeout>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e0bf      	b.n	8008e38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	691a      	ldr	r2, [r3, #16]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd2:	b2d2      	uxtb	r2, r2
 8008cd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cda:	1c5a      	adds	r2, r3, #1
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d00:	2200      	movs	r2, #0
 8008d02:	494f      	ldr	r1, [pc, #316]	; (8008e40 <HAL_I2C_Mem_Read+0x448>)
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f000 fa1b 	bl	8009140 <I2C_WaitOnFlagUntilTimeout>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d001      	beq.n	8008d14 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	e091      	b.n	8008e38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	691a      	ldr	r2, [r3, #16]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2e:	b2d2      	uxtb	r2, r2
 8008d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d36:	1c5a      	adds	r2, r3, #1
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d40:	3b01      	subs	r3, #1
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	b29a      	uxth	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	691a      	ldr	r2, [r3, #16]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d60:	b2d2      	uxtb	r2, r2
 8008d62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d68:	1c5a      	adds	r2, r3, #1
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d72:	3b01      	subs	r3, #1
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	3b01      	subs	r3, #1
 8008d82:	b29a      	uxth	r2, r3
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008d88:	e042      	b.n	8008e10 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f000 fb2e 	bl	80093f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e04c      	b.n	8008e38 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	691a      	ldr	r2, [r3, #16]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da8:	b2d2      	uxtb	r2, r2
 8008daa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	f003 0304 	and.w	r3, r3, #4
 8008dda:	2b04      	cmp	r3, #4
 8008ddc:	d118      	bne.n	8008e10 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	691a      	ldr	r2, [r3, #16]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de8:	b2d2      	uxtb	r2, r2
 8008dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	1c5a      	adds	r2, r3, #1
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f47f aec2 	bne.w	8008b9e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2220      	movs	r2, #32
 8008e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	e000      	b.n	8008e38 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008e36:	2302      	movs	r3, #2
  }
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3728      	adds	r7, #40	; 0x28
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	00010004 	.word	0x00010004

08008e44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b088      	sub	sp, #32
 8008e48:	af02      	add	r7, sp, #8
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	4611      	mov	r1, r2
 8008e50:	461a      	mov	r2, r3
 8008e52:	4603      	mov	r3, r0
 8008e54:	817b      	strh	r3, [r7, #10]
 8008e56:	460b      	mov	r3, r1
 8008e58:	813b      	strh	r3, [r7, #8]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	6a3b      	ldr	r3, [r7, #32]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f000 f960 	bl	8009140 <I2C_WaitOnFlagUntilTimeout>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00d      	beq.n	8008ea2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e94:	d103      	bne.n	8008e9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e05f      	b.n	8008f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008ea2:	897b      	ldrh	r3, [r7, #10]
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008eb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	6a3a      	ldr	r2, [r7, #32]
 8008eb6:	492d      	ldr	r1, [pc, #180]	; (8008f6c <I2C_RequestMemoryWrite+0x128>)
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 f998 	bl	80091ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e04c      	b.n	8008f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ec8:	2300      	movs	r3, #0
 8008eca:	617b      	str	r3, [r7, #20]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	617b      	str	r3, [r7, #20]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	617b      	str	r3, [r7, #20]
 8008edc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ee0:	6a39      	ldr	r1, [r7, #32]
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f000 fa02 	bl	80092ec <I2C_WaitOnTXEFlagUntilTimeout>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00d      	beq.n	8008f0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef2:	2b04      	cmp	r3, #4
 8008ef4:	d107      	bne.n	8008f06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e02b      	b.n	8008f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008f0a:	88fb      	ldrh	r3, [r7, #6]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d105      	bne.n	8008f1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008f10:	893b      	ldrh	r3, [r7, #8]
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	611a      	str	r2, [r3, #16]
 8008f1a:	e021      	b.n	8008f60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008f1c:	893b      	ldrh	r3, [r7, #8]
 8008f1e:	0a1b      	lsrs	r3, r3, #8
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	b2da      	uxtb	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f2c:	6a39      	ldr	r1, [r7, #32]
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f000 f9dc 	bl	80092ec <I2C_WaitOnTXEFlagUntilTimeout>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00d      	beq.n	8008f56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3e:	2b04      	cmp	r3, #4
 8008f40:	d107      	bne.n	8008f52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e005      	b.n	8008f62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008f56:	893b      	ldrh	r3, [r7, #8]
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3718      	adds	r7, #24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	00010002 	.word	0x00010002

08008f70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b088      	sub	sp, #32
 8008f74:	af02      	add	r7, sp, #8
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	4608      	mov	r0, r1
 8008f7a:	4611      	mov	r1, r2
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	4603      	mov	r3, r0
 8008f80:	817b      	strh	r3, [r7, #10]
 8008f82:	460b      	mov	r3, r1
 8008f84:	813b      	strh	r3, [r7, #8]
 8008f86:	4613      	mov	r3, r2
 8008f88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fa8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f000 f8c2 	bl	8009140 <I2C_WaitOnFlagUntilTimeout>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00d      	beq.n	8008fde <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fd0:	d103      	bne.n	8008fda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e0aa      	b.n	8009134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008fde:	897b      	ldrh	r3, [r7, #10]
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008fec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff0:	6a3a      	ldr	r2, [r7, #32]
 8008ff2:	4952      	ldr	r1, [pc, #328]	; (800913c <I2C_RequestMemoryRead+0x1cc>)
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f000 f8fa 	bl	80091ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d001      	beq.n	8009004 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e097      	b.n	8009134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009004:	2300      	movs	r3, #0
 8009006:	617b      	str	r3, [r7, #20]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	617b      	str	r3, [r7, #20]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	617b      	str	r3, [r7, #20]
 8009018:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800901a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800901c:	6a39      	ldr	r1, [r7, #32]
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 f964 	bl	80092ec <I2C_WaitOnTXEFlagUntilTimeout>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00d      	beq.n	8009046 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902e:	2b04      	cmp	r3, #4
 8009030:	d107      	bne.n	8009042 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009040:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e076      	b.n	8009134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009046:	88fb      	ldrh	r3, [r7, #6]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d105      	bne.n	8009058 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800904c:	893b      	ldrh	r3, [r7, #8]
 800904e:	b2da      	uxtb	r2, r3
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	611a      	str	r2, [r3, #16]
 8009056:	e021      	b.n	800909c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009058:	893b      	ldrh	r3, [r7, #8]
 800905a:	0a1b      	lsrs	r3, r3, #8
 800905c:	b29b      	uxth	r3, r3
 800905e:	b2da      	uxtb	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009068:	6a39      	ldr	r1, [r7, #32]
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 f93e 	bl	80092ec <I2C_WaitOnTXEFlagUntilTimeout>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00d      	beq.n	8009092 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907a:	2b04      	cmp	r3, #4
 800907c:	d107      	bne.n	800908e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800908c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e050      	b.n	8009134 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009092:	893b      	ldrh	r3, [r7, #8]
 8009094:	b2da      	uxtb	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800909c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800909e:	6a39      	ldr	r1, [r7, #32]
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f000 f923 	bl	80092ec <I2C_WaitOnTXEFlagUntilTimeout>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00d      	beq.n	80090c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b0:	2b04      	cmp	r3, #4
 80090b2:	d107      	bne.n	80090c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e035      	b.n	8009134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	6a3b      	ldr	r3, [r7, #32]
 80090de:	2200      	movs	r2, #0
 80090e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 f82b 	bl	8009140 <I2C_WaitOnFlagUntilTimeout>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00d      	beq.n	800910c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090fe:	d103      	bne.n	8009108 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009106:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009108:	2303      	movs	r3, #3
 800910a:	e013      	b.n	8009134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800910c:	897b      	ldrh	r3, [r7, #10]
 800910e:	b2db      	uxtb	r3, r3
 8009110:	f043 0301 	orr.w	r3, r3, #1
 8009114:	b2da      	uxtb	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911e:	6a3a      	ldr	r2, [r7, #32]
 8009120:	4906      	ldr	r1, [pc, #24]	; (800913c <I2C_RequestMemoryRead+0x1cc>)
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f000 f863 	bl	80091ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	e000      	b.n	8009134 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3718      	adds	r7, #24
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	00010002 	.word	0x00010002

08009140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	603b      	str	r3, [r7, #0]
 800914c:	4613      	mov	r3, r2
 800914e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009150:	e025      	b.n	800919e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009158:	d021      	beq.n	800919e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800915a:	f7fd fac7 	bl	80066ec <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	683a      	ldr	r2, [r7, #0]
 8009166:	429a      	cmp	r2, r3
 8009168:	d302      	bcc.n	8009170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d116      	bne.n	800919e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2220      	movs	r2, #32
 800917a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918a:	f043 0220 	orr.w	r2, r3, #32
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e023      	b.n	80091e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	0c1b      	lsrs	r3, r3, #16
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d10d      	bne.n	80091c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	43da      	mvns	r2, r3
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	4013      	ands	r3, r2
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	bf0c      	ite	eq
 80091ba:	2301      	moveq	r3, #1
 80091bc:	2300      	movne	r3, #0
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	461a      	mov	r2, r3
 80091c2:	e00c      	b.n	80091de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	43da      	mvns	r2, r3
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	4013      	ands	r3, r2
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	bf0c      	ite	eq
 80091d6:	2301      	moveq	r3, #1
 80091d8:	2300      	movne	r3, #0
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	461a      	mov	r2, r3
 80091de:	79fb      	ldrb	r3, [r7, #7]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d0b6      	beq.n	8009152 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b084      	sub	sp, #16
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	60f8      	str	r0, [r7, #12]
 80091f6:	60b9      	str	r1, [r7, #8]
 80091f8:	607a      	str	r2, [r7, #4]
 80091fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80091fc:	e051      	b.n	80092a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	695b      	ldr	r3, [r3, #20]
 8009204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800920c:	d123      	bne.n	8009256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800921c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009226:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2220      	movs	r2, #32
 8009232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009242:	f043 0204 	orr.w	r2, r3, #4
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e046      	b.n	80092e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925c:	d021      	beq.n	80092a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800925e:	f7fd fa45 	bl	80066ec <HAL_GetTick>
 8009262:	4602      	mov	r2, r0
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	429a      	cmp	r2, r3
 800926c:	d302      	bcc.n	8009274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d116      	bne.n	80092a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2220      	movs	r2, #32
 800927e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928e:	f043 0220 	orr.w	r2, r3, #32
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	e020      	b.n	80092e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	0c1b      	lsrs	r3, r3, #16
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d10c      	bne.n	80092c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	695b      	ldr	r3, [r3, #20]
 80092b2:	43da      	mvns	r2, r3
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	4013      	ands	r3, r2
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	bf14      	ite	ne
 80092be:	2301      	movne	r3, #1
 80092c0:	2300      	moveq	r3, #0
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	e00b      	b.n	80092de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	699b      	ldr	r3, [r3, #24]
 80092cc:	43da      	mvns	r2, r3
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	4013      	ands	r3, r2
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	bf14      	ite	ne
 80092d8:	2301      	movne	r3, #1
 80092da:	2300      	moveq	r3, #0
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d18d      	bne.n	80091fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80092f8:	e02d      	b.n	8009356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 f8ce 	bl	800949c <I2C_IsAcknowledgeFailed>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e02d      	b.n	8009366 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009310:	d021      	beq.n	8009356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009312:	f7fd f9eb 	bl	80066ec <HAL_GetTick>
 8009316:	4602      	mov	r2, r0
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	429a      	cmp	r2, r3
 8009320:	d302      	bcc.n	8009328 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d116      	bne.n	8009356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2220      	movs	r2, #32
 8009332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009342:	f043 0220 	orr.w	r2, r3, #32
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e007      	b.n	8009366 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	695b      	ldr	r3, [r3, #20]
 800935c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009360:	2b80      	cmp	r3, #128	; 0x80
 8009362:	d1ca      	bne.n	80092fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	60f8      	str	r0, [r7, #12]
 8009376:	60b9      	str	r1, [r7, #8]
 8009378:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800937a:	e02d      	b.n	80093d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f000 f88d 	bl	800949c <I2C_IsAcknowledgeFailed>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	e02d      	b.n	80093e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009392:	d021      	beq.n	80093d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009394:	f7fd f9aa 	bl	80066ec <HAL_GetTick>
 8009398:	4602      	mov	r2, r0
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	1ad3      	subs	r3, r2, r3
 800939e:	68ba      	ldr	r2, [r7, #8]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d302      	bcc.n	80093aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d116      	bne.n	80093d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2220      	movs	r2, #32
 80093b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c4:	f043 0220 	orr.w	r2, r3, #32
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e007      	b.n	80093e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	695b      	ldr	r3, [r3, #20]
 80093de:	f003 0304 	and.w	r3, r3, #4
 80093e2:	2b04      	cmp	r3, #4
 80093e4:	d1ca      	bne.n	800937c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80093fc:	e042      	b.n	8009484 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	f003 0310 	and.w	r3, r3, #16
 8009408:	2b10      	cmp	r3, #16
 800940a:	d119      	bne.n	8009440 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f06f 0210 	mvn.w	r2, #16
 8009414:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2220      	movs	r2, #32
 8009420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e029      	b.n	8009494 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009440:	f7fd f954 	bl	80066ec <HAL_GetTick>
 8009444:	4602      	mov	r2, r0
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	429a      	cmp	r2, r3
 800944e:	d302      	bcc.n	8009456 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d116      	bne.n	8009484 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2220      	movs	r2, #32
 8009460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009470:	f043 0220 	orr.w	r2, r3, #32
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e007      	b.n	8009494 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800948e:	2b40      	cmp	r3, #64	; 0x40
 8009490:	d1b5      	bne.n	80093fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	695b      	ldr	r3, [r3, #20]
 80094aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094b2:	d11b      	bne.n	80094ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80094bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2220      	movs	r2, #32
 80094c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d8:	f043 0204 	orr.w	r2, r3, #4
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e000      	b.n	80094ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
	...

080094fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b086      	sub	sp, #24
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d101      	bne.n	800950e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e267      	b.n	80099de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	2b00      	cmp	r3, #0
 8009518:	d075      	beq.n	8009606 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800951a:	4b88      	ldr	r3, [pc, #544]	; (800973c <HAL_RCC_OscConfig+0x240>)
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	f003 030c 	and.w	r3, r3, #12
 8009522:	2b04      	cmp	r3, #4
 8009524:	d00c      	beq.n	8009540 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009526:	4b85      	ldr	r3, [pc, #532]	; (800973c <HAL_RCC_OscConfig+0x240>)
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800952e:	2b08      	cmp	r3, #8
 8009530:	d112      	bne.n	8009558 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009532:	4b82      	ldr	r3, [pc, #520]	; (800973c <HAL_RCC_OscConfig+0x240>)
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800953a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800953e:	d10b      	bne.n	8009558 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009540:	4b7e      	ldr	r3, [pc, #504]	; (800973c <HAL_RCC_OscConfig+0x240>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009548:	2b00      	cmp	r3, #0
 800954a:	d05b      	beq.n	8009604 <HAL_RCC_OscConfig+0x108>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d157      	bne.n	8009604 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e242      	b.n	80099de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009560:	d106      	bne.n	8009570 <HAL_RCC_OscConfig+0x74>
 8009562:	4b76      	ldr	r3, [pc, #472]	; (800973c <HAL_RCC_OscConfig+0x240>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a75      	ldr	r2, [pc, #468]	; (800973c <HAL_RCC_OscConfig+0x240>)
 8009568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800956c:	6013      	str	r3, [r2, #0]
 800956e:	e01d      	b.n	80095ac <HAL_RCC_OscConfig+0xb0>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009578:	d10c      	bne.n	8009594 <HAL_RCC_OscConfig+0x98>
 800957a:	4b70      	ldr	r3, [pc, #448]	; (800973c <HAL_RCC_OscConfig+0x240>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a6f      	ldr	r2, [pc, #444]	; (800973c <HAL_RCC_OscConfig+0x240>)
 8009580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009584:	6013      	str	r3, [r2, #0]
 8009586:	4b6d      	ldr	r3, [pc, #436]	; (800973c <HAL_RCC_OscConfig+0x240>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a6c      	ldr	r2, [pc, #432]	; (800973c <HAL_RCC_OscConfig+0x240>)
 800958c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009590:	6013      	str	r3, [r2, #0]
 8009592:	e00b      	b.n	80095ac <HAL_RCC_OscConfig+0xb0>
 8009594:	4b69      	ldr	r3, [pc, #420]	; (800973c <HAL_RCC_OscConfig+0x240>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a68      	ldr	r2, [pc, #416]	; (800973c <HAL_RCC_OscConfig+0x240>)
 800959a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800959e:	6013      	str	r3, [r2, #0]
 80095a0:	4b66      	ldr	r3, [pc, #408]	; (800973c <HAL_RCC_OscConfig+0x240>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a65      	ldr	r2, [pc, #404]	; (800973c <HAL_RCC_OscConfig+0x240>)
 80095a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d013      	beq.n	80095dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095b4:	f7fd f89a 	bl	80066ec <HAL_GetTick>
 80095b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095ba:	e008      	b.n	80095ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80095bc:	f7fd f896 	bl	80066ec <HAL_GetTick>
 80095c0:	4602      	mov	r2, r0
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	2b64      	cmp	r3, #100	; 0x64
 80095c8:	d901      	bls.n	80095ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80095ca:	2303      	movs	r3, #3
 80095cc:	e207      	b.n	80099de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095ce:	4b5b      	ldr	r3, [pc, #364]	; (800973c <HAL_RCC_OscConfig+0x240>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d0f0      	beq.n	80095bc <HAL_RCC_OscConfig+0xc0>
 80095da:	e014      	b.n	8009606 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095dc:	f7fd f886 	bl	80066ec <HAL_GetTick>
 80095e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80095e2:	e008      	b.n	80095f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80095e4:	f7fd f882 	bl	80066ec <HAL_GetTick>
 80095e8:	4602      	mov	r2, r0
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	1ad3      	subs	r3, r2, r3
 80095ee:	2b64      	cmp	r3, #100	; 0x64
 80095f0:	d901      	bls.n	80095f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80095f2:	2303      	movs	r3, #3
 80095f4:	e1f3      	b.n	80099de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80095f6:	4b51      	ldr	r3, [pc, #324]	; (800973c <HAL_RCC_OscConfig+0x240>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1f0      	bne.n	80095e4 <HAL_RCC_OscConfig+0xe8>
 8009602:	e000      	b.n	8009606 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 0302 	and.w	r3, r3, #2
 800960e:	2b00      	cmp	r3, #0
 8009610:	d063      	beq.n	80096da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009612:	4b4a      	ldr	r3, [pc, #296]	; (800973c <HAL_RCC_OscConfig+0x240>)
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	f003 030c 	and.w	r3, r3, #12
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00b      	beq.n	8009636 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800961e:	4b47      	ldr	r3, [pc, #284]	; (800973c <HAL_RCC_OscConfig+0x240>)
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009626:	2b08      	cmp	r3, #8
 8009628:	d11c      	bne.n	8009664 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800962a:	4b44      	ldr	r3, [pc, #272]	; (800973c <HAL_RCC_OscConfig+0x240>)
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009632:	2b00      	cmp	r3, #0
 8009634:	d116      	bne.n	8009664 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009636:	4b41      	ldr	r3, [pc, #260]	; (800973c <HAL_RCC_OscConfig+0x240>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 0302 	and.w	r3, r3, #2
 800963e:	2b00      	cmp	r3, #0
 8009640:	d005      	beq.n	800964e <HAL_RCC_OscConfig+0x152>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d001      	beq.n	800964e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e1c7      	b.n	80099de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800964e:	4b3b      	ldr	r3, [pc, #236]	; (800973c <HAL_RCC_OscConfig+0x240>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	00db      	lsls	r3, r3, #3
 800965c:	4937      	ldr	r1, [pc, #220]	; (800973c <HAL_RCC_OscConfig+0x240>)
 800965e:	4313      	orrs	r3, r2
 8009660:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009662:	e03a      	b.n	80096da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d020      	beq.n	80096ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800966c:	4b34      	ldr	r3, [pc, #208]	; (8009740 <HAL_RCC_OscConfig+0x244>)
 800966e:	2201      	movs	r2, #1
 8009670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009672:	f7fd f83b 	bl	80066ec <HAL_GetTick>
 8009676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009678:	e008      	b.n	800968c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800967a:	f7fd f837 	bl	80066ec <HAL_GetTick>
 800967e:	4602      	mov	r2, r0
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	2b02      	cmp	r3, #2
 8009686:	d901      	bls.n	800968c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009688:	2303      	movs	r3, #3
 800968a:	e1a8      	b.n	80099de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800968c:	4b2b      	ldr	r3, [pc, #172]	; (800973c <HAL_RCC_OscConfig+0x240>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 0302 	and.w	r3, r3, #2
 8009694:	2b00      	cmp	r3, #0
 8009696:	d0f0      	beq.n	800967a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009698:	4b28      	ldr	r3, [pc, #160]	; (800973c <HAL_RCC_OscConfig+0x240>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	00db      	lsls	r3, r3, #3
 80096a6:	4925      	ldr	r1, [pc, #148]	; (800973c <HAL_RCC_OscConfig+0x240>)
 80096a8:	4313      	orrs	r3, r2
 80096aa:	600b      	str	r3, [r1, #0]
 80096ac:	e015      	b.n	80096da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80096ae:	4b24      	ldr	r3, [pc, #144]	; (8009740 <HAL_RCC_OscConfig+0x244>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096b4:	f7fd f81a 	bl	80066ec <HAL_GetTick>
 80096b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80096ba:	e008      	b.n	80096ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096bc:	f7fd f816 	bl	80066ec <HAL_GetTick>
 80096c0:	4602      	mov	r2, r0
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d901      	bls.n	80096ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80096ca:	2303      	movs	r3, #3
 80096cc:	e187      	b.n	80099de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80096ce:	4b1b      	ldr	r3, [pc, #108]	; (800973c <HAL_RCC_OscConfig+0x240>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 0302 	and.w	r3, r3, #2
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1f0      	bne.n	80096bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f003 0308 	and.w	r3, r3, #8
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d036      	beq.n	8009754 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d016      	beq.n	800971c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80096ee:	4b15      	ldr	r3, [pc, #84]	; (8009744 <HAL_RCC_OscConfig+0x248>)
 80096f0:	2201      	movs	r2, #1
 80096f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096f4:	f7fc fffa 	bl	80066ec <HAL_GetTick>
 80096f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096fa:	e008      	b.n	800970e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80096fc:	f7fc fff6 	bl	80066ec <HAL_GetTick>
 8009700:	4602      	mov	r2, r0
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	1ad3      	subs	r3, r2, r3
 8009706:	2b02      	cmp	r3, #2
 8009708:	d901      	bls.n	800970e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800970a:	2303      	movs	r3, #3
 800970c:	e167      	b.n	80099de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800970e:	4b0b      	ldr	r3, [pc, #44]	; (800973c <HAL_RCC_OscConfig+0x240>)
 8009710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009712:	f003 0302 	and.w	r3, r3, #2
 8009716:	2b00      	cmp	r3, #0
 8009718:	d0f0      	beq.n	80096fc <HAL_RCC_OscConfig+0x200>
 800971a:	e01b      	b.n	8009754 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800971c:	4b09      	ldr	r3, [pc, #36]	; (8009744 <HAL_RCC_OscConfig+0x248>)
 800971e:	2200      	movs	r2, #0
 8009720:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009722:	f7fc ffe3 	bl	80066ec <HAL_GetTick>
 8009726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009728:	e00e      	b.n	8009748 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800972a:	f7fc ffdf 	bl	80066ec <HAL_GetTick>
 800972e:	4602      	mov	r2, r0
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	2b02      	cmp	r3, #2
 8009736:	d907      	bls.n	8009748 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009738:	2303      	movs	r3, #3
 800973a:	e150      	b.n	80099de <HAL_RCC_OscConfig+0x4e2>
 800973c:	40023800 	.word	0x40023800
 8009740:	42470000 	.word	0x42470000
 8009744:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009748:	4b88      	ldr	r3, [pc, #544]	; (800996c <HAL_RCC_OscConfig+0x470>)
 800974a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800974c:	f003 0302 	and.w	r3, r3, #2
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1ea      	bne.n	800972a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 0304 	and.w	r3, r3, #4
 800975c:	2b00      	cmp	r3, #0
 800975e:	f000 8097 	beq.w	8009890 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009762:	2300      	movs	r3, #0
 8009764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009766:	4b81      	ldr	r3, [pc, #516]	; (800996c <HAL_RCC_OscConfig+0x470>)
 8009768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10f      	bne.n	8009792 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009772:	2300      	movs	r3, #0
 8009774:	60bb      	str	r3, [r7, #8]
 8009776:	4b7d      	ldr	r3, [pc, #500]	; (800996c <HAL_RCC_OscConfig+0x470>)
 8009778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977a:	4a7c      	ldr	r2, [pc, #496]	; (800996c <HAL_RCC_OscConfig+0x470>)
 800977c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009780:	6413      	str	r3, [r2, #64]	; 0x40
 8009782:	4b7a      	ldr	r3, [pc, #488]	; (800996c <HAL_RCC_OscConfig+0x470>)
 8009784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800978a:	60bb      	str	r3, [r7, #8]
 800978c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800978e:	2301      	movs	r3, #1
 8009790:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009792:	4b77      	ldr	r3, [pc, #476]	; (8009970 <HAL_RCC_OscConfig+0x474>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800979a:	2b00      	cmp	r3, #0
 800979c:	d118      	bne.n	80097d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800979e:	4b74      	ldr	r3, [pc, #464]	; (8009970 <HAL_RCC_OscConfig+0x474>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a73      	ldr	r2, [pc, #460]	; (8009970 <HAL_RCC_OscConfig+0x474>)
 80097a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80097aa:	f7fc ff9f 	bl	80066ec <HAL_GetTick>
 80097ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097b0:	e008      	b.n	80097c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097b2:	f7fc ff9b 	bl	80066ec <HAL_GetTick>
 80097b6:	4602      	mov	r2, r0
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	2b02      	cmp	r3, #2
 80097be:	d901      	bls.n	80097c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80097c0:	2303      	movs	r3, #3
 80097c2:	e10c      	b.n	80099de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097c4:	4b6a      	ldr	r3, [pc, #424]	; (8009970 <HAL_RCC_OscConfig+0x474>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d0f0      	beq.n	80097b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d106      	bne.n	80097e6 <HAL_RCC_OscConfig+0x2ea>
 80097d8:	4b64      	ldr	r3, [pc, #400]	; (800996c <HAL_RCC_OscConfig+0x470>)
 80097da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097dc:	4a63      	ldr	r2, [pc, #396]	; (800996c <HAL_RCC_OscConfig+0x470>)
 80097de:	f043 0301 	orr.w	r3, r3, #1
 80097e2:	6713      	str	r3, [r2, #112]	; 0x70
 80097e4:	e01c      	b.n	8009820 <HAL_RCC_OscConfig+0x324>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	2b05      	cmp	r3, #5
 80097ec:	d10c      	bne.n	8009808 <HAL_RCC_OscConfig+0x30c>
 80097ee:	4b5f      	ldr	r3, [pc, #380]	; (800996c <HAL_RCC_OscConfig+0x470>)
 80097f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f2:	4a5e      	ldr	r2, [pc, #376]	; (800996c <HAL_RCC_OscConfig+0x470>)
 80097f4:	f043 0304 	orr.w	r3, r3, #4
 80097f8:	6713      	str	r3, [r2, #112]	; 0x70
 80097fa:	4b5c      	ldr	r3, [pc, #368]	; (800996c <HAL_RCC_OscConfig+0x470>)
 80097fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097fe:	4a5b      	ldr	r2, [pc, #364]	; (800996c <HAL_RCC_OscConfig+0x470>)
 8009800:	f043 0301 	orr.w	r3, r3, #1
 8009804:	6713      	str	r3, [r2, #112]	; 0x70
 8009806:	e00b      	b.n	8009820 <HAL_RCC_OscConfig+0x324>
 8009808:	4b58      	ldr	r3, [pc, #352]	; (800996c <HAL_RCC_OscConfig+0x470>)
 800980a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800980c:	4a57      	ldr	r2, [pc, #348]	; (800996c <HAL_RCC_OscConfig+0x470>)
 800980e:	f023 0301 	bic.w	r3, r3, #1
 8009812:	6713      	str	r3, [r2, #112]	; 0x70
 8009814:	4b55      	ldr	r3, [pc, #340]	; (800996c <HAL_RCC_OscConfig+0x470>)
 8009816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009818:	4a54      	ldr	r2, [pc, #336]	; (800996c <HAL_RCC_OscConfig+0x470>)
 800981a:	f023 0304 	bic.w	r3, r3, #4
 800981e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d015      	beq.n	8009854 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009828:	f7fc ff60 	bl	80066ec <HAL_GetTick>
 800982c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800982e:	e00a      	b.n	8009846 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009830:	f7fc ff5c 	bl	80066ec <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	f241 3288 	movw	r2, #5000	; 0x1388
 800983e:	4293      	cmp	r3, r2
 8009840:	d901      	bls.n	8009846 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009842:	2303      	movs	r3, #3
 8009844:	e0cb      	b.n	80099de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009846:	4b49      	ldr	r3, [pc, #292]	; (800996c <HAL_RCC_OscConfig+0x470>)
 8009848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800984a:	f003 0302 	and.w	r3, r3, #2
 800984e:	2b00      	cmp	r3, #0
 8009850:	d0ee      	beq.n	8009830 <HAL_RCC_OscConfig+0x334>
 8009852:	e014      	b.n	800987e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009854:	f7fc ff4a 	bl	80066ec <HAL_GetTick>
 8009858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800985a:	e00a      	b.n	8009872 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800985c:	f7fc ff46 	bl	80066ec <HAL_GetTick>
 8009860:	4602      	mov	r2, r0
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	1ad3      	subs	r3, r2, r3
 8009866:	f241 3288 	movw	r2, #5000	; 0x1388
 800986a:	4293      	cmp	r3, r2
 800986c:	d901      	bls.n	8009872 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800986e:	2303      	movs	r3, #3
 8009870:	e0b5      	b.n	80099de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009872:	4b3e      	ldr	r3, [pc, #248]	; (800996c <HAL_RCC_OscConfig+0x470>)
 8009874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009876:	f003 0302 	and.w	r3, r3, #2
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1ee      	bne.n	800985c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800987e:	7dfb      	ldrb	r3, [r7, #23]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d105      	bne.n	8009890 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009884:	4b39      	ldr	r3, [pc, #228]	; (800996c <HAL_RCC_OscConfig+0x470>)
 8009886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009888:	4a38      	ldr	r2, [pc, #224]	; (800996c <HAL_RCC_OscConfig+0x470>)
 800988a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800988e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	699b      	ldr	r3, [r3, #24]
 8009894:	2b00      	cmp	r3, #0
 8009896:	f000 80a1 	beq.w	80099dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800989a:	4b34      	ldr	r3, [pc, #208]	; (800996c <HAL_RCC_OscConfig+0x470>)
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	f003 030c 	and.w	r3, r3, #12
 80098a2:	2b08      	cmp	r3, #8
 80098a4:	d05c      	beq.n	8009960 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d141      	bne.n	8009932 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098ae:	4b31      	ldr	r3, [pc, #196]	; (8009974 <HAL_RCC_OscConfig+0x478>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098b4:	f7fc ff1a 	bl	80066ec <HAL_GetTick>
 80098b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098ba:	e008      	b.n	80098ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098bc:	f7fc ff16 	bl	80066ec <HAL_GetTick>
 80098c0:	4602      	mov	r2, r0
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	1ad3      	subs	r3, r2, r3
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d901      	bls.n	80098ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80098ca:	2303      	movs	r3, #3
 80098cc:	e087      	b.n	80099de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098ce:	4b27      	ldr	r3, [pc, #156]	; (800996c <HAL_RCC_OscConfig+0x470>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1f0      	bne.n	80098bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	69da      	ldr	r2, [r3, #28]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a1b      	ldr	r3, [r3, #32]
 80098e2:	431a      	orrs	r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e8:	019b      	lsls	r3, r3, #6
 80098ea:	431a      	orrs	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f0:	085b      	lsrs	r3, r3, #1
 80098f2:	3b01      	subs	r3, #1
 80098f4:	041b      	lsls	r3, r3, #16
 80098f6:	431a      	orrs	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fc:	061b      	lsls	r3, r3, #24
 80098fe:	491b      	ldr	r1, [pc, #108]	; (800996c <HAL_RCC_OscConfig+0x470>)
 8009900:	4313      	orrs	r3, r2
 8009902:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009904:	4b1b      	ldr	r3, [pc, #108]	; (8009974 <HAL_RCC_OscConfig+0x478>)
 8009906:	2201      	movs	r2, #1
 8009908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800990a:	f7fc feef 	bl	80066ec <HAL_GetTick>
 800990e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009910:	e008      	b.n	8009924 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009912:	f7fc feeb 	bl	80066ec <HAL_GetTick>
 8009916:	4602      	mov	r2, r0
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	2b02      	cmp	r3, #2
 800991e:	d901      	bls.n	8009924 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009920:	2303      	movs	r3, #3
 8009922:	e05c      	b.n	80099de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009924:	4b11      	ldr	r3, [pc, #68]	; (800996c <HAL_RCC_OscConfig+0x470>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d0f0      	beq.n	8009912 <HAL_RCC_OscConfig+0x416>
 8009930:	e054      	b.n	80099dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009932:	4b10      	ldr	r3, [pc, #64]	; (8009974 <HAL_RCC_OscConfig+0x478>)
 8009934:	2200      	movs	r2, #0
 8009936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009938:	f7fc fed8 	bl	80066ec <HAL_GetTick>
 800993c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800993e:	e008      	b.n	8009952 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009940:	f7fc fed4 	bl	80066ec <HAL_GetTick>
 8009944:	4602      	mov	r2, r0
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	2b02      	cmp	r3, #2
 800994c:	d901      	bls.n	8009952 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800994e:	2303      	movs	r3, #3
 8009950:	e045      	b.n	80099de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009952:	4b06      	ldr	r3, [pc, #24]	; (800996c <HAL_RCC_OscConfig+0x470>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1f0      	bne.n	8009940 <HAL_RCC_OscConfig+0x444>
 800995e:	e03d      	b.n	80099dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	699b      	ldr	r3, [r3, #24]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d107      	bne.n	8009978 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	e038      	b.n	80099de <HAL_RCC_OscConfig+0x4e2>
 800996c:	40023800 	.word	0x40023800
 8009970:	40007000 	.word	0x40007000
 8009974:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009978:	4b1b      	ldr	r3, [pc, #108]	; (80099e8 <HAL_RCC_OscConfig+0x4ec>)
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d028      	beq.n	80099d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009990:	429a      	cmp	r2, r3
 8009992:	d121      	bne.n	80099d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800999e:	429a      	cmp	r2, r3
 80099a0:	d11a      	bne.n	80099d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80099a8:	4013      	ands	r3, r2
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80099ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d111      	bne.n	80099d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099be:	085b      	lsrs	r3, r3, #1
 80099c0:	3b01      	subs	r3, #1
 80099c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d107      	bne.n	80099d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d001      	beq.n	80099dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	e000      	b.n	80099de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3718      	adds	r7, #24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	40023800 	.word	0x40023800

080099ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d101      	bne.n	8009a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e0cc      	b.n	8009b9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009a00:	4b68      	ldr	r3, [pc, #416]	; (8009ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 0307 	and.w	r3, r3, #7
 8009a08:	683a      	ldr	r2, [r7, #0]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d90c      	bls.n	8009a28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a0e:	4b65      	ldr	r3, [pc, #404]	; (8009ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8009a10:	683a      	ldr	r2, [r7, #0]
 8009a12:	b2d2      	uxtb	r2, r2
 8009a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a16:	4b63      	ldr	r3, [pc, #396]	; (8009ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f003 0307 	and.w	r3, r3, #7
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d001      	beq.n	8009a28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	e0b8      	b.n	8009b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 0302 	and.w	r3, r3, #2
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d020      	beq.n	8009a76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 0304 	and.w	r3, r3, #4
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d005      	beq.n	8009a4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009a40:	4b59      	ldr	r3, [pc, #356]	; (8009ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	4a58      	ldr	r2, [pc, #352]	; (8009ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009a4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f003 0308 	and.w	r3, r3, #8
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d005      	beq.n	8009a64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009a58:	4b53      	ldr	r3, [pc, #332]	; (8009ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	4a52      	ldr	r2, [pc, #328]	; (8009ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009a62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a64:	4b50      	ldr	r3, [pc, #320]	; (8009ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	494d      	ldr	r1, [pc, #308]	; (8009ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a72:	4313      	orrs	r3, r2
 8009a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 0301 	and.w	r3, r3, #1
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d044      	beq.n	8009b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d107      	bne.n	8009a9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a8a:	4b47      	ldr	r3, [pc, #284]	; (8009ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d119      	bne.n	8009aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e07f      	b.n	8009b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d003      	beq.n	8009aaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009aa6:	2b03      	cmp	r3, #3
 8009aa8:	d107      	bne.n	8009aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009aaa:	4b3f      	ldr	r3, [pc, #252]	; (8009ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d109      	bne.n	8009aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e06f      	b.n	8009b9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009aba:	4b3b      	ldr	r3, [pc, #236]	; (8009ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f003 0302 	and.w	r3, r3, #2
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d101      	bne.n	8009aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e067      	b.n	8009b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009aca:	4b37      	ldr	r3, [pc, #220]	; (8009ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	f023 0203 	bic.w	r2, r3, #3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	4934      	ldr	r1, [pc, #208]	; (8009ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009adc:	f7fc fe06 	bl	80066ec <HAL_GetTick>
 8009ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ae2:	e00a      	b.n	8009afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ae4:	f7fc fe02 	bl	80066ec <HAL_GetTick>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	1ad3      	subs	r3, r2, r3
 8009aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d901      	bls.n	8009afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e04f      	b.n	8009b9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009afa:	4b2b      	ldr	r3, [pc, #172]	; (8009ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	f003 020c 	and.w	r2, r3, #12
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d1eb      	bne.n	8009ae4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009b0c:	4b25      	ldr	r3, [pc, #148]	; (8009ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 0307 	and.w	r3, r3, #7
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d20c      	bcs.n	8009b34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b1a:	4b22      	ldr	r3, [pc, #136]	; (8009ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8009b1c:	683a      	ldr	r2, [r7, #0]
 8009b1e:	b2d2      	uxtb	r2, r2
 8009b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b22:	4b20      	ldr	r3, [pc, #128]	; (8009ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f003 0307 	and.w	r3, r3, #7
 8009b2a:	683a      	ldr	r2, [r7, #0]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d001      	beq.n	8009b34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	e032      	b.n	8009b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 0304 	and.w	r3, r3, #4
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d008      	beq.n	8009b52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b40:	4b19      	ldr	r3, [pc, #100]	; (8009ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	4916      	ldr	r1, [pc, #88]	; (8009ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f003 0308 	and.w	r3, r3, #8
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d009      	beq.n	8009b72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009b5e:	4b12      	ldr	r3, [pc, #72]	; (8009ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	00db      	lsls	r3, r3, #3
 8009b6c:	490e      	ldr	r1, [pc, #56]	; (8009ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009b72:	f000 f821 	bl	8009bb8 <HAL_RCC_GetSysClockFreq>
 8009b76:	4602      	mov	r2, r0
 8009b78:	4b0b      	ldr	r3, [pc, #44]	; (8009ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	091b      	lsrs	r3, r3, #4
 8009b7e:	f003 030f 	and.w	r3, r3, #15
 8009b82:	490a      	ldr	r1, [pc, #40]	; (8009bac <HAL_RCC_ClockConfig+0x1c0>)
 8009b84:	5ccb      	ldrb	r3, [r1, r3]
 8009b86:	fa22 f303 	lsr.w	r3, r2, r3
 8009b8a:	4a09      	ldr	r2, [pc, #36]	; (8009bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8009b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009b8e:	4b09      	ldr	r3, [pc, #36]	; (8009bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fc fd66 	bl	8006664 <HAL_InitTick>

  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	40023c00 	.word	0x40023c00
 8009ba8:	40023800 	.word	0x40023800
 8009bac:	0800e1fc 	.word	0x0800e1fc
 8009bb0:	20008468 	.word	0x20008468
 8009bb4:	2000846c 	.word	0x2000846c

08009bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bbc:	b090      	sub	sp, #64	; 0x40
 8009bbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bc8:	2300      	movs	r3, #0
 8009bca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009bd0:	4b59      	ldr	r3, [pc, #356]	; (8009d38 <HAL_RCC_GetSysClockFreq+0x180>)
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	f003 030c 	and.w	r3, r3, #12
 8009bd8:	2b08      	cmp	r3, #8
 8009bda:	d00d      	beq.n	8009bf8 <HAL_RCC_GetSysClockFreq+0x40>
 8009bdc:	2b08      	cmp	r3, #8
 8009bde:	f200 80a1 	bhi.w	8009d24 <HAL_RCC_GetSysClockFreq+0x16c>
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d002      	beq.n	8009bec <HAL_RCC_GetSysClockFreq+0x34>
 8009be6:	2b04      	cmp	r3, #4
 8009be8:	d003      	beq.n	8009bf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8009bea:	e09b      	b.n	8009d24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009bec:	4b53      	ldr	r3, [pc, #332]	; (8009d3c <HAL_RCC_GetSysClockFreq+0x184>)
 8009bee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8009bf0:	e09b      	b.n	8009d2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009bf2:	4b53      	ldr	r3, [pc, #332]	; (8009d40 <HAL_RCC_GetSysClockFreq+0x188>)
 8009bf4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009bf6:	e098      	b.n	8009d2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009bf8:	4b4f      	ldr	r3, [pc, #316]	; (8009d38 <HAL_RCC_GetSysClockFreq+0x180>)
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c00:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009c02:	4b4d      	ldr	r3, [pc, #308]	; (8009d38 <HAL_RCC_GetSysClockFreq+0x180>)
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d028      	beq.n	8009c60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c0e:	4b4a      	ldr	r3, [pc, #296]	; (8009d38 <HAL_RCC_GetSysClockFreq+0x180>)
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	099b      	lsrs	r3, r3, #6
 8009c14:	2200      	movs	r2, #0
 8009c16:	623b      	str	r3, [r7, #32]
 8009c18:	627a      	str	r2, [r7, #36]	; 0x24
 8009c1a:	6a3b      	ldr	r3, [r7, #32]
 8009c1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009c20:	2100      	movs	r1, #0
 8009c22:	4b47      	ldr	r3, [pc, #284]	; (8009d40 <HAL_RCC_GetSysClockFreq+0x188>)
 8009c24:	fb03 f201 	mul.w	r2, r3, r1
 8009c28:	2300      	movs	r3, #0
 8009c2a:	fb00 f303 	mul.w	r3, r0, r3
 8009c2e:	4413      	add	r3, r2
 8009c30:	4a43      	ldr	r2, [pc, #268]	; (8009d40 <HAL_RCC_GetSysClockFreq+0x188>)
 8009c32:	fba0 1202 	umull	r1, r2, r0, r2
 8009c36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c38:	460a      	mov	r2, r1
 8009c3a:	62ba      	str	r2, [r7, #40]	; 0x28
 8009c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c3e:	4413      	add	r3, r2
 8009c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c44:	2200      	movs	r2, #0
 8009c46:	61bb      	str	r3, [r7, #24]
 8009c48:	61fa      	str	r2, [r7, #28]
 8009c4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009c4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009c52:	f7f6 fe1f 	bl	8000894 <__aeabi_uldivmod>
 8009c56:	4602      	mov	r2, r0
 8009c58:	460b      	mov	r3, r1
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c5e:	e053      	b.n	8009d08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c60:	4b35      	ldr	r3, [pc, #212]	; (8009d38 <HAL_RCC_GetSysClockFreq+0x180>)
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	099b      	lsrs	r3, r3, #6
 8009c66:	2200      	movs	r2, #0
 8009c68:	613b      	str	r3, [r7, #16]
 8009c6a:	617a      	str	r2, [r7, #20]
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009c72:	f04f 0b00 	mov.w	fp, #0
 8009c76:	4652      	mov	r2, sl
 8009c78:	465b      	mov	r3, fp
 8009c7a:	f04f 0000 	mov.w	r0, #0
 8009c7e:	f04f 0100 	mov.w	r1, #0
 8009c82:	0159      	lsls	r1, r3, #5
 8009c84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009c88:	0150      	lsls	r0, r2, #5
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	ebb2 080a 	subs.w	r8, r2, sl
 8009c92:	eb63 090b 	sbc.w	r9, r3, fp
 8009c96:	f04f 0200 	mov.w	r2, #0
 8009c9a:	f04f 0300 	mov.w	r3, #0
 8009c9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009ca2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009ca6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009caa:	ebb2 0408 	subs.w	r4, r2, r8
 8009cae:	eb63 0509 	sbc.w	r5, r3, r9
 8009cb2:	f04f 0200 	mov.w	r2, #0
 8009cb6:	f04f 0300 	mov.w	r3, #0
 8009cba:	00eb      	lsls	r3, r5, #3
 8009cbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009cc0:	00e2      	lsls	r2, r4, #3
 8009cc2:	4614      	mov	r4, r2
 8009cc4:	461d      	mov	r5, r3
 8009cc6:	eb14 030a 	adds.w	r3, r4, sl
 8009cca:	603b      	str	r3, [r7, #0]
 8009ccc:	eb45 030b 	adc.w	r3, r5, fp
 8009cd0:	607b      	str	r3, [r7, #4]
 8009cd2:	f04f 0200 	mov.w	r2, #0
 8009cd6:	f04f 0300 	mov.w	r3, #0
 8009cda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009cde:	4629      	mov	r1, r5
 8009ce0:	028b      	lsls	r3, r1, #10
 8009ce2:	4621      	mov	r1, r4
 8009ce4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009ce8:	4621      	mov	r1, r4
 8009cea:	028a      	lsls	r2, r1, #10
 8009cec:	4610      	mov	r0, r2
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	60bb      	str	r3, [r7, #8]
 8009cf6:	60fa      	str	r2, [r7, #12]
 8009cf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009cfc:	f7f6 fdca 	bl	8000894 <__aeabi_uldivmod>
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	4613      	mov	r3, r2
 8009d06:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009d08:	4b0b      	ldr	r3, [pc, #44]	; (8009d38 <HAL_RCC_GetSysClockFreq+0x180>)
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	0c1b      	lsrs	r3, r3, #16
 8009d0e:	f003 0303 	and.w	r3, r3, #3
 8009d12:	3301      	adds	r3, #1
 8009d14:	005b      	lsls	r3, r3, #1
 8009d16:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8009d18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009d22:	e002      	b.n	8009d2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009d24:	4b05      	ldr	r3, [pc, #20]	; (8009d3c <HAL_RCC_GetSysClockFreq+0x184>)
 8009d26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3740      	adds	r7, #64	; 0x40
 8009d30:	46bd      	mov	sp, r7
 8009d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d36:	bf00      	nop
 8009d38:	40023800 	.word	0x40023800
 8009d3c:	00f42400 	.word	0x00f42400
 8009d40:	017d7840 	.word	0x017d7840

08009d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d44:	b480      	push	{r7}
 8009d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d48:	4b03      	ldr	r3, [pc, #12]	; (8009d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	20008468 	.word	0x20008468

08009d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009d60:	f7ff fff0 	bl	8009d44 <HAL_RCC_GetHCLKFreq>
 8009d64:	4602      	mov	r2, r0
 8009d66:	4b05      	ldr	r3, [pc, #20]	; (8009d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	0a9b      	lsrs	r3, r3, #10
 8009d6c:	f003 0307 	and.w	r3, r3, #7
 8009d70:	4903      	ldr	r1, [pc, #12]	; (8009d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d72:	5ccb      	ldrb	r3, [r1, r3]
 8009d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	40023800 	.word	0x40023800
 8009d80:	0800e20c 	.word	0x0800e20c

08009d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009d88:	f7ff ffdc 	bl	8009d44 <HAL_RCC_GetHCLKFreq>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	4b05      	ldr	r3, [pc, #20]	; (8009da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	0b5b      	lsrs	r3, r3, #13
 8009d94:	f003 0307 	and.w	r3, r3, #7
 8009d98:	4903      	ldr	r1, [pc, #12]	; (8009da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d9a:	5ccb      	ldrb	r3, [r1, r3]
 8009d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	40023800 	.word	0x40023800
 8009da8:	0800e20c 	.word	0x0800e20c

08009dac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d101      	bne.n	8009dbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e07b      	b.n	8009eb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d108      	bne.n	8009dd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009dce:	d009      	beq.n	8009de4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	61da      	str	r2, [r3, #28]
 8009dd6:	e005      	b.n	8009de4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d106      	bne.n	8009e04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f7fc f8d2 	bl	8005fa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2202      	movs	r2, #2
 8009e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009e2c:	431a      	orrs	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e36:	431a      	orrs	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	f003 0302 	and.w	r3, r3, #2
 8009e40:	431a      	orrs	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	f003 0301 	and.w	r3, r3, #1
 8009e4a:	431a      	orrs	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e54:	431a      	orrs	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	69db      	ldr	r3, [r3, #28]
 8009e5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e5e:	431a      	orrs	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a1b      	ldr	r3, [r3, #32]
 8009e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e68:	ea42 0103 	orr.w	r1, r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	699b      	ldr	r3, [r3, #24]
 8009e80:	0c1b      	lsrs	r3, r3, #16
 8009e82:	f003 0104 	and.w	r1, r3, #4
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8a:	f003 0210 	and.w	r2, r3, #16
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	430a      	orrs	r2, r1
 8009e94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	69da      	ldr	r2, [r3, #28]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ea4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b088      	sub	sp, #32
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	60f8      	str	r0, [r7, #12]
 8009ec6:	60b9      	str	r1, [r7, #8]
 8009ec8:	603b      	str	r3, [r7, #0]
 8009eca:	4613      	mov	r3, r2
 8009ecc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d101      	bne.n	8009ee0 <HAL_SPI_Transmit+0x22>
 8009edc:	2302      	movs	r3, #2
 8009ede:	e126      	b.n	800a12e <HAL_SPI_Transmit+0x270>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ee8:	f7fc fc00 	bl	80066ec <HAL_GetTick>
 8009eec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009eee:	88fb      	ldrh	r3, [r7, #6]
 8009ef0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d002      	beq.n	8009f04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009efe:	2302      	movs	r3, #2
 8009f00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009f02:	e10b      	b.n	800a11c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d002      	beq.n	8009f10 <HAL_SPI_Transmit+0x52>
 8009f0a:	88fb      	ldrh	r3, [r7, #6]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d102      	bne.n	8009f16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009f14:	e102      	b.n	800a11c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2203      	movs	r2, #3
 8009f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	88fa      	ldrh	r2, [r7, #6]
 8009f2e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	88fa      	ldrh	r2, [r7, #6]
 8009f34:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f5c:	d10f      	bne.n	8009f7e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f88:	2b40      	cmp	r3, #64	; 0x40
 8009f8a:	d007      	beq.n	8009f9c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fa4:	d14b      	bne.n	800a03e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d002      	beq.n	8009fb4 <HAL_SPI_Transmit+0xf6>
 8009fae:	8afb      	ldrh	r3, [r7, #22]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d13e      	bne.n	800a032 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb8:	881a      	ldrh	r2, [r3, #0]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fc4:	1c9a      	adds	r2, r3, #2
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009fd8:	e02b      	b.n	800a032 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	f003 0302 	and.w	r3, r3, #2
 8009fe4:	2b02      	cmp	r3, #2
 8009fe6:	d112      	bne.n	800a00e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fec:	881a      	ldrh	r2, [r3, #0]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff8:	1c9a      	adds	r2, r3, #2
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a002:	b29b      	uxth	r3, r3
 800a004:	3b01      	subs	r3, #1
 800a006:	b29a      	uxth	r2, r3
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	86da      	strh	r2, [r3, #54]	; 0x36
 800a00c:	e011      	b.n	800a032 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a00e:	f7fc fb6d 	bl	80066ec <HAL_GetTick>
 800a012:	4602      	mov	r2, r0
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	1ad3      	subs	r3, r2, r3
 800a018:	683a      	ldr	r2, [r7, #0]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d803      	bhi.n	800a026 <HAL_SPI_Transmit+0x168>
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a024:	d102      	bne.n	800a02c <HAL_SPI_Transmit+0x16e>
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d102      	bne.n	800a032 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a02c:	2303      	movs	r3, #3
 800a02e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a030:	e074      	b.n	800a11c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a036:	b29b      	uxth	r3, r3
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1ce      	bne.n	8009fda <HAL_SPI_Transmit+0x11c>
 800a03c:	e04c      	b.n	800a0d8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d002      	beq.n	800a04c <HAL_SPI_Transmit+0x18e>
 800a046:	8afb      	ldrh	r3, [r7, #22]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d140      	bne.n	800a0ce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	330c      	adds	r3, #12
 800a056:	7812      	ldrb	r2, [r2, #0]
 800a058:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05e:	1c5a      	adds	r2, r3, #1
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a068:	b29b      	uxth	r3, r3
 800a06a:	3b01      	subs	r3, #1
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a072:	e02c      	b.n	800a0ce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	f003 0302 	and.w	r3, r3, #2
 800a07e:	2b02      	cmp	r3, #2
 800a080:	d113      	bne.n	800a0aa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	330c      	adds	r3, #12
 800a08c:	7812      	ldrb	r2, [r2, #0]
 800a08e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a094:	1c5a      	adds	r2, r3, #1
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	86da      	strh	r2, [r3, #54]	; 0x36
 800a0a8:	e011      	b.n	800a0ce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0aa:	f7fc fb1f 	bl	80066ec <HAL_GetTick>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	683a      	ldr	r2, [r7, #0]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d803      	bhi.n	800a0c2 <HAL_SPI_Transmit+0x204>
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c0:	d102      	bne.n	800a0c8 <HAL_SPI_Transmit+0x20a>
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d102      	bne.n	800a0ce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a0cc:	e026      	b.n	800a11c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1cd      	bne.n	800a074 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a0d8:	69ba      	ldr	r2, [r7, #24]
 800a0da:	6839      	ldr	r1, [r7, #0]
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f000 fdcb 	bl	800ac78 <SPI_EndRxTxTransaction>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2220      	movs	r2, #32
 800a0ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10a      	bne.n	800a10c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	613b      	str	r3, [r7, #16]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	613b      	str	r3, [r7, #16]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	613b      	str	r3, [r7, #16]
 800a10a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a110:	2b00      	cmp	r3, #0
 800a112:	d002      	beq.n	800a11a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	77fb      	strb	r3, [r7, #31]
 800a118:	e000      	b.n	800a11c <HAL_SPI_Transmit+0x25e>
  }

error:
 800a11a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2201      	movs	r2, #1
 800a120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a12c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3720      	adds	r7, #32
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b08c      	sub	sp, #48	; 0x30
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	60f8      	str	r0, [r7, #12]
 800a13e:	60b9      	str	r1, [r7, #8]
 800a140:	607a      	str	r2, [r7, #4]
 800a142:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a144:	2301      	movs	r3, #1
 800a146:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a154:	2b01      	cmp	r3, #1
 800a156:	d101      	bne.n	800a15c <HAL_SPI_TransmitReceive+0x26>
 800a158:	2302      	movs	r3, #2
 800a15a:	e18a      	b.n	800a472 <HAL_SPI_TransmitReceive+0x33c>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a164:	f7fc fac2 	bl	80066ec <HAL_GetTick>
 800a168:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a17a:	887b      	ldrh	r3, [r7, #2]
 800a17c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a17e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a182:	2b01      	cmp	r3, #1
 800a184:	d00f      	beq.n	800a1a6 <HAL_SPI_TransmitReceive+0x70>
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a18c:	d107      	bne.n	800a19e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d103      	bne.n	800a19e <HAL_SPI_TransmitReceive+0x68>
 800a196:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a19a:	2b04      	cmp	r3, #4
 800a19c:	d003      	beq.n	800a1a6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a19e:	2302      	movs	r3, #2
 800a1a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a1a4:	e15b      	b.n	800a45e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d005      	beq.n	800a1b8 <HAL_SPI_TransmitReceive+0x82>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d002      	beq.n	800a1b8 <HAL_SPI_TransmitReceive+0x82>
 800a1b2:	887b      	ldrh	r3, [r7, #2]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d103      	bne.n	800a1c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a1be:	e14e      	b.n	800a45e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	2b04      	cmp	r3, #4
 800a1ca:	d003      	beq.n	800a1d4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2205      	movs	r2, #5
 800a1d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	887a      	ldrh	r2, [r7, #2]
 800a1e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	887a      	ldrh	r2, [r7, #2]
 800a1ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	68ba      	ldr	r2, [r7, #8]
 800a1f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	887a      	ldrh	r2, [r7, #2]
 800a1f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	887a      	ldrh	r2, [r7, #2]
 800a1fc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a214:	2b40      	cmp	r3, #64	; 0x40
 800a216:	d007      	beq.n	800a228 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a226:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a230:	d178      	bne.n	800a324 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d002      	beq.n	800a240 <HAL_SPI_TransmitReceive+0x10a>
 800a23a:	8b7b      	ldrh	r3, [r7, #26]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d166      	bne.n	800a30e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a244:	881a      	ldrh	r2, [r3, #0]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a250:	1c9a      	adds	r2, r3, #2
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	3b01      	subs	r3, #1
 800a25e:	b29a      	uxth	r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a264:	e053      	b.n	800a30e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	f003 0302 	and.w	r3, r3, #2
 800a270:	2b02      	cmp	r3, #2
 800a272:	d11b      	bne.n	800a2ac <HAL_SPI_TransmitReceive+0x176>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a278:	b29b      	uxth	r3, r3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d016      	beq.n	800a2ac <HAL_SPI_TransmitReceive+0x176>
 800a27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a280:	2b01      	cmp	r3, #1
 800a282:	d113      	bne.n	800a2ac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a288:	881a      	ldrh	r2, [r3, #0]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a294:	1c9a      	adds	r2, r3, #2
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	f003 0301 	and.w	r3, r3, #1
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d119      	bne.n	800a2ee <HAL_SPI_TransmitReceive+0x1b8>
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d014      	beq.n	800a2ee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	68da      	ldr	r2, [r3, #12]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ce:	b292      	uxth	r2, r2
 800a2d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d6:	1c9a      	adds	r2, r3, #2
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	b29a      	uxth	r2, r3
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a2ee:	f7fc f9fd 	bl	80066ec <HAL_GetTick>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f6:	1ad3      	subs	r3, r2, r3
 800a2f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d807      	bhi.n	800a30e <HAL_SPI_TransmitReceive+0x1d8>
 800a2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a304:	d003      	beq.n	800a30e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a306:	2303      	movs	r3, #3
 800a308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a30c:	e0a7      	b.n	800a45e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a312:	b29b      	uxth	r3, r3
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1a6      	bne.n	800a266 <HAL_SPI_TransmitReceive+0x130>
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1a1      	bne.n	800a266 <HAL_SPI_TransmitReceive+0x130>
 800a322:	e07c      	b.n	800a41e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d002      	beq.n	800a332 <HAL_SPI_TransmitReceive+0x1fc>
 800a32c:	8b7b      	ldrh	r3, [r7, #26]
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d16b      	bne.n	800a40a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	330c      	adds	r3, #12
 800a33c:	7812      	ldrb	r2, [r2, #0]
 800a33e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a344:	1c5a      	adds	r2, r3, #1
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a34e:	b29b      	uxth	r3, r3
 800a350:	3b01      	subs	r3, #1
 800a352:	b29a      	uxth	r2, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a358:	e057      	b.n	800a40a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	f003 0302 	and.w	r3, r3, #2
 800a364:	2b02      	cmp	r3, #2
 800a366:	d11c      	bne.n	800a3a2 <HAL_SPI_TransmitReceive+0x26c>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d017      	beq.n	800a3a2 <HAL_SPI_TransmitReceive+0x26c>
 800a372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a374:	2b01      	cmp	r3, #1
 800a376:	d114      	bne.n	800a3a2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	330c      	adds	r3, #12
 800a382:	7812      	ldrb	r2, [r2, #0]
 800a384:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a38a:	1c5a      	adds	r2, r3, #1
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a394:	b29b      	uxth	r3, r3
 800a396:	3b01      	subs	r3, #1
 800a398:	b29a      	uxth	r2, r3
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	f003 0301 	and.w	r3, r3, #1
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d119      	bne.n	800a3e4 <HAL_SPI_TransmitReceive+0x2ae>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d014      	beq.n	800a3e4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	68da      	ldr	r2, [r3, #12]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c4:	b2d2      	uxtb	r2, r2
 800a3c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3cc:	1c5a      	adds	r2, r3, #1
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a3e4:	f7fc f982 	bl	80066ec <HAL_GetTick>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ec:	1ad3      	subs	r3, r2, r3
 800a3ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d803      	bhi.n	800a3fc <HAL_SPI_TransmitReceive+0x2c6>
 800a3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3fa:	d102      	bne.n	800a402 <HAL_SPI_TransmitReceive+0x2cc>
 800a3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d103      	bne.n	800a40a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a402:	2303      	movs	r3, #3
 800a404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a408:	e029      	b.n	800a45e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a40e:	b29b      	uxth	r3, r3
 800a410:	2b00      	cmp	r3, #0
 800a412:	d1a2      	bne.n	800a35a <HAL_SPI_TransmitReceive+0x224>
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a418:	b29b      	uxth	r3, r3
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d19d      	bne.n	800a35a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a41e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a420:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f000 fc28 	bl	800ac78 <SPI_EndRxTxTransaction>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d006      	beq.n	800a43c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2220      	movs	r2, #32
 800a438:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a43a:	e010      	b.n	800a45e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10b      	bne.n	800a45c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a444:	2300      	movs	r3, #0
 800a446:	617b      	str	r3, [r7, #20]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	617b      	str	r3, [r7, #20]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	617b      	str	r3, [r7, #20]
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	e000      	b.n	800a45e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a45c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2200      	movs	r2, #0
 800a46a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a46e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a472:	4618      	mov	r0, r3
 800a474:	3730      	adds	r7, #48	; 0x30
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
	...

0800a47c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	4613      	mov	r3, r2
 800a488:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a48a:	2300      	movs	r3, #0
 800a48c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a494:	2b01      	cmp	r3, #1
 800a496:	d101      	bne.n	800a49c <HAL_SPI_Transmit_DMA+0x20>
 800a498:	2302      	movs	r3, #2
 800a49a:	e09b      	b.n	800a5d4 <HAL_SPI_Transmit_DMA+0x158>
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d002      	beq.n	800a4b6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a4b4:	e089      	b.n	800a5ca <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d002      	beq.n	800a4c2 <HAL_SPI_Transmit_DMA+0x46>
 800a4bc:	88fb      	ldrh	r3, [r7, #6]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d102      	bne.n	800a4c8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a4c6:	e080      	b.n	800a5ca <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2203      	movs	r2, #3
 800a4cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	88fa      	ldrh	r2, [r7, #6]
 800a4e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	88fa      	ldrh	r2, [r7, #6]
 800a4e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2200      	movs	r2, #0
 800a504:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a50e:	d10f      	bne.n	800a530 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a51e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a52e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a534:	4a29      	ldr	r2, [pc, #164]	; (800a5dc <HAL_SPI_Transmit_DMA+0x160>)
 800a536:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a53c:	4a28      	ldr	r2, [pc, #160]	; (800a5e0 <HAL_SPI_Transmit_DMA+0x164>)
 800a53e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a544:	4a27      	ldr	r2, [pc, #156]	; (800a5e4 <HAL_SPI_Transmit_DMA+0x168>)
 800a546:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a54c:	2200      	movs	r2, #0
 800a54e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a558:	4619      	mov	r1, r3
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	330c      	adds	r3, #12
 800a560:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a566:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a568:	f7fd fb20 	bl	8007bac <HAL_DMA_Start_IT>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00c      	beq.n	800a58c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a576:	f043 0210 	orr.w	r2, r3, #16
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800a58a:	e01e      	b.n	800a5ca <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a596:	2b40      	cmp	r3, #64	; 0x40
 800a598:	d007      	beq.n	800a5aa <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5a8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	685a      	ldr	r2, [r3, #4]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f042 0220 	orr.w	r2, r2, #32
 800a5b8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	685a      	ldr	r2, [r3, #4]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f042 0202 	orr.w	r2, r2, #2
 800a5c8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a5d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3718      	adds	r7, #24
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	0800aa09 	.word	0x0800aa09
 800a5e0:	0800a829 	.word	0x0800a829
 800a5e4:	0800aa5d 	.word	0x0800aa5d

0800a5e8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
 800a5f4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a600:	2b01      	cmp	r3, #1
 800a602:	d101      	bne.n	800a608 <HAL_SPI_TransmitReceive_DMA+0x20>
 800a604:	2302      	movs	r3, #2
 800a606:	e0e3      	b.n	800a7d0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a616:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a61e:	7dbb      	ldrb	r3, [r7, #22]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d00d      	beq.n	800a640 <HAL_SPI_TransmitReceive_DMA+0x58>
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a62a:	d106      	bne.n	800a63a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d102      	bne.n	800a63a <HAL_SPI_TransmitReceive_DMA+0x52>
 800a634:	7dbb      	ldrb	r3, [r7, #22]
 800a636:	2b04      	cmp	r3, #4
 800a638:	d002      	beq.n	800a640 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800a63a:	2302      	movs	r3, #2
 800a63c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a63e:	e0c2      	b.n	800a7c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d005      	beq.n	800a652 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d002      	beq.n	800a652 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a64c:	887b      	ldrh	r3, [r7, #2]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d102      	bne.n	800a658 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800a652:	2301      	movs	r3, #1
 800a654:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a656:	e0b6      	b.n	800a7c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	2b04      	cmp	r3, #4
 800a662:	d003      	beq.n	800a66c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2205      	movs	r2, #5
 800a668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2200      	movs	r2, #0
 800a670:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	887a      	ldrh	r2, [r7, #2]
 800a67c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	887a      	ldrh	r2, [r7, #2]
 800a682:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	887a      	ldrh	r2, [r7, #2]
 800a68e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	887a      	ldrh	r2, [r7, #2]
 800a694:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	2b04      	cmp	r3, #4
 800a6ac:	d108      	bne.n	800a6c0 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6b2:	4a49      	ldr	r2, [pc, #292]	; (800a7d8 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800a6b4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6ba:	4a48      	ldr	r2, [pc, #288]	; (800a7dc <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800a6bc:	63da      	str	r2, [r3, #60]	; 0x3c
 800a6be:	e007      	b.n	800a6d0 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6c4:	4a46      	ldr	r2, [pc, #280]	; (800a7e0 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800a6c6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6cc:	4a45      	ldr	r2, [pc, #276]	; (800a7e4 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800a6ce:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6d4:	4a44      	ldr	r2, [pc, #272]	; (800a7e8 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800a6d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6dc:	2200      	movs	r2, #0
 800a6de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	330c      	adds	r3, #12
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a6f8:	f7fd fa58 	bl	8007bac <HAL_DMA_Start_IT>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00c      	beq.n	800a71c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a706:	f043 0210 	orr.w	r2, r3, #16
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2201      	movs	r2, #1
 800a716:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800a71a:	e054      	b.n	800a7c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f042 0201 	orr.w	r2, r2, #1
 800a72a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a730:	2200      	movs	r2, #0
 800a732:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a738:	2200      	movs	r2, #0
 800a73a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a740:	2200      	movs	r2, #0
 800a742:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a748:	2200      	movs	r2, #0
 800a74a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a754:	4619      	mov	r1, r3
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	330c      	adds	r3, #12
 800a75c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a762:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a764:	f7fd fa22 	bl	8007bac <HAL_DMA_Start_IT>
 800a768:	4603      	mov	r3, r0
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00c      	beq.n	800a788 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a772:	f043 0210 	orr.w	r2, r3, #16
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2201      	movs	r2, #1
 800a782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800a786:	e01e      	b.n	800a7c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a792:	2b40      	cmp	r3, #64	; 0x40
 800a794:	d007      	beq.n	800a7a6 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7a4:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	685a      	ldr	r2, [r3, #4]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f042 0220 	orr.w	r2, r2, #32
 800a7b4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	685a      	ldr	r2, [r3, #4]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f042 0202 	orr.w	r2, r2, #2
 800a7c4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3718      	adds	r7, #24
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	0800aa25 	.word	0x0800aa25
 800a7dc:	0800a8d1 	.word	0x0800a8d1
 800a7e0:	0800aa41 	.word	0x0800aa41
 800a7e4:	0800a979 	.word	0x0800a979
 800a7e8:	0800aa5d 	.word	0x0800aa5d

0800a7ec <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a808:	bf00      	nop
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a81c:	bf00      	nop
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b086      	sub	sp, #24
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a834:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a836:	f7fb ff59 	bl	80066ec <HAL_GetTick>
 800a83a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a84a:	d03b      	beq.n	800a8c4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	685a      	ldr	r2, [r3, #4]
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f022 0220 	bic.w	r2, r2, #32
 800a85a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	685a      	ldr	r2, [r3, #4]
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f022 0202 	bic.w	r2, r2, #2
 800a86a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	2164      	movs	r1, #100	; 0x64
 800a870:	6978      	ldr	r0, [r7, #20]
 800a872:	f000 fa01 	bl	800ac78 <SPI_EndRxTxTransaction>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d005      	beq.n	800a888 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a880:	f043 0220 	orr.w	r2, r3, #32
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d10a      	bne.n	800a8a6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a890:	2300      	movs	r3, #0
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	60fb      	str	r3, [r7, #12]
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	60fb      	str	r3, [r7, #12]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d003      	beq.n	800a8c4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a8bc:	6978      	ldr	r0, [r7, #20]
 800a8be:	f7fb fa1b 	bl	8005cf8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a8c2:	e002      	b.n	800a8ca <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800a8c4:	6978      	ldr	r0, [r7, #20]
 800a8c6:	f7fb fa31 	bl	8005d2c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a8ca:	3718      	adds	r7, #24
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8dc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a8de:	f7fb ff05 	bl	80066ec <HAL_GetTick>
 800a8e2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8f2:	d03b      	beq.n	800a96c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	685a      	ldr	r2, [r3, #4]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f022 0220 	bic.w	r2, r2, #32
 800a902:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d10d      	bne.n	800a928 <SPI_DMAReceiveCplt+0x58>
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a914:	d108      	bne.n	800a928 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	685a      	ldr	r2, [r3, #4]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f022 0203 	bic.w	r2, r2, #3
 800a924:	605a      	str	r2, [r3, #4]
 800a926:	e007      	b.n	800a938 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	685a      	ldr	r2, [r3, #4]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f022 0201 	bic.w	r2, r2, #1
 800a936:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	2164      	movs	r1, #100	; 0x64
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f000 f935 	bl	800abac <SPI_EndRxTransaction>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2220      	movs	r2, #32
 800a94c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a960:	2b00      	cmp	r3, #0
 800a962:	d003      	beq.n	800a96c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f7fb f9c7 	bl	8005cf8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a96a:	e002      	b.n	800a972 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f7ff ff3d 	bl	800a7ec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a984:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a986:	f7fb feb1 	bl	80066ec <HAL_GetTick>
 800a98a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a99a:	d02f      	beq.n	800a9fc <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	685a      	ldr	r2, [r3, #4]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f022 0220 	bic.w	r2, r2, #32
 800a9aa:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	2164      	movs	r1, #100	; 0x64
 800a9b0:	68f8      	ldr	r0, [r7, #12]
 800a9b2:	f000 f961 	bl	800ac78 <SPI_EndRxTxTransaction>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d005      	beq.n	800a9c8 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9c0:	f043 0220 	orr.w	r2, r3, #32
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	685a      	ldr	r2, [r3, #4]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f022 0203 	bic.w	r2, r2, #3
 800a9d6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d003      	beq.n	800a9fc <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f7fb f97f 	bl	8005cf8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a9fa:	e002      	b.n	800aa02 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f7fb f95f 	bl	8005cc0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa14:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800aa16:	68f8      	ldr	r0, [r7, #12]
 800aa18:	f7ff fef2 	bl	800a800 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aa1c:	bf00      	nop
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa30:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800aa32:	68f8      	ldr	r0, [r7, #12]
 800aa34:	f7ff feee 	bl	800a814 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aa38:	bf00      	nop
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	f7fb f900 	bl	8005c54 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aa54:	bf00      	nop
 800aa56:	3710      	adds	r7, #16
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa68:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	685a      	ldr	r2, [r3, #4]
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f022 0203 	bic.w	r2, r2, #3
 800aa78:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa7e:	f043 0210 	orr.w	r2, r3, #16
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	f7fb f932 	bl	8005cf8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aa94:	bf00      	nop
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b088      	sub	sp, #32
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	603b      	str	r3, [r7, #0]
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800aaac:	f7fb fe1e 	bl	80066ec <HAL_GetTick>
 800aab0:	4602      	mov	r2, r0
 800aab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab4:	1a9b      	subs	r3, r3, r2
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	4413      	add	r3, r2
 800aaba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800aabc:	f7fb fe16 	bl	80066ec <HAL_GetTick>
 800aac0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800aac2:	4b39      	ldr	r3, [pc, #228]	; (800aba8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	015b      	lsls	r3, r3, #5
 800aac8:	0d1b      	lsrs	r3, r3, #20
 800aaca:	69fa      	ldr	r2, [r7, #28]
 800aacc:	fb02 f303 	mul.w	r3, r2, r3
 800aad0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aad2:	e054      	b.n	800ab7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aada:	d050      	beq.n	800ab7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aadc:	f7fb fe06 	bl	80066ec <HAL_GetTick>
 800aae0:	4602      	mov	r2, r0
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	1ad3      	subs	r3, r2, r3
 800aae6:	69fa      	ldr	r2, [r7, #28]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d902      	bls.n	800aaf2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d13d      	bne.n	800ab6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	685a      	ldr	r2, [r3, #4]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ab00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab0a:	d111      	bne.n	800ab30 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab14:	d004      	beq.n	800ab20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab1e:	d107      	bne.n	800ab30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab38:	d10f      	bne.n	800ab5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ab48:	601a      	str	r2, [r3, #0]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ab58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ab6a:	2303      	movs	r3, #3
 800ab6c:	e017      	b.n	800ab9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d101      	bne.n	800ab78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ab74:	2300      	movs	r3, #0
 800ab76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	689a      	ldr	r2, [r3, #8]
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	4013      	ands	r3, r2
 800ab88:	68ba      	ldr	r2, [r7, #8]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	bf0c      	ite	eq
 800ab8e:	2301      	moveq	r3, #1
 800ab90:	2300      	movne	r3, #0
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	461a      	mov	r2, r3
 800ab96:	79fb      	ldrb	r3, [r7, #7]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d19b      	bne.n	800aad4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3720      	adds	r7, #32
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	20008468 	.word	0x20008468

0800abac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af02      	add	r7, sp, #8
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800abc0:	d111      	bne.n	800abe6 <SPI_EndRxTransaction+0x3a>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abca:	d004      	beq.n	800abd6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abd4:	d107      	bne.n	800abe6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abe4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800abee:	d12a      	bne.n	800ac46 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abf8:	d012      	beq.n	800ac20 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	9300      	str	r3, [sp, #0]
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	2200      	movs	r2, #0
 800ac02:	2180      	movs	r1, #128	; 0x80
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f7ff ff49 	bl	800aa9c <SPI_WaitFlagStateUntilTimeout>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d02d      	beq.n	800ac6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac14:	f043 0220 	orr.w	r2, r3, #32
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	e026      	b.n	800ac6e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	9300      	str	r3, [sp, #0]
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	2200      	movs	r2, #0
 800ac28:	2101      	movs	r1, #1
 800ac2a:	68f8      	ldr	r0, [r7, #12]
 800ac2c:	f7ff ff36 	bl	800aa9c <SPI_WaitFlagStateUntilTimeout>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d01a      	beq.n	800ac6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac3a:	f043 0220 	orr.w	r2, r3, #32
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ac42:	2303      	movs	r3, #3
 800ac44:	e013      	b.n	800ac6e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	9300      	str	r3, [sp, #0]
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	2101      	movs	r1, #1
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f7ff ff23 	bl	800aa9c <SPI_WaitFlagStateUntilTimeout>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d007      	beq.n	800ac6c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac60:	f043 0220 	orr.w	r2, r3, #32
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ac68:	2303      	movs	r3, #3
 800ac6a:	e000      	b.n	800ac6e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
	...

0800ac78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b088      	sub	sp, #32
 800ac7c:	af02      	add	r7, sp, #8
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ac84:	4b1b      	ldr	r3, [pc, #108]	; (800acf4 <SPI_EndRxTxTransaction+0x7c>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a1b      	ldr	r2, [pc, #108]	; (800acf8 <SPI_EndRxTxTransaction+0x80>)
 800ac8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac8e:	0d5b      	lsrs	r3, r3, #21
 800ac90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ac94:	fb02 f303 	mul.w	r3, r2, r3
 800ac98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aca2:	d112      	bne.n	800acca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	2200      	movs	r2, #0
 800acac:	2180      	movs	r1, #128	; 0x80
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	f7ff fef4 	bl	800aa9c <SPI_WaitFlagStateUntilTimeout>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d016      	beq.n	800ace8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acbe:	f043 0220 	orr.w	r2, r3, #32
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800acc6:	2303      	movs	r3, #3
 800acc8:	e00f      	b.n	800acea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00a      	beq.n	800ace6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	3b01      	subs	r3, #1
 800acd4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ace0:	2b80      	cmp	r3, #128	; 0x80
 800ace2:	d0f2      	beq.n	800acca <SPI_EndRxTxTransaction+0x52>
 800ace4:	e000      	b.n	800ace8 <SPI_EndRxTxTransaction+0x70>
        break;
 800ace6:	bf00      	nop
  }

  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	20008468 	.word	0x20008468
 800acf8:	165e9f81 	.word	0x165e9f81

0800acfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d101      	bne.n	800ad0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e041      	b.n	800ad92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d106      	bne.n	800ad28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f7fb fad0 	bl	80062c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2202      	movs	r2, #2
 800ad2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	3304      	adds	r3, #4
 800ad38:	4619      	mov	r1, r3
 800ad3a:	4610      	mov	r0, r2
 800ad3c:	f000 fe08 	bl	800b950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
	...

0800ad9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b085      	sub	sp, #20
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	2b01      	cmp	r3, #1
 800adae:	d001      	beq.n	800adb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800adb0:	2301      	movs	r3, #1
 800adb2:	e03c      	b.n	800ae2e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2202      	movs	r2, #2
 800adb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a1e      	ldr	r2, [pc, #120]	; (800ae3c <HAL_TIM_Base_Start+0xa0>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d018      	beq.n	800adf8 <HAL_TIM_Base_Start+0x5c>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adce:	d013      	beq.n	800adf8 <HAL_TIM_Base_Start+0x5c>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a1a      	ldr	r2, [pc, #104]	; (800ae40 <HAL_TIM_Base_Start+0xa4>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d00e      	beq.n	800adf8 <HAL_TIM_Base_Start+0x5c>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a19      	ldr	r2, [pc, #100]	; (800ae44 <HAL_TIM_Base_Start+0xa8>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d009      	beq.n	800adf8 <HAL_TIM_Base_Start+0x5c>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a17      	ldr	r2, [pc, #92]	; (800ae48 <HAL_TIM_Base_Start+0xac>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d004      	beq.n	800adf8 <HAL_TIM_Base_Start+0x5c>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a16      	ldr	r2, [pc, #88]	; (800ae4c <HAL_TIM_Base_Start+0xb0>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d111      	bne.n	800ae1c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	f003 0307 	and.w	r3, r3, #7
 800ae02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2b06      	cmp	r3, #6
 800ae08:	d010      	beq.n	800ae2c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f042 0201 	orr.w	r2, r2, #1
 800ae18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae1a:	e007      	b.n	800ae2c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f042 0201 	orr.w	r2, r2, #1
 800ae2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3714      	adds	r7, #20
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr
 800ae3a:	bf00      	nop
 800ae3c:	40010000 	.word	0x40010000
 800ae40:	40000400 	.word	0x40000400
 800ae44:	40000800 	.word	0x40000800
 800ae48:	40000c00 	.word	0x40000c00
 800ae4c:	40014000 	.word	0x40014000

0800ae50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d001      	beq.n	800ae68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ae64:	2301      	movs	r3, #1
 800ae66:	e044      	b.n	800aef2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2202      	movs	r2, #2
 800ae6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68da      	ldr	r2, [r3, #12]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f042 0201 	orr.w	r2, r2, #1
 800ae7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a1e      	ldr	r2, [pc, #120]	; (800af00 <HAL_TIM_Base_Start_IT+0xb0>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d018      	beq.n	800aebc <HAL_TIM_Base_Start_IT+0x6c>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae92:	d013      	beq.n	800aebc <HAL_TIM_Base_Start_IT+0x6c>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a1a      	ldr	r2, [pc, #104]	; (800af04 <HAL_TIM_Base_Start_IT+0xb4>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d00e      	beq.n	800aebc <HAL_TIM_Base_Start_IT+0x6c>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a19      	ldr	r2, [pc, #100]	; (800af08 <HAL_TIM_Base_Start_IT+0xb8>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d009      	beq.n	800aebc <HAL_TIM_Base_Start_IT+0x6c>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a17      	ldr	r2, [pc, #92]	; (800af0c <HAL_TIM_Base_Start_IT+0xbc>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d004      	beq.n	800aebc <HAL_TIM_Base_Start_IT+0x6c>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4a16      	ldr	r2, [pc, #88]	; (800af10 <HAL_TIM_Base_Start_IT+0xc0>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d111      	bne.n	800aee0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	f003 0307 	and.w	r3, r3, #7
 800aec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2b06      	cmp	r3, #6
 800aecc:	d010      	beq.n	800aef0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f042 0201 	orr.w	r2, r2, #1
 800aedc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aede:	e007      	b.n	800aef0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f042 0201 	orr.w	r2, r2, #1
 800aeee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3714      	adds	r7, #20
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	40010000 	.word	0x40010000
 800af04:	40000400 	.word	0x40000400
 800af08:	40000800 	.word	0x40000800
 800af0c:	40000c00 	.word	0x40000c00
 800af10:	40014000 	.word	0x40014000

0800af14 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d101      	bne.n	800af26 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	e041      	b.n	800afaa <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d106      	bne.n	800af40 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f839 	bl	800afb2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2202      	movs	r2, #2
 800af44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	3304      	adds	r3, #4
 800af50:	4619      	mov	r1, r3
 800af52:	4610      	mov	r0, r2
 800af54:	f000 fcfc 	bl	800b950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3708      	adds	r7, #8
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800afb2:	b480      	push	{r7}
 800afb4:	b083      	sub	sp, #12
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800afba:	bf00      	nop
 800afbc:	370c      	adds	r7, #12
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr

0800afc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b082      	sub	sp, #8
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d101      	bne.n	800afd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800afd4:	2301      	movs	r3, #1
 800afd6:	e041      	b.n	800b05c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d106      	bne.n	800aff2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 f839 	bl	800b064 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2202      	movs	r2, #2
 800aff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	3304      	adds	r3, #4
 800b002:	4619      	mov	r1, r3
 800b004:	4610      	mov	r0, r2
 800b006:	f000 fca3 	bl	800b950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2201      	movs	r2, #1
 800b00e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2201      	movs	r2, #1
 800b016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2201      	movs	r2, #1
 800b01e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2201      	movs	r2, #1
 800b026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2201      	movs	r2, #1
 800b02e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2201      	movs	r2, #1
 800b036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2201      	movs	r2, #1
 800b03e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2201      	movs	r2, #1
 800b046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2201      	movs	r2, #1
 800b04e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2201      	movs	r2, #1
 800b056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d109      	bne.n	800b09c <HAL_TIM_PWM_Start+0x24>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	2b01      	cmp	r3, #1
 800b092:	bf14      	ite	ne
 800b094:	2301      	movne	r3, #1
 800b096:	2300      	moveq	r3, #0
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	e022      	b.n	800b0e2 <HAL_TIM_PWM_Start+0x6a>
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	2b04      	cmp	r3, #4
 800b0a0:	d109      	bne.n	800b0b6 <HAL_TIM_PWM_Start+0x3e>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	bf14      	ite	ne
 800b0ae:	2301      	movne	r3, #1
 800b0b0:	2300      	moveq	r3, #0
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	e015      	b.n	800b0e2 <HAL_TIM_PWM_Start+0x6a>
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	2b08      	cmp	r3, #8
 800b0ba:	d109      	bne.n	800b0d0 <HAL_TIM_PWM_Start+0x58>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	bf14      	ite	ne
 800b0c8:	2301      	movne	r3, #1
 800b0ca:	2300      	moveq	r3, #0
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	e008      	b.n	800b0e2 <HAL_TIM_PWM_Start+0x6a>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	bf14      	ite	ne
 800b0dc:	2301      	movne	r3, #1
 800b0de:	2300      	moveq	r3, #0
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d001      	beq.n	800b0ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	e068      	b.n	800b1bc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d104      	bne.n	800b0fa <HAL_TIM_PWM_Start+0x82>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2202      	movs	r2, #2
 800b0f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0f8:	e013      	b.n	800b122 <HAL_TIM_PWM_Start+0xaa>
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	2b04      	cmp	r3, #4
 800b0fe:	d104      	bne.n	800b10a <HAL_TIM_PWM_Start+0x92>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2202      	movs	r2, #2
 800b104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b108:	e00b      	b.n	800b122 <HAL_TIM_PWM_Start+0xaa>
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	2b08      	cmp	r3, #8
 800b10e:	d104      	bne.n	800b11a <HAL_TIM_PWM_Start+0xa2>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2202      	movs	r2, #2
 800b114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b118:	e003      	b.n	800b122 <HAL_TIM_PWM_Start+0xaa>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2202      	movs	r2, #2
 800b11e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2201      	movs	r2, #1
 800b128:	6839      	ldr	r1, [r7, #0]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f000 feb6 	bl	800be9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4a23      	ldr	r2, [pc, #140]	; (800b1c4 <HAL_TIM_PWM_Start+0x14c>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d107      	bne.n	800b14a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b148:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a1d      	ldr	r2, [pc, #116]	; (800b1c4 <HAL_TIM_PWM_Start+0x14c>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d018      	beq.n	800b186 <HAL_TIM_PWM_Start+0x10e>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b15c:	d013      	beq.n	800b186 <HAL_TIM_PWM_Start+0x10e>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a19      	ldr	r2, [pc, #100]	; (800b1c8 <HAL_TIM_PWM_Start+0x150>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d00e      	beq.n	800b186 <HAL_TIM_PWM_Start+0x10e>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a17      	ldr	r2, [pc, #92]	; (800b1cc <HAL_TIM_PWM_Start+0x154>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d009      	beq.n	800b186 <HAL_TIM_PWM_Start+0x10e>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a16      	ldr	r2, [pc, #88]	; (800b1d0 <HAL_TIM_PWM_Start+0x158>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d004      	beq.n	800b186 <HAL_TIM_PWM_Start+0x10e>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a14      	ldr	r2, [pc, #80]	; (800b1d4 <HAL_TIM_PWM_Start+0x15c>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d111      	bne.n	800b1aa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	689b      	ldr	r3, [r3, #8]
 800b18c:	f003 0307 	and.w	r3, r3, #7
 800b190:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2b06      	cmp	r3, #6
 800b196:	d010      	beq.n	800b1ba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f042 0201 	orr.w	r2, r2, #1
 800b1a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1a8:	e007      	b.n	800b1ba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f042 0201 	orr.w	r2, r2, #1
 800b1b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1ba:	2300      	movs	r3, #0
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	40010000 	.word	0x40010000
 800b1c8:	40000400 	.word	0x40000400
 800b1cc:	40000800 	.word	0x40000800
 800b1d0:	40000c00 	.word	0x40000c00
 800b1d4:	40014000 	.word	0x40014000

0800b1d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d101      	bne.n	800b1ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e097      	b.n	800b31c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d106      	bne.n	800b206 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f7fa ffe5 	bl	80061d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2202      	movs	r2, #2
 800b20a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	6812      	ldr	r2, [r2, #0]
 800b218:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b21c:	f023 0307 	bic.w	r3, r3, #7
 800b220:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	3304      	adds	r3, #4
 800b22a:	4619      	mov	r1, r3
 800b22c:	4610      	mov	r0, r2
 800b22e:	f000 fb8f 	bl	800b950 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	6a1b      	ldr	r3, [r3, #32]
 800b248:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	697a      	ldr	r2, [r7, #20]
 800b250:	4313      	orrs	r3, r2
 800b252:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b25a:	f023 0303 	bic.w	r3, r3, #3
 800b25e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	689a      	ldr	r2, [r3, #8]
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	699b      	ldr	r3, [r3, #24]
 800b268:	021b      	lsls	r3, r3, #8
 800b26a:	4313      	orrs	r3, r2
 800b26c:	693a      	ldr	r2, [r7, #16]
 800b26e:	4313      	orrs	r3, r2
 800b270:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b278:	f023 030c 	bic.w	r3, r3, #12
 800b27c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b284:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b288:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	68da      	ldr	r2, [r3, #12]
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	69db      	ldr	r3, [r3, #28]
 800b292:	021b      	lsls	r3, r3, #8
 800b294:	4313      	orrs	r3, r2
 800b296:	693a      	ldr	r2, [r7, #16]
 800b298:	4313      	orrs	r3, r2
 800b29a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	011a      	lsls	r2, r3, #4
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	6a1b      	ldr	r3, [r3, #32]
 800b2a6:	031b      	lsls	r3, r3, #12
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	693a      	ldr	r2, [r7, #16]
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b2b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b2be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	685a      	ldr	r2, [r3, #4]
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	695b      	ldr	r3, [r3, #20]
 800b2c8:	011b      	lsls	r3, r3, #4
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	697a      	ldr	r2, [r7, #20]
 800b2d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	693a      	ldr	r2, [r7, #16]
 800b2e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2201      	movs	r2, #1
 800b306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2201      	movs	r2, #1
 800b30e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2201      	movs	r2, #1
 800b316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3718      	adds	r7, #24
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	691b      	ldr	r3, [r3, #16]
 800b332:	f003 0302 	and.w	r3, r3, #2
 800b336:	2b02      	cmp	r3, #2
 800b338:	d122      	bne.n	800b380 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	f003 0302 	and.w	r3, r3, #2
 800b344:	2b02      	cmp	r3, #2
 800b346:	d11b      	bne.n	800b380 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f06f 0202 	mvn.w	r2, #2
 800b350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2201      	movs	r2, #1
 800b356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	699b      	ldr	r3, [r3, #24]
 800b35e:	f003 0303 	and.w	r3, r3, #3
 800b362:	2b00      	cmp	r3, #0
 800b364:	d003      	beq.n	800b36e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 fad3 	bl	800b912 <HAL_TIM_IC_CaptureCallback>
 800b36c:	e005      	b.n	800b37a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 fac5 	bl	800b8fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 fad6 	bl	800b926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	691b      	ldr	r3, [r3, #16]
 800b386:	f003 0304 	and.w	r3, r3, #4
 800b38a:	2b04      	cmp	r3, #4
 800b38c:	d122      	bne.n	800b3d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	f003 0304 	and.w	r3, r3, #4
 800b398:	2b04      	cmp	r3, #4
 800b39a:	d11b      	bne.n	800b3d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f06f 0204 	mvn.w	r2, #4
 800b3a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2202      	movs	r2, #2
 800b3aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	699b      	ldr	r3, [r3, #24]
 800b3b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d003      	beq.n	800b3c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 faa9 	bl	800b912 <HAL_TIM_IC_CaptureCallback>
 800b3c0:	e005      	b.n	800b3ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 fa9b 	bl	800b8fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 faac 	bl	800b926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	f003 0308 	and.w	r3, r3, #8
 800b3de:	2b08      	cmp	r3, #8
 800b3e0:	d122      	bne.n	800b428 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	f003 0308 	and.w	r3, r3, #8
 800b3ec:	2b08      	cmp	r3, #8
 800b3ee:	d11b      	bne.n	800b428 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f06f 0208 	mvn.w	r2, #8
 800b3f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2204      	movs	r2, #4
 800b3fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	69db      	ldr	r3, [r3, #28]
 800b406:	f003 0303 	and.w	r3, r3, #3
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d003      	beq.n	800b416 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 fa7f 	bl	800b912 <HAL_TIM_IC_CaptureCallback>
 800b414:	e005      	b.n	800b422 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 fa71 	bl	800b8fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 fa82 	bl	800b926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	691b      	ldr	r3, [r3, #16]
 800b42e:	f003 0310 	and.w	r3, r3, #16
 800b432:	2b10      	cmp	r3, #16
 800b434:	d122      	bne.n	800b47c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	f003 0310 	and.w	r3, r3, #16
 800b440:	2b10      	cmp	r3, #16
 800b442:	d11b      	bne.n	800b47c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f06f 0210 	mvn.w	r2, #16
 800b44c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2208      	movs	r2, #8
 800b452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	69db      	ldr	r3, [r3, #28]
 800b45a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d003      	beq.n	800b46a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 fa55 	bl	800b912 <HAL_TIM_IC_CaptureCallback>
 800b468:	e005      	b.n	800b476 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 fa47 	bl	800b8fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 fa58 	bl	800b926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	691b      	ldr	r3, [r3, #16]
 800b482:	f003 0301 	and.w	r3, r3, #1
 800b486:	2b01      	cmp	r3, #1
 800b488:	d10e      	bne.n	800b4a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	f003 0301 	and.w	r3, r3, #1
 800b494:	2b01      	cmp	r3, #1
 800b496:	d107      	bne.n	800b4a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f06f 0201 	mvn.w	r2, #1
 800b4a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f7f6 f876 	bl	8001594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4b2:	2b80      	cmp	r3, #128	; 0x80
 800b4b4:	d10e      	bne.n	800b4d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4c0:	2b80      	cmp	r3, #128	; 0x80
 800b4c2:	d107      	bne.n	800b4d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b4cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fd82 	bl	800bfd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4de:	2b40      	cmp	r3, #64	; 0x40
 800b4e0:	d10e      	bne.n	800b500 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ec:	2b40      	cmp	r3, #64	; 0x40
 800b4ee:	d107      	bne.n	800b500 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b4f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 fa1d 	bl	800b93a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	f003 0320 	and.w	r3, r3, #32
 800b50a:	2b20      	cmp	r3, #32
 800b50c:	d10e      	bne.n	800b52c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	f003 0320 	and.w	r3, r3, #32
 800b518:	2b20      	cmp	r3, #32
 800b51a:	d107      	bne.n	800b52c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f06f 0220 	mvn.w	r2, #32
 800b524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 fd4c 	bl	800bfc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b52c:	bf00      	nop
 800b52e:	3708      	adds	r7, #8
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b086      	sub	sp, #24
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b540:	2300      	movs	r3, #0
 800b542:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d101      	bne.n	800b552 <HAL_TIM_OC_ConfigChannel+0x1e>
 800b54e:	2302      	movs	r3, #2
 800b550:	e048      	b.n	800b5e4 <HAL_TIM_OC_ConfigChannel+0xb0>
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2201      	movs	r2, #1
 800b556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2b0c      	cmp	r3, #12
 800b55e:	d839      	bhi.n	800b5d4 <HAL_TIM_OC_ConfigChannel+0xa0>
 800b560:	a201      	add	r2, pc, #4	; (adr r2, 800b568 <HAL_TIM_OC_ConfigChannel+0x34>)
 800b562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b566:	bf00      	nop
 800b568:	0800b59d 	.word	0x0800b59d
 800b56c:	0800b5d5 	.word	0x0800b5d5
 800b570:	0800b5d5 	.word	0x0800b5d5
 800b574:	0800b5d5 	.word	0x0800b5d5
 800b578:	0800b5ab 	.word	0x0800b5ab
 800b57c:	0800b5d5 	.word	0x0800b5d5
 800b580:	0800b5d5 	.word	0x0800b5d5
 800b584:	0800b5d5 	.word	0x0800b5d5
 800b588:	0800b5b9 	.word	0x0800b5b9
 800b58c:	0800b5d5 	.word	0x0800b5d5
 800b590:	0800b5d5 	.word	0x0800b5d5
 800b594:	0800b5d5 	.word	0x0800b5d5
 800b598:	0800b5c7 	.word	0x0800b5c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	68b9      	ldr	r1, [r7, #8]
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f000 fa54 	bl	800ba50 <TIM_OC1_SetConfig>
      break;
 800b5a8:	e017      	b.n	800b5da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	68b9      	ldr	r1, [r7, #8]
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f000 fab3 	bl	800bb1c <TIM_OC2_SetConfig>
      break;
 800b5b6:	e010      	b.n	800b5da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	68b9      	ldr	r1, [r7, #8]
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f000 fb18 	bl	800bbf4 <TIM_OC3_SetConfig>
      break;
 800b5c4:	e009      	b.n	800b5da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	68b9      	ldr	r1, [r7, #8]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f000 fb7b 	bl	800bcc8 <TIM_OC4_SetConfig>
      break;
 800b5d2:	e002      	b.n	800b5da <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	75fb      	strb	r3, [r7, #23]
      break;
 800b5d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b5e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3718      	adds	r7, #24
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b602:	2b01      	cmp	r3, #1
 800b604:	d101      	bne.n	800b60a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b606:	2302      	movs	r3, #2
 800b608:	e0ae      	b.n	800b768 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2201      	movs	r2, #1
 800b60e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2b0c      	cmp	r3, #12
 800b616:	f200 809f 	bhi.w	800b758 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b61a:	a201      	add	r2, pc, #4	; (adr r2, 800b620 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b620:	0800b655 	.word	0x0800b655
 800b624:	0800b759 	.word	0x0800b759
 800b628:	0800b759 	.word	0x0800b759
 800b62c:	0800b759 	.word	0x0800b759
 800b630:	0800b695 	.word	0x0800b695
 800b634:	0800b759 	.word	0x0800b759
 800b638:	0800b759 	.word	0x0800b759
 800b63c:	0800b759 	.word	0x0800b759
 800b640:	0800b6d7 	.word	0x0800b6d7
 800b644:	0800b759 	.word	0x0800b759
 800b648:	0800b759 	.word	0x0800b759
 800b64c:	0800b759 	.word	0x0800b759
 800b650:	0800b717 	.word	0x0800b717
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68b9      	ldr	r1, [r7, #8]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f000 f9f8 	bl	800ba50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	699a      	ldr	r2, [r3, #24]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f042 0208 	orr.w	r2, r2, #8
 800b66e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	699a      	ldr	r2, [r3, #24]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f022 0204 	bic.w	r2, r2, #4
 800b67e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	6999      	ldr	r1, [r3, #24]
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	691a      	ldr	r2, [r3, #16]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	430a      	orrs	r2, r1
 800b690:	619a      	str	r2, [r3, #24]
      break;
 800b692:	e064      	b.n	800b75e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	68b9      	ldr	r1, [r7, #8]
 800b69a:	4618      	mov	r0, r3
 800b69c:	f000 fa3e 	bl	800bb1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	699a      	ldr	r2, [r3, #24]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b6ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	699a      	ldr	r2, [r3, #24]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	6999      	ldr	r1, [r3, #24]
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	691b      	ldr	r3, [r3, #16]
 800b6ca:	021a      	lsls	r2, r3, #8
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	430a      	orrs	r2, r1
 800b6d2:	619a      	str	r2, [r3, #24]
      break;
 800b6d4:	e043      	b.n	800b75e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68b9      	ldr	r1, [r7, #8]
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f000 fa89 	bl	800bbf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	69da      	ldr	r2, [r3, #28]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f042 0208 	orr.w	r2, r2, #8
 800b6f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	69da      	ldr	r2, [r3, #28]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f022 0204 	bic.w	r2, r2, #4
 800b700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	69d9      	ldr	r1, [r3, #28]
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	691a      	ldr	r2, [r3, #16]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	430a      	orrs	r2, r1
 800b712:	61da      	str	r2, [r3, #28]
      break;
 800b714:	e023      	b.n	800b75e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	68b9      	ldr	r1, [r7, #8]
 800b71c:	4618      	mov	r0, r3
 800b71e:	f000 fad3 	bl	800bcc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	69da      	ldr	r2, [r3, #28]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	69da      	ldr	r2, [r3, #28]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	69d9      	ldr	r1, [r3, #28]
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	691b      	ldr	r3, [r3, #16]
 800b74c:	021a      	lsls	r2, r3, #8
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	430a      	orrs	r2, r1
 800b754:	61da      	str	r2, [r3, #28]
      break;
 800b756:	e002      	b.n	800b75e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b758:	2301      	movs	r3, #1
 800b75a:	75fb      	strb	r3, [r7, #23]
      break;
 800b75c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2200      	movs	r2, #0
 800b762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b766:	7dfb      	ldrb	r3, [r7, #23]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3718      	adds	r7, #24
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b77a:	2300      	movs	r3, #0
 800b77c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b784:	2b01      	cmp	r3, #1
 800b786:	d101      	bne.n	800b78c <HAL_TIM_ConfigClockSource+0x1c>
 800b788:	2302      	movs	r3, #2
 800b78a:	e0b4      	b.n	800b8f6 <HAL_TIM_ConfigClockSource+0x186>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2201      	movs	r2, #1
 800b790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2202      	movs	r2, #2
 800b798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b7aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7c4:	d03e      	beq.n	800b844 <HAL_TIM_ConfigClockSource+0xd4>
 800b7c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7ca:	f200 8087 	bhi.w	800b8dc <HAL_TIM_ConfigClockSource+0x16c>
 800b7ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7d2:	f000 8086 	beq.w	800b8e2 <HAL_TIM_ConfigClockSource+0x172>
 800b7d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7da:	d87f      	bhi.n	800b8dc <HAL_TIM_ConfigClockSource+0x16c>
 800b7dc:	2b70      	cmp	r3, #112	; 0x70
 800b7de:	d01a      	beq.n	800b816 <HAL_TIM_ConfigClockSource+0xa6>
 800b7e0:	2b70      	cmp	r3, #112	; 0x70
 800b7e2:	d87b      	bhi.n	800b8dc <HAL_TIM_ConfigClockSource+0x16c>
 800b7e4:	2b60      	cmp	r3, #96	; 0x60
 800b7e6:	d050      	beq.n	800b88a <HAL_TIM_ConfigClockSource+0x11a>
 800b7e8:	2b60      	cmp	r3, #96	; 0x60
 800b7ea:	d877      	bhi.n	800b8dc <HAL_TIM_ConfigClockSource+0x16c>
 800b7ec:	2b50      	cmp	r3, #80	; 0x50
 800b7ee:	d03c      	beq.n	800b86a <HAL_TIM_ConfigClockSource+0xfa>
 800b7f0:	2b50      	cmp	r3, #80	; 0x50
 800b7f2:	d873      	bhi.n	800b8dc <HAL_TIM_ConfigClockSource+0x16c>
 800b7f4:	2b40      	cmp	r3, #64	; 0x40
 800b7f6:	d058      	beq.n	800b8aa <HAL_TIM_ConfigClockSource+0x13a>
 800b7f8:	2b40      	cmp	r3, #64	; 0x40
 800b7fa:	d86f      	bhi.n	800b8dc <HAL_TIM_ConfigClockSource+0x16c>
 800b7fc:	2b30      	cmp	r3, #48	; 0x30
 800b7fe:	d064      	beq.n	800b8ca <HAL_TIM_ConfigClockSource+0x15a>
 800b800:	2b30      	cmp	r3, #48	; 0x30
 800b802:	d86b      	bhi.n	800b8dc <HAL_TIM_ConfigClockSource+0x16c>
 800b804:	2b20      	cmp	r3, #32
 800b806:	d060      	beq.n	800b8ca <HAL_TIM_ConfigClockSource+0x15a>
 800b808:	2b20      	cmp	r3, #32
 800b80a:	d867      	bhi.n	800b8dc <HAL_TIM_ConfigClockSource+0x16c>
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d05c      	beq.n	800b8ca <HAL_TIM_ConfigClockSource+0x15a>
 800b810:	2b10      	cmp	r3, #16
 800b812:	d05a      	beq.n	800b8ca <HAL_TIM_ConfigClockSource+0x15a>
 800b814:	e062      	b.n	800b8dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6818      	ldr	r0, [r3, #0]
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	6899      	ldr	r1, [r3, #8]
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	685a      	ldr	r2, [r3, #4]
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	68db      	ldr	r3, [r3, #12]
 800b826:	f000 fb19 	bl	800be5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	689b      	ldr	r3, [r3, #8]
 800b830:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b838:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	68ba      	ldr	r2, [r7, #8]
 800b840:	609a      	str	r2, [r3, #8]
      break;
 800b842:	e04f      	b.n	800b8e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6818      	ldr	r0, [r3, #0]
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	6899      	ldr	r1, [r3, #8]
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	685a      	ldr	r2, [r3, #4]
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	f000 fb02 	bl	800be5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	689a      	ldr	r2, [r3, #8]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b866:	609a      	str	r2, [r3, #8]
      break;
 800b868:	e03c      	b.n	800b8e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6818      	ldr	r0, [r3, #0]
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	6859      	ldr	r1, [r3, #4]
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	461a      	mov	r2, r3
 800b878:	f000 fa76 	bl	800bd68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2150      	movs	r1, #80	; 0x50
 800b882:	4618      	mov	r0, r3
 800b884:	f000 facf 	bl	800be26 <TIM_ITRx_SetConfig>
      break;
 800b888:	e02c      	b.n	800b8e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6818      	ldr	r0, [r3, #0]
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	6859      	ldr	r1, [r3, #4]
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	461a      	mov	r2, r3
 800b898:	f000 fa95 	bl	800bdc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2160      	movs	r1, #96	; 0x60
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f000 fabf 	bl	800be26 <TIM_ITRx_SetConfig>
      break;
 800b8a8:	e01c      	b.n	800b8e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6818      	ldr	r0, [r3, #0]
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	6859      	ldr	r1, [r3, #4]
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	f000 fa56 	bl	800bd68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2140      	movs	r1, #64	; 0x40
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f000 faaf 	bl	800be26 <TIM_ITRx_SetConfig>
      break;
 800b8c8:	e00c      	b.n	800b8e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	4610      	mov	r0, r2
 800b8d6:	f000 faa6 	bl	800be26 <TIM_ITRx_SetConfig>
      break;
 800b8da:	e003      	b.n	800b8e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	73fb      	strb	r3, [r7, #15]
      break;
 800b8e0:	e000      	b.n	800b8e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b8e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b8fe:	b480      	push	{r7}
 800b900:	b083      	sub	sp, #12
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b906:	bf00      	nop
 800b908:	370c      	adds	r7, #12
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr

0800b912 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b912:	b480      	push	{r7}
 800b914:	b083      	sub	sp, #12
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b91a:	bf00      	nop
 800b91c:	370c      	adds	r7, #12
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr

0800b926 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b926:	b480      	push	{r7}
 800b928:	b083      	sub	sp, #12
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b92e:	bf00      	nop
 800b930:	370c      	adds	r7, #12
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr

0800b93a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b93a:	b480      	push	{r7}
 800b93c:	b083      	sub	sp, #12
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b942:	bf00      	nop
 800b944:	370c      	adds	r7, #12
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr
	...

0800b950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4a34      	ldr	r2, [pc, #208]	; (800ba34 <TIM_Base_SetConfig+0xe4>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d00f      	beq.n	800b988 <TIM_Base_SetConfig+0x38>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b96e:	d00b      	beq.n	800b988 <TIM_Base_SetConfig+0x38>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a31      	ldr	r2, [pc, #196]	; (800ba38 <TIM_Base_SetConfig+0xe8>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d007      	beq.n	800b988 <TIM_Base_SetConfig+0x38>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	4a30      	ldr	r2, [pc, #192]	; (800ba3c <TIM_Base_SetConfig+0xec>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d003      	beq.n	800b988 <TIM_Base_SetConfig+0x38>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	4a2f      	ldr	r2, [pc, #188]	; (800ba40 <TIM_Base_SetConfig+0xf0>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d108      	bne.n	800b99a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b98e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	4313      	orrs	r3, r2
 800b998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4a25      	ldr	r2, [pc, #148]	; (800ba34 <TIM_Base_SetConfig+0xe4>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d01b      	beq.n	800b9da <TIM_Base_SetConfig+0x8a>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9a8:	d017      	beq.n	800b9da <TIM_Base_SetConfig+0x8a>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	4a22      	ldr	r2, [pc, #136]	; (800ba38 <TIM_Base_SetConfig+0xe8>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d013      	beq.n	800b9da <TIM_Base_SetConfig+0x8a>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4a21      	ldr	r2, [pc, #132]	; (800ba3c <TIM_Base_SetConfig+0xec>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d00f      	beq.n	800b9da <TIM_Base_SetConfig+0x8a>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4a20      	ldr	r2, [pc, #128]	; (800ba40 <TIM_Base_SetConfig+0xf0>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d00b      	beq.n	800b9da <TIM_Base_SetConfig+0x8a>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a1f      	ldr	r2, [pc, #124]	; (800ba44 <TIM_Base_SetConfig+0xf4>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d007      	beq.n	800b9da <TIM_Base_SetConfig+0x8a>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4a1e      	ldr	r2, [pc, #120]	; (800ba48 <TIM_Base_SetConfig+0xf8>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d003      	beq.n	800b9da <TIM_Base_SetConfig+0x8a>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a1d      	ldr	r2, [pc, #116]	; (800ba4c <TIM_Base_SetConfig+0xfc>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d108      	bne.n	800b9ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	68fa      	ldr	r2, [r7, #12]
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	695b      	ldr	r3, [r3, #20]
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	689a      	ldr	r2, [r3, #8]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	4a08      	ldr	r2, [pc, #32]	; (800ba34 <TIM_Base_SetConfig+0xe4>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d103      	bne.n	800ba20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	691a      	ldr	r2, [r3, #16]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	615a      	str	r2, [r3, #20]
}
 800ba26:	bf00      	nop
 800ba28:	3714      	adds	r7, #20
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr
 800ba32:	bf00      	nop
 800ba34:	40010000 	.word	0x40010000
 800ba38:	40000400 	.word	0x40000400
 800ba3c:	40000800 	.word	0x40000800
 800ba40:	40000c00 	.word	0x40000c00
 800ba44:	40014000 	.word	0x40014000
 800ba48:	40014400 	.word	0x40014400
 800ba4c:	40014800 	.word	0x40014800

0800ba50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b087      	sub	sp, #28
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6a1b      	ldr	r3, [r3, #32]
 800ba5e:	f023 0201 	bic.w	r2, r3, #1
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	699b      	ldr	r3, [r3, #24]
 800ba76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f023 0303 	bic.w	r3, r3, #3
 800ba86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	f023 0302 	bic.w	r3, r3, #2
 800ba98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	697a      	ldr	r2, [r7, #20]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4a1c      	ldr	r2, [pc, #112]	; (800bb18 <TIM_OC1_SetConfig+0xc8>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d10c      	bne.n	800bac6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	f023 0308 	bic.w	r3, r3, #8
 800bab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	697a      	ldr	r2, [r7, #20]
 800baba:	4313      	orrs	r3, r2
 800babc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	f023 0304 	bic.w	r3, r3, #4
 800bac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4a13      	ldr	r2, [pc, #76]	; (800bb18 <TIM_OC1_SetConfig+0xc8>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d111      	bne.n	800baf2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800badc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	695b      	ldr	r3, [r3, #20]
 800bae2:	693a      	ldr	r2, [r7, #16]
 800bae4:	4313      	orrs	r3, r2
 800bae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	699b      	ldr	r3, [r3, #24]
 800baec:	693a      	ldr	r2, [r7, #16]
 800baee:	4313      	orrs	r3, r2
 800baf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	693a      	ldr	r2, [r7, #16]
 800baf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	68fa      	ldr	r2, [r7, #12]
 800bafc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	685a      	ldr	r2, [r3, #4]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	697a      	ldr	r2, [r7, #20]
 800bb0a:	621a      	str	r2, [r3, #32]
}
 800bb0c:	bf00      	nop
 800bb0e:	371c      	adds	r7, #28
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr
 800bb18:	40010000 	.word	0x40010000

0800bb1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b087      	sub	sp, #28
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a1b      	ldr	r3, [r3, #32]
 800bb2a:	f023 0210 	bic.w	r2, r3, #16
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6a1b      	ldr	r3, [r3, #32]
 800bb36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	699b      	ldr	r3, [r3, #24]
 800bb42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	021b      	lsls	r3, r3, #8
 800bb5a:	68fa      	ldr	r2, [r7, #12]
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	f023 0320 	bic.w	r3, r3, #32
 800bb66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	011b      	lsls	r3, r3, #4
 800bb6e:	697a      	ldr	r2, [r7, #20]
 800bb70:	4313      	orrs	r3, r2
 800bb72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4a1e      	ldr	r2, [pc, #120]	; (800bbf0 <TIM_OC2_SetConfig+0xd4>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d10d      	bne.n	800bb98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	011b      	lsls	r3, r3, #4
 800bb8a:	697a      	ldr	r2, [r7, #20]
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	4a15      	ldr	r2, [pc, #84]	; (800bbf0 <TIM_OC2_SetConfig+0xd4>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d113      	bne.n	800bbc8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bbae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	695b      	ldr	r3, [r3, #20]
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	693a      	ldr	r2, [r7, #16]
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	699b      	ldr	r3, [r3, #24]
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	693a      	ldr	r2, [r7, #16]
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	693a      	ldr	r2, [r7, #16]
 800bbcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	685a      	ldr	r2, [r3, #4]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	697a      	ldr	r2, [r7, #20]
 800bbe0:	621a      	str	r2, [r3, #32]
}
 800bbe2:	bf00      	nop
 800bbe4:	371c      	adds	r7, #28
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop
 800bbf0:	40010000 	.word	0x40010000

0800bbf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b087      	sub	sp, #28
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a1b      	ldr	r3, [r3, #32]
 800bc02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a1b      	ldr	r3, [r3, #32]
 800bc0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	69db      	ldr	r3, [r3, #28]
 800bc1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f023 0303 	bic.w	r3, r3, #3
 800bc2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bc3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	689b      	ldr	r3, [r3, #8]
 800bc42:	021b      	lsls	r3, r3, #8
 800bc44:	697a      	ldr	r2, [r7, #20]
 800bc46:	4313      	orrs	r3, r2
 800bc48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4a1d      	ldr	r2, [pc, #116]	; (800bcc4 <TIM_OC3_SetConfig+0xd0>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d10d      	bne.n	800bc6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	021b      	lsls	r3, r3, #8
 800bc60:	697a      	ldr	r2, [r7, #20]
 800bc62:	4313      	orrs	r3, r2
 800bc64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	4a14      	ldr	r2, [pc, #80]	; (800bcc4 <TIM_OC3_SetConfig+0xd0>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d113      	bne.n	800bc9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	695b      	ldr	r3, [r3, #20]
 800bc8a:	011b      	lsls	r3, r3, #4
 800bc8c:	693a      	ldr	r2, [r7, #16]
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	699b      	ldr	r3, [r3, #24]
 800bc96:	011b      	lsls	r3, r3, #4
 800bc98:	693a      	ldr	r2, [r7, #16]
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	693a      	ldr	r2, [r7, #16]
 800bca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	685a      	ldr	r2, [r3, #4]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	697a      	ldr	r2, [r7, #20]
 800bcb6:	621a      	str	r2, [r3, #32]
}
 800bcb8:	bf00      	nop
 800bcba:	371c      	adds	r7, #28
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr
 800bcc4:	40010000 	.word	0x40010000

0800bcc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b087      	sub	sp, #28
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a1b      	ldr	r3, [r3, #32]
 800bcd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6a1b      	ldr	r3, [r3, #32]
 800bce2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	69db      	ldr	r3, [r3, #28]
 800bcee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	021b      	lsls	r3, r3, #8
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bd12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	031b      	lsls	r3, r3, #12
 800bd1a:	693a      	ldr	r2, [r7, #16]
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4a10      	ldr	r2, [pc, #64]	; (800bd64 <TIM_OC4_SetConfig+0x9c>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d109      	bne.n	800bd3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	695b      	ldr	r3, [r3, #20]
 800bd34:	019b      	lsls	r3, r3, #6
 800bd36:	697a      	ldr	r2, [r7, #20]
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	697a      	ldr	r2, [r7, #20]
 800bd40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	68fa      	ldr	r2, [r7, #12]
 800bd46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	685a      	ldr	r2, [r3, #4]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	693a      	ldr	r2, [r7, #16]
 800bd54:	621a      	str	r2, [r3, #32]
}
 800bd56:	bf00      	nop
 800bd58:	371c      	adds	r7, #28
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop
 800bd64:	40010000 	.word	0x40010000

0800bd68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b087      	sub	sp, #28
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6a1b      	ldr	r3, [r3, #32]
 800bd78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6a1b      	ldr	r3, [r3, #32]
 800bd7e:	f023 0201 	bic.w	r2, r3, #1
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	699b      	ldr	r3, [r3, #24]
 800bd8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	011b      	lsls	r3, r3, #4
 800bd98:	693a      	ldr	r2, [r7, #16]
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f023 030a 	bic.w	r3, r3, #10
 800bda4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bda6:	697a      	ldr	r2, [r7, #20]
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	693a      	ldr	r2, [r7, #16]
 800bdb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	697a      	ldr	r2, [r7, #20]
 800bdb8:	621a      	str	r2, [r3, #32]
}
 800bdba:	bf00      	nop
 800bdbc:	371c      	adds	r7, #28
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr

0800bdc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bdc6:	b480      	push	{r7}
 800bdc8:	b087      	sub	sp, #28
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	60f8      	str	r0, [r7, #12]
 800bdce:	60b9      	str	r1, [r7, #8]
 800bdd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6a1b      	ldr	r3, [r3, #32]
 800bdd6:	f023 0210 	bic.w	r2, r3, #16
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	699b      	ldr	r3, [r3, #24]
 800bde2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	6a1b      	ldr	r3, [r3, #32]
 800bde8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bdf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	031b      	lsls	r3, r3, #12
 800bdf6:	697a      	ldr	r2, [r7, #20]
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800be02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	011b      	lsls	r3, r3, #4
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	697a      	ldr	r2, [r7, #20]
 800be12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	693a      	ldr	r2, [r7, #16]
 800be18:	621a      	str	r2, [r3, #32]
}
 800be1a:	bf00      	nop
 800be1c:	371c      	adds	r7, #28
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr

0800be26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800be26:	b480      	push	{r7}
 800be28:	b085      	sub	sp, #20
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
 800be2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be3e:	683a      	ldr	r2, [r7, #0]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	4313      	orrs	r3, r2
 800be44:	f043 0307 	orr.w	r3, r3, #7
 800be48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	68fa      	ldr	r2, [r7, #12]
 800be4e:	609a      	str	r2, [r3, #8]
}
 800be50:	bf00      	nop
 800be52:	3714      	adds	r7, #20
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b087      	sub	sp, #28
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
 800be68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	021a      	lsls	r2, r3, #8
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	431a      	orrs	r2, r3
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	4313      	orrs	r3, r2
 800be84:	697a      	ldr	r2, [r7, #20]
 800be86:	4313      	orrs	r3, r2
 800be88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	697a      	ldr	r2, [r7, #20]
 800be8e:	609a      	str	r2, [r3, #8]
}
 800be90:	bf00      	nop
 800be92:	371c      	adds	r7, #28
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b087      	sub	sp, #28
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	f003 031f 	and.w	r3, r3, #31
 800beae:	2201      	movs	r2, #1
 800beb0:	fa02 f303 	lsl.w	r3, r2, r3
 800beb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	6a1a      	ldr	r2, [r3, #32]
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	43db      	mvns	r3, r3
 800bebe:	401a      	ands	r2, r3
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	6a1a      	ldr	r2, [r3, #32]
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	f003 031f 	and.w	r3, r3, #31
 800bece:	6879      	ldr	r1, [r7, #4]
 800bed0:	fa01 f303 	lsl.w	r3, r1, r3
 800bed4:	431a      	orrs	r2, r3
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	621a      	str	r2, [r3, #32]
}
 800beda:	bf00      	nop
 800bedc:	371c      	adds	r7, #28
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr
	...

0800bee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bee8:	b480      	push	{r7}
 800beea:	b085      	sub	sp, #20
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d101      	bne.n	800bf00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800befc:	2302      	movs	r3, #2
 800befe:	e050      	b.n	800bfa2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2202      	movs	r2, #2
 800bf0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	68fa      	ldr	r2, [r7, #12]
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a1c      	ldr	r2, [pc, #112]	; (800bfb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d018      	beq.n	800bf76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf4c:	d013      	beq.n	800bf76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4a18      	ldr	r2, [pc, #96]	; (800bfb4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d00e      	beq.n	800bf76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a16      	ldr	r2, [pc, #88]	; (800bfb8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d009      	beq.n	800bf76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a15      	ldr	r2, [pc, #84]	; (800bfbc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d004      	beq.n	800bf76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a13      	ldr	r2, [pc, #76]	; (800bfc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d10c      	bne.n	800bf90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	4313      	orrs	r3, r2
 800bf86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2201      	movs	r2, #1
 800bf94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3714      	adds	r7, #20
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop
 800bfb0:	40010000 	.word	0x40010000
 800bfb4:	40000400 	.word	0x40000400
 800bfb8:	40000800 	.word	0x40000800
 800bfbc:	40000c00 	.word	0x40000c00
 800bfc0:	40014000 	.word	0x40014000

0800bfc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bfcc:	bf00      	nop
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bfe0:	bf00      	nop
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d101      	bne.n	800bffe <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800bffa:	2301      	movs	r3, #1
 800bffc:	e047      	b.n	800c08e <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c004:	b2db      	uxtb	r3, r3
 800c006:	2b00      	cmp	r3, #0
 800c008:	d106      	bne.n	800c018 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f7fa f9d8 	bl	80063c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2224      	movs	r2, #36	; 0x24
 800c01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	68da      	ldr	r2, [r3, #12]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c02e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 f931 	bl	800c298 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	691a      	ldr	r2, [r3, #16]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c044:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	695a      	ldr	r2, [r3, #20]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800c054:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	695a      	ldr	r2, [r3, #20]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f042 0208 	orr.w	r2, r2, #8
 800c064:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	68da      	ldr	r2, [r3, #12]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c074:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2200      	movs	r2, #0
 800c07a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2220      	movs	r2, #32
 800c080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2220      	movs	r2, #32
 800c088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3708      	adds	r7, #8
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}

0800c096 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c096:	b580      	push	{r7, lr}
 800c098:	b08a      	sub	sp, #40	; 0x28
 800c09a:	af02      	add	r7, sp, #8
 800c09c:	60f8      	str	r0, [r7, #12]
 800c09e:	60b9      	str	r1, [r7, #8]
 800c0a0:	603b      	str	r3, [r7, #0]
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	2b20      	cmp	r3, #32
 800c0b4:	d17c      	bne.n	800c1b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d002      	beq.n	800c0c2 <HAL_UART_Transmit+0x2c>
 800c0bc:	88fb      	ldrh	r3, [r7, #6]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d101      	bne.n	800c0c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e075      	b.n	800c1b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d101      	bne.n	800c0d4 <HAL_UART_Transmit+0x3e>
 800c0d0:	2302      	movs	r3, #2
 800c0d2:	e06e      	b.n	800c1b2 <HAL_UART_Transmit+0x11c>
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2221      	movs	r2, #33	; 0x21
 800c0e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c0ea:	f7fa faff 	bl	80066ec <HAL_GetTick>
 800c0ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	88fa      	ldrh	r2, [r7, #6]
 800c0f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	88fa      	ldrh	r2, [r7, #6]
 800c0fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	689b      	ldr	r3, [r3, #8]
 800c100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c104:	d108      	bne.n	800c118 <HAL_UART_Transmit+0x82>
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	691b      	ldr	r3, [r3, #16]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d104      	bne.n	800c118 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c10e:	2300      	movs	r3, #0
 800c110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	61bb      	str	r3, [r7, #24]
 800c116:	e003      	b.n	800c120 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c11c:	2300      	movs	r3, #0
 800c11e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2200      	movs	r2, #0
 800c124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c128:	e02a      	b.n	800c180 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	9300      	str	r3, [sp, #0]
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	2200      	movs	r2, #0
 800c132:	2180      	movs	r1, #128	; 0x80
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	f000 f840 	bl	800c1ba <UART_WaitOnFlagUntilTimeout>
 800c13a:	4603      	mov	r3, r0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d001      	beq.n	800c144 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c140:	2303      	movs	r3, #3
 800c142:	e036      	b.n	800c1b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10b      	bne.n	800c162 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	881b      	ldrh	r3, [r3, #0]
 800c14e:	461a      	mov	r2, r3
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c158:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	3302      	adds	r3, #2
 800c15e:	61bb      	str	r3, [r7, #24]
 800c160:	e007      	b.n	800c172 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c162:	69fb      	ldr	r3, [r7, #28]
 800c164:	781a      	ldrb	r2, [r3, #0]
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c16c:	69fb      	ldr	r3, [r7, #28]
 800c16e:	3301      	adds	r3, #1
 800c170:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c176:	b29b      	uxth	r3, r3
 800c178:	3b01      	subs	r3, #1
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c184:	b29b      	uxth	r3, r3
 800c186:	2b00      	cmp	r3, #0
 800c188:	d1cf      	bne.n	800c12a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	9300      	str	r3, [sp, #0]
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	2200      	movs	r2, #0
 800c192:	2140      	movs	r1, #64	; 0x40
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f000 f810 	bl	800c1ba <UART_WaitOnFlagUntilTimeout>
 800c19a:	4603      	mov	r3, r0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d001      	beq.n	800c1a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c1a0:	2303      	movs	r3, #3
 800c1a2:	e006      	b.n	800c1b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2220      	movs	r2, #32
 800c1a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	e000      	b.n	800c1b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c1b0:	2302      	movs	r3, #2
  }
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3720      	adds	r7, #32
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b090      	sub	sp, #64	; 0x40
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	60f8      	str	r0, [r7, #12]
 800c1c2:	60b9      	str	r1, [r7, #8]
 800c1c4:	603b      	str	r3, [r7, #0]
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1ca:	e050      	b.n	800c26e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d2:	d04c      	beq.n	800c26e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c1d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d007      	beq.n	800c1ea <UART_WaitOnFlagUntilTimeout+0x30>
 800c1da:	f7fa fa87 	bl	80066ec <HAL_GetTick>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	1ad3      	subs	r3, r2, r3
 800c1e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d241      	bcs.n	800c26e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	330c      	adds	r3, #12
 800c1f0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f4:	e853 3f00 	ldrex	r3, [r3]
 800c1f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c200:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	330c      	adds	r3, #12
 800c208:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c20a:	637a      	str	r2, [r7, #52]	; 0x34
 800c20c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c212:	e841 2300 	strex	r3, r2, [r1]
 800c216:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1e5      	bne.n	800c1ea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	3314      	adds	r3, #20
 800c224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	e853 3f00 	ldrex	r3, [r3]
 800c22c:	613b      	str	r3, [r7, #16]
   return(result);
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	f023 0301 	bic.w	r3, r3, #1
 800c234:	63bb      	str	r3, [r7, #56]	; 0x38
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	3314      	adds	r3, #20
 800c23c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c23e:	623a      	str	r2, [r7, #32]
 800c240:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c242:	69f9      	ldr	r1, [r7, #28]
 800c244:	6a3a      	ldr	r2, [r7, #32]
 800c246:	e841 2300 	strex	r3, r2, [r1]
 800c24a:	61bb      	str	r3, [r7, #24]
   return(result);
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d1e5      	bne.n	800c21e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2220      	movs	r2, #32
 800c256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2220      	movs	r2, #32
 800c25e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2200      	movs	r2, #0
 800c266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c26a:	2303      	movs	r3, #3
 800c26c:	e00f      	b.n	800c28e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	4013      	ands	r3, r2
 800c278:	68ba      	ldr	r2, [r7, #8]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	bf0c      	ite	eq
 800c27e:	2301      	moveq	r3, #1
 800c280:	2300      	movne	r3, #0
 800c282:	b2db      	uxtb	r3, r3
 800c284:	461a      	mov	r2, r3
 800c286:	79fb      	ldrb	r3, [r7, #7]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d09f      	beq.n	800c1cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c28c:	2300      	movs	r3, #0
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3740      	adds	r7, #64	; 0x40
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
	...

0800c298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c29c:	b0c0      	sub	sp, #256	; 0x100
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	691b      	ldr	r3, [r3, #16]
 800c2ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c2b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2b4:	68d9      	ldr	r1, [r3, #12]
 800c2b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	ea40 0301 	orr.w	r3, r0, r1
 800c2c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c2c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2c6:	689a      	ldr	r2, [r3, #8]
 800c2c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2cc:	691b      	ldr	r3, [r3, #16]
 800c2ce:	431a      	orrs	r2, r3
 800c2d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2d4:	695b      	ldr	r3, [r3, #20]
 800c2d6:	431a      	orrs	r2, r3
 800c2d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2dc:	69db      	ldr	r3, [r3, #28]
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c2e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	68db      	ldr	r3, [r3, #12]
 800c2ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c2f0:	f021 010c 	bic.w	r1, r1, #12
 800c2f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c2fe:	430b      	orrs	r3, r1
 800c300:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	695b      	ldr	r3, [r3, #20]
 800c30a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c30e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c312:	6999      	ldr	r1, [r3, #24]
 800c314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	ea40 0301 	orr.w	r3, r0, r1
 800c31e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	4b8f      	ldr	r3, [pc, #572]	; (800c564 <UART_SetConfig+0x2cc>)
 800c328:	429a      	cmp	r2, r3
 800c32a:	d005      	beq.n	800c338 <UART_SetConfig+0xa0>
 800c32c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	4b8d      	ldr	r3, [pc, #564]	; (800c568 <UART_SetConfig+0x2d0>)
 800c334:	429a      	cmp	r2, r3
 800c336:	d104      	bne.n	800c342 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c338:	f7fd fd24 	bl	8009d84 <HAL_RCC_GetPCLK2Freq>
 800c33c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c340:	e003      	b.n	800c34a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c342:	f7fd fd0b 	bl	8009d5c <HAL_RCC_GetPCLK1Freq>
 800c346:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c34a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c34e:	69db      	ldr	r3, [r3, #28]
 800c350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c354:	f040 810c 	bne.w	800c570 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c35c:	2200      	movs	r2, #0
 800c35e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c362:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c366:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c36a:	4622      	mov	r2, r4
 800c36c:	462b      	mov	r3, r5
 800c36e:	1891      	adds	r1, r2, r2
 800c370:	65b9      	str	r1, [r7, #88]	; 0x58
 800c372:	415b      	adcs	r3, r3
 800c374:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c376:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c37a:	4621      	mov	r1, r4
 800c37c:	eb12 0801 	adds.w	r8, r2, r1
 800c380:	4629      	mov	r1, r5
 800c382:	eb43 0901 	adc.w	r9, r3, r1
 800c386:	f04f 0200 	mov.w	r2, #0
 800c38a:	f04f 0300 	mov.w	r3, #0
 800c38e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c392:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c396:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c39a:	4690      	mov	r8, r2
 800c39c:	4699      	mov	r9, r3
 800c39e:	4623      	mov	r3, r4
 800c3a0:	eb18 0303 	adds.w	r3, r8, r3
 800c3a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c3a8:	462b      	mov	r3, r5
 800c3aa:	eb49 0303 	adc.w	r3, r9, r3
 800c3ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c3b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c3be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c3c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	18db      	adds	r3, r3, r3
 800c3ca:	653b      	str	r3, [r7, #80]	; 0x50
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	eb42 0303 	adc.w	r3, r2, r3
 800c3d2:	657b      	str	r3, [r7, #84]	; 0x54
 800c3d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c3d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c3dc:	f7f4 fa5a 	bl	8000894 <__aeabi_uldivmod>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	4b61      	ldr	r3, [pc, #388]	; (800c56c <UART_SetConfig+0x2d4>)
 800c3e6:	fba3 2302 	umull	r2, r3, r3, r2
 800c3ea:	095b      	lsrs	r3, r3, #5
 800c3ec:	011c      	lsls	r4, r3, #4
 800c3ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c3f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c3fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c400:	4642      	mov	r2, r8
 800c402:	464b      	mov	r3, r9
 800c404:	1891      	adds	r1, r2, r2
 800c406:	64b9      	str	r1, [r7, #72]	; 0x48
 800c408:	415b      	adcs	r3, r3
 800c40a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c40c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c410:	4641      	mov	r1, r8
 800c412:	eb12 0a01 	adds.w	sl, r2, r1
 800c416:	4649      	mov	r1, r9
 800c418:	eb43 0b01 	adc.w	fp, r3, r1
 800c41c:	f04f 0200 	mov.w	r2, #0
 800c420:	f04f 0300 	mov.w	r3, #0
 800c424:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c428:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c42c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c430:	4692      	mov	sl, r2
 800c432:	469b      	mov	fp, r3
 800c434:	4643      	mov	r3, r8
 800c436:	eb1a 0303 	adds.w	r3, sl, r3
 800c43a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c43e:	464b      	mov	r3, r9
 800c440:	eb4b 0303 	adc.w	r3, fp, r3
 800c444:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c454:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c458:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c45c:	460b      	mov	r3, r1
 800c45e:	18db      	adds	r3, r3, r3
 800c460:	643b      	str	r3, [r7, #64]	; 0x40
 800c462:	4613      	mov	r3, r2
 800c464:	eb42 0303 	adc.w	r3, r2, r3
 800c468:	647b      	str	r3, [r7, #68]	; 0x44
 800c46a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c46e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c472:	f7f4 fa0f 	bl	8000894 <__aeabi_uldivmod>
 800c476:	4602      	mov	r2, r0
 800c478:	460b      	mov	r3, r1
 800c47a:	4611      	mov	r1, r2
 800c47c:	4b3b      	ldr	r3, [pc, #236]	; (800c56c <UART_SetConfig+0x2d4>)
 800c47e:	fba3 2301 	umull	r2, r3, r3, r1
 800c482:	095b      	lsrs	r3, r3, #5
 800c484:	2264      	movs	r2, #100	; 0x64
 800c486:	fb02 f303 	mul.w	r3, r2, r3
 800c48a:	1acb      	subs	r3, r1, r3
 800c48c:	00db      	lsls	r3, r3, #3
 800c48e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c492:	4b36      	ldr	r3, [pc, #216]	; (800c56c <UART_SetConfig+0x2d4>)
 800c494:	fba3 2302 	umull	r2, r3, r3, r2
 800c498:	095b      	lsrs	r3, r3, #5
 800c49a:	005b      	lsls	r3, r3, #1
 800c49c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c4a0:	441c      	add	r4, r3
 800c4a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c4ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c4b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c4b4:	4642      	mov	r2, r8
 800c4b6:	464b      	mov	r3, r9
 800c4b8:	1891      	adds	r1, r2, r2
 800c4ba:	63b9      	str	r1, [r7, #56]	; 0x38
 800c4bc:	415b      	adcs	r3, r3
 800c4be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c4c4:	4641      	mov	r1, r8
 800c4c6:	1851      	adds	r1, r2, r1
 800c4c8:	6339      	str	r1, [r7, #48]	; 0x30
 800c4ca:	4649      	mov	r1, r9
 800c4cc:	414b      	adcs	r3, r1
 800c4ce:	637b      	str	r3, [r7, #52]	; 0x34
 800c4d0:	f04f 0200 	mov.w	r2, #0
 800c4d4:	f04f 0300 	mov.w	r3, #0
 800c4d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c4dc:	4659      	mov	r1, fp
 800c4de:	00cb      	lsls	r3, r1, #3
 800c4e0:	4651      	mov	r1, sl
 800c4e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c4e6:	4651      	mov	r1, sl
 800c4e8:	00ca      	lsls	r2, r1, #3
 800c4ea:	4610      	mov	r0, r2
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	4642      	mov	r2, r8
 800c4f2:	189b      	adds	r3, r3, r2
 800c4f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c4f8:	464b      	mov	r3, r9
 800c4fa:	460a      	mov	r2, r1
 800c4fc:	eb42 0303 	adc.w	r3, r2, r3
 800c500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c510:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c514:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c518:	460b      	mov	r3, r1
 800c51a:	18db      	adds	r3, r3, r3
 800c51c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c51e:	4613      	mov	r3, r2
 800c520:	eb42 0303 	adc.w	r3, r2, r3
 800c524:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c526:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c52a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c52e:	f7f4 f9b1 	bl	8000894 <__aeabi_uldivmod>
 800c532:	4602      	mov	r2, r0
 800c534:	460b      	mov	r3, r1
 800c536:	4b0d      	ldr	r3, [pc, #52]	; (800c56c <UART_SetConfig+0x2d4>)
 800c538:	fba3 1302 	umull	r1, r3, r3, r2
 800c53c:	095b      	lsrs	r3, r3, #5
 800c53e:	2164      	movs	r1, #100	; 0x64
 800c540:	fb01 f303 	mul.w	r3, r1, r3
 800c544:	1ad3      	subs	r3, r2, r3
 800c546:	00db      	lsls	r3, r3, #3
 800c548:	3332      	adds	r3, #50	; 0x32
 800c54a:	4a08      	ldr	r2, [pc, #32]	; (800c56c <UART_SetConfig+0x2d4>)
 800c54c:	fba2 2303 	umull	r2, r3, r2, r3
 800c550:	095b      	lsrs	r3, r3, #5
 800c552:	f003 0207 	and.w	r2, r3, #7
 800c556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4422      	add	r2, r4
 800c55e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c560:	e105      	b.n	800c76e <UART_SetConfig+0x4d6>
 800c562:	bf00      	nop
 800c564:	40011000 	.word	0x40011000
 800c568:	40011400 	.word	0x40011400
 800c56c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c574:	2200      	movs	r2, #0
 800c576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c57a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c57e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c582:	4642      	mov	r2, r8
 800c584:	464b      	mov	r3, r9
 800c586:	1891      	adds	r1, r2, r2
 800c588:	6239      	str	r1, [r7, #32]
 800c58a:	415b      	adcs	r3, r3
 800c58c:	627b      	str	r3, [r7, #36]	; 0x24
 800c58e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c592:	4641      	mov	r1, r8
 800c594:	1854      	adds	r4, r2, r1
 800c596:	4649      	mov	r1, r9
 800c598:	eb43 0501 	adc.w	r5, r3, r1
 800c59c:	f04f 0200 	mov.w	r2, #0
 800c5a0:	f04f 0300 	mov.w	r3, #0
 800c5a4:	00eb      	lsls	r3, r5, #3
 800c5a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c5aa:	00e2      	lsls	r2, r4, #3
 800c5ac:	4614      	mov	r4, r2
 800c5ae:	461d      	mov	r5, r3
 800c5b0:	4643      	mov	r3, r8
 800c5b2:	18e3      	adds	r3, r4, r3
 800c5b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c5b8:	464b      	mov	r3, r9
 800c5ba:	eb45 0303 	adc.w	r3, r5, r3
 800c5be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c5c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c5ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c5d2:	f04f 0200 	mov.w	r2, #0
 800c5d6:	f04f 0300 	mov.w	r3, #0
 800c5da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c5de:	4629      	mov	r1, r5
 800c5e0:	008b      	lsls	r3, r1, #2
 800c5e2:	4621      	mov	r1, r4
 800c5e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c5e8:	4621      	mov	r1, r4
 800c5ea:	008a      	lsls	r2, r1, #2
 800c5ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c5f0:	f7f4 f950 	bl	8000894 <__aeabi_uldivmod>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	4b60      	ldr	r3, [pc, #384]	; (800c77c <UART_SetConfig+0x4e4>)
 800c5fa:	fba3 2302 	umull	r2, r3, r3, r2
 800c5fe:	095b      	lsrs	r3, r3, #5
 800c600:	011c      	lsls	r4, r3, #4
 800c602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c606:	2200      	movs	r2, #0
 800c608:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c60c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c610:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c614:	4642      	mov	r2, r8
 800c616:	464b      	mov	r3, r9
 800c618:	1891      	adds	r1, r2, r2
 800c61a:	61b9      	str	r1, [r7, #24]
 800c61c:	415b      	adcs	r3, r3
 800c61e:	61fb      	str	r3, [r7, #28]
 800c620:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c624:	4641      	mov	r1, r8
 800c626:	1851      	adds	r1, r2, r1
 800c628:	6139      	str	r1, [r7, #16]
 800c62a:	4649      	mov	r1, r9
 800c62c:	414b      	adcs	r3, r1
 800c62e:	617b      	str	r3, [r7, #20]
 800c630:	f04f 0200 	mov.w	r2, #0
 800c634:	f04f 0300 	mov.w	r3, #0
 800c638:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c63c:	4659      	mov	r1, fp
 800c63e:	00cb      	lsls	r3, r1, #3
 800c640:	4651      	mov	r1, sl
 800c642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c646:	4651      	mov	r1, sl
 800c648:	00ca      	lsls	r2, r1, #3
 800c64a:	4610      	mov	r0, r2
 800c64c:	4619      	mov	r1, r3
 800c64e:	4603      	mov	r3, r0
 800c650:	4642      	mov	r2, r8
 800c652:	189b      	adds	r3, r3, r2
 800c654:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c658:	464b      	mov	r3, r9
 800c65a:	460a      	mov	r2, r1
 800c65c:	eb42 0303 	adc.w	r3, r2, r3
 800c660:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c66e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c670:	f04f 0200 	mov.w	r2, #0
 800c674:	f04f 0300 	mov.w	r3, #0
 800c678:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c67c:	4649      	mov	r1, r9
 800c67e:	008b      	lsls	r3, r1, #2
 800c680:	4641      	mov	r1, r8
 800c682:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c686:	4641      	mov	r1, r8
 800c688:	008a      	lsls	r2, r1, #2
 800c68a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c68e:	f7f4 f901 	bl	8000894 <__aeabi_uldivmod>
 800c692:	4602      	mov	r2, r0
 800c694:	460b      	mov	r3, r1
 800c696:	4b39      	ldr	r3, [pc, #228]	; (800c77c <UART_SetConfig+0x4e4>)
 800c698:	fba3 1302 	umull	r1, r3, r3, r2
 800c69c:	095b      	lsrs	r3, r3, #5
 800c69e:	2164      	movs	r1, #100	; 0x64
 800c6a0:	fb01 f303 	mul.w	r3, r1, r3
 800c6a4:	1ad3      	subs	r3, r2, r3
 800c6a6:	011b      	lsls	r3, r3, #4
 800c6a8:	3332      	adds	r3, #50	; 0x32
 800c6aa:	4a34      	ldr	r2, [pc, #208]	; (800c77c <UART_SetConfig+0x4e4>)
 800c6ac:	fba2 2303 	umull	r2, r3, r2, r3
 800c6b0:	095b      	lsrs	r3, r3, #5
 800c6b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c6b6:	441c      	add	r4, r3
 800c6b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c6bc:	2200      	movs	r2, #0
 800c6be:	673b      	str	r3, [r7, #112]	; 0x70
 800c6c0:	677a      	str	r2, [r7, #116]	; 0x74
 800c6c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c6c6:	4642      	mov	r2, r8
 800c6c8:	464b      	mov	r3, r9
 800c6ca:	1891      	adds	r1, r2, r2
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	415b      	adcs	r3, r3
 800c6d0:	60fb      	str	r3, [r7, #12]
 800c6d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c6d6:	4641      	mov	r1, r8
 800c6d8:	1851      	adds	r1, r2, r1
 800c6da:	6039      	str	r1, [r7, #0]
 800c6dc:	4649      	mov	r1, r9
 800c6de:	414b      	adcs	r3, r1
 800c6e0:	607b      	str	r3, [r7, #4]
 800c6e2:	f04f 0200 	mov.w	r2, #0
 800c6e6:	f04f 0300 	mov.w	r3, #0
 800c6ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c6ee:	4659      	mov	r1, fp
 800c6f0:	00cb      	lsls	r3, r1, #3
 800c6f2:	4651      	mov	r1, sl
 800c6f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c6f8:	4651      	mov	r1, sl
 800c6fa:	00ca      	lsls	r2, r1, #3
 800c6fc:	4610      	mov	r0, r2
 800c6fe:	4619      	mov	r1, r3
 800c700:	4603      	mov	r3, r0
 800c702:	4642      	mov	r2, r8
 800c704:	189b      	adds	r3, r3, r2
 800c706:	66bb      	str	r3, [r7, #104]	; 0x68
 800c708:	464b      	mov	r3, r9
 800c70a:	460a      	mov	r2, r1
 800c70c:	eb42 0303 	adc.w	r3, r2, r3
 800c710:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	2200      	movs	r2, #0
 800c71a:	663b      	str	r3, [r7, #96]	; 0x60
 800c71c:	667a      	str	r2, [r7, #100]	; 0x64
 800c71e:	f04f 0200 	mov.w	r2, #0
 800c722:	f04f 0300 	mov.w	r3, #0
 800c726:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c72a:	4649      	mov	r1, r9
 800c72c:	008b      	lsls	r3, r1, #2
 800c72e:	4641      	mov	r1, r8
 800c730:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c734:	4641      	mov	r1, r8
 800c736:	008a      	lsls	r2, r1, #2
 800c738:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c73c:	f7f4 f8aa 	bl	8000894 <__aeabi_uldivmod>
 800c740:	4602      	mov	r2, r0
 800c742:	460b      	mov	r3, r1
 800c744:	4b0d      	ldr	r3, [pc, #52]	; (800c77c <UART_SetConfig+0x4e4>)
 800c746:	fba3 1302 	umull	r1, r3, r3, r2
 800c74a:	095b      	lsrs	r3, r3, #5
 800c74c:	2164      	movs	r1, #100	; 0x64
 800c74e:	fb01 f303 	mul.w	r3, r1, r3
 800c752:	1ad3      	subs	r3, r2, r3
 800c754:	011b      	lsls	r3, r3, #4
 800c756:	3332      	adds	r3, #50	; 0x32
 800c758:	4a08      	ldr	r2, [pc, #32]	; (800c77c <UART_SetConfig+0x4e4>)
 800c75a:	fba2 2303 	umull	r2, r3, r2, r3
 800c75e:	095b      	lsrs	r3, r3, #5
 800c760:	f003 020f 	and.w	r2, r3, #15
 800c764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4422      	add	r2, r4
 800c76c:	609a      	str	r2, [r3, #8]
}
 800c76e:	bf00      	nop
 800c770:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c774:	46bd      	mov	sp, r7
 800c776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c77a:	bf00      	nop
 800c77c:	51eb851f 	.word	0x51eb851f

0800c780 <arm_sin_f32>:
 800c780:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800c7fc <arm_sin_f32+0x7c>
 800c784:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c788:	ee20 7a07 	vmul.f32	s14, s0, s14
 800c78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c790:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800c794:	d42c      	bmi.n	800c7f0 <arm_sin_f32+0x70>
 800c796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c79a:	eddf 6a19 	vldr	s13, [pc, #100]	; 800c800 <arm_sin_f32+0x80>
 800c79e:	4a19      	ldr	r2, [pc, #100]	; (800c804 <arm_sin_f32+0x84>)
 800c7a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c7a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c7ac:	eef4 7ae6 	vcmpe.f32	s15, s13
 800c7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7b4:	bfa8      	it	ge
 800c7b6:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800c7ba:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800c7be:	ee17 3a10 	vmov	r3, s14
 800c7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7c6:	ee07 3a10 	vmov	s14, r3
 800c7ca:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800c7ce:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800c7d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7d6:	edd1 6a01 	vldr	s13, [r1, #4]
 800c7da:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c7de:	ed91 0a00 	vldr	s0, [r1]
 800c7e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c7e6:	ee27 0a00 	vmul.f32	s0, s14, s0
 800c7ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c7ee:	4770      	bx	lr
 800c7f0:	ee17 3a90 	vmov	r3, s15
 800c7f4:	3b01      	subs	r3, #1
 800c7f6:	ee07 3a90 	vmov	s15, r3
 800c7fa:	e7cc      	b.n	800c796 <arm_sin_f32+0x16>
 800c7fc:	3e22f983 	.word	0x3e22f983
 800c800:	44000000 	.word	0x44000000
 800c804:	0800e21c 	.word	0x0800e21c

0800c808 <atoi>:
 800c808:	220a      	movs	r2, #10
 800c80a:	2100      	movs	r1, #0
 800c80c:	f000 b8d6 	b.w	800c9bc <strtol>

0800c810 <__errno>:
 800c810:	4b01      	ldr	r3, [pc, #4]	; (800c818 <__errno+0x8>)
 800c812:	6818      	ldr	r0, [r3, #0]
 800c814:	4770      	bx	lr
 800c816:	bf00      	nop
 800c818:	20008474 	.word	0x20008474

0800c81c <__libc_init_array>:
 800c81c:	b570      	push	{r4, r5, r6, lr}
 800c81e:	4d0d      	ldr	r5, [pc, #52]	; (800c854 <__libc_init_array+0x38>)
 800c820:	4c0d      	ldr	r4, [pc, #52]	; (800c858 <__libc_init_array+0x3c>)
 800c822:	1b64      	subs	r4, r4, r5
 800c824:	10a4      	asrs	r4, r4, #2
 800c826:	2600      	movs	r6, #0
 800c828:	42a6      	cmp	r6, r4
 800c82a:	d109      	bne.n	800c840 <__libc_init_array+0x24>
 800c82c:	4d0b      	ldr	r5, [pc, #44]	; (800c85c <__libc_init_array+0x40>)
 800c82e:	4c0c      	ldr	r4, [pc, #48]	; (800c860 <__libc_init_array+0x44>)
 800c830:	f000 f8ce 	bl	800c9d0 <_init>
 800c834:	1b64      	subs	r4, r4, r5
 800c836:	10a4      	asrs	r4, r4, #2
 800c838:	2600      	movs	r6, #0
 800c83a:	42a6      	cmp	r6, r4
 800c83c:	d105      	bne.n	800c84a <__libc_init_array+0x2e>
 800c83e:	bd70      	pop	{r4, r5, r6, pc}
 800c840:	f855 3b04 	ldr.w	r3, [r5], #4
 800c844:	4798      	blx	r3
 800c846:	3601      	adds	r6, #1
 800c848:	e7ee      	b.n	800c828 <__libc_init_array+0xc>
 800c84a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c84e:	4798      	blx	r3
 800c850:	3601      	adds	r6, #1
 800c852:	e7f2      	b.n	800c83a <__libc_init_array+0x1e>
 800c854:	0800eb2c 	.word	0x0800eb2c
 800c858:	0800eb2c 	.word	0x0800eb2c
 800c85c:	0800eb2c 	.word	0x0800eb2c
 800c860:	0800eb30 	.word	0x0800eb30

0800c864 <memcpy>:
 800c864:	440a      	add	r2, r1
 800c866:	4291      	cmp	r1, r2
 800c868:	f100 33ff 	add.w	r3, r0, #4294967295
 800c86c:	d100      	bne.n	800c870 <memcpy+0xc>
 800c86e:	4770      	bx	lr
 800c870:	b510      	push	{r4, lr}
 800c872:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c876:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c87a:	4291      	cmp	r1, r2
 800c87c:	d1f9      	bne.n	800c872 <memcpy+0xe>
 800c87e:	bd10      	pop	{r4, pc}

0800c880 <memset>:
 800c880:	4402      	add	r2, r0
 800c882:	4603      	mov	r3, r0
 800c884:	4293      	cmp	r3, r2
 800c886:	d100      	bne.n	800c88a <memset+0xa>
 800c888:	4770      	bx	lr
 800c88a:	f803 1b01 	strb.w	r1, [r3], #1
 800c88e:	e7f9      	b.n	800c884 <memset+0x4>

0800c890 <strncmp>:
 800c890:	b510      	push	{r4, lr}
 800c892:	b17a      	cbz	r2, 800c8b4 <strncmp+0x24>
 800c894:	4603      	mov	r3, r0
 800c896:	3901      	subs	r1, #1
 800c898:	1884      	adds	r4, r0, r2
 800c89a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c89e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c8a2:	4290      	cmp	r0, r2
 800c8a4:	d101      	bne.n	800c8aa <strncmp+0x1a>
 800c8a6:	42a3      	cmp	r3, r4
 800c8a8:	d101      	bne.n	800c8ae <strncmp+0x1e>
 800c8aa:	1a80      	subs	r0, r0, r2
 800c8ac:	bd10      	pop	{r4, pc}
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	d1f3      	bne.n	800c89a <strncmp+0xa>
 800c8b2:	e7fa      	b.n	800c8aa <strncmp+0x1a>
 800c8b4:	4610      	mov	r0, r2
 800c8b6:	e7f9      	b.n	800c8ac <strncmp+0x1c>

0800c8b8 <_strtol_l.constprop.0>:
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8be:	d001      	beq.n	800c8c4 <_strtol_l.constprop.0+0xc>
 800c8c0:	2b24      	cmp	r3, #36	; 0x24
 800c8c2:	d906      	bls.n	800c8d2 <_strtol_l.constprop.0+0x1a>
 800c8c4:	f7ff ffa4 	bl	800c810 <__errno>
 800c8c8:	2316      	movs	r3, #22
 800c8ca:	6003      	str	r3, [r0, #0]
 800c8cc:	2000      	movs	r0, #0
 800c8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c9b8 <_strtol_l.constprop.0+0x100>
 800c8d6:	460d      	mov	r5, r1
 800c8d8:	462e      	mov	r6, r5
 800c8da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c8de:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c8e2:	f017 0708 	ands.w	r7, r7, #8
 800c8e6:	d1f7      	bne.n	800c8d8 <_strtol_l.constprop.0+0x20>
 800c8e8:	2c2d      	cmp	r4, #45	; 0x2d
 800c8ea:	d132      	bne.n	800c952 <_strtol_l.constprop.0+0x9a>
 800c8ec:	782c      	ldrb	r4, [r5, #0]
 800c8ee:	2701      	movs	r7, #1
 800c8f0:	1cb5      	adds	r5, r6, #2
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d05b      	beq.n	800c9ae <_strtol_l.constprop.0+0xf6>
 800c8f6:	2b10      	cmp	r3, #16
 800c8f8:	d109      	bne.n	800c90e <_strtol_l.constprop.0+0x56>
 800c8fa:	2c30      	cmp	r4, #48	; 0x30
 800c8fc:	d107      	bne.n	800c90e <_strtol_l.constprop.0+0x56>
 800c8fe:	782c      	ldrb	r4, [r5, #0]
 800c900:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c904:	2c58      	cmp	r4, #88	; 0x58
 800c906:	d14d      	bne.n	800c9a4 <_strtol_l.constprop.0+0xec>
 800c908:	786c      	ldrb	r4, [r5, #1]
 800c90a:	2310      	movs	r3, #16
 800c90c:	3502      	adds	r5, #2
 800c90e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c912:	f108 38ff 	add.w	r8, r8, #4294967295
 800c916:	f04f 0c00 	mov.w	ip, #0
 800c91a:	fbb8 f9f3 	udiv	r9, r8, r3
 800c91e:	4666      	mov	r6, ip
 800c920:	fb03 8a19 	mls	sl, r3, r9, r8
 800c924:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c928:	f1be 0f09 	cmp.w	lr, #9
 800c92c:	d816      	bhi.n	800c95c <_strtol_l.constprop.0+0xa4>
 800c92e:	4674      	mov	r4, lr
 800c930:	42a3      	cmp	r3, r4
 800c932:	dd24      	ble.n	800c97e <_strtol_l.constprop.0+0xc6>
 800c934:	f1bc 0f00 	cmp.w	ip, #0
 800c938:	db1e      	blt.n	800c978 <_strtol_l.constprop.0+0xc0>
 800c93a:	45b1      	cmp	r9, r6
 800c93c:	d31c      	bcc.n	800c978 <_strtol_l.constprop.0+0xc0>
 800c93e:	d101      	bne.n	800c944 <_strtol_l.constprop.0+0x8c>
 800c940:	45a2      	cmp	sl, r4
 800c942:	db19      	blt.n	800c978 <_strtol_l.constprop.0+0xc0>
 800c944:	fb06 4603 	mla	r6, r6, r3, r4
 800c948:	f04f 0c01 	mov.w	ip, #1
 800c94c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c950:	e7e8      	b.n	800c924 <_strtol_l.constprop.0+0x6c>
 800c952:	2c2b      	cmp	r4, #43	; 0x2b
 800c954:	bf04      	itt	eq
 800c956:	782c      	ldrbeq	r4, [r5, #0]
 800c958:	1cb5      	addeq	r5, r6, #2
 800c95a:	e7ca      	b.n	800c8f2 <_strtol_l.constprop.0+0x3a>
 800c95c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c960:	f1be 0f19 	cmp.w	lr, #25
 800c964:	d801      	bhi.n	800c96a <_strtol_l.constprop.0+0xb2>
 800c966:	3c37      	subs	r4, #55	; 0x37
 800c968:	e7e2      	b.n	800c930 <_strtol_l.constprop.0+0x78>
 800c96a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c96e:	f1be 0f19 	cmp.w	lr, #25
 800c972:	d804      	bhi.n	800c97e <_strtol_l.constprop.0+0xc6>
 800c974:	3c57      	subs	r4, #87	; 0x57
 800c976:	e7db      	b.n	800c930 <_strtol_l.constprop.0+0x78>
 800c978:	f04f 3cff 	mov.w	ip, #4294967295
 800c97c:	e7e6      	b.n	800c94c <_strtol_l.constprop.0+0x94>
 800c97e:	f1bc 0f00 	cmp.w	ip, #0
 800c982:	da05      	bge.n	800c990 <_strtol_l.constprop.0+0xd8>
 800c984:	2322      	movs	r3, #34	; 0x22
 800c986:	6003      	str	r3, [r0, #0]
 800c988:	4646      	mov	r6, r8
 800c98a:	b942      	cbnz	r2, 800c99e <_strtol_l.constprop.0+0xe6>
 800c98c:	4630      	mov	r0, r6
 800c98e:	e79e      	b.n	800c8ce <_strtol_l.constprop.0+0x16>
 800c990:	b107      	cbz	r7, 800c994 <_strtol_l.constprop.0+0xdc>
 800c992:	4276      	negs	r6, r6
 800c994:	2a00      	cmp	r2, #0
 800c996:	d0f9      	beq.n	800c98c <_strtol_l.constprop.0+0xd4>
 800c998:	f1bc 0f00 	cmp.w	ip, #0
 800c99c:	d000      	beq.n	800c9a0 <_strtol_l.constprop.0+0xe8>
 800c99e:	1e69      	subs	r1, r5, #1
 800c9a0:	6011      	str	r1, [r2, #0]
 800c9a2:	e7f3      	b.n	800c98c <_strtol_l.constprop.0+0xd4>
 800c9a4:	2430      	movs	r4, #48	; 0x30
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d1b1      	bne.n	800c90e <_strtol_l.constprop.0+0x56>
 800c9aa:	2308      	movs	r3, #8
 800c9ac:	e7af      	b.n	800c90e <_strtol_l.constprop.0+0x56>
 800c9ae:	2c30      	cmp	r4, #48	; 0x30
 800c9b0:	d0a5      	beq.n	800c8fe <_strtol_l.constprop.0+0x46>
 800c9b2:	230a      	movs	r3, #10
 800c9b4:	e7ab      	b.n	800c90e <_strtol_l.constprop.0+0x56>
 800c9b6:	bf00      	nop
 800c9b8:	0800ea21 	.word	0x0800ea21

0800c9bc <strtol>:
 800c9bc:	4613      	mov	r3, r2
 800c9be:	460a      	mov	r2, r1
 800c9c0:	4601      	mov	r1, r0
 800c9c2:	4802      	ldr	r0, [pc, #8]	; (800c9cc <strtol+0x10>)
 800c9c4:	6800      	ldr	r0, [r0, #0]
 800c9c6:	f7ff bf77 	b.w	800c8b8 <_strtol_l.constprop.0>
 800c9ca:	bf00      	nop
 800c9cc:	20008474 	.word	0x20008474

0800c9d0 <_init>:
 800c9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9d2:	bf00      	nop
 800c9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9d6:	bc08      	pop	{r3}
 800c9d8:	469e      	mov	lr, r3
 800c9da:	4770      	bx	lr

0800c9dc <_fini>:
 800c9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9de:	bf00      	nop
 800c9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9e2:	bc08      	pop	{r3}
 800c9e4:	469e      	mov	lr, r3
 800c9e6:	4770      	bx	lr
