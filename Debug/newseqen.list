
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1b4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b14  0800a34c  0800a34c  0001a34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be60  0800be60  000203f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800be60  0800be60  0001be60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be68  0800be68  000203f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be68  0800be68  0001be68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be6c  0800be6c  0001be6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003f8  20000000  0800be70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f9c  200003f8  0800c268  000203f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006394  0800c268  00026394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013957  00000000  00000000  00020428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a4  00000000  00000000  00033d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00036228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  00037380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001881d  00000000  00000000  000383d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015080  00000000  00000000  00050bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ed18  00000000  00000000  00065c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00104985  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c24  00000000  00000000  00104a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  0010966c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200003f8 	.word	0x200003f8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a334 	.word	0x0800a334

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200003fc 	.word	0x200003fc
 80001d4:	0800a334 	.word	0x0800a334

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2f>:
 80007b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007bc:	bf24      	itt	cs
 80007be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007c6:	d90d      	bls.n	80007e4 <__aeabi_d2f+0x30>
 80007c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007dc:	bf08      	it	eq
 80007de:	f020 0001 	biceq.w	r0, r0, #1
 80007e2:	4770      	bx	lr
 80007e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007e8:	d121      	bne.n	800082e <__aeabi_d2f+0x7a>
 80007ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ee:	bfbc      	itt	lt
 80007f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007f4:	4770      	bxlt	lr
 80007f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007fe:	f1c2 0218 	rsb	r2, r2, #24
 8000802:	f1c2 0c20 	rsb	ip, r2, #32
 8000806:	fa10 f30c 	lsls.w	r3, r0, ip
 800080a:	fa20 f002 	lsr.w	r0, r0, r2
 800080e:	bf18      	it	ne
 8000810:	f040 0001 	orrne.w	r0, r0, #1
 8000814:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000818:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800081c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000820:	ea40 000c 	orr.w	r0, r0, ip
 8000824:	fa23 f302 	lsr.w	r3, r3, r2
 8000828:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800082c:	e7cc      	b.n	80007c8 <__aeabi_d2f+0x14>
 800082e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000832:	d107      	bne.n	8000844 <__aeabi_d2f+0x90>
 8000834:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000838:	bf1e      	ittt	ne
 800083a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800083e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000842:	4770      	bxne	lr
 8000844:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000848:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800084c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b974 	b.w	8000b54 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468e      	mov	lr, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	d14d      	bne.n	800092e <__udivmoddi4+0xaa>
 8000892:	428a      	cmp	r2, r1
 8000894:	4694      	mov	ip, r2
 8000896:	d969      	bls.n	800096c <__udivmoddi4+0xe8>
 8000898:	fab2 f282 	clz	r2, r2
 800089c:	b152      	cbz	r2, 80008b4 <__udivmoddi4+0x30>
 800089e:	fa01 f302 	lsl.w	r3, r1, r2
 80008a2:	f1c2 0120 	rsb	r1, r2, #32
 80008a6:	fa20 f101 	lsr.w	r1, r0, r1
 80008aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ae:	ea41 0e03 	orr.w	lr, r1, r3
 80008b2:	4094      	lsls	r4, r2
 80008b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b8:	0c21      	lsrs	r1, r4, #16
 80008ba:	fbbe f6f8 	udiv	r6, lr, r8
 80008be:	fa1f f78c 	uxth.w	r7, ip
 80008c2:	fb08 e316 	mls	r3, r8, r6, lr
 80008c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ca:	fb06 f107 	mul.w	r1, r6, r7
 80008ce:	4299      	cmp	r1, r3
 80008d0:	d90a      	bls.n	80008e8 <__udivmoddi4+0x64>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008da:	f080 811f 	bcs.w	8000b1c <__udivmoddi4+0x298>
 80008de:	4299      	cmp	r1, r3
 80008e0:	f240 811c 	bls.w	8000b1c <__udivmoddi4+0x298>
 80008e4:	3e02      	subs	r6, #2
 80008e6:	4463      	add	r3, ip
 80008e8:	1a5b      	subs	r3, r3, r1
 80008ea:	b2a4      	uxth	r4, r4
 80008ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f0:	fb08 3310 	mls	r3, r8, r0, r3
 80008f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f8:	fb00 f707 	mul.w	r7, r0, r7
 80008fc:	42a7      	cmp	r7, r4
 80008fe:	d90a      	bls.n	8000916 <__udivmoddi4+0x92>
 8000900:	eb1c 0404 	adds.w	r4, ip, r4
 8000904:	f100 33ff 	add.w	r3, r0, #4294967295
 8000908:	f080 810a 	bcs.w	8000b20 <__udivmoddi4+0x29c>
 800090c:	42a7      	cmp	r7, r4
 800090e:	f240 8107 	bls.w	8000b20 <__udivmoddi4+0x29c>
 8000912:	4464      	add	r4, ip
 8000914:	3802      	subs	r0, #2
 8000916:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800091a:	1be4      	subs	r4, r4, r7
 800091c:	2600      	movs	r6, #0
 800091e:	b11d      	cbz	r5, 8000928 <__udivmoddi4+0xa4>
 8000920:	40d4      	lsrs	r4, r2
 8000922:	2300      	movs	r3, #0
 8000924:	e9c5 4300 	strd	r4, r3, [r5]
 8000928:	4631      	mov	r1, r6
 800092a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092e:	428b      	cmp	r3, r1
 8000930:	d909      	bls.n	8000946 <__udivmoddi4+0xc2>
 8000932:	2d00      	cmp	r5, #0
 8000934:	f000 80ef 	beq.w	8000b16 <__udivmoddi4+0x292>
 8000938:	2600      	movs	r6, #0
 800093a:	e9c5 0100 	strd	r0, r1, [r5]
 800093e:	4630      	mov	r0, r6
 8000940:	4631      	mov	r1, r6
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000946:	fab3 f683 	clz	r6, r3
 800094a:	2e00      	cmp	r6, #0
 800094c:	d14a      	bne.n	80009e4 <__udivmoddi4+0x160>
 800094e:	428b      	cmp	r3, r1
 8000950:	d302      	bcc.n	8000958 <__udivmoddi4+0xd4>
 8000952:	4282      	cmp	r2, r0
 8000954:	f200 80f9 	bhi.w	8000b4a <__udivmoddi4+0x2c6>
 8000958:	1a84      	subs	r4, r0, r2
 800095a:	eb61 0303 	sbc.w	r3, r1, r3
 800095e:	2001      	movs	r0, #1
 8000960:	469e      	mov	lr, r3
 8000962:	2d00      	cmp	r5, #0
 8000964:	d0e0      	beq.n	8000928 <__udivmoddi4+0xa4>
 8000966:	e9c5 4e00 	strd	r4, lr, [r5]
 800096a:	e7dd      	b.n	8000928 <__udivmoddi4+0xa4>
 800096c:	b902      	cbnz	r2, 8000970 <__udivmoddi4+0xec>
 800096e:	deff      	udf	#255	; 0xff
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	2a00      	cmp	r2, #0
 8000976:	f040 8092 	bne.w	8000a9e <__udivmoddi4+0x21a>
 800097a:	eba1 010c 	sub.w	r1, r1, ip
 800097e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000982:	fa1f fe8c 	uxth.w	lr, ip
 8000986:	2601      	movs	r6, #1
 8000988:	0c20      	lsrs	r0, r4, #16
 800098a:	fbb1 f3f7 	udiv	r3, r1, r7
 800098e:	fb07 1113 	mls	r1, r7, r3, r1
 8000992:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000996:	fb0e f003 	mul.w	r0, lr, r3
 800099a:	4288      	cmp	r0, r1
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x12c>
 800099e:	eb1c 0101 	adds.w	r1, ip, r1
 80009a2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x12a>
 80009a8:	4288      	cmp	r0, r1
 80009aa:	f200 80cb 	bhi.w	8000b44 <__udivmoddi4+0x2c0>
 80009ae:	4643      	mov	r3, r8
 80009b0:	1a09      	subs	r1, r1, r0
 80009b2:	b2a4      	uxth	r4, r4
 80009b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009b8:	fb07 1110 	mls	r1, r7, r0, r1
 80009bc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009c0:	fb0e fe00 	mul.w	lr, lr, r0
 80009c4:	45a6      	cmp	lr, r4
 80009c6:	d908      	bls.n	80009da <__udivmoddi4+0x156>
 80009c8:	eb1c 0404 	adds.w	r4, ip, r4
 80009cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80009d0:	d202      	bcs.n	80009d8 <__udivmoddi4+0x154>
 80009d2:	45a6      	cmp	lr, r4
 80009d4:	f200 80bb 	bhi.w	8000b4e <__udivmoddi4+0x2ca>
 80009d8:	4608      	mov	r0, r1
 80009da:	eba4 040e 	sub.w	r4, r4, lr
 80009de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009e2:	e79c      	b.n	800091e <__udivmoddi4+0x9a>
 80009e4:	f1c6 0720 	rsb	r7, r6, #32
 80009e8:	40b3      	lsls	r3, r6
 80009ea:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80009f2:	fa20 f407 	lsr.w	r4, r0, r7
 80009f6:	fa01 f306 	lsl.w	r3, r1, r6
 80009fa:	431c      	orrs	r4, r3
 80009fc:	40f9      	lsrs	r1, r7
 80009fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a02:	fa00 f306 	lsl.w	r3, r0, r6
 8000a06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a0a:	0c20      	lsrs	r0, r4, #16
 8000a0c:	fa1f fe8c 	uxth.w	lr, ip
 8000a10:	fb09 1118 	mls	r1, r9, r8, r1
 8000a14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a18:	fb08 f00e 	mul.w	r0, r8, lr
 8000a1c:	4288      	cmp	r0, r1
 8000a1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a22:	d90b      	bls.n	8000a3c <__udivmoddi4+0x1b8>
 8000a24:	eb1c 0101 	adds.w	r1, ip, r1
 8000a28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a2c:	f080 8088 	bcs.w	8000b40 <__udivmoddi4+0x2bc>
 8000a30:	4288      	cmp	r0, r1
 8000a32:	f240 8085 	bls.w	8000b40 <__udivmoddi4+0x2bc>
 8000a36:	f1a8 0802 	sub.w	r8, r8, #2
 8000a3a:	4461      	add	r1, ip
 8000a3c:	1a09      	subs	r1, r1, r0
 8000a3e:	b2a4      	uxth	r4, r4
 8000a40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a44:	fb09 1110 	mls	r1, r9, r0, r1
 8000a48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a50:	458e      	cmp	lr, r1
 8000a52:	d908      	bls.n	8000a66 <__udivmoddi4+0x1e2>
 8000a54:	eb1c 0101 	adds.w	r1, ip, r1
 8000a58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a5c:	d26c      	bcs.n	8000b38 <__udivmoddi4+0x2b4>
 8000a5e:	458e      	cmp	lr, r1
 8000a60:	d96a      	bls.n	8000b38 <__udivmoddi4+0x2b4>
 8000a62:	3802      	subs	r0, #2
 8000a64:	4461      	add	r1, ip
 8000a66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a6e:	eba1 010e 	sub.w	r1, r1, lr
 8000a72:	42a1      	cmp	r1, r4
 8000a74:	46c8      	mov	r8, r9
 8000a76:	46a6      	mov	lr, r4
 8000a78:	d356      	bcc.n	8000b28 <__udivmoddi4+0x2a4>
 8000a7a:	d053      	beq.n	8000b24 <__udivmoddi4+0x2a0>
 8000a7c:	b15d      	cbz	r5, 8000a96 <__udivmoddi4+0x212>
 8000a7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a82:	eb61 010e 	sbc.w	r1, r1, lr
 8000a86:	fa01 f707 	lsl.w	r7, r1, r7
 8000a8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a8e:	40f1      	lsrs	r1, r6
 8000a90:	431f      	orrs	r7, r3
 8000a92:	e9c5 7100 	strd	r7, r1, [r5]
 8000a96:	2600      	movs	r6, #0
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	40d8      	lsrs	r0, r3
 8000aa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aac:	4091      	lsls	r1, r2
 8000aae:	4301      	orrs	r1, r0
 8000ab0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab4:	fa1f fe8c 	uxth.w	lr, ip
 8000ab8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000abc:	fb07 3610 	mls	r6, r7, r0, r3
 8000ac0:	0c0b      	lsrs	r3, r1, #16
 8000ac2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ac6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aca:	429e      	cmp	r6, r3
 8000acc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ad0:	d908      	bls.n	8000ae4 <__udivmoddi4+0x260>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ada:	d22f      	bcs.n	8000b3c <__udivmoddi4+0x2b8>
 8000adc:	429e      	cmp	r6, r3
 8000ade:	d92d      	bls.n	8000b3c <__udivmoddi4+0x2b8>
 8000ae0:	3802      	subs	r0, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	1b9b      	subs	r3, r3, r6
 8000ae6:	b289      	uxth	r1, r1
 8000ae8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000aec:	fb07 3316 	mls	r3, r7, r6, r3
 8000af0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000af4:	fb06 f30e 	mul.w	r3, r6, lr
 8000af8:	428b      	cmp	r3, r1
 8000afa:	d908      	bls.n	8000b0e <__udivmoddi4+0x28a>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b04:	d216      	bcs.n	8000b34 <__udivmoddi4+0x2b0>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d914      	bls.n	8000b34 <__udivmoddi4+0x2b0>
 8000b0a:	3e02      	subs	r6, #2
 8000b0c:	4461      	add	r1, ip
 8000b0e:	1ac9      	subs	r1, r1, r3
 8000b10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b14:	e738      	b.n	8000988 <__udivmoddi4+0x104>
 8000b16:	462e      	mov	r6, r5
 8000b18:	4628      	mov	r0, r5
 8000b1a:	e705      	b.n	8000928 <__udivmoddi4+0xa4>
 8000b1c:	4606      	mov	r6, r0
 8000b1e:	e6e3      	b.n	80008e8 <__udivmoddi4+0x64>
 8000b20:	4618      	mov	r0, r3
 8000b22:	e6f8      	b.n	8000916 <__udivmoddi4+0x92>
 8000b24:	454b      	cmp	r3, r9
 8000b26:	d2a9      	bcs.n	8000a7c <__udivmoddi4+0x1f8>
 8000b28:	ebb9 0802 	subs.w	r8, r9, r2
 8000b2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b30:	3801      	subs	r0, #1
 8000b32:	e7a3      	b.n	8000a7c <__udivmoddi4+0x1f8>
 8000b34:	4646      	mov	r6, r8
 8000b36:	e7ea      	b.n	8000b0e <__udivmoddi4+0x28a>
 8000b38:	4620      	mov	r0, r4
 8000b3a:	e794      	b.n	8000a66 <__udivmoddi4+0x1e2>
 8000b3c:	4640      	mov	r0, r8
 8000b3e:	e7d1      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b40:	46d0      	mov	r8, sl
 8000b42:	e77b      	b.n	8000a3c <__udivmoddi4+0x1b8>
 8000b44:	3b02      	subs	r3, #2
 8000b46:	4461      	add	r1, ip
 8000b48:	e732      	b.n	80009b0 <__udivmoddi4+0x12c>
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e709      	b.n	8000962 <__udivmoddi4+0xde>
 8000b4e:	4464      	add	r4, ip
 8000b50:	3802      	subs	r0, #2
 8000b52:	e742      	b.n	80009da <__udivmoddi4+0x156>

08000b54 <__aeabi_idiv0>:
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]


	char menu_string2[8];
	var_index=var_index&15;    //set var index ie  LFO[1].rate
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	70fb      	strb	r3, [r7, #3]
	uint8_t menu_countr=0; //  menu vars
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	75fb      	strb	r3, [r7, #23]
	uint8_t *menu_vars_var1=NULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]

	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000b74:	4bb5      	ldr	r3, [pc, #724]	; (8000e4c <menu_vars+0x2f4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	801a      	strh	r2, [r3, #0]
 8000b7a:	e01d      	b.n	8000bb8 <menu_vars+0x60>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000b7c:	4bb3      	ldr	r3, [pc, #716]	; (8000e4c <menu_vars+0x2f4>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4bb3      	ldr	r3, [pc, #716]	; (8000e50 <menu_vars+0x2f8>)
 8000b84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	6810      	ldr	r0, [r2, #0]
 8000b8e:	6851      	ldr	r1, [r2, #4]
 8000b90:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2208      	movs	r2, #8
 8000b98:	4619      	mov	r1, r3
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f009 fb2a 	bl	800a1f4 <strncmp>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <menu_vars+0x54>
			menu_countr = i;
 8000ba6:	4ba9      	ldr	r3, [pc, #676]	; (8000e4c <menu_vars+0x2f4>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000bac:	4ba7      	ldr	r3, [pc, #668]	; (8000e4c <menu_vars+0x2f4>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4ba5      	ldr	r3, [pc, #660]	; (8000e4c <menu_vars+0x2f4>)
 8000bb6:	801a      	strh	r2, [r3, #0]
 8000bb8:	4ba4      	ldr	r3, [pc, #656]	; (8000e4c <menu_vars+0x2f4>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	2b27      	cmp	r3, #39	; 0x27
 8000bbe:	d9dd      	bls.n	8000b7c <menu_vars+0x24>

		}
	}

	if (var_index>menu_vars_index_limit[menu_countr]) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000bc0:	7dfb      	ldrb	r3, [r7, #23]
 8000bc2:	4aa4      	ldr	r2, [pc, #656]	; (8000e54 <menu_vars+0x2fc>)
 8000bc4:	5cd3      	ldrb	r3, [r2, r3]
 8000bc6:	78fa      	ldrb	r2, [r7, #3]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d903      	bls.n	8000bd4 <menu_vars+0x7c>
 8000bcc:	7dfb      	ldrb	r3, [r7, #23]
 8000bce:	4aa1      	ldr	r2, [pc, #644]	; (8000e54 <menu_vars+0x2fc>)
 8000bd0:	5cd3      	ldrb	r3, [r2, r3]
 8000bd2:	70fb      	strb	r3, [r7, #3]

	switch(menu_countr){
 8000bd4:	7dfb      	ldrb	r3, [r7, #23]
 8000bd6:	2b27      	cmp	r3, #39	; 0x27
 8000bd8:	f200 81a7 	bhi.w	8000f2a <menu_vars+0x3d2>
 8000bdc:	a201      	add	r2, pc, #4	; (adr r2, 8000be4 <menu_vars+0x8c>)
 8000bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be2:	bf00      	nop
 8000be4:	08000c85 	.word	0x08000c85
 8000be8:	08000c8b 	.word	0x08000c8b
 8000bec:	08000c9d 	.word	0x08000c9d
 8000bf0:	08000cb1 	.word	0x08000cb1
 8000bf4:	08000cc5 	.word	0x08000cc5
 8000bf8:	08000cd9 	.word	0x08000cd9
 8000bfc:	08000ced 	.word	0x08000ced
 8000c00:	08000cf3 	.word	0x08000cf3
 8000c04:	08000d05 	.word	0x08000d05
 8000c08:	08000d19 	.word	0x08000d19
 8000c0c:	08000d2d 	.word	0x08000d2d
 8000c10:	08000d41 	.word	0x08000d41
 8000c14:	08000d47 	.word	0x08000d47
 8000c18:	08000d59 	.word	0x08000d59
 8000c1c:	08000d6d 	.word	0x08000d6d
 8000c20:	08000d81 	.word	0x08000d81
 8000c24:	08000d95 	.word	0x08000d95
 8000c28:	08000da9 	.word	0x08000da9
 8000c2c:	08000dbd 	.word	0x08000dbd
 8000c30:	08000dd1 	.word	0x08000dd1
 8000c34:	08000de5 	.word	0x08000de5
 8000c38:	08000df9 	.word	0x08000df9
 8000c3c:	08000dff 	.word	0x08000dff
 8000c40:	08000e05 	.word	0x08000e05
 8000c44:	08000e0b 	.word	0x08000e0b
 8000c48:	08000e17 	.word	0x08000e17
 8000c4c:	08000e25 	.word	0x08000e25
 8000c50:	08000e33 	.word	0x08000e33
 8000c54:	08000e3f 	.word	0x08000e3f
 8000c58:	08000e75 	.word	0x08000e75
 8000c5c:	08000e83 	.word	0x08000e83
 8000c60:	08000e91 	.word	0x08000e91
 8000c64:	08000e9f 	.word	0x08000e9f
 8000c68:	08000ead 	.word	0x08000ead
 8000c6c:	08000ebb 	.word	0x08000ebb
 8000c70:	08000ec9 	.word	0x08000ec9
 8000c74:	08000edd 	.word	0x08000edd
 8000c78:	08000eef 	.word	0x08000eef
 8000c7c:	08000f03 	.word	0x08000f03
 8000c80:	08000f17 	.word	0x08000f17
	case 0:     menu_vars_var1= NULL; break;
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	e152      	b.n	8000f30 <menu_vars+0x3d8>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000c8a:	78fa      	ldrb	r2, [r7, #3]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	011b      	lsls	r3, r3, #4
 8000c90:	4413      	add	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4a70      	ldr	r2, [pc, #448]	; (8000e58 <menu_vars+0x300>)
 8000c96:	4413      	add	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	e149      	b.n	8000f30 <menu_vars+0x3d8>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000c9c:	78fa      	ldrb	r2, [r7, #3]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	011b      	lsls	r3, r3, #4
 8000ca2:	4413      	add	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4a6c      	ldr	r2, [pc, #432]	; (8000e58 <menu_vars+0x300>)
 8000ca8:	4413      	add	r3, r2
 8000caa:	3301      	adds	r3, #1
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	e13f      	b.n	8000f30 <menu_vars+0x3d8>
	case 3:     menu_vars_var1= &LFO[var_index].gain    ; break;
 8000cb0:	78fa      	ldrb	r2, [r7, #3]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	011b      	lsls	r3, r3, #4
 8000cb6:	4413      	add	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4a67      	ldr	r2, [pc, #412]	; (8000e58 <menu_vars+0x300>)
 8000cbc:	4413      	add	r3, r2
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	e135      	b.n	8000f30 <menu_vars+0x3d8>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000cc4:	78fa      	ldrb	r2, [r7, #3]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	4413      	add	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4a62      	ldr	r2, [pc, #392]	; (8000e58 <menu_vars+0x300>)
 8000cd0:	4413      	add	r3, r2
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	e12b      	b.n	8000f30 <menu_vars+0x3d8>
	case 5:     menu_vars_var1= &patch[var_index].target    ; break;
 8000cd8:	78fa      	ldrb	r2, [r7, #3]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	4413      	add	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4a5e      	ldr	r2, [pc, #376]	; (8000e5c <menu_vars+0x304>)
 8000ce4:	4413      	add	r3, r2
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	e121      	b.n	8000f30 <menu_vars+0x3d8>
	case 6:     menu_vars_var1= NULL   ; break;
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	e11e      	b.n	8000f30 <menu_vars+0x3d8>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000cf2:	78fb      	ldrb	r3, [r7, #3]
 8000cf4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000cf8:	fb02 f303 	mul.w	r3, r2, r3
 8000cfc:	4a58      	ldr	r2, [pc, #352]	; (8000e60 <menu_vars+0x308>)
 8000cfe:	4413      	add	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	e115      	b.n	8000f30 <menu_vars+0x3d8>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000d04:	78fb      	ldrb	r3, [r7, #3]
 8000d06:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d0a:	fb02 f303 	mul.w	r3, r2, r3
 8000d0e:	4a54      	ldr	r2, [pc, #336]	; (8000e60 <menu_vars+0x308>)
 8000d10:	4413      	add	r3, r2
 8000d12:	3301      	adds	r3, #1
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	e10b      	b.n	8000f30 <menu_vars+0x3d8>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000d18:	78fb      	ldrb	r3, [r7, #3]
 8000d1a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d1e:	fb02 f303 	mul.w	r3, r2, r3
 8000d22:	4a4f      	ldr	r2, [pc, #316]	; (8000e60 <menu_vars+0x308>)
 8000d24:	4413      	add	r3, r2
 8000d26:	3302      	adds	r3, #2
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	e101      	b.n	8000f30 <menu_vars+0x3d8>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d32:	fb02 f303 	mul.w	r3, r2, r3
 8000d36:	4a4a      	ldr	r2, [pc, #296]	; (8000e60 <menu_vars+0x308>)
 8000d38:	4413      	add	r3, r2
 8000d3a:	3303      	adds	r3, #3
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	e0f7      	b.n	8000f30 <menu_vars+0x3d8>
	case 11:     menu_vars_var1= NULL  ; break;
 8000d40:	2300      	movs	r3, #0
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	e0f4      	b.n	8000f30 <menu_vars+0x3d8>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000d46:	78fa      	ldrb	r2, [r7, #3]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	1a9b      	subs	r3, r3, r2
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	4a44      	ldr	r2, [pc, #272]	; (8000e64 <menu_vars+0x30c>)
 8000d52:	4413      	add	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	e0eb      	b.n	8000f30 <menu_vars+0x3d8>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000d58:	78fa      	ldrb	r2, [r7, #3]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	1a9b      	subs	r3, r3, r2
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	4a40      	ldr	r2, [pc, #256]	; (8000e64 <menu_vars+0x30c>)
 8000d64:	4413      	add	r3, r2
 8000d66:	3301      	adds	r3, #1
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	e0e1      	b.n	8000f30 <menu_vars+0x3d8>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000d6c:	78fa      	ldrb	r2, [r7, #3]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	1a9b      	subs	r3, r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	4a3b      	ldr	r2, [pc, #236]	; (8000e64 <menu_vars+0x30c>)
 8000d78:	4413      	add	r3, r2
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	e0d7      	b.n	8000f30 <menu_vars+0x3d8>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000d80:	78fa      	ldrb	r2, [r7, #3]
 8000d82:	4613      	mov	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	4a36      	ldr	r2, [pc, #216]	; (8000e64 <menu_vars+0x30c>)
 8000d8c:	4413      	add	r3, r2
 8000d8e:	3303      	adds	r3, #3
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	e0cd      	b.n	8000f30 <menu_vars+0x3d8>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000d94:	78fa      	ldrb	r2, [r7, #3]
 8000d96:	4613      	mov	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	1a9b      	subs	r3, r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4a31      	ldr	r2, [pc, #196]	; (8000e64 <menu_vars+0x30c>)
 8000da0:	4413      	add	r3, r2
 8000da2:	3304      	adds	r3, #4
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	e0c3      	b.n	8000f30 <menu_vars+0x3d8>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000da8:	78fa      	ldrb	r2, [r7, #3]
 8000daa:	4613      	mov	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	1a9b      	subs	r3, r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4a2c      	ldr	r2, [pc, #176]	; (8000e64 <menu_vars+0x30c>)
 8000db4:	4413      	add	r3, r2
 8000db6:	3305      	adds	r3, #5
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	e0b9      	b.n	8000f30 <menu_vars+0x3d8>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000dbc:	78fa      	ldrb	r2, [r7, #3]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	1a9b      	subs	r3, r3, r2
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	4a27      	ldr	r2, [pc, #156]	; (8000e64 <menu_vars+0x30c>)
 8000dc8:	4413      	add	r3, r2
 8000dca:	3306      	adds	r3, #6
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	e0af      	b.n	8000f30 <menu_vars+0x3d8>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 8000dd0:	78fa      	ldrb	r2, [r7, #3]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <menu_vars+0x30c>)
 8000ddc:	4413      	add	r3, r2
 8000dde:	3307      	adds	r3, #7
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	e0a5      	b.n	8000f30 <menu_vars+0x3d8>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000de4:	78fa      	ldrb	r2, [r7, #3]
 8000de6:	4613      	mov	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	1a9b      	subs	r3, r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	3308      	adds	r3, #8
 8000df0:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <menu_vars+0x30c>)
 8000df2:	4413      	add	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	e09b      	b.n	8000f30 <menu_vars+0x3d8>
	case 21:     menu_vars_var1= NULL   ; break;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	e098      	b.n	8000f30 <menu_vars+0x3d8>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <menu_vars+0x310>)
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	e095      	b.n	8000f30 <menu_vars+0x3d8>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <menu_vars+0x314>)
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	e092      	b.n	8000f30 <menu_vars+0x3d8>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	4a16      	ldr	r2, [pc, #88]	; (8000e68 <menu_vars+0x310>)
 8000e0e:	4413      	add	r3, r2
 8000e10:	3302      	adds	r3, #2
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	e08c      	b.n	8000f30 <menu_vars+0x3d8>
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000e16:	78fb      	ldrb	r3, [r7, #3]
 8000e18:	3310      	adds	r3, #16
 8000e1a:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <menu_vars+0x310>)
 8000e1c:	4413      	add	r3, r2
 8000e1e:	3303      	adds	r3, #3
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	e085      	b.n	8000f30 <menu_vars+0x3d8>
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	3320      	adds	r3, #32
 8000e28:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <menu_vars+0x310>)
 8000e2a:	4413      	add	r3, r2
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	e07e      	b.n	8000f30 <menu_vars+0x3d8>
	case 27: 	menu_vars_var1=&filter[var_index].cutoff_1 ;break;
 8000e32:	78fb      	ldrb	r3, [r7, #3]
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <menu_vars+0x318>)
 8000e38:	4413      	add	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	e078      	b.n	8000f30 <menu_vars+0x3d8>
	case 28: 	menu_vars_var1=&filter[var_index].cutoff_2 ;break;  // fine tune
 8000e3e:	78fb      	ldrb	r3, [r7, #3]
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <menu_vars+0x318>)
 8000e44:	4413      	add	r3, r2
 8000e46:	3301      	adds	r3, #1
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	e071      	b.n	8000f30 <menu_vars+0x3d8>
 8000e4c:	20000750 	.word	0x20000750
 8000e50:	20000244 	.word	0x20000244
 8000e54:	0800ac0c 	.word	0x0800ac0c
 8000e58:	20002af4 	.word	0x20002af4
 8000e5c:	20003858 	.word	0x20003858
 8000e60:	20002d9c 	.word	0x20002d9c
 8000e64:	200001bc 	.word	0x200001bc
 8000e68:	20003828 	.word	0x20003828
 8000e6c:	20003829 	.word	0x20003829
 8000e70:	20000220 	.word	0x20000220
	case 29: 	menu_vars_var1=&filter[var_index].resonance ;break;
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	4a30      	ldr	r2, [pc, #192]	; (8000f3c <menu_vars+0x3e4>)
 8000e7a:	4413      	add	r3, r2
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	e056      	b.n	8000f30 <menu_vars+0x3d8>
	case 30: 	menu_vars_var1=&filter[var_index].q_level  ;break;
 8000e82:	78fb      	ldrb	r3, [r7, #3]
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4a2d      	ldr	r2, [pc, #180]	; (8000f3c <menu_vars+0x3e4>)
 8000e88:	4413      	add	r3, r2
 8000e8a:	3303      	adds	r3, #3
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	e04f      	b.n	8000f30 <menu_vars+0x3d8>
	case 31: 	menu_vars_var1=&filter[var_index].level;break;
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	4a29      	ldr	r2, [pc, #164]	; (8000f3c <menu_vars+0x3e4>)
 8000e96:	4413      	add	r3, r2
 8000e98:	3304      	adds	r3, #4
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	e048      	b.n	8000f30 <menu_vars+0x3d8>
	case 32: 	menu_vars_var1=&filter[var_index].feedback ;break;
 8000e9e:	78fb      	ldrb	r3, [r7, #3]
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4a26      	ldr	r2, [pc, #152]	; (8000f3c <menu_vars+0x3e4>)
 8000ea4:	4413      	add	r3, r2
 8000ea6:	3307      	adds	r3, #7
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	e041      	b.n	8000f30 <menu_vars+0x3d8>
	case 33: 	menu_vars_var1=&filter[var_index].out_mix ;break;
 8000eac:	78fb      	ldrb	r3, [r7, #3]
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <menu_vars+0x3e4>)
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3306      	adds	r3, #6
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	e03a      	b.n	8000f30 <menu_vars+0x3d8>
	case 34: 	menu_vars_var1=&filter[var_index].poles ;break;
 8000eba:	78fb      	ldrb	r3, [r7, #3]
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	4a1f      	ldr	r2, [pc, #124]	; (8000f3c <menu_vars+0x3e4>)
 8000ec0:	4413      	add	r3, r2
 8000ec2:	3305      	adds	r3, #5
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	e033      	b.n	8000f30 <menu_vars+0x3d8>
	case 35:     menu_vars_var1= &patch[var_index].target_index    ; break;
 8000ec8:	78fa      	ldrb	r2, [r7, #3]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	4413      	add	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4a1b      	ldr	r2, [pc, #108]	; (8000f40 <menu_vars+0x3e8>)
 8000ed4:	4413      	add	r3, r2
 8000ed6:	3305      	adds	r3, #5
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	e029      	b.n	8000f30 <menu_vars+0x3d8>
	case 36: 	menu_vars_var1=&patch[var_index].input1 ;break;
 8000edc:	78fa      	ldrb	r2, [r7, #3]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	4413      	add	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4a16      	ldr	r2, [pc, #88]	; (8000f40 <menu_vars+0x3e8>)
 8000ee8:	4413      	add	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	e020      	b.n	8000f30 <menu_vars+0x3d8>
	case 37: 	menu_vars_var1=&patch[var_index].input2 ;break;
 8000eee:	78fa      	ldrb	r2, [r7, #3]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	4413      	add	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4a11      	ldr	r2, [pc, #68]	; (8000f40 <menu_vars+0x3e8>)
 8000efa:	4413      	add	r3, r2
 8000efc:	3301      	adds	r3, #1
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	e016      	b.n	8000f30 <menu_vars+0x3d8>
	case 38: 	menu_vars_var1=&patch[var_index].in_mix ;break;
 8000f02:	78fa      	ldrb	r2, [r7, #3]
 8000f04:	4613      	mov	r3, r2
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	4413      	add	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <menu_vars+0x3e8>)
 8000f0e:	4413      	add	r3, r2
 8000f10:	3302      	adds	r3, #2
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	e00c      	b.n	8000f30 <menu_vars+0x3d8>
	case 39: 	menu_vars_var1=&patch[var_index].in_offset ;break;
 8000f16:	78fa      	ldrb	r2, [r7, #3]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	4413      	add	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <menu_vars+0x3e8>)
 8000f22:	4413      	add	r3, r2
 8000f24:	3303      	adds	r3, #3
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	e002      	b.n	8000f30 <menu_vars+0x3d8>

	default :		menu_vars_var1= NULL   ; break;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	bf00      	nop

	}
    // copy back address  ,ok

	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
 8000f30:	693b      	ldr	r3, [r7, #16]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000220 	.word	0x20000220
 8000f40:	20003858 	.word	0x20003858

08000f44 <menu_parser>:



void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0


	char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 8000f4a:	4a5b      	ldr	r2, [pc, #364]	; (80010b8 <menu_parser+0x174>)
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f54:	e883 0003 	stmia.w	r3, {r0, r1}
	char menu_string2[8]="hhhhhhhh";
 8000f58:	4a58      	ldr	r2, [pc, #352]	; (80010bc <menu_parser+0x178>)
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f60:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t string_counter=0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	75fb      	strb	r3, [r7, #23]

	uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 8000f68:	f240 4386 	movw	r3, #1158	; 0x486
 8000f6c:	82bb      	strh	r3, [r7, #20]


	if (string_search>menu_searchsize) {                    //this is ok
 8000f6e:	4b54      	ldr	r3, [pc, #336]	; (80010c0 <menu_parser+0x17c>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	8aba      	ldrh	r2, [r7, #20]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	f0c0 809a 	bcc.w	80010ae <menu_parser+0x16a>
		return;    }    // check if bigger than search area
	//if (menu_counter>240)  return;
	memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 8000f7a:	4b51      	ldr	r3, [pc, #324]	; (80010c0 <menu_parser+0x17c>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b50      	ldr	r3, [pc, #320]	; (80010c4 <menu_parser+0x180>)
 8000f82:	441a      	add	r2, r3
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	6810      	ldr	r0, [r2, #0]
 8000f8a:	6851      	ldr	r1, [r2, #4]
 8000f8c:	c303      	stmia	r3!, {r0, r1}
	////////////////////////////
	for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 8000f8e:	2300      	movs	r3, #0
 8000f90:	75fb      	strb	r3, [r7, #23]
 8000f92:	e072      	b.n	800107a <menu_parser+0x136>

		memcpy(menu_string2,menu_titles_final[string_counter],8);
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	4a4c      	ldr	r2, [pc, #304]	; (80010c8 <menu_parser+0x184>)
 8000f98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	6810      	ldr	r0, [r2, #0]
 8000fa0:	6851      	ldr	r1, [r2, #4]
 8000fa2:	c303      	stmia	r3!, {r0, r1}
		if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 8000fa4:	1d39      	adds	r1, r7, #4
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	2208      	movs	r2, #8
 8000fac:	4618      	mov	r0, r3
 8000fae:	f009 f921 	bl	800a1f4 <strncmp>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d15d      	bne.n	8001074 <menu_parser+0x130>
		{

			if ((menu_counter>110 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 8000fb8:	4b44      	ldr	r3, [pc, #272]	; (80010cc <menu_parser+0x188>)
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	2b6e      	cmp	r3, #110	; 0x6e
 8000fbe:	d909      	bls.n	8000fd4 <menu_parser+0x90>
 8000fc0:	4b42      	ldr	r3, [pc, #264]	; (80010cc <menu_parser+0x188>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	2b7f      	cmp	r3, #127	; 0x7f
 8000fc6:	d805      	bhi.n	8000fd4 <menu_parser+0x90>
 8000fc8:	4b40      	ldr	r3, [pc, #256]	; (80010cc <menu_parser+0x188>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	3310      	adds	r3, #16
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	4b3e      	ldr	r3, [pc, #248]	; (80010cc <menu_parser+0x188>)
 8000fd2:	801a      	strh	r2, [r3, #0]
			if((menu_counter>237)&&(menu_counter<256 )) menu_counter=menu_counter+16; // skip
 8000fd4:	4b3d      	ldr	r3, [pc, #244]	; (80010cc <menu_parser+0x188>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	2bed      	cmp	r3, #237	; 0xed
 8000fda:	d909      	bls.n	8000ff0 <menu_parser+0xac>
 8000fdc:	4b3b      	ldr	r3, [pc, #236]	; (80010cc <menu_parser+0x188>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	2bff      	cmp	r3, #255	; 0xff
 8000fe2:	d805      	bhi.n	8000ff0 <menu_parser+0xac>
 8000fe4:	4b39      	ldr	r3, [pc, #228]	; (80010cc <menu_parser+0x188>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	3310      	adds	r3, #16
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	4b37      	ldr	r3, [pc, #220]	; (80010cc <menu_parser+0x188>)
 8000fee:	801a      	strh	r2, [r3, #0]
			if((menu_counter>365)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
 8000ff0:	4b36      	ldr	r3, [pc, #216]	; (80010cc <menu_parser+0x188>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 8000ff8:	d30a      	bcc.n	8001010 <menu_parser+0xcc>
 8000ffa:	4b34      	ldr	r3, [pc, #208]	; (80010cc <menu_parser+0x188>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001002:	d205      	bcs.n	8001010 <menu_parser+0xcc>
 8001004:	4b31      	ldr	r3, [pc, #196]	; (80010cc <menu_parser+0x188>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	3310      	adds	r3, #16
 800100a:	b29a      	uxth	r2, r3
 800100c:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <menu_parser+0x188>)
 800100e:	801a      	strh	r2, [r3, #0]
			menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	041a      	lsls	r2, r3, #16
 8001014:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <menu_parser+0x188>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800101c:	18d1      	adds	r1, r2, r3
 800101e:	4b2c      	ldr	r3, [pc, #176]	; (80010d0 <menu_parser+0x18c>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <menu_parser+0x190>)
 8001026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 800102a:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <menu_parser+0x18c>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	461a      	mov	r2, r3
 8001032:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <menu_parser+0x194>)
 8001034:	18d0      	adds	r0, r2, r3
 8001036:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <menu_parser+0x17c>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	3b02      	subs	r3, #2
 800103c:	4a21      	ldr	r2, [pc, #132]	; (80010c4 <menu_parser+0x180>)
 800103e:	4413      	add	r3, r2
 8001040:	2202      	movs	r2, #2
 8001042:	4619      	mov	r1, r3
 8001044:	f009 f8c0 	bl	800a1c8 <memcpy>


			menu_title_count++;
 8001048:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <menu_parser+0x18c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <menu_parser+0x18c>)
 8001052:	701a      	strb	r2, [r3, #0]
			menu_counter++;
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <menu_parser+0x188>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	b29a      	uxth	r2, r3
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <menu_parser+0x188>)
 800105e:	801a      	strh	r2, [r3, #0]
			space_check=0;
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <menu_parser+0x198>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
			string_search=string_search+8;     // advance search position
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <menu_parser+0x17c>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	3308      	adds	r3, #8
 800106c:	b29a      	uxth	r2, r3
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <menu_parser+0x17c>)
 8001070:	801a      	strh	r2, [r3, #0]

			return;}
 8001072:	e01d      	b.n	80010b0 <menu_parser+0x16c>
	for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	3301      	adds	r3, #1
 8001078:	75fb      	strb	r3, [r7, #23]
 800107a:	7dfb      	ldrb	r3, [r7, #23]
 800107c:	2b27      	cmp	r3, #39	; 0x27
 800107e:	d989      	bls.n	8000f94 <menu_parser+0x50>

	}

	if (space_check>1)  menu_counter++;   //this is ok
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <menu_parser+0x198>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d905      	bls.n	8001094 <menu_parser+0x150>
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <menu_parser+0x188>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <menu_parser+0x188>)
 8001092:	801a      	strh	r2, [r3, #0]
	space_check++;  // count empty spaces or fill characters
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <menu_parser+0x198>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <menu_parser+0x198>)
 800109e:	701a      	strb	r2, [r3, #0]
	string_search++;
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <menu_parser+0x17c>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	3301      	adds	r3, #1
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <menu_parser+0x17c>)
 80010aa:	801a      	strh	r2, [r3, #0]
	return;
 80010ac:	e000      	b.n	80010b0 <menu_parser+0x16c>
		return;    }    // check if bigger than search area
 80010ae:	bf00      	nop


}
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	0800a694 	.word	0x0800a694
 80010bc:	0800a69c 	.word	0x0800a69c
 80010c0:	200039c0 	.word	0x200039c0
 80010c4:	0800a77c 	.word	0x0800a77c
 80010c8:	20000244 	.word	0x20000244
 80010cc:	200039c2 	.word	0x200039c2
 80010d0:	200039c5 	.word	0x200039c5
 80010d4:	200039c8 	.word	0x200039c8
 80010d8:	20003bc8 	.word	0x20003bc8
 80010dc:	200039c4 	.word	0x200039c4

080010e0 <patch_target_parse>:
void patch_target_parse(void){    // records ptr for target options , works ok
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
uint8_t skip=0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	73fb      	strb	r3, [r7, #15]
		for (n=0;n<10;n++){
 80010ea:	4b88      	ldr	r3, [pc, #544]	; (800130c <patch_target_parse+0x22c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	801a      	strh	r2, [r3, #0]
 80010f0:	e101      	b.n	80012f6 <patch_target_parse+0x216>

			uint16_t* output_hold;
			uint8_t input_hold=patch[n].input1;
 80010f2:	4b86      	ldr	r3, [pc, #536]	; (800130c <patch_target_parse+0x22c>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	4619      	mov	r1, r3
 80010f8:	4a85      	ldr	r2, [pc, #532]	; (8001310 <patch_target_parse+0x230>)
 80010fa:	460b      	mov	r3, r1
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	440b      	add	r3, r1
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	717b      	strb	r3, [r7, #5]

			if (patch[n].input1>39) patch[n].input1=0;    // limit
 8001108:	4b80      	ldr	r3, [pc, #512]	; (800130c <patch_target_parse+0x22c>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	4a80      	ldr	r2, [pc, #512]	; (8001310 <patch_target_parse+0x230>)
 8001110:	460b      	mov	r3, r1
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	440b      	add	r3, r1
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b27      	cmp	r3, #39	; 0x27
 800111e:	d90a      	bls.n	8001136 <patch_target_parse+0x56>
 8001120:	4b7a      	ldr	r3, [pc, #488]	; (800130c <patch_target_parse+0x22c>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	4a7a      	ldr	r2, [pc, #488]	; (8001310 <patch_target_parse+0x230>)
 8001128:	460b      	mov	r3, r1
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]

			switch(input_hold&3){     // lfo now , can add adsr later
 8001136:	797b      	ldrb	r3, [r7, #5]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b03      	cmp	r3, #3
 800113e:	d842      	bhi.n	80011c6 <patch_target_parse+0xe6>
 8001140:	a201      	add	r2, pc, #4	; (adr r2, 8001148 <patch_target_parse+0x68>)
 8001142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001146:	bf00      	nop
 8001148:	08001159 	.word	0x08001159
 800114c:	08001173 	.word	0x08001173
 8001150:	0800118f 	.word	0x0800118f
 8001154:	080011ab 	.word	0x080011ab

						case 0:   output_hold=&LFO[input_hold>>2].out[0];break;
 8001158:	797b      	ldrb	r3, [r7, #5]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	b2db      	uxtb	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	4613      	mov	r3, r2
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4a6a      	ldr	r2, [pc, #424]	; (8001314 <patch_target_parse+0x234>)
 800116a:	4413      	add	r3, r2
 800116c:	3306      	adds	r3, #6
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	e029      	b.n	80011c6 <patch_target_parse+0xe6>
						case 1:   output_hold=&LFO[input_hold>>2].out_saw[0];break;
 8001172:	797b      	ldrb	r3, [r7, #5]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	b2db      	uxtb	r3, r3
 8001178:	461a      	mov	r2, r3
 800117a:	4613      	mov	r3, r2
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	3318      	adds	r3, #24
 8001184:	4a63      	ldr	r2, [pc, #396]	; (8001314 <patch_target_parse+0x234>)
 8001186:	4413      	add	r3, r2
 8001188:	3302      	adds	r3, #2
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	e01b      	b.n	80011c6 <patch_target_parse+0xe6>
						case 2:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 800118e:	797b      	ldrb	r3, [r7, #5]
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	b2db      	uxtb	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	4613      	mov	r3, r2
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	4413      	add	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	3328      	adds	r3, #40	; 0x28
 80011a0:	4a5c      	ldr	r2, [pc, #368]	; (8001314 <patch_target_parse+0x234>)
 80011a2:	4413      	add	r3, r2
 80011a4:	3306      	adds	r3, #6
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	e00d      	b.n	80011c6 <patch_target_parse+0xe6>
						case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 80011aa:	797b      	ldrb	r3, [r7, #5]
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	4613      	mov	r3, r2
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	4413      	add	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	3328      	adds	r3, #40	; 0x28
 80011bc:	4a55      	ldr	r2, [pc, #340]	; (8001314 <patch_target_parse+0x234>)
 80011be:	4413      	add	r3, r2
 80011c0:	3306      	adds	r3, #6
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	bf00      	nop
						}

			patch[n].in1_ptr=output_hold;   // sets input pointer to first sample , default is lfo[0].out [0]
 80011c6:	4b51      	ldr	r3, [pc, #324]	; (800130c <patch_target_parse+0x22c>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	4619      	mov	r1, r3
 80011cc:	4a50      	ldr	r2, [pc, #320]	; (8001310 <patch_target_parse+0x230>)
 80011ce:	460b      	mov	r3, r1
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	440b      	add	r3, r1
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	3320      	adds	r3, #32
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	601a      	str	r2, [r3, #0]


			if (patch[n].target) {  // test if above zero
 80011de:	4b4b      	ldr	r3, [pc, #300]	; (800130c <patch_target_parse+0x22c>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	4619      	mov	r1, r3
 80011e4:	4a4a      	ldr	r2, [pc, #296]	; (8001310 <patch_target_parse+0x230>)
 80011e6:	460b      	mov	r3, r1
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	440b      	add	r3, r1
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	3304      	adds	r3, #4
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d078      	beq.n	80012ea <patch_target_parse+0x20a>


				uint8_t target_input=patch[n].target; // copy to avoid messed up pointer
 80011f8:	4b44      	ldr	r3, [pc, #272]	; (800130c <patch_target_parse+0x22c>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	4a44      	ldr	r2, [pc, #272]	; (8001310 <patch_target_parse+0x230>)
 8001200:	460b      	mov	r3, r1
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	440b      	add	r3, r1
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	3304      	adds	r3, #4
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	e00a      	b.n	800122c <patch_target_parse+0x14c>
					if (patch_skip_list[target_input]==1)  target_input++;
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4a3f      	ldr	r2, [pc, #252]	; (8001318 <patch_target_parse+0x238>)
 800121a:	5cd3      	ldrb	r3, [r2, r3]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d102      	bne.n	8001226 <patch_target_parse+0x146>
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	3301      	adds	r3, #1
 8001224:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	3301      	adds	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	2b27      	cmp	r3, #39	; 0x27
 8001230:	d9f1      	bls.n	8001216 <patch_target_parse+0x136>

				}  // test against list
				if (target_input>(menu_lookup_count-1)) target_input=menu_lookup_count-1;
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b27      	cmp	r3, #39	; 0x27
 8001236:	d901      	bls.n	800123c <patch_target_parse+0x15c>
 8001238:	2327      	movs	r3, #39	; 0x27
 800123a:	71fb      	strb	r3, [r7, #7]
				if (target_input!=35)  {     // make target index is not selected
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	2b23      	cmp	r3, #35	; 0x23
 8001240:	d047      	beq.n	80012d2 <patch_target_parse+0x1f2>


			patch[n].target=target_input; // write back corrected value
 8001242:	4b32      	ldr	r3, [pc, #200]	; (800130c <patch_target_parse+0x22c>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	4619      	mov	r1, r3
 8001248:	4a31      	ldr	r2, [pc, #196]	; (8001310 <patch_target_parse+0x230>)
 800124a:	460b      	mov	r3, r1
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	440b      	add	r3, r1
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	3304      	adds	r3, #4
 8001256:	79fa      	ldrb	r2, [r7, #7]
 8001258:	701a      	strb	r2, [r3, #0]

			uint8_t target_index=patch[n].target_index;
 800125a:	4b2c      	ldr	r3, [pc, #176]	; (800130c <patch_target_parse+0x22c>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	4619      	mov	r1, r3
 8001260:	4a2b      	ldr	r2, [pc, #172]	; (8001310 <patch_target_parse+0x230>)
 8001262:	460b      	mov	r3, r1
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	440b      	add	r3, r1
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	3305      	adds	r3, #5
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	71bb      	strb	r3, [r7, #6]

			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 8001272:	79bb      	ldrb	r3, [r7, #6]
 8001274:	4a29      	ldr	r2, [pc, #164]	; (800131c <patch_target_parse+0x23c>)
 8001276:	5cd3      	ldrb	r3, [r2, r3]
 8001278:	79ba      	ldrb	r2, [r7, #6]
 800127a:	429a      	cmp	r2, r3
 800127c:	d903      	bls.n	8001286 <patch_target_parse+0x1a6>
			{	target_index=menu_vars_index_limit[target_index]; }
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	4a26      	ldr	r2, [pc, #152]	; (800131c <patch_target_parse+0x23c>)
 8001282:	5cd3      	ldrb	r3, [r2, r3]
 8001284:	71bb      	strb	r3, [r7, #6]
			patch[n].target_index=target_index;
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <patch_target_parse+0x22c>)
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	4619      	mov	r1, r3
 800128c:	4a20      	ldr	r2, [pc, #128]	; (8001310 <patch_target_parse+0x230>)
 800128e:	460b      	mov	r3, r1
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	440b      	add	r3, r1
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	3305      	adds	r3, #5
 800129a:	79ba      	ldrb	r2, [r7, #6]
 800129c:	701a      	strb	r2, [r3, #0]
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	4a1f      	ldr	r2, [pc, #124]	; (8001320 <patch_target_parse+0x240>)
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	79ba      	ldrb	r2, [r7, #6]
 80012a8:	4611      	mov	r1, r2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fc54 	bl	8000b58 <menu_vars>
 80012b0:	6038      	str	r0, [r7, #0]

			if (target_out_ptr)           patch[n].out_ptr =target_out_ptr;     // write ptr
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d018      	beq.n	80012ea <patch_target_parse+0x20a>
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <patch_target_parse+0x22c>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	4a14      	ldr	r2, [pc, #80]	; (8001310 <patch_target_parse+0x230>)
 80012c0:	460b      	mov	r3, r1
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	440b      	add	r3, r1
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	331c      	adds	r3, #28
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	e00b      	b.n	80012ea <patch_target_parse+0x20a>

				}
				else patch[n].target=0;  // write back 0 if failed
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <patch_target_parse+0x22c>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	4619      	mov	r1, r3
 80012d8:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <patch_target_parse+0x230>)
 80012da:	460b      	mov	r3, r1
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	440b      	add	r3, r1
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	3304      	adds	r3, #4
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
		for (n=0;n<10;n++){
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <patch_target_parse+0x22c>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	3301      	adds	r3, #1
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <patch_target_parse+0x22c>)
 80012f4:	801a      	strh	r2, [r3, #0]
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <patch_target_parse+0x22c>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	2b09      	cmp	r3, #9
 80012fc:	f67f aef9 	bls.w	80010f2 <patch_target_parse+0x12>


			}
		}

	}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000072c 	.word	0x2000072c
 8001310:	20003858 	.word	0x20003858
 8001314:	20002af4 	.word	0x20002af4
 8001318:	0800ac5c 	.word	0x0800ac5c
 800131c:	0800ac0c 	.word	0x0800ac0c
 8001320:	20000244 	.word	0x20000244

08001324 <patch_target_replace>:


	}

}
void patch_target_replace(void){					// sttaight value replace  ,ok
 8001324:	b490      	push	{r4, r7}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
	uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 800132a:	4b3a      	ldr	r3, [pc, #232]	; (8001414 <patch_target_replace+0xf0>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	73fb      	strb	r3, [r7, #15]

	for (n=0;n<10;n++){
 8001334:	4b38      	ldr	r3, [pc, #224]	; (8001418 <patch_target_replace+0xf4>)
 8001336:	2200      	movs	r2, #0
 8001338:	801a      	strh	r2, [r3, #0]
 800133a:	e061      	b.n	8001400 <patch_target_replace+0xdc>



		if (patch[n].target) {         // check first for enable
 800133c:	4b36      	ldr	r3, [pc, #216]	; (8001418 <patch_target_replace+0xf4>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	4a36      	ldr	r2, [pc, #216]	; (800141c <patch_target_replace+0xf8>)
 8001344:	460b      	mov	r3, r1
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	440b      	add	r3, r1
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	3304      	adds	r3, #4
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d04e      	beq.n	80013f4 <patch_target_replace+0xd0>

			patch[n].output[loop_position]=*(patch[n].in1_ptr+(loop_position));   //write output here
 8001356:	4b30      	ldr	r3, [pc, #192]	; (8001418 <patch_target_replace+0xf4>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	4619      	mov	r1, r3
 800135c:	4a2f      	ldr	r2, [pc, #188]	; (800141c <patch_target_replace+0xf8>)
 800135e:	460b      	mov	r3, r1
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	440b      	add	r3, r1
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	3320      	adds	r3, #32
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4413      	add	r3, r2
 8001372:	4a29      	ldr	r2, [pc, #164]	; (8001418 <patch_target_replace+0xf4>)
 8001374:	8812      	ldrh	r2, [r2, #0]
 8001376:	4610      	mov	r0, r2
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	881c      	ldrh	r4, [r3, #0]
 800137c:	4927      	ldr	r1, [pc, #156]	; (800141c <patch_target_replace+0xf8>)
 800137e:	4603      	mov	r3, r0
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4403      	add	r3, r0
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	440b      	add	r3, r1
 800138c:	4622      	mov	r2, r4
 800138e:	80da      	strh	r2, [r3, #6]

			uint8_t right_shift=menu_vars_divider[patch[n].target]+1;   // grab divider
 8001390:	4b21      	ldr	r3, [pc, #132]	; (8001418 <patch_target_replace+0xf4>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	4a21      	ldr	r2, [pc, #132]	; (800141c <patch_target_replace+0xf8>)
 8001398:	460b      	mov	r3, r1
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	440b      	add	r3, r1
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	3304      	adds	r3, #4
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <patch_target_replace+0xfc>)
 80013aa:	5c9b      	ldrb	r3, [r3, r2]
 80013ac:	3301      	adds	r3, #1
 80013ae:	73bb      	strb	r3, [r7, #14]
			uint8_t  *ptr_to_modify =patch[n].out_ptr;       // select address , not always 8 bit ,ok
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <patch_target_replace+0xf4>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	4619      	mov	r1, r3
 80013b6:	4a19      	ldr	r2, [pc, #100]	; (800141c <patch_target_replace+0xf8>)
 80013b8:	460b      	mov	r3, r1
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	440b      	add	r3, r1
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	331c      	adds	r3, #28
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	60bb      	str	r3, [r7, #8]
			uint16_t lfo_out_temp=  (patch[n].output [loop_position])>>8;  // 0-256,
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <patch_target_replace+0xf4>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	4912      	ldr	r1, [pc, #72]	; (800141c <patch_target_replace+0xf8>)
 80013d2:	4603      	mov	r3, r0
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	4403      	add	r3, r0
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	440b      	add	r3, r1
 80013e0:	88db      	ldrh	r3, [r3, #6]
 80013e2:	0a1b      	lsrs	r3, r3, #8
 80013e4:	80fb      	strh	r3, [r7, #6]
			uint8_t lfo_mod1=ptr_to_modify; //ok
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	717b      	strb	r3, [r7, #5]

			uint8_t  var_replaced =  lfo_out_temp &255 ;   // grab lfo out *    data to be modfied
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	713b      	strb	r3, [r7, #4]

	//	if (var_replaced>159) var_replaced=159;    leave this for now

			*ptr_to_modify =var_replaced;   // replace original value,ok
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	793a      	ldrb	r2, [r7, #4]
 80013f2:	701a      	strb	r2, [r3, #0]
	for (n=0;n<10;n++){
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <patch_target_replace+0xf4>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <patch_target_replace+0xf4>)
 80013fe:	801a      	strh	r2, [r3, #0]
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <patch_target_replace+0xf4>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	2b09      	cmp	r3, #9
 8001406:	d999      	bls.n	800133c <patch_target_replace+0x18>
		}


	}

}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bc90      	pop	{r4, r7}
 8001412:	4770      	bx	lr
 8001414:	20003ce0 	.word	0x20003ce0
 8001418:	2000072c 	.word	0x2000072c
 800141c:	20003858 	.word	0x20003858
 8001420:	0800ac34 	.word	0x0800ac34

08001424 <SPI_command>:



void SPI_command(void){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <SPI_command+0x68>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d128      	bne.n	8001484 <SPI_command+0x60>
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <SPI_command+0x6c>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d124      	bne.n	8001484 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <SPI_command+0x70>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	0a1b      	lsrs	r3, r3, #8
 8001440:	b29b      	uxth	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <SPI_command+0x2a>
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <SPI_command+0x74>)
 8001448:	22f8      	movs	r2, #248	; 0xf8
 800144a:	701a      	strb	r2, [r3, #0]
 800144c:	e002      	b.n	8001454 <SPI_command+0x30>
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <SPI_command+0x74>)
 8001450:	22fa      	movs	r2, #250	; 0xfa
 8001452:	701a      	strb	r2, [r3, #0]

	spi_store[0]=spi_byte&255;
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <SPI_command+0x74>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <SPI_command+0x70>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	091b      	lsrs	r3, r3, #4
 8001460:	b29b      	uxth	r3, r3
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	b2db      	uxtb	r3, r3
 8001466:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <SPI_command+0x70>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	b2db      	uxtb	r3, r3
 8001470:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 8001472:	4639      	mov	r1, r7
 8001474:	2303      	movs	r3, #3
 8001476:	2203      	movs	r2, #3
 8001478:	4808      	ldr	r0, [pc, #32]	; (800149c <SPI_command+0x78>)
 800147a:	f007 f850 	bl	800851e <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 800147e:	4b03      	ldr	r3, [pc, #12]	; (800148c <SPI_command+0x68>)
 8001480:	2201      	movs	r2, #1
 8001482:	801a      	strh	r2, [r3, #0]
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20001b92 	.word	0x20001b92
 8001490:	20001b98 	.word	0x20001b98
 8001494:	20001b96 	.word	0x20001b96
 8001498:	20001b94 	.word	0x20001b94
 800149c:	20006260 	.word	0x20006260

080014a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

	{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
		time_proc++;
 80014a8:	4b24      	ldr	r3, [pc, #144]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	4b22      	ldr	r3, [pc, #136]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80014b2:	801a      	strh	r2, [r3, #0]
		//if (((sample_point==511) || (sample_point==1022)) && (bank_write)  ) error_count++;

		if (sample_point==511) {bank_write=1; sample_pointD=0;  }
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80014be:	4293      	cmp	r3, r2
 80014c0:	d105      	bne.n	80014ce <HAL_TIM_PeriodElapsedCallback+0x2e>
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	801a      	strh	r2, [r3, #0]
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	801a      	strh	r2, [r3, #0]
		if (sample_point==1022) {bank_write=1; sample_pointD=512; }
 80014ce:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80014d8:	4293      	cmp	r3, r2
 80014da:	d106      	bne.n	80014ea <HAL_TIM_PeriodElapsedCallback+0x4a>
 80014dc:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80014de:	2201      	movs	r2, #1
 80014e0:	801a      	strh	r2, [r3, #0]
 80014e2:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80014e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e8:	801a      	strh	r2, [r3, #0]
		sample_point=sample_point & 1023;// this is 1
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80014f8:	801a      	strh	r2, [r3, #0]
		play_hold=play_sample[sample_point]; // this is 2
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001504:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800150a:	801a      	strh	r2, [r3, #0]

		if(TIM3==htim->Instance)			// nothing here is consistent
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a10      	ldr	r2, [pc, #64]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d10b      	bne.n	800152e <HAL_TIM_PeriodElapsedCallback+0x8e>
	{


	TIM3->CCR3=play_hold ;  // keep readin sample storage
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	b29a      	uxth	r2, r3
 800151c:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800151e:	63da      	str	r2, [r3, #60]	; 0x3c


	sample_point++; //this needs to be here or too fast and wrong sample rate
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	b29b      	uxth	r3, r3
 8001526:	3301      	adds	r3, #1
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800152c:	801a      	strh	r2, [r3, #0]

	}

	}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20002af0 	.word	0x20002af0
 8001540:	20000f56 	.word	0x20000f56
 8001544:	200001b2 	.word	0x200001b2
 8001548:	20000f5a 	.word	0x20000f5a
 800154c:	20000754 	.word	0x20000754
 8001550:	20000f58 	.word	0x20000f58
 8001554:	40000400 	.word	0x40000400

08001558 <analoginputloopb>:



void analoginputloopb(void){  //works ,getting obsolete
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0


	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 800155e:	4b51      	ldr	r3, [pc, #324]	; (80016a4 <analoginputloopb+0x14c>)
 8001560:	889b      	ldrh	r3, [r3, #4]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	b29b      	uxth	r3, r3
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b4f      	ldr	r3, [pc, #316]	; (80016a8 <analoginputloopb+0x150>)
 800156a:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 800156c:	4b4d      	ldr	r3, [pc, #308]	; (80016a4 <analoginputloopb+0x14c>)
 800156e:	889b      	ldrh	r3, [r3, #4]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	b2da      	uxtb	r2, r3
 8001578:	4b4c      	ldr	r3, [pc, #304]	; (80016ac <analoginputloopb+0x154>)
 800157a:	701a      	strb	r2, [r3, #0]


		cursor_menu[1]=0;
 800157c:	4b49      	ldr	r3, [pc, #292]	; (80016a4 <analoginputloopb+0x14c>)
 800157e:	2200      	movs	r2, #0
 8001580:	805a      	strh	r2, [r3, #2]

		cursor_menu[2]=enc2_dir;
 8001582:	4b4b      	ldr	r3, [pc, #300]	; (80016b0 <analoginputloopb+0x158>)
 8001584:	881a      	ldrh	r2, [r3, #0]
 8001586:	4b47      	ldr	r3, [pc, #284]	; (80016a4 <analoginputloopb+0x14c>)
 8001588:	809a      	strh	r2, [r3, #4]


	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 800158a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	085b      	lsrs	r3, r3, #1
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <analoginputloopb+0x15c>)
 8001596:	801a      	strh	r2, [r3, #0]
	enc2_store[enc2_store_count]=(TIM4->CNT)&255;  // read counter tim4, noisy
 8001598:	4b47      	ldr	r3, [pc, #284]	; (80016b8 <analoginputloopb+0x160>)
 800159a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800159c:	4b47      	ldr	r3, [pc, #284]	; (80016bc <analoginputloopb+0x164>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	b2c9      	uxtb	r1, r1
 80015a4:	4b46      	ldr	r3, [pc, #280]	; (80016c0 <analoginputloopb+0x168>)
 80015a6:	5499      	strb	r1, [r3, r2]
	uint16_t enc2_store2=0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	80fb      	strh	r3, [r7, #6]
	uint16_t enc2_store3=0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	80bb      	strh	r3, [r7, #4]
	if (enc2_store_count==3) enc2_store_count=0; else enc2_store_count++;
 80015b0:	4b42      	ldr	r3, [pc, #264]	; (80016bc <analoginputloopb+0x164>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d103      	bne.n	80015c0 <analoginputloopb+0x68>
 80015b8:	4b40      	ldr	r3, [pc, #256]	; (80016bc <analoginputloopb+0x164>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
 80015be:	e005      	b.n	80015cc <analoginputloopb+0x74>
 80015c0:	4b3e      	ldr	r3, [pc, #248]	; (80016bc <analoginputloopb+0x164>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	3301      	adds	r3, #1
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	4b3c      	ldr	r3, [pc, #240]	; (80016bc <analoginputloopb+0x164>)
 80015ca:	701a      	strb	r2, [r3, #0]

	enc2_store2=enc2_store[0]+enc2_store[1]+enc2_store[2]+enc2_store[3];     // average filter hopefully
 80015cc:	4b3c      	ldr	r3, [pc, #240]	; (80016c0 <analoginputloopb+0x168>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <analoginputloopb+0x168>)
 80015d4:	785b      	ldrb	r3, [r3, #1]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	4413      	add	r3, r2
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b38      	ldr	r3, [pc, #224]	; (80016c0 <analoginputloopb+0x168>)
 80015de:	789b      	ldrb	r3, [r3, #2]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <analoginputloopb+0x168>)
 80015e8:	78db      	ldrb	r3, [r3, #3]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	4413      	add	r3, r2
 80015ee:	80fb      	strh	r3, [r7, #6]
	enc2_store3=enc2_store2>>3;
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	08db      	lsrs	r3, r3, #3
 80015f4:	80bb      	strh	r3, [r7, #4]
	enc2_temp=enc2_store3;
 80015f6:	4a33      	ldr	r2, [pc, #204]	; (80016c4 <analoginputloopb+0x16c>)
 80015f8:	88bb      	ldrh	r3, [r7, #4]
 80015fa:	8013      	strh	r3, [r2, #0]

	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;
 80015fc:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <analoginputloopb+0x15c>)
 80015fe:	881a      	ldrh	r2, [r3, #0]
 8001600:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <analoginputloopb+0x170>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d908      	bls.n	800161a <analoginputloopb+0xc2>
 8001608:	4b30      	ldr	r3, [pc, #192]	; (80016cc <analoginputloopb+0x174>)
 800160a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160e:	b29b      	uxth	r3, r3
 8001610:	3b01      	subs	r3, #1
 8001612:	b29b      	uxth	r3, r3
 8001614:	b21a      	sxth	r2, r3
 8001616:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <analoginputloopb+0x174>)
 8001618:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <analoginputloopb+0x15c>)
 800161c:	881a      	ldrh	r2, [r3, #0]
 800161e:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <analoginputloopb+0x170>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d208      	bcs.n	8001638 <analoginputloopb+0xe0>
 8001626:	4b29      	ldr	r3, [pc, #164]	; (80016cc <analoginputloopb+0x174>)
 8001628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162c:	b29b      	uxth	r3, r3
 800162e:	3301      	adds	r3, #1
 8001630:	b29b      	uxth	r3, r3
 8001632:	b21a      	sxth	r2, r3
 8001634:	4b25      	ldr	r3, [pc, #148]	; (80016cc <analoginputloopb+0x174>)
 8001636:	801a      	strh	r2, [r3, #0]


  if (enc2_temp>383) enc2_temp=383;  //mem overflow somewhere
 8001638:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <analoginputloopb+0x16c>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001640:	d303      	bcc.n	800164a <analoginputloopb+0xf2>
 8001642:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <analoginputloopb+0x16c>)
 8001644:	f240 127f 	movw	r2, #383	; 0x17f
 8001648:	801a      	strh	r2, [r3, #0]
	if (enc_dir>255) enc_dir=255;
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <analoginputloopb+0x174>)
 800164c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001650:	2bff      	cmp	r3, #255	; 0xff
 8001652:	dd02      	ble.n	800165a <analoginputloopb+0x102>
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <analoginputloopb+0x174>)
 8001656:	22ff      	movs	r2, #255	; 0xff
 8001658:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 800165a:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <analoginputloopb+0x174>)
 800165c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001660:	2b00      	cmp	r3, #0
 8001662:	da02      	bge.n	800166a <analoginputloopb+0x112>
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <analoginputloopb+0x174>)
 8001666:	2200      	movs	r2, #0
 8001668:	801a      	strh	r2, [r3, #0]

			enc_tempB=enc_temp;
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <analoginputloopb+0x15c>)
 800166c:	881a      	ldrh	r2, [r3, #0]
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <analoginputloopb+0x170>)
 8001670:	801a      	strh	r2, [r3, #0]

			enc2_dir=enc2_temp; //temp to try source data
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <analoginputloopb+0x16c>)
 8001674:	881a      	ldrh	r2, [r3, #0]
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <analoginputloopb+0x158>)
 8001678:	801a      	strh	r2, [r3, #0]


					enc2_tempB=enc2_temp; // to effective as counter not getting reset
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <analoginputloopb+0x16c>)
 800167c:	881a      	ldrh	r2, [r3, #0]
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <analoginputloopb+0x178>)
 8001680:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <analoginputloopb+0x17c>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <analoginputloopb+0x180>)
 800168a:	5c9b      	ldrb	r3, [r3, r2]
 800168c:	4a11      	ldr	r2, [pc, #68]	; (80016d4 <analoginputloopb+0x17c>)
 800168e:	8812      	ldrh	r2, [r2, #0]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	b2d9      	uxtb	r1, r3
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <analoginputloopb+0x184>)
 8001696:	5499      	strb	r1, [r3, r2]


}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	20001b9c 	.word	0x20001b9c
 80016a8:	20000722 	.word	0x20000722
 80016ac:	20000723 	.word	0x20000723
 80016b0:	20001b8a 	.word	0x20001b8a
 80016b4:	20001b82 	.word	0x20001b82
 80016b8:	40000800 	.word	0x40000800
 80016bc:	20003cdd 	.word	0x20003cdd
 80016c0:	20003cd8 	.word	0x20003cd8
 80016c4:	20001b86 	.word	0x20001b86
 80016c8:	20001b84 	.word	0x20001b84
 80016cc:	20001b8c 	.word	0x20001b8c
 80016d0:	20001b88 	.word	0x20001b88
 80016d4:	20000728 	.word	0x20000728
 80016d8:	20000598 	.word	0x20000598
 80016dc:	20000418 	.word	0x20000418

080016e0 <display_init>:
void display_init(void){
 80016e0:	b5b0      	push	{r4, r5, r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 80016e6:	4b22      	ldr	r3, [pc, #136]	; (8001770 <display_init+0x90>)
 80016e8:	1d3c      	adds	r4, r7, #4
 80016ea:	461d      	mov	r5, r3
 80016ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016f4:	682b      	ldr	r3, [r5, #0]
 80016f6:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 80016f8:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <display_init+0x94>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d132      	bne.n	8001766 <display_init+0x86>

switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <display_init+0x98>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b29b      	uxth	r3, r3
 8001706:	3b06      	subs	r3, #6
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b1c      	ldr	r3, [pc, #112]	; (800177c <display_init+0x9c>)
 800170c:	801a      	strh	r2, [r3, #0]
 800170e:	f000 fba1 	bl	8001e54 <displayBuffer2>
 8001712:	4b1a      	ldr	r3, [pc, #104]	; (800177c <display_init+0x9c>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <display_init+0xa0>)
 800171a:	5c9b      	ldrb	r3, [r3, r2]
 800171c:	b29a      	uxth	r2, r3
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <display_init+0xa4>)
 8001720:	801a      	strh	r2, [r3, #0]
 8001722:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <display_init+0x98>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b05      	cmp	r3, #5
 800172a:	d80b      	bhi.n	8001744 <display_init+0x64>
 800172c:	2003      	movs	r0, #3
 800172e:	f003 fb3b 	bl	8004da8 <HAL_Delay>
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <display_init+0x98>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	3328      	adds	r3, #40	; 0x28
 800173a:	443b      	add	r3, r7
 800173c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001740:	4b10      	ldr	r3, [pc, #64]	; (8001784 <display_init+0xa4>)
 8001742:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <display_init+0x98>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	b2da      	uxtb	r2, r3
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <display_init+0x98>)
 800174e:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <display_init+0x94>)
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
 8001756:	f7ff fe65 	bl	8001424 <SPI_command>
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <display_init+0x94>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <display_init+0xa8>)
 8001762:	2200      	movs	r2, #0
 8001764:	801a      	strh	r2, [r3, #0]


		  }

		//  if (init==5) display_fill();
}
 8001766:	bf00      	nop
 8001768:	3728      	adds	r7, #40	; 0x28
 800176a:	46bd      	mov	sp, r7
 800176c:	bdb0      	pop	{r4, r5, r7, pc}
 800176e:	bf00      	nop
 8001770:	0800a6a4 	.word	0x0800a6a4
 8001774:	20001b98 	.word	0x20001b98
 8001778:	20001b99 	.word	0x20001b99
 800177c:	20001b9a 	.word	0x20001b9a
 8001780:	20000000 	.word	0x20000000
 8001784:	20001b96 	.word	0x20001b96
 8001788:	20001b92 	.word	0x20001b92

0800178c <gfx_send>:


void gfx_send(void){         // send spi to lcd from gfx ram
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 8001792:	2300      	movs	r3, #0
 8001794:	71fb      	strb	r3, [r7, #7]
			uint8_t spi_store3=gfx_ram[gfx_send_counter];
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <gfx_send+0x9c>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	4b23      	ldr	r3, [pc, #140]	; (800182c <gfx_send+0xa0>)
 800179e:	5c9b      	ldrb	r3, [r3, r2]
 80017a0:	71bb      	strb	r3, [r7, #6]
	if (gfx_send_counter2>1) {spi_store2=250;
 80017a2:	4b23      	ldr	r3, [pc, #140]	; (8001830 <gfx_send+0xa4>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d902      	bls.n	80017b0 <gfx_send+0x24>
 80017aa:	23fa      	movs	r3, #250	; 0xfa
 80017ac:	71fb      	strb	r3, [r7, #7]
 80017ae:	e001      	b.n	80017b4 <gfx_send+0x28>

			}

			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 80017b0:	23f8      	movs	r3, #248	; 0xf8
 80017b2:	71fb      	strb	r3, [r7, #7]


					spi_store[0]=spi_store2;
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	703b      	strb	r3, [r7, #0]
					spi_store[1]=((spi_store3>>4)<<4);
 80017b8:	79bb      	ldrb	r3, [r7, #6]
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	707b      	strb	r3, [r7, #1]
					spi_store[2]=((spi_store3&15)<<4);
 80017c4:	79bb      	ldrb	r3, [r7, #6]
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	70bb      	strb	r3, [r7, #2]


						HAL_SPI_Transmit(&hspi2,spi_store,3,3);  // ok
 80017cc:	4639      	mov	r1, r7
 80017ce:	2303      	movs	r3, #3
 80017d0:	2203      	movs	r2, #3
 80017d2:	4818      	ldr	r0, [pc, #96]	; (8001834 <gfx_send+0xa8>)
 80017d4:	f006 fea3 	bl	800851e <HAL_SPI_Transmit>
					if (gfx_send_counter2==17 ) { gfx_send_counter2=0;    } else gfx_send_counter2++; // check elsewhere if changing gfx_send_counter
 80017d8:	4b15      	ldr	r3, [pc, #84]	; (8001830 <gfx_send+0xa4>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b11      	cmp	r3, #17
 80017de:	d103      	bne.n	80017e8 <gfx_send+0x5c>
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <gfx_send+0xa4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	e005      	b.n	80017f4 <gfx_send+0x68>
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <gfx_send+0xa4>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <gfx_send+0xa4>)
 80017f2:	701a      	strb	r2, [r3, #0]
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <gfx_send+0x9c>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	f240 427f 	movw	r2, #1151	; 0x47f
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d109      	bne.n	8001814 <gfx_send+0x88>
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <gfx_send+0x9c>)
 8001802:	2200      	movs	r2, #0
 8001804:	801a      	strh	r2, [r3, #0]
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <gfx_send+0xac>)
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <gfx_send+0xa4>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]

		}
 8001812:	e005      	b.n	8001820 <gfx_send+0x94>
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <gfx_send+0x9c>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	b29a      	uxth	r2, r3
 800181c:	4b02      	ldr	r3, [pc, #8]	; (8001828 <gfx_send+0x9c>)
 800181e:	801a      	strh	r2, [r3, #0]
		}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200026c6 	.word	0x200026c6
 800182c:	20002244 	.word	0x20002244
 8001830:	200026c8 	.word	0x200026c8
 8001834:	20006260 	.word	0x20006260
 8001838:	200026d6 	.word	0x200026d6

0800183c <gfx_clear>:

void gfx_clear(void){     // simple gfx ram clear ,besides feedback
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

	for (n=0;n<1152 ;n=n+18)    {
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <gfx_clear+0x6c>)
 8001842:	2200      	movs	r2, #0
 8001844:	801a      	strh	r2, [r3, #0]
 8001846:	e01c      	b.n	8001882 <gfx_clear+0x46>
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 8001848:	4b18      	ldr	r3, [pc, #96]	; (80018ac <gfx_clear+0x70>)
 800184a:	2202      	movs	r2, #2
 800184c:	801a      	strh	r2, [r3, #0]
 800184e:	e00e      	b.n	800186e <gfx_clear+0x32>
 8001850:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <gfx_clear+0x6c>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <gfx_clear+0x70>)
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <gfx_clear+0x74>)
 800185e:	2100      	movs	r1, #0
 8001860:	54d1      	strb	r1, [r2, r3]
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <gfx_clear+0x70>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <gfx_clear+0x70>)
 800186c:	801a      	strh	r2, [r3, #0]
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <gfx_clear+0x70>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	2b11      	cmp	r3, #17
 8001874:	d9ec      	bls.n	8001850 <gfx_clear+0x14>
	for (n=0;n<1152 ;n=n+18)    {
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <gfx_clear+0x6c>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	3312      	adds	r3, #18
 800187c:	b29a      	uxth	r2, r3
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <gfx_clear+0x6c>)
 8001880:	801a      	strh	r2, [r3, #0]
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <gfx_clear+0x6c>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800188a:	d3dd      	bcc.n	8001848 <gfx_clear+0xc>

				}  }
	 gfx_send_swap=0;  // disable line skip
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <gfx_clear+0x78>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <gfx_clear+0x7c>)
 8001894:	2200      	movs	r2, #0
 8001896:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <gfx_clear+0x80>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]

}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	2000072c 	.word	0x2000072c
 80018ac:	20000750 	.word	0x20000750
 80018b0:	20002244 	.word	0x20002244
 80018b4:	200026ca 	.word	0x200026ca
 80018b8:	200026c6 	.word	0x200026c6
 80018bc:	200026d6 	.word	0x200026d6

080018c0 <display_clear>:

		 gfx_send();

	 }  }

void display_clear (void){ //  simple character clear on default menu3
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0

	uint16_t disp_counter=0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	80fb      	strh	r3, [r7, #6]
	for (disp_counter=0;disp_counter<default_menu3_size;disp_counter++){
 80018ca:	2300      	movs	r3, #0
 80018cc:	80fb      	strh	r3, [r7, #6]
 80018ce:	e006      	b.n	80018de <display_clear+0x1e>
		default_menu3[disp_counter]=47;
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <display_clear+0x38>)
 80018d4:	212f      	movs	r1, #47	; 0x2f
 80018d6:	54d1      	strb	r1, [r2, r3]
	for (disp_counter=0;disp_counter<default_menu3_size;disp_counter++){
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	3301      	adds	r3, #1
 80018dc:	80fb      	strh	r3, [r7, #6]
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <display_clear+0x3c>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	88fa      	ldrh	r2, [r7, #6]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d3f3      	bcc.n	80018d0 <display_clear+0x10>
	}


}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20005d0c 	.word	0x20005d0c
 80018fc:	20003cd6 	.word	0x20003cd6

08001900 <display_generate>:
void display_generate(void){    // display character generate, 1+1+16 chars
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0

	gfx_clear_flag=0;
 8001904:	4b10      	ldr	r3, [pc, #64]	; (8001948 <display_generate+0x48>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
	for (i=0;i<18;i++) {
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <display_generate+0x4c>)
 800190c:	2200      	movs	r2, #0
 800190e:	801a      	strh	r2, [r3, #0]
 8001910:	e009      	b.n	8001926 <display_generate+0x26>
	display_process();
 8001912:	f000 f863 	bl	80019dc <display_process>
		  displayBuffer2();} // 5 cycles max for the lot or  0.2ms
 8001916:	f000 fa9d 	bl	8001e54 <displayBuffer2>
	for (i=0;i<18;i++) {
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <display_generate+0x4c>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	3301      	adds	r3, #1
 8001920:	b29a      	uxth	r2, r3
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <display_generate+0x4c>)
 8001924:	801a      	strh	r2, [r3, #0]
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <display_generate+0x4c>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	2b11      	cmp	r3, #17
 800192c:	d9f1      	bls.n	8001912 <display_generate+0x12>
	 if(!gfx_clear_flag)   gfx_send_swap=1;   // enable line swapping
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <display_generate+0x48>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <display_generate+0x3c>
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <display_generate+0x50>)
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
	 disp_end=0;   ///reset till next full page
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <display_generate+0x54>)
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]

	//  if (!disp_stepper) break;

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20003ce2 	.word	0x20003ce2
 800194c:	20000750 	.word	0x20000750
 8001950:	200026ca 	.word	0x200026ca
 8001954:	200026d6 	.word	0x200026d6

08001958 <display_fill>:

void display_fill(void)  {     // full update of gfx memory, ok
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
loop_counter3=1;
 800195e:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <display_fill+0x6c>)
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
uint16_t fill_counter= 0;
 8001964:	2300      	movs	r3, #0
 8001966:	80fb      	strh	r3, [r7, #6]
uint16_t init_b1=init_b;
 8001968:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <display_fill+0x70>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	80bb      	strh	r3, [r7, #4]
uint16_t init_bs=init_b&896;   // get msb
 800196e:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <display_fill+0x70>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001976:	807b      	strh	r3, [r7, #2]
fill_counter=fill_counter+init_bs; // add msb from init b
 8001978:	88fa      	ldrh	r2, [r7, #6]
 800197a:	887b      	ldrh	r3, [r7, #2]
 800197c:	4413      	add	r3, r2
 800197e:	80fb      	strh	r3, [r7, #6]

while ((fill_counter&896)==init_bs)   // skip when over a page something  127+
 8001980:	e00a      	b.n	8001998 <display_fill+0x40>
{
	init_b=fill_counter; // upcount
 8001982:	4a11      	ldr	r2, [pc, #68]	; (80019c8 <display_fill+0x70>)
 8001984:	88fb      	ldrh	r3, [r7, #6]
 8001986:	8013      	strh	r3, [r2, #0]

	disp_stepper=1;   // first character
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <display_fill+0x74>)
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
	displayBuffer2();	//read default menu
 800198e:	f000 fa61 	bl	8001e54 <displayBuffer2>
	fill_counter++;
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	3301      	adds	r3, #1
 8001996:	80fb      	strh	r3, [r7, #6]
while ((fill_counter&896)==init_bs)   // skip when over a page something  127+
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	f403 7260 	and.w	r2, r3, #896	; 0x380
 800199e:	887b      	ldrh	r3, [r7, #2]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d0ee      	beq.n	8001982 <display_fill+0x2a>
}
init_b=init_b1; // write back original value
 80019a4:	4a08      	ldr	r2, [pc, #32]	; (80019c8 <display_fill+0x70>)
 80019a6:	88bb      	ldrh	r3, [r7, #4]
 80019a8:	8013      	strh	r3, [r2, #0]
gfx_send_swap=0;  // disable line skip
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <display_fill+0x78>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <display_fill+0x7c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <display_fill+0x80>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]


	}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200026d7 	.word	0x200026d7
 80019c8:	20001b9a 	.word	0x20001b9a
 80019cc:	200001b6 	.word	0x200001b6
 80019d0:	200026ca 	.word	0x200026ca
 80019d4:	200026c6 	.word	0x200026c6
 80019d8:	200026d6 	.word	0x200026d6

080019dc <display_process>:



void display_process(void){							// keep data processing here
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
uint16_t feedback_loc=(init_b&896)+107;
 80019e2:	4b80      	ldr	r3, [pc, #512]	; (8001be4 <display_process+0x208>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	336b      	adds	r3, #107	; 0x6b
 80019ee:	81bb      	strh	r3, [r7, #12]

	if ((enc2_tempC==enc2_dir) && (!enc2_add))  {
 80019f0:	4b7d      	ldr	r3, [pc, #500]	; (8001be8 <display_process+0x20c>)
 80019f2:	f993 3000 	ldrsb.w	r3, [r3]
 80019f6:	461a      	mov	r2, r3
 80019f8:	4b7c      	ldr	r3, [pc, #496]	; (8001bec <display_process+0x210>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d112      	bne.n	8001a26 <display_process+0x4a>
 8001a00:	4b7b      	ldr	r3, [pc, #492]	; (8001bf0 <display_process+0x214>)
 8001a02:	f993 3000 	ldrsb.w	r3, [r3]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10d      	bne.n	8001a26 <display_process+0x4a>
		if ((disp_stepper==5)&&(!target_display))  {enc2_add=2; 	disp_stepper=17;}   	 // wait till enc2_dir  hasn't changed ,jump and then change feedback
 8001a0a:	4b7a      	ldr	r3, [pc, #488]	; (8001bf4 <display_process+0x218>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b05      	cmp	r3, #5
 8001a10:	d109      	bne.n	8001a26 <display_process+0x4a>
 8001a12:	4b79      	ldr	r3, [pc, #484]	; (8001bf8 <display_process+0x21c>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d105      	bne.n	8001a26 <display_process+0x4a>
 8001a1a:	4b75      	ldr	r3, [pc, #468]	; (8001bf0 <display_process+0x214>)
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	701a      	strb	r2, [r3, #0]
 8001a20:	4b74      	ldr	r3, [pc, #464]	; (8001bf4 <display_process+0x218>)
 8001a22:	2211      	movs	r2, #17
 8001a24:	701a      	strb	r2, [r3, #0]
			}

	if (disp_stepper>1)	init_b=feedback_loc+16+(disp_stepper);  // write lcd3
 8001a26:	4b73      	ldr	r3, [pc, #460]	; (8001bf4 <display_process+0x218>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d909      	bls.n	8001a42 <display_process+0x66>
 8001a2e:	4b71      	ldr	r3, [pc, #452]	; (8001bf4 <display_process+0x218>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	89bb      	ldrh	r3, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	3310      	adds	r3, #16
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	4b69      	ldr	r3, [pc, #420]	; (8001be4 <display_process+0x208>)
 8001a40:	801a      	strh	r2, [r3, #0]
	if (disp_stepper>4)	init_b=feedback_loc+(disp_stepper);  // write feedback line
 8001a42:	4b6c      	ldr	r3, [pc, #432]	; (8001bf4 <display_process+0x218>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d907      	bls.n	8001a5a <display_process+0x7e>
 8001a4a:	4b6a      	ldr	r3, [pc, #424]	; (8001bf4 <display_process+0x218>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	89bb      	ldrh	r3, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	4b63      	ldr	r3, [pc, #396]	; (8001be4 <display_process+0x208>)
 8001a58:	801a      	strh	r2, [r3, #0]

	if ((lcd_temp!=enc_dir)  && (enc2_tempC==enc2_dir) )   {*menu_vars_var=enc_dir;   // enc2_dir =same enc_dir=changed
 8001a5a:	4b68      	ldr	r3, [pc, #416]	; (8001bfc <display_process+0x220>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b67      	ldr	r3, [pc, #412]	; (8001c00 <display_process+0x224>)
 8001a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d014      	beq.n	8001a94 <display_process+0xb8>
 8001a6a:	4b5f      	ldr	r3, [pc, #380]	; (8001be8 <display_process+0x20c>)
 8001a6c:	f993 3000 	ldrsb.w	r3, [r3]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b5e      	ldr	r3, [pc, #376]	; (8001bec <display_process+0x210>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d10c      	bne.n	8001a94 <display_process+0xb8>
 8001a7a:	4b61      	ldr	r3, [pc, #388]	; (8001c00 <display_process+0x224>)
 8001a7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a80:	4b60      	ldr	r3, [pc, #384]	; (8001c04 <display_process+0x228>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	701a      	strb	r2, [r3, #0]
	lcd_temp=enc_dir;  }
 8001a88:	4b5d      	ldr	r3, [pc, #372]	; (8001c00 <display_process+0x224>)
 8001a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	4b5a      	ldr	r3, [pc, #360]	; (8001bfc <display_process+0x220>)
 8001a92:	701a      	strb	r2, [r3, #0]



	if ((disp_stepper==0) && (enc2_tempC!=enc2_dir) && (!enc2_add))  {      // wait till loop end , ok
 8001a94:	4b57      	ldr	r3, [pc, #348]	; (8001bf4 <display_process+0x218>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f040 8082 	bne.w	8001ba2 <display_process+0x1c6>
 8001a9e:	4b52      	ldr	r3, [pc, #328]	; (8001be8 <display_process+0x20c>)
 8001aa0:	f993 3000 	ldrsb.w	r3, [r3]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b51      	ldr	r3, [pc, #324]	; (8001bec <display_process+0x210>)
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d079      	beq.n	8001ba2 <display_process+0x1c6>
 8001aae:	4b50      	ldr	r3, [pc, #320]	; (8001bf0 <display_process+0x214>)
 8001ab0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d174      	bne.n	8001ba2 <display_process+0x1c6>

	if  (enc2_tempC<enc2_dir)	 enc2_add=1;   									// use this to set up or down count for variables , might change
 8001ab8:	4b4b      	ldr	r3, [pc, #300]	; (8001be8 <display_process+0x20c>)
 8001aba:	f993 3000 	ldrsb.w	r3, [r3]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b4a      	ldr	r3, [pc, #296]	; (8001bec <display_process+0x210>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	da02      	bge.n	8001ace <display_process+0xf2>
 8001ac8:	4b49      	ldr	r3, [pc, #292]	; (8001bf0 <display_process+0x214>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]
		if  (enc2_tempC>enc2_dir)	 enc2_add=-1;    // slow but 1 step at a time
 8001ace:	4b46      	ldr	r3, [pc, #280]	; (8001be8 <display_process+0x20c>)
 8001ad0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b45      	ldr	r3, [pc, #276]	; (8001bec <display_process+0x210>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	dd02      	ble.n	8001ae4 <display_process+0x108>
 8001ade:	4b44      	ldr	r3, [pc, #272]	; (8001bf0 <display_process+0x214>)
 8001ae0:	22ff      	movs	r2, #255	; 0xff
 8001ae2:	701a      	strb	r2, [r3, #0]
		if  (enc2_tempC<enc2_dir)	 enc2_add=+(enc2_dir-enc2_tempC);   	//  fast but skips
 8001ae4:	4b40      	ldr	r3, [pc, #256]	; (8001be8 <display_process+0x20c>)
 8001ae6:	f993 3000 	ldrsb.w	r3, [r3]
 8001aea:	461a      	mov	r2, r3
 8001aec:	4b3f      	ldr	r3, [pc, #252]	; (8001bec <display_process+0x210>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	da0b      	bge.n	8001b0c <display_process+0x130>
 8001af4:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <display_process+0x210>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <display_process+0x20c>)
 8001afc:	f993 3000 	ldrsb.w	r3, [r3]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	b25a      	sxtb	r2, r3
 8001b08:	4b39      	ldr	r3, [pc, #228]	; (8001bf0 <display_process+0x214>)
 8001b0a:	701a      	strb	r2, [r3, #0]

		if  (enc2_tempC>enc2_dir)	 enc2_add=-(enc2_tempC-enc2_dir);
 8001b0c:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <display_process+0x20c>)
 8001b0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b12:	461a      	mov	r2, r3
 8001b14:	4b35      	ldr	r3, [pc, #212]	; (8001bec <display_process+0x210>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	dd0b      	ble.n	8001b34 <display_process+0x158>
 8001b1c:	4b33      	ldr	r3, [pc, #204]	; (8001bec <display_process+0x210>)
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <display_process+0x20c>)
 8001b24:	f993 3000 	ldrsb.w	r3, [r3]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	b25a      	sxtb	r2, r3
 8001b30:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <display_process+0x214>)
 8001b32:	701a      	strb	r2, [r3, #0]


		enc2_tempC=enc2_dir;	   // loop back until change
 8001b34:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <display_process+0x210>)
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	b25a      	sxtb	r2, r3
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <display_process+0x20c>)
 8001b3c:	701a      	strb	r2, [r3, #0]
		if ((enc_out1>=0)  &&  (enc_out1<=menu_title_count))    {enc_out1=enc_out1+enc2_add;}   // count up or down within limits
 8001b3e:	4b32      	ldr	r3, [pc, #200]	; (8001c08 <display_process+0x22c>)
 8001b40:	f993 3000 	ldrsb.w	r3, [r3]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	db14      	blt.n	8001b72 <display_process+0x196>
 8001b48:	4b2f      	ldr	r3, [pc, #188]	; (8001c08 <display_process+0x22c>)
 8001b4a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b2e      	ldr	r3, [pc, #184]	; (8001c0c <display_process+0x230>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	dc0c      	bgt.n	8001b72 <display_process+0x196>
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <display_process+0x22c>)
 8001b5a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <display_process+0x214>)
 8001b62:	f993 3000 	ldrsb.w	r3, [r3]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	b25a      	sxtb	r2, r3
 8001b6e:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <display_process+0x22c>)
 8001b70:	701a      	strb	r2, [r3, #0]
		if (enc_out1<0)  {  enc_out1=menu_title_count; }
 8001b72:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <display_process+0x22c>)
 8001b74:	f993 3000 	ldrsb.w	r3, [r3]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	da04      	bge.n	8001b86 <display_process+0x1aa>
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <display_process+0x230>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	b25a      	sxtb	r2, r3
 8001b82:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <display_process+0x22c>)
 8001b84:	701a      	strb	r2, [r3, #0]
		if (enc_out1>menu_title_count) enc_out1=0;
 8001b86:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <display_process+0x22c>)
 8001b88:	f993 3000 	ldrsb.w	r3, [r3]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <display_process+0x230>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	dd02      	ble.n	8001b9c <display_process+0x1c0>
 8001b96:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <display_process+0x22c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
		enc2_add=2;
 8001b9c:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <display_process+0x214>)
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	701a      	strb	r2, [r3, #0]

	}


	if ((disp_stepper==0) && (enc2_add==2))			// skip if no input for enc2 , also maybe wait till enc2 stopped moving
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <display_process+0x218>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d170      	bne.n	8001c8c <display_process+0x2b0>
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <display_process+0x214>)
 8001bac:	f993 3000 	ldrsb.w	r3, [r3]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d16b      	bne.n	8001c8c <display_process+0x2b0>
	{



	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;   // look up up menu_titles_final
 8001bb4:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <display_process+0x22c>)
 8001bb6:	f993 3000 	ldrsb.w	r3, [r3]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <display_process+0x234>)
 8001bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc2:	0c1b      	lsrs	r3, r3, #16
 8001bc4:	72fb      	strb	r3, [r7, #11]
	if (crap_hold9==5) target_display=1;   // check if LFO.target is on cursor , may use for other things
 8001bc6:	7afb      	ldrb	r3, [r7, #11]
 8001bc8:	2b05      	cmp	r3, #5
 8001bca:	d103      	bne.n	8001bd4 <display_process+0x1f8>
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <display_process+0x21c>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	e022      	b.n	8001c1a <display_process+0x23e>
	else if (crap_hold9==36) target_display=2;   else target_display=0;
 8001bd4:	7afb      	ldrb	r3, [r7, #11]
 8001bd6:	2b24      	cmp	r3, #36	; 0x24
 8001bd8:	d11c      	bne.n	8001c14 <display_process+0x238>
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <display_process+0x21c>)
 8001bdc:	2202      	movs	r2, #2
 8001bde:	701a      	strb	r2, [r3, #0]
 8001be0:	e01b      	b.n	8001c1a <display_process+0x23e>
 8001be2:	bf00      	nop
 8001be4:	20001b9a 	.word	0x20001b9a
 8001be8:	200001b4 	.word	0x200001b4
 8001bec:	20001b8a 	.word	0x20001b8a
 8001bf0:	200001b5 	.word	0x200001b5
 8001bf4:	200001b6 	.word	0x200001b6
 8001bf8:	20003cdf 	.word	0x20003cdf
 8001bfc:	20003cde 	.word	0x20003cde
 8001c00:	20001b8c 	.word	0x20001b8c
 8001c04:	20003cc8 	.word	0x20003cc8
 8001c08:	20000240 	.word	0x20000240
 8001c0c:	200039c5 	.word	0x200039c5
 8001c10:	200039c8 	.word	0x200039c8
 8001c14:	4b7c      	ldr	r3, [pc, #496]	; (8001e08 <display_process+0x42c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]

	// fetch values for last line or cursor

	 memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 8001c1a:	89bb      	ldrh	r3, [r7, #12]
 8001c1c:	3308      	adds	r3, #8
 8001c1e:	4a7b      	ldr	r2, [pc, #492]	; (8001e0c <display_process+0x430>)
 8001c20:	1898      	adds	r0, r3, r2
 8001c22:	7afb      	ldrb	r3, [r7, #11]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4a7a      	ldr	r2, [pc, #488]	; (8001e10 <display_process+0x434>)
 8001c28:	4413      	add	r3, r2
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f008 faca 	bl	800a1c8 <memcpy>
	 memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8001c34:	7afb      	ldrb	r3, [r7, #11]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4a75      	ldr	r2, [pc, #468]	; (8001e10 <display_process+0x434>)
 8001c3a:	4413      	add	r3, r2
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4b75      	ldr	r3, [pc, #468]	; (8001e14 <display_process+0x438>)
 8001c40:	6810      	ldr	r0, [r2, #0]
 8001c42:	6851      	ldr	r1, [r2, #4]
 8001c44:	c303      	stmia	r3!, {r0, r1}

	 char temp_char[]="  ";
 8001c46:	4a74      	ldr	r2, [pc, #464]	; (8001e18 <display_process+0x43c>)
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	8019      	strh	r1, [r3, #0]
 8001c50:	3302      	adds	r3, #2
 8001c52:	0c12      	lsrs	r2, r2, #16
 8001c54:	701a      	strb	r2, [r3, #0]
	 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8001c56:	4b71      	ldr	r3, [pc, #452]	; (8001e1c <display_process+0x440>)
 8001c58:	f993 3000 	ldrsb.w	r3, [r3]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4b6f      	ldr	r3, [pc, #444]	; (8001e20 <display_process+0x444>)
 8001c62:	4413      	add	r3, r2
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	80bb      	strh	r3, [r7, #4]
	 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f008 fa7d 	bl	800a16c <atoi>
 8001c72:	4603      	mov	r3, r0
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4b6b      	ldr	r3, [pc, #428]	; (8001e24 <display_process+0x448>)
 8001c78:	701a      	strb	r2, [r3, #0]


	 menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8001c7a:	4b6a      	ldr	r3, [pc, #424]	; (8001e24 <display_process+0x448>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4864      	ldr	r0, [pc, #400]	; (8001e14 <display_process+0x438>)
 8001c82:	f7fe ff69 	bl	8000b58 <menu_vars>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4a67      	ldr	r2, [pc, #412]	; (8001e28 <display_process+0x44c>)
 8001c8a:	6013      	str	r3, [r2, #0]

	    // grab value on ptr address , also write first char , ok

	}

	if ((disp_stepper==0) || (disp_stepper==1))   // repeat first character
 8001c8c:	4b67      	ldr	r3, [pc, #412]	; (8001e2c <display_process+0x450>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <display_process+0x2c0>
 8001c94:	4b65      	ldr	r3, [pc, #404]	; (8001e2c <display_process+0x450>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d137      	bne.n	8001d0c <display_process+0x330>
	{


		uint16_t init_holder=init_b;
 8001c9c:	4b64      	ldr	r3, [pc, #400]	; (8001e30 <display_process+0x454>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	813b      	strh	r3, [r7, #8]

		init_b= menu_title_lut[enc_out1];    // this only grabs menu_title_count (&255)      , problem maybe here
 8001ca2:	4b5e      	ldr	r3, [pc, #376]	; (8001e1c <display_process+0x440>)
 8001ca4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b62      	ldr	r3, [pc, #392]	; (8001e34 <display_process+0x458>)
 8001cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	4b5f      	ldr	r3, [pc, #380]	; (8001e30 <display_process+0x454>)
 8001cb4:	801a      	strh	r2, [r3, #0]
	//	if (init_b>(feedback_loc+3) ) init_b=init_b+16;// skip feedback line
		if ((init_b&896)!=(init_holder&896)) {display_fill(); gfx_clear_flag=1; } // detect x over , not perfect
 8001cb6:	4b5e      	ldr	r3, [pc, #376]	; (8001e30 <display_process+0x454>)
 8001cb8:	881a      	ldrh	r2, [r3, #0]
 8001cba:	893b      	ldrh	r3, [r7, #8]
 8001cbc:	4053      	eors	r3, r2
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d004      	beq.n	8001cd2 <display_process+0x2f6>
 8001cc8:	f7ff fe46 	bl	8001958 <display_fill>
 8001ccc:	4b5a      	ldr	r3, [pc, #360]	; (8001e38 <display_process+0x45c>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]

	lcd_out3=*menu_vars_var;
 8001cd2:	4b55      	ldr	r3, [pc, #340]	; (8001e28 <display_process+0x44c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	4b58      	ldr	r3, [pc, #352]	; (8001e3c <display_process+0x460>)
 8001cdc:	801a      	strh	r2, [r3, #0]
	default_menu3[init_b]=((lcd_out3&255)>>4)+48; lcd_temp=lcd_out3; enc_dir=lcd_temp;       } // force enc_dir
 8001cde:	4b57      	ldr	r3, [pc, #348]	; (8001e3c <display_process+0x460>)
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	111b      	asrs	r3, r3, #4
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	4a50      	ldr	r2, [pc, #320]	; (8001e30 <display_process+0x454>)
 8001cee:	8812      	ldrh	r2, [r2, #0]
 8001cf0:	3330      	adds	r3, #48	; 0x30
 8001cf2:	b2d9      	uxtb	r1, r3
 8001cf4:	4b45      	ldr	r3, [pc, #276]	; (8001e0c <display_process+0x430>)
 8001cf6:	5499      	strb	r1, [r3, r2]
 8001cf8:	4b50      	ldr	r3, [pc, #320]	; (8001e3c <display_process+0x460>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <display_process+0x464>)
 8001d00:	701a      	strb	r2, [r3, #0]
 8001d02:	4b4f      	ldr	r3, [pc, #316]	; (8001e40 <display_process+0x464>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	b21a      	sxth	r2, r3
 8001d08:	4b4e      	ldr	r3, [pc, #312]	; (8001e44 <display_process+0x468>)
 8001d0a:	801a      	strh	r2, [r3, #0]

	if (disp_stepper==11) {default_menu3[feedback_loc+5]=menu_index_list[enc_out1<<1];   	default_menu3[feedback_loc+6]=menu_index_list[(enc_out1<<1)+1];}   // index display
 8001d0c:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <display_process+0x450>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b0b      	cmp	r3, #11
 8001d12:	d114      	bne.n	8001d3e <display_process+0x362>
 8001d14:	4b41      	ldr	r3, [pc, #260]	; (8001e1c <display_process+0x440>)
 8001d16:	f993 3000 	ldrsb.w	r3, [r3]
 8001d1a:	005a      	lsls	r2, r3, #1
 8001d1c:	89bb      	ldrh	r3, [r7, #12]
 8001d1e:	3305      	adds	r3, #5
 8001d20:	493f      	ldr	r1, [pc, #252]	; (8001e20 <display_process+0x444>)
 8001d22:	5c89      	ldrb	r1, [r1, r2]
 8001d24:	4a39      	ldr	r2, [pc, #228]	; (8001e0c <display_process+0x430>)
 8001d26:	54d1      	strb	r1, [r2, r3]
 8001d28:	4b3c      	ldr	r3, [pc, #240]	; (8001e1c <display_process+0x440>)
 8001d2a:	f993 3000 	ldrsb.w	r3, [r3]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	89bb      	ldrh	r3, [r7, #12]
 8001d34:	3306      	adds	r3, #6
 8001d36:	493a      	ldr	r1, [pc, #232]	; (8001e20 <display_process+0x444>)
 8001d38:	5c89      	ldrb	r1, [r1, r2]
 8001d3a:	4a34      	ldr	r2, [pc, #208]	; (8001e0c <display_process+0x430>)
 8001d3c:	54d1      	strb	r1, [r2, r3]

	if ((target_display) &&   (disp_stepper==11))      // write LFO.target display , might use it for other things too
 8001d3e:	4b32      	ldr	r3, [pc, #200]	; (8001e08 <display_process+0x42c>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d02e      	beq.n	8001da4 <display_process+0x3c8>
 8001d46:	4b39      	ldr	r3, [pc, #228]	; (8001e2c <display_process+0x450>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b0b      	cmp	r3, #11
 8001d4c:	d12a      	bne.n	8001da4 <display_process+0x3c8>
	{
		uint8_t target_tmp1=*menu_vars_var ;
 8001d4e:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <display_process+0x44c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	73fb      	strb	r3, [r7, #15]
		if (target_tmp1>=menu_lookup_count) target_tmp1=0;    // check in case
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	2b27      	cmp	r3, #39	; 0x27
 8001d5a:	d901      	bls.n	8001d60 <display_process+0x384>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]
		if (target_display==1) memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+target_tmp1),8);  // copy info for LFO
 8001d60:	4b29      	ldr	r3, [pc, #164]	; (8001e08 <display_process+0x42c>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d10c      	bne.n	8001d82 <display_process+0x3a6>
 8001d68:	89bb      	ldrh	r3, [r7, #12]
 8001d6a:	3308      	adds	r3, #8
 8001d6c:	4a27      	ldr	r2, [pc, #156]	; (8001e0c <display_process+0x430>)
 8001d6e:	1898      	adds	r0, r3, r2
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <display_process+0x434>)
 8001d76:	4413      	add	r3, r2
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2208      	movs	r2, #8
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f008 fa23 	bl	800a1c8 <memcpy>
		if (target_display==2) memcpy(default_menu3+feedback_loc+8, *(patch_inputs+target_tmp1),8);
 8001d82:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <display_process+0x42c>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d10c      	bne.n	8001da4 <display_process+0x3c8>
 8001d8a:	89bb      	ldrh	r3, [r7, #12]
 8001d8c:	3308      	adds	r3, #8
 8001d8e:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <display_process+0x430>)
 8001d90:	1898      	adds	r0, r3, r2
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4a2c      	ldr	r2, [pc, #176]	; (8001e48 <display_process+0x46c>)
 8001d98:	4413      	add	r3, r2
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2208      	movs	r2, #8
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f008 fa12 	bl	800a1c8 <memcpy>
		 		 	}

	if (disp_stepper==1)  gfx_send_cursor=(init_b>>4)&7 ;   //send cursor line
 8001da4:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <display_process+0x450>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d109      	bne.n	8001dc0 <display_process+0x3e4>
 8001dac:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <display_process+0x454>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <display_process+0x470>)
 8001dbe:	701a      	strb	r2, [r3, #0]
	if (disp_stepper==2)  {
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <display_process+0x450>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d11a      	bne.n	8001dfe <display_process+0x422>

		default_menu3[feedback_loc+18]=potSource[380]+48;
 8001dc8:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <display_process+0x474>)
 8001dca:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
 8001dce:	89bb      	ldrh	r3, [r7, #12]
 8001dd0:	3312      	adds	r3, #18
 8001dd2:	3230      	adds	r2, #48	; 0x30
 8001dd4:	b2d1      	uxtb	r1, r2
 8001dd6:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <display_process+0x430>)
 8001dd8:	54d1      	strb	r1, [r2, r3]
		default_menu3[feedback_loc+19]=potSource[381]+48; default_menu3[feedback_loc+20]=potSource[382]+48; }  // write this straight after start ,ok
 8001dda:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <display_process+0x474>)
 8001ddc:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
 8001de0:	89bb      	ldrh	r3, [r7, #12]
 8001de2:	3313      	adds	r3, #19
 8001de4:	3230      	adds	r2, #48	; 0x30
 8001de6:	b2d1      	uxtb	r1, r2
 8001de8:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <display_process+0x430>)
 8001dea:	54d1      	strb	r1, [r2, r3]
 8001dec:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <display_process+0x474>)
 8001dee:	f893 217e 	ldrb.w	r2, [r3, #382]	; 0x17e
 8001df2:	89bb      	ldrh	r3, [r7, #12]
 8001df4:	3314      	adds	r3, #20
 8001df6:	3230      	adds	r2, #48	; 0x30
 8001df8:	b2d1      	uxtb	r1, r2
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <display_process+0x430>)
 8001dfc:	54d1      	strb	r1, [r2, r3]


}   // end o void
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20003cdf 	.word	0x20003cdf
 8001e0c:	20005d0c 	.word	0x20005d0c
 8001e10:	20000244 	.word	0x20000244
 8001e14:	20003ccc 	.word	0x20003ccc
 8001e18:	0800a6c8 	.word	0x0800a6c8
 8001e1c:	20000240 	.word	0x20000240
 8001e20:	20003bc8 	.word	0x20003bc8
 8001e24:	20003cd4 	.word	0x20003cd4
 8001e28:	20003cc8 	.word	0x20003cc8
 8001e2c:	200001b6 	.word	0x200001b6
 8001e30:	20001b9a 	.word	0x20001b9a
 8001e34:	200039c8 	.word	0x200039c8
 8001e38:	20003ce2 	.word	0x20003ce2
 8001e3c:	200026d4 	.word	0x200026d4
 8001e40:	20003cde 	.word	0x20003cde
 8001e44:	20001b8c 	.word	0x20001b8c
 8001e48:	200002e4 	.word	0x200002e4
 8001e4c:	200026c9 	.word	0x200026c9
 8001e50:	20000598 	.word	0x20000598

08001e54 <displayBuffer2>:


void displayBuffer2 (void){       // use only writing characters  ,nothing more  , init_b for selecting location
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
														//when scrolling maybe use this only until  settled
														// start 2*8 bit then squeeze in 20*6 bit characters

	store_c= (default_menu3[init_b]-47)&127 ;    // grab char from mem
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <displayBuffer2+0xfc>)
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b3c      	ldr	r3, [pc, #240]	; (8001f54 <displayBuffer2+0x100>)
 8001e62:	5c9b      	ldrb	r3, [r3, r2]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	3b2f      	subs	r3, #47	; 0x2f
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <displayBuffer2+0x104>)
 8001e72:	801a      	strh	r2, [r3, #0]
	uint8_t init_bx=init_b&127;
 8001e74:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <displayBuffer2+0xfc>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e7e:	71bb      	strb	r3, [r7, #6]

	uint8_t d_count;
uint8_t init_x=(init_bx & 15)+2 ;    // +2 important  2-17 hor char pos
 8001e80:	79bb      	ldrb	r3, [r7, #6]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	3302      	adds	r3, #2
 8001e8a:	717b      	strb	r3, [r7, #5]
uint8_t init_x2=(init_bx>>4)<<3 ;  // 0,8,16-64  vertical pos  gfx
 8001e8c:	79bb      	ldrb	r3, [r7, #6]
 8001e8e:	091b      	lsrs	r3, r3, #4
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	713b      	strb	r3, [r7, #4]
uint16_t init_y=((init_x2)*18)+init_x;   //   works ok  8  bit  0-1152
 8001e96:	793b      	ldrb	r3, [r7, #4]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	00d2      	lsls	r2, r2, #3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	797b      	ldrb	r3, [r7, #5]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	807b      	strh	r3, [r7, #2]
uint16_t store_x;

store_x=(store_c*8);  // i line characters , might shrink it and use extr for other  visuals , old code but keep for now
 8001eac:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <displayBuffer2+0x104>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	803b      	strh	r3, [r7, #0]


		if ( (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 8001eb4:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <displayBuffer2+0x108>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d11a      	bne.n	8001ef2 <displayBuffer2+0x9e>
			for (d_count=0;d_count<8;d_count++){
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	71fb      	strb	r3, [r7, #7]
 8001ec0:	e013      	b.n	8001eea <displayBuffer2+0x96>

				gfx_ram[init_y+(d_count*18) ]= gfx_char[d_count+store_x]^127; //write character to ram ,should be elsewhere , blank is correct
 8001ec2:	79fa      	ldrb	r2, [r7, #7]
 8001ec4:	883b      	ldrh	r3, [r7, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	4a25      	ldr	r2, [pc, #148]	; (8001f60 <displayBuffer2+0x10c>)
 8001eca:	5cd1      	ldrb	r1, [r2, r3]
 8001ecc:	8878      	ldrh	r0, [r7, #2]
 8001ece:	79fa      	ldrb	r2, [r7, #7]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4403      	add	r3, r0
 8001eda:	f081 027f 	eor.w	r2, r1, #127	; 0x7f
 8001ede:	b2d1      	uxtb	r1, r2
 8001ee0:	4a20      	ldr	r2, [pc, #128]	; (8001f64 <displayBuffer2+0x110>)
 8001ee2:	54d1      	strb	r1, [r2, r3]
			for (d_count=0;d_count<8;d_count++){
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	71fb      	strb	r3, [r7, #7]
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	2b07      	cmp	r3, #7
 8001eee:	d9e8      	bls.n	8001ec2 <displayBuffer2+0x6e>
 8001ef0:	e016      	b.n	8001f20 <displayBuffer2+0xcc>
			}

		else for (d_count=0;d_count<8;d_count++){
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	71fb      	strb	r3, [r7, #7]
 8001ef6:	e010      	b.n	8001f1a <displayBuffer2+0xc6>
			gfx_ram[init_y+(d_count*18) ]= gfx_char[d_count+store_x]; //write character to ram ,should be elsewhere , seems affected by later stufff
 8001ef8:	79fa      	ldrb	r2, [r7, #7]
 8001efa:	883b      	ldrh	r3, [r7, #0]
 8001efc:	18d1      	adds	r1, r2, r3
 8001efe:	8878      	ldrh	r0, [r7, #2]
 8001f00:	79fa      	ldrb	r2, [r7, #7]
 8001f02:	4613      	mov	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4413      	add	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4403      	add	r3, r0
 8001f0c:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <displayBuffer2+0x10c>)
 8001f0e:	5c51      	ldrb	r1, [r2, r1]
 8001f10:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <displayBuffer2+0x110>)
 8001f12:	54d1      	strb	r1, [r2, r3]
		else for (d_count=0;d_count<8;d_count++){
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	3301      	adds	r3, #1
 8001f18:	71fb      	strb	r3, [r7, #7]
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	2b07      	cmp	r3, #7
 8001f1e:	d9eb      	bls.n	8001ef8 <displayBuffer2+0xa4>
		}

if (disp_stepper==17) {disp_stepper=0;enc2_add=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <displayBuffer2+0x108>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b11      	cmp	r3, #17
 8001f26:	d106      	bne.n	8001f36 <displayBuffer2+0xe2>
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <displayBuffer2+0x108>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <displayBuffer2+0x114>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]


}    // displayBuffer2
 8001f34:	e005      	b.n	8001f42 <displayBuffer2+0xee>
if (disp_stepper==17) {disp_stepper=0;enc2_add=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <displayBuffer2+0x108>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <displayBuffer2+0x108>)
 8001f40:	701a      	strb	r2, [r3, #0]
}    // displayBuffer2
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20001b9a 	.word	0x20001b9a
 8001f54:	20005d0c 	.word	0x20005d0c
 8001f58:	2000072a 	.word	0x2000072a
 8001f5c:	200001b6 	.word	0x200001b6
 8001f60:	0800b138 	.word	0x0800b138
 8001f64:	20002244 	.word	0x20002244
 8001f68:	200001b5 	.word	0x200001b5

08001f6c <note_reset>:


void note_reset (void){          // reset deafult values before modulation , in case it gets left  with no modulator
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0

	note[0].velocity=255;note[1].velocity=255;note[2].velocity=255;note[3].velocity=255;note[4].velocity=255;note[5].velocity=255;note[6].velocity=255
 8001f70:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <note_reset+0x78>)
 8001f72:	22ff      	movs	r2, #255	; 0xff
 8001f74:	71da      	strb	r2, [r3, #7]
 8001f76:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <note_reset+0x78>)
 8001f78:	22ff      	movs	r2, #255	; 0xff
 8001f7a:	755a      	strb	r2, [r3, #21]
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <note_reset+0x78>)
 8001f7e:	22ff      	movs	r2, #255	; 0xff
 8001f80:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001f84:	4b17      	ldr	r3, [pc, #92]	; (8001fe4 <note_reset+0x78>)
 8001f86:	22ff      	movs	r2, #255	; 0xff
 8001f88:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8001f8c:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <note_reset+0x78>)
 8001f8e:	22ff      	movs	r2, #255	; 0xff
 8001f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <note_reset+0x78>)
 8001f96:	22ff      	movs	r2, #255	; 0xff
 8001f98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <note_reset+0x78>)
 8001f9e:	22ff      	movs	r2, #255	; 0xff
 8001fa0:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
																;note[0].detune=127;note[1].detune=127;note[2].detune=127;note[3].detune=127;note[4].detune=127;
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <note_reset+0x78>)
 8001fa6:	227f      	movs	r2, #127	; 0x7f
 8001fa8:	721a      	strb	r2, [r3, #8]
 8001faa:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <note_reset+0x78>)
 8001fac:	227f      	movs	r2, #127	; 0x7f
 8001fae:	759a      	strb	r2, [r3, #22]
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <note_reset+0x78>)
 8001fb2:	227f      	movs	r2, #127	; 0x7f
 8001fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <note_reset+0x78>)
 8001fba:	227f      	movs	r2, #127	; 0x7f
 8001fbc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <note_reset+0x78>)
 8001fc2:	227f      	movs	r2, #127	; 0x7f
 8001fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	note[5].detune=127;note[6].detune=127;
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <note_reset+0x78>)
 8001fca:	227f      	movs	r2, #127	; 0x7f
 8001fcc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <note_reset+0x78>)
 8001fd2:	227f      	movs	r2, #127	; 0x7f
 8001fd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c


}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	200001bc 	.word	0x200001bc

08001fe8 <sampling>:


return  output;

}
void sampling(void){						// 330 atm or 8.5ms
 8001fe8:	b5b0      	push	{r4, r5, r7, lr}
 8001fea:	b0a2      	sub	sp, #136	; 0x88
 8001fec:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;

//time_proc=0;

	time_proc=0;
 8001fee:	4ba6      	ldr	r3, [pc, #664]	; (8002288 <sampling+0x2a0>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	801a      	strh	r2, [r3, #0]

uint8_t mask_i;


bank_write=0;
 8001ff4:	4ba5      	ldr	r3, [pc, #660]	; (800228c <sampling+0x2a4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	801a      	strh	r2, [r3, #0]
memcpy(notes_joined,seq.notes2,16);
 8001ffa:	2210      	movs	r2, #16
 8001ffc:	49a4      	ldr	r1, [pc, #656]	; (8002290 <sampling+0x2a8>)
 8001ffe:	48a5      	ldr	r0, [pc, #660]	; (8002294 <sampling+0x2ac>)
 8002000:	f008 f8e2 	bl	800a1c8 <memcpy>
memcpy(notes_joined+16,seq.notes1,16);
 8002004:	4ba4      	ldr	r3, [pc, #656]	; (8002298 <sampling+0x2b0>)
 8002006:	2210      	movs	r2, #16
 8002008:	49a4      	ldr	r1, [pc, #656]	; (800229c <sampling+0x2b4>)
 800200a:	4618      	mov	r0, r3
 800200c:	f008 f8dc 	bl	800a1c8 <memcpy>
sample_pointB=sample_pointD;
 8002010:	4ba3      	ldr	r3, [pc, #652]	; (80022a0 <sampling+0x2b8>)
 8002012:	881a      	ldrh	r2, [r3, #0]
 8002014:	4ba3      	ldr	r3, [pc, #652]	; (80022a4 <sampling+0x2bc>)
 8002016:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 8002018:	2300      	movs	r3, #0
 800201a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 800201e:	4ba2      	ldr	r3, [pc, #648]	; (80022a8 <sampling+0x2c0>)
 8002020:	785b      	ldrb	r3, [r3, #1]
 8002022:	461a      	mov	r2, r3
 8002024:	4ba1      	ldr	r3, [pc, #644]	; (80022ac <sampling+0x2c4>)
 8002026:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800202a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s

tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 800202e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002032:	2b00      	cmp	r3, #0
 8002034:	da00      	bge.n	8002038 <sampling+0x50>
 8002036:	331f      	adds	r3, #31
 8002038:	115b      	asrs	r3, r3, #5
 800203a:	461a      	mov	r2, r3
 800203c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002040:	fb93 f3f2 	sdiv	r3, r3, r2
 8002044:	ee07 3a90 	vmov	s15, r3
 8002048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800204c:	4b98      	ldr	r3, [pc, #608]	; (80022b0 <sampling+0x2c8>)
 800204e:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 8002052:	4b97      	ldr	r3, [pc, #604]	; (80022b0 <sampling+0x2c8>)
 8002054:	ed93 7a00 	vldr	s14, [r3]
 8002058:	eddf 6a96 	vldr	s13, [pc, #600]	; 80022b4 <sampling+0x2cc>
 800205c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002060:	4b93      	ldr	r3, [pc, #588]	; (80022b0 <sampling+0x2c8>)
 8002062:	edc3 7a00 	vstr	s15, [r3]


uint32_t lfo_tempo_hold;

if (tempo_mod_hold!=tempo_mod){					// lfo lut calculate only when changes tempo
 8002066:	4b94      	ldr	r3, [pc, #592]	; (80022b8 <sampling+0x2d0>)
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800206e:	429a      	cmp	r2, r3
 8002070:	d034      	beq.n	80020dc <sampling+0xf4>

		float lfo_tempo_calc=((62831*4)/(tempo_mod)); // deafualt 1 note
 8002072:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002076:	4a91      	ldr	r2, [pc, #580]	; (80022bc <sampling+0x2d4>)
 8002078:	fb92 f3f3 	sdiv	r3, r2, r3
 800207c:	ee07 3a90 	vmov	s15, r3
 8002080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002084:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74


						for (i=0;i<256;i++){								// 128 is 1 note
 8002088:	4b8d      	ldr	r3, [pc, #564]	; (80022c0 <sampling+0x2d8>)
 800208a:	2200      	movs	r2, #0
 800208c:	801a      	strh	r2, [r3, #0]
 800208e:	e021      	b.n	80020d4 <sampling+0xec>
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/64;
 8002090:	4b8b      	ldr	r3, [pc, #556]	; (80022c0 <sampling+0x2d8>)
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	ee07 3a90 	vmov	s15, r3
 800209a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800209e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80020a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020a6:	eddf 6a87 	vldr	s13, [pc, #540]	; 80022c4 <sampling+0x2dc>
 80020aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020b2:	ee17 3a90 	vmov	r3, s15
 80020b6:	673b      	str	r3, [r7, #112]	; 0x70
	lfo_tempo_lut[i]= lfo_tempo_hold;
 80020b8:	4b81      	ldr	r3, [pc, #516]	; (80022c0 <sampling+0x2d8>)
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	461a      	mov	r2, r3
 80020be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c0:	b299      	uxth	r1, r3
 80020c2:	4b81      	ldr	r3, [pc, #516]	; (80022c8 <sampling+0x2e0>)
 80020c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						for (i=0;i<256;i++){								// 128 is 1 note
 80020c8:	4b7d      	ldr	r3, [pc, #500]	; (80022c0 <sampling+0x2d8>)
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	3301      	adds	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	4b7b      	ldr	r3, [pc, #492]	; (80022c0 <sampling+0x2d8>)
 80020d2:	801a      	strh	r2, [r3, #0]
 80020d4:	4b7a      	ldr	r3, [pc, #488]	; (80022c0 <sampling+0x2d8>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	2bff      	cmp	r3, #255	; 0xff
 80020da:	d9d9      	bls.n	8002090 <sampling+0xa8>

}}
tempo_mod_hold=tempo_mod;   // for lfo
 80020dc:	4a76      	ldr	r2, [pc, #472]	; (80022b8 <sampling+0x2d0>)
 80020de:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80020e2:	8013      	strh	r3, [r2, #0]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 80020e4:	f107 0318 	add.w	r3, r7, #24
 80020e8:	2244      	movs	r2, #68	; 0x44
 80020ea:	2100      	movs	r1, #0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f008 f879 	bl	800a1e4 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 80020f2:	4b73      	ldr	r3, [pc, #460]	; (80022c0 <sampling+0x2d8>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	801a      	strh	r2, [r3, #0]
 80020f8:	e00d      	b.n	8002116 <sampling+0x12e>
 80020fa:	4b71      	ldr	r3, [pc, #452]	; (80022c0 <sampling+0x2d8>)
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	3388      	adds	r3, #136	; 0x88
 8002102:	443b      	add	r3, r7
 8002104:	2200      	movs	r2, #0
 8002106:	f843 2c70 	str.w	r2, [r3, #-112]
 800210a:	4b6d      	ldr	r3, [pc, #436]	; (80022c0 <sampling+0x2d8>)
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	3301      	adds	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	4b6b      	ldr	r3, [pc, #428]	; (80022c0 <sampling+0x2d8>)
 8002114:	801a      	strh	r2, [r3, #0]
 8002116:	4b6a      	ldr	r3, [pc, #424]	; (80022c0 <sampling+0x2d8>)
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	2b0f      	cmp	r3, #15
 800211c:	d9ed      	bls.n	80020fa <sampling+0x112>
	//potSource[150]=(freq_point[0])*100; //0-2

potSource[380]=(lcd_out3/100);  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 800211e:	4b6b      	ldr	r3, [pc, #428]	; (80022cc <sampling+0x2e4>)
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	4a6b      	ldr	r2, [pc, #428]	; (80022d0 <sampling+0x2e8>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	095b      	lsrs	r3, r3, #5
 800212a:	b29b      	uxth	r3, r3
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4b69      	ldr	r3, [pc, #420]	; (80022d4 <sampling+0x2ec>)
 8002130:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
potSource[381]=((lcd_out3 %100)/10);		 // 0-160 to 0-10
 8002134:	4b65      	ldr	r3, [pc, #404]	; (80022cc <sampling+0x2e4>)
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	4a65      	ldr	r2, [pc, #404]	; (80022d0 <sampling+0x2e8>)
 800213a:	fba2 1203 	umull	r1, r2, r2, r3
 800213e:	0952      	lsrs	r2, r2, #5
 8002140:	2164      	movs	r1, #100	; 0x64
 8002142:	fb01 f202 	mul.w	r2, r1, r2
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	b29b      	uxth	r3, r3
 800214a:	4a63      	ldr	r2, [pc, #396]	; (80022d8 <sampling+0x2f0>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	08db      	lsrs	r3, r3, #3
 8002152:	b29b      	uxth	r3, r3
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4b5f      	ldr	r3, [pc, #380]	; (80022d4 <sampling+0x2ec>)
 8002158:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
potSource[382]=(lcd_out3%10);
 800215c:	4b5b      	ldr	r3, [pc, #364]	; (80022cc <sampling+0x2e4>)
 800215e:	881a      	ldrh	r2, [r3, #0]
 8002160:	4b5d      	ldr	r3, [pc, #372]	; (80022d8 <sampling+0x2f0>)
 8002162:	fba3 1302 	umull	r1, r3, r3, r2
 8002166:	08d9      	lsrs	r1, r3, #3
 8002168:	460b      	mov	r3, r1
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	b29b      	uxth	r3, r3
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b57      	ldr	r3, [pc, #348]	; (80022d4 <sampling+0x2ec>)
 8002178:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e



note_holdA=0;
 800217c:	4b57      	ldr	r3, [pc, #348]	; (80022dc <sampling+0x2f4>)
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]

// some good phasin and delays here
uint8_t cross_fade[2]={0,0};
 8002182:	2300      	movs	r3, #0
 8002184:	82bb      	strh	r3, [r7, #20]
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 8002186:	4b56      	ldr	r3, [pc, #344]	; (80022e0 <sampling+0x2f8>)
 8002188:	463c      	mov	r4, r7
 800218a:	461d      	mov	r5, r3
 800218c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800218e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002190:	682b      	ldr	r3, [r5, #0]
 8002192:	7023      	strb	r3, [r4, #0]
adc_values[2]= 15; //force for now
 8002194:	4b53      	ldr	r3, [pc, #332]	; (80022e4 <sampling+0x2fc>)
 8002196:	220f      	movs	r2, #15
 8002198:	809a      	strh	r2, [r3, #4]
if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader
 800219a:	4b52      	ldr	r3, [pc, #328]	; (80022e4 <sampling+0x2fc>)
 800219c:	889b      	ldrh	r3, [r3, #4]
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00e      	beq.n	80021c4 <sampling+0x1dc>
 80021a6:	4b4f      	ldr	r3, [pc, #316]	; (80022e4 <sampling+0x2fc>)
 80021a8:	889b      	ldrh	r3, [r3, #4]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3388      	adds	r3, #136	; 0x88
 80021b0:	443b      	add	r3, r7
 80021b2:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 80021b6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	757b      	strb	r3, [r7, #21]
 80021be:	237f      	movs	r3, #127	; 0x7f
 80021c0:	75bb      	strb	r3, [r7, #22]
 80021c2:	e00a      	b.n	80021da <sampling+0x1f2>
 80021c4:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <sampling+0x2fc>)
 80021c6:	889b      	ldrh	r3, [r3, #4]
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	3388      	adds	r3, #136	; 0x88
 80021ce:	443b      	add	r3, r7
 80021d0:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 80021d4:	75bb      	strb	r3, [r7, #22]
 80021d6:	237f      	movs	r3, #127	; 0x7f
 80021d8:	757b      	strb	r3, [r7, #21]

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (ADSR[0].attack_trigger==0) {		adsr_att=(161-ADSR[0].attack ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 80021da:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <sampling+0x300>)
 80021dc:	791b      	ldrb	r3, [r3, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d146      	bne.n	8002270 <sampling+0x288>
 80021e2:	4b41      	ldr	r3, [pc, #260]	; (80022e8 <sampling+0x300>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fa78 	bl	80006e0 <__aeabi_i2d>
 80021f0:	a321      	add	r3, pc, #132	; (adr r3, 8002278 <sampling+0x290>)
 80021f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f6:	f7fd fff7 	bl	80001e8 <__aeabi_dmul>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	f7fe fad7 	bl	80007b4 <__aeabi_d2f>
 8002206:	4603      	mov	r3, r0
 8002208:	4a38      	ldr	r2, [pc, #224]	; (80022ec <sampling+0x304>)
 800220a:	6013      	str	r3, [r2, #0]
ADSR[0].sustain_data=((161-ADSR[0].decay)*0.01);  // length and level this is ok is running 1/16 ish				ADSR[0].attack_data=ADSR[0].attack_data-ADSR[0].sustain_data;
 800220c:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <sampling+0x300>)
 800220e:	785b      	ldrb	r3, [r3, #1]
 8002210:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fa63 	bl	80006e0 <__aeabi_i2d>
 800221a:	a319      	add	r3, pc, #100	; (adr r3, 8002280 <sampling+0x298>)
 800221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002220:	f7fd ffe2 	bl	80001e8 <__aeabi_dmul>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	f7fe fac2 	bl	80007b4 <__aeabi_d2f>
 8002230:	4603      	mov	r3, r0
 8002232:	4a2d      	ldr	r2, [pc, #180]	; (80022e8 <sampling+0x300>)
 8002234:	6113      	str	r3, [r2, #16]
adsr_att=adsr_att*adsr_att;
 8002236:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <sampling+0x304>)
 8002238:	ed93 7a00 	vldr	s14, [r3]
 800223c:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <sampling+0x304>)
 800223e:	edd3 7a00 	vldr	s15, [r3]
 8002242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002246:	4b29      	ldr	r3, [pc, #164]	; (80022ec <sampling+0x304>)
 8002248:	edc3 7a00 	vstr	s15, [r3]
ADSR[0].sustain_data=ADSR[0].sustain_data*ADSR[0].sustain_data;
 800224c:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <sampling+0x300>)
 800224e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002252:	4b25      	ldr	r3, [pc, #148]	; (80022e8 <sampling+0x300>)
 8002254:	edd3 7a04 	vldr	s15, [r3, #16]
 8002258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225c:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <sampling+0x300>)
 800225e:	edc3 7a04 	vstr	s15, [r3, #16]

ADSR[0].attack_trigger=1;
 8002262:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <sampling+0x300>)
 8002264:	2201      	movs	r2, #1
 8002266:	711a      	strb	r2, [r3, #4]
ADSR[0].attack_data=0;
 8002268:	4b1f      	ldr	r3, [pc, #124]	; (80022e8 <sampling+0x300>)
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
}

//float ADSR[0].buffer_temp;    // adsr

for (i=0;i<256;i++) {
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <sampling+0x2d8>)
 8002272:	2200      	movs	r2, #0
 8002274:	801a      	strh	r2, [r3, #0]
 8002276:	e0fb      	b.n	8002470 <sampling+0x488>
 8002278:	47ae147b 	.word	0x47ae147b
 800227c:	3f947ae1 	.word	0x3f947ae1
 8002280:	47ae147b 	.word	0x47ae147b
 8002284:	3f847ae1 	.word	0x3f847ae1
 8002288:	20002af0 	.word	0x20002af0
 800228c:	200001b2 	.word	0x200001b2
 8002290:	2000383b 	.word	0x2000383b
 8002294:	20005ce8 	.word	0x20005ce8
 8002298:	20005cf8 	.word	0x20005cf8
 800229c:	2000382a 	.word	0x2000382a
 80022a0:	20000f5a 	.word	0x20000f5a
 80022a4:	2000074e 	.word	0x2000074e
 80022a8:	20003828 	.word	0x20003828
 80022ac:	20001e40 	.word	0x20001e40
 80022b0:	200026cc 	.word	0x200026cc
 80022b4:	42a00000 	.word	0x42a00000
 80022b8:	20002240 	.word	0x20002240
 80022bc:	0003d5bc 	.word	0x0003d5bc
 80022c0:	20000750 	.word	0x20000750
 80022c4:	42800000 	.word	0x42800000
 80022c8:	20002040 	.word	0x20002040
 80022cc:	200026d4 	.word	0x200026d4
 80022d0:	51eb851f 	.word	0x51eb851f
 80022d4:	20000598 	.word	0x20000598
 80022d8:	cccccccd 	.word	0xcccccccd
 80022dc:	20001b66 	.word	0x20001b66
 80022e0:	0800a6cc 	.word	0x0800a6cc
 80022e4:	200001a8 	.word	0x200001a8
 80022e8:	20002d9c 	.word	0x20002d9c
 80022ec:	200026d0 	.word	0x200026d0

	if     (ADSR[0].attack_data<1000)    																		{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=ADSR[0].attack_data; } //0-1000
 80022f0:	4b85      	ldr	r3, [pc, #532]	; (8002508 <sampling+0x520>)
 80022f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80022f6:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800250c <sampling+0x524>
 80022fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002302:	d50e      	bpl.n	8002322 <sampling+0x33a>
 8002304:	4b80      	ldr	r3, [pc, #512]	; (8002508 <sampling+0x520>)
 8002306:	ed93 7a02 	vldr	s14, [r3, #8]
 800230a:	4b81      	ldr	r3, [pc, #516]	; (8002510 <sampling+0x528>)
 800230c:	edd3 7a00 	vldr	s15, [r3]
 8002310:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002314:	4b7c      	ldr	r3, [pc, #496]	; (8002508 <sampling+0x520>)
 8002316:	edc3 7a02 	vstr	s15, [r3, #8]
 800231a:	4b7b      	ldr	r3, [pc, #492]	; (8002508 <sampling+0x520>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	4a7a      	ldr	r2, [pc, #488]	; (8002508 <sampling+0x520>)
 8002320:	6193      	str	r3, [r2, #24]
	 if  ((ADSR[0].attack_data<1500)  && (ADSR[0].attack_data>999))  					{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=1500-(ADSR[0].attack_data-500);  }  // 1000-500
 8002322:	4b79      	ldr	r3, [pc, #484]	; (8002508 <sampling+0x520>)
 8002324:	edd3 7a02 	vldr	s15, [r3, #8]
 8002328:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002514 <sampling+0x52c>
 800232c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002334:	d522      	bpl.n	800237c <sampling+0x394>
 8002336:	4b74      	ldr	r3, [pc, #464]	; (8002508 <sampling+0x520>)
 8002338:	edd3 7a02 	vldr	s15, [r3, #8]
 800233c:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002518 <sampling+0x530>
 8002340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002348:	dd18      	ble.n	800237c <sampling+0x394>
 800234a:	4b6f      	ldr	r3, [pc, #444]	; (8002508 <sampling+0x520>)
 800234c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002350:	4b6f      	ldr	r3, [pc, #444]	; (8002510 <sampling+0x528>)
 8002352:	edd3 7a00 	vldr	s15, [r3]
 8002356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800235a:	4b6b      	ldr	r3, [pc, #428]	; (8002508 <sampling+0x520>)
 800235c:	edc3 7a02 	vstr	s15, [r3, #8]
 8002360:	4b69      	ldr	r3, [pc, #420]	; (8002508 <sampling+0x520>)
 8002362:	edd3 7a02 	vldr	s15, [r3, #8]
 8002366:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800251c <sampling+0x534>
 800236a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800236e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002514 <sampling+0x52c>
 8002372:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002376:	4b64      	ldr	r3, [pc, #400]	; (8002508 <sampling+0x520>)
 8002378:	edc3 7a06 	vstr	s15, [r3, #24]
	 if ((ADSR[0].attack_data>1499)   && 		(ADSR[0].attack_data<2000)) 			{		ADSR[0].buffer_temp=500; 	ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data;}
 800237c:	4b62      	ldr	r3, [pc, #392]	; (8002508 <sampling+0x520>)
 800237e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002382:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002520 <sampling+0x538>
 8002386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800238a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238e:	dd17      	ble.n	80023c0 <sampling+0x3d8>
 8002390:	4b5d      	ldr	r3, [pc, #372]	; (8002508 <sampling+0x520>)
 8002392:	edd3 7a02 	vldr	s15, [r3, #8]
 8002396:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002524 <sampling+0x53c>
 800239a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800239e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a2:	d50d      	bpl.n	80023c0 <sampling+0x3d8>
 80023a4:	4b58      	ldr	r3, [pc, #352]	; (8002508 <sampling+0x520>)
 80023a6:	4a60      	ldr	r2, [pc, #384]	; (8002528 <sampling+0x540>)
 80023a8:	619a      	str	r2, [r3, #24]
 80023aa:	4b57      	ldr	r3, [pc, #348]	; (8002508 <sampling+0x520>)
 80023ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80023b0:	4b55      	ldr	r3, [pc, #340]	; (8002508 <sampling+0x520>)
 80023b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80023b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ba:	4b53      	ldr	r3, [pc, #332]	; (8002508 <sampling+0x520>)
 80023bc:	edc3 7a02 	vstr	s15, [r3, #8]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)					{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
 80023c0:	4b51      	ldr	r3, [pc, #324]	; (8002508 <sampling+0x520>)
 80023c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80023c6:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800252c <sampling+0x544>
 80023ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d2:	dd1e      	ble.n	8002412 <sampling+0x42a>
 80023d4:	4b4c      	ldr	r3, [pc, #304]	; (8002508 <sampling+0x520>)
 80023d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80023da:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8002530 <sampling+0x548>
 80023de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e6:	d514      	bpl.n	8002412 <sampling+0x42a>
 80023e8:	4b47      	ldr	r3, [pc, #284]	; (8002508 <sampling+0x520>)
 80023ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80023ee:	4b46      	ldr	r3, [pc, #280]	; (8002508 <sampling+0x520>)
 80023f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80023f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f8:	4b43      	ldr	r3, [pc, #268]	; (8002508 <sampling+0x520>)
 80023fa:	edc3 7a02 	vstr	s15, [r3, #8]
 80023fe:	4b42      	ldr	r3, [pc, #264]	; (8002508 <sampling+0x520>)
 8002400:	edd3 7a02 	vldr	s15, [r3, #8]
 8002404:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002530 <sampling+0x548>
 8002408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800240c:	4b3e      	ldr	r3, [pc, #248]	; (8002508 <sampling+0x520>)
 800240e:	edc3 7a06 	vstr	s15, [r3, #24]
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END
 8002412:	4b3d      	ldr	r3, [pc, #244]	; (8002508 <sampling+0x520>)
 8002414:	edd3 7a02 	vldr	s15, [r3, #8]
 8002418:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002534 <sampling+0x54c>
 800241c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002424:	dd06      	ble.n	8002434 <sampling+0x44c>
 8002426:	4b38      	ldr	r3, [pc, #224]	; (8002508 <sampling+0x520>)
 8002428:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800242c:	619a      	str	r2, [r3, #24]
 800242e:	4b36      	ldr	r3, [pc, #216]	; (8002508 <sampling+0x520>)
 8002430:	4a41      	ldr	r2, [pc, #260]	; (8002538 <sampling+0x550>)
 8002432:	609a      	str	r2, [r3, #8]

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
 8002434:	4b34      	ldr	r3, [pc, #208]	; (8002508 <sampling+0x520>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe f963 	bl	8000704 <__aeabi_f2d>
 800243e:	a330      	add	r3, pc, #192	; (adr r3, 8002500 <sampling+0x518>)
 8002440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002444:	f7fd fed0 	bl	80001e8 <__aeabi_dmul>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	493b      	ldr	r1, [pc, #236]	; (800253c <sampling+0x554>)
 800244e:	8809      	ldrh	r1, [r1, #0]
 8002450:	460c      	mov	r4, r1
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	f7fe f9ad 	bl	80007b4 <__aeabi_d2f>
 800245a:	4602      	mov	r2, r0
 800245c:	4938      	ldr	r1, [pc, #224]	; (8002540 <sampling+0x558>)
 800245e:	00a3      	lsls	r3, r4, #2
 8002460:	440b      	add	r3, r1
 8002462:	601a      	str	r2, [r3, #0]
for (i=0;i<256;i++) {
 8002464:	4b35      	ldr	r3, [pc, #212]	; (800253c <sampling+0x554>)
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	3301      	adds	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	4b33      	ldr	r3, [pc, #204]	; (800253c <sampling+0x554>)
 800246e:	801a      	strh	r2, [r3, #0]
 8002470:	4b32      	ldr	r3, [pc, #200]	; (800253c <sampling+0x554>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	2bff      	cmp	r3, #255	; 0xff
 8002476:	f67f af3b 	bls.w	80022f0 <sampling+0x308>


///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 800247a:	4b30      	ldr	r3, [pc, #192]	; (800253c <sampling+0x554>)
 800247c:	2200      	movs	r2, #0
 800247e:	801a      	strh	r2, [r3, #0]
 8002480:	e1e1      	b.n	8002846 <sampling+0x85e>

	i_total=i+sample_pointB;
 8002482:	4b2e      	ldr	r3, [pc, #184]	; (800253c <sampling+0x554>)
 8002484:	881a      	ldrh	r2, [r3, #0]
 8002486:	4b2f      	ldr	r3, [pc, #188]	; (8002544 <sampling+0x55c>)
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	4413      	add	r3, r2
 800248c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	sampling_position=i>>6;   //   0-8 steps
 8002490:	4b2a      	ldr	r3, [pc, #168]	; (800253c <sampling+0x554>)
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	099b      	lsrs	r3, r3, #6
 8002496:	b29b      	uxth	r3, r3
 8002498:	b2da      	uxtb	r2, r3
 800249a:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <sampling+0x560>)
 800249c:	701a      	strb	r2, [r3, #0]
	sampling_position_b=(sampling_position+7)&7;
 800249e:	4b2a      	ldr	r3, [pc, #168]	; (8002548 <sampling+0x560>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	3307      	adds	r3, #7
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	4b27      	ldr	r3, [pc, #156]	; (800254c <sampling+0x564>)
 80024ae:	701a      	strb	r2, [r3, #0]
	note_plain=seq.notes1[seq.pos & 7 ];
 80024b0:	4b27      	ldr	r3, [pc, #156]	; (8002550 <sampling+0x568>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	4a25      	ldr	r2, [pc, #148]	; (8002550 <sampling+0x568>)
 80024ba:	4413      	add	r3, r2
 80024bc:	789b      	ldrb	r3, [r3, #2]
 80024be:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
potValues[i&255]=potSource[i&255]>>4; //just to update values
 80024c2:	4b1e      	ldr	r3, [pc, #120]	; (800253c <sampling+0x554>)
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	4a22      	ldr	r2, [pc, #136]	; (8002554 <sampling+0x56c>)
 80024ca:	5cd2      	ldrb	r2, [r2, r3]
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <sampling+0x554>)
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	0912      	lsrs	r2, r2, #4
 80024d4:	b2d1      	uxtb	r1, r2
 80024d6:	4a20      	ldr	r2, [pc, #128]	; (8002558 <sampling+0x570>)
 80024d8:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <sampling+0x574>)
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d83e      	bhi.n	8002564 <sampling+0x57c>
 80024e6:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <sampling+0x578>)
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	3301      	adds	r3, #1
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <sampling+0x578>)
 80024f6:	801a      	strh	r2, [r3, #0]
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <sampling+0x574>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	801a      	strh	r2, [r3, #0]
 80024fe:	e037      	b.n	8002570 <sampling+0x588>
 8002500:	d2f1a9fc 	.word	0xd2f1a9fc
 8002504:	3f50624d 	.word	0x3f50624d
 8002508:	20002d9c 	.word	0x20002d9c
 800250c:	447a0000 	.word	0x447a0000
 8002510:	200026d0 	.word	0x200026d0
 8002514:	44bb8000 	.word	0x44bb8000
 8002518:	4479c000 	.word	0x4479c000
 800251c:	43fa0000 	.word	0x43fa0000
 8002520:	44bb6000 	.word	0x44bb6000
 8002524:	44fa0000 	.word	0x44fa0000
 8002528:	43fa0000 	.word	0x43fa0000
 800252c:	44f9e000 	.word	0x44f9e000
 8002530:	451c4000 	.word	0x451c4000
 8002534:	453b8000 	.word	0x453b8000
 8002538:	457a0000 	.word	0x457a0000
 800253c:	20000750 	.word	0x20000750
 8002540:	20001764 	.word	0x20001764
 8002544:	2000074e 	.word	0x2000074e
 8002548:	20003ce0 	.word	0x20003ce0
 800254c:	20003ce1 	.word	0x20003ce1
 8002550:	20003828 	.word	0x20003828
 8002554:	20000598 	.word	0x20000598
 8002558:	20000418 	.word	0x20000418
 800255c:	20001b8e 	.word	0x20001b8e
 8002560:	20001b64 	.word	0x20001b64
 8002564:	4b82      	ldr	r3, [pc, #520]	; (8002770 <sampling+0x788>)
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	4b80      	ldr	r3, [pc, #512]	; (8002770 <sampling+0x788>)
 800256e:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8002570:	2300      	movs	r3, #0
 8002572:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	if ((next_isr>>4) != (seq.pos)) { 					//     min 6400 cycles per seq.pos ,         next note step 140ms
 8002576:	4b7f      	ldr	r3, [pc, #508]	; (8002774 <sampling+0x78c>)
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	b29a      	uxth	r2, r3
 800257e:	4b7e      	ldr	r3, [pc, #504]	; (8002778 <sampling+0x790>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	429a      	cmp	r2, r3
 8002586:	d009      	beq.n	800259c <sampling+0x5b4>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8002588:	4b7a      	ldr	r3, [pc, #488]	; (8002774 <sampling+0x78c>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	b29b      	uxth	r3, r3
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4b79      	ldr	r3, [pc, #484]	; (8002778 <sampling+0x790>)
 8002594:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 8002596:	2301      	movs	r3, #1
 8002598:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos ie once in ten bankwrites ,rare
 800259c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 8142 	beq.w	800282a <sampling+0x842>
	{

		note_reset();
 80025a6:	f7ff fce1 	bl	8001f6c <note_reset>
		note[1].timeshift=(adc_values[0])&31; //assigned pots to start of loopers 0-16,works
 80025aa:	4b74      	ldr	r3, [pc, #464]	; (800277c <sampling+0x794>)
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4b72      	ldr	r3, [pc, #456]	; (8002780 <sampling+0x798>)
 80025b8:	751a      	strb	r2, [r3, #20]
		note[2].timeshift=note[1].timeshift;
 80025ba:	4b71      	ldr	r3, [pc, #452]	; (8002780 <sampling+0x798>)
 80025bc:	7d1a      	ldrb	r2, [r3, #20]
 80025be:	4b70      	ldr	r3, [pc, #448]	; (8002780 <sampling+0x798>)
 80025c0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		note[3].timeshift=(adc_values[1])&31;
 80025c4:	4b6d      	ldr	r3, [pc, #436]	; (800277c <sampling+0x794>)
 80025c6:	885b      	ldrh	r3, [r3, #2]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	4b6b      	ldr	r3, [pc, #428]	; (8002780 <sampling+0x798>)
 80025d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		note[4].timeshift=note[3].timeshift;
 80025d6:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <sampling+0x798>)
 80025d8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80025dc:	4b68      	ldr	r3, [pc, #416]	; (8002780 <sampling+0x798>)
 80025de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		seq.loop[1]=((note[1].timeshift+(seq.pos&7))&31);
 80025e2:	4b67      	ldr	r3, [pc, #412]	; (8002780 <sampling+0x798>)
 80025e4:	7d1a      	ldrb	r2, [r3, #20]
 80025e6:	4b64      	ldr	r3, [pc, #400]	; (8002778 <sampling+0x790>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4b5f      	ldr	r3, [pc, #380]	; (8002778 <sampling+0x790>)
 80025fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		seq.loop[2]=((note[2].timeshift+(seq.pos&7))&31); // calc  8 note loop positions sets looping point in sequence
 8002600:	4b5f      	ldr	r3, [pc, #380]	; (8002780 <sampling+0x798>)
 8002602:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002606:	4b5c      	ldr	r3, [pc, #368]	; (8002778 <sampling+0x790>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	b2db      	uxtb	r3, r3
 8002610:	4413      	add	r3, r2
 8002612:	b2db      	uxtb	r3, r3
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	b2da      	uxtb	r2, r3
 800261a:	4b57      	ldr	r3, [pc, #348]	; (8002778 <sampling+0x790>)
 800261c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26


			seq.loop[3]=((note[1].timeshift+(seq.pos&7))&15); //sets looping point in sequence this is full 16 note
 8002620:	4b57      	ldr	r3, [pc, #348]	; (8002780 <sampling+0x798>)
 8002622:	7d1a      	ldrb	r2, [r3, #20]
 8002624:	4b54      	ldr	r3, [pc, #336]	; (8002778 <sampling+0x790>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	b2db      	uxtb	r3, r3
 800262e:	4413      	add	r3, r2
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	b2da      	uxtb	r2, r3
 8002638:	4b4f      	ldr	r3, [pc, #316]	; (8002778 <sampling+0x790>)
 800263a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

			seq.loop[4]=((note[2].timeshift+(seq.pos&7))&15);
 800263e:	4b50      	ldr	r3, [pc, #320]	; (8002780 <sampling+0x798>)
 8002640:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002644:	4b4c      	ldr	r3, [pc, #304]	; (8002778 <sampling+0x790>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	b2db      	uxtb	r3, r3
 800264e:	4413      	add	r3, r2
 8002650:	b2db      	uxtb	r3, r3
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	b2da      	uxtb	r2, r3
 8002658:	4b47      	ldr	r3, [pc, #284]	; (8002778 <sampling+0x790>)
 800265a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		//seq.loop[4]=((note[2].timeshift+((seq.pos&15)>>1))&15); // half speed
			note[1].pitch=(notes_joined[seq.loop[1]]>>4)+(note[1].transpose>>4);    // maybe join 1 and 2
 800265e:	4b46      	ldr	r3, [pc, #280]	; (8002778 <sampling+0x790>)
 8002660:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002664:	461a      	mov	r2, r3
 8002666:	4b47      	ldr	r3, [pc, #284]	; (8002784 <sampling+0x79c>)
 8002668:	5c9b      	ldrb	r3, [r3, r2]
 800266a:	091b      	lsrs	r3, r3, #4
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4b44      	ldr	r3, [pc, #272]	; (8002780 <sampling+0x798>)
 8002670:	7cdb      	ldrb	r3, [r3, #19]
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	b2db      	uxtb	r3, r3
 8002676:	4413      	add	r3, r2
 8002678:	b2da      	uxtb	r2, r3
 800267a:	4b41      	ldr	r3, [pc, #260]	; (8002780 <sampling+0x798>)
 800267c:	741a      	strb	r2, [r3, #16]
			note[0].pitch=note[1].pitch+(note[0].transpose>>4); // just double
 800267e:	4b40      	ldr	r3, [pc, #256]	; (8002780 <sampling+0x798>)
 8002680:	7c1a      	ldrb	r2, [r3, #16]
 8002682:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <sampling+0x798>)
 8002684:	795b      	ldrb	r3, [r3, #5]
 8002686:	091b      	lsrs	r3, r3, #4
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4413      	add	r3, r2
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4b3c      	ldr	r3, [pc, #240]	; (8002780 <sampling+0x798>)
 8002690:	709a      	strb	r2, [r3, #2]

			note[2].pitch=(notes_joined[seq.loop[1]]>>4)+(note[2].transpose>>4);  //loop 8 notes from pos and x times
 8002692:	4b39      	ldr	r3, [pc, #228]	; (8002778 <sampling+0x790>)
 8002694:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002698:	461a      	mov	r2, r3
 800269a:	4b3a      	ldr	r3, [pc, #232]	; (8002784 <sampling+0x79c>)
 800269c:	5c9b      	ldrb	r3, [r3, r2]
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4b37      	ldr	r3, [pc, #220]	; (8002780 <sampling+0x798>)
 80026a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	4b33      	ldr	r3, [pc, #204]	; (8002780 <sampling+0x798>)
 80026b2:	779a      	strb	r2, [r3, #30]

		note[3].pitch=(notes_joined[seq.loop[1]]>>4)+(note[3].transpose>>4); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 80026b4:	4b30      	ldr	r3, [pc, #192]	; (8002778 <sampling+0x790>)
 80026b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026ba:	461a      	mov	r2, r3
 80026bc:	4b31      	ldr	r3, [pc, #196]	; (8002784 <sampling+0x79c>)
 80026be:	5c9b      	ldrb	r3, [r3, r2]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	4b2e      	ldr	r3, [pc, #184]	; (8002780 <sampling+0x798>)
 80026c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4b2b      	ldr	r3, [pc, #172]	; (8002780 <sampling+0x798>)
 80026d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
//	if (note[3].pitch) 		{note[3].pitch=note[3].pitch+(note[3].transpose>>4);	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off

	note[5].pitch=(notes_joined[seq.loop[1]]>>4)+(note[5].transpose>>4);  //
 80026d8:	4b27      	ldr	r3, [pc, #156]	; (8002778 <sampling+0x790>)
 80026da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026de:	461a      	mov	r2, r3
 80026e0:	4b28      	ldr	r3, [pc, #160]	; (8002784 <sampling+0x79c>)
 80026e2:	5c9b      	ldrb	r3, [r3, r2]
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	4b25      	ldr	r3, [pc, #148]	; (8002780 <sampling+0x798>)
 80026ea:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80026ee:	091b      	lsrs	r3, r3, #4
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4b22      	ldr	r3, [pc, #136]	; (8002780 <sampling+0x798>)
 80026f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		patch_target_replace();
 80026fc:	f7fe fe12 	bl	8001324 <patch_target_replace>
		uint8_t detune_temp=0;
 8002700:	2300      	movs	r3, #0
 8002702:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		detune_temp=(note[5].pitch+(note[5].detune>>2))&31    ;
 8002706:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <sampling+0x798>)
 8002708:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800270c:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <sampling+0x798>)
 800270e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002712:	089b      	lsrs	r3, r3, #2
 8002714:	b2db      	uxtb	r3, r3
 8002716:	4413      	add	r3, r2
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if(detune_temp>27) detune_temp=27;
 8002722:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8002726:	2b1b      	cmp	r3, #27
 8002728:	d902      	bls.n	8002730 <sampling+0x748>
 800272a:	231b      	movs	r3, #27
 800272c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		   //this is for sine skip mask

	note[5].tuned=sine_lut[MajorNote[detune_temp]];	//sets freq ,1.0594  * 16536 =17518  ,
 8002730:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8002734:	4a14      	ldr	r2, [pc, #80]	; (8002788 <sampling+0x7a0>)
 8002736:	5cd3      	ldrb	r3, [r2, r3]
 8002738:	461a      	mov	r2, r3
 800273a:	4b14      	ldr	r3, [pc, #80]	; (800278c <sampling+0x7a4>)
 800273c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002740:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <sampling+0x798>)
 8002742:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	note[5].tuned= (note[5].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
 8002746:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <sampling+0x798>)
 8002748:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800274c:	461a      	mov	r2, r3
 800274e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002752:	fb02 f303 	mul.w	r3, r2, r3
 8002756:	129b      	asrs	r3, r3, #10
 8002758:	b29a      	uxth	r2, r3
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <sampling+0x798>)
 800275c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		mask_result =0;
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <sampling+0x7a8>)
 8002762:	2200      	movs	r2, #0
 8002764:	801a      	strh	r2, [r3, #0]

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002766:	2300      	movs	r3, #0
 8002768:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800276c:	e059      	b.n	8002822 <sampling+0x83a>
 800276e:	bf00      	nop
 8002770:	20001b8e 	.word	0x20001b8e
 8002774:	20001b64 	.word	0x20001b64
 8002778:	20003828 	.word	0x20003828
 800277c:	200001a8 	.word	0x200001a8
 8002780:	200001bc 	.word	0x200001bc
 8002784:	20005ce8 	.word	0x20005ce8
 8002788:	0800a6fc 	.word	0x0800a6fc
 800278c:	20000144 	.word	0x20000144
 8002790:	20000f5c 	.word	0x20000f5c

	if (note[mask_i].pitch) {
 8002794:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8002798:	4930      	ldr	r1, [pc, #192]	; (800285c <sampling+0x874>)
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	1a9b      	subs	r3, r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	440b      	add	r3, r1
 80027a4:	3302      	adds	r3, #2
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d035      	beq.n	8002818 <sampling+0x830>

	//	note[mask_i].pitch=(note[mask_i].pitch ;

		detune_temp=(note[mask_i].pitch+(note[mask_i].detune>>2))&31    ;
 80027ac:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80027b0:	492a      	ldr	r1, [pc, #168]	; (800285c <sampling+0x874>)
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	1a9b      	subs	r3, r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	440b      	add	r3, r1
 80027bc:	3302      	adds	r3, #2
 80027be:	7819      	ldrb	r1, [r3, #0]
 80027c0:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80027c4:	4825      	ldr	r0, [pc, #148]	; (800285c <sampling+0x874>)
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4403      	add	r3, r0
 80027d0:	3308      	adds	r3, #8
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	089b      	lsrs	r3, r3, #2
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	440b      	add	r3, r1
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if(detune_temp>27) detune_temp=27;
 80027e4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80027e8:	2b1b      	cmp	r3, #27
 80027ea:	d902      	bls.n	80027f2 <sampling+0x80a>
 80027ec:	231b      	movs	r3, #27
 80027ee:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		note[mask_i].tuned=sample_Noteadd[MajorNote[detune_temp]];
 80027f2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80027f6:	4a1a      	ldr	r2, [pc, #104]	; (8002860 <sampling+0x878>)
 80027f8:	5cd3      	ldrb	r3, [r2, r3]
 80027fa:	4619      	mov	r1, r3
 80027fc:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8002800:	4b18      	ldr	r3, [pc, #96]	; (8002864 <sampling+0x87c>)
 8002802:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8002806:	4915      	ldr	r1, [pc, #84]	; (800285c <sampling+0x874>)
 8002808:	4613      	mov	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	440b      	add	r3, r1
 8002812:	330c      	adds	r3, #12
 8002814:	4602      	mov	r2, r0
 8002816:	801a      	strh	r2, [r3, #0]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002818:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800281c:	3301      	adds	r3, #1
 800281e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002822:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002826:	2b04      	cmp	r3, #4
 8002828:	d9b4      	bls.n	8002794 <sampling+0x7ac>
		//note_tuned[3]=2751;
	} // end of note calcualte



	if ((i&63)==0)
 800282a:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <sampling+0x880>)
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <sampling+0x852>
	{

		LFO_source(); // calculate lfo maybe 8 times for now
 8002836:	f000 fdab 	bl	8003390 <LFO_source>
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <sampling+0x880>)
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	3301      	adds	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <sampling+0x880>)
 8002844:	801a      	strh	r2, [r3, #0]
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <sampling+0x880>)
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800284e:	f4ff ae18 	bcc.w	8002482 <sampling+0x49a>
// filter loop

uint8_t sine_zero;
int32_t  sample_temp1;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <sampling+0x880>)
 8002854:	2200      	movs	r2, #0
 8002856:	801a      	strh	r2, [r3, #0]
 8002858:	e1c0      	b.n	8002bdc <sampling+0xbf4>
 800285a:	bf00      	nop
 800285c:	200001bc 	.word	0x200001bc
 8002860:	0800a6fc 	.word	0x0800a6fc
 8002864:	0800a718 	.word	0x0800a718
 8002868:	20000750 	.word	0x20000750
	i_total=i+sample_pointB;
 800286c:	4bac      	ldr	r3, [pc, #688]	; (8002b20 <sampling+0xb38>)
 800286e:	881a      	ldrh	r2, [r3, #0]
 8002870:	4bac      	ldr	r3, [pc, #688]	; (8002b24 <sampling+0xb3c>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	4413      	add	r3, r2
 8002876:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	sampling_position=(i>>6);
 800287a:	4ba9      	ldr	r3, [pc, #676]	; (8002b20 <sampling+0xb38>)
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	099b      	lsrs	r3, r3, #6
 8002880:	b29b      	uxth	r3, r3
 8002882:	b2da      	uxtb	r2, r3
 8002884:	4ba8      	ldr	r3, [pc, #672]	; (8002b28 <sampling+0xb40>)
 8002886:	701a      	strb	r2, [r3, #0]

	if ((i&63)==0)	{  patch_target_replace();    // update values , not too bad
 8002888:	4ba5      	ldr	r3, [pc, #660]	; (8002b20 <sampling+0xb38>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002890:	2b00      	cmp	r3, #0
 8002892:	f040 8095 	bne.w	80029c0 <sampling+0x9d8>
 8002896:	f7fe fd45 	bl	8001324 <patch_target_replace>
float freq_temp=arm_sin_f32(filter[0].cutoff_1*0.01)    ;   // need this for useful filter
 800289a:	4ba4      	ldr	r3, [pc, #656]	; (8002b2c <sampling+0xb44>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd ff1e 	bl	80006e0 <__aeabi_i2d>
 80028a4:	a39a      	add	r3, pc, #616	; (adr r3, 8002b10 <sampling+0xb28>)
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	f7fd fc9d 	bl	80001e8 <__aeabi_dmul>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	f7fd ff7d 	bl	80007b4 <__aeabi_d2f>
 80028ba:	4603      	mov	r3, r0
 80028bc:	ee00 3a10 	vmov	s0, r3
 80028c0:	f007 fc10 	bl	800a0e4 <arm_sin_f32>
 80028c4:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 80028c8:	4b97      	ldr	r3, [pc, #604]	; (8002b28 <sampling+0xb40>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028d0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80028d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d8:	4a95      	ldr	r2, [pc, #596]	; (8002b30 <sampling+0xb48>)
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	edc3 7a00 	vstr	s15, [r3]
 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.006)    ;
 80028e2:	4b92      	ldr	r3, [pc, #584]	; (8002b2c <sampling+0xb44>)
 80028e4:	7a1b      	ldrb	r3, [r3, #8]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fd fefa 	bl	80006e0 <__aeabi_i2d>
 80028ec:	a38a      	add	r3, pc, #552	; (adr r3, 8002b18 <sampling+0xb30>)
 80028ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f2:	f7fd fc79 	bl	80001e8 <__aeabi_dmul>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	f7fd ff59 	bl	80007b4 <__aeabi_d2f>
 8002902:	4603      	mov	r3, r0
 8002904:	ee00 3a10 	vmov	s0, r3
 8002908:	f007 fbec 	bl	800a0e4 <arm_sin_f32>
 800290c:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
freq_pointer[1] [sampling_position] =1-freq_temp ; // filter lfos
 8002910:	4b85      	ldr	r3, [pc, #532]	; (8002b28 <sampling+0xb40>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002918:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800291c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002920:	4a83      	ldr	r2, [pc, #524]	; (8002b30 <sampling+0xb48>)
 8002922:	3309      	adds	r3, #9
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	edc3 7a00 	vstr	s15, [r3]
freq_temp=arm_sin_f32(filter[2].cutoff_1*0.006)    ;
 800292c:	4b7f      	ldr	r3, [pc, #508]	; (8002b2c <sampling+0xb44>)
 800292e:	7c1b      	ldrb	r3, [r3, #16]
 8002930:	4618      	mov	r0, r3
 8002932:	f7fd fed5 	bl	80006e0 <__aeabi_i2d>
 8002936:	a378      	add	r3, pc, #480	; (adr r3, 8002b18 <sampling+0xb30>)
 8002938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293c:	f7fd fc54 	bl	80001e8 <__aeabi_dmul>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4610      	mov	r0, r2
 8002946:	4619      	mov	r1, r3
 8002948:	f7fd ff34 	bl	80007b4 <__aeabi_d2f>
 800294c:	4603      	mov	r3, r0
 800294e:	ee00 3a10 	vmov	s0, r3
 8002952:	f007 fbc7 	bl	800a0e4 <arm_sin_f32>
 8002956:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
freq_pointer[2] [sampling_position] =1-freq_temp ; // filter lfos
 800295a:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <sampling+0xb40>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002962:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800296a:	4a71      	ldr	r2, [pc, #452]	; (8002b30 <sampling+0xb48>)
 800296c:	3312      	adds	r3, #18
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	edc3 7a00 	vstr	s15, [r3]
 freq_temp=arm_sin_f32(filter[3].cutoff_1*0.006)    ;
 8002976:	4b6d      	ldr	r3, [pc, #436]	; (8002b2c <sampling+0xb44>)
 8002978:	7e1b      	ldrb	r3, [r3, #24]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fd feb0 	bl	80006e0 <__aeabi_i2d>
 8002980:	a365      	add	r3, pc, #404	; (adr r3, 8002b18 <sampling+0xb30>)
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	f7fd fc2f 	bl	80001e8 <__aeabi_dmul>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4610      	mov	r0, r2
 8002990:	4619      	mov	r1, r3
 8002992:	f7fd ff0f 	bl	80007b4 <__aeabi_d2f>
 8002996:	4603      	mov	r3, r0
 8002998:	ee00 3a10 	vmov	s0, r3
 800299c:	f007 fba2 	bl	800a0e4 <arm_sin_f32>
 80029a0:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
freq_pointer[3] [sampling_position] =1-freq_temp ; // filter lfos
 80029a4:	4b60      	ldr	r3, [pc, #384]	; (8002b28 <sampling+0xb40>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029ac:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80029b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b4:	4a5e      	ldr	r2, [pc, #376]	; (8002b30 <sampling+0xb48>)
 80029b6:	331b      	adds	r3, #27
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	edc3 7a00 	vstr	s15, [r3]

	}

// every step   1,110,928   >>20  ,per note
// New oscillators , sync, trigger input , waveshape ,zero cross
	sample_accus[0] = sample_accus[0] + note[0].tuned; //careful with signed bit shift,better compare
 80029c0:	4b5c      	ldr	r3, [pc, #368]	; (8002b34 <sampling+0xb4c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a5c      	ldr	r2, [pc, #368]	; (8002b38 <sampling+0xb50>)
 80029c6:	8992      	ldrh	r2, [r2, #12]
 80029c8:	4413      	add	r3, r2
 80029ca:	4a5a      	ldr	r2, [pc, #360]	; (8002b34 <sampling+0xb4c>)
 80029cc:	6013      	str	r3, [r2, #0]

	if (sample_accus[0]>524287) sample_accus[0] =-sample_accus[0] ; // faster >  than &  ,strange
 80029ce:	4b59      	ldr	r3, [pc, #356]	; (8002b34 <sampling+0xb4c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029d6:	db04      	blt.n	80029e2 <sampling+0x9fa>
 80029d8:	4b56      	ldr	r3, [pc, #344]	; (8002b34 <sampling+0xb4c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	425b      	negs	r3, r3
 80029de:	4a55      	ldr	r2, [pc, #340]	; (8002b34 <sampling+0xb4c>)
 80029e0:	6013      	str	r3, [r2, #0]

	sample_accus[1] = sample_accus[1] + note[1].tuned;  // normal adder full volume
 80029e2:	4b54      	ldr	r3, [pc, #336]	; (8002b34 <sampling+0xb4c>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4a54      	ldr	r2, [pc, #336]	; (8002b38 <sampling+0xb50>)
 80029e8:	8b52      	ldrh	r2, [r2, #26]
 80029ea:	4413      	add	r3, r2
 80029ec:	4a51      	ldr	r2, [pc, #324]	; (8002b34 <sampling+0xb4c>)
 80029ee:	6053      	str	r3, [r2, #4]

			if (sample_accus[1]>524287) sample_accus[1] =-sample_accus[1] ; // faster >  than &  ,strange
 80029f0:	4b50      	ldr	r3, [pc, #320]	; (8002b34 <sampling+0xb4c>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029f8:	db04      	blt.n	8002a04 <sampling+0xa1c>
 80029fa:	4b4e      	ldr	r3, [pc, #312]	; (8002b34 <sampling+0xb4c>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	425b      	negs	r3, r3
 8002a00:	4a4c      	ldr	r2, [pc, #304]	; (8002b34 <sampling+0xb4c>)
 8002a02:	6053      	str	r3, [r2, #4]

			sample_accus[2] = sample_accus[2] + note[2].tuned;
 8002a04:	4b4b      	ldr	r3, [pc, #300]	; (8002b34 <sampling+0xb4c>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4a4b      	ldr	r2, [pc, #300]	; (8002b38 <sampling+0xb50>)
 8002a0a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8002a0c:	4413      	add	r3, r2
 8002a0e:	4a49      	ldr	r2, [pc, #292]	; (8002b34 <sampling+0xb4c>)
 8002a10:	6093      	str	r3, [r2, #8]

					if (sample_accus[2]>524287) sample_accus[2] =-sample_accus[2] ; // faster >  than &  ,strange
 8002a12:	4b48      	ldr	r3, [pc, #288]	; (8002b34 <sampling+0xb4c>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a1a:	db04      	blt.n	8002a26 <sampling+0xa3e>
 8002a1c:	4b45      	ldr	r3, [pc, #276]	; (8002b34 <sampling+0xb4c>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	425b      	negs	r3, r3
 8002a22:	4a44      	ldr	r2, [pc, #272]	; (8002b34 <sampling+0xb4c>)
 8002a24:	6093      	str	r3, [r2, #8]

					sample_accus[3] = sample_accus[3] + note[3].tuned; // bouncing somewhere
 8002a26:	4b43      	ldr	r3, [pc, #268]	; (8002b34 <sampling+0xb4c>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	4a43      	ldr	r2, [pc, #268]	; (8002b38 <sampling+0xb50>)
 8002a2c:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8002a2e:	4413      	add	r3, r2
 8002a30:	4a40      	ldr	r2, [pc, #256]	; (8002b34 <sampling+0xb4c>)
 8002a32:	60d3      	str	r3, [r2, #12]

							if (sample_accus[3]>524287) sample_accus[3] =-sample_accus[3] ; // faster >  than &  ,strange
 8002a34:	4b3f      	ldr	r3, [pc, #252]	; (8002b34 <sampling+0xb4c>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a3c:	db04      	blt.n	8002a48 <sampling+0xa60>
 8002a3e:	4b3d      	ldr	r3, [pc, #244]	; (8002b34 <sampling+0xb4c>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	425b      	negs	r3, r3
 8002a44:	4a3b      	ldr	r2, [pc, #236]	; (8002b34 <sampling+0xb4c>)
 8002a46:	60d3      	str	r3, [r2, #12]

							sample_accus[4] = sample_accus[4] + note[4].tuned;
 8002a48:	4b3a      	ldr	r3, [pc, #232]	; (8002b34 <sampling+0xb4c>)
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	4a3a      	ldr	r2, [pc, #232]	; (8002b38 <sampling+0xb50>)
 8002a4e:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002a52:	4413      	add	r3, r2
 8002a54:	4a37      	ldr	r2, [pc, #220]	; (8002b34 <sampling+0xb4c>)
 8002a56:	6113      	str	r3, [r2, #16]

									if (sample_accus[4]>524287) sample_accus[4] =-sample_accus[4] ; // faster >  than &  ,strange
 8002a58:	4b36      	ldr	r3, [pc, #216]	; (8002b34 <sampling+0xb4c>)
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a60:	db04      	blt.n	8002a6c <sampling+0xa84>
 8002a62:	4b34      	ldr	r3, [pc, #208]	; (8002b34 <sampling+0xb4c>)
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	425b      	negs	r3, r3
 8002a68:	4a32      	ldr	r2, [pc, #200]	; (8002b34 <sampling+0xb4c>)
 8002a6a:	6113      	str	r3, [r2, #16]

									sample_Accu[0] =sample_Accu[1] =sample_Accu[2]=sample_Accu[3] =0; //all zeroed 20 bits
 8002a6c:	4b33      	ldr	r3, [pc, #204]	; (8002b3c <sampling+0xb54>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	60da      	str	r2, [r3, #12]
 8002a72:	4b32      	ldr	r3, [pc, #200]	; (8002b3c <sampling+0xb54>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	4a31      	ldr	r2, [pc, #196]	; (8002b3c <sampling+0xb54>)
 8002a78:	6093      	str	r3, [r2, #8]
 8002a7a:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <sampling+0xb54>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	4a2f      	ldr	r2, [pc, #188]	; (8002b3c <sampling+0xb54>)
 8002a80:	6053      	str	r3, [r2, #4]
 8002a82:	4b2e      	ldr	r3, [pc, #184]	; (8002b3c <sampling+0xb54>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4a2d      	ldr	r2, [pc, #180]	; (8002b3c <sampling+0xb54>)
 8002a88:	6013      	str	r3, [r2, #0]



									sample_temp1=(sample_accus[1]+sample_accus[0])>>9; // needs cut a bit  ,default 20bit
 8002a8a:	4b2a      	ldr	r3, [pc, #168]	; (8002b34 <sampling+0xb4c>)
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	4b29      	ldr	r3, [pc, #164]	; (8002b34 <sampling+0xb4c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	125b      	asrs	r3, r3, #9
 8002a96:	663b      	str	r3, [r7, #96]	; 0x60
								    sample_Accu[0]=sample_temp1*note[1].velocity; // 20+8
 8002a98:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <sampling+0xb50>)
 8002a9a:	7d5b      	ldrb	r3, [r3, #21]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aa0:	fb02 f303 	mul.w	r3, r2, r3
 8002aa4:	4a25      	ldr	r2, [pc, #148]	; (8002b3c <sampling+0xb54>)
 8002aa6:	6013      	str	r3, [r2, #0]

									sample_temp1=sample_accus[2]>>8; // needs cut a bit  ,default 20bit
 8002aa8:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <sampling+0xb4c>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	121b      	asrs	r3, r3, #8
 8002aae:	663b      	str	r3, [r7, #96]	; 0x60
									sample_Accu[1]=sample_temp1*note[2].velocity; // 20+8
 8002ab0:	4b21      	ldr	r3, [pc, #132]	; (8002b38 <sampling+0xb50>)
 8002ab2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	4a1f      	ldr	r2, [pc, #124]	; (8002b3c <sampling+0xb54>)
 8002ac0:	6053      	str	r3, [r2, #4]


									sample_temp1=sample_accus[3]>>8;
 8002ac2:	4b1c      	ldr	r3, [pc, #112]	; (8002b34 <sampling+0xb4c>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	121b      	asrs	r3, r3, #8
 8002ac8:	663b      	str	r3, [r7, #96]	; 0x60
									sample_Accu[2] =sample_temp1*note[3].velocity;    // 64 default 20+8
 8002aca:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <sampling+0xb50>)
 8002acc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ad4:	fb02 f303 	mul.w	r3, r2, r3
 8002ad8:	4a18      	ldr	r2, [pc, #96]	; (8002b3c <sampling+0xb54>)
 8002ada:	6093      	str	r3, [r2, #8]


									sample_temp1=sine_out*	note[5].velocity;  // sine out is 16bit, add 4 then 16+8
 8002adc:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <sampling+0xb50>)
 8002ade:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <sampling+0xb58>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	fb02 f303 	mul.w	r3, r2, r3
 8002aec:	663b      	str	r3, [r7, #96]	; 0x60
									sample_Accu[3] =sample_temp1>>4;
 8002aee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002af0:	111b      	asrs	r3, r3, #4
 8002af2:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <sampling+0xb54>)
 8002af4:	60d3      	str	r3, [r2, #12]


if (sine_counterB==0) 	sine_temp2=note[5].tuned;
 8002af6:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <sampling+0xb5c>)
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d126      	bne.n	8002b4c <sampling+0xb64>
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <sampling+0xb50>)
 8002b00:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8002b04:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <sampling+0xb60>)
 8002b06:	801a      	strh	r2, [r3, #0]
 8002b08:	e020      	b.n	8002b4c <sampling+0xb64>
 8002b0a:	bf00      	nop
 8002b0c:	f3af 8000 	nop.w
 8002b10:	47ae147b 	.word	0x47ae147b
 8002b14:	3f847ae1 	.word	0x3f847ae1
 8002b18:	bc6a7efa 	.word	0xbc6a7efa
 8002b1c:	3f789374 	.word	0x3f789374
 8002b20:	20000750 	.word	0x20000750
 8002b24:	2000074e 	.word	0x2000074e
 8002b28:	20003ce0 	.word	0x20003ce0
 8002b2c:	20000220 	.word	0x20000220
 8002b30:	20001c1c 	.word	0x20001c1c
 8002b34:	20001b68 	.word	0x20001b68
 8002b38:	200001bc 	.word	0x200001bc
 8002b3c:	20000730 	.word	0x20000730
 8002b40:	2000071c 	.word	0x2000071c
 8002b44:	2000071a 	.word	0x2000071a
 8002b48:	20000720 	.word	0x20000720

	sine_counterB=sine_counterB+sine_temp2 ;  // sine up counter per cycle , however sine adder needs to wait
 8002b4c:	4b9d      	ldr	r3, [pc, #628]	; (8002dc4 <sampling+0xddc>)
 8002b4e:	881a      	ldrh	r2, [r3, #0]
 8002b50:	4b9d      	ldr	r3, [pc, #628]	; (8002dc8 <sampling+0xde0>)
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	4413      	add	r3, r2
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	4b9a      	ldr	r3, [pc, #616]	; (8002dc4 <sampling+0xddc>)
 8002b5a:	801a      	strh	r2, [r3, #0]
	if (sine_counterB>>7) sine_zero=0; else sine_zero=1;
 8002b5c:	4b99      	ldr	r3, [pc, #612]	; (8002dc4 <sampling+0xddc>)
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	09db      	lsrs	r3, r3, #7
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <sampling+0xb88>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002b6e:	e002      	b.n	8002b76 <sampling+0xb8e>
 8002b70:	2301      	movs	r3, #1
 8002b72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

if (sine_counterB>(sine_length<<5)) sine_counterB=0; //fixed for now
 8002b76:	4b93      	ldr	r3, [pc, #588]	; (8002dc4 <sampling+0xddc>)
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4b93      	ldr	r3, [pc, #588]	; (8002dcc <sampling+0xde4>)
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	015b      	lsls	r3, r3, #5
 8002b82:	429a      	cmp	r2, r3
 8002b84:	dd02      	ble.n	8002b8c <sampling+0xba4>
 8002b86:	4b8f      	ldr	r3, [pc, #572]	; (8002dc4 <sampling+0xddc>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	801a      	strh	r2, [r3, #0]
sine_count(); // calc sine   distortion out when hcagning note
 8002b8c:	f000 fba0 	bl	80032d0 <sine_count>
play_holder0[i]=sample_Accu[0];  // write to bank
 8002b90:	4b8f      	ldr	r3, [pc, #572]	; (8002dd0 <sampling+0xde8>)
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	4619      	mov	r1, r3
 8002b96:	4b8f      	ldr	r3, [pc, #572]	; (8002dd4 <sampling+0xdec>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a8f      	ldr	r2, [pc, #572]	; (8002dd8 <sampling+0xdf0>)
 8002b9c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
play_holder1[i]=sample_Accu[1];
 8002ba0:	4b8b      	ldr	r3, [pc, #556]	; (8002dd0 <sampling+0xde8>)
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4b8b      	ldr	r3, [pc, #556]	; (8002dd4 <sampling+0xdec>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	4a8c      	ldr	r2, [pc, #560]	; (8002ddc <sampling+0xdf4>)
 8002bac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
play_holder2[i]=sample_Accu[2];
 8002bb0:	4b87      	ldr	r3, [pc, #540]	; (8002dd0 <sampling+0xde8>)
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4b87      	ldr	r3, [pc, #540]	; (8002dd4 <sampling+0xdec>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	4a89      	ldr	r2, [pc, #548]	; (8002de0 <sampling+0xdf8>)
 8002bbc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
play_holder3[i]=sample_Accu[3];
 8002bc0:	4b83      	ldr	r3, [pc, #524]	; (8002dd0 <sampling+0xde8>)
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4b83      	ldr	r3, [pc, #524]	; (8002dd4 <sampling+0xdec>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	4a86      	ldr	r2, [pc, #536]	; (8002de4 <sampling+0xdfc>)
 8002bcc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002bd0:	4b7f      	ldr	r3, [pc, #508]	; (8002dd0 <sampling+0xde8>)
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	4b7d      	ldr	r3, [pc, #500]	; (8002dd0 <sampling+0xde8>)
 8002bda:	801a      	strh	r2, [r3, #0]
 8002bdc:	4b7c      	ldr	r3, [pc, #496]	; (8002dd0 <sampling+0xde8>)
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be4:	f4ff ae42 	bcc.w	800286c <sampling+0x884>
int32_t filter_Accu;


//uint16_t* click=&input_holder[0];

uint16_t crap_hold=2000;
 8002be8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002bec:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

				uint16_t crap_hold1=2000;
 8002bf0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002bf4:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
				uint16_t crap_hold2=2000;
 8002bf8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002bfc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 8002c00:	4b73      	ldr	r3, [pc, #460]	; (8002dd0 <sampling+0xde8>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	801a      	strh	r2, [r3, #0]
 8002c06:	e030      	b.n	8002c6a <sampling+0xc82>
			{
				crap_hold=((input_holder[i]*7)+crap_hold2)>>3;
 8002c08:	4b71      	ldr	r3, [pc, #452]	; (8002dd0 <sampling+0xde8>)
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4b76      	ldr	r3, [pc, #472]	; (8002de8 <sampling+0xe00>)
 8002c10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002c14:	461a      	mov	r2, r3
 8002c16:	4613      	mov	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	1a9a      	subs	r2, r3, r2
 8002c1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002c20:	4413      	add	r3, r2
 8002c22:	10db      	asrs	r3, r3, #3
 8002c24:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
					crap_hold1=((crap_hold*7)+crap_hold1)>>3;
 8002c28:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	1a9a      	subs	r2, r3, r2
 8002c32:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c36:	4413      	add	r3, r2
 8002c38:	10db      	asrs	r3, r3, #3
 8002c3a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
					input_holder[i] =((crap_hold1*7)+crap_hold2)>>3;
 8002c3e:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002c42:	4613      	mov	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	1a9a      	subs	r2, r3, r2
 8002c48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002c4c:	4413      	add	r3, r2
 8002c4e:	10d9      	asrs	r1, r3, #3
 8002c50:	4b5f      	ldr	r3, [pc, #380]	; (8002dd0 <sampling+0xde8>)
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	b289      	uxth	r1, r1
 8002c58:	4b63      	ldr	r3, [pc, #396]	; (8002de8 <sampling+0xe00>)
 8002c5a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 8002c5e:	4b5c      	ldr	r3, [pc, #368]	; (8002dd0 <sampling+0xde8>)
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	3301      	adds	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	4b5a      	ldr	r3, [pc, #360]	; (8002dd0 <sampling+0xde8>)
 8002c68:	801a      	strh	r2, [r3, #0]
 8002c6a:	4b59      	ldr	r3, [pc, #356]	; (8002dd0 <sampling+0xde8>)
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c72:	d3c9      	bcc.n	8002c08 <sampling+0xc20>
}
*/



for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8002c74:	4b56      	ldr	r3, [pc, #344]	; (8002dd0 <sampling+0xde8>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	801a      	strh	r2, [r3, #0]
 8002c7a:	e2f8      	b.n	800326e <sampling+0x1286>
	i_total=i+sample_pointB;
 8002c7c:	4b54      	ldr	r3, [pc, #336]	; (8002dd0 <sampling+0xde8>)
 8002c7e:	881a      	ldrh	r2, [r3, #0]
 8002c80:	4b5a      	ldr	r3, [pc, #360]	; (8002dec <sampling+0xe04>)
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	4413      	add	r3, r2
 8002c86:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

sampling_position=(i>>6);
 8002c8a:	4b51      	ldr	r3, [pc, #324]	; (8002dd0 <sampling+0xde8>)
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	099b      	lsrs	r3, r3, #6
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	4b56      	ldr	r3, [pc, #344]	; (8002df0 <sampling+0xe08>)
 8002c96:	701a      	strb	r2, [r3, #0]
// filter 1
if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 8002c98:	4b4d      	ldr	r3, [pc, #308]	; (8002dd0 <sampling+0xde8>)
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	3388      	adds	r3, #136	; 0x88
 8002ca4:	443b      	add	r3, r7
 8002ca6:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8002caa:	4a49      	ldr	r2, [pc, #292]	; (8002dd0 <sampling+0xde8>)
 8002cac:	8812      	ldrh	r2, [r2, #0]
 8002cae:	f002 021f 	and.w	r2, r2, #31
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d10f      	bne.n	8002cdc <sampling+0xcf4>
 8002cbc:	4b4d      	ldr	r3, [pc, #308]	; (8002df4 <sampling+0xe0c>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	711a      	strb	r2, [r3, #4]
 8002cc2:	4b4d      	ldr	r3, [pc, #308]	; (8002df8 <sampling+0xe10>)
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	4b4b      	ldr	r3, [pc, #300]	; (8002df8 <sampling+0xe10>)
 8002ccc:	801a      	strh	r2, [r3, #0]
 8002cce:	4b4a      	ldr	r3, [pc, #296]	; (8002df8 <sampling+0xe10>)
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	4b47      	ldr	r3, [pc, #284]	; (8002df8 <sampling+0xe10>)
 8002cda:	801a      	strh	r2, [r3, #0]


sample_Accu[0]=play_holder0[i];  // sine input
 8002cdc:	4b3c      	ldr	r3, [pc, #240]	; (8002dd0 <sampling+0xde8>)
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b3d      	ldr	r3, [pc, #244]	; (8002dd8 <sampling+0xdf0>)
 8002ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce8:	4a3a      	ldr	r2, [pc, #232]	; (8002dd4 <sampling+0xdec>)
 8002cea:	6013      	str	r3, [r2, #0]
sample_Accu[1]=play_holder1[i] ; // saw
 8002cec:	4b38      	ldr	r3, [pc, #224]	; (8002dd0 <sampling+0xde8>)
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b3a      	ldr	r3, [pc, #232]	; (8002ddc <sampling+0xdf4>)
 8002cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf8:	4a36      	ldr	r2, [pc, #216]	; (8002dd4 <sampling+0xdec>)
 8002cfa:	6053      	str	r3, [r2, #4]
sample_Accu[2]=play_holder2[i];  // sine input
 8002cfc:	4b34      	ldr	r3, [pc, #208]	; (8002dd0 <sampling+0xde8>)
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	461a      	mov	r2, r3
 8002d02:	4b37      	ldr	r3, [pc, #220]	; (8002de0 <sampling+0xdf8>)
 8002d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d08:	4a32      	ldr	r2, [pc, #200]	; (8002dd4 <sampling+0xdec>)
 8002d0a:	6093      	str	r3, [r2, #8]
sample_Accu[3]=play_holder3[i] ;
 8002d0c:	4b30      	ldr	r3, [pc, #192]	; (8002dd0 <sampling+0xde8>)
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b34      	ldr	r3, [pc, #208]	; (8002de4 <sampling+0xdfc>)
 8002d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d18:	4a2e      	ldr	r2, [pc, #184]	; (8002dd4 <sampling+0xdec>)
 8002d1a:	60d3      	str	r3, [r2, #12]

// this section is about 100 tmr cycles
if ((i&63)==0){
 8002d1c:	4b2c      	ldr	r3, [pc, #176]	; (8002dd0 <sampling+0xde8>)
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f040 8125 	bne.w	8002f74 <sampling+0xf8c>
freq_point[0]=freq_pointer[0] [sampling_position];; // load up coeffs
 8002d2a:	4b31      	ldr	r3, [pc, #196]	; (8002df0 <sampling+0xe08>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	4a33      	ldr	r2, [pc, #204]	; (8002dfc <sampling+0xe14>)
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a32      	ldr	r2, [pc, #200]	; (8002e00 <sampling+0xe18>)
 8002d38:	6013      	str	r3, [r2, #0]

freq_point[2]=freq_pointer[1] [sampling_position];  // ok , array was too short
 8002d3a:	4b2d      	ldr	r3, [pc, #180]	; (8002df0 <sampling+0xe08>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	4a2f      	ldr	r2, [pc, #188]	; (8002dfc <sampling+0xe14>)
 8002d40:	3309      	adds	r3, #9
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a2d      	ldr	r2, [pc, #180]	; (8002e00 <sampling+0xe18>)
 8002d4a:	6093      	str	r3, [r2, #8]
freq_point[4]=freq_pointer[2] [sampling_position];  // ok , array was too short
 8002d4c:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <sampling+0xe08>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	4a2a      	ldr	r2, [pc, #168]	; (8002dfc <sampling+0xe14>)
 8002d52:	3312      	adds	r3, #18
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a29      	ldr	r2, [pc, #164]	; (8002e00 <sampling+0xe18>)
 8002d5c:	6113      	str	r3, [r2, #16]
freq_point[6]=freq_pointer[3] [sampling_position];  // ok , array was too short
 8002d5e:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <sampling+0xe08>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	4a26      	ldr	r2, [pc, #152]	; (8002dfc <sampling+0xe14>)
 8002d64:	331b      	adds	r3, #27
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a24      	ldr	r2, [pc, #144]	; (8002e00 <sampling+0xe18>)
 8002d6e:	6193      	str	r3, [r2, #24]


if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 8002d70:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <sampling+0xe18>)
 8002d72:	edd3 7a00 	vldr	s15, [r3]
 8002d76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d82:	dd04      	ble.n	8002d8e <sampling+0xda6>
 8002d84:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <sampling+0xe18>)
 8002d86:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	e00b      	b.n	8002da6 <sampling+0xdbe>
 8002d8e:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <sampling+0xe18>)
 8002d90:	edd3 7a00 	vldr	s15, [r3]
 8002d94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9c:	d503      	bpl.n	8002da6 <sampling+0xdbe>
 8002d9e:	4b18      	ldr	r3, [pc, #96]	; (8002e00 <sampling+0xe18>)
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
if (freq_point[4]>1) freq_point[4]=1; else if (freq_point[4]<0) freq_point[4]=0;// just in case
 8002da6:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <sampling+0xe18>)
 8002da8:	edd3 7a04 	vldr	s15, [r3, #16]
 8002dac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002db0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db8:	dd24      	ble.n	8002e04 <sampling+0xe1c>
 8002dba:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <sampling+0xe18>)
 8002dbc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002dc0:	611a      	str	r2, [r3, #16]
 8002dc2:	e02b      	b.n	8002e1c <sampling+0xe34>
 8002dc4:	2000071a 	.word	0x2000071a
 8002dc8:	20000720 	.word	0x20000720
 8002dcc:	20000142 	.word	0x20000142
 8002dd0:	20000750 	.word	0x20000750
 8002dd4:	20000730 	.word	0x20000730
 8002dd8:	200054e4 	.word	0x200054e4
 8002ddc:	20003ce4 	.word	0x20003ce4
 8002de0:	200044e4 	.word	0x200044e4
 8002de4:	20004ce4 	.word	0x20004ce4
 8002de8:	200026d8 	.word	0x200026d8
 8002dec:	2000074e 	.word	0x2000074e
 8002df0:	20003ce0 	.word	0x20003ce0
 8002df4:	20002d9c 	.word	0x20002d9c
 8002df8:	20001cac 	.word	0x20001cac
 8002dfc:	20001c1c 	.word	0x20001c1c
 8002e00:	20001bfc 	.word	0x20001bfc
 8002e04:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <sampling+0xe88>)
 8002e06:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e12:	d503      	bpl.n	8002e1c <sampling+0xe34>
 8002e14:	4b16      	ldr	r3, [pc, #88]	; (8002e70 <sampling+0xe88>)
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	611a      	str	r2, [r3, #16]
if (freq_point[2]>1) freq_point[2]=1; else if (freq_point[2]<0) freq_point[2]=0;// just in case
 8002e1c:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <sampling+0xe88>)
 8002e1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2e:	dd04      	ble.n	8002e3a <sampling+0xe52>
 8002e30:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <sampling+0xe88>)
 8002e32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	e00b      	b.n	8002e52 <sampling+0xe6a>
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <sampling+0xe88>)
 8002e3c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e48:	d503      	bpl.n	8002e52 <sampling+0xe6a>
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <sampling+0xe88>)
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
if (freq_point[6]>1) freq_point[6]=1; else if (freq_point[6]<0) freq_point[6]=0;// just in case
 8002e52:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <sampling+0xe88>)
 8002e54:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e64:	dd06      	ble.n	8002e74 <sampling+0xe8c>
 8002e66:	4b02      	ldr	r3, [pc, #8]	; (8002e70 <sampling+0xe88>)
 8002e68:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e6c:	619a      	str	r2, [r3, #24]
 8002e6e:	e00d      	b.n	8002e8c <sampling+0xea4>
 8002e70:	20001bfc 	.word	0x20001bfc
 8002e74:	4bc4      	ldr	r3, [pc, #784]	; (8003188 <sampling+0x11a0>)
 8002e76:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e82:	d503      	bpl.n	8002e8c <sampling+0xea4>
 8002e84:	4bc0      	ldr	r3, [pc, #768]	; (8003188 <sampling+0x11a0>)
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	619a      	str	r2, [r3, #24]

freq_point[1]=1-freq_point[0];
 8002e8c:	4bbe      	ldr	r3, [pc, #760]	; (8003188 <sampling+0x11a0>)
 8002e8e:	edd3 7a00 	vldr	s15, [r3]
 8002e92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e9a:	4bbb      	ldr	r3, [pc, #748]	; (8003188 <sampling+0x11a0>)
 8002e9c:	edc3 7a01 	vstr	s15, [r3, #4]
freq_point[3]=1-freq_point[2];
 8002ea0:	4bb9      	ldr	r3, [pc, #740]	; (8003188 <sampling+0x11a0>)
 8002ea2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eae:	4bb6      	ldr	r3, [pc, #728]	; (8003188 <sampling+0x11a0>)
 8002eb0:	edc3 7a03 	vstr	s15, [r3, #12]
freq_point[5]=1-freq_point[4];
 8002eb4:	4bb4      	ldr	r3, [pc, #720]	; (8003188 <sampling+0x11a0>)
 8002eb6:	edd3 7a04 	vldr	s15, [r3, #16]
 8002eba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ec2:	4bb1      	ldr	r3, [pc, #708]	; (8003188 <sampling+0x11a0>)
 8002ec4:	edc3 7a05 	vstr	s15, [r3, #20]
freq_point[7]=1-freq_point[6];
 8002ec8:	4baf      	ldr	r3, [pc, #700]	; (8003188 <sampling+0x11a0>)
 8002eca:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ece:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ed6:	4bac      	ldr	r3, [pc, #688]	; (8003188 <sampling+0x11a0>)
 8002ed8:	edc3 7a07 	vstr	s15, [r3, #28]

filter_res[0]=freq_point[0]*0.2;
 8002edc:	4baa      	ldr	r3, [pc, #680]	; (8003188 <sampling+0x11a0>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fd fc0f 	bl	8000704 <__aeabi_f2d>
 8002ee6:	a3a6      	add	r3, pc, #664	; (adr r3, 8003180 <sampling+0x1198>)
 8002ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eec:	f7fd f97c 	bl	80001e8 <__aeabi_dmul>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	f7fd fc5c 	bl	80007b4 <__aeabi_d2f>
 8002efc:	4603      	mov	r3, r0
 8002efe:	4aa3      	ldr	r2, [pc, #652]	; (800318c <sampling+0x11a4>)
 8002f00:	6013      	str	r3, [r2, #0]
filter_res[1]=freq_point[1]*0.2;
 8002f02:	4ba1      	ldr	r3, [pc, #644]	; (8003188 <sampling+0x11a0>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd fbfc 	bl	8000704 <__aeabi_f2d>
 8002f0c:	a39c      	add	r3, pc, #624	; (adr r3, 8003180 <sampling+0x1198>)
 8002f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f12:	f7fd f969 	bl	80001e8 <__aeabi_dmul>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	f7fd fc49 	bl	80007b4 <__aeabi_d2f>
 8002f22:	4603      	mov	r3, r0
 8002f24:	4a99      	ldr	r2, [pc, #612]	; (800318c <sampling+0x11a4>)
 8002f26:	6053      	str	r3, [r2, #4]
filter_res[2]=freq_point[2]*0.2;
 8002f28:	4b97      	ldr	r3, [pc, #604]	; (8003188 <sampling+0x11a0>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd fbe9 	bl	8000704 <__aeabi_f2d>
 8002f32:	a393      	add	r3, pc, #588	; (adr r3, 8003180 <sampling+0x1198>)
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	f7fd f956 	bl	80001e8 <__aeabi_dmul>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4610      	mov	r0, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	f7fd fc36 	bl	80007b4 <__aeabi_d2f>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	4a90      	ldr	r2, [pc, #576]	; (800318c <sampling+0x11a4>)
 8002f4c:	6093      	str	r3, [r2, #8]
filter_res[3]=freq_point[3]*0.2;
 8002f4e:	4b8e      	ldr	r3, [pc, #568]	; (8003188 <sampling+0x11a0>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd fbd6 	bl	8000704 <__aeabi_f2d>
 8002f58:	a389      	add	r3, pc, #548	; (adr r3, 8003180 <sampling+0x1198>)
 8002f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5e:	f7fd f943 	bl	80001e8 <__aeabi_dmul>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4610      	mov	r0, r2
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f7fd fc23 	bl	80007b4 <__aeabi_d2f>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4a86      	ldr	r2, [pc, #536]	; (800318c <sampling+0x11a4>)
 8002f72:	60d3      	str	r3, [r2, #12]
		//freq_point[0]=0.50;

   // vol lfo


		filter_accus[1]=sample_Accu[0]; // saw
 8002f74:	4b86      	ldr	r3, [pc, #536]	; (8003190 <sampling+0x11a8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	ee07 3a90 	vmov	s15, r3
 8002f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f80:	4b84      	ldr	r3, [pc, #528]	; (8003194 <sampling+0x11ac>)
 8002f82:	edc3 7a01 	vstr	s15, [r3, #4]
		filter_accus[1]=filter_accus[1]-(filter_accus[3]*filter_res[0]);
 8002f86:	4b83      	ldr	r3, [pc, #524]	; (8003194 <sampling+0x11ac>)
 8002f88:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f8c:	4b81      	ldr	r3, [pc, #516]	; (8003194 <sampling+0x11ac>)
 8002f8e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002f92:	4b7e      	ldr	r3, [pc, #504]	; (800318c <sampling+0x11a4>)
 8002f94:	edd3 7a00 	vldr	s15, [r3]
 8002f98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fa0:	4b7c      	ldr	r3, [pc, #496]	; (8003194 <sampling+0x11ac>)
 8002fa2:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);      //short=fast , adding makes it slower
 8002fa6:	4b7b      	ldr	r3, [pc, #492]	; (8003194 <sampling+0x11ac>)
 8002fa8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fac:	4b76      	ldr	r3, [pc, #472]	; (8003188 <sampling+0x11a0>)
 8002fae:	edd3 7a00 	vldr	s15, [r3]
 8002fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fb6:	4b77      	ldr	r3, [pc, #476]	; (8003194 <sampling+0x11ac>)
 8002fb8:	edd3 6a02 	vldr	s13, [r3, #8]
 8002fbc:	4b72      	ldr	r3, [pc, #456]	; (8003188 <sampling+0x11a0>)
 8002fbe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fca:	4b72      	ldr	r3, [pc, #456]	; (8003194 <sampling+0x11ac>)
 8002fcc:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);			// int32 after conversions is no quicker
 8002fd0:	4b70      	ldr	r3, [pc, #448]	; (8003194 <sampling+0x11ac>)
 8002fd2:	ed93 7a02 	vldr	s14, [r3, #8]
 8002fd6:	4b6c      	ldr	r3, [pc, #432]	; (8003188 <sampling+0x11a0>)
 8002fd8:	edd3 7a00 	vldr	s15, [r3]
 8002fdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fe0:	4b6c      	ldr	r3, [pc, #432]	; (8003194 <sampling+0x11ac>)
 8002fe2:	edd3 6a03 	vldr	s13, [r3, #12]
 8002fe6:	4b68      	ldr	r3, [pc, #416]	; (8003188 <sampling+0x11a0>)
 8002fe8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff4:	4b67      	ldr	r3, [pc, #412]	; (8003194 <sampling+0x11ac>)
 8002ff6:	edc3 7a03 	vstr	s15, [r3, #12]
		sample_Accu[0]=filter_accus[3];
 8002ffa:	4b66      	ldr	r3, [pc, #408]	; (8003194 <sampling+0x11ac>)
 8002ffc:	edd3 7a03 	vldr	s15, [r3, #12]
 8003000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003004:	ee17 2a90 	vmov	r2, s15
 8003008:	4b61      	ldr	r3, [pc, #388]	; (8003190 <sampling+0x11a8>)
 800300a:	601a      	str	r2, [r3, #0]

	//	sample_Accu[3]=play_holder2[i] >>5;
		filter_accus[4]=sample_Accu[1];
 800300c:	4b60      	ldr	r3, [pc, #384]	; (8003190 <sampling+0x11a8>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	ee07 3a90 	vmov	s15, r3
 8003014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003018:	4b5e      	ldr	r3, [pc, #376]	; (8003194 <sampling+0x11ac>)
 800301a:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[4]=filter_accus[4]-(filter_accus[6]*filter_res[1]);
 800301e:	4b5d      	ldr	r3, [pc, #372]	; (8003194 <sampling+0x11ac>)
 8003020:	ed93 7a04 	vldr	s14, [r3, #16]
 8003024:	4b5b      	ldr	r3, [pc, #364]	; (8003194 <sampling+0x11ac>)
 8003026:	edd3 6a06 	vldr	s13, [r3, #24]
 800302a:	4b58      	ldr	r3, [pc, #352]	; (800318c <sampling+0x11a4>)
 800302c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003030:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003038:	4b56      	ldr	r3, [pc, #344]	; (8003194 <sampling+0x11ac>)
 800303a:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[2])+(filter_accus[5]*freq_point[3]);   // 30 cyles for 2 poles
 800303e:	4b55      	ldr	r3, [pc, #340]	; (8003194 <sampling+0x11ac>)
 8003040:	ed93 7a04 	vldr	s14, [r3, #16]
 8003044:	4b50      	ldr	r3, [pc, #320]	; (8003188 <sampling+0x11a0>)
 8003046:	edd3 7a02 	vldr	s15, [r3, #8]
 800304a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800304e:	4b51      	ldr	r3, [pc, #324]	; (8003194 <sampling+0x11ac>)
 8003050:	edd3 6a05 	vldr	s13, [r3, #20]
 8003054:	4b4c      	ldr	r3, [pc, #304]	; (8003188 <sampling+0x11a0>)
 8003056:	edd3 7a03 	vldr	s15, [r3, #12]
 800305a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800305e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003062:	4b4c      	ldr	r3, [pc, #304]	; (8003194 <sampling+0x11ac>)
 8003064:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_accus[6]=(filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]);
 8003068:	4b4a      	ldr	r3, [pc, #296]	; (8003194 <sampling+0x11ac>)
 800306a:	ed93 7a05 	vldr	s14, [r3, #20]
 800306e:	4b46      	ldr	r3, [pc, #280]	; (8003188 <sampling+0x11a0>)
 8003070:	edd3 7a02 	vldr	s15, [r3, #8]
 8003074:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003078:	4b46      	ldr	r3, [pc, #280]	; (8003194 <sampling+0x11ac>)
 800307a:	edd3 6a06 	vldr	s13, [r3, #24]
 800307e:	4b42      	ldr	r3, [pc, #264]	; (8003188 <sampling+0x11a0>)
 8003080:	edd3 7a03 	vldr	s15, [r3, #12]
 8003084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800308c:	4b41      	ldr	r3, [pc, #260]	; (8003194 <sampling+0x11ac>)
 800308e:	edc3 7a06 	vstr	s15, [r3, #24]
		sample_Accu[1]=filter_accus[6];
 8003092:	4b40      	ldr	r3, [pc, #256]	; (8003194 <sampling+0x11ac>)
 8003094:	edd3 7a06 	vldr	s15, [r3, #24]
 8003098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800309c:	ee17 2a90 	vmov	r2, s15
 80030a0:	4b3b      	ldr	r3, [pc, #236]	; (8003190 <sampling+0x11a8>)
 80030a2:	605a      	str	r2, [r3, #4]

		filter_accus[7]=sample_Accu[2];
 80030a4:	4b3a      	ldr	r3, [pc, #232]	; (8003190 <sampling+0x11a8>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	ee07 3a90 	vmov	s15, r3
 80030ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030b0:	4b38      	ldr	r3, [pc, #224]	; (8003194 <sampling+0x11ac>)
 80030b2:	edc3 7a07 	vstr	s15, [r3, #28]
		filter_accus[7]=filter_accus[7]-(filter_accus[9]*filter_res[2]);  // resonance
 80030b6:	4b37      	ldr	r3, [pc, #220]	; (8003194 <sampling+0x11ac>)
 80030b8:	ed93 7a07 	vldr	s14, [r3, #28]
 80030bc:	4b35      	ldr	r3, [pc, #212]	; (8003194 <sampling+0x11ac>)
 80030be:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80030c2:	4b32      	ldr	r3, [pc, #200]	; (800318c <sampling+0x11a4>)
 80030c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80030c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d0:	4b30      	ldr	r3, [pc, #192]	; (8003194 <sampling+0x11ac>)
 80030d2:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[4])+(filter_accus[8]*freq_point[5]);   // 30 cyles for 2 poles
 80030d6:	4b2f      	ldr	r3, [pc, #188]	; (8003194 <sampling+0x11ac>)
 80030d8:	ed93 7a07 	vldr	s14, [r3, #28]
 80030dc:	4b2a      	ldr	r3, [pc, #168]	; (8003188 <sampling+0x11a0>)
 80030de:	edd3 7a04 	vldr	s15, [r3, #16]
 80030e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030e6:	4b2b      	ldr	r3, [pc, #172]	; (8003194 <sampling+0x11ac>)
 80030e8:	edd3 6a08 	vldr	s13, [r3, #32]
 80030ec:	4b26      	ldr	r3, [pc, #152]	; (8003188 <sampling+0x11a0>)
 80030ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80030f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fa:	4b26      	ldr	r3, [pc, #152]	; (8003194 <sampling+0x11ac>)
 80030fc:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]);
 8003100:	4b24      	ldr	r3, [pc, #144]	; (8003194 <sampling+0x11ac>)
 8003102:	ed93 7a08 	vldr	s14, [r3, #32]
 8003106:	4b20      	ldr	r3, [pc, #128]	; (8003188 <sampling+0x11a0>)
 8003108:	edd3 7a04 	vldr	s15, [r3, #16]
 800310c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003110:	4b20      	ldr	r3, [pc, #128]	; (8003194 <sampling+0x11ac>)
 8003112:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003116:	4b1c      	ldr	r3, [pc, #112]	; (8003188 <sampling+0x11a0>)
 8003118:	edd3 7a05 	vldr	s15, [r3, #20]
 800311c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003124:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <sampling+0x11ac>)
 8003126:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				sample_Accu[2]=filter_accus[9];
 800312a:	4b1a      	ldr	r3, [pc, #104]	; (8003194 <sampling+0x11ac>)
 800312c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003134:	ee17 2a90 	vmov	r2, s15
 8003138:	4b15      	ldr	r3, [pc, #84]	; (8003190 <sampling+0x11a8>)
 800313a:	609a      	str	r2, [r3, #8]

				filter_accus[10]=sample_Accu[3];
 800313c:	4b14      	ldr	r3, [pc, #80]	; (8003190 <sampling+0x11a8>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	ee07 3a90 	vmov	s15, r3
 8003144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003148:	4b12      	ldr	r3, [pc, #72]	; (8003194 <sampling+0x11ac>)
 800314a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_accus[10]=filter_accus[10]-(filter_accus[12]*filter_res[3]);
 800314e:	4b11      	ldr	r3, [pc, #68]	; (8003194 <sampling+0x11ac>)
 8003150:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003154:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <sampling+0x11ac>)
 8003156:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800315a:	4b0c      	ldr	r3, [pc, #48]	; (800318c <sampling+0x11a4>)
 800315c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003160:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003168:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <sampling+0x11ac>)
 800316a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
						filter_accus[11]=(filter_accus[10]*freq_point[6])+(filter_accus[11]*freq_point[7]);   // 30 cyles for 2 poles
 800316e:	4b09      	ldr	r3, [pc, #36]	; (8003194 <sampling+0x11ac>)
 8003170:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <sampling+0x11a0>)
 8003176:	edd3 7a06 	vldr	s15, [r3, #24]
 800317a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800317e:	e00b      	b.n	8003198 <sampling+0x11b0>
 8003180:	9999999a 	.word	0x9999999a
 8003184:	3fc99999 	.word	0x3fc99999
 8003188:	20001bfc 	.word	0x20001bfc
 800318c:	20001bac 	.word	0x20001bac
 8003190:	20000730 	.word	0x20000730
 8003194:	20001bc0 	.word	0x20001bc0
 8003198:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <sampling+0x12b8>)
 800319a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800319e:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <sampling+0x12bc>)
 80031a0:	edd3 7a07 	vldr	s15, [r3, #28]
 80031a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ac:	4b3c      	ldr	r3, [pc, #240]	; (80032a0 <sampling+0x12b8>)
 80031ae:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
						filter_accus[12]=(filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]);
 80031b2:	4b3b      	ldr	r3, [pc, #236]	; (80032a0 <sampling+0x12b8>)
 80031b4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80031b8:	4b3a      	ldr	r3, [pc, #232]	; (80032a4 <sampling+0x12bc>)
 80031ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80031be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031c2:	4b37      	ldr	r3, [pc, #220]	; (80032a0 <sampling+0x12b8>)
 80031c4:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80031c8:	4b36      	ldr	r3, [pc, #216]	; (80032a4 <sampling+0x12bc>)
 80031ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80031ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031d6:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <sampling+0x12b8>)
 80031d8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
						sample_Accu[3]=filter_accus[12];
 80031dc:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <sampling+0x12b8>)
 80031de:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80031e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031e6:	ee17 2a90 	vmov	r2, s15
 80031ea:	4b2f      	ldr	r3, [pc, #188]	; (80032a8 <sampling+0x12c0>)
 80031ec:	60da      	str	r2, [r3, #12]
	//	sample_Accu[0] =filter_accus[5]; // out
	//	filter_accus[11]=filter_accus[5]; //write back new value
		//sample_Accu[0] =sample_Accu[1];


filter_Accu=0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	67fb      	str	r3, [r7, #124]	; 0x7c
filter_Accu=sample_Accu[0]+sample_Accu[1]+sample_Accu[2]+sample_Accu[3]; //filter + drum out
 80031f2:	4b2d      	ldr	r3, [pc, #180]	; (80032a8 <sampling+0x12c0>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4b2c      	ldr	r3, [pc, #176]	; (80032a8 <sampling+0x12c0>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	441a      	add	r2, r3
 80031fc:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <sampling+0x12c0>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	441a      	add	r2, r3
 8003202:	4b29      	ldr	r3, [pc, #164]	; (80032a8 <sampling+0x12c0>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	4413      	add	r3, r2
 8003208:	67fb      	str	r3, [r7, #124]	; 0x7c
filter_Accu=filter_Accu>>5;
 800320a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800320c:	115b      	asrs	r3, r3, #5
 800320e:	67fb      	str	r3, [r7, #124]	; 0x7c

 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8003210:	4b26      	ldr	r3, [pc, #152]	; (80032ac <sampling+0x12c4>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2bc7      	cmp	r3, #199	; 0xc7
 8003216:	d005      	beq.n	8003224 <sampling+0x123c>
 8003218:	4b24      	ldr	r3, [pc, #144]	; (80032ac <sampling+0x12c4>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	3301      	adds	r3, #1
 800321e:	b2da      	uxtb	r2, r3
 8003220:	4b22      	ldr	r3, [pc, #136]	; (80032ac <sampling+0x12c4>)
 8003222:	701a      	strb	r2, [r3, #0]

 if (filter_Accu>0xFFFF) {filter_Accu=0xFFFF;clipping++;} else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 8003224:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322a:	db09      	blt.n	8003240 <sampling+0x1258>
 800322c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003230:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003232:	4b1f      	ldr	r3, [pc, #124]	; (80032b0 <sampling+0x12c8>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	3301      	adds	r3, #1
 8003238:	b2da      	uxtb	r2, r3
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <sampling+0x12c8>)
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	e005      	b.n	800324c <sampling+0x1264>
 8003240:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003242:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003246:	dc01      	bgt.n	800324c <sampling+0x1264>
 8003248:	4b1a      	ldr	r3, [pc, #104]	; (80032b4 <sampling+0x12cc>)
 800324a:	67fb      	str	r3, [r7, #124]	; 0x7c


 play_sample[i_total]=(filter_Accu>>6)+1024;   // final output disable for now 2544
 800324c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800324e:	119b      	asrs	r3, r3, #6
 8003250:	b29a      	uxth	r2, r3
 8003252:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8003256:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800325a:	b291      	uxth	r1, r2
 800325c:	4a16      	ldr	r2, [pc, #88]	; (80032b8 <sampling+0x12d0>)
 800325e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8003262:	4b16      	ldr	r3, [pc, #88]	; (80032bc <sampling+0x12d4>)
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	4b14      	ldr	r3, [pc, #80]	; (80032bc <sampling+0x12d4>)
 800326c:	801a      	strh	r2, [r3, #0]
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <sampling+0x12d4>)
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003276:	f4ff ad01 	bcc.w	8002c7c <sampling+0xc94>
} // end of filer


//time_final=time_proc;   // in samples

if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 800327a:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <sampling+0x12d8>)
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <sampling+0x12a6>
 8003282:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <sampling+0x12dc>)
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	3301      	adds	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <sampling+0x12dc>)
 800328c:	801a      	strh	r2, [r3, #0]
time_final[0]=time_proc;
 800328e:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <sampling+0x12e0>)
 8003290:	881a      	ldrh	r2, [r3, #0]
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <sampling+0x12e4>)
 8003294:	801a      	strh	r2, [r3, #0]


//bank_write=0;   /// total 320 sample time (39khz)
}
 8003296:	bf00      	nop
 8003298:	3788      	adds	r7, #136	; 0x88
 800329a:	46bd      	mov	sp, r7
 800329c:	bdb0      	pop	{r4, r5, r7, pc}
 800329e:	bf00      	nop
 80032a0:	20001bc0 	.word	0x20001bc0
 80032a4:	20001bfc 	.word	0x20001bfc
 80032a8:	20000730 	.word	0x20000730
 80032ac:	20001b80 	.word	0x20001b80
 80032b0:	20005ce4 	.word	0x20005ce4
 80032b4:	ffff0001 	.word	0xffff0001
 80032b8:	20000754 	.word	0x20000754
 80032bc:	20000750 	.word	0x20000750
 80032c0:	200001b2 	.word	0x200001b2
 80032c4:	20002af2 	.word	0x20002af2
 80032c8:	20002af0 	.word	0x20002af0
 80032cc:	20002aec 	.word	0x20002aec

080032d0 <sine_count>:
mask_result=mask_tempB &1;


}

void sine_count(void) {         // sine_out is the output 9  bit  , works
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
	int32_t sine_tempA;
	int32_t sine_tempB;
	int8_t sine_frac;


	sine_counter=(sine_counterB>>5);  // up countr controlled by counter
 80032d6:	4b28      	ldr	r3, [pc, #160]	; (8003378 <sine_count+0xa8>)
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	b29a      	uxth	r2, r3
 80032de:	4b27      	ldr	r3, [pc, #156]	; (800337c <sine_count+0xac>)
 80032e0:	801a      	strh	r2, [r3, #0]
		if (sine_counter>sine_length) sine_counter = sine_length;		// seems to be faster than using a for loop to calculate both values
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <sine_count+0xac>)
 80032e4:	881a      	ldrh	r2, [r3, #0]
 80032e6:	4b26      	ldr	r3, [pc, #152]	; (8003380 <sine_count+0xb0>)
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d903      	bls.n	80032f6 <sine_count+0x26>
 80032ee:	4b24      	ldr	r3, [pc, #144]	; (8003380 <sine_count+0xb0>)
 80032f0:	881a      	ldrh	r2, [r3, #0]
 80032f2:	4b22      	ldr	r3, [pc, #136]	; (800337c <sine_count+0xac>)
 80032f4:	801a      	strh	r2, [r3, #0]
		sine_out = sine_block[sine_counter];  // 0- 40000
 80032f6:	4b21      	ldr	r3, [pc, #132]	; (800337c <sine_count+0xac>)
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	4b21      	ldr	r3, [pc, #132]	; (8003384 <sine_count+0xb4>)
 80032fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003302:	461a      	mov	r2, r3
 8003304:	4b20      	ldr	r3, [pc, #128]	; (8003388 <sine_count+0xb8>)
 8003306:	601a      	str	r2, [r3, #0]
		sine_tempA=sine_out; // grab first value , needs to be always plus
 8003308:	4b1f      	ldr	r3, [pc, #124]	; (8003388 <sine_count+0xb8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	607b      	str	r3, [r7, #4]
		sine_tempA=sine_tempA-20000; //convert to signed
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8003314:	3b20      	subs	r3, #32
 8003316:	607b      	str	r3, [r7, #4]

		sine_counter++;
 8003318:	4b18      	ldr	r3, [pc, #96]	; (800337c <sine_count+0xac>)
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	3301      	adds	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	4b16      	ldr	r3, [pc, #88]	; (800337c <sine_count+0xac>)
 8003322:	801a      	strh	r2, [r3, #0]
		if (sine_counter>=sine_length)  sine_counter=0; // set to sample length
 8003324:	4b15      	ldr	r3, [pc, #84]	; (800337c <sine_count+0xac>)
 8003326:	881a      	ldrh	r2, [r3, #0]
 8003328:	4b15      	ldr	r3, [pc, #84]	; (8003380 <sine_count+0xb0>)
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d302      	bcc.n	8003336 <sine_count+0x66>
 8003330:	4b12      	ldr	r3, [pc, #72]	; (800337c <sine_count+0xac>)
 8003332:	2200      	movs	r2, #0
 8003334:	801a      	strh	r2, [r3, #0]
				sine_tempB=sine_block[sine_counter]-20000;  // convert to signed and +256 to -256
 8003336:	4b11      	ldr	r3, [pc, #68]	; (800337c <sine_count+0xac>)
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	4b11      	ldr	r3, [pc, #68]	; (8003384 <sine_count+0xb4>)
 800333e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003342:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8003346:	3b20      	subs	r3, #32
 8003348:	603b      	str	r3, [r7, #0]
				sine_tempB=	((sine_tempB-sine_tempA)>>5)*(sine_counterB & 31);   // calculate fraction then add
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	115b      	asrs	r3, r3, #5
 8003352:	4a09      	ldr	r2, [pc, #36]	; (8003378 <sine_count+0xa8>)
 8003354:	8812      	ldrh	r2, [r2, #0]
 8003356:	f002 021f 	and.w	r2, r2, #31
 800335a:	fb02 f303 	mul.w	r3, r2, r3
 800335e:	603b      	str	r3, [r7, #0]
				sine_out=(sine_tempA+sine_tempB);   // add back to start value -20k-20k  or about 16bit
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	4413      	add	r3, r2
 8003366:	4a08      	ldr	r2, [pc, #32]	; (8003388 <sine_count+0xb8>)
 8003368:	6013      	str	r3, [r2, #0]


	}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	2000071a 	.word	0x2000071a
 800337c:	20000718 	.word	0x20000718
 8003380:	20000142 	.word	0x20000142
 8003384:	0800ac84 	.word	0x0800ac84
 8003388:	2000071c 	.word	0x2000071c
 800338c:	00000000 	.word	0x00000000

08003390 <LFO_source>:


void LFO_source(void){     // lfo
 8003390:	b590      	push	{r4, r7, lr}
 8003392:	b08b      	sub	sp, #44	; 0x2c
 8003394:	af00      	add	r7, sp, #0


float	freq_temp=0;
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	613b      	str	r3, [r7, #16]
float 	freq2_temp=0;
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
uint32_t 	freq_saw=0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	623b      	str	r3, [r7, #32]
uint8_t lfo_c ;
float offset=0;
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]
	uint32_t freq3_temp;
	uint32_t freq4_temp;
	int16_t  output_hold;
	int32_t freq_tri;

	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 80033ac:	2300      	movs	r3, #0
 80033ae:	77fb      	strb	r3, [r7, #31]
 80033b0:	e140      	b.n	8003634 <LFO_source+0x2a4>



	lfo_accu_temp=	lfo_accu[lfo_c][sampling_position_b];  // hold
 80033b2:	7ffa      	ldrb	r2, [r7, #31]
 80033b4:	4ba6      	ldr	r3, [pc, #664]	; (8003650 <LFO_source+0x2c0>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	49a6      	ldr	r1, [pc, #664]	; (8003654 <LFO_source+0x2c4>)
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	4403      	add	r3, r0
 80033c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033ca:	61bb      	str	r3, [r7, #24]

	freq3_temp=lfo_tempo_lut[LFO[lfo_c].rate] ;  // rate. this needs a little log
 80033cc:	7ffa      	ldrb	r2, [r7, #31]
 80033ce:	49a2      	ldr	r1, [pc, #648]	; (8003658 <LFO_source+0x2c8>)
 80033d0:	4613      	mov	r3, r2
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	4b9f      	ldr	r3, [pc, #636]	; (800365c <LFO_source+0x2cc>)
 80033e0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80033e4:	60bb      	str	r3, [r7, #8]
		//freq4_temp=freq3_temp*freq3_temp;  // multiply  , dont more then 8000 really


			freq3_temp=lfo_accu_temp+ freq3_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	4413      	add	r3, r2
 80033ec:	60bb      	str	r3, [r7, #8]


///  counts from -16k to +16 k   @ + 0.03125      to   +400    *10    or 13 ms *8 (10 hz ? fastest  )
		if (freq3_temp>62831) lfo_accu_temp=0; else lfo_accu_temp=freq3_temp; // write back value  counts -16000 to +16000
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f24f 526f 	movw	r2, #62831	; 0xf56f
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d902      	bls.n	80033fe <LFO_source+0x6e>
 80033f8:	2300      	movs	r3, #0
 80033fa:	61bb      	str	r3, [r7, #24]
 80033fc:	e001      	b.n	8003402 <LFO_source+0x72>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	61bb      	str	r3, [r7, #24]
		if(!seq.pos)  lfo_accu_temp=0;   // tempo sync, mediocre
 8003402:	4b97      	ldr	r3, [pc, #604]	; (8003660 <LFO_source+0x2d0>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <LFO_source+0x7e>
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
		lfo_accu[lfo_c][sampling_position]=lfo_accu_temp;
 800340e:	7ffa      	ldrb	r2, [r7, #31]
 8003410:	4b94      	ldr	r3, [pc, #592]	; (8003664 <LFO_source+0x2d4>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	498f      	ldr	r1, [pc, #572]	; (8003654 <LFO_source+0x2c4>)
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4403      	add	r3, r0
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		freq_temp=lfo_accu_temp;
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003432:	edc7 7a04 	vstr	s15, [r7, #16]
		freq2_temp=(freq_temp*0.0001);  //0-360
 8003436:	6938      	ldr	r0, [r7, #16]
 8003438:	f7fd f964 	bl	8000704 <__aeabi_f2d>
 800343c:	a382      	add	r3, pc, #520	; (adr r3, 8003648 <LFO_source+0x2b8>)
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	f7fc fed1 	bl	80001e8 <__aeabi_dmul>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4610      	mov	r0, r2
 800344c:	4619      	mov	r1, r3
 800344e:	f7fd f9b1 	bl	80007b4 <__aeabi_d2f>
 8003452:	4603      	mov	r3, r0
 8003454:	627b      	str	r3, [r7, #36]	; 0x24

		freq_temp =arm_sin_f32(freq2_temp); // seems ok   , cmsis is ok  RADIANS !!!!!
 8003456:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800345a:	f006 fe43 	bl	800a0e4 <arm_sin_f32>
 800345e:	ed87 0a04 	vstr	s0, [r7, #16]
		freq2_temp=freq_temp*LFO[lfo_c].depth*204;
 8003462:	7ffa      	ldrb	r2, [r7, #31]
 8003464:	497c      	ldr	r1, [pc, #496]	; (8003658 <LFO_source+0x2c8>)
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	3301      	adds	r3, #1
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	ee07 3a90 	vmov	s15, r3
 8003478:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800347c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003484:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8003668 <LFO_source+0x2d8>
 8003488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800348c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		if (!LFO[lfo_c].offset)    LFO[lfo_c].offset=0;   // se
 8003490:	7ffa      	ldrb	r2, [r7, #31]
 8003492:	4971      	ldr	r1, [pc, #452]	; (8003658 <LFO_source+0x2c8>)
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	3303      	adds	r3, #3
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d109      	bne.n	80034ba <LFO_source+0x12a>
 80034a6:	7ffa      	ldrb	r2, [r7, #31]
 80034a8:	496b      	ldr	r1, [pc, #428]	; (8003658 <LFO_source+0x2c8>)
 80034aa:	4613      	mov	r3, r2
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	3303      	adds	r3, #3
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
 80034ba:	7ffa      	ldrb	r2, [r7, #31]
 80034bc:	4966      	ldr	r1, [pc, #408]	; (8003658 <LFO_source+0x2c8>)
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3303      	adds	r3, #3
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	021b      	lsls	r3, r3, #8
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034d6:	edc7 7a03 	vstr	s15, [r7, #12]
			freq2_temp=(freq2_temp+offset);
 80034da:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80034de:	edd7 7a03 	vldr	s15, [r7, #12]
 80034e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		if (freq2_temp>32767)  freq2_temp=32767;
 80034ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80034ee:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800366c <LFO_source+0x2dc>
 80034f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fa:	dd01      	ble.n	8003500 <LFO_source+0x170>
 80034fc:	4b5c      	ldr	r3, [pc, #368]	; (8003670 <LFO_source+0x2e0>)
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
		if (freq2_temp<-32767) {  freq2_temp=-32767; }  // clip to 13bit -/+ 8000
 8003500:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003504:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003674 <LFO_source+0x2e4>
 8003508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800350c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003510:	d501      	bpl.n	8003516 <LFO_source+0x186>
 8003512:	4b59      	ldr	r3, [pc, #356]	; (8003678 <LFO_source+0x2e8>)
 8003514:	627b      	str	r3, [r7, #36]	; 0x24

						output_hold=freq2_temp;
 8003516:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800351a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800351e:	ee17 3a90 	vmov	r3, s15
 8003522:	80fb      	strh	r3, [r7, #6]
						if(lfo_accu_temp<32768)   freq_tri=lfo_accu_temp; else freq_tri=65535-lfo_accu_temp;    // 0-32767
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800352a:	d202      	bcs.n	8003532 <LFO_source+0x1a2>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	e004      	b.n	800353c <LFO_source+0x1ac>
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003538:	33ff      	adds	r3, #255	; 0xff
 800353a:	617b      	str	r3, [r7, #20]
					freq_saw=((lfo_accu_temp*LFO[lfo_c].depth)>>8)+offset;
 800353c:	7ffa      	ldrb	r2, [r7, #31]
 800353e:	4946      	ldr	r1, [pc, #280]	; (8003658 <LFO_source+0x2c8>)
 8003540:	4613      	mov	r3, r2
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	3301      	adds	r3, #1
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	ee07 3a90 	vmov	s15, r3
 800355c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003560:	edd7 7a03 	vldr	s15, [r7, #12]
 8003564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800356c:	ee17 3a90 	vmov	r3, s15
 8003570:	623b      	str	r3, [r7, #32]
					if (freq_saw>65535)  freq_saw=65535;   // clip
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003578:	d302      	bcc.n	8003580 <LFO_source+0x1f0>
 800357a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800357e:	623b      	str	r3, [r7, #32]

					LFO[lfo_c].out[sampling_position]=output_hold+32767;
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	7ffa      	ldrb	r2, [r7, #31]
 8003584:	4937      	ldr	r1, [pc, #220]	; (8003664 <LFO_source+0x2d4>)
 8003586:	7809      	ldrb	r1, [r1, #0]
 8003588:	460c      	mov	r4, r1
 800358a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800358e:	337f      	adds	r3, #127	; 0x7f
 8003590:	b298      	uxth	r0, r3
 8003592:	4931      	ldr	r1, [pc, #196]	; (8003658 <LFO_source+0x2c8>)
 8003594:	4613      	mov	r3, r2
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	4413      	add	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4423      	add	r3, r4
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	440b      	add	r3, r1
 80035a2:	4602      	mov	r2, r0
 80035a4:	80da      	strh	r2, [r3, #6]
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;
 80035a6:	7ffa      	ldrb	r2, [r7, #31]
 80035a8:	4b2e      	ldr	r3, [pc, #184]	; (8003664 <LFO_source+0x2d4>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	461c      	mov	r4, r3
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	b298      	uxth	r0, r3
 80035b2:	4929      	ldr	r1, [pc, #164]	; (8003658 <LFO_source+0x2c8>)
 80035b4:	4613      	mov	r3, r2
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	4413      	add	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4423      	add	r3, r4
 80035be:	330c      	adds	r3, #12
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	440b      	add	r3, r1
 80035c4:	4602      	mov	r2, r0
 80035c6:	805a      	strh	r2, [r3, #2]

				   freq_tri=((freq_tri*LFO[lfo_c].depth)>>7)+offset;
 80035c8:	7ffa      	ldrb	r2, [r7, #31]
 80035ca:	4923      	ldr	r1, [pc, #140]	; (8003658 <LFO_source+0x2c8>)
 80035cc:	4613      	mov	r3, r2
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	3301      	adds	r3, #1
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	fb02 f303 	mul.w	r3, r2, r3
 80035e2:	11db      	asrs	r3, r3, #7
 80035e4:	ee07 3a90 	vmov	s15, r3
 80035e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80035f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035f8:	ee17 3a90 	vmov	r3, s15
 80035fc:	617b      	str	r3, [r7, #20]
				   if (freq_tri>65535)  freq_tri=65535;   // clip
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003604:	db02      	blt.n	800360c <LFO_source+0x27c>
 8003606:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800360a:	617b      	str	r3, [r7, #20]
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 800360c:	7ffa      	ldrb	r2, [r7, #31]
 800360e:	4b15      	ldr	r3, [pc, #84]	; (8003664 <LFO_source+0x2d4>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	461c      	mov	r4, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	b298      	uxth	r0, r3
 8003618:	490f      	ldr	r1, [pc, #60]	; (8003658 <LFO_source+0x2c8>)
 800361a:	4613      	mov	r3, r2
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	4413      	add	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4423      	add	r3, r4
 8003624:	3314      	adds	r3, #20
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	440b      	add	r3, r1
 800362a:	4602      	mov	r2, r0
 800362c:	80da      	strh	r2, [r3, #6]
	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 800362e:	7ffb      	ldrb	r3, [r7, #31]
 8003630:	3301      	adds	r3, #1
 8003632:	77fb      	strb	r3, [r7, #31]
 8003634:	7ffb      	ldrb	r3, [r7, #31]
 8003636:	2b09      	cmp	r3, #9
 8003638:	f67f aebb 	bls.w	80033b2 <LFO_source+0x22>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch



	}
 800363c:	bf00      	nop
 800363e:	bf00      	nop
 8003640:	372c      	adds	r7, #44	; 0x2c
 8003642:	46bd      	mov	sp, r7
 8003644:	bd90      	pop	{r4, r7, pc}
 8003646:	bf00      	nop
 8003648:	eb1c432d 	.word	0xeb1c432d
 800364c:	3f1a36e2 	.word	0x3f1a36e2
 8003650:	20003ce1 	.word	0x20003ce1
 8003654:	20001cb0 	.word	0x20001cb0
 8003658:	20002af4 	.word	0x20002af4
 800365c:	20002040 	.word	0x20002040
 8003660:	20003828 	.word	0x20003828
 8003664:	20003ce0 	.word	0x20003ce0
 8003668:	434c0000 	.word	0x434c0000
 800366c:	46fffe00 	.word	0x46fffe00
 8003670:	46fffe00 	.word	0x46fffe00
 8003674:	c6fffe00 	.word	0xc6fffe00
 8003678:	c6fffe00 	.word	0xc6fffe00
 800367c:	00000000 	.word	0x00000000

08003680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003680:	b5b0      	push	{r4, r5, r7, lr}
 8003682:	b0a4      	sub	sp, #144	; 0x90
 8003684:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003686:	f001 fb1d 	bl	8004cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800368a:	f000 fce5 	bl	8004058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800368e:	f000 ffab 	bl	80045e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003692:	f000 ff89 	bl	80045a8 <MX_DMA_Init>
  MX_ADC1_Init();
 8003696:	f000 fd49 	bl	800412c <MX_ADC1_Init>
  MX_SPI2_Init();
 800369a:	f000 fe31 	bl	8004300 <MX_SPI2_Init>
  MX_TIM3_Init();
 800369e:	f000 feb9 	bl	8004414 <MX_TIM3_Init>
  MX_TIM4_Init();
 80036a2:	f000 ff2d 	bl	8004500 <MX_TIM4_Init>
  MX_I2C2_Init();
 80036a6:	f000 fdc7 	bl	8004238 <MX_I2C2_Init>
  MX_TIM2_Init();
 80036aa:	f000 fe5f 	bl	800436c <MX_TIM2_Init>
  MX_SPI1_Init();
 80036ae:	f000 fdf1 	bl	8004294 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 80036b2:	4bcb      	ldr	r3, [pc, #812]	; (80039e0 <main+0x360>)
 80036b4:	677b      	str	r3, [r7, #116]	; 0x74



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2); // write to register hspi2
 80036b6:	48cb      	ldr	r0, [pc, #812]	; (80039e4 <main+0x364>)
 80036b8:	f004 fea8 	bl	800840c <HAL_SPI_Init>
  HAL_SPI_Init(&hspi1); // write to register hspi2
 80036bc:	48ca      	ldr	r0, [pc, #808]	; (80039e8 <main+0x368>)
 80036be:	f004 fea5 	bl	800840c <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 80036c2:	48ca      	ldr	r0, [pc, #808]	; (80039ec <main+0x36c>)
 80036c4:	f005 fcf4 	bl	80090b0 <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 80036c8:	4bc9      	ldr	r3, [pc, #804]	; (80039f0 <main+0x370>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 80036ce:	48c9      	ldr	r0, [pc, #804]	; (80039f4 <main+0x374>)
 80036d0:	f005 fc94 	bl	8008ffc <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 80036d4:	48c8      	ldr	r0, [pc, #800]	; (80039f8 <main+0x378>)
 80036d6:	f005 fc91 	bl	8008ffc <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80036da:	2108      	movs	r1, #8
 80036dc:	48c3      	ldr	r0, [pc, #780]	; (80039ec <main+0x36c>)
 80036de:	f005 fda3 	bl	8009228 <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 80036e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036e6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 80036ec:	48c3      	ldr	r0, [pc, #780]	; (80039fc <main+0x37c>)
 80036ee:	f001 fbc3 	bl	8004e78 <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 80036f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036f6:	49c2      	ldr	r1, [pc, #776]	; (8003a00 <main+0x380>)
 80036f8:	48c0      	ldr	r0, [pc, #768]	; (80039fc <main+0x37c>)
 80036fa:	f001 fcfd 	bl	80050f8 <HAL_ADC_Start_DMA>
//HAL_DMA_Init(&hdma_spi2_tx);

HAL_I2C_MspInit(&hi2c2);
 80036fe:	48c1      	ldr	r0, [pc, #772]	; (8003a04 <main+0x384>)
 8003700:	f001 f8ac 	bl	800485c <HAL_I2C_MspInit>
uint8_t send_spi1[5]={0x90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
 8003704:	4ac0      	ldr	r2, [pc, #768]	; (8003a08 <main+0x388>)
 8003706:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800370a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800370e:	6018      	str	r0, [r3, #0]
 8003710:	3304      	adds	r3, #4
 8003712:	7019      	strb	r1, [r3, #0]
HAL_SPI_Receive(&hspi1, return_spi1, 2, 1000);   // manuf return sif correct , 0xEF,0x17 which is correct, then repeats when more request

*/


HAL_Delay(5);
 8003714:	2005      	movs	r0, #5
 8003716:	f001 fb47 	bl	8004da8 <HAL_Delay>


send_spi1[0]=0x06; //enable write  , only lasts for single operation
 800371a:	2306      	movs	r3, #6
 800371c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8003720:	2200      	movs	r2, #0
 8003722:	2110      	movs	r1, #16
 8003724:	48b9      	ldr	r0, [pc, #740]	; (8003a0c <main+0x38c>)
 8003726:	f003 fa53 	bl	8006bd0 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 800372a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800372e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003732:	2201      	movs	r2, #1
 8003734:	48ac      	ldr	r0, [pc, #688]	; (80039e8 <main+0x368>)
 8003736:	f004 fef2 	bl	800851e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 800373a:	2201      	movs	r2, #1
 800373c:	2110      	movs	r1, #16
 800373e:	48b3      	ldr	r0, [pc, #716]	; (8003a0c <main+0x38c>)
 8003740:	f003 fa46 	bl	8006bd0 <HAL_GPIO_WritePin>
HAL_Delay(5);
 8003744:	2005      	movs	r0, #5
 8003746:	f001 fb2f 	bl	8004da8 <HAL_Delay>
send_spi1[0]=0x20; //sector erase
 800374a:	2320      	movs	r3, #32
 800374c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
send_spi1[1]=0; //24bit address msb
 8003750:	2300      	movs	r3, #0
 8003752:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
send_spi1[2]=0; //24bit address
 8003756:	2300      	movs	r3, #0
 8003758:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
send_spi1[3]=1; //24bit address lsb
 800375c:	2301      	movs	r3, #1
 800375e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 8003762:	2200      	movs	r2, #0
 8003764:	2110      	movs	r1, #16
 8003766:	48a9      	ldr	r0, [pc, #676]	; (8003a0c <main+0x38c>)
 8003768:	f003 fa32 	bl	8006bd0 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works
 800376c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003774:	2204      	movs	r2, #4
 8003776:	489c      	ldr	r0, [pc, #624]	; (80039e8 <main+0x368>)
 8003778:	f004 fed1 	bl	800851e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 800377c:	2201      	movs	r2, #1
 800377e:	2110      	movs	r1, #16
 8003780:	48a2      	ldr	r0, [pc, #648]	; (8003a0c <main+0x38c>)
 8003782:	f003 fa25 	bl	8006bd0 <HAL_GPIO_WritePin>


send_spi1[0]=0x05; //read status register  if writing
 8003786:	2305      	movs	r3, #5
 8003788:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
send_spi1[1]=0; //24bit address msb
 800378c:	2300      	movs	r3, #0
 800378e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
status_reg[1]=1; // set busy on
 8003792:	4b9f      	ldr	r3, [pc, #636]	; (8003a10 <main+0x390>)
 8003794:	2201      	movs	r2, #1
 8003796:	705a      	strb	r2, [r3, #1]

while (status_reg[1]&1){								// check if write busy
 8003798:	e012      	b.n	80037c0 <main+0x140>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 800379a:	2200      	movs	r2, #0
 800379c:	2110      	movs	r1, #16
 800379e:	489b      	ldr	r0, [pc, #620]	; (8003a0c <main+0x38c>)
 80037a0:	f003 fa16 	bl	8006bd0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 80037a4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80037a8:	23c8      	movs	r3, #200	; 0xc8
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	2302      	movs	r3, #2
 80037ae:	4a98      	ldr	r2, [pc, #608]	; (8003a10 <main+0x390>)
 80037b0:	488d      	ldr	r0, [pc, #564]	; (80039e8 <main+0x368>)
 80037b2:	f005 f901 	bl	80089b8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80037b6:	2201      	movs	r2, #1
 80037b8:	2110      	movs	r1, #16
 80037ba:	4894      	ldr	r0, [pc, #592]	; (8003a0c <main+0x38c>)
 80037bc:	f003 fa08 	bl	8006bd0 <HAL_GPIO_WritePin>
while (status_reg[1]&1){								// check if write busy
 80037c0:	4b93      	ldr	r3, [pc, #588]	; (8003a10 <main+0x390>)
 80037c2:	785b      	ldrb	r3, [r3, #1]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e6      	bne.n	800379a <main+0x11a>
}

send_spi1[0]=0x06; //enable write again
 80037cc:	2306      	movs	r3, #6
 80037ce:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80037d2:	2200      	movs	r2, #0
 80037d4:	2110      	movs	r1, #16
 80037d6:	488d      	ldr	r0, [pc, #564]	; (8003a0c <main+0x38c>)
 80037d8:	f003 f9fa 	bl	8006bd0 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 80037dc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80037e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037e4:	2201      	movs	r2, #1
 80037e6:	4880      	ldr	r0, [pc, #512]	; (80039e8 <main+0x368>)
 80037e8:	f004 fe99 	bl	800851e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80037ec:	2201      	movs	r2, #1
 80037ee:	2110      	movs	r1, #16
 80037f0:	4886      	ldr	r0, [pc, #536]	; (8003a0c <main+0x38c>)
 80037f2:	f003 f9ed 	bl	8006bd0 <HAL_GPIO_WritePin>
HAL_Delay(5);
 80037f6:	2005      	movs	r0, #5
 80037f8:	f001 fad6 	bl	8004da8 <HAL_Delay>




//uint8_t temp_spi1[]={0x02,0,0,1,"H","E","L","L","O"," ","W","O","R","L","D",250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
uint8_t temp_spi1[]={0x02,0,0,1,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
 80037fc:	4b85      	ldr	r3, [pc, #532]	; (8003a14 <main+0x394>)
 80037fe:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8003802:	461d      	mov	r5, r3
 8003804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003808:	682b      	ldr	r3, [r5, #0]
 800380a:	8023      	strh	r3, [r4, #0]
memcpy  (send_spi1,temp_spi1, 14);   // copy new array over old
 800380c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003810:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003814:	220e      	movs	r2, #14
 8003816:	4618      	mov	r0, r3
 8003818:	f006 fcd6 	bl	800a1c8 <memcpy>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 800381c:	2200      	movs	r2, #0
 800381e:	2110      	movs	r1, #16
 8003820:	487a      	ldr	r0, [pc, #488]	; (8003a0c <main+0x38c>)
 8003822:	f003 f9d5 	bl	8006bd0 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 14, 1000);  //address,page program
 8003826:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800382a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800382e:	220e      	movs	r2, #14
 8003830:	486d      	ldr	r0, [pc, #436]	; (80039e8 <main+0x368>)
 8003832:	f004 fe74 	bl	800851e <HAL_SPI_Transmit>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003836:	2201      	movs	r2, #1
 8003838:	2110      	movs	r1, #16
 800383a:	4874      	ldr	r0, [pc, #464]	; (8003a0c <main+0x38c>)
 800383c:	f003 f9c8 	bl	8006bd0 <HAL_GPIO_WritePin>




HAL_Delay(25);
 8003840:	2019      	movs	r0, #25
 8003842:	f001 fab1 	bl	8004da8 <HAL_Delay>
send_spi1[0]=0x04; //disable write
 8003846:	2304      	movs	r3, #4
 8003848:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 800384c:	2200      	movs	r2, #0
 800384e:	2110      	movs	r1, #16
 8003850:	486e      	ldr	r0, [pc, #440]	; (8003a0c <main+0x38c>)
 8003852:	f003 f9bd 	bl	8006bd0 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8003856:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800385a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800385e:	2201      	movs	r2, #1
 8003860:	4861      	ldr	r0, [pc, #388]	; (80039e8 <main+0x368>)
 8003862:	f004 fe5c 	bl	800851e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003866:	2201      	movs	r2, #1
 8003868:	2110      	movs	r1, #16
 800386a:	4868      	ldr	r0, [pc, #416]	; (8003a0c <main+0x38c>)
 800386c:	f003 f9b0 	bl	8006bd0 <HAL_GPIO_WritePin>

HAL_Delay(5);
 8003870:	2005      	movs	r0, #5
 8003872:	f001 fa99 	bl	8004da8 <HAL_Delay>
memcpy  (send_spi1,return_spi1, 14);   // clear out
 8003876:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800387a:	220e      	movs	r2, #14
 800387c:	4966      	ldr	r1, [pc, #408]	; (8003a18 <main+0x398>)
 800387e:	4618      	mov	r0, r3
 8003880:	f006 fca2 	bl	800a1c8 <memcpy>
send_spi1[0]=0x03; //read page 1
 8003884:	2303      	movs	r3, #3
 8003886:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
send_spi1[1]=0; //24bit address msb
 800388a:	2300      	movs	r3, #0
 800388c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
send_spi1[2]=0; //24bit address
 8003890:	2300      	movs	r3, #0
 8003892:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
send_spi1[3]=1; //24bit address lsb
 8003896:	2301      	movs	r3, #1
 8003898:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 800389c:	2200      	movs	r2, #0
 800389e:	2110      	movs	r1, #16
 80038a0:	485a      	ldr	r0, [pc, #360]	; (8003a0c <main+0x38c>)
 80038a2:	f003 f995 	bl	8006bd0 <HAL_GPIO_WritePin>

HAL_SPI_Transmit (&hspi1, send_spi1, 4, 100);
 80038a6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80038aa:	2364      	movs	r3, #100	; 0x64
 80038ac:	2204      	movs	r2, #4
 80038ae:	484e      	ldr	r0, [pc, #312]	; (80039e8 <main+0x368>)
 80038b0:	f004 fe35 	bl	800851e <HAL_SPI_Transmit>
HAL_SPI_Receive (&hspi1, return_spi1, 10, 100);   // works fine
 80038b4:	2364      	movs	r3, #100	; 0x64
 80038b6:	220a      	movs	r2, #10
 80038b8:	4957      	ldr	r1, [pc, #348]	; (8003a18 <main+0x398>)
 80038ba:	484b      	ldr	r0, [pc, #300]	; (80039e8 <main+0x368>)
 80038bc:	f004 ff6b 	bl	8008796 <HAL_SPI_Receive>

//HAL_SPI_TransmitReceive(&hspi1, send_spi1, return_spi1,14, 100);  // better in case skip , 4 bytes is null then data , slow
//HAL_Delay(5);

//HAL_SPI_Receive(&hspi1, return_spi1, 12, 1000);  // reverse msb ?
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80038c0:	2201      	movs	r2, #1
 80038c2:	2110      	movs	r1, #16
 80038c4:	4851      	ldr	r0, [pc, #324]	; (8003a0c <main+0x38c>)
 80038c6:	f003 f983 	bl	8006bd0 <HAL_GPIO_WritePin>



HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 80038ca:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80038ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038d2:	2201      	movs	r2, #1
 80038d4:	4844      	ldr	r0, [pc, #272]	; (80039e8 <main+0x368>)
 80038d6:	f004 fe22 	bl	800851e <HAL_SPI_Transmit>


uint8_t potSource2[64]={0};    // { [0 ... 112] = 64 };
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	f107 0310 	add.w	r3, r7, #16
 80038e2:	223c      	movs	r2, #60	; 0x3c
 80038e4:	2100      	movs	r1, #0
 80038e6:	4618      	mov	r0, r3
 80038e8:	f006 fc7c 	bl	800a1e4 <memset>
uint16_t mem_count2=0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

HAL_I2C_Mem_Read (&hi2c2,160,64, 2 , potSource, 384,1000); //ok
 80038f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038f6:	9302      	str	r3, [sp, #8]
 80038f8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	4b47      	ldr	r3, [pc, #284]	; (8003a1c <main+0x39c>)
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	2302      	movs	r3, #2
 8003904:	2240      	movs	r2, #64	; 0x40
 8003906:	21a0      	movs	r1, #160	; 0xa0
 8003908:	483e      	ldr	r0, [pc, #248]	; (8003a04 <main+0x384>)
 800390a:	f003 fbb9 	bl	8007080 <HAL_I2C_Mem_Read>


	uint16_t mem_counter=0;
 800390e:	2300      	movs	r3, #0
 8003910:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 8003914:	4a42      	ldr	r2, [pc, #264]	; (8003a20 <main+0x3a0>)
 8003916:	4b41      	ldr	r3, [pc, #260]	; (8003a1c <main+0x39c>)
 8003918:	4614      	mov	r4, r2
 800391a:	461d      	mov	r5, r3
 800391c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800391e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003924:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003928:	c407      	stmia	r4!, {r0, r1, r2}
 800392a:	8023      	strh	r3, [r4, #0]
    memcpy(&note,potSource+156,112 );   // this works but keep checking for fragmentation
 800392c:	4b3d      	ldr	r3, [pc, #244]	; (8003a24 <main+0x3a4>)
 800392e:	2270      	movs	r2, #112	; 0x70
 8003930:	4619      	mov	r1, r3
 8003932:	483d      	ldr	r0, [pc, #244]	; (8003a28 <main+0x3a8>)
 8003934:	f006 fc48 	bl	800a1c8 <memcpy>

    for(mem_counter=0;mem_counter<10;mem_counter++){
 8003938:	2300      	movs	r3, #0
 800393a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800393e:	e043      	b.n	80039c8 <main+0x348>

		memcpy(&LFO[mem_counter],potSource+46+(mem_counter*6),6 );  // + 60 ,ok here
 8003940:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003944:	4613      	mov	r3, r2
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4a37      	ldr	r2, [pc, #220]	; (8003a2c <main+0x3ac>)
 800394e:	1898      	adds	r0, r3, r2
 8003950:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003954:	4613      	mov	r3, r2
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	4413      	add	r3, r2
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	332e      	adds	r3, #46	; 0x2e
 800395e:	4a2f      	ldr	r2, [pc, #188]	; (8003a1c <main+0x39c>)
 8003960:	4413      	add	r3, r2
 8003962:	2206      	movs	r2, #6
 8003964:	4619      	mov	r1, r3
 8003966:	f006 fc2f 	bl	800a1c8 <memcpy>

		memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 800396a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800396e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8003972:	fb02 f303 	mul.w	r3, r2, r3
 8003976:	4a2e      	ldr	r2, [pc, #184]	; (8003a30 <main+0x3b0>)
 8003978:	1898      	adds	r0, r3, r2
 800397a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	336a      	adds	r3, #106	; 0x6a
 8003986:	4a25      	ldr	r2, [pc, #148]	; (8003a1c <main+0x39c>)
 8003988:	4413      	add	r3, r2
 800398a:	2205      	movs	r2, #5
 800398c:	4619      	mov	r1, r3
 800398e:	f006 fc1b 	bl	800a1c8 <memcpy>
		memcpy(&patch[mem_counter],potSource+268+(mem_counter*6),6 );
 8003992:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4a25      	ldr	r2, [pc, #148]	; (8003a34 <main+0x3b4>)
 80039a0:	1898      	adds	r0, r3, r2
 80039a2:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80039a6:	4613      	mov	r3, r2
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	4413      	add	r3, r2
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80039b2:	4a1a      	ldr	r2, [pc, #104]	; (8003a1c <main+0x39c>)
 80039b4:	4413      	add	r3, r2
 80039b6:	2206      	movs	r2, #6
 80039b8:	4619      	mov	r1, r3
 80039ba:	f006 fc05 	bl	800a1c8 <memcpy>
    for(mem_counter=0;mem_counter<10;mem_counter++){
 80039be:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80039c2:	3301      	adds	r3, #1
 80039c4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80039c8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80039cc:	2b09      	cmp	r3, #9
 80039ce:	d9b7      	bls.n	8003940 <main+0x2c0>
	}


	for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 80039d0:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <main+0x3b8>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	801a      	strh	r2, [r3, #0]
 80039d6:	e087      	b.n	8003ae8 <main+0x468>

	for 	(n=0;n<18;n++){					// this is ok
 80039d8:	4b18      	ldr	r3, [pc, #96]	; (8003a3c <main+0x3bc>)
 80039da:	2200      	movs	r2, #0
 80039dc:	801a      	strh	r2, [r3, #0]
 80039de:	e079      	b.n	8003ad4 <main+0x454>
 80039e0:	0800d2f0 	.word	0x0800d2f0
 80039e4:	20006260 	.word	0x20006260
 80039e8:	20006208 	.word	0x20006208
 80039ec:	20006300 	.word	0x20006300
 80039f0:	40000400 	.word	0x40000400
 80039f4:	200062b8 	.word	0x200062b8
 80039f8:	20006348 	.word	0x20006348
 80039fc:	2000610c 	.word	0x2000610c
 8003a00:	20000f60 	.word	0x20000f60
 8003a04:	200061b4 	.word	0x200061b4
 8003a08:	0800a6e0 	.word	0x0800a6e0
 8003a0c:	40020000 	.word	0x40020000
 8003a10:	200001b8 	.word	0x200001b8
 8003a14:	0800a6e8 	.word	0x0800a6e8
 8003a18:	20002adc 	.word	0x20002adc
 8003a1c:	20000598 	.word	0x20000598
 8003a20:	20003828 	.word	0x20003828
 8003a24:	20000634 	.word	0x20000634
 8003a28:	200001bc 	.word	0x200001bc
 8003a2c:	20002af4 	.word	0x20002af4
 8003a30:	20002d9c 	.word	0x20002d9c
 8003a34:	20003858 	.word	0x20003858
 8003a38:	20000750 	.word	0x20000750
 8003a3c:	2000072c 	.word	0x2000072c
		if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 8003a40:	4b9b      	ldr	r3, [pc, #620]	; (8003cb0 <main+0x630>)
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d114      	bne.n	8003a72 <main+0x3f2>
 8003a48:	4b9a      	ldr	r3, [pc, #616]	; (8003cb4 <main+0x634>)
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	f003 031f 	and.w	r3, r3, #31
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	4b97      	ldr	r3, [pc, #604]	; (8003cb4 <main+0x634>)
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	440b      	add	r3, r1
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	4619      	mov	r1, r3
 8003a64:	4b92      	ldr	r3, [pc, #584]	; (8003cb0 <main+0x630>)
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	440b      	add	r3, r1
 8003a6a:	3a80      	subs	r2, #128	; 0x80
 8003a6c:	b2d1      	uxtb	r1, r2
 8003a6e:	4a92      	ldr	r2, [pc, #584]	; (8003cb8 <main+0x638>)
 8003a70:	54d1      	strb	r1, [r2, r3]
		if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 8003a72:	4b8f      	ldr	r3, [pc, #572]	; (8003cb0 <main+0x630>)
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d114      	bne.n	8003aa4 <main+0x424>
 8003a7a:	4b8e      	ldr	r3, [pc, #568]	; (8003cb4 <main+0x634>)
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3310      	adds	r3, #16
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	4b8b      	ldr	r3, [pc, #556]	; (8003cb4 <main+0x634>)
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	440b      	add	r3, r1
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4619      	mov	r1, r3
 8003a96:	4b86      	ldr	r3, [pc, #536]	; (8003cb0 <main+0x630>)
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	440b      	add	r3, r1
 8003a9c:	00d2      	lsls	r2, r2, #3
 8003a9e:	b2d1      	uxtb	r1, r2
 8003aa0:	4a85      	ldr	r2, [pc, #532]	; (8003cb8 <main+0x638>)
 8003aa2:	54d1      	strb	r1, [r2, r3]
		if (n>1)  gfx_ram[(i*18)+n] = 255;
 8003aa4:	4b82      	ldr	r3, [pc, #520]	; (8003cb0 <main+0x630>)
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d90d      	bls.n	8003ac8 <main+0x448>
 8003aac:	4b81      	ldr	r3, [pc, #516]	; (8003cb4 <main+0x634>)
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	461a      	mov	r2, r3
 8003abc:	4b7c      	ldr	r3, [pc, #496]	; (8003cb0 <main+0x630>)
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	4a7d      	ldr	r2, [pc, #500]	; (8003cb8 <main+0x638>)
 8003ac4:	21ff      	movs	r1, #255	; 0xff
 8003ac6:	54d1      	strb	r1, [r2, r3]
	for 	(n=0;n<18;n++){					// this is ok
 8003ac8:	4b79      	ldr	r3, [pc, #484]	; (8003cb0 <main+0x630>)
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	3301      	adds	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	4b77      	ldr	r3, [pc, #476]	; (8003cb0 <main+0x630>)
 8003ad2:	801a      	strh	r2, [r3, #0]
 8003ad4:	4b76      	ldr	r3, [pc, #472]	; (8003cb0 <main+0x630>)
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	2b11      	cmp	r3, #17
 8003ada:	d9b1      	bls.n	8003a40 <main+0x3c0>
	for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8003adc:	4b75      	ldr	r3, [pc, #468]	; (8003cb4 <main+0x634>)
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	4b73      	ldr	r3, [pc, #460]	; (8003cb4 <main+0x634>)
 8003ae6:	801a      	strh	r2, [r3, #0]
 8003ae8:	4b72      	ldr	r3, [pc, #456]	; (8003cb4 <main+0x634>)
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	2b3f      	cmp	r3, #63	; 0x3f
 8003aee:	f67f af73 	bls.w	80039d8 <main+0x358>

	}

	}
seq.pos=0;
 8003af2:	4b72      	ldr	r3, [pc, #456]	; (8003cbc <main+0x63c>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	701a      	strb	r2, [r3, #0]


float tempo_hold;  // calculate tempo look up


	for (i=0;i<256;i++) {
 8003af8:	4b6e      	ldr	r3, [pc, #440]	; (8003cb4 <main+0x634>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	801a      	strh	r2, [r3, #0]
 8003afe:	e045      	b.n	8003b8c <main+0x50c>

	tempo_hold=(i+180)*0.0166666666;
 8003b00:	4b6c      	ldr	r3, [pc, #432]	; (8003cb4 <main+0x634>)
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	33b4      	adds	r3, #180	; 0xb4
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fc fdea 	bl	80006e0 <__aeabi_i2d>
 8003b0c:	a364      	add	r3, pc, #400	; (adr r3, 8003ca0 <main+0x620>)
 8003b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b12:	f7fc fb69 	bl	80001e8 <__aeabi_dmul>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f7fc fe49 	bl	80007b4 <__aeabi_d2f>
 8003b22:	4603      	mov	r3, r0
 8003b24:	66bb      	str	r3, [r7, #104]	; 0x68

	tempo_hold=	1/tempo_hold;
 8003b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b2a:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8003b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b32:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	tempo_hold=	tempo_hold*2187.6*2;      // change for the sake of note length
 8003b36:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003b38:	f7fc fde4 	bl	8000704 <__aeabi_f2d>
 8003b3c:	a35a      	add	r3, pc, #360	; (adr r3, 8003ca8 <main+0x628>)
 8003b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b42:	f7fc fb51 	bl	80001e8 <__aeabi_dmul>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	f7fc fc79 	bl	8000448 <__adddf3>
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f7fc fe29 	bl	80007b4 <__aeabi_d2f>
 8003b62:	4603      	mov	r3, r0
 8003b64:	66bb      	str	r3, [r7, #104]	; 0x68
	//tempo_hold=	tempo_hold*2187.6*1;      // change for the sake of note length
	tempo_lut[i]=tempo_hold;
 8003b66:	4b53      	ldr	r3, [pc, #332]	; (8003cb4 <main+0x634>)
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b74:	ee17 3a90 	vmov	r3, s15
 8003b78:	b299      	uxth	r1, r3
 8003b7a:	4b51      	ldr	r3, [pc, #324]	; (8003cc0 <main+0x640>)
 8003b7c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i=0;i<256;i++) {
 8003b80:	4b4c      	ldr	r3, [pc, #304]	; (8003cb4 <main+0x634>)
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	3301      	adds	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	4b4a      	ldr	r3, [pc, #296]	; (8003cb4 <main+0x634>)
 8003b8a:	801a      	strh	r2, [r3, #0]
 8003b8c:	4b49      	ldr	r3, [pc, #292]	; (8003cb4 <main+0x634>)
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	2bff      	cmp	r3, #255	; 0xff
 8003b92:	d9b5      	bls.n	8003b00 <main+0x480>
	}

isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount
 8003b94:	4b4b      	ldr	r3, [pc, #300]	; (8003cc4 <main+0x644>)
 8003b96:	f240 223b 	movw	r2, #571	; 0x23b
 8003b9a:	801a      	strh	r2, [r3, #0]

	noteTiming=24;
 8003b9c:	4b4a      	ldr	r3, [pc, #296]	; (8003cc8 <main+0x648>)
 8003b9e:	2218      	movs	r2, #24
 8003ba0:	701a      	strb	r2, [r3, #0]
	for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8003ba2:	4b44      	ldr	r3, [pc, #272]	; (8003cb4 <main+0x634>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	801a      	strh	r2, [r3, #0]
 8003ba8:	e00b      	b.n	8003bc2 <main+0x542>
		spell[i]=67;
 8003baa:	4b42      	ldr	r3, [pc, #264]	; (8003cb4 <main+0x634>)
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	4b46      	ldr	r3, [pc, #280]	; (8003ccc <main+0x64c>)
 8003bb2:	2143      	movs	r1, #67	; 0x43
 8003bb4:	5499      	strb	r1, [r3, r2]
	for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8003bb6:	4b3f      	ldr	r3, [pc, #252]	; (8003cb4 <main+0x634>)
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	4b3d      	ldr	r3, [pc, #244]	; (8003cb4 <main+0x634>)
 8003bc0:	801a      	strh	r2, [r3, #0]
 8003bc2:	4b3c      	ldr	r3, [pc, #240]	; (8003cb4 <main+0x634>)
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003bca:	d3ee      	bcc.n	8003baa <main+0x52a>

	}

	gfx_clear();
 8003bcc:	f7fd fe36 	bl	800183c <gfx_clear>
uint16_t pars_counter;

for (pars_counter=0;pars_counter<512;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8003bd6:	e00e      	b.n	8003bf6 <main+0x576>

		menu_parser();  // run it closer to default_menu size ,times, if default_menu is corrupt gfx breaks pretty bad
 8003bd8:	f7fd f9b4 	bl	8000f44 <menu_parser>
		default_menu3[pars_counter>>1]=64;
 8003bdc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003be0:	085b      	lsrs	r3, r3, #1
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	461a      	mov	r2, r3
 8003be6:	4b3a      	ldr	r3, [pc, #232]	; (8003cd0 <main+0x650>)
 8003be8:	2140      	movs	r1, #64	; 0x40
 8003bea:	5499      	strb	r1, [r3, r2]
for (pars_counter=0;pars_counter<512;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8003bec:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8003bf6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bfe:	d3eb      	bcc.n	8003bd8 <main+0x558>
	}
	default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 8003c00:	4833      	ldr	r0, [pc, #204]	; (8003cd0 <main+0x650>)
 8003c02:	f7fc fae9 	bl	80001d8 <strlen>
 8003c06:	4603      	mov	r3, r0
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	4b32      	ldr	r3, [pc, #200]	; (8003cd4 <main+0x654>)
 8003c0c:	801a      	strh	r2, [r3, #0]
	menu_title_count--;  //count back one
 8003c0e:	4b32      	ldr	r3, [pc, #200]	; (8003cd8 <main+0x658>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	4b30      	ldr	r3, [pc, #192]	; (8003cd8 <main+0x658>)
 8003c18:	701a      	strb	r2, [r3, #0]
	display_clear ();
 8003c1a:	f7fd fe51 	bl	80018c0 <display_clear>


menuSelect=0;
 8003c1e:	4b2f      	ldr	r3, [pc, #188]	; (8003cdc <main+0x65c>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 8003c24:	4b2e      	ldr	r3, [pc, #184]	; (8003ce0 <main+0x660>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 8003c2a:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <main+0x664>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	4b2c      	ldr	r3, [pc, #176]	; (8003ce4 <main+0x664>)
 8003c34:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 8003c36:	4b2c      	ldr	r3, [pc, #176]	; (8003ce8 <main+0x668>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	4a2a      	ldr	r2, [pc, #168]	; (8003ce8 <main+0x668>)
 8003c3e:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing

	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 8003c40:	4b29      	ldr	r3, [pc, #164]	; (8003ce8 <main+0x668>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	2b06      	cmp	r3, #6
 8003c4a:	d101      	bne.n	8003c50 <main+0x5d0>
 8003c4c:	f7fd fc84 	bl	8001558 <analoginputloopb>


if (loop_counter2==4024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 8003c50:	4b25      	ldr	r3, [pc, #148]	; (8003ce8 <main+0x668>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f640 72b8 	movw	r2, #4024	; 0xfb8
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	f040 80f2 	bne.w	8003e42 <main+0x7c2>
	  if (mem_count>329) mem_count=0; else mem_count++; // write to first this was moved for no logical reason ?
 8003c5e:	4b23      	ldr	r3, [pc, #140]	; (8003cec <main+0x66c>)
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8003c66:	d303      	bcc.n	8003c70 <main+0x5f0>
 8003c68:	4b20      	ldr	r3, [pc, #128]	; (8003cec <main+0x66c>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	801a      	strh	r2, [r3, #0]
 8003c6e:	e005      	b.n	8003c7c <main+0x5fc>
 8003c70:	4b1e      	ldr	r3, [pc, #120]	; (8003cec <main+0x66c>)
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	3301      	adds	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	4b1c      	ldr	r3, [pc, #112]	; (8003cec <main+0x66c>)
 8003c7a:	801a      	strh	r2, [r3, #0]
	  patch_target_parse(); //
 8003c7c:	f7fd fa30 	bl	80010e0 <patch_target_parse>
	// read values from stored

	memcpy(potSource,&seq,46); // about 35
 8003c80:	4a1b      	ldr	r2, [pc, #108]	; (8003cf0 <main+0x670>)
 8003c82:	4b0e      	ldr	r3, [pc, #56]	; (8003cbc <main+0x63c>)
 8003c84:	4614      	mov	r4, r2
 8003c86:	461d      	mov	r5, r3
 8003c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c90:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003c94:	c407      	stmia	r4!, {r0, r1, r2}
 8003c96:	8023      	strh	r3, [r4, #0]

	for(i=0;i<10;i++){
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <main+0x634>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	801a      	strh	r2, [r3, #0]
 8003c9e:	e08f      	b.n	8003dc0 <main+0x740>
 8003ca0:	0febdd13 	.word	0x0febdd13
 8003ca4:	3f911111 	.word	0x3f911111
 8003ca8:	33333333 	.word	0x33333333
 8003cac:	40a11733 	.word	0x40a11733
 8003cb0:	2000072c 	.word	0x2000072c
 8003cb4:	20000750 	.word	0x20000750
 8003cb8:	20002244 	.word	0x20002244
 8003cbc:	20003828 	.word	0x20003828
 8003cc0:	20001e40 	.word	0x20001e40
 8003cc4:	20000724 	.word	0x20000724
 8003cc8:	20000414 	.word	0x20000414
 8003ccc:	20000000 	.word	0x20000000
 8003cd0:	20005d0c 	.word	0x20005d0c
 8003cd4:	20003cd6 	.word	0x20003cd6
 8003cd8:	200039c5 	.word	0x200039c5
 8003cdc:	20000722 	.word	0x20000722
 8003ce0:	20000726 	.word	0x20000726
 8003ce4:	2000074c 	.word	0x2000074c
 8003ce8:	20001ba4 	.word	0x20001ba4
 8003cec:	20001ba2 	.word	0x20001ba2
 8003cf0:	20000598 	.word	0x20000598
		if (i<8){    memcpy(potSource+156+(i*14),&note[i],14 );}  //grab note settings ,112 total , works
 8003cf4:	4ba2      	ldr	r3, [pc, #648]	; (8003f80 <main+0x900>)
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	2b07      	cmp	r3, #7
 8003cfa:	d816      	bhi.n	8003d2a <main+0x6aa>
 8003cfc:	4ba0      	ldr	r3, [pc, #640]	; (8003f80 <main+0x900>)
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	4613      	mov	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	339c      	adds	r3, #156	; 0x9c
 8003d0c:	4a9d      	ldr	r2, [pc, #628]	; (8003f84 <main+0x904>)
 8003d0e:	1898      	adds	r0, r3, r2
 8003d10:	4b9b      	ldr	r3, [pc, #620]	; (8003f80 <main+0x900>)
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	4613      	mov	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	1a9b      	subs	r3, r3, r2
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	4a9a      	ldr	r2, [pc, #616]	; (8003f88 <main+0x908>)
 8003d20:	4413      	add	r3, r2
 8003d22:	220e      	movs	r2, #14
 8003d24:	4619      	mov	r1, r3
 8003d26:	f006 fa4f 	bl	800a1c8 <memcpy>

		memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 8003d2a:	4b95      	ldr	r3, [pc, #596]	; (8003f80 <main+0x900>)
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4613      	mov	r3, r2
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4413      	add	r3, r2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	332e      	adds	r3, #46	; 0x2e
 8003d3a:	4a92      	ldr	r2, [pc, #584]	; (8003f84 <main+0x904>)
 8003d3c:	1898      	adds	r0, r3, r2
 8003d3e:	4b90      	ldr	r3, [pc, #576]	; (8003f80 <main+0x900>)
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	4613      	mov	r3, r2
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4a8f      	ldr	r2, [pc, #572]	; (8003f8c <main+0x90c>)
 8003d4e:	4413      	add	r3, r2
 8003d50:	2206      	movs	r2, #6
 8003d52:	4619      	mov	r1, r3
 8003d54:	f006 fa38 	bl	800a1c8 <memcpy>
		memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 8003d58:	4b89      	ldr	r3, [pc, #548]	; (8003f80 <main+0x900>)
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	336a      	adds	r3, #106	; 0x6a
 8003d66:	4a87      	ldr	r2, [pc, #540]	; (8003f84 <main+0x904>)
 8003d68:	1898      	adds	r0, r3, r2
 8003d6a:	4b85      	ldr	r3, [pc, #532]	; (8003f80 <main+0x900>)
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8003d74:	fb02 f303 	mul.w	r3, r2, r3
 8003d78:	4a85      	ldr	r2, [pc, #532]	; (8003f90 <main+0x910>)
 8003d7a:	4413      	add	r3, r2
 8003d7c:	2205      	movs	r2, #5
 8003d7e:	4619      	mov	r1, r3
 8003d80:	f006 fa22 	bl	800a1c8 <memcpy>
		memcpy(potSource+268+(i*6),&patch[i],6 );
 8003d84:	4b7e      	ldr	r3, [pc, #504]	; (8003f80 <main+0x900>)
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	4413      	add	r3, r2
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003d96:	4a7b      	ldr	r2, [pc, #492]	; (8003f84 <main+0x904>)
 8003d98:	1898      	adds	r0, r3, r2
 8003d9a:	4b79      	ldr	r3, [pc, #484]	; (8003f80 <main+0x900>)
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4613      	mov	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4a7a      	ldr	r2, [pc, #488]	; (8003f94 <main+0x914>)
 8003daa:	4413      	add	r3, r2
 8003dac:	2206      	movs	r2, #6
 8003dae:	4619      	mov	r1, r3
 8003db0:	f006 fa0a 	bl	800a1c8 <memcpy>
	for(i=0;i<10;i++){
 8003db4:	4b72      	ldr	r3, [pc, #456]	; (8003f80 <main+0x900>)
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	3301      	adds	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	4b70      	ldr	r3, [pc, #448]	; (8003f80 <main+0x900>)
 8003dbe:	801a      	strh	r2, [r3, #0]
 8003dc0:	4b6f      	ldr	r3, [pc, #444]	; (8003f80 <main+0x900>)
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	2b09      	cmp	r3, #9
 8003dc6:	d995      	bls.n	8003cf4 <main+0x674>
	}	// copy vars into potSource



		uint16_t mem_count2=0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	//	mem_buf=0;
			// mem_verify=0;


				 mem_buf=potSource[mem_count];
 8003dce:	4b72      	ldr	r3, [pc, #456]	; (8003f98 <main+0x918>)
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	4b6b      	ldr	r3, [pc, #428]	; (8003f84 <main+0x904>)
 8003dd6:	5c9a      	ldrb	r2, [r3, r2]
 8003dd8:	4b70      	ldr	r3, [pc, #448]	; (8003f9c <main+0x91c>)
 8003dda:	701a      	strb	r2, [r3, #0]
			//	 if (mem_buf>159) mem_buf=159;
				 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 8003ddc:	4b6e      	ldr	r3, [pc, #440]	; (8003f98 <main+0x918>)
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	099b      	lsrs	r3, r3, #6
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3301      	adds	r3, #1
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	019b      	lsls	r3, r3, #6
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	4b6a      	ldr	r3, [pc, #424]	; (8003f98 <main+0x918>)
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	4413      	add	r3, r2
 8003df8:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
				 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,&mem_verify, 1,100);
 8003dfc:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8003e00:	2364      	movs	r3, #100	; 0x64
 8003e02:	9302      	str	r3, [sp, #8]
 8003e04:	2301      	movs	r3, #1
 8003e06:	9301      	str	r3, [sp, #4]
 8003e08:	4b65      	ldr	r3, [pc, #404]	; (8003fa0 <main+0x920>)
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	21a0      	movs	r1, #160	; 0xa0
 8003e10:	4864      	ldr	r0, [pc, #400]	; (8003fa4 <main+0x924>)
 8003e12:	f003 f935 	bl	8007080 <HAL_I2C_Mem_Read>
				 if (mem_verify!=mem_buf) HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);
 8003e16:	4b62      	ldr	r3, [pc, #392]	; (8003fa0 <main+0x920>)
 8003e18:	781a      	ldrb	r2, [r3, #0]
 8003e1a:	4b60      	ldr	r3, [pc, #384]	; (8003f9c <main+0x91c>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d00c      	beq.n	8003e3c <main+0x7bc>
 8003e22:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8003e26:	2364      	movs	r3, #100	; 0x64
 8003e28:	9302      	str	r3, [sp, #8]
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	9301      	str	r3, [sp, #4]
 8003e2e:	4b5b      	ldr	r3, [pc, #364]	; (8003f9c <main+0x91c>)
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	2302      	movs	r3, #2
 8003e34:	21a0      	movs	r1, #160	; 0xa0
 8003e36:	485b      	ldr	r0, [pc, #364]	; (8003fa4 <main+0x924>)
 8003e38:	f003 f828 	bl	8006e8c <HAL_I2C_Mem_Write>



//if (mem_buf!=mem_verify)	 mem_errors++;  // check writes

loop_counter2=0; //reset
 8003e3c:	4b5a      	ldr	r3, [pc, #360]	; (8003fa8 <main+0x928>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]

}


	  if (disp_end==1)	  display_generate();      // run this after gfx draw page finish
 8003e42:	4b5a      	ldr	r3, [pc, #360]	; (8003fac <main+0x92c>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <main+0x7ce>
 8003e4a:	f7fd fd59 	bl	8001900 <display_generate>




	  if (init<6)				// after 6 its done for good   // no freeze here
 8003e4e:	4b58      	ldr	r3, [pc, #352]	; (8003fb0 <main+0x930>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b05      	cmp	r3, #5
 8003e54:	d80f      	bhi.n	8003e76 <main+0x7f6>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8003e56:	4b4a      	ldr	r3, [pc, #296]	; (8003f80 <main+0x900>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	801a      	strh	r2, [r3, #0]
 8003e5c:	e007      	b.n	8003e6e <main+0x7ee>
 8003e5e:	f7fd fc3f 	bl	80016e0 <display_init>
 8003e62:	4b47      	ldr	r3, [pc, #284]	; (8003f80 <main+0x900>)
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	3301      	adds	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	4b45      	ldr	r3, [pc, #276]	; (8003f80 <main+0x900>)
 8003e6c:	801a      	strh	r2, [r3, #0]
 8003e6e:	4b44      	ldr	r3, [pc, #272]	; (8003f80 <main+0x900>)
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	2b05      	cmp	r3, #5
 8003e74:	d9f3      	bls.n	8003e5e <main+0x7de>
}

	  if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 8003e76:	4b4e      	ldr	r3, [pc, #312]	; (8003fb0 <main+0x930>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b05      	cmp	r3, #5
 8003e7c:	d92a      	bls.n	8003ed4 <main+0x854>


		  if (gfx_send_swap==2) gfx_send_lines++;		// this is ok for now
 8003e7e:	4b4d      	ldr	r3, [pc, #308]	; (8003fb4 <main+0x934>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d105      	bne.n	8003e92 <main+0x812>
 8003e86:	4b4c      	ldr	r3, [pc, #304]	; (8003fb8 <main+0x938>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	4b4a      	ldr	r3, [pc, #296]	; (8003fb8 <main+0x938>)
 8003e90:	701a      	strb	r2, [r3, #0]
		  if (gfx_send_swap==1)  { gfx_send_counter=gfx_send_cursor*144; gfx_send_swap=2; } // jump to cursor pixel line
 8003e92:	4b48      	ldr	r3, [pc, #288]	; (8003fb4 <main+0x934>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d10c      	bne.n	8003eb4 <main+0x834>
 8003e9a:	4b48      	ldr	r3, [pc, #288]	; (8003fbc <main+0x93c>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	00d2      	lsls	r2, r2, #3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	4b45      	ldr	r3, [pc, #276]	; (8003fc0 <main+0x940>)
 8003eac:	801a      	strh	r2, [r3, #0]
 8003eae:	4b41      	ldr	r3, [pc, #260]	; (8003fb4 <main+0x934>)
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	701a      	strb	r2, [r3, #0]
	      if (gfx_send_lines==144)   { gfx_send_lines=0; gfx_send_counter=1008; gfx_send_swap=0;}  // skip to last char line
 8003eb4:	4b40      	ldr	r3, [pc, #256]	; (8003fb8 <main+0x938>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b90      	cmp	r3, #144	; 0x90
 8003eba:	d109      	bne.n	8003ed0 <main+0x850>
 8003ebc:	4b3e      	ldr	r3, [pc, #248]	; (8003fb8 <main+0x938>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	4b3f      	ldr	r3, [pc, #252]	; (8003fc0 <main+0x940>)
 8003ec4:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8003ec8:	801a      	strh	r2, [r3, #0]
 8003eca:	4b3a      	ldr	r3, [pc, #232]	; (8003fb4 <main+0x934>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	701a      	strb	r2, [r3, #0]
				gfx_send();    // don't loop this without using dma  , just makes things really slow
 8003ed0:	f7fd fc5c 	bl	800178c <gfx_send>

	}


	  if (loop_counter == 255)	{ // grab adc readings + 3ms , 32 step  // no freeze
 8003ed4:	4b3b      	ldr	r3, [pc, #236]	; (8003fc4 <main+0x944>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2bff      	cmp	r3, #255	; 0xff
 8003eda:	d128      	bne.n	8003f2e <main+0x8ae>



		  //HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

		  HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 8003edc:	483a      	ldr	r0, [pc, #232]	; (8003fc8 <main+0x948>)
 8003ede:	f001 fd19 	bl	8005914 <HAL_ADCEx_InjectedStart>
		  uint16_t adc_temp1[4]={0,0,0,0};
 8003ee2:	1d3b      	adds	r3, r7, #4
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	605a      	str	r2, [r3, #4]

		  HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 8003eea:	2101      	movs	r1, #1
 8003eec:	4836      	ldr	r0, [pc, #216]	; (8003fc8 <main+0x948>)
 8003eee:	f001 f877 	bl	8004fe0 <HAL_ADC_PollForConversion>

		  adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	4834      	ldr	r0, [pc, #208]	; (8003fc8 <main+0x948>)
 8003ef6:	f001 fe23 	bl	8005b40 <HAL_ADCEx_InjectedGetValue>
 8003efa:	4603      	mov	r3, r0
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	80bb      	strh	r3, [r7, #4]
		  adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8003f00:	2102      	movs	r1, #2
 8003f02:	4831      	ldr	r0, [pc, #196]	; (8003fc8 <main+0x948>)
 8003f04:	f001 fe1c 	bl	8005b40 <HAL_ADCEx_InjectedGetValue>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	80fb      	strh	r3, [r7, #6]
		//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
		  adc_values[0]=	  adc_temp1[0]>>7;
 8003f0e:	88bb      	ldrh	r3, [r7, #4]
 8003f10:	09db      	lsrs	r3, r3, #7
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	4b2d      	ldr	r3, [pc, #180]	; (8003fcc <main+0x94c>)
 8003f16:	801a      	strh	r2, [r3, #0]
		  adc_values[1]=	  adc_temp1[1]>>7;
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	09db      	lsrs	r3, r3, #7
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	4b2b      	ldr	r3, [pc, #172]	; (8003fcc <main+0x94c>)
 8003f20:	805a      	strh	r2, [r3, #2]
		//  adc_values[2]=	  adc_temp1[2]>>7;
		  HAL_ADCEx_InjectedStop(&hadc1) ;
 8003f22:	4829      	ldr	r0, [pc, #164]	; (8003fc8 <main+0x948>)
 8003f24:	f001 fdc0 	bl	8005aa8 <HAL_ADCEx_InjectedStop>


		  //HAL_ADC_Start_DMA(&hadc1, adc_source, 512);


	  	loop_counter=0;
 8003f28:	4b26      	ldr	r3, [pc, #152]	; (8003fc4 <main+0x944>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8003f2e:	4b28      	ldr	r3, [pc, #160]	; (8003fd0 <main+0x950>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b07      	cmp	r3, #7
 8003f34:	d106      	bne.n	8003f44 <main+0x8c4>
 8003f36:	4b27      	ldr	r3, [pc, #156]	; (8003fd4 <main+0x954>)
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d102      	bne.n	8003f44 <main+0x8c4>
 8003f3e:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <main+0x954>)
 8003f40:	2201      	movs	r2, #1
 8003f42:	801a      	strh	r2, [r3, #0]
	   if (promValue<64) promValue=promValue+1 ; else promValue=0;  // fetch eeprom   nogo
	  	  if ((promValues[promValue] ) !=(potValues[promValue]))  EEPROM.write(promValue,(potValues[promValue]));   //  not too happy can totally kill speed  will have to put elsewhere
	  	  promValues[promValue] =potValues[promValue];
	  	   */

	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 8003f44:	4b22      	ldr	r3, [pc, #136]	; (8003fd0 <main+0x950>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f54:	4820      	ldr	r0, [pc, #128]	; (8003fd8 <main+0x958>)
 8003f56:	f002 fe3b 	bl	8006bd0 <HAL_GPIO_WritePin>


	//  if (sample_pointB!=sample_pointD) bank_write=1; // set start of buffer ,grab , works ok

	  	//	adc_flag=0;
	  		if (adc_flag) {
 8003f5a:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <main+0x95c>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d06c      	beq.n	800403c <main+0x9bc>
	  		HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go
 8003f62:	4819      	ldr	r0, [pc, #100]	; (8003fc8 <main+0x948>)
 8003f64:	f001 f9b8 	bl	80052d8 <HAL_ADC_Stop_DMA>
	  		HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time
 8003f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f6c:	491c      	ldr	r1, [pc, #112]	; (8003fe0 <main+0x960>)
 8003f6e:	4816      	ldr	r0, [pc, #88]	; (8003fc8 <main+0x948>)
 8003f70:	f001 f8c2 	bl	80050f8 <HAL_ADC_Start_DMA>

	  			uint16_t* click=&adc_source[0];
 8003f74:	4b1a      	ldr	r3, [pc, #104]	; (8003fe0 <main+0x960>)
 8003f76:	67bb      	str	r3, [r7, #120]	; 0x78

	  			for (i=0;i<512;i++)
 8003f78:	4b01      	ldr	r3, [pc, #4]	; (8003f80 <main+0x900>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	801a      	strh	r2, [r3, #0]
 8003f7e:	e055      	b.n	800402c <main+0x9ac>
 8003f80:	20000750 	.word	0x20000750
 8003f84:	20000598 	.word	0x20000598
 8003f88:	200001bc 	.word	0x200001bc
 8003f8c:	20002af4 	.word	0x20002af4
 8003f90:	20002d9c 	.word	0x20002d9c
 8003f94:	20003858 	.word	0x20003858
 8003f98:	20001ba2 	.word	0x20001ba2
 8003f9c:	20001ba8 	.word	0x20001ba8
 8003fa0:	20003ce3 	.word	0x20003ce3
 8003fa4:	200061b4 	.word	0x200061b4
 8003fa8:	20001ba4 	.word	0x20001ba4
 8003fac:	200026d6 	.word	0x200026d6
 8003fb0:	20001b99 	.word	0x20001b99
 8003fb4:	200026ca 	.word	0x200026ca
 8003fb8:	200026cb 	.word	0x200026cb
 8003fbc:	200026c9 	.word	0x200026c9
 8003fc0:	200026c6 	.word	0x200026c6
 8003fc4:	2000074c 	.word	0x2000074c
 8003fc8:	2000610c 	.word	0x2000610c
 8003fcc:	200001a8 	.word	0x200001a8
 8003fd0:	20003828 	.word	0x20003828
 8003fd4:	20001b90 	.word	0x20001b90
 8003fd8:	40020800 	.word	0x40020800
 8003fdc:	20002ad8 	.word	0x20002ad8
 8003fe0:	20000f60 	.word	0x20000f60
	  			{

	  				uint16_t crap_hold=*click;
 8003fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	  			uint16_t crap_hold1=*(++click);
 8003fec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fee:	3302      	adds	r3, #2
 8003ff0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	  		click++;
 8003ffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ffc:	3302      	adds	r3, #2
 8003ffe:	67bb      	str	r3, [r7, #120]	; 0x78

	  	//			uint16_t crap_hold=adc_source[i*2];

	  				 // 				uint16_t crap_hold1=adc_source[(i*2)+1];

	  				input_holder[i] = (crap_hold+crap_hold1 )>>1;
 8004000:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8004004:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004008:	4413      	add	r3, r2
 800400a:	1059      	asrs	r1, r3, #1
 800400c:	4b0e      	ldr	r3, [pc, #56]	; (8004048 <main+0x9c8>)
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	b289      	uxth	r1, r1
 8004014:	4b0d      	ldr	r3, [pc, #52]	; (800404c <main+0x9cc>)
 8004016:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  				adc_flag=0;
 800401a:	4b0d      	ldr	r3, [pc, #52]	; (8004050 <main+0x9d0>)
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]
	  			for (i=0;i<512;i++)
 8004020:	4b09      	ldr	r3, [pc, #36]	; (8004048 <main+0x9c8>)
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	3301      	adds	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	4b07      	ldr	r3, [pc, #28]	; (8004048 <main+0x9c8>)
 800402a:	801a      	strh	r2, [r3, #0]
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <main+0x9c8>)
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004034:	d3d6      	bcc.n	8003fe4 <main+0x964>
	  			}
	  		}

	while  (bank_write)                         {							// wait for adc , priority
 8004036:	e001      	b.n	800403c <main+0x9bc>



		  //HAL_Delay(4);
	  		//sample_point=sample_point&768 ;
	  		sampling();
 8004038:	f7fd ffd6 	bl	8001fe8 <sampling>
	while  (bank_write)                         {							// wait for adc , priority
 800403c:	4b05      	ldr	r3, [pc, #20]	; (8004054 <main+0x9d4>)
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f9      	bne.n	8004038 <main+0x9b8>
	  loop_counter++ ;
 8004044:	e5f1      	b.n	8003c2a <main+0x5aa>
 8004046:	bf00      	nop
 8004048:	20000750 	.word	0x20000750
 800404c:	200026d8 	.word	0x200026d8
 8004050:	20002ad8 	.word	0x20002ad8
 8004054:	200001b2 	.word	0x200001b2

08004058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b094      	sub	sp, #80	; 0x50
 800405c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800405e:	f107 0320 	add.w	r3, r7, #32
 8004062:	2230      	movs	r2, #48	; 0x30
 8004064:	2100      	movs	r1, #0
 8004066:	4618      	mov	r0, r3
 8004068:	f006 f8bc 	bl	800a1e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800406c:	f107 030c 	add.w	r3, r7, #12
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	609a      	str	r2, [r3, #8]
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800407c:	2300      	movs	r3, #0
 800407e:	60bb      	str	r3, [r7, #8]
 8004080:	4b28      	ldr	r3, [pc, #160]	; (8004124 <SystemClock_Config+0xcc>)
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	4a27      	ldr	r2, [pc, #156]	; (8004124 <SystemClock_Config+0xcc>)
 8004086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408a:	6413      	str	r3, [r2, #64]	; 0x40
 800408c:	4b25      	ldr	r3, [pc, #148]	; (8004124 <SystemClock_Config+0xcc>)
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004098:	2300      	movs	r3, #0
 800409a:	607b      	str	r3, [r7, #4]
 800409c:	4b22      	ldr	r3, [pc, #136]	; (8004128 <SystemClock_Config+0xd0>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a21      	ldr	r2, [pc, #132]	; (8004128 <SystemClock_Config+0xd0>)
 80040a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	4b1f      	ldr	r3, [pc, #124]	; (8004128 <SystemClock_Config+0xd0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040b0:	607b      	str	r3, [r7, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040b4:	2302      	movs	r3, #2
 80040b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040b8:	2301      	movs	r3, #1
 80040ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040bc:	2310      	movs	r3, #16
 80040be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040c0:	2302      	movs	r3, #2
 80040c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80040c4:	2300      	movs	r3, #0
 80040c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80040c8:	2308      	movs	r3, #8
 80040ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80040cc:	2364      	movs	r3, #100	; 0x64
 80040ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040d0:	2302      	movs	r3, #2
 80040d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80040d4:	2304      	movs	r3, #4
 80040d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040d8:	f107 0320 	add.w	r3, r7, #32
 80040dc:	4618      	mov	r0, r3
 80040de:	f003 fd51 	bl	8007b84 <HAL_RCC_OscConfig>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80040e8:	f000 faf6 	bl	80046d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040ec:	230f      	movs	r3, #15
 80040ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040f0:	2302      	movs	r3, #2
 80040f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80040f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80040fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004102:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004104:	f107 030c 	add.w	r3, r7, #12
 8004108:	2103      	movs	r1, #3
 800410a:	4618      	mov	r0, r3
 800410c:	f003 ffb2 	bl	8008074 <HAL_RCC_ClockConfig>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004116:	f000 fadf 	bl	80046d8 <Error_Handler>
  }
}
 800411a:	bf00      	nop
 800411c:	3750      	adds	r7, #80	; 0x50
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800
 8004128:	40007000 	.word	0x40007000

0800412c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08c      	sub	sp, #48	; 0x30
 8004130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004132:	f107 0320 	add.w	r3, r7, #32
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	605a      	str	r2, [r3, #4]
 800413c:	609a      	str	r2, [r3, #8]
 800413e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8004140:	463b      	mov	r3, r7
 8004142:	2220      	movs	r2, #32
 8004144:	2100      	movs	r1, #0
 8004146:	4618      	mov	r0, r3
 8004148:	f006 f84c 	bl	800a1e4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800414c:	4b36      	ldr	r3, [pc, #216]	; (8004228 <MX_ADC1_Init+0xfc>)
 800414e:	4a37      	ldr	r2, [pc, #220]	; (800422c <MX_ADC1_Init+0x100>)
 8004150:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004152:	4b35      	ldr	r3, [pc, #212]	; (8004228 <MX_ADC1_Init+0xfc>)
 8004154:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004158:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800415a:	4b33      	ldr	r3, [pc, #204]	; (8004228 <MX_ADC1_Init+0xfc>)
 800415c:	2200      	movs	r2, #0
 800415e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004160:	4b31      	ldr	r3, [pc, #196]	; (8004228 <MX_ADC1_Init+0xfc>)
 8004162:	2201      	movs	r2, #1
 8004164:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004166:	4b30      	ldr	r3, [pc, #192]	; (8004228 <MX_ADC1_Init+0xfc>)
 8004168:	2201      	movs	r2, #1
 800416a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800416c:	4b2e      	ldr	r3, [pc, #184]	; (8004228 <MX_ADC1_Init+0xfc>)
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004174:	4b2c      	ldr	r3, [pc, #176]	; (8004228 <MX_ADC1_Init+0xfc>)
 8004176:	2200      	movs	r2, #0
 8004178:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800417a:	4b2b      	ldr	r3, [pc, #172]	; (8004228 <MX_ADC1_Init+0xfc>)
 800417c:	4a2c      	ldr	r2, [pc, #176]	; (8004230 <MX_ADC1_Init+0x104>)
 800417e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004180:	4b29      	ldr	r3, [pc, #164]	; (8004228 <MX_ADC1_Init+0xfc>)
 8004182:	2200      	movs	r2, #0
 8004184:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004186:	4b28      	ldr	r3, [pc, #160]	; (8004228 <MX_ADC1_Init+0xfc>)
 8004188:	2201      	movs	r2, #1
 800418a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800418c:	4b26      	ldr	r3, [pc, #152]	; (8004228 <MX_ADC1_Init+0xfc>)
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004194:	4b24      	ldr	r3, [pc, #144]	; (8004228 <MX_ADC1_Init+0xfc>)
 8004196:	2200      	movs	r2, #0
 8004198:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800419a:	4823      	ldr	r0, [pc, #140]	; (8004228 <MX_ADC1_Init+0xfc>)
 800419c:	f000 fe28 	bl	8004df0 <HAL_ADC_Init>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80041a6:	f000 fa97 	bl	80046d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80041aa:	2309      	movs	r3, #9
 80041ac:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80041ae:	2301      	movs	r3, #1
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80041b2:	2306      	movs	r3, #6
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041b6:	f107 0320 	add.w	r3, r7, #32
 80041ba:	4619      	mov	r1, r3
 80041bc:	481a      	ldr	r0, [pc, #104]	; (8004228 <MX_ADC1_Init+0xfc>)
 80041be:	f001 f8f9 	bl	80053b4 <HAL_ADC_ConfigChannel>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80041c8:	f000 fa86 	bl	80046d8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80041d0:	2301      	movs	r3, #1
 80041d2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80041d4:	2302      	movs	r3, #2
 80041d6:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 80041d8:	2303      	movs	r3, #3
 80041da:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80041dc:	2300      	movs	r3, #0
 80041de:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80041e0:	4b14      	ldr	r3, [pc, #80]	; (8004234 <MX_ADC1_Init+0x108>)
 80041e2:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80041e4:	2300      	movs	r3, #0
 80041e6:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80041f0:	463b      	mov	r3, r7
 80041f2:	4619      	mov	r1, r3
 80041f4:	480c      	ldr	r0, [pc, #48]	; (8004228 <MX_ADC1_Init+0xfc>)
 80041f6:	f001 fcdb 	bl	8005bb0 <HAL_ADCEx_InjectedConfigChannel>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8004200:	f000 fa6a 	bl	80046d8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8004204:	2302      	movs	r3, #2
 8004206:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8004208:	2302      	movs	r3, #2
 800420a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800420c:	463b      	mov	r3, r7
 800420e:	4619      	mov	r1, r3
 8004210:	4805      	ldr	r0, [pc, #20]	; (8004228 <MX_ADC1_Init+0xfc>)
 8004212:	f001 fccd 	bl	8005bb0 <HAL_ADCEx_InjectedConfigChannel>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 800421c:	f000 fa5c 	bl	80046d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004220:	bf00      	nop
 8004222:	3730      	adds	r7, #48	; 0x30
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	2000610c 	.word	0x2000610c
 800422c:	40012000 	.word	0x40012000
 8004230:	0f000001 	.word	0x0f000001
 8004234:	000f0001 	.word	0x000f0001

08004238 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800423c:	4b12      	ldr	r3, [pc, #72]	; (8004288 <MX_I2C2_Init+0x50>)
 800423e:	4a13      	ldr	r2, [pc, #76]	; (800428c <MX_I2C2_Init+0x54>)
 8004240:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8004242:	4b11      	ldr	r3, [pc, #68]	; (8004288 <MX_I2C2_Init+0x50>)
 8004244:	4a12      	ldr	r2, [pc, #72]	; (8004290 <MX_I2C2_Init+0x58>)
 8004246:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004248:	4b0f      	ldr	r3, [pc, #60]	; (8004288 <MX_I2C2_Init+0x50>)
 800424a:	2200      	movs	r2, #0
 800424c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800424e:	4b0e      	ldr	r3, [pc, #56]	; (8004288 <MX_I2C2_Init+0x50>)
 8004250:	2200      	movs	r2, #0
 8004252:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004254:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <MX_I2C2_Init+0x50>)
 8004256:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800425a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800425c:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <MX_I2C2_Init+0x50>)
 800425e:	2200      	movs	r2, #0
 8004260:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004262:	4b09      	ldr	r3, [pc, #36]	; (8004288 <MX_I2C2_Init+0x50>)
 8004264:	2200      	movs	r2, #0
 8004266:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004268:	4b07      	ldr	r3, [pc, #28]	; (8004288 <MX_I2C2_Init+0x50>)
 800426a:	2200      	movs	r2, #0
 800426c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800426e:	4b06      	ldr	r3, [pc, #24]	; (8004288 <MX_I2C2_Init+0x50>)
 8004270:	2200      	movs	r2, #0
 8004272:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004274:	4804      	ldr	r0, [pc, #16]	; (8004288 <MX_I2C2_Init+0x50>)
 8004276:	f002 fcc5 	bl	8006c04 <HAL_I2C_Init>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004280:	f000 fa2a 	bl	80046d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004284:	bf00      	nop
 8004286:	bd80      	pop	{r7, pc}
 8004288:	200061b4 	.word	0x200061b4
 800428c:	40005800 	.word	0x40005800
 8004290:	00061a80 	.word	0x00061a80

08004294 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004298:	4b17      	ldr	r3, [pc, #92]	; (80042f8 <MX_SPI1_Init+0x64>)
 800429a:	4a18      	ldr	r2, [pc, #96]	; (80042fc <MX_SPI1_Init+0x68>)
 800429c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800429e:	4b16      	ldr	r3, [pc, #88]	; (80042f8 <MX_SPI1_Init+0x64>)
 80042a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80042a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80042a6:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <MX_SPI1_Init+0x64>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80042ac:	4b12      	ldr	r3, [pc, #72]	; (80042f8 <MX_SPI1_Init+0x64>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042b2:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <MX_SPI1_Init+0x64>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042b8:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <MX_SPI1_Init+0x64>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80042be:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <MX_SPI1_Init+0x64>)
 80042c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80042c6:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <MX_SPI1_Init+0x64>)
 80042c8:	2208      	movs	r2, #8
 80042ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042cc:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <MX_SPI1_Init+0x64>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80042d2:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <MX_SPI1_Init+0x64>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042d8:	4b07      	ldr	r3, [pc, #28]	; (80042f8 <MX_SPI1_Init+0x64>)
 80042da:	2200      	movs	r2, #0
 80042dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80042de:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <MX_SPI1_Init+0x64>)
 80042e0:	220a      	movs	r2, #10
 80042e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80042e4:	4804      	ldr	r0, [pc, #16]	; (80042f8 <MX_SPI1_Init+0x64>)
 80042e6:	f004 f891 	bl	800840c <HAL_SPI_Init>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80042f0:	f000 f9f2 	bl	80046d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80042f4:	bf00      	nop
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20006208 	.word	0x20006208
 80042fc:	40013000 	.word	0x40013000

08004300 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004304:	4b17      	ldr	r3, [pc, #92]	; (8004364 <MX_SPI2_Init+0x64>)
 8004306:	4a18      	ldr	r2, [pc, #96]	; (8004368 <MX_SPI2_Init+0x68>)
 8004308:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800430a:	4b16      	ldr	r3, [pc, #88]	; (8004364 <MX_SPI2_Init+0x64>)
 800430c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004310:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004312:	4b14      	ldr	r3, [pc, #80]	; (8004364 <MX_SPI2_Init+0x64>)
 8004314:	2200      	movs	r2, #0
 8004316:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004318:	4b12      	ldr	r3, [pc, #72]	; (8004364 <MX_SPI2_Init+0x64>)
 800431a:	2200      	movs	r2, #0
 800431c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800431e:	4b11      	ldr	r3, [pc, #68]	; (8004364 <MX_SPI2_Init+0x64>)
 8004320:	2200      	movs	r2, #0
 8004322:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004324:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <MX_SPI2_Init+0x64>)
 8004326:	2200      	movs	r2, #0
 8004328:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800432a:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <MX_SPI2_Init+0x64>)
 800432c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004330:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004332:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <MX_SPI2_Init+0x64>)
 8004334:	2230      	movs	r2, #48	; 0x30
 8004336:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004338:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <MX_SPI2_Init+0x64>)
 800433a:	2200      	movs	r2, #0
 800433c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800433e:	4b09      	ldr	r3, [pc, #36]	; (8004364 <MX_SPI2_Init+0x64>)
 8004340:	2200      	movs	r2, #0
 8004342:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004344:	4b07      	ldr	r3, [pc, #28]	; (8004364 <MX_SPI2_Init+0x64>)
 8004346:	2200      	movs	r2, #0
 8004348:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800434a:	4b06      	ldr	r3, [pc, #24]	; (8004364 <MX_SPI2_Init+0x64>)
 800434c:	220a      	movs	r2, #10
 800434e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004350:	4804      	ldr	r0, [pc, #16]	; (8004364 <MX_SPI2_Init+0x64>)
 8004352:	f004 f85b 	bl	800840c <HAL_SPI_Init>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800435c:	f000 f9bc 	bl	80046d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004360:	bf00      	nop
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20006260 	.word	0x20006260
 8004368:	40003800 	.word	0x40003800

0800436c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08c      	sub	sp, #48	; 0x30
 8004370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004372:	f107 030c 	add.w	r3, r7, #12
 8004376:	2224      	movs	r2, #36	; 0x24
 8004378:	2100      	movs	r1, #0
 800437a:	4618      	mov	r0, r3
 800437c:	f005 ff32 	bl	800a1e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004380:	1d3b      	adds	r3, r7, #4
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004388:	4b21      	ldr	r3, [pc, #132]	; (8004410 <MX_TIM2_Init+0xa4>)
 800438a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800438e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004390:	4b1f      	ldr	r3, [pc, #124]	; (8004410 <MX_TIM2_Init+0xa4>)
 8004392:	2200      	movs	r2, #0
 8004394:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004396:	4b1e      	ldr	r3, [pc, #120]	; (8004410 <MX_TIM2_Init+0xa4>)
 8004398:	2200      	movs	r2, #0
 800439a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800439c:	4b1c      	ldr	r3, [pc, #112]	; (8004410 <MX_TIM2_Init+0xa4>)
 800439e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80043a4:	4b1a      	ldr	r3, [pc, #104]	; (8004410 <MX_TIM2_Init+0xa4>)
 80043a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043ac:	4b18      	ldr	r3, [pc, #96]	; (8004410 <MX_TIM2_Init+0xa4>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80043b2:	2301      	movs	r3, #1
 80043b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80043b6:	2302      	movs	r3, #2
 80043b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80043ba:	2301      	movs	r3, #1
 80043bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80043be:	2300      	movs	r3, #0
 80043c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80043c2:	2302      	movs	r3, #2
 80043c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80043c6:	2302      	movs	r3, #2
 80043c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80043ca:	2301      	movs	r3, #1
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80043ce:	2300      	movs	r3, #0
 80043d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 80043d2:	2302      	movs	r3, #2
 80043d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80043d6:	f107 030c 	add.w	r3, r7, #12
 80043da:	4619      	mov	r1, r3
 80043dc:	480c      	ldr	r0, [pc, #48]	; (8004410 <MX_TIM2_Init+0xa4>)
 80043de:	f004 ffd3 	bl	8009388 <HAL_TIM_Encoder_Init>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80043e8:	f000 f976 	bl	80046d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043ec:	2300      	movs	r3, #0
 80043ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80043f4:	1d3b      	adds	r3, r7, #4
 80043f6:	4619      	mov	r1, r3
 80043f8:	4805      	ldr	r0, [pc, #20]	; (8004410 <MX_TIM2_Init+0xa4>)
 80043fa:	f005 fdf1 	bl	8009fe0 <HAL_TIMEx_MasterConfigSynchronization>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004404:	f000 f968 	bl	80046d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004408:	bf00      	nop
 800440a:	3730      	adds	r7, #48	; 0x30
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	200062b8 	.word	0x200062b8

08004414 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08e      	sub	sp, #56	; 0x38
 8004418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800441a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	605a      	str	r2, [r3, #4]
 8004424:	609a      	str	r2, [r3, #8]
 8004426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004428:	f107 0320 	add.w	r3, r7, #32
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004432:	1d3b      	adds	r3, r7, #4
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	609a      	str	r2, [r3, #8]
 800443c:	60da      	str	r2, [r3, #12]
 800443e:	611a      	str	r2, [r3, #16]
 8004440:	615a      	str	r2, [r3, #20]
 8004442:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004444:	4b2c      	ldr	r3, [pc, #176]	; (80044f8 <MX_TIM3_Init+0xe4>)
 8004446:	4a2d      	ldr	r2, [pc, #180]	; (80044fc <MX_TIM3_Init+0xe8>)
 8004448:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800444a:	4b2b      	ldr	r3, [pc, #172]	; (80044f8 <MX_TIM3_Init+0xe4>)
 800444c:	2200      	movs	r2, #0
 800444e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004450:	4b29      	ldr	r3, [pc, #164]	; (80044f8 <MX_TIM3_Init+0xe4>)
 8004452:	2200      	movs	r2, #0
 8004454:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2544;
 8004456:	4b28      	ldr	r3, [pc, #160]	; (80044f8 <MX_TIM3_Init+0xe4>)
 8004458:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800445c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800445e:	4b26      	ldr	r3, [pc, #152]	; (80044f8 <MX_TIM3_Init+0xe4>)
 8004460:	2200      	movs	r2, #0
 8004462:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004464:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <MX_TIM3_Init+0xe4>)
 8004466:	2280      	movs	r2, #128	; 0x80
 8004468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800446a:	4823      	ldr	r0, [pc, #140]	; (80044f8 <MX_TIM3_Init+0xe4>)
 800446c:	f004 fd76 	bl	8008f5c <HAL_TIM_Base_Init>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004476:	f000 f92f 	bl	80046d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800447a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800447e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004480:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004484:	4619      	mov	r1, r3
 8004486:	481c      	ldr	r0, [pc, #112]	; (80044f8 <MX_TIM3_Init+0xe4>)
 8004488:	f005 f9ee 	bl	8009868 <HAL_TIM_ConfigClockSource>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004492:	f000 f921 	bl	80046d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004496:	4818      	ldr	r0, [pc, #96]	; (80044f8 <MX_TIM3_Init+0xe4>)
 8004498:	f004 fe6c 	bl	8009174 <HAL_TIM_PWM_Init>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80044a2:	f000 f919 	bl	80046d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044a6:	2300      	movs	r3, #0
 80044a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044aa:	2300      	movs	r3, #0
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80044ae:	f107 0320 	add.w	r3, r7, #32
 80044b2:	4619      	mov	r1, r3
 80044b4:	4810      	ldr	r0, [pc, #64]	; (80044f8 <MX_TIM3_Init+0xe4>)
 80044b6:	f005 fd93 	bl	8009fe0 <HAL_TIMEx_MasterConfigSynchronization>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80044c0:	f000 f90a 	bl	80046d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80044c4:	2370      	movs	r3, #112	; 0x70
 80044c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80044d4:	1d3b      	adds	r3, r7, #4
 80044d6:	2208      	movs	r2, #8
 80044d8:	4619      	mov	r1, r3
 80044da:	4807      	ldr	r0, [pc, #28]	; (80044f8 <MX_TIM3_Init+0xe4>)
 80044dc:	f005 f902 	bl	80096e4 <HAL_TIM_PWM_ConfigChannel>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80044e6:	f000 f8f7 	bl	80046d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80044ea:	4803      	ldr	r0, [pc, #12]	; (80044f8 <MX_TIM3_Init+0xe4>)
 80044ec:	f000 fb32 	bl	8004b54 <HAL_TIM_MspPostInit>

}
 80044f0:	bf00      	nop
 80044f2:	3738      	adds	r7, #56	; 0x38
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	20006300 	.word	0x20006300
 80044fc:	40000400 	.word	0x40000400

08004500 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08c      	sub	sp, #48	; 0x30
 8004504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004506:	f107 030c 	add.w	r3, r7, #12
 800450a:	2224      	movs	r2, #36	; 0x24
 800450c:	2100      	movs	r1, #0
 800450e:	4618      	mov	r0, r3
 8004510:	f005 fe68 	bl	800a1e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004514:	1d3b      	adds	r3, r7, #4
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800451c:	4b20      	ldr	r3, [pc, #128]	; (80045a0 <MX_TIM4_Init+0xa0>)
 800451e:	4a21      	ldr	r2, [pc, #132]	; (80045a4 <MX_TIM4_Init+0xa4>)
 8004520:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004522:	4b1f      	ldr	r3, [pc, #124]	; (80045a0 <MX_TIM4_Init+0xa0>)
 8004524:	2200      	movs	r2, #0
 8004526:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004528:	4b1d      	ldr	r3, [pc, #116]	; (80045a0 <MX_TIM4_Init+0xa0>)
 800452a:	2200      	movs	r2, #0
 800452c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800452e:	4b1c      	ldr	r3, [pc, #112]	; (80045a0 <MX_TIM4_Init+0xa0>)
 8004530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004534:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004536:	4b1a      	ldr	r3, [pc, #104]	; (80045a0 <MX_TIM4_Init+0xa0>)
 8004538:	2200      	movs	r2, #0
 800453a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800453c:	4b18      	ldr	r3, [pc, #96]	; (80045a0 <MX_TIM4_Init+0xa0>)
 800453e:	2200      	movs	r2, #0
 8004540:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004542:	2301      	movs	r3, #1
 8004544:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8004546:	2302      	movs	r3, #2
 8004548:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800454a:	2301      	movs	r3, #1
 800454c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800454e:	2300      	movs	r3, #0
 8004550:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8004552:	2302      	movs	r3, #2
 8004554:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004556:	2302      	movs	r3, #2
 8004558:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800455a:	2301      	movs	r3, #1
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800455e:	2300      	movs	r3, #0
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8004562:	2302      	movs	r3, #2
 8004564:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004566:	f107 030c 	add.w	r3, r7, #12
 800456a:	4619      	mov	r1, r3
 800456c:	480c      	ldr	r0, [pc, #48]	; (80045a0 <MX_TIM4_Init+0xa0>)
 800456e:	f004 ff0b 	bl	8009388 <HAL_TIM_Encoder_Init>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004578:	f000 f8ae 	bl	80046d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800457c:	2300      	movs	r3, #0
 800457e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004580:	2300      	movs	r3, #0
 8004582:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004584:	1d3b      	adds	r3, r7, #4
 8004586:	4619      	mov	r1, r3
 8004588:	4805      	ldr	r0, [pc, #20]	; (80045a0 <MX_TIM4_Init+0xa0>)
 800458a:	f005 fd29 	bl	8009fe0 <HAL_TIMEx_MasterConfigSynchronization>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004594:	f000 f8a0 	bl	80046d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004598:	bf00      	nop
 800459a:	3730      	adds	r7, #48	; 0x30
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20006348 	.word	0x20006348
 80045a4:	40000800 	.word	0x40000800

080045a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80045ae:	2300      	movs	r3, #0
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <MX_DMA_Init+0x3c>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	4a0b      	ldr	r2, [pc, #44]	; (80045e4 <MX_DMA_Init+0x3c>)
 80045b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045bc:	6313      	str	r3, [r2, #48]	; 0x30
 80045be:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <MX_DMA_Init+0x3c>)
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c6:	607b      	str	r3, [r7, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80045ca:	2200      	movs	r2, #0
 80045cc:	2100      	movs	r1, #0
 80045ce:	203c      	movs	r0, #60	; 0x3c
 80045d0:	f001 fd63 	bl	800609a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80045d4:	203c      	movs	r0, #60	; 0x3c
 80045d6:	f001 fd7c 	bl	80060d2 <HAL_NVIC_EnableIRQ>

}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40023800 	.word	0x40023800

080045e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ee:	f107 030c 	add.w	r3, r7, #12
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	605a      	str	r2, [r3, #4]
 80045f8:	609a      	str	r2, [r3, #8]
 80045fa:	60da      	str	r2, [r3, #12]
 80045fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045fe:	2300      	movs	r3, #0
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	4b2a      	ldr	r3, [pc, #168]	; (80046ac <MX_GPIO_Init+0xc4>)
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	4a29      	ldr	r2, [pc, #164]	; (80046ac <MX_GPIO_Init+0xc4>)
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	6313      	str	r3, [r2, #48]	; 0x30
 800460e:	4b27      	ldr	r3, [pc, #156]	; (80046ac <MX_GPIO_Init+0xc4>)
 8004610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	60bb      	str	r3, [r7, #8]
 8004618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800461a:	2300      	movs	r3, #0
 800461c:	607b      	str	r3, [r7, #4]
 800461e:	4b23      	ldr	r3, [pc, #140]	; (80046ac <MX_GPIO_Init+0xc4>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	4a22      	ldr	r2, [pc, #136]	; (80046ac <MX_GPIO_Init+0xc4>)
 8004624:	f043 0302 	orr.w	r3, r3, #2
 8004628:	6313      	str	r3, [r2, #48]	; 0x30
 800462a:	4b20      	ldr	r3, [pc, #128]	; (80046ac <MX_GPIO_Init+0xc4>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	607b      	str	r3, [r7, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004636:	2300      	movs	r3, #0
 8004638:	603b      	str	r3, [r7, #0]
 800463a:	4b1c      	ldr	r3, [pc, #112]	; (80046ac <MX_GPIO_Init+0xc4>)
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	4a1b      	ldr	r2, [pc, #108]	; (80046ac <MX_GPIO_Init+0xc4>)
 8004640:	f043 0304 	orr.w	r3, r3, #4
 8004644:	6313      	str	r3, [r2, #48]	; 0x30
 8004646:	4b19      	ldr	r3, [pc, #100]	; (80046ac <MX_GPIO_Init+0xc4>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004652:	2200      	movs	r2, #0
 8004654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004658:	4815      	ldr	r0, [pc, #84]	; (80046b0 <MX_GPIO_Init+0xc8>)
 800465a:	f002 fab9 	bl	8006bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 800465e:	2201      	movs	r2, #1
 8004660:	2110      	movs	r1, #16
 8004662:	4814      	ldr	r0, [pc, #80]	; (80046b4 <MX_GPIO_Init+0xcc>)
 8004664:	f002 fab4 	bl	8006bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800466c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800466e:	2301      	movs	r3, #1
 8004670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004676:	2300      	movs	r3, #0
 8004678:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800467a:	f107 030c 	add.w	r3, r7, #12
 800467e:	4619      	mov	r1, r3
 8004680:	480b      	ldr	r0, [pc, #44]	; (80046b0 <MX_GPIO_Init+0xc8>)
 8004682:	f002 f921 	bl	80068c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 8004686:	2310      	movs	r3, #16
 8004688:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800468a:	2301      	movs	r3, #1
 800468c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004692:	2303      	movs	r3, #3
 8004694:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 8004696:	f107 030c 	add.w	r3, r7, #12
 800469a:	4619      	mov	r1, r3
 800469c:	4805      	ldr	r0, [pc, #20]	; (80046b4 <MX_GPIO_Init+0xcc>)
 800469e:	f002 f913 	bl	80068c8 <HAL_GPIO_Init>

}
 80046a2:	bf00      	nop
 80046a4:	3720      	adds	r7, #32
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40023800 	.word	0x40023800
 80046b0:	40020800 	.word	0x40020800
 80046b4:	40020000 	.word	0x40020000

080046b8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
adc_flag=1;
 80046c0:	4b04      	ldr	r3, [pc, #16]	; (80046d4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	701a      	strb	r2, [r3, #0]


}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	20002ad8 	.word	0x20002ad8

080046d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046dc:	b672      	cpsid	i
}
 80046de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046e0:	e7fe      	b.n	80046e0 <Error_Handler+0x8>
	...

080046e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ea:	2300      	movs	r3, #0
 80046ec:	607b      	str	r3, [r7, #4]
 80046ee:	4b10      	ldr	r3, [pc, #64]	; (8004730 <HAL_MspInit+0x4c>)
 80046f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f2:	4a0f      	ldr	r2, [pc, #60]	; (8004730 <HAL_MspInit+0x4c>)
 80046f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046f8:	6453      	str	r3, [r2, #68]	; 0x44
 80046fa:	4b0d      	ldr	r3, [pc, #52]	; (8004730 <HAL_MspInit+0x4c>)
 80046fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004702:	607b      	str	r3, [r7, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004706:	2300      	movs	r3, #0
 8004708:	603b      	str	r3, [r7, #0]
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <HAL_MspInit+0x4c>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	4a08      	ldr	r2, [pc, #32]	; (8004730 <HAL_MspInit+0x4c>)
 8004710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004714:	6413      	str	r3, [r2, #64]	; 0x40
 8004716:	4b06      	ldr	r3, [pc, #24]	; (8004730 <HAL_MspInit+0x4c>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40023800 	.word	0x40023800

08004734 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08a      	sub	sp, #40	; 0x28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800473c:	f107 0314 	add.w	r3, r7, #20
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	605a      	str	r2, [r3, #4]
 8004746:	609a      	str	r2, [r3, #8]
 8004748:	60da      	str	r2, [r3, #12]
 800474a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a3c      	ldr	r2, [pc, #240]	; (8004844 <HAL_ADC_MspInit+0x110>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d171      	bne.n	800483a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004756:	2300      	movs	r3, #0
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	4b3b      	ldr	r3, [pc, #236]	; (8004848 <HAL_ADC_MspInit+0x114>)
 800475c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475e:	4a3a      	ldr	r2, [pc, #232]	; (8004848 <HAL_ADC_MspInit+0x114>)
 8004760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004764:	6453      	str	r3, [r2, #68]	; 0x44
 8004766:	4b38      	ldr	r3, [pc, #224]	; (8004848 <HAL_ADC_MspInit+0x114>)
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	4b34      	ldr	r3, [pc, #208]	; (8004848 <HAL_ADC_MspInit+0x114>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	4a33      	ldr	r2, [pc, #204]	; (8004848 <HAL_ADC_MspInit+0x114>)
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	6313      	str	r3, [r2, #48]	; 0x30
 8004782:	4b31      	ldr	r3, [pc, #196]	; (8004848 <HAL_ADC_MspInit+0x114>)
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800478e:	2300      	movs	r3, #0
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	4b2d      	ldr	r3, [pc, #180]	; (8004848 <HAL_ADC_MspInit+0x114>)
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	4a2c      	ldr	r2, [pc, #176]	; (8004848 <HAL_ADC_MspInit+0x114>)
 8004798:	f043 0302 	orr.w	r3, r3, #2
 800479c:	6313      	str	r3, [r2, #48]	; 0x30
 800479e:	4b2a      	ldr	r3, [pc, #168]	; (8004848 <HAL_ADC_MspInit+0x114>)
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	60bb      	str	r3, [r7, #8]
 80047a8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 80047aa:	2305      	movs	r3, #5
 80047ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047ae:	2303      	movs	r3, #3
 80047b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047b6:	f107 0314 	add.w	r3, r7, #20
 80047ba:	4619      	mov	r1, r3
 80047bc:	4823      	ldr	r0, [pc, #140]	; (800484c <HAL_ADC_MspInit+0x118>)
 80047be:	f002 f883 	bl	80068c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80047c2:	2302      	movs	r3, #2
 80047c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047c6:	2303      	movs	r3, #3
 80047c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ce:	f107 0314 	add.w	r3, r7, #20
 80047d2:	4619      	mov	r1, r3
 80047d4:	481e      	ldr	r0, [pc, #120]	; (8004850 <HAL_ADC_MspInit+0x11c>)
 80047d6:	f002 f877 	bl	80068c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80047da:	4b1e      	ldr	r3, [pc, #120]	; (8004854 <HAL_ADC_MspInit+0x120>)
 80047dc:	4a1e      	ldr	r2, [pc, #120]	; (8004858 <HAL_ADC_MspInit+0x124>)
 80047de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80047e0:	4b1c      	ldr	r3, [pc, #112]	; (8004854 <HAL_ADC_MspInit+0x120>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047e6:	4b1b      	ldr	r3, [pc, #108]	; (8004854 <HAL_ADC_MspInit+0x120>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80047ec:	4b19      	ldr	r3, [pc, #100]	; (8004854 <HAL_ADC_MspInit+0x120>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80047f2:	4b18      	ldr	r3, [pc, #96]	; (8004854 <HAL_ADC_MspInit+0x120>)
 80047f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80047fa:	4b16      	ldr	r3, [pc, #88]	; (8004854 <HAL_ADC_MspInit+0x120>)
 80047fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004800:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004802:	4b14      	ldr	r3, [pc, #80]	; (8004854 <HAL_ADC_MspInit+0x120>)
 8004804:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004808:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800480a:	4b12      	ldr	r3, [pc, #72]	; (8004854 <HAL_ADC_MspInit+0x120>)
 800480c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004810:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004812:	4b10      	ldr	r3, [pc, #64]	; (8004854 <HAL_ADC_MspInit+0x120>)
 8004814:	2200      	movs	r2, #0
 8004816:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004818:	4b0e      	ldr	r3, [pc, #56]	; (8004854 <HAL_ADC_MspInit+0x120>)
 800481a:	2200      	movs	r2, #0
 800481c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800481e:	480d      	ldr	r0, [pc, #52]	; (8004854 <HAL_ADC_MspInit+0x120>)
 8004820:	f001 fc72 	bl	8006108 <HAL_DMA_Init>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800482a:	f7ff ff55 	bl	80046d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a08      	ldr	r2, [pc, #32]	; (8004854 <HAL_ADC_MspInit+0x120>)
 8004832:	639a      	str	r2, [r3, #56]	; 0x38
 8004834:	4a07      	ldr	r2, [pc, #28]	; (8004854 <HAL_ADC_MspInit+0x120>)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800483a:	bf00      	nop
 800483c:	3728      	adds	r7, #40	; 0x28
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40012000 	.word	0x40012000
 8004848:	40023800 	.word	0x40023800
 800484c:	40020000 	.word	0x40020000
 8004850:	40020400 	.word	0x40020400
 8004854:	20006154 	.word	0x20006154
 8004858:	40026470 	.word	0x40026470

0800485c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08a      	sub	sp, #40	; 0x28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004864:	f107 0314 	add.w	r3, r7, #20
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	605a      	str	r2, [r3, #4]
 800486e:	609a      	str	r2, [r3, #8]
 8004870:	60da      	str	r2, [r3, #12]
 8004872:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a22      	ldr	r2, [pc, #136]	; (8004904 <HAL_I2C_MspInit+0xa8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d13d      	bne.n	80048fa <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800487e:	2300      	movs	r3, #0
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	4b21      	ldr	r3, [pc, #132]	; (8004908 <HAL_I2C_MspInit+0xac>)
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	4a20      	ldr	r2, [pc, #128]	; (8004908 <HAL_I2C_MspInit+0xac>)
 8004888:	f043 0302 	orr.w	r3, r3, #2
 800488c:	6313      	str	r3, [r2, #48]	; 0x30
 800488e:	4b1e      	ldr	r3, [pc, #120]	; (8004908 <HAL_I2C_MspInit+0xac>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	613b      	str	r3, [r7, #16]
 8004898:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800489a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800489e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048a0:	2312      	movs	r3, #18
 80048a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048a8:	2303      	movs	r3, #3
 80048aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80048ac:	2309      	movs	r3, #9
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048b0:	f107 0314 	add.w	r3, r7, #20
 80048b4:	4619      	mov	r1, r3
 80048b6:	4815      	ldr	r0, [pc, #84]	; (800490c <HAL_I2C_MspInit+0xb0>)
 80048b8:	f002 f806 	bl	80068c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80048bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048c2:	2312      	movs	r3, #18
 80048c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ca:	2303      	movs	r3, #3
 80048cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80048ce:	2304      	movs	r3, #4
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048d2:	f107 0314 	add.w	r3, r7, #20
 80048d6:	4619      	mov	r1, r3
 80048d8:	480c      	ldr	r0, [pc, #48]	; (800490c <HAL_I2C_MspInit+0xb0>)
 80048da:	f001 fff5 	bl	80068c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	4b09      	ldr	r3, [pc, #36]	; (8004908 <HAL_I2C_MspInit+0xac>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	4a08      	ldr	r2, [pc, #32]	; (8004908 <HAL_I2C_MspInit+0xac>)
 80048e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048ec:	6413      	str	r3, [r2, #64]	; 0x40
 80048ee:	4b06      	ldr	r3, [pc, #24]	; (8004908 <HAL_I2C_MspInit+0xac>)
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80048fa:	bf00      	nop
 80048fc:	3728      	adds	r7, #40	; 0x28
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40005800 	.word	0x40005800
 8004908:	40023800 	.word	0x40023800
 800490c:	40020400 	.word	0x40020400

08004910 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08c      	sub	sp, #48	; 0x30
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004918:	f107 031c 	add.w	r3, r7, #28
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	609a      	str	r2, [r3, #8]
 8004924:	60da      	str	r2, [r3, #12]
 8004926:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a32      	ldr	r2, [pc, #200]	; (80049f8 <HAL_SPI_MspInit+0xe8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d12c      	bne.n	800498c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004932:	2300      	movs	r3, #0
 8004934:	61bb      	str	r3, [r7, #24]
 8004936:	4b31      	ldr	r3, [pc, #196]	; (80049fc <HAL_SPI_MspInit+0xec>)
 8004938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493a:	4a30      	ldr	r2, [pc, #192]	; (80049fc <HAL_SPI_MspInit+0xec>)
 800493c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004940:	6453      	str	r3, [r2, #68]	; 0x44
 8004942:	4b2e      	ldr	r3, [pc, #184]	; (80049fc <HAL_SPI_MspInit+0xec>)
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800494a:	61bb      	str	r3, [r7, #24]
 800494c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	4b2a      	ldr	r3, [pc, #168]	; (80049fc <HAL_SPI_MspInit+0xec>)
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	4a29      	ldr	r2, [pc, #164]	; (80049fc <HAL_SPI_MspInit+0xec>)
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	6313      	str	r3, [r2, #48]	; 0x30
 800495e:	4b27      	ldr	r3, [pc, #156]	; (80049fc <HAL_SPI_MspInit+0xec>)
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 800496a:	23e0      	movs	r3, #224	; 0xe0
 800496c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800496e:	2302      	movs	r3, #2
 8004970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004972:	2300      	movs	r3, #0
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004976:	2303      	movs	r3, #3
 8004978:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800497a:	2305      	movs	r3, #5
 800497c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800497e:	f107 031c 	add.w	r3, r7, #28
 8004982:	4619      	mov	r1, r3
 8004984:	481e      	ldr	r0, [pc, #120]	; (8004a00 <HAL_SPI_MspInit+0xf0>)
 8004986:	f001 ff9f 	bl	80068c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800498a:	e031      	b.n	80049f0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1c      	ldr	r2, [pc, #112]	; (8004a04 <HAL_SPI_MspInit+0xf4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d12c      	bne.n	80049f0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004996:	2300      	movs	r3, #0
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	4b18      	ldr	r3, [pc, #96]	; (80049fc <HAL_SPI_MspInit+0xec>)
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	4a17      	ldr	r2, [pc, #92]	; (80049fc <HAL_SPI_MspInit+0xec>)
 80049a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049a4:	6413      	str	r3, [r2, #64]	; 0x40
 80049a6:	4b15      	ldr	r3, [pc, #84]	; (80049fc <HAL_SPI_MspInit+0xec>)
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ae:	613b      	str	r3, [r7, #16]
 80049b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	4b11      	ldr	r3, [pc, #68]	; (80049fc <HAL_SPI_MspInit+0xec>)
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	4a10      	ldr	r2, [pc, #64]	; (80049fc <HAL_SPI_MspInit+0xec>)
 80049bc:	f043 0302 	orr.w	r3, r3, #2
 80049c0:	6313      	str	r3, [r2, #48]	; 0x30
 80049c2:	4b0e      	ldr	r3, [pc, #56]	; (80049fc <HAL_SPI_MspInit+0xec>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 80049ce:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80049d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d4:	2302      	movs	r3, #2
 80049d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d8:	2300      	movs	r3, #0
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049dc:	2303      	movs	r3, #3
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049e0:	2305      	movs	r3, #5
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049e4:	f107 031c 	add.w	r3, r7, #28
 80049e8:	4619      	mov	r1, r3
 80049ea:	4807      	ldr	r0, [pc, #28]	; (8004a08 <HAL_SPI_MspInit+0xf8>)
 80049ec:	f001 ff6c 	bl	80068c8 <HAL_GPIO_Init>
}
 80049f0:	bf00      	nop
 80049f2:	3730      	adds	r7, #48	; 0x30
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40013000 	.word	0x40013000
 80049fc:	40023800 	.word	0x40023800
 8004a00:	40020000 	.word	0x40020000
 8004a04:	40003800 	.word	0x40003800
 8004a08:	40020400 	.word	0x40020400

08004a0c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08c      	sub	sp, #48	; 0x30
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a14:	f107 031c 	add.w	r3, r7, #28
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	605a      	str	r2, [r3, #4]
 8004a1e:	609a      	str	r2, [r3, #8]
 8004a20:	60da      	str	r2, [r3, #12]
 8004a22:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2c:	d12d      	bne.n	8004a8a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61bb      	str	r3, [r7, #24]
 8004a32:	4b30      	ldr	r3, [pc, #192]	; (8004af4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	4a2f      	ldr	r2, [pc, #188]	; (8004af4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004a38:	f043 0301 	orr.w	r3, r3, #1
 8004a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a3e:	4b2d      	ldr	r3, [pc, #180]	; (8004af4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	61bb      	str	r3, [r7, #24]
 8004a48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	4b29      	ldr	r3, [pc, #164]	; (8004af4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	4a28      	ldr	r2, [pc, #160]	; (8004af4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	6313      	str	r3, [r2, #48]	; 0x30
 8004a5a:	4b26      	ldr	r3, [pc, #152]	; (8004af4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8004a66:	f248 0302 	movw	r3, #32770	; 0x8002
 8004a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a70:	2301      	movs	r3, #1
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a74:	2300      	movs	r3, #0
 8004a76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a7c:	f107 031c 	add.w	r3, r7, #28
 8004a80:	4619      	mov	r1, r3
 8004a82:	481d      	ldr	r0, [pc, #116]	; (8004af8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004a84:	f001 ff20 	bl	80068c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004a88:	e030      	b.n	8004aec <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a1b      	ldr	r2, [pc, #108]	; (8004afc <HAL_TIM_Encoder_MspInit+0xf0>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d12b      	bne.n	8004aec <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004a94:	2300      	movs	r3, #0
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	4b16      	ldr	r3, [pc, #88]	; (8004af4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9c:	4a15      	ldr	r2, [pc, #84]	; (8004af4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004a9e:	f043 0304 	orr.w	r3, r3, #4
 8004aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8004aa4:	4b13      	ldr	r3, [pc, #76]	; (8004af4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab8:	4a0e      	ldr	r2, [pc, #56]	; (8004af4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004aba:	f043 0302 	orr.w	r3, r3, #2
 8004abe:	6313      	str	r3, [r2, #48]	; 0x30
 8004ac0:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004acc:	23c0      	movs	r3, #192	; 0xc0
 8004ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004adc:	2302      	movs	r3, #2
 8004ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ae0:	f107 031c 	add.w	r3, r7, #28
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4806      	ldr	r0, [pc, #24]	; (8004b00 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004ae8:	f001 feee 	bl	80068c8 <HAL_GPIO_Init>
}
 8004aec:	bf00      	nop
 8004aee:	3730      	adds	r7, #48	; 0x30
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40023800 	.word	0x40023800
 8004af8:	40020000 	.word	0x40020000
 8004afc:	40000800 	.word	0x40000800
 8004b00:	40020400 	.word	0x40020400

08004b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a0e      	ldr	r2, [pc, #56]	; (8004b4c <HAL_TIM_Base_MspInit+0x48>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d115      	bne.n	8004b42 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	4b0d      	ldr	r3, [pc, #52]	; (8004b50 <HAL_TIM_Base_MspInit+0x4c>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	4a0c      	ldr	r2, [pc, #48]	; (8004b50 <HAL_TIM_Base_MspInit+0x4c>)
 8004b20:	f043 0302 	orr.w	r3, r3, #2
 8004b24:	6413      	str	r3, [r2, #64]	; 0x40
 8004b26:	4b0a      	ldr	r3, [pc, #40]	; (8004b50 <HAL_TIM_Base_MspInit+0x4c>)
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004b32:	2200      	movs	r2, #0
 8004b34:	2100      	movs	r1, #0
 8004b36:	201d      	movs	r0, #29
 8004b38:	f001 faaf 	bl	800609a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004b3c:	201d      	movs	r0, #29
 8004b3e:	f001 fac8 	bl	80060d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004b42:	bf00      	nop
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40000400 	.word	0x40000400
 8004b50:	40023800 	.word	0x40023800

08004b54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b5c:	f107 030c 	add.w	r3, r7, #12
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	605a      	str	r2, [r3, #4]
 8004b66:	609a      	str	r2, [r3, #8]
 8004b68:	60da      	str	r2, [r3, #12]
 8004b6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a12      	ldr	r2, [pc, #72]	; (8004bbc <HAL_TIM_MspPostInit+0x68>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d11d      	bne.n	8004bb2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b76:	2300      	movs	r3, #0
 8004b78:	60bb      	str	r3, [r7, #8]
 8004b7a:	4b11      	ldr	r3, [pc, #68]	; (8004bc0 <HAL_TIM_MspPostInit+0x6c>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	4a10      	ldr	r2, [pc, #64]	; (8004bc0 <HAL_TIM_MspPostInit+0x6c>)
 8004b80:	f043 0302 	orr.w	r3, r3, #2
 8004b84:	6313      	str	r3, [r2, #48]	; 0x30
 8004b86:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <HAL_TIM_MspPostInit+0x6c>)
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	60bb      	str	r3, [r7, #8]
 8004b90:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004b92:	2301      	movs	r3, #1
 8004b94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b96:	2302      	movs	r3, #2
 8004b98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ba6:	f107 030c 	add.w	r3, r7, #12
 8004baa:	4619      	mov	r1, r3
 8004bac:	4805      	ldr	r0, [pc, #20]	; (8004bc4 <HAL_TIM_MspPostInit+0x70>)
 8004bae:	f001 fe8b 	bl	80068c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004bb2:	bf00      	nop
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40000400 	.word	0x40000400
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	40020400 	.word	0x40020400

08004bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004bcc:	e7fe      	b.n	8004bcc <NMI_Handler+0x4>

08004bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004bd2:	e7fe      	b.n	8004bd2 <HardFault_Handler+0x4>

08004bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004bd8:	e7fe      	b.n	8004bd8 <MemManage_Handler+0x4>

08004bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bde:	e7fe      	b.n	8004bde <BusFault_Handler+0x4>

08004be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004be4:	e7fe      	b.n	8004be4 <UsageFault_Handler+0x4>

08004be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004be6:	b480      	push	{r7}
 8004be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bea:	bf00      	nop
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bf8:	bf00      	nop
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c02:	b480      	push	{r7}
 8004c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c06:	bf00      	nop
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c14:	f000 f8a8 	bl	8004d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c18:	bf00      	nop
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004c20:	4802      	ldr	r0, [pc, #8]	; (8004c2c <TIM3_IRQHandler+0x10>)
 8004c22:	f004 fc57 	bl	80094d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004c26:	bf00      	nop
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20006300 	.word	0x20006300

08004c30 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004c34:	4802      	ldr	r0, [pc, #8]	; (8004c40 <DMA2_Stream4_IRQHandler+0x10>)
 8004c36:	f001 fbdd 	bl	80063f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8004c3a:	bf00      	nop
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20006154 	.word	0x20006154

08004c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c48:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <SystemInit+0x28>)
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4e:	4a07      	ldr	r2, [pc, #28]	; (8004c6c <SystemInit+0x28>)
 8004c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004c58:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <SystemInit+0x28>)
 8004c5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c5e:	609a      	str	r2, [r3, #8]
#endif
}
 8004c60:	bf00      	nop
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	e000ed00 	.word	0xe000ed00

08004c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ca8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004c74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004c76:	e003      	b.n	8004c80 <LoopCopyDataInit>

08004c78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004c78:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004c7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004c7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004c7e:	3104      	adds	r1, #4

08004c80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004c80:	480b      	ldr	r0, [pc, #44]	; (8004cb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004c82:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004c84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004c86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004c88:	d3f6      	bcc.n	8004c78 <CopyDataInit>
  ldr  r2, =_sbss
 8004c8a:	4a0b      	ldr	r2, [pc, #44]	; (8004cb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004c8c:	e002      	b.n	8004c94 <LoopFillZerobss>

08004c8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004c8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004c90:	f842 3b04 	str.w	r3, [r2], #4

08004c94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004c94:	4b09      	ldr	r3, [pc, #36]	; (8004cbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004c96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004c98:	d3f9      	bcc.n	8004c8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004c9a:	f7ff ffd3 	bl	8004c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c9e:	f005 fa6f 	bl	800a180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ca2:	f7fe fced 	bl	8003680 <main>
  bx  lr    
 8004ca6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ca8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004cac:	0800be70 	.word	0x0800be70
  ldr  r0, =_sdata
 8004cb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004cb4:	200003f8 	.word	0x200003f8
  ldr  r2, =_sbss
 8004cb8:	200003f8 	.word	0x200003f8
  ldr  r3, = _ebss
 8004cbc:	20006394 	.word	0x20006394

08004cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004cc0:	e7fe      	b.n	8004cc0 <ADC_IRQHandler>
	...

08004cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004cc8:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <HAL_Init+0x40>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a0d      	ldr	r2, [pc, #52]	; (8004d04 <HAL_Init+0x40>)
 8004cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004cd4:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <HAL_Init+0x40>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a0a      	ldr	r2, [pc, #40]	; (8004d04 <HAL_Init+0x40>)
 8004cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ce0:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <HAL_Init+0x40>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a07      	ldr	r2, [pc, #28]	; (8004d04 <HAL_Init+0x40>)
 8004ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cec:	2003      	movs	r0, #3
 8004cee:	f001 f9c9 	bl	8006084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	f000 f808 	bl	8004d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004cf8:	f7ff fcf4 	bl	80046e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40023c00 	.word	0x40023c00

08004d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d10:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <HAL_InitTick+0x54>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	4b12      	ldr	r3, [pc, #72]	; (8004d60 <HAL_InitTick+0x58>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d26:	4618      	mov	r0, r3
 8004d28:	f001 f9e1 	bl	80060ee <HAL_SYSTICK_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e00e      	b.n	8004d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b0f      	cmp	r3, #15
 8004d3a:	d80a      	bhi.n	8004d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	f04f 30ff 	mov.w	r0, #4294967295
 8004d44:	f001 f9a9 	bl	800609a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d48:	4a06      	ldr	r2, [pc, #24]	; (8004d64 <HAL_InitTick+0x5c>)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e000      	b.n	8004d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20000388 	.word	0x20000388
 8004d60:	20000390 	.word	0x20000390
 8004d64:	2000038c 	.word	0x2000038c

08004d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d6c:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <HAL_IncTick+0x20>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <HAL_IncTick+0x24>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4413      	add	r3, r2
 8004d78:	4a04      	ldr	r2, [pc, #16]	; (8004d8c <HAL_IncTick+0x24>)
 8004d7a:	6013      	str	r3, [r2, #0]
}
 8004d7c:	bf00      	nop
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	20000390 	.word	0x20000390
 8004d8c:	20006390 	.word	0x20006390

08004d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  return uwTick;
 8004d94:	4b03      	ldr	r3, [pc, #12]	; (8004da4 <HAL_GetTick+0x14>)
 8004d96:	681b      	ldr	r3, [r3, #0]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20006390 	.word	0x20006390

08004da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004db0:	f7ff ffee 	bl	8004d90 <HAL_GetTick>
 8004db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc0:	d005      	beq.n	8004dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <HAL_Delay+0x44>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4413      	add	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004dce:	bf00      	nop
 8004dd0:	f7ff ffde 	bl	8004d90 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d8f7      	bhi.n	8004dd0 <HAL_Delay+0x28>
  {
  }
}
 8004de0:	bf00      	nop
 8004de2:	bf00      	nop
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20000390 	.word	0x20000390

08004df0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e033      	b.n	8004e6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff fc90 	bl	8004734 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	f003 0310 	and.w	r3, r3, #16
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d118      	bne.n	8004e60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004e36:	f023 0302 	bic.w	r3, r3, #2
 8004e3a:	f043 0202 	orr.w	r2, r3, #2
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 fbe8 	bl	8005618 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f023 0303 	bic.w	r3, r3, #3
 8004e56:	f043 0201 	orr.w	r2, r3, #1
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40
 8004e5e:	e001      	b.n	8004e64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d101      	bne.n	8004e92 <HAL_ADC_Start+0x1a>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e097      	b.n	8004fc2 <HAL_ADC_Start+0x14a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d018      	beq.n	8004eda <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004eb8:	4b45      	ldr	r3, [pc, #276]	; (8004fd0 <HAL_ADC_Start+0x158>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a45      	ldr	r2, [pc, #276]	; (8004fd4 <HAL_ADC_Start+0x15c>)
 8004ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec2:	0c9a      	lsrs	r2, r3, #18
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	4413      	add	r3, r2
 8004eca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004ecc:	e002      	b.n	8004ed4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f9      	bne.n	8004ece <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d15f      	bne.n	8004fa8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004ef0:	f023 0301 	bic.w	r3, r3, #1
 8004ef4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d007      	beq.n	8004f1a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f26:	d106      	bne.n	8004f36 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2c:	f023 0206 	bic.w	r2, r3, #6
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	645a      	str	r2, [r3, #68]	; 0x44
 8004f34:	e002      	b.n	8004f3c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f44:	4b24      	ldr	r3, [pc, #144]	; (8004fd8 <HAL_ADC_Start+0x160>)
 8004f46:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004f50:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f003 031f 	and.w	r3, r3, #31
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10f      	bne.n	8004f7e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d129      	bne.n	8004fc0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004f7a:	609a      	str	r2, [r3, #8]
 8004f7c:	e020      	b.n	8004fc0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a16      	ldr	r2, [pc, #88]	; (8004fdc <HAL_ADC_Start+0x164>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d11b      	bne.n	8004fc0 <HAL_ADC_Start+0x148>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d114      	bne.n	8004fc0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004fa4:	609a      	str	r2, [r3, #8]
 8004fa6:	e00b      	b.n	8004fc0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	f043 0210 	orr.w	r2, r3, #16
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb8:	f043 0201 	orr.w	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	20000388 	.word	0x20000388
 8004fd4:	431bde83 	.word	0x431bde83
 8004fd8:	40012300 	.word	0x40012300
 8004fdc:	40012000 	.word	0x40012000

08004fe0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffc:	d113      	bne.n	8005026 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800500c:	d10b      	bne.n	8005026 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	f043 0220 	orr.w	r2, r3, #32
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e063      	b.n	80050ee <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005026:	f7ff feb3 	bl	8004d90 <HAL_GetTick>
 800502a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800502c:	e021      	b.n	8005072 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005034:	d01d      	beq.n	8005072 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d007      	beq.n	800504c <HAL_ADC_PollForConversion+0x6c>
 800503c:	f7ff fea8 	bl	8004d90 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d212      	bcs.n	8005072 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b02      	cmp	r3, #2
 8005058:	d00b      	beq.n	8005072 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	f043 0204 	orr.w	r2, r3, #4
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e03d      	b.n	80050ee <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b02      	cmp	r3, #2
 800507e:	d1d6      	bne.n	800502e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0212 	mvn.w	r2, #18
 8005088:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d123      	bne.n	80050ec <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d11f      	bne.n	80050ec <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d006      	beq.n	80050c8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d111      	bne.n	80050ec <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d105      	bne.n	80050ec <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	f043 0201 	orr.w	r2, r3, #1
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_ADC_Start_DMA+0x1e>
 8005112:	2302      	movs	r3, #2
 8005114:	e0ce      	b.n	80052b4 <HAL_ADC_Start_DMA+0x1bc>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b01      	cmp	r3, #1
 800512a:	d018      	beq.n	800515e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800513c:	4b5f      	ldr	r3, [pc, #380]	; (80052bc <HAL_ADC_Start_DMA+0x1c4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a5f      	ldr	r2, [pc, #380]	; (80052c0 <HAL_ADC_Start_DMA+0x1c8>)
 8005142:	fba2 2303 	umull	r2, r3, r2, r3
 8005146:	0c9a      	lsrs	r2, r3, #18
 8005148:	4613      	mov	r3, r2
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	4413      	add	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005150:	e002      	b.n	8005158 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	3b01      	subs	r3, #1
 8005156:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1f9      	bne.n	8005152 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800516c:	d107      	bne.n	800517e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800517c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b01      	cmp	r3, #1
 800518a:	f040 8086 	bne.w	800529a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005196:	f023 0301 	bic.w	r3, r3, #1
 800519a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d007      	beq.n	80051c0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80051b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051cc:	d106      	bne.n	80051dc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d2:	f023 0206 	bic.w	r2, r3, #6
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	645a      	str	r2, [r3, #68]	; 0x44
 80051da:	e002      	b.n	80051e2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051ea:	4b36      	ldr	r3, [pc, #216]	; (80052c4 <HAL_ADC_Start_DMA+0x1cc>)
 80051ec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f2:	4a35      	ldr	r2, [pc, #212]	; (80052c8 <HAL_ADC_Start_DMA+0x1d0>)
 80051f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	4a34      	ldr	r2, [pc, #208]	; (80052cc <HAL_ADC_Start_DMA+0x1d4>)
 80051fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005202:	4a33      	ldr	r2, [pc, #204]	; (80052d0 <HAL_ADC_Start_DMA+0x1d8>)
 8005204:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800520e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800521e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800522e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	334c      	adds	r3, #76	; 0x4c
 800523a:	4619      	mov	r1, r3
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f001 f810 	bl	8006264 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f003 031f 	and.w	r3, r3, #31
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10f      	bne.n	8005270 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d129      	bne.n	80052b2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800526c:	609a      	str	r2, [r3, #8]
 800526e:	e020      	b.n	80052b2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a17      	ldr	r2, [pc, #92]	; (80052d4 <HAL_ADC_Start_DMA+0x1dc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d11b      	bne.n	80052b2 <HAL_ADC_Start_DMA+0x1ba>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d114      	bne.n	80052b2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005296:	609a      	str	r2, [r3, #8]
 8005298:	e00b      	b.n	80052b2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	f043 0210 	orr.w	r2, r3, #16
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052aa:	f043 0201 	orr.w	r2, r3, #1
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	20000388 	.word	0x20000388
 80052c0:	431bde83 	.word	0x431bde83
 80052c4:	40012300 	.word	0x40012300
 80052c8:	08005811 	.word	0x08005811
 80052cc:	080058cb 	.word	0x080058cb
 80052d0:	080058e7 	.word	0x080058e7
 80052d4:	40012000 	.word	0x40012000

080052d8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <HAL_ADC_Stop_DMA+0x1a>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e048      	b.n	8005384 <HAL_ADC_Stop_DMA+0xac>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0201 	bic.w	r2, r2, #1
 8005308:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d130      	bne.n	800537a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689a      	ldr	r2, [r3, #8]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005326:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d10f      	bne.n	8005356 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533a:	4618      	mov	r0, r3
 800533c:	f000 ffea 	bl	8006314 <HAL_DMA_Abort>
 8005340:	4603      	mov	r3, r0
 8005342:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d005      	beq.n	8005356 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8005364:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800536e:	f023 0301 	bic.w	r3, r3, #1
 8005372:	f043 0201 	orr.w	r2, r3, #1
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005382:	7bfb      	ldrb	r3, [r7, #15]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_ADC_ConfigChannel+0x1c>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e113      	b.n	80055f8 <HAL_ADC_ConfigChannel+0x244>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b09      	cmp	r3, #9
 80053de:	d925      	bls.n	800542c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68d9      	ldr	r1, [r3, #12]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	4613      	mov	r3, r2
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	4413      	add	r3, r2
 80053f4:	3b1e      	subs	r3, #30
 80053f6:	2207      	movs	r2, #7
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	43da      	mvns	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	400a      	ands	r2, r1
 8005404:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68d9      	ldr	r1, [r3, #12]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	b29b      	uxth	r3, r3
 8005416:	4618      	mov	r0, r3
 8005418:	4603      	mov	r3, r0
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	4403      	add	r3, r0
 800541e:	3b1e      	subs	r3, #30
 8005420:	409a      	lsls	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	60da      	str	r2, [r3, #12]
 800542a:	e022      	b.n	8005472 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6919      	ldr	r1, [r3, #16]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	b29b      	uxth	r3, r3
 8005438:	461a      	mov	r2, r3
 800543a:	4613      	mov	r3, r2
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	4413      	add	r3, r2
 8005440:	2207      	movs	r2, #7
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	43da      	mvns	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	400a      	ands	r2, r1
 800544e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6919      	ldr	r1, [r3, #16]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	b29b      	uxth	r3, r3
 8005460:	4618      	mov	r0, r3
 8005462:	4603      	mov	r3, r0
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	4403      	add	r3, r0
 8005468:	409a      	lsls	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2b06      	cmp	r3, #6
 8005478:	d824      	bhi.n	80054c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	3b05      	subs	r3, #5
 800548c:	221f      	movs	r2, #31
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	43da      	mvns	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	400a      	ands	r2, r1
 800549a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	4618      	mov	r0, r3
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	3b05      	subs	r3, #5
 80054b6:	fa00 f203 	lsl.w	r2, r0, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	635a      	str	r2, [r3, #52]	; 0x34
 80054c2:	e04c      	b.n	800555e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b0c      	cmp	r3, #12
 80054ca:	d824      	bhi.n	8005516 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	4613      	mov	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	3b23      	subs	r3, #35	; 0x23
 80054de:	221f      	movs	r2, #31
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	43da      	mvns	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	400a      	ands	r2, r1
 80054ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	4618      	mov	r0, r3
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	4613      	mov	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	3b23      	subs	r3, #35	; 0x23
 8005508:	fa00 f203 	lsl.w	r2, r0, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	631a      	str	r2, [r3, #48]	; 0x30
 8005514:	e023      	b.n	800555e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	3b41      	subs	r3, #65	; 0x41
 8005528:	221f      	movs	r2, #31
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	43da      	mvns	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	400a      	ands	r2, r1
 8005536:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	b29b      	uxth	r3, r3
 8005544:	4618      	mov	r0, r3
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	3b41      	subs	r3, #65	; 0x41
 8005552:	fa00 f203 	lsl.w	r2, r0, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800555e:	4b29      	ldr	r3, [pc, #164]	; (8005604 <HAL_ADC_ConfigChannel+0x250>)
 8005560:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a28      	ldr	r2, [pc, #160]	; (8005608 <HAL_ADC_ConfigChannel+0x254>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d10f      	bne.n	800558c <HAL_ADC_ConfigChannel+0x1d8>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b12      	cmp	r3, #18
 8005572:	d10b      	bne.n	800558c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a1d      	ldr	r2, [pc, #116]	; (8005608 <HAL_ADC_ConfigChannel+0x254>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d12b      	bne.n	80055ee <HAL_ADC_ConfigChannel+0x23a>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a1c      	ldr	r2, [pc, #112]	; (800560c <HAL_ADC_ConfigChannel+0x258>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d003      	beq.n	80055a8 <HAL_ADC_ConfigChannel+0x1f4>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b11      	cmp	r3, #17
 80055a6:	d122      	bne.n	80055ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a11      	ldr	r2, [pc, #68]	; (800560c <HAL_ADC_ConfigChannel+0x258>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d111      	bne.n	80055ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80055ca:	4b11      	ldr	r3, [pc, #68]	; (8005610 <HAL_ADC_ConfigChannel+0x25c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a11      	ldr	r2, [pc, #68]	; (8005614 <HAL_ADC_ConfigChannel+0x260>)
 80055d0:	fba2 2303 	umull	r2, r3, r2, r3
 80055d4:	0c9a      	lsrs	r2, r3, #18
 80055d6:	4613      	mov	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80055e0:	e002      	b.n	80055e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	3b01      	subs	r3, #1
 80055e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f9      	bne.n	80055e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	40012300 	.word	0x40012300
 8005608:	40012000 	.word	0x40012000
 800560c:	10000012 	.word	0x10000012
 8005610:	20000388 	.word	0x20000388
 8005614:	431bde83 	.word	0x431bde83

08005618 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005620:	4b79      	ldr	r3, [pc, #484]	; (8005808 <ADC_Init+0x1f0>)
 8005622:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	431a      	orrs	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800564c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6859      	ldr	r1, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	021a      	lsls	r2, r3, #8
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005670:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6859      	ldr	r1, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	430a      	orrs	r2, r1
 8005682:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005692:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6899      	ldr	r1, [r3, #8]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056aa:	4a58      	ldr	r2, [pc, #352]	; (800580c <ADC_Init+0x1f4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d022      	beq.n	80056f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6899      	ldr	r1, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80056e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6899      	ldr	r1, [r3, #8]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	609a      	str	r2, [r3, #8]
 80056f4:	e00f      	b.n	8005716 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005704:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005714:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0202 	bic.w	r2, r2, #2
 8005724:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6899      	ldr	r1, [r3, #8]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	7e1b      	ldrb	r3, [r3, #24]
 8005730:	005a      	lsls	r2, r3, #1
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d01b      	beq.n	800577c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005752:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005762:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6859      	ldr	r1, [r3, #4]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	3b01      	subs	r3, #1
 8005770:	035a      	lsls	r2, r3, #13
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	605a      	str	r2, [r3, #4]
 800577a:	e007      	b.n	800578c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800578a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800579a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	051a      	lsls	r2, r3, #20
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80057c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6899      	ldr	r1, [r3, #8]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057ce:	025a      	lsls	r2, r3, #9
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6899      	ldr	r1, [r3, #8]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	029a      	lsls	r2, r3, #10
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	609a      	str	r2, [r3, #8]
}
 80057fc:	bf00      	nop
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	40012300 	.word	0x40012300
 800580c:	0f000001 	.word	0x0f000001

08005810 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005826:	2b00      	cmp	r3, #0
 8005828:	d13c      	bne.n	80058a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d12b      	bne.n	800589c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005848:	2b00      	cmp	r3, #0
 800584a:	d127      	bne.n	800589c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005852:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005856:	2b00      	cmp	r3, #0
 8005858:	d006      	beq.n	8005868 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005864:	2b00      	cmp	r3, #0
 8005866:	d119      	bne.n	800589c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0220 	bic.w	r2, r2, #32
 8005876:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d105      	bne.n	800589c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005894:	f043 0201 	orr.w	r2, r3, #1
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f7fe ff0b 	bl	80046b8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80058a2:	e00e      	b.n	80058c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f7ff fd75 	bl	80053a0 <HAL_ADC_ErrorCallback>
}
 80058b6:	e004      	b.n	80058c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	4798      	blx	r3
}
 80058c2:	bf00      	nop
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f7ff fd57 	bl	800538c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80058de:	bf00      	nop
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2240      	movs	r2, #64	; 0x40
 80058f8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fe:	f043 0204 	orr.w	r2, r3, #4
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f7ff fd4a 	bl	80053a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800590c:	bf00      	nop
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	2300      	movs	r3, #0
 8005926:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <HAL_ADCEx_InjectedStart+0x22>
 8005932:	2302      	movs	r3, #2
 8005934:	e0aa      	b.n	8005a8c <HAL_ADCEx_InjectedStart+0x178>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b01      	cmp	r3, #1
 800594a:	d018      	beq.n	800597e <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689a      	ldr	r2, [r3, #8]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0201 	orr.w	r2, r2, #1
 800595a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800595c:	4b4e      	ldr	r3, [pc, #312]	; (8005a98 <HAL_ADCEx_InjectedStart+0x184>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a4e      	ldr	r2, [pc, #312]	; (8005a9c <HAL_ADCEx_InjectedStart+0x188>)
 8005962:	fba2 2303 	umull	r2, r3, r2, r3
 8005966:	0c9a      	lsrs	r2, r3, #18
 8005968:	4613      	mov	r3, r2
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	4413      	add	r3, r2
 800596e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005970:	e002      	b.n	8005978 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	3b01      	subs	r3, #1
 8005976:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1f9      	bne.n	8005972 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b01      	cmp	r3, #1
 800598a:	d172      	bne.n	8005a72 <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005994:	f023 0301 	bic.w	r3, r3, #1
 8005998:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d102      	bne.n	80059b2 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f06f 0204 	mvn.w	r2, #4
 80059c2:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80059c4:	4b36      	ldr	r3, [pc, #216]	; (8005aa0 <HAL_ADCEx_InjectedStart+0x18c>)
 80059c6:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f003 031f 	and.w	r3, r3, #31
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d124      	bne.n	8005a1e <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	bf0c      	ite	eq
 80059e2:	2301      	moveq	r3, #1
 80059e4:	2300      	movne	r3, #0
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	bf0c      	ite	eq
 80059f8:	2301      	moveq	r3, #1
 80059fa:	2300      	movne	r3, #0
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d041      	beq.n	8005a8a <HAL_ADCEx_InjectedStart+0x176>
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d03e      	beq.n	8005a8a <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005a1a:	609a      	str	r2, [r3, #8]
 8005a1c:	e035      	b.n	8005a8a <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	bf0c      	ite	eq
 8005a2c:	2301      	moveq	r3, #1
 8005a2e:	2300      	movne	r3, #0
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	bf0c      	ite	eq
 8005a42:	2301      	moveq	r3, #1
 8005a44:	2300      	movne	r3, #0
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a15      	ldr	r2, [pc, #84]	; (8005aa4 <HAL_ADCEx_InjectedStart+0x190>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d11a      	bne.n	8005a8a <HAL_ADCEx_InjectedStart+0x176>
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d017      	beq.n	8005a8a <HAL_ADCEx_InjectedStart+0x176>
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d014      	beq.n	8005a8a <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005a6e:	609a      	str	r2, [r3, #8]
 8005a70:	e00b      	b.n	8005a8a <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	f043 0210 	orr.w	r2, r3, #16
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	f043 0201 	orr.w	r2, r3, #1
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	20000388 	.word	0x20000388
 8005a9c:	431bde83 	.word	0x431bde83
 8005aa0:	40012300 	.word	0x40012300
 8005aa4:	40012000 	.word	0x40012000

08005aa8 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <HAL_ADCEx_InjectedStop+0x1a>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e037      	b.n	8005b32 <HAL_ADCEx_InjectedStop+0x8a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d120      	bne.n	8005b18 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d119      	bne.n	8005b18 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0201 	bic.w	r2, r2, #1
 8005af2:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d112      	bne.n	8005b28 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005b0a:	f023 0301 	bic.w	r3, r3, #1
 8005b0e:	f043 0201 	orr.w	r2, r3, #1
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005b16:	e007      	b.n	8005b28 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1c:	f043 0220 	orr.w	r2, r3, #32
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
	...

08005b40 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f06f 0204 	mvn.w	r2, #4
 8005b56:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d81f      	bhi.n	8005ba0 <HAL_ADCEx_InjectedGetValue+0x60>
 8005b60:	a201      	add	r2, pc, #4	; (adr r2, 8005b68 <HAL_ADCEx_InjectedGetValue+0x28>)
 8005b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b66:	bf00      	nop
 8005b68:	08005b97 	.word	0x08005b97
 8005b6c:	08005b8d 	.word	0x08005b8d
 8005b70:	08005b83 	.word	0x08005b83
 8005b74:	08005b79 	.word	0x08005b79
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b7e:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8005b80:	e00f      	b.n	8005ba2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b88:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8005b8a:	e00a      	b.n	8005ba2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	60fb      	str	r3, [r7, #12]
    }
    break;
 8005b94:	e005      	b.n	8005ba2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9c:	60fb      	str	r3, [r7, #12]
    }
    break;
 8005b9e:	e000      	b.n	8005ba2 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8005ba0:	bf00      	nop
  }
  return tmp;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e17e      	b.n	8005ec6 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b09      	cmp	r3, #9
 8005bd6:	d925      	bls.n	8005c24 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68d9      	ldr	r1, [r3, #12]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	461a      	mov	r2, r3
 8005be6:	4613      	mov	r3, r2
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	4413      	add	r3, r2
 8005bec:	3b1e      	subs	r3, #30
 8005bee:	2207      	movs	r2, #7
 8005bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf4:	43da      	mvns	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	400a      	ands	r2, r1
 8005bfc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68d9      	ldr	r1, [r3, #12]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	4618      	mov	r0, r3
 8005c10:	4603      	mov	r3, r0
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	4403      	add	r3, r0
 8005c16:	3b1e      	subs	r3, #30
 8005c18:	409a      	lsls	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	60da      	str	r2, [r3, #12]
 8005c22:	e022      	b.n	8005c6a <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6919      	ldr	r1, [r3, #16]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	4613      	mov	r3, r2
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	4413      	add	r3, r2
 8005c38:	2207      	movs	r2, #7
 8005c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3e:	43da      	mvns	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	400a      	ands	r2, r1
 8005c46:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6919      	ldr	r1, [r3, #16]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	689a      	ldr	r2, [r3, #8]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	4618      	mov	r0, r3
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	4403      	add	r3, r0
 8005c60:	409a      	lsls	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005c78:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	051a      	lsls	r2, r3, #20
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	3303      	adds	r3, #3
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	4613      	mov	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	221f      	movs	r2, #31
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	43da      	mvns	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	400a      	ands	r2, r1
 8005cc0:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	4618      	mov	r0, r3
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	3303      	adds	r3, #3
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	fa00 f203 	lsl.w	r2, r0, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	4a75      	ldr	r2, [pc, #468]	; (8005ed4 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d022      	beq.n	8005d48 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8005d10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6899      	ldr	r1, [r3, #8]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	699a      	ldr	r2, [r3, #24]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005d32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6899      	ldr	r1, [r3, #8]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	69da      	ldr	r2, [r3, #28]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	609a      	str	r2, [r3, #8]
 8005d46:	e00f      	b.n	8005d68 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8005d56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005d66:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	7d5b      	ldrb	r3, [r3, #21]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d008      	beq.n	8005d82 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d7e:	605a      	str	r2, [r3, #4]
 8005d80:	e007      	b.n	8005d92 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d90:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	7d1b      	ldrb	r3, [r3, #20]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d008      	beq.n	8005dac <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005da8:	605a      	str	r2, [r3, #4]
 8005daa:	e007      	b.n	8005dbc <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dba:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d02e      	beq.n	8005e22 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d840      	bhi.n	8005e4a <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d002      	beq.n	8005dd2 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d014      	beq.n	8005dfa <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8005dd0:	e03b      	b.n	8005e4a <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6812      	ldr	r2, [r2, #0]
 8005ddc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005de0:	f023 030f 	bic.w	r3, r3, #15
 8005de4:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6959      	ldr	r1, [r3, #20]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	615a      	str	r2, [r3, #20]
      break;
 8005df8:	e03b      	b.n	8005e72 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	6812      	ldr	r2, [r2, #0]
 8005e04:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005e08:	f023 030f 	bic.w	r3, r3, #15
 8005e0c:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6999      	ldr	r1, [r3, #24]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	68da      	ldr	r2, [r3, #12]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	619a      	str	r2, [r3, #24]
      break;
 8005e20:	e027      	b.n	8005e72 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69db      	ldr	r3, [r3, #28]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6812      	ldr	r2, [r2, #0]
 8005e2c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005e30:	f023 030f 	bic.w	r3, r3, #15
 8005e34:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69d9      	ldr	r1, [r3, #28]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	61da      	str	r2, [r3, #28]
      break;
 8005e48:	e013      	b.n	8005e72 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6812      	ldr	r2, [r2, #0]
 8005e54:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005e58:	f023 030f 	bic.w	r3, r3, #15
 8005e5c:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6a19      	ldr	r1, [r3, #32]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	621a      	str	r2, [r3, #32]
      break;
 8005e70:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e72:	4b19      	ldr	r3, [pc, #100]	; (8005ed8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8005e74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a18      	ldr	r2, [pc, #96]	; (8005edc <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d109      	bne.n	8005e94 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b12      	cmp	r3, #18
 8005e86:	d105      	bne.n	8005e94 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a10      	ldr	r2, [pc, #64]	; (8005edc <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d10e      	bne.n	8005ebc <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a0f      	ldr	r2, [pc, #60]	; (8005ee0 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d003      	beq.n	8005eb0 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b11      	cmp	r3, #17
 8005eae:	d105      	bne.n	8005ebc <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	000f0001 	.word	0x000f0001
 8005ed8:	40012300 	.word	0x40012300
 8005edc:	40012000 	.word	0x40012000
 8005ee0:	10000012 	.word	0x10000012

08005ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ef4:	4b0c      	ldr	r3, [pc, #48]	; (8005f28 <__NVIC_SetPriorityGrouping+0x44>)
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f00:	4013      	ands	r3, r2
 8005f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f16:	4a04      	ldr	r2, [pc, #16]	; (8005f28 <__NVIC_SetPriorityGrouping+0x44>)
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	60d3      	str	r3, [r2, #12]
}
 8005f1c:	bf00      	nop
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	e000ed00 	.word	0xe000ed00

08005f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f30:	4b04      	ldr	r3, [pc, #16]	; (8005f44 <__NVIC_GetPriorityGrouping+0x18>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	0a1b      	lsrs	r3, r3, #8
 8005f36:	f003 0307 	and.w	r3, r3, #7
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	e000ed00 	.word	0xe000ed00

08005f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	4603      	mov	r3, r0
 8005f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	db0b      	blt.n	8005f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f5a:	79fb      	ldrb	r3, [r7, #7]
 8005f5c:	f003 021f 	and.w	r2, r3, #31
 8005f60:	4907      	ldr	r1, [pc, #28]	; (8005f80 <__NVIC_EnableIRQ+0x38>)
 8005f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	2001      	movs	r0, #1
 8005f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	e000e100 	.word	0xe000e100

08005f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	6039      	str	r1, [r7, #0]
 8005f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	db0a      	blt.n	8005fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	490c      	ldr	r1, [pc, #48]	; (8005fd0 <__NVIC_SetPriority+0x4c>)
 8005f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fa2:	0112      	lsls	r2, r2, #4
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	440b      	add	r3, r1
 8005fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fac:	e00a      	b.n	8005fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	4908      	ldr	r1, [pc, #32]	; (8005fd4 <__NVIC_SetPriority+0x50>)
 8005fb4:	79fb      	ldrb	r3, [r7, #7]
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	3b04      	subs	r3, #4
 8005fbc:	0112      	lsls	r2, r2, #4
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	761a      	strb	r2, [r3, #24]
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	e000e100 	.word	0xe000e100
 8005fd4:	e000ed00 	.word	0xe000ed00

08005fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b089      	sub	sp, #36	; 0x24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	f1c3 0307 	rsb	r3, r3, #7
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	bf28      	it	cs
 8005ff6:	2304      	movcs	r3, #4
 8005ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	2b06      	cmp	r3, #6
 8006000:	d902      	bls.n	8006008 <NVIC_EncodePriority+0x30>
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	3b03      	subs	r3, #3
 8006006:	e000      	b.n	800600a <NVIC_EncodePriority+0x32>
 8006008:	2300      	movs	r3, #0
 800600a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800600c:	f04f 32ff 	mov.w	r2, #4294967295
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	fa02 f303 	lsl.w	r3, r2, r3
 8006016:	43da      	mvns	r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	401a      	ands	r2, r3
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006020:	f04f 31ff 	mov.w	r1, #4294967295
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	fa01 f303 	lsl.w	r3, r1, r3
 800602a:	43d9      	mvns	r1, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006030:	4313      	orrs	r3, r2
         );
}
 8006032:	4618      	mov	r0, r3
 8006034:	3724      	adds	r7, #36	; 0x24
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
	...

08006040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3b01      	subs	r3, #1
 800604c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006050:	d301      	bcc.n	8006056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006052:	2301      	movs	r3, #1
 8006054:	e00f      	b.n	8006076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006056:	4a0a      	ldr	r2, [pc, #40]	; (8006080 <SysTick_Config+0x40>)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3b01      	subs	r3, #1
 800605c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800605e:	210f      	movs	r1, #15
 8006060:	f04f 30ff 	mov.w	r0, #4294967295
 8006064:	f7ff ff8e 	bl	8005f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006068:	4b05      	ldr	r3, [pc, #20]	; (8006080 <SysTick_Config+0x40>)
 800606a:	2200      	movs	r2, #0
 800606c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800606e:	4b04      	ldr	r3, [pc, #16]	; (8006080 <SysTick_Config+0x40>)
 8006070:	2207      	movs	r2, #7
 8006072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	e000e010 	.word	0xe000e010

08006084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff ff29 	bl	8005ee4 <__NVIC_SetPriorityGrouping>
}
 8006092:	bf00      	nop
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800609a:	b580      	push	{r7, lr}
 800609c:	b086      	sub	sp, #24
 800609e:	af00      	add	r7, sp, #0
 80060a0:	4603      	mov	r3, r0
 80060a2:	60b9      	str	r1, [r7, #8]
 80060a4:	607a      	str	r2, [r7, #4]
 80060a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060ac:	f7ff ff3e 	bl	8005f2c <__NVIC_GetPriorityGrouping>
 80060b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	68b9      	ldr	r1, [r7, #8]
 80060b6:	6978      	ldr	r0, [r7, #20]
 80060b8:	f7ff ff8e 	bl	8005fd8 <NVIC_EncodePriority>
 80060bc:	4602      	mov	r2, r0
 80060be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060c2:	4611      	mov	r1, r2
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff ff5d 	bl	8005f84 <__NVIC_SetPriority>
}
 80060ca:	bf00      	nop
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b082      	sub	sp, #8
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	4603      	mov	r3, r0
 80060da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff ff31 	bl	8005f48 <__NVIC_EnableIRQ>
}
 80060e6:	bf00      	nop
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7ff ffa2 	bl	8006040 <SysTick_Config>
 80060fc:	4603      	mov	r3, r0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
	...

08006108 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006114:	f7fe fe3c 	bl	8004d90 <HAL_GetTick>
 8006118:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e099      	b.n	8006258 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0201 	bic.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006144:	e00f      	b.n	8006166 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006146:	f7fe fe23 	bl	8004d90 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b05      	cmp	r3, #5
 8006152:	d908      	bls.n	8006166 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2203      	movs	r2, #3
 800615e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e078      	b.n	8006258 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e8      	bne.n	8006146 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	4b38      	ldr	r3, [pc, #224]	; (8006260 <HAL_DMA_Init+0x158>)
 8006180:	4013      	ands	r3, r2
 8006182:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006192:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800619e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d107      	bne.n	80061d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c8:	4313      	orrs	r3, r2
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f023 0307 	bic.w	r3, r3, #7
 80061e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d117      	bne.n	800622a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	4313      	orrs	r3, r2
 8006202:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00e      	beq.n	800622a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fadf 	bl	80067d0 <DMA_CheckFifoParam>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2240      	movs	r2, #64	; 0x40
 800621c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006226:	2301      	movs	r3, #1
 8006228:	e016      	b.n	8006258 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fa96 	bl	8006764 <DMA_CalcBaseAndBitshift>
 8006238:	4603      	mov	r3, r0
 800623a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006240:	223f      	movs	r2, #63	; 0x3f
 8006242:	409a      	lsls	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	f010803f 	.word	0xf010803f

08006264 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800627a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006282:	2b01      	cmp	r3, #1
 8006284:	d101      	bne.n	800628a <HAL_DMA_Start_IT+0x26>
 8006286:	2302      	movs	r3, #2
 8006288:	e040      	b.n	800630c <HAL_DMA_Start_IT+0xa8>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b01      	cmp	r3, #1
 800629c:	d12f      	bne.n	80062fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2202      	movs	r2, #2
 80062a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	68b9      	ldr	r1, [r7, #8]
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 fa28 	bl	8006708 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062bc:	223f      	movs	r2, #63	; 0x3f
 80062be:	409a      	lsls	r2, r3
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0216 	orr.w	r2, r2, #22
 80062d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d007      	beq.n	80062ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0208 	orr.w	r2, r2, #8
 80062ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	e005      	b.n	800630a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006306:	2302      	movs	r3, #2
 8006308:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800630a:	7dfb      	ldrb	r3, [r7, #23]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006320:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006322:	f7fe fd35 	bl	8004d90 <HAL_GetTick>
 8006326:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b02      	cmp	r3, #2
 8006332:	d008      	beq.n	8006346 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2280      	movs	r2, #128	; 0x80
 8006338:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e052      	b.n	80063ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0216 	bic.w	r2, r2, #22
 8006354:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695a      	ldr	r2, [r3, #20]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006364:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <HAL_DMA_Abort+0x62>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006372:	2b00      	cmp	r3, #0
 8006374:	d007      	beq.n	8006386 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0208 	bic.w	r2, r2, #8
 8006384:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0201 	bic.w	r2, r2, #1
 8006394:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006396:	e013      	b.n	80063c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006398:	f7fe fcfa 	bl	8004d90 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b05      	cmp	r3, #5
 80063a4:	d90c      	bls.n	80063c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2220      	movs	r2, #32
 80063aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2203      	movs	r2, #3
 80063b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e015      	b.n	80063ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e4      	bne.n	8006398 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d2:	223f      	movs	r2, #63	; 0x3f
 80063d4:	409a      	lsls	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006400:	4b8e      	ldr	r3, [pc, #568]	; (800663c <HAL_DMA_IRQHandler+0x248>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a8e      	ldr	r2, [pc, #568]	; (8006640 <HAL_DMA_IRQHandler+0x24c>)
 8006406:	fba2 2303 	umull	r2, r3, r2, r3
 800640a:	0a9b      	lsrs	r3, r3, #10
 800640c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006412:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641e:	2208      	movs	r2, #8
 8006420:	409a      	lsls	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4013      	ands	r3, r2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d01a      	beq.n	8006460 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	2b00      	cmp	r3, #0
 8006436:	d013      	beq.n	8006460 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0204 	bic.w	r2, r2, #4
 8006446:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800644c:	2208      	movs	r2, #8
 800644e:	409a      	lsls	r2, r3
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006458:	f043 0201 	orr.w	r2, r3, #1
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006464:	2201      	movs	r2, #1
 8006466:	409a      	lsls	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4013      	ands	r3, r2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d012      	beq.n	8006496 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00b      	beq.n	8006496 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006482:	2201      	movs	r2, #1
 8006484:	409a      	lsls	r2, r3
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648e:	f043 0202 	orr.w	r2, r3, #2
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800649a:	2204      	movs	r2, #4
 800649c:	409a      	lsls	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4013      	ands	r3, r2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d012      	beq.n	80064cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00b      	beq.n	80064cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b8:	2204      	movs	r2, #4
 80064ba:	409a      	lsls	r2, r3
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c4:	f043 0204 	orr.w	r2, r3, #4
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d0:	2210      	movs	r2, #16
 80064d2:	409a      	lsls	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4013      	ands	r3, r2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d043      	beq.n	8006564 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0308 	and.w	r3, r3, #8
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d03c      	beq.n	8006564 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ee:	2210      	movs	r2, #16
 80064f0:	409a      	lsls	r2, r3
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d018      	beq.n	8006536 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d108      	bne.n	8006524 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	2b00      	cmp	r3, #0
 8006518:	d024      	beq.n	8006564 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
 8006522:	e01f      	b.n	8006564 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01b      	beq.n	8006564 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	4798      	blx	r3
 8006534:	e016      	b.n	8006564 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006540:	2b00      	cmp	r3, #0
 8006542:	d107      	bne.n	8006554 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0208 	bic.w	r2, r2, #8
 8006552:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006568:	2220      	movs	r2, #32
 800656a:	409a      	lsls	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4013      	ands	r3, r2
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 808f 	beq.w	8006694 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0310 	and.w	r3, r3, #16
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 8087 	beq.w	8006694 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658a:	2220      	movs	r2, #32
 800658c:	409a      	lsls	r2, r3
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b05      	cmp	r3, #5
 800659c:	d136      	bne.n	800660c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0216 	bic.w	r2, r2, #22
 80065ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	695a      	ldr	r2, [r3, #20]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d103      	bne.n	80065ce <HAL_DMA_IRQHandler+0x1da>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d007      	beq.n	80065de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 0208 	bic.w	r2, r2, #8
 80065dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e2:	223f      	movs	r2, #63	; 0x3f
 80065e4:	409a      	lsls	r2, r3
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d07e      	beq.n	8006700 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	4798      	blx	r3
        }
        return;
 800660a:	e079      	b.n	8006700 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d01d      	beq.n	8006656 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10d      	bne.n	8006644 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662c:	2b00      	cmp	r3, #0
 800662e:	d031      	beq.n	8006694 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	4798      	blx	r3
 8006638:	e02c      	b.n	8006694 <HAL_DMA_IRQHandler+0x2a0>
 800663a:	bf00      	nop
 800663c:	20000388 	.word	0x20000388
 8006640:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d023      	beq.n	8006694 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	4798      	blx	r3
 8006654:	e01e      	b.n	8006694 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10f      	bne.n	8006684 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0210 	bic.w	r2, r2, #16
 8006672:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006698:	2b00      	cmp	r3, #0
 800669a:	d032      	beq.n	8006702 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d022      	beq.n	80066ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2205      	movs	r2, #5
 80066ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0201 	bic.w	r2, r2, #1
 80066be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	3301      	adds	r3, #1
 80066c4:	60bb      	str	r3, [r7, #8]
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d307      	bcc.n	80066dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1f2      	bne.n	80066c0 <HAL_DMA_IRQHandler+0x2cc>
 80066da:	e000      	b.n	80066de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80066dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d005      	beq.n	8006702 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	4798      	blx	r3
 80066fe:	e000      	b.n	8006702 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006700:	bf00      	nop
    }
  }
}
 8006702:	3718      	adds	r7, #24
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006724:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	2b40      	cmp	r3, #64	; 0x40
 8006734:	d108      	bne.n	8006748 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006746:	e007      	b.n	8006758 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	60da      	str	r2, [r3, #12]
}
 8006758:	bf00      	nop
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	b2db      	uxtb	r3, r3
 8006772:	3b10      	subs	r3, #16
 8006774:	4a14      	ldr	r2, [pc, #80]	; (80067c8 <DMA_CalcBaseAndBitshift+0x64>)
 8006776:	fba2 2303 	umull	r2, r3, r2, r3
 800677a:	091b      	lsrs	r3, r3, #4
 800677c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800677e:	4a13      	ldr	r2, [pc, #76]	; (80067cc <DMA_CalcBaseAndBitshift+0x68>)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4413      	add	r3, r2
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2b03      	cmp	r3, #3
 8006790:	d909      	bls.n	80067a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800679a:	f023 0303 	bic.w	r3, r3, #3
 800679e:	1d1a      	adds	r2, r3, #4
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	659a      	str	r2, [r3, #88]	; 0x58
 80067a4:	e007      	b.n	80067b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80067ae:	f023 0303 	bic.w	r3, r3, #3
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	aaaaaaab 	.word	0xaaaaaaab
 80067cc:	0800b550 	.word	0x0800b550

080067d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067d8:	2300      	movs	r3, #0
 80067da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d11f      	bne.n	800682a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	d856      	bhi.n	800689e <DMA_CheckFifoParam+0xce>
 80067f0:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <DMA_CheckFifoParam+0x28>)
 80067f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f6:	bf00      	nop
 80067f8:	08006809 	.word	0x08006809
 80067fc:	0800681b 	.word	0x0800681b
 8006800:	08006809 	.word	0x08006809
 8006804:	0800689f 	.word	0x0800689f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d046      	beq.n	80068a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006818:	e043      	b.n	80068a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006822:	d140      	bne.n	80068a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006828:	e03d      	b.n	80068a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006832:	d121      	bne.n	8006878 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2b03      	cmp	r3, #3
 8006838:	d837      	bhi.n	80068aa <DMA_CheckFifoParam+0xda>
 800683a:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <DMA_CheckFifoParam+0x70>)
 800683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006840:	08006851 	.word	0x08006851
 8006844:	08006857 	.word	0x08006857
 8006848:	08006851 	.word	0x08006851
 800684c:	08006869 	.word	0x08006869
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	73fb      	strb	r3, [r7, #15]
      break;
 8006854:	e030      	b.n	80068b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d025      	beq.n	80068ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006866:	e022      	b.n	80068ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006870:	d11f      	bne.n	80068b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006876:	e01c      	b.n	80068b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b02      	cmp	r3, #2
 800687c:	d903      	bls.n	8006886 <DMA_CheckFifoParam+0xb6>
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b03      	cmp	r3, #3
 8006882:	d003      	beq.n	800688c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006884:	e018      	b.n	80068b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	73fb      	strb	r3, [r7, #15]
      break;
 800688a:	e015      	b.n	80068b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00e      	beq.n	80068b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	73fb      	strb	r3, [r7, #15]
      break;
 800689c:	e00b      	b.n	80068b6 <DMA_CheckFifoParam+0xe6>
      break;
 800689e:	bf00      	nop
 80068a0:	e00a      	b.n	80068b8 <DMA_CheckFifoParam+0xe8>
      break;
 80068a2:	bf00      	nop
 80068a4:	e008      	b.n	80068b8 <DMA_CheckFifoParam+0xe8>
      break;
 80068a6:	bf00      	nop
 80068a8:	e006      	b.n	80068b8 <DMA_CheckFifoParam+0xe8>
      break;
 80068aa:	bf00      	nop
 80068ac:	e004      	b.n	80068b8 <DMA_CheckFifoParam+0xe8>
      break;
 80068ae:	bf00      	nop
 80068b0:	e002      	b.n	80068b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80068b2:	bf00      	nop
 80068b4:	e000      	b.n	80068b8 <DMA_CheckFifoParam+0xe8>
      break;
 80068b6:	bf00      	nop
    }
  } 
  
  return status; 
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop

080068c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b089      	sub	sp, #36	; 0x24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80068da:	2300      	movs	r3, #0
 80068dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068de:	2300      	movs	r3, #0
 80068e0:	61fb      	str	r3, [r7, #28]
 80068e2:	e159      	b.n	8006b98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80068e4:	2201      	movs	r2, #1
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	4013      	ands	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	f040 8148 	bne.w	8006b92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f003 0303 	and.w	r3, r3, #3
 800690a:	2b01      	cmp	r3, #1
 800690c:	d005      	beq.n	800691a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006916:	2b02      	cmp	r3, #2
 8006918:	d130      	bne.n	800697c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	2203      	movs	r2, #3
 8006926:	fa02 f303 	lsl.w	r3, r2, r3
 800692a:	43db      	mvns	r3, r3
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	4013      	ands	r3, r2
 8006930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	fa02 f303 	lsl.w	r3, r2, r3
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	4313      	orrs	r3, r2
 8006942:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006950:	2201      	movs	r2, #1
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	fa02 f303 	lsl.w	r3, r2, r3
 8006958:	43db      	mvns	r3, r3
 800695a:	69ba      	ldr	r2, [r7, #24]
 800695c:	4013      	ands	r3, r2
 800695e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	091b      	lsrs	r3, r3, #4
 8006966:	f003 0201 	and.w	r2, r3, #1
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	fa02 f303 	lsl.w	r3, r2, r3
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	4313      	orrs	r3, r2
 8006974:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f003 0303 	and.w	r3, r3, #3
 8006984:	2b03      	cmp	r3, #3
 8006986:	d017      	beq.n	80069b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	2203      	movs	r2, #3
 8006994:	fa02 f303 	lsl.w	r3, r2, r3
 8006998:	43db      	mvns	r3, r3
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	4013      	ands	r3, r2
 800699e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ac:	69ba      	ldr	r2, [r7, #24]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f003 0303 	and.w	r3, r3, #3
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d123      	bne.n	8006a0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	08da      	lsrs	r2, r3, #3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3208      	adds	r2, #8
 80069cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	f003 0307 	and.w	r3, r3, #7
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	220f      	movs	r2, #15
 80069dc:	fa02 f303 	lsl.w	r3, r2, r3
 80069e0:	43db      	mvns	r3, r3
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	4013      	ands	r3, r2
 80069e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	691a      	ldr	r2, [r3, #16]
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	f003 0307 	and.w	r3, r3, #7
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	fa02 f303 	lsl.w	r3, r2, r3
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	08da      	lsrs	r2, r3, #3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	3208      	adds	r2, #8
 8006a06:	69b9      	ldr	r1, [r7, #24]
 8006a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	005b      	lsls	r3, r3, #1
 8006a16:	2203      	movs	r2, #3
 8006a18:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1c:	43db      	mvns	r3, r3
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	4013      	ands	r3, r2
 8006a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f003 0203 	and.w	r2, r3, #3
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	fa02 f303 	lsl.w	r3, r2, r3
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 80a2 	beq.w	8006b92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60fb      	str	r3, [r7, #12]
 8006a52:	4b57      	ldr	r3, [pc, #348]	; (8006bb0 <HAL_GPIO_Init+0x2e8>)
 8006a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a56:	4a56      	ldr	r2, [pc, #344]	; (8006bb0 <HAL_GPIO_Init+0x2e8>)
 8006a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8006a5e:	4b54      	ldr	r3, [pc, #336]	; (8006bb0 <HAL_GPIO_Init+0x2e8>)
 8006a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a6a:	4a52      	ldr	r2, [pc, #328]	; (8006bb4 <HAL_GPIO_Init+0x2ec>)
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	089b      	lsrs	r3, r3, #2
 8006a70:	3302      	adds	r3, #2
 8006a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	220f      	movs	r2, #15
 8006a82:	fa02 f303 	lsl.w	r3, r2, r3
 8006a86:	43db      	mvns	r3, r3
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a49      	ldr	r2, [pc, #292]	; (8006bb8 <HAL_GPIO_Init+0x2f0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d019      	beq.n	8006aca <HAL_GPIO_Init+0x202>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a48      	ldr	r2, [pc, #288]	; (8006bbc <HAL_GPIO_Init+0x2f4>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d013      	beq.n	8006ac6 <HAL_GPIO_Init+0x1fe>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a47      	ldr	r2, [pc, #284]	; (8006bc0 <HAL_GPIO_Init+0x2f8>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d00d      	beq.n	8006ac2 <HAL_GPIO_Init+0x1fa>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a46      	ldr	r2, [pc, #280]	; (8006bc4 <HAL_GPIO_Init+0x2fc>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d007      	beq.n	8006abe <HAL_GPIO_Init+0x1f6>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a45      	ldr	r2, [pc, #276]	; (8006bc8 <HAL_GPIO_Init+0x300>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d101      	bne.n	8006aba <HAL_GPIO_Init+0x1f2>
 8006ab6:	2304      	movs	r3, #4
 8006ab8:	e008      	b.n	8006acc <HAL_GPIO_Init+0x204>
 8006aba:	2307      	movs	r3, #7
 8006abc:	e006      	b.n	8006acc <HAL_GPIO_Init+0x204>
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e004      	b.n	8006acc <HAL_GPIO_Init+0x204>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e002      	b.n	8006acc <HAL_GPIO_Init+0x204>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e000      	b.n	8006acc <HAL_GPIO_Init+0x204>
 8006aca:	2300      	movs	r3, #0
 8006acc:	69fa      	ldr	r2, [r7, #28]
 8006ace:	f002 0203 	and.w	r2, r2, #3
 8006ad2:	0092      	lsls	r2, r2, #2
 8006ad4:	4093      	lsls	r3, r2
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006adc:	4935      	ldr	r1, [pc, #212]	; (8006bb4 <HAL_GPIO_Init+0x2ec>)
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	089b      	lsrs	r3, r3, #2
 8006ae2:	3302      	adds	r3, #2
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006aea:	4b38      	ldr	r3, [pc, #224]	; (8006bcc <HAL_GPIO_Init+0x304>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	43db      	mvns	r3, r3
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	4013      	ands	r3, r2
 8006af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d003      	beq.n	8006b0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b0e:	4a2f      	ldr	r2, [pc, #188]	; (8006bcc <HAL_GPIO_Init+0x304>)
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b14:	4b2d      	ldr	r3, [pc, #180]	; (8006bcc <HAL_GPIO_Init+0x304>)
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	43db      	mvns	r3, r3
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	4013      	ands	r3, r2
 8006b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006b38:	4a24      	ldr	r2, [pc, #144]	; (8006bcc <HAL_GPIO_Init+0x304>)
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006b3e:	4b23      	ldr	r3, [pc, #140]	; (8006bcc <HAL_GPIO_Init+0x304>)
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	43db      	mvns	r3, r3
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006b62:	4a1a      	ldr	r2, [pc, #104]	; (8006bcc <HAL_GPIO_Init+0x304>)
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b68:	4b18      	ldr	r3, [pc, #96]	; (8006bcc <HAL_GPIO_Init+0x304>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	43db      	mvns	r3, r3
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	4013      	ands	r3, r2
 8006b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006b8c:	4a0f      	ldr	r2, [pc, #60]	; (8006bcc <HAL_GPIO_Init+0x304>)
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	3301      	adds	r3, #1
 8006b96:	61fb      	str	r3, [r7, #28]
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	2b0f      	cmp	r3, #15
 8006b9c:	f67f aea2 	bls.w	80068e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ba0:	bf00      	nop
 8006ba2:	bf00      	nop
 8006ba4:	3724      	adds	r7, #36	; 0x24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	40023800 	.word	0x40023800
 8006bb4:	40013800 	.word	0x40013800
 8006bb8:	40020000 	.word	0x40020000
 8006bbc:	40020400 	.word	0x40020400
 8006bc0:	40020800 	.word	0x40020800
 8006bc4:	40020c00 	.word	0x40020c00
 8006bc8:	40021000 	.word	0x40021000
 8006bcc:	40013c00 	.word	0x40013c00

08006bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	807b      	strh	r3, [r7, #2]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006be0:	787b      	ldrb	r3, [r7, #1]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006be6:	887a      	ldrh	r2, [r7, #2]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006bec:	e003      	b.n	8006bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006bee:	887b      	ldrh	r3, [r7, #2]
 8006bf0:	041a      	lsls	r2, r3, #16
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	619a      	str	r2, [r3, #24]
}
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
	...

08006c04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e12b      	b.n	8006e6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d106      	bne.n	8006c30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7fd fe16 	bl	800485c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2224      	movs	r2, #36	; 0x24
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f022 0201 	bic.w	r2, r2, #1
 8006c46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006c68:	f001 fbbc 	bl	80083e4 <HAL_RCC_GetPCLK1Freq>
 8006c6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	4a81      	ldr	r2, [pc, #516]	; (8006e78 <HAL_I2C_Init+0x274>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d807      	bhi.n	8006c88 <HAL_I2C_Init+0x84>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4a80      	ldr	r2, [pc, #512]	; (8006e7c <HAL_I2C_Init+0x278>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	bf94      	ite	ls
 8006c80:	2301      	movls	r3, #1
 8006c82:	2300      	movhi	r3, #0
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	e006      	b.n	8006c96 <HAL_I2C_Init+0x92>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4a7d      	ldr	r2, [pc, #500]	; (8006e80 <HAL_I2C_Init+0x27c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	bf94      	ite	ls
 8006c90:	2301      	movls	r3, #1
 8006c92:	2300      	movhi	r3, #0
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e0e7      	b.n	8006e6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4a78      	ldr	r2, [pc, #480]	; (8006e84 <HAL_I2C_Init+0x280>)
 8006ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca6:	0c9b      	lsrs	r3, r3, #18
 8006ca8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	4a6a      	ldr	r2, [pc, #424]	; (8006e78 <HAL_I2C_Init+0x274>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d802      	bhi.n	8006cd8 <HAL_I2C_Init+0xd4>
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	e009      	b.n	8006cec <HAL_I2C_Init+0xe8>
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006cde:	fb02 f303 	mul.w	r3, r2, r3
 8006ce2:	4a69      	ldr	r2, [pc, #420]	; (8006e88 <HAL_I2C_Init+0x284>)
 8006ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce8:	099b      	lsrs	r3, r3, #6
 8006cea:	3301      	adds	r3, #1
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6812      	ldr	r2, [r2, #0]
 8006cf0:	430b      	orrs	r3, r1
 8006cf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006cfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	495c      	ldr	r1, [pc, #368]	; (8006e78 <HAL_I2C_Init+0x274>)
 8006d08:	428b      	cmp	r3, r1
 8006d0a:	d819      	bhi.n	8006d40 <HAL_I2C_Init+0x13c>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	1e59      	subs	r1, r3, #1
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d1a:	1c59      	adds	r1, r3, #1
 8006d1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006d20:	400b      	ands	r3, r1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <HAL_I2C_Init+0x138>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	1e59      	subs	r1, r3, #1
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	005b      	lsls	r3, r3, #1
 8006d30:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d34:	3301      	adds	r3, #1
 8006d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d3a:	e051      	b.n	8006de0 <HAL_I2C_Init+0x1dc>
 8006d3c:	2304      	movs	r3, #4
 8006d3e:	e04f      	b.n	8006de0 <HAL_I2C_Init+0x1dc>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d111      	bne.n	8006d6c <HAL_I2C_Init+0x168>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	1e58      	subs	r0, r3, #1
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6859      	ldr	r1, [r3, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	440b      	add	r3, r1
 8006d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	bf0c      	ite	eq
 8006d64:	2301      	moveq	r3, #1
 8006d66:	2300      	movne	r3, #0
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	e012      	b.n	8006d92 <HAL_I2C_Init+0x18e>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	1e58      	subs	r0, r3, #1
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6859      	ldr	r1, [r3, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	440b      	add	r3, r1
 8006d7a:	0099      	lsls	r1, r3, #2
 8006d7c:	440b      	add	r3, r1
 8006d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d82:	3301      	adds	r3, #1
 8006d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	bf0c      	ite	eq
 8006d8c:	2301      	moveq	r3, #1
 8006d8e:	2300      	movne	r3, #0
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <HAL_I2C_Init+0x196>
 8006d96:	2301      	movs	r3, #1
 8006d98:	e022      	b.n	8006de0 <HAL_I2C_Init+0x1dc>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10e      	bne.n	8006dc0 <HAL_I2C_Init+0x1bc>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	1e58      	subs	r0, r3, #1
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6859      	ldr	r1, [r3, #4]
 8006daa:	460b      	mov	r3, r1
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	440b      	add	r3, r1
 8006db0:	fbb0 f3f3 	udiv	r3, r0, r3
 8006db4:	3301      	adds	r3, #1
 8006db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dbe:	e00f      	b.n	8006de0 <HAL_I2C_Init+0x1dc>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	1e58      	subs	r0, r3, #1
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6859      	ldr	r1, [r3, #4]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	440b      	add	r3, r1
 8006dce:	0099      	lsls	r1, r3, #2
 8006dd0:	440b      	add	r3, r1
 8006dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ddc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	6809      	ldr	r1, [r1, #0]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69da      	ldr	r2, [r3, #28]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006e0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	6911      	ldr	r1, [r2, #16]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	68d2      	ldr	r2, [r2, #12]
 8006e1a:	4311      	orrs	r1, r2
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	6812      	ldr	r2, [r2, #0]
 8006e20:	430b      	orrs	r3, r1
 8006e22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	695a      	ldr	r2, [r3, #20]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	431a      	orrs	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 0201 	orr.w	r2, r2, #1
 8006e4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	000186a0 	.word	0x000186a0
 8006e7c:	001e847f 	.word	0x001e847f
 8006e80:	003d08ff 	.word	0x003d08ff
 8006e84:	431bde83 	.word	0x431bde83
 8006e88:	10624dd3 	.word	0x10624dd3

08006e8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b088      	sub	sp, #32
 8006e90:	af02      	add	r7, sp, #8
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	4608      	mov	r0, r1
 8006e96:	4611      	mov	r1, r2
 8006e98:	461a      	mov	r2, r3
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	817b      	strh	r3, [r7, #10]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	813b      	strh	r3, [r7, #8]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ea6:	f7fd ff73 	bl	8004d90 <HAL_GetTick>
 8006eaa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b20      	cmp	r3, #32
 8006eb6:	f040 80d9 	bne.w	800706c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	2319      	movs	r3, #25
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	496d      	ldr	r1, [pc, #436]	; (8007078 <HAL_I2C_Mem_Write+0x1ec>)
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 fc7f 	bl	80077c8 <I2C_WaitOnFlagUntilTimeout>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e0cc      	b.n	800706e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d101      	bne.n	8006ee2 <HAL_I2C_Mem_Write+0x56>
 8006ede:	2302      	movs	r3, #2
 8006ee0:	e0c5      	b.n	800706e <HAL_I2C_Mem_Write+0x1e2>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d007      	beq.n	8006f08 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f042 0201 	orr.w	r2, r2, #1
 8006f06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2221      	movs	r2, #33	; 0x21
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2240      	movs	r2, #64	; 0x40
 8006f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6a3a      	ldr	r2, [r7, #32]
 8006f32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4a4d      	ldr	r2, [pc, #308]	; (800707c <HAL_I2C_Mem_Write+0x1f0>)
 8006f48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f4a:	88f8      	ldrh	r0, [r7, #6]
 8006f4c:	893a      	ldrh	r2, [r7, #8]
 8006f4e:	8979      	ldrh	r1, [r7, #10]
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	9301      	str	r3, [sp, #4]
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	4603      	mov	r3, r0
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 fab6 	bl	80074cc <I2C_RequestMemoryWrite>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d052      	beq.n	800700c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e081      	b.n	800706e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f000 fd00 	bl	8007974 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00d      	beq.n	8006f96 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d107      	bne.n	8006f92 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e06b      	b.n	800706e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9a:	781a      	ldrb	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	f003 0304 	and.w	r3, r3, #4
 8006fd0:	2b04      	cmp	r3, #4
 8006fd2:	d11b      	bne.n	800700c <HAL_I2C_Mem_Write+0x180>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d017      	beq.n	800700c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	781a      	ldrb	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	1c5a      	adds	r2, r3, #1
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007002:	b29b      	uxth	r3, r3
 8007004:	3b01      	subs	r3, #1
 8007006:	b29a      	uxth	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1aa      	bne.n	8006f6a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 fcec 	bl	80079f6 <I2C_WaitOnBTFFlagUntilTimeout>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00d      	beq.n	8007040 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	2b04      	cmp	r3, #4
 800702a:	d107      	bne.n	800703c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800703a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e016      	b.n	800706e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800704e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2220      	movs	r2, #32
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007068:	2300      	movs	r3, #0
 800706a:	e000      	b.n	800706e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800706c:	2302      	movs	r3, #2
  }
}
 800706e:	4618      	mov	r0, r3
 8007070:	3718      	adds	r7, #24
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	00100002 	.word	0x00100002
 800707c:	ffff0000 	.word	0xffff0000

08007080 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b08c      	sub	sp, #48	; 0x30
 8007084:	af02      	add	r7, sp, #8
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	4608      	mov	r0, r1
 800708a:	4611      	mov	r1, r2
 800708c:	461a      	mov	r2, r3
 800708e:	4603      	mov	r3, r0
 8007090:	817b      	strh	r3, [r7, #10]
 8007092:	460b      	mov	r3, r1
 8007094:	813b      	strh	r3, [r7, #8]
 8007096:	4613      	mov	r3, r2
 8007098:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800709a:	f7fd fe79 	bl	8004d90 <HAL_GetTick>
 800709e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b20      	cmp	r3, #32
 80070aa:	f040 8208 	bne.w	80074be <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	2319      	movs	r3, #25
 80070b4:	2201      	movs	r2, #1
 80070b6:	497b      	ldr	r1, [pc, #492]	; (80072a4 <HAL_I2C_Mem_Read+0x224>)
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 fb85 	bl	80077c8 <I2C_WaitOnFlagUntilTimeout>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80070c4:	2302      	movs	r3, #2
 80070c6:	e1fb      	b.n	80074c0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d101      	bne.n	80070d6 <HAL_I2C_Mem_Read+0x56>
 80070d2:	2302      	movs	r3, #2
 80070d4:	e1f4      	b.n	80074c0 <HAL_I2C_Mem_Read+0x440>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d007      	beq.n	80070fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0201 	orr.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800710a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2222      	movs	r2, #34	; 0x22
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2240      	movs	r2, #64	; 0x40
 8007118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007126:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800712c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007132:	b29a      	uxth	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4a5b      	ldr	r2, [pc, #364]	; (80072a8 <HAL_I2C_Mem_Read+0x228>)
 800713c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800713e:	88f8      	ldrh	r0, [r7, #6]
 8007140:	893a      	ldrh	r2, [r7, #8]
 8007142:	8979      	ldrh	r1, [r7, #10]
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	9301      	str	r3, [sp, #4]
 8007148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	4603      	mov	r3, r0
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 fa52 	bl	80075f8 <I2C_RequestMemoryRead>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e1b0      	b.n	80074c0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007162:	2b00      	cmp	r3, #0
 8007164:	d113      	bne.n	800718e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007166:	2300      	movs	r3, #0
 8007168:	623b      	str	r3, [r7, #32]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	623b      	str	r3, [r7, #32]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	623b      	str	r3, [r7, #32]
 800717a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	e184      	b.n	8007498 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007192:	2b01      	cmp	r3, #1
 8007194:	d11b      	bne.n	80071ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071a6:	2300      	movs	r3, #0
 80071a8:	61fb      	str	r3, [r7, #28]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	61fb      	str	r3, [r7, #28]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	61fb      	str	r3, [r7, #28]
 80071ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	e164      	b.n	8007498 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d11b      	bne.n	800720e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071f6:	2300      	movs	r3, #0
 80071f8:	61bb      	str	r3, [r7, #24]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	61bb      	str	r3, [r7, #24]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	61bb      	str	r3, [r7, #24]
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	e144      	b.n	8007498 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800720e:	2300      	movs	r3, #0
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	617b      	str	r3, [r7, #20]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	617b      	str	r3, [r7, #20]
 8007222:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007224:	e138      	b.n	8007498 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800722a:	2b03      	cmp	r3, #3
 800722c:	f200 80f1 	bhi.w	8007412 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007234:	2b01      	cmp	r3, #1
 8007236:	d123      	bne.n	8007280 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800723a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 fc1b 	bl	8007a78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e139      	b.n	80074c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691a      	ldr	r2, [r3, #16]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	b2d2      	uxtb	r2, r2
 8007258:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	1c5a      	adds	r2, r3, #1
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007274:	b29b      	uxth	r3, r3
 8007276:	3b01      	subs	r3, #1
 8007278:	b29a      	uxth	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800727e:	e10b      	b.n	8007498 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007284:	2b02      	cmp	r3, #2
 8007286:	d14e      	bne.n	8007326 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	2200      	movs	r2, #0
 8007290:	4906      	ldr	r1, [pc, #24]	; (80072ac <HAL_I2C_Mem_Read+0x22c>)
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 fa98 	bl	80077c8 <I2C_WaitOnFlagUntilTimeout>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d008      	beq.n	80072b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e10e      	b.n	80074c0 <HAL_I2C_Mem_Read+0x440>
 80072a2:	bf00      	nop
 80072a4:	00100002 	.word	0x00100002
 80072a8:	ffff0000 	.word	0xffff0000
 80072ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	691a      	ldr	r2, [r3, #16]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	b2d2      	uxtb	r2, r2
 80072cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	1c5a      	adds	r2, r3, #1
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072dc:	3b01      	subs	r3, #1
 80072de:	b29a      	uxth	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	3b01      	subs	r3, #1
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	691a      	ldr	r2, [r3, #16]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	b2d2      	uxtb	r2, r2
 80072fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800730e:	3b01      	subs	r3, #1
 8007310:	b29a      	uxth	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800731a:	b29b      	uxth	r3, r3
 800731c:	3b01      	subs	r3, #1
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007324:	e0b8      	b.n	8007498 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732c:	2200      	movs	r2, #0
 800732e:	4966      	ldr	r1, [pc, #408]	; (80074c8 <HAL_I2C_Mem_Read+0x448>)
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 fa49 	bl	80077c8 <I2C_WaitOnFlagUntilTimeout>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e0bf      	b.n	80074c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800734e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	691a      	ldr	r2, [r3, #16]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800736c:	3b01      	subs	r3, #1
 800736e:	b29a      	uxth	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007378:	b29b      	uxth	r3, r3
 800737a:	3b01      	subs	r3, #1
 800737c:	b29a      	uxth	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007388:	2200      	movs	r2, #0
 800738a:	494f      	ldr	r1, [pc, #316]	; (80074c8 <HAL_I2C_Mem_Read+0x448>)
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 fa1b 	bl	80077c8 <I2C_WaitOnFlagUntilTimeout>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e091      	b.n	80074c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	691a      	ldr	r2, [r3, #16]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	b2d2      	uxtb	r2, r2
 80073b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	1c5a      	adds	r2, r3, #1
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073c8:	3b01      	subs	r3, #1
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	3b01      	subs	r3, #1
 80073d8:	b29a      	uxth	r2, r3
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	b2d2      	uxtb	r2, r2
 80073ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073fa:	3b01      	subs	r3, #1
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007406:	b29b      	uxth	r3, r3
 8007408:	3b01      	subs	r3, #1
 800740a:	b29a      	uxth	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007410:	e042      	b.n	8007498 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007414:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 fb2e 	bl	8007a78 <I2C_WaitOnRXNEFlagUntilTimeout>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e04c      	b.n	80074c0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	691a      	ldr	r2, [r3, #16]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007430:	b2d2      	uxtb	r2, r2
 8007432:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	1c5a      	adds	r2, r3, #1
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007442:	3b01      	subs	r3, #1
 8007444:	b29a      	uxth	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744e:	b29b      	uxth	r3, r3
 8007450:	3b01      	subs	r3, #1
 8007452:	b29a      	uxth	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	f003 0304 	and.w	r3, r3, #4
 8007462:	2b04      	cmp	r3, #4
 8007464:	d118      	bne.n	8007498 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	691a      	ldr	r2, [r3, #16]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	b2d2      	uxtb	r2, r2
 8007472:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	1c5a      	adds	r2, r3, #1
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007482:	3b01      	subs	r3, #1
 8007484:	b29a      	uxth	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800748e:	b29b      	uxth	r3, r3
 8007490:	3b01      	subs	r3, #1
 8007492:	b29a      	uxth	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800749c:	2b00      	cmp	r3, #0
 800749e:	f47f aec2 	bne.w	8007226 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2220      	movs	r2, #32
 80074a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	e000      	b.n	80074c0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80074be:	2302      	movs	r3, #2
  }
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3728      	adds	r7, #40	; 0x28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	00010004 	.word	0x00010004

080074cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af02      	add	r7, sp, #8
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	4608      	mov	r0, r1
 80074d6:	4611      	mov	r1, r2
 80074d8:	461a      	mov	r2, r3
 80074da:	4603      	mov	r3, r0
 80074dc:	817b      	strh	r3, [r7, #10]
 80074de:	460b      	mov	r3, r1
 80074e0:	813b      	strh	r3, [r7, #8]
 80074e2:	4613      	mov	r3, r2
 80074e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 f960 	bl	80077c8 <I2C_WaitOnFlagUntilTimeout>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00d      	beq.n	800752a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800751c:	d103      	bne.n	8007526 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007524:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e05f      	b.n	80075ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800752a:	897b      	ldrh	r3, [r7, #10]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	461a      	mov	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007538:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	6a3a      	ldr	r2, [r7, #32]
 800753e:	492d      	ldr	r1, [pc, #180]	; (80075f4 <I2C_RequestMemoryWrite+0x128>)
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 f998 	bl	8007876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e04c      	b.n	80075ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007550:	2300      	movs	r3, #0
 8007552:	617b      	str	r3, [r7, #20]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	617b      	str	r3, [r7, #20]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	617b      	str	r3, [r7, #20]
 8007564:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007568:	6a39      	ldr	r1, [r7, #32]
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 fa02 	bl	8007974 <I2C_WaitOnTXEFlagUntilTimeout>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00d      	beq.n	8007592 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	2b04      	cmp	r3, #4
 800757c:	d107      	bne.n	800758e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800758c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e02b      	b.n	80075ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007592:	88fb      	ldrh	r3, [r7, #6]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d105      	bne.n	80075a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007598:	893b      	ldrh	r3, [r7, #8]
 800759a:	b2da      	uxtb	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	611a      	str	r2, [r3, #16]
 80075a2:	e021      	b.n	80075e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80075a4:	893b      	ldrh	r3, [r7, #8]
 80075a6:	0a1b      	lsrs	r3, r3, #8
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b4:	6a39      	ldr	r1, [r7, #32]
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f000 f9dc 	bl	8007974 <I2C_WaitOnTXEFlagUntilTimeout>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00d      	beq.n	80075de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	2b04      	cmp	r3, #4
 80075c8:	d107      	bne.n	80075da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e005      	b.n	80075ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075de:	893b      	ldrh	r3, [r7, #8]
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	00010002 	.word	0x00010002

080075f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b088      	sub	sp, #32
 80075fc:	af02      	add	r7, sp, #8
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	4608      	mov	r0, r1
 8007602:	4611      	mov	r1, r2
 8007604:	461a      	mov	r2, r3
 8007606:	4603      	mov	r3, r0
 8007608:	817b      	strh	r3, [r7, #10]
 800760a:	460b      	mov	r3, r1
 800760c:	813b      	strh	r3, [r7, #8]
 800760e:	4613      	mov	r3, r2
 8007610:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007620:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007630:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	6a3b      	ldr	r3, [r7, #32]
 8007638:	2200      	movs	r2, #0
 800763a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f000 f8c2 	bl	80077c8 <I2C_WaitOnFlagUntilTimeout>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00d      	beq.n	8007666 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007658:	d103      	bne.n	8007662 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007660:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e0aa      	b.n	80077bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007666:	897b      	ldrh	r3, [r7, #10]
 8007668:	b2db      	uxtb	r3, r3
 800766a:	461a      	mov	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007674:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007678:	6a3a      	ldr	r2, [r7, #32]
 800767a:	4952      	ldr	r1, [pc, #328]	; (80077c4 <I2C_RequestMemoryRead+0x1cc>)
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 f8fa 	bl	8007876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e097      	b.n	80077bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800768c:	2300      	movs	r3, #0
 800768e:	617b      	str	r3, [r7, #20]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	617b      	str	r3, [r7, #20]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076a4:	6a39      	ldr	r1, [r7, #32]
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 f964 	bl	8007974 <I2C_WaitOnTXEFlagUntilTimeout>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00d      	beq.n	80076ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b6:	2b04      	cmp	r3, #4
 80076b8:	d107      	bne.n	80076ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e076      	b.n	80077bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076ce:	88fb      	ldrh	r3, [r7, #6]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d105      	bne.n	80076e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076d4:	893b      	ldrh	r3, [r7, #8]
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	611a      	str	r2, [r3, #16]
 80076de:	e021      	b.n	8007724 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80076e0:	893b      	ldrh	r3, [r7, #8]
 80076e2:	0a1b      	lsrs	r3, r3, #8
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f0:	6a39      	ldr	r1, [r7, #32]
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 f93e 	bl	8007974 <I2C_WaitOnTXEFlagUntilTimeout>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00d      	beq.n	800771a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	2b04      	cmp	r3, #4
 8007704:	d107      	bne.n	8007716 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007714:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e050      	b.n	80077bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800771a:	893b      	ldrh	r3, [r7, #8]
 800771c:	b2da      	uxtb	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007726:	6a39      	ldr	r1, [r7, #32]
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 f923 	bl	8007974 <I2C_WaitOnTXEFlagUntilTimeout>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00d      	beq.n	8007750 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007738:	2b04      	cmp	r3, #4
 800773a:	d107      	bne.n	800774c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800774a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e035      	b.n	80077bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800775e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	2200      	movs	r2, #0
 8007768:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 f82b 	bl	80077c8 <I2C_WaitOnFlagUntilTimeout>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00d      	beq.n	8007794 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007786:	d103      	bne.n	8007790 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800778e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e013      	b.n	80077bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007794:	897b      	ldrh	r3, [r7, #10]
 8007796:	b2db      	uxtb	r3, r3
 8007798:	f043 0301 	orr.w	r3, r3, #1
 800779c:	b2da      	uxtb	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	6a3a      	ldr	r2, [r7, #32]
 80077a8:	4906      	ldr	r1, [pc, #24]	; (80077c4 <I2C_RequestMemoryRead+0x1cc>)
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f000 f863 	bl	8007876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e000      	b.n	80077bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	00010002 	.word	0x00010002

080077c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	603b      	str	r3, [r7, #0]
 80077d4:	4613      	mov	r3, r2
 80077d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077d8:	e025      	b.n	8007826 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e0:	d021      	beq.n	8007826 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077e2:	f7fd fad5 	bl	8004d90 <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	683a      	ldr	r2, [r7, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d302      	bcc.n	80077f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d116      	bne.n	8007826 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2220      	movs	r2, #32
 8007802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	f043 0220 	orr.w	r2, r3, #32
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e023      	b.n	800786e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	0c1b      	lsrs	r3, r3, #16
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b01      	cmp	r3, #1
 800782e:	d10d      	bne.n	800784c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	43da      	mvns	r2, r3
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	4013      	ands	r3, r2
 800783c:	b29b      	uxth	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	bf0c      	ite	eq
 8007842:	2301      	moveq	r3, #1
 8007844:	2300      	movne	r3, #0
 8007846:	b2db      	uxtb	r3, r3
 8007848:	461a      	mov	r2, r3
 800784a:	e00c      	b.n	8007866 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	43da      	mvns	r2, r3
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	4013      	ands	r3, r2
 8007858:	b29b      	uxth	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	bf0c      	ite	eq
 800785e:	2301      	moveq	r3, #1
 8007860:	2300      	movne	r3, #0
 8007862:	b2db      	uxtb	r3, r3
 8007864:	461a      	mov	r2, r3
 8007866:	79fb      	ldrb	r3, [r7, #7]
 8007868:	429a      	cmp	r2, r3
 800786a:	d0b6      	beq.n	80077da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b084      	sub	sp, #16
 800787a:	af00      	add	r7, sp, #0
 800787c:	60f8      	str	r0, [r7, #12]
 800787e:	60b9      	str	r1, [r7, #8]
 8007880:	607a      	str	r2, [r7, #4]
 8007882:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007884:	e051      	b.n	800792a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007894:	d123      	bne.n	80078de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80078ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2220      	movs	r2, #32
 80078ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	f043 0204 	orr.w	r2, r3, #4
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e046      	b.n	800796c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e4:	d021      	beq.n	800792a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078e6:	f7fd fa53 	bl	8004d90 <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d302      	bcc.n	80078fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d116      	bne.n	800792a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2220      	movs	r2, #32
 8007906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	f043 0220 	orr.w	r2, r3, #32
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e020      	b.n	800796c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	0c1b      	lsrs	r3, r3, #16
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b01      	cmp	r3, #1
 8007932:	d10c      	bne.n	800794e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	43da      	mvns	r2, r3
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	4013      	ands	r3, r2
 8007940:	b29b      	uxth	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	bf14      	ite	ne
 8007946:	2301      	movne	r3, #1
 8007948:	2300      	moveq	r3, #0
 800794a:	b2db      	uxtb	r3, r3
 800794c:	e00b      	b.n	8007966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	43da      	mvns	r2, r3
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	4013      	ands	r3, r2
 800795a:	b29b      	uxth	r3, r3
 800795c:	2b00      	cmp	r3, #0
 800795e:	bf14      	ite	ne
 8007960:	2301      	movne	r3, #1
 8007962:	2300      	moveq	r3, #0
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d18d      	bne.n	8007886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007980:	e02d      	b.n	80079de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 f8ce 	bl	8007b24 <I2C_IsAcknowledgeFailed>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e02d      	b.n	80079ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007998:	d021      	beq.n	80079de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800799a:	f7fd f9f9 	bl	8004d90 <HAL_GetTick>
 800799e:	4602      	mov	r2, r0
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d302      	bcc.n	80079b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d116      	bne.n	80079de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2220      	movs	r2, #32
 80079ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ca:	f043 0220 	orr.w	r2, r3, #32
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e007      	b.n	80079ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e8:	2b80      	cmp	r3, #128	; 0x80
 80079ea:	d1ca      	bne.n	8007982 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	60f8      	str	r0, [r7, #12]
 80079fe:	60b9      	str	r1, [r7, #8]
 8007a00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007a02:	e02d      	b.n	8007a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 f88d 	bl	8007b24 <I2C_IsAcknowledgeFailed>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d001      	beq.n	8007a14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e02d      	b.n	8007a70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1a:	d021      	beq.n	8007a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a1c:	f7fd f9b8 	bl	8004d90 <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d302      	bcc.n	8007a32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d116      	bne.n	8007a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4c:	f043 0220 	orr.w	r2, r3, #32
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e007      	b.n	8007a70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	f003 0304 	and.w	r3, r3, #4
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	d1ca      	bne.n	8007a04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a84:	e042      	b.n	8007b0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	695b      	ldr	r3, [r3, #20]
 8007a8c:	f003 0310 	and.w	r3, r3, #16
 8007a90:	2b10      	cmp	r3, #16
 8007a92:	d119      	bne.n	8007ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f06f 0210 	mvn.w	r2, #16
 8007a9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e029      	b.n	8007b1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ac8:	f7fd f962 	bl	8004d90 <HAL_GetTick>
 8007acc:	4602      	mov	r2, r0
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d302      	bcc.n	8007ade <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d116      	bne.n	8007b0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af8:	f043 0220 	orr.w	r2, r3, #32
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e007      	b.n	8007b1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b16:	2b40      	cmp	r3, #64	; 0x40
 8007b18:	d1b5      	bne.n	8007a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b3a:	d11b      	bne.n	8007b74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b60:	f043 0204 	orr.w	r2, r3, #4
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e000      	b.n	8007b76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
	...

08007b84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d101      	bne.n	8007b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e267      	b.n	8008066 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d075      	beq.n	8007c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ba2:	4b88      	ldr	r3, [pc, #544]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f003 030c 	and.w	r3, r3, #12
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	d00c      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bae:	4b85      	ldr	r3, [pc, #532]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007bb6:	2b08      	cmp	r3, #8
 8007bb8:	d112      	bne.n	8007be0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bba:	4b82      	ldr	r3, [pc, #520]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bc6:	d10b      	bne.n	8007be0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bc8:	4b7e      	ldr	r3, [pc, #504]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d05b      	beq.n	8007c8c <HAL_RCC_OscConfig+0x108>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d157      	bne.n	8007c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e242      	b.n	8008066 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007be8:	d106      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x74>
 8007bea:	4b76      	ldr	r3, [pc, #472]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a75      	ldr	r2, [pc, #468]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bf4:	6013      	str	r3, [r2, #0]
 8007bf6:	e01d      	b.n	8007c34 <HAL_RCC_OscConfig+0xb0>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c00:	d10c      	bne.n	8007c1c <HAL_RCC_OscConfig+0x98>
 8007c02:	4b70      	ldr	r3, [pc, #448]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a6f      	ldr	r2, [pc, #444]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c0c:	6013      	str	r3, [r2, #0]
 8007c0e:	4b6d      	ldr	r3, [pc, #436]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a6c      	ldr	r2, [pc, #432]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	e00b      	b.n	8007c34 <HAL_RCC_OscConfig+0xb0>
 8007c1c:	4b69      	ldr	r3, [pc, #420]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a68      	ldr	r2, [pc, #416]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	4b66      	ldr	r3, [pc, #408]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a65      	ldr	r2, [pc, #404]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d013      	beq.n	8007c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c3c:	f7fd f8a8 	bl	8004d90 <HAL_GetTick>
 8007c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c42:	e008      	b.n	8007c56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c44:	f7fd f8a4 	bl	8004d90 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	2b64      	cmp	r3, #100	; 0x64
 8007c50:	d901      	bls.n	8007c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e207      	b.n	8008066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c56:	4b5b      	ldr	r3, [pc, #364]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0f0      	beq.n	8007c44 <HAL_RCC_OscConfig+0xc0>
 8007c62:	e014      	b.n	8007c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c64:	f7fd f894 	bl	8004d90 <HAL_GetTick>
 8007c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c6a:	e008      	b.n	8007c7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c6c:	f7fd f890 	bl	8004d90 <HAL_GetTick>
 8007c70:	4602      	mov	r2, r0
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	2b64      	cmp	r3, #100	; 0x64
 8007c78:	d901      	bls.n	8007c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e1f3      	b.n	8008066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c7e:	4b51      	ldr	r3, [pc, #324]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1f0      	bne.n	8007c6c <HAL_RCC_OscConfig+0xe8>
 8007c8a:	e000      	b.n	8007c8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d063      	beq.n	8007d62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007c9a:	4b4a      	ldr	r3, [pc, #296]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f003 030c 	and.w	r3, r3, #12
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00b      	beq.n	8007cbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ca6:	4b47      	ldr	r3, [pc, #284]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007cae:	2b08      	cmp	r3, #8
 8007cb0:	d11c      	bne.n	8007cec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cb2:	4b44      	ldr	r3, [pc, #272]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d116      	bne.n	8007cec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cbe:	4b41      	ldr	r3, [pc, #260]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0302 	and.w	r3, r3, #2
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d005      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x152>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d001      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e1c7      	b.n	8008066 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cd6:	4b3b      	ldr	r3, [pc, #236]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	00db      	lsls	r3, r3, #3
 8007ce4:	4937      	ldr	r1, [pc, #220]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cea:	e03a      	b.n	8007d62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d020      	beq.n	8007d36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007cf4:	4b34      	ldr	r3, [pc, #208]	; (8007dc8 <HAL_RCC_OscConfig+0x244>)
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cfa:	f7fd f849 	bl	8004d90 <HAL_GetTick>
 8007cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d00:	e008      	b.n	8007d14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d02:	f7fd f845 	bl	8004d90 <HAL_GetTick>
 8007d06:	4602      	mov	r2, r0
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d901      	bls.n	8007d14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e1a8      	b.n	8008066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d14:	4b2b      	ldr	r3, [pc, #172]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0302 	and.w	r3, r3, #2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d0f0      	beq.n	8007d02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d20:	4b28      	ldr	r3, [pc, #160]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	00db      	lsls	r3, r3, #3
 8007d2e:	4925      	ldr	r1, [pc, #148]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	600b      	str	r3, [r1, #0]
 8007d34:	e015      	b.n	8007d62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d36:	4b24      	ldr	r3, [pc, #144]	; (8007dc8 <HAL_RCC_OscConfig+0x244>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d3c:	f7fd f828 	bl	8004d90 <HAL_GetTick>
 8007d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d42:	e008      	b.n	8007d56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d44:	f7fd f824 	bl	8004d90 <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d901      	bls.n	8007d56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e187      	b.n	8008066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d56:	4b1b      	ldr	r3, [pc, #108]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1f0      	bne.n	8007d44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0308 	and.w	r3, r3, #8
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d036      	beq.n	8007ddc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d016      	beq.n	8007da4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d76:	4b15      	ldr	r3, [pc, #84]	; (8007dcc <HAL_RCC_OscConfig+0x248>)
 8007d78:	2201      	movs	r2, #1
 8007d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d7c:	f7fd f808 	bl	8004d90 <HAL_GetTick>
 8007d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d82:	e008      	b.n	8007d96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d84:	f7fd f804 	bl	8004d90 <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d901      	bls.n	8007d96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e167      	b.n	8008066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d96:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <HAL_RCC_OscConfig+0x240>)
 8007d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d0f0      	beq.n	8007d84 <HAL_RCC_OscConfig+0x200>
 8007da2:	e01b      	b.n	8007ddc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007da4:	4b09      	ldr	r3, [pc, #36]	; (8007dcc <HAL_RCC_OscConfig+0x248>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007daa:	f7fc fff1 	bl	8004d90 <HAL_GetTick>
 8007dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007db0:	e00e      	b.n	8007dd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007db2:	f7fc ffed 	bl	8004d90 <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d907      	bls.n	8007dd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e150      	b.n	8008066 <HAL_RCC_OscConfig+0x4e2>
 8007dc4:	40023800 	.word	0x40023800
 8007dc8:	42470000 	.word	0x42470000
 8007dcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dd0:	4b88      	ldr	r3, [pc, #544]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dd4:	f003 0302 	and.w	r3, r3, #2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1ea      	bne.n	8007db2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0304 	and.w	r3, r3, #4
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8097 	beq.w	8007f18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007dea:	2300      	movs	r3, #0
 8007dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dee:	4b81      	ldr	r3, [pc, #516]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10f      	bne.n	8007e1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60bb      	str	r3, [r7, #8]
 8007dfe:	4b7d      	ldr	r3, [pc, #500]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e02:	4a7c      	ldr	r2, [pc, #496]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e08:	6413      	str	r3, [r2, #64]	; 0x40
 8007e0a:	4b7a      	ldr	r3, [pc, #488]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e12:	60bb      	str	r3, [r7, #8]
 8007e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e16:	2301      	movs	r3, #1
 8007e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e1a:	4b77      	ldr	r3, [pc, #476]	; (8007ff8 <HAL_RCC_OscConfig+0x474>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d118      	bne.n	8007e58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e26:	4b74      	ldr	r3, [pc, #464]	; (8007ff8 <HAL_RCC_OscConfig+0x474>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a73      	ldr	r2, [pc, #460]	; (8007ff8 <HAL_RCC_OscConfig+0x474>)
 8007e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e32:	f7fc ffad 	bl	8004d90 <HAL_GetTick>
 8007e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e38:	e008      	b.n	8007e4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e3a:	f7fc ffa9 	bl	8004d90 <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d901      	bls.n	8007e4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e10c      	b.n	8008066 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e4c:	4b6a      	ldr	r3, [pc, #424]	; (8007ff8 <HAL_RCC_OscConfig+0x474>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d0f0      	beq.n	8007e3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d106      	bne.n	8007e6e <HAL_RCC_OscConfig+0x2ea>
 8007e60:	4b64      	ldr	r3, [pc, #400]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e64:	4a63      	ldr	r2, [pc, #396]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007e66:	f043 0301 	orr.w	r3, r3, #1
 8007e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8007e6c:	e01c      	b.n	8007ea8 <HAL_RCC_OscConfig+0x324>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	2b05      	cmp	r3, #5
 8007e74:	d10c      	bne.n	8007e90 <HAL_RCC_OscConfig+0x30c>
 8007e76:	4b5f      	ldr	r3, [pc, #380]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e7a:	4a5e      	ldr	r2, [pc, #376]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007e7c:	f043 0304 	orr.w	r3, r3, #4
 8007e80:	6713      	str	r3, [r2, #112]	; 0x70
 8007e82:	4b5c      	ldr	r3, [pc, #368]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e86:	4a5b      	ldr	r2, [pc, #364]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007e88:	f043 0301 	orr.w	r3, r3, #1
 8007e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8007e8e:	e00b      	b.n	8007ea8 <HAL_RCC_OscConfig+0x324>
 8007e90:	4b58      	ldr	r3, [pc, #352]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e94:	4a57      	ldr	r2, [pc, #348]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007e96:	f023 0301 	bic.w	r3, r3, #1
 8007e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8007e9c:	4b55      	ldr	r3, [pc, #340]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea0:	4a54      	ldr	r2, [pc, #336]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007ea2:	f023 0304 	bic.w	r3, r3, #4
 8007ea6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d015      	beq.n	8007edc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb0:	f7fc ff6e 	bl	8004d90 <HAL_GetTick>
 8007eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007eb6:	e00a      	b.n	8007ece <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007eb8:	f7fc ff6a 	bl	8004d90 <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d901      	bls.n	8007ece <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e0cb      	b.n	8008066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ece:	4b49      	ldr	r3, [pc, #292]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d0ee      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x334>
 8007eda:	e014      	b.n	8007f06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007edc:	f7fc ff58 	bl	8004d90 <HAL_GetTick>
 8007ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ee2:	e00a      	b.n	8007efa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ee4:	f7fc ff54 	bl	8004d90 <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d901      	bls.n	8007efa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e0b5      	b.n	8008066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007efa:	4b3e      	ldr	r3, [pc, #248]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007efe:	f003 0302 	and.w	r3, r3, #2
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1ee      	bne.n	8007ee4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f06:	7dfb      	ldrb	r3, [r7, #23]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d105      	bne.n	8007f18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f0c:	4b39      	ldr	r3, [pc, #228]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f10:	4a38      	ldr	r2, [pc, #224]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f000 80a1 	beq.w	8008064 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f22:	4b34      	ldr	r3, [pc, #208]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f003 030c 	and.w	r3, r3, #12
 8007f2a:	2b08      	cmp	r3, #8
 8007f2c:	d05c      	beq.n	8007fe8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d141      	bne.n	8007fba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f36:	4b31      	ldr	r3, [pc, #196]	; (8007ffc <HAL_RCC_OscConfig+0x478>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f3c:	f7fc ff28 	bl	8004d90 <HAL_GetTick>
 8007f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f42:	e008      	b.n	8007f56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f44:	f7fc ff24 	bl	8004d90 <HAL_GetTick>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d901      	bls.n	8007f56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e087      	b.n	8008066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f56:	4b27      	ldr	r3, [pc, #156]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1f0      	bne.n	8007f44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	69da      	ldr	r2, [r3, #28]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	431a      	orrs	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f70:	019b      	lsls	r3, r3, #6
 8007f72:	431a      	orrs	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f78:	085b      	lsrs	r3, r3, #1
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	041b      	lsls	r3, r3, #16
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f84:	061b      	lsls	r3, r3, #24
 8007f86:	491b      	ldr	r1, [pc, #108]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f8c:	4b1b      	ldr	r3, [pc, #108]	; (8007ffc <HAL_RCC_OscConfig+0x478>)
 8007f8e:	2201      	movs	r2, #1
 8007f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f92:	f7fc fefd 	bl	8004d90 <HAL_GetTick>
 8007f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f98:	e008      	b.n	8007fac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f9a:	f7fc fef9 	bl	8004d90 <HAL_GetTick>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d901      	bls.n	8007fac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e05c      	b.n	8008066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fac:	4b11      	ldr	r3, [pc, #68]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d0f0      	beq.n	8007f9a <HAL_RCC_OscConfig+0x416>
 8007fb8:	e054      	b.n	8008064 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fba:	4b10      	ldr	r3, [pc, #64]	; (8007ffc <HAL_RCC_OscConfig+0x478>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fc0:	f7fc fee6 	bl	8004d90 <HAL_GetTick>
 8007fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fc6:	e008      	b.n	8007fda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fc8:	f7fc fee2 	bl	8004d90 <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d901      	bls.n	8007fda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e045      	b.n	8008066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fda:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <HAL_RCC_OscConfig+0x470>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1f0      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x444>
 8007fe6:	e03d      	b.n	8008064 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d107      	bne.n	8008000 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e038      	b.n	8008066 <HAL_RCC_OscConfig+0x4e2>
 8007ff4:	40023800 	.word	0x40023800
 8007ff8:	40007000 	.word	0x40007000
 8007ffc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008000:	4b1b      	ldr	r3, [pc, #108]	; (8008070 <HAL_RCC_OscConfig+0x4ec>)
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d028      	beq.n	8008060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008018:	429a      	cmp	r2, r3
 800801a:	d121      	bne.n	8008060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008026:	429a      	cmp	r2, r3
 8008028:	d11a      	bne.n	8008060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008030:	4013      	ands	r3, r2
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008036:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008038:	4293      	cmp	r3, r2
 800803a:	d111      	bne.n	8008060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008046:	085b      	lsrs	r3, r3, #1
 8008048:	3b01      	subs	r3, #1
 800804a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800804c:	429a      	cmp	r2, r3
 800804e:	d107      	bne.n	8008060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800805c:	429a      	cmp	r2, r3
 800805e:	d001      	beq.n	8008064 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e000      	b.n	8008066 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	40023800 	.word	0x40023800

08008074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e0cc      	b.n	8008222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008088:	4b68      	ldr	r3, [pc, #416]	; (800822c <HAL_RCC_ClockConfig+0x1b8>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0307 	and.w	r3, r3, #7
 8008090:	683a      	ldr	r2, [r7, #0]
 8008092:	429a      	cmp	r2, r3
 8008094:	d90c      	bls.n	80080b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008096:	4b65      	ldr	r3, [pc, #404]	; (800822c <HAL_RCC_ClockConfig+0x1b8>)
 8008098:	683a      	ldr	r2, [r7, #0]
 800809a:	b2d2      	uxtb	r2, r2
 800809c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800809e:	4b63      	ldr	r3, [pc, #396]	; (800822c <HAL_RCC_ClockConfig+0x1b8>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0307 	and.w	r3, r3, #7
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d001      	beq.n	80080b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e0b8      	b.n	8008222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d020      	beq.n	80080fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0304 	and.w	r3, r3, #4
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d005      	beq.n	80080d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80080c8:	4b59      	ldr	r3, [pc, #356]	; (8008230 <HAL_RCC_ClockConfig+0x1bc>)
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	4a58      	ldr	r2, [pc, #352]	; (8008230 <HAL_RCC_ClockConfig+0x1bc>)
 80080ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80080d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0308 	and.w	r3, r3, #8
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d005      	beq.n	80080ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80080e0:	4b53      	ldr	r3, [pc, #332]	; (8008230 <HAL_RCC_ClockConfig+0x1bc>)
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	4a52      	ldr	r2, [pc, #328]	; (8008230 <HAL_RCC_ClockConfig+0x1bc>)
 80080e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80080ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080ec:	4b50      	ldr	r3, [pc, #320]	; (8008230 <HAL_RCC_ClockConfig+0x1bc>)
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	494d      	ldr	r1, [pc, #308]	; (8008230 <HAL_RCC_ClockConfig+0x1bc>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	2b00      	cmp	r3, #0
 8008108:	d044      	beq.n	8008194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d107      	bne.n	8008122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008112:	4b47      	ldr	r3, [pc, #284]	; (8008230 <HAL_RCC_ClockConfig+0x1bc>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d119      	bne.n	8008152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e07f      	b.n	8008222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	2b02      	cmp	r3, #2
 8008128:	d003      	beq.n	8008132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800812e:	2b03      	cmp	r3, #3
 8008130:	d107      	bne.n	8008142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008132:	4b3f      	ldr	r3, [pc, #252]	; (8008230 <HAL_RCC_ClockConfig+0x1bc>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d109      	bne.n	8008152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e06f      	b.n	8008222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008142:	4b3b      	ldr	r3, [pc, #236]	; (8008230 <HAL_RCC_ClockConfig+0x1bc>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d101      	bne.n	8008152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e067      	b.n	8008222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008152:	4b37      	ldr	r3, [pc, #220]	; (8008230 <HAL_RCC_ClockConfig+0x1bc>)
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	f023 0203 	bic.w	r2, r3, #3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	4934      	ldr	r1, [pc, #208]	; (8008230 <HAL_RCC_ClockConfig+0x1bc>)
 8008160:	4313      	orrs	r3, r2
 8008162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008164:	f7fc fe14 	bl	8004d90 <HAL_GetTick>
 8008168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800816a:	e00a      	b.n	8008182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800816c:	f7fc fe10 	bl	8004d90 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	f241 3288 	movw	r2, #5000	; 0x1388
 800817a:	4293      	cmp	r3, r2
 800817c:	d901      	bls.n	8008182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e04f      	b.n	8008222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008182:	4b2b      	ldr	r3, [pc, #172]	; (8008230 <HAL_RCC_ClockConfig+0x1bc>)
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	f003 020c 	and.w	r2, r3, #12
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	429a      	cmp	r2, r3
 8008192:	d1eb      	bne.n	800816c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008194:	4b25      	ldr	r3, [pc, #148]	; (800822c <HAL_RCC_ClockConfig+0x1b8>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0307 	and.w	r3, r3, #7
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d20c      	bcs.n	80081bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081a2:	4b22      	ldr	r3, [pc, #136]	; (800822c <HAL_RCC_ClockConfig+0x1b8>)
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	b2d2      	uxtb	r2, r2
 80081a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081aa:	4b20      	ldr	r3, [pc, #128]	; (800822c <HAL_RCC_ClockConfig+0x1b8>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0307 	and.w	r3, r3, #7
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d001      	beq.n	80081bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e032      	b.n	8008222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0304 	and.w	r3, r3, #4
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d008      	beq.n	80081da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081c8:	4b19      	ldr	r3, [pc, #100]	; (8008230 <HAL_RCC_ClockConfig+0x1bc>)
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	4916      	ldr	r1, [pc, #88]	; (8008230 <HAL_RCC_ClockConfig+0x1bc>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0308 	and.w	r3, r3, #8
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d009      	beq.n	80081fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80081e6:	4b12      	ldr	r3, [pc, #72]	; (8008230 <HAL_RCC_ClockConfig+0x1bc>)
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	00db      	lsls	r3, r3, #3
 80081f4:	490e      	ldr	r1, [pc, #56]	; (8008230 <HAL_RCC_ClockConfig+0x1bc>)
 80081f6:	4313      	orrs	r3, r2
 80081f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80081fa:	f000 f821 	bl	8008240 <HAL_RCC_GetSysClockFreq>
 80081fe:	4602      	mov	r2, r0
 8008200:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <HAL_RCC_ClockConfig+0x1bc>)
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	091b      	lsrs	r3, r3, #4
 8008206:	f003 030f 	and.w	r3, r3, #15
 800820a:	490a      	ldr	r1, [pc, #40]	; (8008234 <HAL_RCC_ClockConfig+0x1c0>)
 800820c:	5ccb      	ldrb	r3, [r1, r3]
 800820e:	fa22 f303 	lsr.w	r3, r2, r3
 8008212:	4a09      	ldr	r2, [pc, #36]	; (8008238 <HAL_RCC_ClockConfig+0x1c4>)
 8008214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008216:	4b09      	ldr	r3, [pc, #36]	; (800823c <HAL_RCC_ClockConfig+0x1c8>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4618      	mov	r0, r3
 800821c:	f7fc fd74 	bl	8004d08 <HAL_InitTick>

  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	40023c00 	.word	0x40023c00
 8008230:	40023800 	.word	0x40023800
 8008234:	0800b538 	.word	0x0800b538
 8008238:	20000388 	.word	0x20000388
 800823c:	2000038c 	.word	0x2000038c

08008240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008244:	b090      	sub	sp, #64	; 0x40
 8008246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	637b      	str	r3, [r7, #52]	; 0x34
 800824c:	2300      	movs	r3, #0
 800824e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008250:	2300      	movs	r3, #0
 8008252:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008254:	2300      	movs	r3, #0
 8008256:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008258:	4b59      	ldr	r3, [pc, #356]	; (80083c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f003 030c 	and.w	r3, r3, #12
 8008260:	2b08      	cmp	r3, #8
 8008262:	d00d      	beq.n	8008280 <HAL_RCC_GetSysClockFreq+0x40>
 8008264:	2b08      	cmp	r3, #8
 8008266:	f200 80a1 	bhi.w	80083ac <HAL_RCC_GetSysClockFreq+0x16c>
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <HAL_RCC_GetSysClockFreq+0x34>
 800826e:	2b04      	cmp	r3, #4
 8008270:	d003      	beq.n	800827a <HAL_RCC_GetSysClockFreq+0x3a>
 8008272:	e09b      	b.n	80083ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008274:	4b53      	ldr	r3, [pc, #332]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008276:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008278:	e09b      	b.n	80083b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800827a:	4b53      	ldr	r3, [pc, #332]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800827c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800827e:	e098      	b.n	80083b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008280:	4b4f      	ldr	r3, [pc, #316]	; (80083c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008288:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800828a:	4b4d      	ldr	r3, [pc, #308]	; (80083c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d028      	beq.n	80082e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008296:	4b4a      	ldr	r3, [pc, #296]	; (80083c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	099b      	lsrs	r3, r3, #6
 800829c:	2200      	movs	r2, #0
 800829e:	623b      	str	r3, [r7, #32]
 80082a0:	627a      	str	r2, [r7, #36]	; 0x24
 80082a2:	6a3b      	ldr	r3, [r7, #32]
 80082a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80082a8:	2100      	movs	r1, #0
 80082aa:	4b47      	ldr	r3, [pc, #284]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80082ac:	fb03 f201 	mul.w	r2, r3, r1
 80082b0:	2300      	movs	r3, #0
 80082b2:	fb00 f303 	mul.w	r3, r0, r3
 80082b6:	4413      	add	r3, r2
 80082b8:	4a43      	ldr	r2, [pc, #268]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80082ba:	fba0 1202 	umull	r1, r2, r0, r2
 80082be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082c0:	460a      	mov	r2, r1
 80082c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80082c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082c6:	4413      	add	r3, r2
 80082c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082cc:	2200      	movs	r2, #0
 80082ce:	61bb      	str	r3, [r7, #24]
 80082d0:	61fa      	str	r2, [r7, #28]
 80082d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80082da:	f7f8 fabb 	bl	8000854 <__aeabi_uldivmod>
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	4613      	mov	r3, r2
 80082e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082e6:	e053      	b.n	8008390 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082e8:	4b35      	ldr	r3, [pc, #212]	; (80083c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	099b      	lsrs	r3, r3, #6
 80082ee:	2200      	movs	r2, #0
 80082f0:	613b      	str	r3, [r7, #16]
 80082f2:	617a      	str	r2, [r7, #20]
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80082fa:	f04f 0b00 	mov.w	fp, #0
 80082fe:	4652      	mov	r2, sl
 8008300:	465b      	mov	r3, fp
 8008302:	f04f 0000 	mov.w	r0, #0
 8008306:	f04f 0100 	mov.w	r1, #0
 800830a:	0159      	lsls	r1, r3, #5
 800830c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008310:	0150      	lsls	r0, r2, #5
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	ebb2 080a 	subs.w	r8, r2, sl
 800831a:	eb63 090b 	sbc.w	r9, r3, fp
 800831e:	f04f 0200 	mov.w	r2, #0
 8008322:	f04f 0300 	mov.w	r3, #0
 8008326:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800832a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800832e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008332:	ebb2 0408 	subs.w	r4, r2, r8
 8008336:	eb63 0509 	sbc.w	r5, r3, r9
 800833a:	f04f 0200 	mov.w	r2, #0
 800833e:	f04f 0300 	mov.w	r3, #0
 8008342:	00eb      	lsls	r3, r5, #3
 8008344:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008348:	00e2      	lsls	r2, r4, #3
 800834a:	4614      	mov	r4, r2
 800834c:	461d      	mov	r5, r3
 800834e:	eb14 030a 	adds.w	r3, r4, sl
 8008352:	603b      	str	r3, [r7, #0]
 8008354:	eb45 030b 	adc.w	r3, r5, fp
 8008358:	607b      	str	r3, [r7, #4]
 800835a:	f04f 0200 	mov.w	r2, #0
 800835e:	f04f 0300 	mov.w	r3, #0
 8008362:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008366:	4629      	mov	r1, r5
 8008368:	028b      	lsls	r3, r1, #10
 800836a:	4621      	mov	r1, r4
 800836c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008370:	4621      	mov	r1, r4
 8008372:	028a      	lsls	r2, r1, #10
 8008374:	4610      	mov	r0, r2
 8008376:	4619      	mov	r1, r3
 8008378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800837a:	2200      	movs	r2, #0
 800837c:	60bb      	str	r3, [r7, #8]
 800837e:	60fa      	str	r2, [r7, #12]
 8008380:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008384:	f7f8 fa66 	bl	8000854 <__aeabi_uldivmod>
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	4613      	mov	r3, r2
 800838e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008390:	4b0b      	ldr	r3, [pc, #44]	; (80083c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	0c1b      	lsrs	r3, r3, #16
 8008396:	f003 0303 	and.w	r3, r3, #3
 800839a:	3301      	adds	r3, #1
 800839c:	005b      	lsls	r3, r3, #1
 800839e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80083a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80083aa:	e002      	b.n	80083b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80083ac:	4b05      	ldr	r3, [pc, #20]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80083ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80083b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3740      	adds	r7, #64	; 0x40
 80083b8:	46bd      	mov	sp, r7
 80083ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083be:	bf00      	nop
 80083c0:	40023800 	.word	0x40023800
 80083c4:	00f42400 	.word	0x00f42400
 80083c8:	017d7840 	.word	0x017d7840

080083cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083cc:	b480      	push	{r7}
 80083ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083d0:	4b03      	ldr	r3, [pc, #12]	; (80083e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80083d2:	681b      	ldr	r3, [r3, #0]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	20000388 	.word	0x20000388

080083e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80083e8:	f7ff fff0 	bl	80083cc <HAL_RCC_GetHCLKFreq>
 80083ec:	4602      	mov	r2, r0
 80083ee:	4b05      	ldr	r3, [pc, #20]	; (8008404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	0a9b      	lsrs	r3, r3, #10
 80083f4:	f003 0307 	and.w	r3, r3, #7
 80083f8:	4903      	ldr	r1, [pc, #12]	; (8008408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083fa:	5ccb      	ldrb	r3, [r1, r3]
 80083fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008400:	4618      	mov	r0, r3
 8008402:	bd80      	pop	{r7, pc}
 8008404:	40023800 	.word	0x40023800
 8008408:	0800b548 	.word	0x0800b548

0800840c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e07b      	b.n	8008516 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	2b00      	cmp	r3, #0
 8008424:	d108      	bne.n	8008438 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800842e:	d009      	beq.n	8008444 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	61da      	str	r2, [r3, #28]
 8008436:	e005      	b.n	8008444 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d106      	bne.n	8008464 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f7fc fa56 	bl	8004910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2202      	movs	r2, #2
 8008468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800847a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800848c:	431a      	orrs	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008496:	431a      	orrs	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	f003 0302 	and.w	r3, r3, #2
 80084a0:	431a      	orrs	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	431a      	orrs	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084b4:	431a      	orrs	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084be:	431a      	orrs	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a1b      	ldr	r3, [r3, #32]
 80084c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c8:	ea42 0103 	orr.w	r1, r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	430a      	orrs	r2, r1
 80084da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	0c1b      	lsrs	r3, r3, #16
 80084e2:	f003 0104 	and.w	r1, r3, #4
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ea:	f003 0210 	and.w	r2, r3, #16
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	430a      	orrs	r2, r1
 80084f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	69da      	ldr	r2, [r3, #28]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008504:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b088      	sub	sp, #32
 8008522:	af00      	add	r7, sp, #0
 8008524:	60f8      	str	r0, [r7, #12]
 8008526:	60b9      	str	r1, [r7, #8]
 8008528:	603b      	str	r3, [r7, #0]
 800852a:	4613      	mov	r3, r2
 800852c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008538:	2b01      	cmp	r3, #1
 800853a:	d101      	bne.n	8008540 <HAL_SPI_Transmit+0x22>
 800853c:	2302      	movs	r3, #2
 800853e:	e126      	b.n	800878e <HAL_SPI_Transmit+0x270>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008548:	f7fc fc22 	bl	8004d90 <HAL_GetTick>
 800854c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800854e:	88fb      	ldrh	r3, [r7, #6]
 8008550:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b01      	cmp	r3, #1
 800855c:	d002      	beq.n	8008564 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800855e:	2302      	movs	r3, #2
 8008560:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008562:	e10b      	b.n	800877c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d002      	beq.n	8008570 <HAL_SPI_Transmit+0x52>
 800856a:	88fb      	ldrh	r3, [r7, #6]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d102      	bne.n	8008576 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008574:	e102      	b.n	800877c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2203      	movs	r2, #3
 800857a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	88fa      	ldrh	r2, [r7, #6]
 800858e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	88fa      	ldrh	r2, [r7, #6]
 8008594:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085bc:	d10f      	bne.n	80085de <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e8:	2b40      	cmp	r3, #64	; 0x40
 80085ea:	d007      	beq.n	80085fc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008604:	d14b      	bne.n	800869e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d002      	beq.n	8008614 <HAL_SPI_Transmit+0xf6>
 800860e:	8afb      	ldrh	r3, [r7, #22]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d13e      	bne.n	8008692 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008618:	881a      	ldrh	r2, [r3, #0]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008624:	1c9a      	adds	r2, r3, #2
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800862e:	b29b      	uxth	r3, r3
 8008630:	3b01      	subs	r3, #1
 8008632:	b29a      	uxth	r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008638:	e02b      	b.n	8008692 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f003 0302 	and.w	r3, r3, #2
 8008644:	2b02      	cmp	r3, #2
 8008646:	d112      	bne.n	800866e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864c:	881a      	ldrh	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008658:	1c9a      	adds	r2, r3, #2
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008662:	b29b      	uxth	r3, r3
 8008664:	3b01      	subs	r3, #1
 8008666:	b29a      	uxth	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	86da      	strh	r2, [r3, #54]	; 0x36
 800866c:	e011      	b.n	8008692 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800866e:	f7fc fb8f 	bl	8004d90 <HAL_GetTick>
 8008672:	4602      	mov	r2, r0
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	429a      	cmp	r2, r3
 800867c:	d803      	bhi.n	8008686 <HAL_SPI_Transmit+0x168>
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008684:	d102      	bne.n	800868c <HAL_SPI_Transmit+0x16e>
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d102      	bne.n	8008692 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008690:	e074      	b.n	800877c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008696:	b29b      	uxth	r3, r3
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1ce      	bne.n	800863a <HAL_SPI_Transmit+0x11c>
 800869c:	e04c      	b.n	8008738 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d002      	beq.n	80086ac <HAL_SPI_Transmit+0x18e>
 80086a6:	8afb      	ldrh	r3, [r7, #22]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d140      	bne.n	800872e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	330c      	adds	r3, #12
 80086b6:	7812      	ldrb	r2, [r2, #0]
 80086b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086be:	1c5a      	adds	r2, r3, #1
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	3b01      	subs	r3, #1
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80086d2:	e02c      	b.n	800872e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f003 0302 	and.w	r3, r3, #2
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d113      	bne.n	800870a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	330c      	adds	r3, #12
 80086ec:	7812      	ldrb	r2, [r2, #0]
 80086ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f4:	1c5a      	adds	r2, r3, #1
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086fe:	b29b      	uxth	r3, r3
 8008700:	3b01      	subs	r3, #1
 8008702:	b29a      	uxth	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	86da      	strh	r2, [r3, #54]	; 0x36
 8008708:	e011      	b.n	800872e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800870a:	f7fc fb41 	bl	8004d90 <HAL_GetTick>
 800870e:	4602      	mov	r2, r0
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	429a      	cmp	r2, r3
 8008718:	d803      	bhi.n	8008722 <HAL_SPI_Transmit+0x204>
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008720:	d102      	bne.n	8008728 <HAL_SPI_Transmit+0x20a>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d102      	bne.n	800872e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800872c:	e026      	b.n	800877c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008732:	b29b      	uxth	r3, r3
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1cd      	bne.n	80086d4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008738:	69ba      	ldr	r2, [r7, #24]
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 fbcb 	bl	8008ed8 <SPI_EndRxTxTransaction>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2220      	movs	r2, #32
 800874c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10a      	bne.n	800876c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008756:	2300      	movs	r3, #0
 8008758:	613b      	str	r3, [r7, #16]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	613b      	str	r3, [r7, #16]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	613b      	str	r3, [r7, #16]
 800876a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008770:	2b00      	cmp	r3, #0
 8008772:	d002      	beq.n	800877a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	77fb      	strb	r3, [r7, #31]
 8008778:	e000      	b.n	800877c <HAL_SPI_Transmit+0x25e>
  }

error:
 800877a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800878c:	7ffb      	ldrb	r3, [r7, #31]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3720      	adds	r7, #32
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b088      	sub	sp, #32
 800879a:	af02      	add	r7, sp, #8
 800879c:	60f8      	str	r0, [r7, #12]
 800879e:	60b9      	str	r1, [r7, #8]
 80087a0:	603b      	str	r3, [r7, #0]
 80087a2:	4613      	mov	r3, r2
 80087a4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087b2:	d112      	bne.n	80087da <HAL_SPI_Receive+0x44>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d10e      	bne.n	80087da <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2204      	movs	r2, #4
 80087c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80087c4:	88fa      	ldrh	r2, [r7, #6]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	4613      	mov	r3, r2
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	68b9      	ldr	r1, [r7, #8]
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 f8f1 	bl	80089b8 <HAL_SPI_TransmitReceive>
 80087d6:	4603      	mov	r3, r0
 80087d8:	e0ea      	b.n	80089b0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d101      	bne.n	80087e8 <HAL_SPI_Receive+0x52>
 80087e4:	2302      	movs	r3, #2
 80087e6:	e0e3      	b.n	80089b0 <HAL_SPI_Receive+0x21a>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087f0:	f7fc face 	bl	8004d90 <HAL_GetTick>
 80087f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d002      	beq.n	8008808 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008802:	2302      	movs	r3, #2
 8008804:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008806:	e0ca      	b.n	800899e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d002      	beq.n	8008814 <HAL_SPI_Receive+0x7e>
 800880e:	88fb      	ldrh	r3, [r7, #6]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d102      	bne.n	800881a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008818:	e0c1      	b.n	800899e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2204      	movs	r2, #4
 800881e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	88fa      	ldrh	r2, [r7, #6]
 8008832:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	88fa      	ldrh	r2, [r7, #6]
 8008838:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2200      	movs	r2, #0
 8008844:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008860:	d10f      	bne.n	8008882 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008870:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008880:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800888c:	2b40      	cmp	r3, #64	; 0x40
 800888e:	d007      	beq.n	80088a0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800889e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d162      	bne.n	800896e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80088a8:	e02e      	b.n	8008908 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f003 0301 	and.w	r3, r3, #1
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d115      	bne.n	80088e4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f103 020c 	add.w	r2, r3, #12
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c4:	7812      	ldrb	r2, [r2, #0]
 80088c6:	b2d2      	uxtb	r2, r2
 80088c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ce:	1c5a      	adds	r2, r3, #1
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088d8:	b29b      	uxth	r3, r3
 80088da:	3b01      	subs	r3, #1
 80088dc:	b29a      	uxth	r2, r3
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80088e2:	e011      	b.n	8008908 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088e4:	f7fc fa54 	bl	8004d90 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d803      	bhi.n	80088fc <HAL_SPI_Receive+0x166>
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fa:	d102      	bne.n	8008902 <HAL_SPI_Receive+0x16c>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d102      	bne.n	8008908 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008906:	e04a      	b.n	800899e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800890c:	b29b      	uxth	r3, r3
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1cb      	bne.n	80088aa <HAL_SPI_Receive+0x114>
 8008912:	e031      	b.n	8008978 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f003 0301 	and.w	r3, r3, #1
 800891e:	2b01      	cmp	r3, #1
 8008920:	d113      	bne.n	800894a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68da      	ldr	r2, [r3, #12]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892c:	b292      	uxth	r2, r2
 800892e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008934:	1c9a      	adds	r2, r3, #2
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800893e:	b29b      	uxth	r3, r3
 8008940:	3b01      	subs	r3, #1
 8008942:	b29a      	uxth	r2, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008948:	e011      	b.n	800896e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800894a:	f7fc fa21 	bl	8004d90 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	429a      	cmp	r2, r3
 8008958:	d803      	bhi.n	8008962 <HAL_SPI_Receive+0x1cc>
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008960:	d102      	bne.n	8008968 <HAL_SPI_Receive+0x1d2>
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d102      	bne.n	800896e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800896c:	e017      	b.n	800899e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008972:	b29b      	uxth	r3, r3
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1cd      	bne.n	8008914 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 fa45 	bl	8008e0c <SPI_EndRxTransaction>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d002      	beq.n	800898e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2220      	movs	r2, #32
 800898c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008992:	2b00      	cmp	r3, #0
 8008994:	d002      	beq.n	800899c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	75fb      	strb	r3, [r7, #23]
 800899a:	e000      	b.n	800899e <HAL_SPI_Receive+0x208>
  }

error :
 800899c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80089ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3718      	adds	r7, #24
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b08c      	sub	sp, #48	; 0x30
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80089c6:	2301      	movs	r3, #1
 80089c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d101      	bne.n	80089de <HAL_SPI_TransmitReceive+0x26>
 80089da:	2302      	movs	r3, #2
 80089dc:	e18a      	b.n	8008cf4 <HAL_SPI_TransmitReceive+0x33c>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089e6:	f7fc f9d3 	bl	8004d90 <HAL_GetTick>
 80089ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80089fc:	887b      	ldrh	r3, [r7, #2]
 80089fe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008a00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d00f      	beq.n	8008a28 <HAL_SPI_TransmitReceive+0x70>
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a0e:	d107      	bne.n	8008a20 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d103      	bne.n	8008a20 <HAL_SPI_TransmitReceive+0x68>
 8008a18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a1c:	2b04      	cmp	r3, #4
 8008a1e:	d003      	beq.n	8008a28 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008a20:	2302      	movs	r3, #2
 8008a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008a26:	e15b      	b.n	8008ce0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d005      	beq.n	8008a3a <HAL_SPI_TransmitReceive+0x82>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d002      	beq.n	8008a3a <HAL_SPI_TransmitReceive+0x82>
 8008a34:	887b      	ldrh	r3, [r7, #2]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d103      	bne.n	8008a42 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008a40:	e14e      	b.n	8008ce0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b04      	cmp	r3, #4
 8008a4c:	d003      	beq.n	8008a56 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2205      	movs	r2, #5
 8008a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	887a      	ldrh	r2, [r7, #2]
 8008a66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	887a      	ldrh	r2, [r7, #2]
 8008a6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	887a      	ldrh	r2, [r7, #2]
 8008a78:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	887a      	ldrh	r2, [r7, #2]
 8008a7e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a96:	2b40      	cmp	r3, #64	; 0x40
 8008a98:	d007      	beq.n	8008aaa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008aa8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ab2:	d178      	bne.n	8008ba6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d002      	beq.n	8008ac2 <HAL_SPI_TransmitReceive+0x10a>
 8008abc:	8b7b      	ldrh	r3, [r7, #26]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d166      	bne.n	8008b90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac6:	881a      	ldrh	r2, [r3, #0]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad2:	1c9a      	adds	r2, r3, #2
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ae6:	e053      	b.n	8008b90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	f003 0302 	and.w	r3, r3, #2
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d11b      	bne.n	8008b2e <HAL_SPI_TransmitReceive+0x176>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d016      	beq.n	8008b2e <HAL_SPI_TransmitReceive+0x176>
 8008b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d113      	bne.n	8008b2e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0a:	881a      	ldrh	r2, [r3, #0]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b16:	1c9a      	adds	r2, r3, #2
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	3b01      	subs	r3, #1
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f003 0301 	and.w	r3, r3, #1
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d119      	bne.n	8008b70 <HAL_SPI_TransmitReceive+0x1b8>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d014      	beq.n	8008b70 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68da      	ldr	r2, [r3, #12]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b50:	b292      	uxth	r2, r2
 8008b52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b58:	1c9a      	adds	r2, r3, #2
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	3b01      	subs	r3, #1
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008b70:	f7fc f90e 	bl	8004d90 <HAL_GetTick>
 8008b74:	4602      	mov	r2, r0
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d807      	bhi.n	8008b90 <HAL_SPI_TransmitReceive+0x1d8>
 8008b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b86:	d003      	beq.n	8008b90 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008b8e:	e0a7      	b.n	8008ce0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1a6      	bne.n	8008ae8 <HAL_SPI_TransmitReceive+0x130>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1a1      	bne.n	8008ae8 <HAL_SPI_TransmitReceive+0x130>
 8008ba4:	e07c      	b.n	8008ca0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d002      	beq.n	8008bb4 <HAL_SPI_TransmitReceive+0x1fc>
 8008bae:	8b7b      	ldrh	r3, [r7, #26]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d16b      	bne.n	8008c8c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	330c      	adds	r3, #12
 8008bbe:	7812      	ldrb	r2, [r2, #0]
 8008bc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc6:	1c5a      	adds	r2, r3, #1
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bda:	e057      	b.n	8008c8c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	f003 0302 	and.w	r3, r3, #2
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d11c      	bne.n	8008c24 <HAL_SPI_TransmitReceive+0x26c>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d017      	beq.n	8008c24 <HAL_SPI_TransmitReceive+0x26c>
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d114      	bne.n	8008c24 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	330c      	adds	r3, #12
 8008c04:	7812      	ldrb	r2, [r2, #0]
 8008c06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0c:	1c5a      	adds	r2, r3, #1
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c20:	2300      	movs	r3, #0
 8008c22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d119      	bne.n	8008c66 <HAL_SPI_TransmitReceive+0x2ae>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d014      	beq.n	8008c66 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c46:	b2d2      	uxtb	r2, r2
 8008c48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4e:	1c5a      	adds	r2, r3, #1
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c62:	2301      	movs	r3, #1
 8008c64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008c66:	f7fc f893 	bl	8004d90 <HAL_GetTick>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d803      	bhi.n	8008c7e <HAL_SPI_TransmitReceive+0x2c6>
 8008c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c7c:	d102      	bne.n	8008c84 <HAL_SPI_TransmitReceive+0x2cc>
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d103      	bne.n	8008c8c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008c84:	2303      	movs	r3, #3
 8008c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008c8a:	e029      	b.n	8008ce0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1a2      	bne.n	8008bdc <HAL_SPI_TransmitReceive+0x224>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d19d      	bne.n	8008bdc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ca2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 f917 	bl	8008ed8 <SPI_EndRxTxTransaction>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d006      	beq.n	8008cbe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008cbc:	e010      	b.n	8008ce0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d10b      	bne.n	8008cde <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	617b      	str	r3, [r7, #20]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	617b      	str	r3, [r7, #20]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	617b      	str	r3, [r7, #20]
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	e000      	b.n	8008ce0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008cde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008cf0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3730      	adds	r7, #48	; 0x30
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b088      	sub	sp, #32
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	603b      	str	r3, [r7, #0]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d0c:	f7fc f840 	bl	8004d90 <HAL_GetTick>
 8008d10:	4602      	mov	r2, r0
 8008d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d14:	1a9b      	subs	r3, r3, r2
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	4413      	add	r3, r2
 8008d1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008d1c:	f7fc f838 	bl	8004d90 <HAL_GetTick>
 8008d20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008d22:	4b39      	ldr	r3, [pc, #228]	; (8008e08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	015b      	lsls	r3, r3, #5
 8008d28:	0d1b      	lsrs	r3, r3, #20
 8008d2a:	69fa      	ldr	r2, [r7, #28]
 8008d2c:	fb02 f303 	mul.w	r3, r2, r3
 8008d30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d32:	e054      	b.n	8008dde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3a:	d050      	beq.n	8008dde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d3c:	f7fc f828 	bl	8004d90 <HAL_GetTick>
 8008d40:	4602      	mov	r2, r0
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	69fa      	ldr	r2, [r7, #28]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d902      	bls.n	8008d52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d13d      	bne.n	8008dce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008d60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d6a:	d111      	bne.n	8008d90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d74:	d004      	beq.n	8008d80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d7e:	d107      	bne.n	8008d90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d98:	d10f      	bne.n	8008dba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008db8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e017      	b.n	8008dfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d101      	bne.n	8008dd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	689a      	ldr	r2, [r3, #8]
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	4013      	ands	r3, r2
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	bf0c      	ite	eq
 8008dee:	2301      	moveq	r3, #1
 8008df0:	2300      	movne	r3, #0
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	461a      	mov	r2, r3
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d19b      	bne.n	8008d34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3720      	adds	r7, #32
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	20000388 	.word	0x20000388

08008e0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b086      	sub	sp, #24
 8008e10:	af02      	add	r7, sp, #8
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e20:	d111      	bne.n	8008e46 <SPI_EndRxTransaction+0x3a>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e2a:	d004      	beq.n	8008e36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e34:	d107      	bne.n	8008e46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e44:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e4e:	d12a      	bne.n	8008ea6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e58:	d012      	beq.n	8008e80 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	2200      	movs	r2, #0
 8008e62:	2180      	movs	r1, #128	; 0x80
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f7ff ff49 	bl	8008cfc <SPI_WaitFlagStateUntilTimeout>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d02d      	beq.n	8008ecc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e74:	f043 0220 	orr.w	r2, r3, #32
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	e026      	b.n	8008ece <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	9300      	str	r3, [sp, #0]
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2200      	movs	r2, #0
 8008e88:	2101      	movs	r1, #1
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f7ff ff36 	bl	8008cfc <SPI_WaitFlagStateUntilTimeout>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d01a      	beq.n	8008ecc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e9a:	f043 0220 	orr.w	r2, r3, #32
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	e013      	b.n	8008ece <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2200      	movs	r2, #0
 8008eae:	2101      	movs	r1, #1
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f7ff ff23 	bl	8008cfc <SPI_WaitFlagStateUntilTimeout>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d007      	beq.n	8008ecc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ec0:	f043 0220 	orr.w	r2, r3, #32
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e000      	b.n	8008ece <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
	...

08008ed8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b088      	sub	sp, #32
 8008edc:	af02      	add	r7, sp, #8
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008ee4:	4b1b      	ldr	r3, [pc, #108]	; (8008f54 <SPI_EndRxTxTransaction+0x7c>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a1b      	ldr	r2, [pc, #108]	; (8008f58 <SPI_EndRxTxTransaction+0x80>)
 8008eea:	fba2 2303 	umull	r2, r3, r2, r3
 8008eee:	0d5b      	lsrs	r3, r3, #21
 8008ef0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ef4:	fb02 f303 	mul.w	r3, r2, r3
 8008ef8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f02:	d112      	bne.n	8008f2a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	2180      	movs	r1, #128	; 0x80
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f7ff fef4 	bl	8008cfc <SPI_WaitFlagStateUntilTimeout>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d016      	beq.n	8008f48 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f1e:	f043 0220 	orr.w	r2, r3, #32
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008f26:	2303      	movs	r3, #3
 8008f28:	e00f      	b.n	8008f4a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00a      	beq.n	8008f46 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	3b01      	subs	r3, #1
 8008f34:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f40:	2b80      	cmp	r3, #128	; 0x80
 8008f42:	d0f2      	beq.n	8008f2a <SPI_EndRxTxTransaction+0x52>
 8008f44:	e000      	b.n	8008f48 <SPI_EndRxTxTransaction+0x70>
        break;
 8008f46:	bf00      	nop
  }

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3718      	adds	r7, #24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	20000388 	.word	0x20000388
 8008f58:	165e9f81 	.word	0x165e9f81

08008f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d101      	bne.n	8008f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e041      	b.n	8008ff2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d106      	bne.n	8008f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7fb fdbe 	bl	8004b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	3304      	adds	r3, #4
 8008f98:	4619      	mov	r1, r3
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	f000 fd54 	bl	8009a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
	...

08008ffc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b01      	cmp	r3, #1
 800900e:	d001      	beq.n	8009014 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e03c      	b.n	800908e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2202      	movs	r2, #2
 8009018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a1e      	ldr	r2, [pc, #120]	; (800909c <HAL_TIM_Base_Start+0xa0>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d018      	beq.n	8009058 <HAL_TIM_Base_Start+0x5c>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800902e:	d013      	beq.n	8009058 <HAL_TIM_Base_Start+0x5c>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a1a      	ldr	r2, [pc, #104]	; (80090a0 <HAL_TIM_Base_Start+0xa4>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d00e      	beq.n	8009058 <HAL_TIM_Base_Start+0x5c>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a19      	ldr	r2, [pc, #100]	; (80090a4 <HAL_TIM_Base_Start+0xa8>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d009      	beq.n	8009058 <HAL_TIM_Base_Start+0x5c>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a17      	ldr	r2, [pc, #92]	; (80090a8 <HAL_TIM_Base_Start+0xac>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d004      	beq.n	8009058 <HAL_TIM_Base_Start+0x5c>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a16      	ldr	r2, [pc, #88]	; (80090ac <HAL_TIM_Base_Start+0xb0>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d111      	bne.n	800907c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f003 0307 	and.w	r3, r3, #7
 8009062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2b06      	cmp	r3, #6
 8009068:	d010      	beq.n	800908c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f042 0201 	orr.w	r2, r2, #1
 8009078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800907a:	e007      	b.n	800908c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f042 0201 	orr.w	r2, r2, #1
 800908a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3714      	adds	r7, #20
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	40010000 	.word	0x40010000
 80090a0:	40000400 	.word	0x40000400
 80090a4:	40000800 	.word	0x40000800
 80090a8:	40000c00 	.word	0x40000c00
 80090ac:	40014000 	.word	0x40014000

080090b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d001      	beq.n	80090c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e044      	b.n	8009152 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2202      	movs	r2, #2
 80090cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68da      	ldr	r2, [r3, #12]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f042 0201 	orr.w	r2, r2, #1
 80090de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a1e      	ldr	r2, [pc, #120]	; (8009160 <HAL_TIM_Base_Start_IT+0xb0>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d018      	beq.n	800911c <HAL_TIM_Base_Start_IT+0x6c>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090f2:	d013      	beq.n	800911c <HAL_TIM_Base_Start_IT+0x6c>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a1a      	ldr	r2, [pc, #104]	; (8009164 <HAL_TIM_Base_Start_IT+0xb4>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d00e      	beq.n	800911c <HAL_TIM_Base_Start_IT+0x6c>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a19      	ldr	r2, [pc, #100]	; (8009168 <HAL_TIM_Base_Start_IT+0xb8>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d009      	beq.n	800911c <HAL_TIM_Base_Start_IT+0x6c>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a17      	ldr	r2, [pc, #92]	; (800916c <HAL_TIM_Base_Start_IT+0xbc>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d004      	beq.n	800911c <HAL_TIM_Base_Start_IT+0x6c>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a16      	ldr	r2, [pc, #88]	; (8009170 <HAL_TIM_Base_Start_IT+0xc0>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d111      	bne.n	8009140 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f003 0307 	and.w	r3, r3, #7
 8009126:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2b06      	cmp	r3, #6
 800912c:	d010      	beq.n	8009150 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f042 0201 	orr.w	r2, r2, #1
 800913c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800913e:	e007      	b.n	8009150 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f042 0201 	orr.w	r2, r2, #1
 800914e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3714      	adds	r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	40010000 	.word	0x40010000
 8009164:	40000400 	.word	0x40000400
 8009168:	40000800 	.word	0x40000800
 800916c:	40000c00 	.word	0x40000c00
 8009170:	40014000 	.word	0x40014000

08009174 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d101      	bne.n	8009186 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e041      	b.n	800920a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d106      	bne.n	80091a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f839 	bl	8009212 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2202      	movs	r2, #2
 80091a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	3304      	adds	r3, #4
 80091b0:	4619      	mov	r1, r3
 80091b2:	4610      	mov	r0, r2
 80091b4:	f000 fc48 	bl	8009a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009212:	b480      	push	{r7}
 8009214:	b083      	sub	sp, #12
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800921a:	bf00      	nop
 800921c:	370c      	adds	r7, #12
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
	...

08009228 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d109      	bne.n	800924c <HAL_TIM_PWM_Start+0x24>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800923e:	b2db      	uxtb	r3, r3
 8009240:	2b01      	cmp	r3, #1
 8009242:	bf14      	ite	ne
 8009244:	2301      	movne	r3, #1
 8009246:	2300      	moveq	r3, #0
 8009248:	b2db      	uxtb	r3, r3
 800924a:	e022      	b.n	8009292 <HAL_TIM_PWM_Start+0x6a>
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	2b04      	cmp	r3, #4
 8009250:	d109      	bne.n	8009266 <HAL_TIM_PWM_Start+0x3e>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009258:	b2db      	uxtb	r3, r3
 800925a:	2b01      	cmp	r3, #1
 800925c:	bf14      	ite	ne
 800925e:	2301      	movne	r3, #1
 8009260:	2300      	moveq	r3, #0
 8009262:	b2db      	uxtb	r3, r3
 8009264:	e015      	b.n	8009292 <HAL_TIM_PWM_Start+0x6a>
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	2b08      	cmp	r3, #8
 800926a:	d109      	bne.n	8009280 <HAL_TIM_PWM_Start+0x58>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009272:	b2db      	uxtb	r3, r3
 8009274:	2b01      	cmp	r3, #1
 8009276:	bf14      	ite	ne
 8009278:	2301      	movne	r3, #1
 800927a:	2300      	moveq	r3, #0
 800927c:	b2db      	uxtb	r3, r3
 800927e:	e008      	b.n	8009292 <HAL_TIM_PWM_Start+0x6a>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b01      	cmp	r3, #1
 800928a:	bf14      	ite	ne
 800928c:	2301      	movne	r3, #1
 800928e:	2300      	moveq	r3, #0
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	e068      	b.n	800936c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d104      	bne.n	80092aa <HAL_TIM_PWM_Start+0x82>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2202      	movs	r2, #2
 80092a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092a8:	e013      	b.n	80092d2 <HAL_TIM_PWM_Start+0xaa>
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	2b04      	cmp	r3, #4
 80092ae:	d104      	bne.n	80092ba <HAL_TIM_PWM_Start+0x92>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2202      	movs	r2, #2
 80092b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092b8:	e00b      	b.n	80092d2 <HAL_TIM_PWM_Start+0xaa>
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	2b08      	cmp	r3, #8
 80092be:	d104      	bne.n	80092ca <HAL_TIM_PWM_Start+0xa2>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2202      	movs	r2, #2
 80092c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092c8:	e003      	b.n	80092d2 <HAL_TIM_PWM_Start+0xaa>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2202      	movs	r2, #2
 80092ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2201      	movs	r2, #1
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	4618      	mov	r0, r3
 80092dc:	f000 fe5a 	bl	8009f94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a23      	ldr	r2, [pc, #140]	; (8009374 <HAL_TIM_PWM_Start+0x14c>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d107      	bne.n	80092fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80092f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a1d      	ldr	r2, [pc, #116]	; (8009374 <HAL_TIM_PWM_Start+0x14c>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d018      	beq.n	8009336 <HAL_TIM_PWM_Start+0x10e>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800930c:	d013      	beq.n	8009336 <HAL_TIM_PWM_Start+0x10e>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a19      	ldr	r2, [pc, #100]	; (8009378 <HAL_TIM_PWM_Start+0x150>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d00e      	beq.n	8009336 <HAL_TIM_PWM_Start+0x10e>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a17      	ldr	r2, [pc, #92]	; (800937c <HAL_TIM_PWM_Start+0x154>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d009      	beq.n	8009336 <HAL_TIM_PWM_Start+0x10e>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a16      	ldr	r2, [pc, #88]	; (8009380 <HAL_TIM_PWM_Start+0x158>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d004      	beq.n	8009336 <HAL_TIM_PWM_Start+0x10e>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a14      	ldr	r2, [pc, #80]	; (8009384 <HAL_TIM_PWM_Start+0x15c>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d111      	bne.n	800935a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f003 0307 	and.w	r3, r3, #7
 8009340:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2b06      	cmp	r3, #6
 8009346:	d010      	beq.n	800936a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f042 0201 	orr.w	r2, r2, #1
 8009356:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009358:	e007      	b.n	800936a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f042 0201 	orr.w	r2, r2, #1
 8009368:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	40010000 	.word	0x40010000
 8009378:	40000400 	.word	0x40000400
 800937c:	40000800 	.word	0x40000800
 8009380:	40000c00 	.word	0x40000c00
 8009384:	40014000 	.word	0x40014000

08009388 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b086      	sub	sp, #24
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d101      	bne.n	800939c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	e097      	b.n	80094cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d106      	bne.n	80093b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7fb fb2b 	bl	8004a0c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2202      	movs	r2, #2
 80093ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	6812      	ldr	r2, [r2, #0]
 80093c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093cc:	f023 0307 	bic.w	r3, r3, #7
 80093d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	3304      	adds	r3, #4
 80093da:	4619      	mov	r1, r3
 80093dc:	4610      	mov	r0, r2
 80093de:	f000 fb33 	bl	8009a48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	699b      	ldr	r3, [r3, #24]
 80093f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6a1b      	ldr	r3, [r3, #32]
 80093f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	4313      	orrs	r3, r2
 8009402:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800940a:	f023 0303 	bic.w	r3, r3, #3
 800940e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	689a      	ldr	r2, [r3, #8]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	021b      	lsls	r3, r3, #8
 800941a:	4313      	orrs	r3, r2
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	4313      	orrs	r3, r2
 8009420:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009428:	f023 030c 	bic.w	r3, r3, #12
 800942c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009434:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009438:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	68da      	ldr	r2, [r3, #12]
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	69db      	ldr	r3, [r3, #28]
 8009442:	021b      	lsls	r3, r3, #8
 8009444:	4313      	orrs	r3, r2
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	4313      	orrs	r3, r2
 800944a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	011a      	lsls	r2, r3, #4
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	031b      	lsls	r3, r3, #12
 8009458:	4313      	orrs	r3, r2
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	4313      	orrs	r3, r2
 800945e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009466:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800946e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	011b      	lsls	r3, r3, #4
 800947a:	4313      	orrs	r3, r2
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	4313      	orrs	r3, r2
 8009480:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	693a      	ldr	r2, [r7, #16]
 8009490:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3718      	adds	r7, #24
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	f003 0302 	and.w	r3, r3, #2
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d122      	bne.n	8009530 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	f003 0302 	and.w	r3, r3, #2
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d11b      	bne.n	8009530 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f06f 0202 	mvn.w	r2, #2
 8009500:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	f003 0303 	and.w	r3, r3, #3
 8009512:	2b00      	cmp	r3, #0
 8009514:	d003      	beq.n	800951e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fa77 	bl	8009a0a <HAL_TIM_IC_CaptureCallback>
 800951c:	e005      	b.n	800952a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fa69 	bl	80099f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fa7a 	bl	8009a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	f003 0304 	and.w	r3, r3, #4
 800953a:	2b04      	cmp	r3, #4
 800953c:	d122      	bne.n	8009584 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	f003 0304 	and.w	r3, r3, #4
 8009548:	2b04      	cmp	r3, #4
 800954a:	d11b      	bne.n	8009584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f06f 0204 	mvn.w	r2, #4
 8009554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2202      	movs	r2, #2
 800955a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009566:	2b00      	cmp	r3, #0
 8009568:	d003      	beq.n	8009572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fa4d 	bl	8009a0a <HAL_TIM_IC_CaptureCallback>
 8009570:	e005      	b.n	800957e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fa3f 	bl	80099f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fa50 	bl	8009a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	f003 0308 	and.w	r3, r3, #8
 800958e:	2b08      	cmp	r3, #8
 8009590:	d122      	bne.n	80095d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	f003 0308 	and.w	r3, r3, #8
 800959c:	2b08      	cmp	r3, #8
 800959e:	d11b      	bne.n	80095d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f06f 0208 	mvn.w	r2, #8
 80095a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2204      	movs	r2, #4
 80095ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	f003 0303 	and.w	r3, r3, #3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d003      	beq.n	80095c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fa23 	bl	8009a0a <HAL_TIM_IC_CaptureCallback>
 80095c4:	e005      	b.n	80095d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 fa15 	bl	80099f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fa26 	bl	8009a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	f003 0310 	and.w	r3, r3, #16
 80095e2:	2b10      	cmp	r3, #16
 80095e4:	d122      	bne.n	800962c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	f003 0310 	and.w	r3, r3, #16
 80095f0:	2b10      	cmp	r3, #16
 80095f2:	d11b      	bne.n	800962c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f06f 0210 	mvn.w	r2, #16
 80095fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2208      	movs	r2, #8
 8009602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	69db      	ldr	r3, [r3, #28]
 800960a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800960e:	2b00      	cmp	r3, #0
 8009610:	d003      	beq.n	800961a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f9f9 	bl	8009a0a <HAL_TIM_IC_CaptureCallback>
 8009618:	e005      	b.n	8009626 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f9eb 	bl	80099f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f9fc 	bl	8009a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b01      	cmp	r3, #1
 8009638:	d10e      	bne.n	8009658 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	f003 0301 	and.w	r3, r3, #1
 8009644:	2b01      	cmp	r3, #1
 8009646:	d107      	bne.n	8009658 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f06f 0201 	mvn.w	r2, #1
 8009650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7f7 ff24 	bl	80014a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009662:	2b80      	cmp	r3, #128	; 0x80
 8009664:	d10e      	bne.n	8009684 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009670:	2b80      	cmp	r3, #128	; 0x80
 8009672:	d107      	bne.n	8009684 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800967c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fd26 	bl	800a0d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800968e:	2b40      	cmp	r3, #64	; 0x40
 8009690:	d10e      	bne.n	80096b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800969c:	2b40      	cmp	r3, #64	; 0x40
 800969e:	d107      	bne.n	80096b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80096a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f9c1 	bl	8009a32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	f003 0320 	and.w	r3, r3, #32
 80096ba:	2b20      	cmp	r3, #32
 80096bc:	d10e      	bne.n	80096dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	f003 0320 	and.w	r3, r3, #32
 80096c8:	2b20      	cmp	r3, #32
 80096ca:	d107      	bne.n	80096dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f06f 0220 	mvn.w	r2, #32
 80096d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fcf0 	bl	800a0bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80096dc:	bf00      	nop
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096f0:	2300      	movs	r3, #0
 80096f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d101      	bne.n	8009702 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80096fe:	2302      	movs	r3, #2
 8009700:	e0ae      	b.n	8009860 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2b0c      	cmp	r3, #12
 800970e:	f200 809f 	bhi.w	8009850 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009712:	a201      	add	r2, pc, #4	; (adr r2, 8009718 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009718:	0800974d 	.word	0x0800974d
 800971c:	08009851 	.word	0x08009851
 8009720:	08009851 	.word	0x08009851
 8009724:	08009851 	.word	0x08009851
 8009728:	0800978d 	.word	0x0800978d
 800972c:	08009851 	.word	0x08009851
 8009730:	08009851 	.word	0x08009851
 8009734:	08009851 	.word	0x08009851
 8009738:	080097cf 	.word	0x080097cf
 800973c:	08009851 	.word	0x08009851
 8009740:	08009851 	.word	0x08009851
 8009744:	08009851 	.word	0x08009851
 8009748:	0800980f 	.word	0x0800980f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	68b9      	ldr	r1, [r7, #8]
 8009752:	4618      	mov	r0, r3
 8009754:	f000 f9f8 	bl	8009b48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	699a      	ldr	r2, [r3, #24]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f042 0208 	orr.w	r2, r2, #8
 8009766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	699a      	ldr	r2, [r3, #24]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f022 0204 	bic.w	r2, r2, #4
 8009776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6999      	ldr	r1, [r3, #24]
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	691a      	ldr	r2, [r3, #16]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	430a      	orrs	r2, r1
 8009788:	619a      	str	r2, [r3, #24]
      break;
 800978a:	e064      	b.n	8009856 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68b9      	ldr	r1, [r7, #8]
 8009792:	4618      	mov	r0, r3
 8009794:	f000 fa3e 	bl	8009c14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	699a      	ldr	r2, [r3, #24]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	699a      	ldr	r2, [r3, #24]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6999      	ldr	r1, [r3, #24]
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	021a      	lsls	r2, r3, #8
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	430a      	orrs	r2, r1
 80097ca:	619a      	str	r2, [r3, #24]
      break;
 80097cc:	e043      	b.n	8009856 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68b9      	ldr	r1, [r7, #8]
 80097d4:	4618      	mov	r0, r3
 80097d6:	f000 fa89 	bl	8009cec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	69da      	ldr	r2, [r3, #28]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f042 0208 	orr.w	r2, r2, #8
 80097e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	69da      	ldr	r2, [r3, #28]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f022 0204 	bic.w	r2, r2, #4
 80097f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	69d9      	ldr	r1, [r3, #28]
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	691a      	ldr	r2, [r3, #16]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	430a      	orrs	r2, r1
 800980a:	61da      	str	r2, [r3, #28]
      break;
 800980c:	e023      	b.n	8009856 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68b9      	ldr	r1, [r7, #8]
 8009814:	4618      	mov	r0, r3
 8009816:	f000 fad3 	bl	8009dc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	69da      	ldr	r2, [r3, #28]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009828:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	69da      	ldr	r2, [r3, #28]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	69d9      	ldr	r1, [r3, #28]
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	021a      	lsls	r2, r3, #8
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	430a      	orrs	r2, r1
 800984c:	61da      	str	r2, [r3, #28]
      break;
 800984e:	e002      	b.n	8009856 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	75fb      	strb	r3, [r7, #23]
      break;
 8009854:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800985e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3718      	adds	r7, #24
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009872:	2300      	movs	r3, #0
 8009874:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800987c:	2b01      	cmp	r3, #1
 800987e:	d101      	bne.n	8009884 <HAL_TIM_ConfigClockSource+0x1c>
 8009880:	2302      	movs	r3, #2
 8009882:	e0b4      	b.n	80099ee <HAL_TIM_ConfigClockSource+0x186>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2202      	movs	r2, #2
 8009890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80098a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098bc:	d03e      	beq.n	800993c <HAL_TIM_ConfigClockSource+0xd4>
 80098be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098c2:	f200 8087 	bhi.w	80099d4 <HAL_TIM_ConfigClockSource+0x16c>
 80098c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098ca:	f000 8086 	beq.w	80099da <HAL_TIM_ConfigClockSource+0x172>
 80098ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098d2:	d87f      	bhi.n	80099d4 <HAL_TIM_ConfigClockSource+0x16c>
 80098d4:	2b70      	cmp	r3, #112	; 0x70
 80098d6:	d01a      	beq.n	800990e <HAL_TIM_ConfigClockSource+0xa6>
 80098d8:	2b70      	cmp	r3, #112	; 0x70
 80098da:	d87b      	bhi.n	80099d4 <HAL_TIM_ConfigClockSource+0x16c>
 80098dc:	2b60      	cmp	r3, #96	; 0x60
 80098de:	d050      	beq.n	8009982 <HAL_TIM_ConfigClockSource+0x11a>
 80098e0:	2b60      	cmp	r3, #96	; 0x60
 80098e2:	d877      	bhi.n	80099d4 <HAL_TIM_ConfigClockSource+0x16c>
 80098e4:	2b50      	cmp	r3, #80	; 0x50
 80098e6:	d03c      	beq.n	8009962 <HAL_TIM_ConfigClockSource+0xfa>
 80098e8:	2b50      	cmp	r3, #80	; 0x50
 80098ea:	d873      	bhi.n	80099d4 <HAL_TIM_ConfigClockSource+0x16c>
 80098ec:	2b40      	cmp	r3, #64	; 0x40
 80098ee:	d058      	beq.n	80099a2 <HAL_TIM_ConfigClockSource+0x13a>
 80098f0:	2b40      	cmp	r3, #64	; 0x40
 80098f2:	d86f      	bhi.n	80099d4 <HAL_TIM_ConfigClockSource+0x16c>
 80098f4:	2b30      	cmp	r3, #48	; 0x30
 80098f6:	d064      	beq.n	80099c2 <HAL_TIM_ConfigClockSource+0x15a>
 80098f8:	2b30      	cmp	r3, #48	; 0x30
 80098fa:	d86b      	bhi.n	80099d4 <HAL_TIM_ConfigClockSource+0x16c>
 80098fc:	2b20      	cmp	r3, #32
 80098fe:	d060      	beq.n	80099c2 <HAL_TIM_ConfigClockSource+0x15a>
 8009900:	2b20      	cmp	r3, #32
 8009902:	d867      	bhi.n	80099d4 <HAL_TIM_ConfigClockSource+0x16c>
 8009904:	2b00      	cmp	r3, #0
 8009906:	d05c      	beq.n	80099c2 <HAL_TIM_ConfigClockSource+0x15a>
 8009908:	2b10      	cmp	r3, #16
 800990a:	d05a      	beq.n	80099c2 <HAL_TIM_ConfigClockSource+0x15a>
 800990c:	e062      	b.n	80099d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6818      	ldr	r0, [r3, #0]
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	6899      	ldr	r1, [r3, #8]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	685a      	ldr	r2, [r3, #4]
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	f000 fb19 	bl	8009f54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009930:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68ba      	ldr	r2, [r7, #8]
 8009938:	609a      	str	r2, [r3, #8]
      break;
 800993a:	e04f      	b.n	80099dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6818      	ldr	r0, [r3, #0]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	6899      	ldr	r1, [r3, #8]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	685a      	ldr	r2, [r3, #4]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	f000 fb02 	bl	8009f54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	689a      	ldr	r2, [r3, #8]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800995e:	609a      	str	r2, [r3, #8]
      break;
 8009960:	e03c      	b.n	80099dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6818      	ldr	r0, [r3, #0]
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	6859      	ldr	r1, [r3, #4]
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	461a      	mov	r2, r3
 8009970:	f000 fa76 	bl	8009e60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2150      	movs	r1, #80	; 0x50
 800997a:	4618      	mov	r0, r3
 800997c:	f000 facf 	bl	8009f1e <TIM_ITRx_SetConfig>
      break;
 8009980:	e02c      	b.n	80099dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6818      	ldr	r0, [r3, #0]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	6859      	ldr	r1, [r3, #4]
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	461a      	mov	r2, r3
 8009990:	f000 fa95 	bl	8009ebe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2160      	movs	r1, #96	; 0x60
 800999a:	4618      	mov	r0, r3
 800999c:	f000 fabf 	bl	8009f1e <TIM_ITRx_SetConfig>
      break;
 80099a0:	e01c      	b.n	80099dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6818      	ldr	r0, [r3, #0]
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	6859      	ldr	r1, [r3, #4]
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	461a      	mov	r2, r3
 80099b0:	f000 fa56 	bl	8009e60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2140      	movs	r1, #64	; 0x40
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 faaf 	bl	8009f1e <TIM_ITRx_SetConfig>
      break;
 80099c0:	e00c      	b.n	80099dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4619      	mov	r1, r3
 80099cc:	4610      	mov	r0, r2
 80099ce:	f000 faa6 	bl	8009f1e <TIM_ITRx_SetConfig>
      break;
 80099d2:	e003      	b.n	80099dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	73fb      	strb	r3, [r7, #15]
      break;
 80099d8:	e000      	b.n	80099dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80099da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099f6:	b480      	push	{r7}
 80099f8:	b083      	sub	sp, #12
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80099fe:	bf00      	nop
 8009a00:	370c      	adds	r7, #12
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b083      	sub	sp, #12
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a12:	bf00      	nop
 8009a14:	370c      	adds	r7, #12
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr

08009a1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	b083      	sub	sp, #12
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a26:	bf00      	nop
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b083      	sub	sp, #12
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a3a:	bf00      	nop
 8009a3c:	370c      	adds	r7, #12
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
	...

08009a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a34      	ldr	r2, [pc, #208]	; (8009b2c <TIM_Base_SetConfig+0xe4>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d00f      	beq.n	8009a80 <TIM_Base_SetConfig+0x38>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a66:	d00b      	beq.n	8009a80 <TIM_Base_SetConfig+0x38>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a31      	ldr	r2, [pc, #196]	; (8009b30 <TIM_Base_SetConfig+0xe8>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d007      	beq.n	8009a80 <TIM_Base_SetConfig+0x38>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a30      	ldr	r2, [pc, #192]	; (8009b34 <TIM_Base_SetConfig+0xec>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d003      	beq.n	8009a80 <TIM_Base_SetConfig+0x38>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a2f      	ldr	r2, [pc, #188]	; (8009b38 <TIM_Base_SetConfig+0xf0>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d108      	bne.n	8009a92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a25      	ldr	r2, [pc, #148]	; (8009b2c <TIM_Base_SetConfig+0xe4>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d01b      	beq.n	8009ad2 <TIM_Base_SetConfig+0x8a>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aa0:	d017      	beq.n	8009ad2 <TIM_Base_SetConfig+0x8a>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a22      	ldr	r2, [pc, #136]	; (8009b30 <TIM_Base_SetConfig+0xe8>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d013      	beq.n	8009ad2 <TIM_Base_SetConfig+0x8a>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a21      	ldr	r2, [pc, #132]	; (8009b34 <TIM_Base_SetConfig+0xec>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d00f      	beq.n	8009ad2 <TIM_Base_SetConfig+0x8a>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a20      	ldr	r2, [pc, #128]	; (8009b38 <TIM_Base_SetConfig+0xf0>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d00b      	beq.n	8009ad2 <TIM_Base_SetConfig+0x8a>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4a1f      	ldr	r2, [pc, #124]	; (8009b3c <TIM_Base_SetConfig+0xf4>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d007      	beq.n	8009ad2 <TIM_Base_SetConfig+0x8a>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a1e      	ldr	r2, [pc, #120]	; (8009b40 <TIM_Base_SetConfig+0xf8>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d003      	beq.n	8009ad2 <TIM_Base_SetConfig+0x8a>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a1d      	ldr	r2, [pc, #116]	; (8009b44 <TIM_Base_SetConfig+0xfc>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d108      	bne.n	8009ae4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	695b      	ldr	r3, [r3, #20]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	689a      	ldr	r2, [r3, #8]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4a08      	ldr	r2, [pc, #32]	; (8009b2c <TIM_Base_SetConfig+0xe4>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d103      	bne.n	8009b18 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	691a      	ldr	r2, [r3, #16]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	615a      	str	r2, [r3, #20]
}
 8009b1e:	bf00      	nop
 8009b20:	3714      	adds	r7, #20
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	40010000 	.word	0x40010000
 8009b30:	40000400 	.word	0x40000400
 8009b34:	40000800 	.word	0x40000800
 8009b38:	40000c00 	.word	0x40000c00
 8009b3c:	40014000 	.word	0x40014000
 8009b40:	40014400 	.word	0x40014400
 8009b44:	40014800 	.word	0x40014800

08009b48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b087      	sub	sp, #28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a1b      	ldr	r3, [r3, #32]
 8009b56:	f023 0201 	bic.w	r2, r3, #1
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f023 0303 	bic.w	r3, r3, #3
 8009b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	f023 0302 	bic.w	r3, r3, #2
 8009b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a1c      	ldr	r2, [pc, #112]	; (8009c10 <TIM_OC1_SetConfig+0xc8>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d10c      	bne.n	8009bbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	f023 0308 	bic.w	r3, r3, #8
 8009baa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	697a      	ldr	r2, [r7, #20]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	f023 0304 	bic.w	r3, r3, #4
 8009bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	4a13      	ldr	r2, [pc, #76]	; (8009c10 <TIM_OC1_SetConfig+0xc8>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d111      	bne.n	8009bea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	695b      	ldr	r3, [r3, #20]
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	699b      	ldr	r3, [r3, #24]
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	693a      	ldr	r2, [r7, #16]
 8009bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	685a      	ldr	r2, [r3, #4]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	621a      	str	r2, [r3, #32]
}
 8009c04:	bf00      	nop
 8009c06:	371c      	adds	r7, #28
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	40010000 	.word	0x40010000

08009c14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	f023 0210 	bic.w	r2, r3, #16
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a1b      	ldr	r3, [r3, #32]
 8009c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	021b      	lsls	r3, r3, #8
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	f023 0320 	bic.w	r3, r3, #32
 8009c5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	011b      	lsls	r3, r3, #4
 8009c66:	697a      	ldr	r2, [r7, #20]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a1e      	ldr	r2, [pc, #120]	; (8009ce8 <TIM_OC2_SetConfig+0xd4>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d10d      	bne.n	8009c90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	011b      	lsls	r3, r3, #4
 8009c82:	697a      	ldr	r2, [r7, #20]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a15      	ldr	r2, [pc, #84]	; (8009ce8 <TIM_OC2_SetConfig+0xd4>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d113      	bne.n	8009cc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	695b      	ldr	r3, [r3, #20]
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	693a      	ldr	r2, [r7, #16]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	699b      	ldr	r3, [r3, #24]
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	693a      	ldr	r2, [r7, #16]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	693a      	ldr	r2, [r7, #16]
 8009cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	621a      	str	r2, [r3, #32]
}
 8009cda:	bf00      	nop
 8009cdc:	371c      	adds	r7, #28
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop
 8009ce8:	40010000 	.word	0x40010000

08009cec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
 8009cfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a1b      	ldr	r3, [r3, #32]
 8009d06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	69db      	ldr	r3, [r3, #28]
 8009d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f023 0303 	bic.w	r3, r3, #3
 8009d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	021b      	lsls	r3, r3, #8
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a1d      	ldr	r2, [pc, #116]	; (8009dbc <TIM_OC3_SetConfig+0xd0>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d10d      	bne.n	8009d66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	021b      	lsls	r3, r3, #8
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a14      	ldr	r2, [pc, #80]	; (8009dbc <TIM_OC3_SetConfig+0xd0>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d113      	bne.n	8009d96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	011b      	lsls	r3, r3, #4
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	699b      	ldr	r3, [r3, #24]
 8009d8e:	011b      	lsls	r3, r3, #4
 8009d90:	693a      	ldr	r2, [r7, #16]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	693a      	ldr	r2, [r7, #16]
 8009d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	685a      	ldr	r2, [r3, #4]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	697a      	ldr	r2, [r7, #20]
 8009dae:	621a      	str	r2, [r3, #32]
}
 8009db0:	bf00      	nop
 8009db2:	371c      	adds	r7, #28
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	40010000 	.word	0x40010000

08009dc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b087      	sub	sp, #28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a1b      	ldr	r3, [r3, #32]
 8009dda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	69db      	ldr	r3, [r3, #28]
 8009de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	021b      	lsls	r3, r3, #8
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	031b      	lsls	r3, r3, #12
 8009e12:	693a      	ldr	r2, [r7, #16]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a10      	ldr	r2, [pc, #64]	; (8009e5c <TIM_OC4_SetConfig+0x9c>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d109      	bne.n	8009e34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	695b      	ldr	r3, [r3, #20]
 8009e2c:	019b      	lsls	r3, r3, #6
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	697a      	ldr	r2, [r7, #20]
 8009e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	685a      	ldr	r2, [r3, #4]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	621a      	str	r2, [r3, #32]
}
 8009e4e:	bf00      	nop
 8009e50:	371c      	adds	r7, #28
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	40010000 	.word	0x40010000

08009e60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b087      	sub	sp, #28
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6a1b      	ldr	r3, [r3, #32]
 8009e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6a1b      	ldr	r3, [r3, #32]
 8009e76:	f023 0201 	bic.w	r2, r3, #1
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	699b      	ldr	r3, [r3, #24]
 8009e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	011b      	lsls	r3, r3, #4
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	f023 030a 	bic.w	r3, r3, #10
 8009e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e9e:	697a      	ldr	r2, [r7, #20]
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	697a      	ldr	r2, [r7, #20]
 8009eb0:	621a      	str	r2, [r3, #32]
}
 8009eb2:	bf00      	nop
 8009eb4:	371c      	adds	r7, #28
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b087      	sub	sp, #28
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	60f8      	str	r0, [r7, #12]
 8009ec6:	60b9      	str	r1, [r7, #8]
 8009ec8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6a1b      	ldr	r3, [r3, #32]
 8009ece:	f023 0210 	bic.w	r2, r3, #16
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	699b      	ldr	r3, [r3, #24]
 8009eda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6a1b      	ldr	r3, [r3, #32]
 8009ee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ee8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	031b      	lsls	r3, r3, #12
 8009eee:	697a      	ldr	r2, [r7, #20]
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009efa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	011b      	lsls	r3, r3, #4
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	621a      	str	r2, [r3, #32]
}
 8009f12:	bf00      	nop
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr

08009f1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f1e:	b480      	push	{r7}
 8009f20:	b085      	sub	sp, #20
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f36:	683a      	ldr	r2, [r7, #0]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	f043 0307 	orr.w	r3, r3, #7
 8009f40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	609a      	str	r2, [r3, #8]
}
 8009f48:	bf00      	nop
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b087      	sub	sp, #28
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
 8009f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	021a      	lsls	r2, r3, #8
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	431a      	orrs	r2, r3
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	697a      	ldr	r2, [r7, #20]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	697a      	ldr	r2, [r7, #20]
 8009f86:	609a      	str	r2, [r3, #8]
}
 8009f88:	bf00      	nop
 8009f8a:	371c      	adds	r7, #28
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b087      	sub	sp, #28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	f003 031f 	and.w	r3, r3, #31
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6a1a      	ldr	r2, [r3, #32]
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	43db      	mvns	r3, r3
 8009fb6:	401a      	ands	r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6a1a      	ldr	r2, [r3, #32]
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	f003 031f 	and.w	r3, r3, #31
 8009fc6:	6879      	ldr	r1, [r7, #4]
 8009fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fcc:	431a      	orrs	r2, r3
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	621a      	str	r2, [r3, #32]
}
 8009fd2:	bf00      	nop
 8009fd4:	371c      	adds	r7, #28
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
	...

08009fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d101      	bne.n	8009ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	e050      	b.n	800a09a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2202      	movs	r2, #2
 800a004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a01e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	4313      	orrs	r3, r2
 800a028:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a1c      	ldr	r2, [pc, #112]	; (800a0a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d018      	beq.n	800a06e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a044:	d013      	beq.n	800a06e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a18      	ldr	r2, [pc, #96]	; (800a0ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d00e      	beq.n	800a06e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a16      	ldr	r2, [pc, #88]	; (800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d009      	beq.n	800a06e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a15      	ldr	r2, [pc, #84]	; (800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d004      	beq.n	800a06e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a13      	ldr	r2, [pc, #76]	; (800a0b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d10c      	bne.n	800a088 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a074:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68ba      	ldr	r2, [r7, #8]
 800a086:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	40010000 	.word	0x40010000
 800a0ac:	40000400 	.word	0x40000400
 800a0b0:	40000800 	.word	0x40000800
 800a0b4:	40000c00 	.word	0x40000c00
 800a0b8:	40014000 	.word	0x40014000

0800a0bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0c4:	bf00      	nop
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <arm_sin_f32>:
 800a0e4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800a160 <arm_sin_f32+0x7c>
 800a0e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a0ec:	ee20 7a07 	vmul.f32	s14, s0, s14
 800a0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0f4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800a0f8:	d42c      	bmi.n	800a154 <arm_sin_f32+0x70>
 800a0fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0fe:	eddf 6a19 	vldr	s13, [pc, #100]	; 800a164 <arm_sin_f32+0x80>
 800a102:	4a19      	ldr	r2, [pc, #100]	; (800a168 <arm_sin_f32+0x84>)
 800a104:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a108:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a10c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a110:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a118:	bfa8      	it	ge
 800a11a:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800a11e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800a122:	ee17 3a10 	vmov	r3, s14
 800a126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a12a:	ee07 3a10 	vmov	s14, r3
 800a12e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a132:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800a136:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a13a:	edd1 6a01 	vldr	s13, [r1, #4]
 800a13e:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a142:	ed91 0a00 	vldr	s0, [r1]
 800a146:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a14a:	ee27 0a00 	vmul.f32	s0, s14, s0
 800a14e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a152:	4770      	bx	lr
 800a154:	ee17 3a90 	vmov	r3, s15
 800a158:	3b01      	subs	r3, #1
 800a15a:	ee07 3a90 	vmov	s15, r3
 800a15e:	e7cc      	b.n	800a0fa <arm_sin_f32+0x16>
 800a160:	3e22f983 	.word	0x3e22f983
 800a164:	44000000 	.word	0x44000000
 800a168:	0800b558 	.word	0x0800b558

0800a16c <atoi>:
 800a16c:	220a      	movs	r2, #10
 800a16e:	2100      	movs	r1, #0
 800a170:	f000 b8d6 	b.w	800a320 <strtol>

0800a174 <__errno>:
 800a174:	4b01      	ldr	r3, [pc, #4]	; (800a17c <__errno+0x8>)
 800a176:	6818      	ldr	r0, [r3, #0]
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	20000394 	.word	0x20000394

0800a180 <__libc_init_array>:
 800a180:	b570      	push	{r4, r5, r6, lr}
 800a182:	4d0d      	ldr	r5, [pc, #52]	; (800a1b8 <__libc_init_array+0x38>)
 800a184:	4c0d      	ldr	r4, [pc, #52]	; (800a1bc <__libc_init_array+0x3c>)
 800a186:	1b64      	subs	r4, r4, r5
 800a188:	10a4      	asrs	r4, r4, #2
 800a18a:	2600      	movs	r6, #0
 800a18c:	42a6      	cmp	r6, r4
 800a18e:	d109      	bne.n	800a1a4 <__libc_init_array+0x24>
 800a190:	4d0b      	ldr	r5, [pc, #44]	; (800a1c0 <__libc_init_array+0x40>)
 800a192:	4c0c      	ldr	r4, [pc, #48]	; (800a1c4 <__libc_init_array+0x44>)
 800a194:	f000 f8ce 	bl	800a334 <_init>
 800a198:	1b64      	subs	r4, r4, r5
 800a19a:	10a4      	asrs	r4, r4, #2
 800a19c:	2600      	movs	r6, #0
 800a19e:	42a6      	cmp	r6, r4
 800a1a0:	d105      	bne.n	800a1ae <__libc_init_array+0x2e>
 800a1a2:	bd70      	pop	{r4, r5, r6, pc}
 800a1a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1a8:	4798      	blx	r3
 800a1aa:	3601      	adds	r6, #1
 800a1ac:	e7ee      	b.n	800a18c <__libc_init_array+0xc>
 800a1ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1b2:	4798      	blx	r3
 800a1b4:	3601      	adds	r6, #1
 800a1b6:	e7f2      	b.n	800a19e <__libc_init_array+0x1e>
 800a1b8:	0800be68 	.word	0x0800be68
 800a1bc:	0800be68 	.word	0x0800be68
 800a1c0:	0800be68 	.word	0x0800be68
 800a1c4:	0800be6c 	.word	0x0800be6c

0800a1c8 <memcpy>:
 800a1c8:	440a      	add	r2, r1
 800a1ca:	4291      	cmp	r1, r2
 800a1cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1d0:	d100      	bne.n	800a1d4 <memcpy+0xc>
 800a1d2:	4770      	bx	lr
 800a1d4:	b510      	push	{r4, lr}
 800a1d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1de:	4291      	cmp	r1, r2
 800a1e0:	d1f9      	bne.n	800a1d6 <memcpy+0xe>
 800a1e2:	bd10      	pop	{r4, pc}

0800a1e4 <memset>:
 800a1e4:	4402      	add	r2, r0
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d100      	bne.n	800a1ee <memset+0xa>
 800a1ec:	4770      	bx	lr
 800a1ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a1f2:	e7f9      	b.n	800a1e8 <memset+0x4>

0800a1f4 <strncmp>:
 800a1f4:	b510      	push	{r4, lr}
 800a1f6:	b17a      	cbz	r2, 800a218 <strncmp+0x24>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	3901      	subs	r1, #1
 800a1fc:	1884      	adds	r4, r0, r2
 800a1fe:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a202:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a206:	4290      	cmp	r0, r2
 800a208:	d101      	bne.n	800a20e <strncmp+0x1a>
 800a20a:	42a3      	cmp	r3, r4
 800a20c:	d101      	bne.n	800a212 <strncmp+0x1e>
 800a20e:	1a80      	subs	r0, r0, r2
 800a210:	bd10      	pop	{r4, pc}
 800a212:	2800      	cmp	r0, #0
 800a214:	d1f3      	bne.n	800a1fe <strncmp+0xa>
 800a216:	e7fa      	b.n	800a20e <strncmp+0x1a>
 800a218:	4610      	mov	r0, r2
 800a21a:	e7f9      	b.n	800a210 <strncmp+0x1c>

0800a21c <_strtol_l.constprop.0>:
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a222:	d001      	beq.n	800a228 <_strtol_l.constprop.0+0xc>
 800a224:	2b24      	cmp	r3, #36	; 0x24
 800a226:	d906      	bls.n	800a236 <_strtol_l.constprop.0+0x1a>
 800a228:	f7ff ffa4 	bl	800a174 <__errno>
 800a22c:	2316      	movs	r3, #22
 800a22e:	6003      	str	r3, [r0, #0]
 800a230:	2000      	movs	r0, #0
 800a232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a236:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a31c <_strtol_l.constprop.0+0x100>
 800a23a:	460d      	mov	r5, r1
 800a23c:	462e      	mov	r6, r5
 800a23e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a242:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a246:	f017 0708 	ands.w	r7, r7, #8
 800a24a:	d1f7      	bne.n	800a23c <_strtol_l.constprop.0+0x20>
 800a24c:	2c2d      	cmp	r4, #45	; 0x2d
 800a24e:	d132      	bne.n	800a2b6 <_strtol_l.constprop.0+0x9a>
 800a250:	782c      	ldrb	r4, [r5, #0]
 800a252:	2701      	movs	r7, #1
 800a254:	1cb5      	adds	r5, r6, #2
 800a256:	2b00      	cmp	r3, #0
 800a258:	d05b      	beq.n	800a312 <_strtol_l.constprop.0+0xf6>
 800a25a:	2b10      	cmp	r3, #16
 800a25c:	d109      	bne.n	800a272 <_strtol_l.constprop.0+0x56>
 800a25e:	2c30      	cmp	r4, #48	; 0x30
 800a260:	d107      	bne.n	800a272 <_strtol_l.constprop.0+0x56>
 800a262:	782c      	ldrb	r4, [r5, #0]
 800a264:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a268:	2c58      	cmp	r4, #88	; 0x58
 800a26a:	d14d      	bne.n	800a308 <_strtol_l.constprop.0+0xec>
 800a26c:	786c      	ldrb	r4, [r5, #1]
 800a26e:	2310      	movs	r3, #16
 800a270:	3502      	adds	r5, #2
 800a272:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a276:	f108 38ff 	add.w	r8, r8, #4294967295
 800a27a:	f04f 0c00 	mov.w	ip, #0
 800a27e:	fbb8 f9f3 	udiv	r9, r8, r3
 800a282:	4666      	mov	r6, ip
 800a284:	fb03 8a19 	mls	sl, r3, r9, r8
 800a288:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a28c:	f1be 0f09 	cmp.w	lr, #9
 800a290:	d816      	bhi.n	800a2c0 <_strtol_l.constprop.0+0xa4>
 800a292:	4674      	mov	r4, lr
 800a294:	42a3      	cmp	r3, r4
 800a296:	dd24      	ble.n	800a2e2 <_strtol_l.constprop.0+0xc6>
 800a298:	f1bc 0f00 	cmp.w	ip, #0
 800a29c:	db1e      	blt.n	800a2dc <_strtol_l.constprop.0+0xc0>
 800a29e:	45b1      	cmp	r9, r6
 800a2a0:	d31c      	bcc.n	800a2dc <_strtol_l.constprop.0+0xc0>
 800a2a2:	d101      	bne.n	800a2a8 <_strtol_l.constprop.0+0x8c>
 800a2a4:	45a2      	cmp	sl, r4
 800a2a6:	db19      	blt.n	800a2dc <_strtol_l.constprop.0+0xc0>
 800a2a8:	fb06 4603 	mla	r6, r6, r3, r4
 800a2ac:	f04f 0c01 	mov.w	ip, #1
 800a2b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2b4:	e7e8      	b.n	800a288 <_strtol_l.constprop.0+0x6c>
 800a2b6:	2c2b      	cmp	r4, #43	; 0x2b
 800a2b8:	bf04      	itt	eq
 800a2ba:	782c      	ldrbeq	r4, [r5, #0]
 800a2bc:	1cb5      	addeq	r5, r6, #2
 800a2be:	e7ca      	b.n	800a256 <_strtol_l.constprop.0+0x3a>
 800a2c0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a2c4:	f1be 0f19 	cmp.w	lr, #25
 800a2c8:	d801      	bhi.n	800a2ce <_strtol_l.constprop.0+0xb2>
 800a2ca:	3c37      	subs	r4, #55	; 0x37
 800a2cc:	e7e2      	b.n	800a294 <_strtol_l.constprop.0+0x78>
 800a2ce:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a2d2:	f1be 0f19 	cmp.w	lr, #25
 800a2d6:	d804      	bhi.n	800a2e2 <_strtol_l.constprop.0+0xc6>
 800a2d8:	3c57      	subs	r4, #87	; 0x57
 800a2da:	e7db      	b.n	800a294 <_strtol_l.constprop.0+0x78>
 800a2dc:	f04f 3cff 	mov.w	ip, #4294967295
 800a2e0:	e7e6      	b.n	800a2b0 <_strtol_l.constprop.0+0x94>
 800a2e2:	f1bc 0f00 	cmp.w	ip, #0
 800a2e6:	da05      	bge.n	800a2f4 <_strtol_l.constprop.0+0xd8>
 800a2e8:	2322      	movs	r3, #34	; 0x22
 800a2ea:	6003      	str	r3, [r0, #0]
 800a2ec:	4646      	mov	r6, r8
 800a2ee:	b942      	cbnz	r2, 800a302 <_strtol_l.constprop.0+0xe6>
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	e79e      	b.n	800a232 <_strtol_l.constprop.0+0x16>
 800a2f4:	b107      	cbz	r7, 800a2f8 <_strtol_l.constprop.0+0xdc>
 800a2f6:	4276      	negs	r6, r6
 800a2f8:	2a00      	cmp	r2, #0
 800a2fa:	d0f9      	beq.n	800a2f0 <_strtol_l.constprop.0+0xd4>
 800a2fc:	f1bc 0f00 	cmp.w	ip, #0
 800a300:	d000      	beq.n	800a304 <_strtol_l.constprop.0+0xe8>
 800a302:	1e69      	subs	r1, r5, #1
 800a304:	6011      	str	r1, [r2, #0]
 800a306:	e7f3      	b.n	800a2f0 <_strtol_l.constprop.0+0xd4>
 800a308:	2430      	movs	r4, #48	; 0x30
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1b1      	bne.n	800a272 <_strtol_l.constprop.0+0x56>
 800a30e:	2308      	movs	r3, #8
 800a310:	e7af      	b.n	800a272 <_strtol_l.constprop.0+0x56>
 800a312:	2c30      	cmp	r4, #48	; 0x30
 800a314:	d0a5      	beq.n	800a262 <_strtol_l.constprop.0+0x46>
 800a316:	230a      	movs	r3, #10
 800a318:	e7ab      	b.n	800a272 <_strtol_l.constprop.0+0x56>
 800a31a:	bf00      	nop
 800a31c:	0800bd5d 	.word	0x0800bd5d

0800a320 <strtol>:
 800a320:	4613      	mov	r3, r2
 800a322:	460a      	mov	r2, r1
 800a324:	4601      	mov	r1, r0
 800a326:	4802      	ldr	r0, [pc, #8]	; (800a330 <strtol+0x10>)
 800a328:	6800      	ldr	r0, [r0, #0]
 800a32a:	f7ff bf77 	b.w	800a21c <_strtol_l.constprop.0>
 800a32e:	bf00      	nop
 800a330:	20000394 	.word	0x20000394

0800a334 <_init>:
 800a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a336:	bf00      	nop
 800a338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33a:	bc08      	pop	{r3}
 800a33c:	469e      	mov	lr, r3
 800a33e:	4770      	bx	lr

0800a340 <_fini>:
 800a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a342:	bf00      	nop
 800a344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a346:	bc08      	pop	{r3}
 800a348:	469e      	mov	lr, r3
 800a34a:	4770      	bx	lr
