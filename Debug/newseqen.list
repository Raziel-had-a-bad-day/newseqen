
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2cc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000213c  0800c464  0800c464  0001c464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5a0  0800e5a0  0002061c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5a0  0800e5a0  0001e5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5a8  0800e5a8  0002061c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5a8  0800e5a8  0001e5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5ac  0800e5ac  0001e5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000061c  20000000  0800e5b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010f6c  2000061c  0800ebcc  0002061c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011588  0800ebcc  00021588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002061c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018189  00000000  00000000  0002064c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002840  00000000  00000000  000387d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  0003b018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001360  00000000  00000000  0003c460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018da1  00000000  00000000  0003d7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d1c  00000000  00000000  00056561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a198c  00000000  00000000  0006f27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00110c09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a4  00000000  00000000  00110ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  00116670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000061c 	.word	0x2000061c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c44c 	.word	0x0800c44c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000620 	.word	0x20000620
 80001d4:	0800c44c 	.word	0x0800c44c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2uiz>:
 80007b4:	004a      	lsls	r2, r1, #1
 80007b6:	d211      	bcs.n	80007dc <__aeabi_d2uiz+0x28>
 80007b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007bc:	d211      	bcs.n	80007e2 <__aeabi_d2uiz+0x2e>
 80007be:	d50d      	bpl.n	80007dc <__aeabi_d2uiz+0x28>
 80007c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c8:	d40e      	bmi.n	80007e8 <__aeabi_d2uiz+0x34>
 80007ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007d6:	fa23 f002 	lsr.w	r0, r3, r2
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007e6:	d102      	bne.n	80007ee <__aeabi_d2uiz+0x3a>
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	4770      	bx	lr
 80007ee:	f04f 0000 	mov.w	r0, #0
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_d2f>:
 80007f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007fc:	bf24      	itt	cs
 80007fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000802:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000806:	d90d      	bls.n	8000824 <__aeabi_d2f+0x30>
 8000808:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800080c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000810:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000814:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000818:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000828:	d121      	bne.n	800086e <__aeabi_d2f+0x7a>
 800082a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800082e:	bfbc      	itt	lt
 8000830:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000834:	4770      	bxlt	lr
 8000836:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800083a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800083e:	f1c2 0218 	rsb	r2, r2, #24
 8000842:	f1c2 0c20 	rsb	ip, r2, #32
 8000846:	fa10 f30c 	lsls.w	r3, r0, ip
 800084a:	fa20 f002 	lsr.w	r0, r0, r2
 800084e:	bf18      	it	ne
 8000850:	f040 0001 	orrne.w	r0, r0, #1
 8000854:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000858:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800085c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000860:	ea40 000c 	orr.w	r0, r0, ip
 8000864:	fa23 f302 	lsr.w	r3, r3, r2
 8000868:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800086c:	e7cc      	b.n	8000808 <__aeabi_d2f+0x14>
 800086e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000872:	d107      	bne.n	8000884 <__aeabi_d2f+0x90>
 8000874:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000878:	bf1e      	ittt	ne
 800087a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800087e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000882:	4770      	bxne	lr
 8000884:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000888:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800088c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <__aeabi_uldivmod>:
 8000894:	b953      	cbnz	r3, 80008ac <__aeabi_uldivmod+0x18>
 8000896:	b94a      	cbnz	r2, 80008ac <__aeabi_uldivmod+0x18>
 8000898:	2900      	cmp	r1, #0
 800089a:	bf08      	it	eq
 800089c:	2800      	cmpeq	r0, #0
 800089e:	bf1c      	itt	ne
 80008a0:	f04f 31ff 	movne.w	r1, #4294967295
 80008a4:	f04f 30ff 	movne.w	r0, #4294967295
 80008a8:	f000 b974 	b.w	8000b94 <__aeabi_idiv0>
 80008ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b4:	f000 f806 	bl	80008c4 <__udivmoddi4>
 80008b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c0:	b004      	add	sp, #16
 80008c2:	4770      	bx	lr

080008c4 <__udivmoddi4>:
 80008c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c8:	9d08      	ldr	r5, [sp, #32]
 80008ca:	4604      	mov	r4, r0
 80008cc:	468e      	mov	lr, r1
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d14d      	bne.n	800096e <__udivmoddi4+0xaa>
 80008d2:	428a      	cmp	r2, r1
 80008d4:	4694      	mov	ip, r2
 80008d6:	d969      	bls.n	80009ac <__udivmoddi4+0xe8>
 80008d8:	fab2 f282 	clz	r2, r2
 80008dc:	b152      	cbz	r2, 80008f4 <__udivmoddi4+0x30>
 80008de:	fa01 f302 	lsl.w	r3, r1, r2
 80008e2:	f1c2 0120 	rsb	r1, r2, #32
 80008e6:	fa20 f101 	lsr.w	r1, r0, r1
 80008ea:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ee:	ea41 0e03 	orr.w	lr, r1, r3
 80008f2:	4094      	lsls	r4, r2
 80008f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f8:	0c21      	lsrs	r1, r4, #16
 80008fa:	fbbe f6f8 	udiv	r6, lr, r8
 80008fe:	fa1f f78c 	uxth.w	r7, ip
 8000902:	fb08 e316 	mls	r3, r8, r6, lr
 8000906:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800090a:	fb06 f107 	mul.w	r1, r6, r7
 800090e:	4299      	cmp	r1, r3
 8000910:	d90a      	bls.n	8000928 <__udivmoddi4+0x64>
 8000912:	eb1c 0303 	adds.w	r3, ip, r3
 8000916:	f106 30ff 	add.w	r0, r6, #4294967295
 800091a:	f080 811f 	bcs.w	8000b5c <__udivmoddi4+0x298>
 800091e:	4299      	cmp	r1, r3
 8000920:	f240 811c 	bls.w	8000b5c <__udivmoddi4+0x298>
 8000924:	3e02      	subs	r6, #2
 8000926:	4463      	add	r3, ip
 8000928:	1a5b      	subs	r3, r3, r1
 800092a:	b2a4      	uxth	r4, r4
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3310 	mls	r3, r8, r0, r3
 8000934:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000938:	fb00 f707 	mul.w	r7, r0, r7
 800093c:	42a7      	cmp	r7, r4
 800093e:	d90a      	bls.n	8000956 <__udivmoddi4+0x92>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f100 33ff 	add.w	r3, r0, #4294967295
 8000948:	f080 810a 	bcs.w	8000b60 <__udivmoddi4+0x29c>
 800094c:	42a7      	cmp	r7, r4
 800094e:	f240 8107 	bls.w	8000b60 <__udivmoddi4+0x29c>
 8000952:	4464      	add	r4, ip
 8000954:	3802      	subs	r0, #2
 8000956:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800095a:	1be4      	subs	r4, r4, r7
 800095c:	2600      	movs	r6, #0
 800095e:	b11d      	cbz	r5, 8000968 <__udivmoddi4+0xa4>
 8000960:	40d4      	lsrs	r4, r2
 8000962:	2300      	movs	r3, #0
 8000964:	e9c5 4300 	strd	r4, r3, [r5]
 8000968:	4631      	mov	r1, r6
 800096a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096e:	428b      	cmp	r3, r1
 8000970:	d909      	bls.n	8000986 <__udivmoddi4+0xc2>
 8000972:	2d00      	cmp	r5, #0
 8000974:	f000 80ef 	beq.w	8000b56 <__udivmoddi4+0x292>
 8000978:	2600      	movs	r6, #0
 800097a:	e9c5 0100 	strd	r0, r1, [r5]
 800097e:	4630      	mov	r0, r6
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	fab3 f683 	clz	r6, r3
 800098a:	2e00      	cmp	r6, #0
 800098c:	d14a      	bne.n	8000a24 <__udivmoddi4+0x160>
 800098e:	428b      	cmp	r3, r1
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xd4>
 8000992:	4282      	cmp	r2, r0
 8000994:	f200 80f9 	bhi.w	8000b8a <__udivmoddi4+0x2c6>
 8000998:	1a84      	subs	r4, r0, r2
 800099a:	eb61 0303 	sbc.w	r3, r1, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	469e      	mov	lr, r3
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d0e0      	beq.n	8000968 <__udivmoddi4+0xa4>
 80009a6:	e9c5 4e00 	strd	r4, lr, [r5]
 80009aa:	e7dd      	b.n	8000968 <__udivmoddi4+0xa4>
 80009ac:	b902      	cbnz	r2, 80009b0 <__udivmoddi4+0xec>
 80009ae:	deff      	udf	#255	; 0xff
 80009b0:	fab2 f282 	clz	r2, r2
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	f040 8092 	bne.w	8000ade <__udivmoddi4+0x21a>
 80009ba:	eba1 010c 	sub.w	r1, r1, ip
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2601      	movs	r6, #1
 80009c8:	0c20      	lsrs	r0, r4, #16
 80009ca:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ce:	fb07 1113 	mls	r1, r7, r3, r1
 80009d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009d6:	fb0e f003 	mul.w	r0, lr, r3
 80009da:	4288      	cmp	r0, r1
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x12c>
 80009de:	eb1c 0101 	adds.w	r1, ip, r1
 80009e2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x12a>
 80009e8:	4288      	cmp	r0, r1
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2c0>
 80009ee:	4643      	mov	r3, r8
 80009f0:	1a09      	subs	r1, r1, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1110 	mls	r1, r7, r0, r1
 80009fc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x156>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x154>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2ca>
 8000a18:	4608      	mov	r0, r1
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	e79c      	b.n	800095e <__udivmoddi4+0x9a>
 8000a24:	f1c6 0720 	rsb	r7, r6, #32
 8000a28:	40b3      	lsls	r3, r6
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa20 f407 	lsr.w	r4, r0, r7
 8000a36:	fa01 f306 	lsl.w	r3, r1, r6
 8000a3a:	431c      	orrs	r4, r3
 8000a3c:	40f9      	lsrs	r1, r7
 8000a3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a42:	fa00 f306 	lsl.w	r3, r0, r6
 8000a46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a4a:	0c20      	lsrs	r0, r4, #16
 8000a4c:	fa1f fe8c 	uxth.w	lr, ip
 8000a50:	fb09 1118 	mls	r1, r9, r8, r1
 8000a54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a58:	fb08 f00e 	mul.w	r0, r8, lr
 8000a5c:	4288      	cmp	r0, r1
 8000a5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b8>
 8000a64:	eb1c 0101 	adds.w	r1, ip, r1
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2bc>
 8000a70:	4288      	cmp	r0, r1
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2bc>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4461      	add	r1, ip
 8000a7c:	1a09      	subs	r1, r1, r0
 8000a7e:	b2a4      	uxth	r4, r4
 8000a80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a84:	fb09 1110 	mls	r1, r9, r0, r1
 8000a88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a90:	458e      	cmp	lr, r1
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1e2>
 8000a94:	eb1c 0101 	adds.w	r1, ip, r1
 8000a98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2b4>
 8000a9e:	458e      	cmp	lr, r1
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2b4>
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	4461      	add	r1, ip
 8000aa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aaa:	fba0 9402 	umull	r9, r4, r0, r2
 8000aae:	eba1 010e 	sub.w	r1, r1, lr
 8000ab2:	42a1      	cmp	r1, r4
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46a6      	mov	lr, r4
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x2a4>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x2a0>
 8000abc:	b15d      	cbz	r5, 8000ad6 <__udivmoddi4+0x212>
 8000abe:	ebb3 0208 	subs.w	r2, r3, r8
 8000ac2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ac6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aca:	fa22 f306 	lsr.w	r3, r2, r6
 8000ace:	40f1      	lsrs	r1, r6
 8000ad0:	431f      	orrs	r7, r3
 8000ad2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	40d8      	lsrs	r0, r3
 8000ae4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aec:	4091      	lsls	r1, r2
 8000aee:	4301      	orrs	r1, r0
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000afc:	fb07 3610 	mls	r6, r7, r0, r3
 8000b00:	0c0b      	lsrs	r3, r1, #16
 8000b02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b06:	fb00 f60e 	mul.w	r6, r0, lr
 8000b0a:	429e      	cmp	r6, r3
 8000b0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x260>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b8>
 8000b1c:	429e      	cmp	r6, r3
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b8>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4463      	add	r3, ip
 8000b24:	1b9b      	subs	r3, r3, r6
 8000b26:	b289      	uxth	r1, r1
 8000b28:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b2c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b34:	fb06 f30e 	mul.w	r3, r6, lr
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x28a>
 8000b3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b40:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2b0>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2b0>
 8000b4a:	3e02      	subs	r6, #2
 8000b4c:	4461      	add	r1, ip
 8000b4e:	1ac9      	subs	r1, r1, r3
 8000b50:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0x104>
 8000b56:	462e      	mov	r6, r5
 8000b58:	4628      	mov	r0, r5
 8000b5a:	e705      	b.n	8000968 <__udivmoddi4+0xa4>
 8000b5c:	4606      	mov	r6, r0
 8000b5e:	e6e3      	b.n	8000928 <__udivmoddi4+0x64>
 8000b60:	4618      	mov	r0, r3
 8000b62:	e6f8      	b.n	8000956 <__udivmoddi4+0x92>
 8000b64:	454b      	cmp	r3, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f8>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b70:	3801      	subs	r0, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f8>
 8000b74:	4646      	mov	r6, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x28a>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1e2>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x260>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b8>
 8000b84:	3b02      	subs	r3, #2
 8000b86:	4461      	add	r1, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x12c>
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	e709      	b.n	80009a2 <__udivmoddi4+0xde>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x156>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <flash_sector_erase>:
// external spi flash related
uint8_t flash_sector_erase(uint32_t address ){      // 24bit address
 8000b98:	b5b0      	push	{r4, r5, r7, lr}
 8000b9a:	b0a0      	sub	sp, #128	; 0x80
 8000b9c:	af02      	add	r7, sp, #8
 8000b9e:	6078      	str	r0, [r7, #4]
    SPI_HandleTypeDef hspi1;

    uint8_t send_spi1[20]={0x90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
 8000ba0:	4b36      	ldr	r3, [pc, #216]	; (8000c7c <flash_sector_erase+0xe4>)
 8000ba2:	f107 040c 	add.w	r4, r7, #12
 8000ba6:	461d      	mov	r5, r3
 8000ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bac:	682b      	ldr	r3, [r5, #0]
 8000bae:	8023      	strh	r3, [r4, #0]
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	83fb      	strh	r3, [r7, #30]
    if (address==0) return 1; // no zero
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d101      	bne.n	8000bbe <flash_sector_erase+0x26>
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e05a      	b.n	8000c74 <flash_sector_erase+0xdc>

	send_spi1[0]=0x05; //read status register  if writing
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	733b      	strb	r3, [r7, #12]
	send_spi1[1]=0; //24bit address msb
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	737b      	strb	r3, [r7, #13]
	status_reg[1]=1; // set busy on
 8000bc6:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <flash_sector_erase+0xe8>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); //enable
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2110      	movs	r1, #16
 8000bd0:	482c      	ldr	r0, [pc, #176]	; (8000c84 <flash_sector_erase+0xec>)
 8000bd2:	f007 fa93 	bl	80080fc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);   // check if busy writing
 8000bd6:	f107 010c 	add.w	r1, r7, #12
 8000bda:	f107 0020 	add.w	r0, r7, #32
 8000bde:	23c8      	movs	r3, #200	; 0xc8
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	2302      	movs	r3, #2
 8000be4:	4a26      	ldr	r2, [pc, #152]	; (8000c80 <flash_sector_erase+0xe8>)
 8000be6:	f009 f9a9 	bl	8009f3c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  //disable
 8000bea:	2201      	movs	r2, #1
 8000bec:	2110      	movs	r1, #16
 8000bee:	4825      	ldr	r0, [pc, #148]	; (8000c84 <flash_sector_erase+0xec>)
 8000bf0:	f007 fa84 	bl	80080fc <HAL_GPIO_WritePin>
	if (status_reg[1]&1)   return 1 ;   // quit if busy
 8000bf4:	4b22      	ldr	r3, [pc, #136]	; (8000c80 <flash_sector_erase+0xe8>)
 8000bf6:	785b      	ldrb	r3, [r3, #1]
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <flash_sector_erase+0x6c>
 8000c00:	2301      	movs	r3, #1
 8000c02:	e037      	b.n	8000c74 <flash_sector_erase+0xdc>

    send_spi1[0]=0x06; //enable write  , only lasts for single operation
 8000c04:	2306      	movs	r3, #6
 8000c06:	733b      	strb	r3, [r7, #12]
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // start
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2110      	movs	r1, #16
 8000c0c:	481d      	ldr	r0, [pc, #116]	; (8000c84 <flash_sector_erase+0xec>)
 8000c0e:	f007 fa75 	bl	80080fc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);       // enable write
 8000c12:	f107 010c 	add.w	r1, r7, #12
 8000c16:	f107 0020 	add.w	r0, r7, #32
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f008 ff3f 	bl	8009aa2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // end
 8000c24:	2201      	movs	r2, #1
 8000c26:	2110      	movs	r1, #16
 8000c28:	4816      	ldr	r0, [pc, #88]	; (8000c84 <flash_sector_erase+0xec>)
 8000c2a:	f007 fa67 	bl	80080fc <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8000c2e:	2005      	movs	r0, #5
 8000c30:	f005 fb5a 	bl	80062e8 <HAL_Delay>
		send_spi1[0]=0x20; //sector erase
 8000c34:	2320      	movs	r3, #32
 8000c36:	733b      	strb	r3, [r7, #12]
		memcpy(&spi_send+1,&address+1,3);   // copy 24bits
 8000c38:	4813      	ldr	r0, [pc, #76]	; (8000c88 <flash_sector_erase+0xf0>)
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	2203      	movs	r2, #3
 8000c40:	4619      	mov	r1, r3
 8000c42:	f00b fb4d 	bl	800c2e0 <memcpy>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 8000c46:	2200      	movs	r2, #0
 8000c48:	2110      	movs	r1, #16
 8000c4a:	480e      	ldr	r0, [pc, #56]	; (8000c84 <flash_sector_erase+0xec>)
 8000c4c:	f007 fa56 	bl	80080fc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works       4kbytes   (block erase=32kbytes or  64kbyte )
 8000c50:	f107 010c 	add.w	r1, r7, #12
 8000c54:	f107 0020 	add.w	r0, r7, #32
 8000c58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5c:	2204      	movs	r2, #4
 8000c5e:	f008 ff20 	bl	8009aa2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2110      	movs	r1, #16
 8000c66:	4807      	ldr	r0, [pc, #28]	; (8000c84 <flash_sector_erase+0xec>)
 8000c68:	f007 fa48 	bl	80080fc <HAL_GPIO_WritePin>
		HAL_Delay(100);  // this is slow
 8000c6c:	2064      	movs	r0, #100	; 0x64
 8000c6e:	f005 fb3b 	bl	80062e8 <HAL_Delay>
		    return  0;
 8000c72:	2300      	movs	r3, #0

}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3778      	adds	r7, #120	; 0x78
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c7c:	0800c8cc 	.word	0x0800c8cc
 8000c80:	20000154 	.word	0x20000154
 8000c84:	40020000 	.word	0x40020000
 8000c88:	2000334f 	.word	0x2000334f

08000c8c <flash_page_write>:

uint8_t flash_page_write(uint32_t address,uint8_t  block){   // write full page (256bytes)    , or 128x 16bit audio  LSB should always be zero if 256 byte blockor it wraps around
 8000c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8e:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 8000c92:	af02      	add	r7, sp, #8
 8000c94:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000c98:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8000c9c:	6018      	str	r0, [r3, #0]
 8000c9e:	460a      	mov	r2, r1
 8000ca0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000ca4:	f2a3 2365 	subw	r3, r3, #613	; 0x265
 8000ca8:	701a      	strb	r2, [r3, #0]

    SPI_HandleTypeDef hspi1;

    uint8_t send_spi1[520]={0x90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
 8000caa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000cae:	f5a3 7618 	sub.w	r6, r3, #608	; 0x260
 8000cb2:	4b61      	ldr	r3, [pc, #388]	; (8000e38 <flash_page_write+0x1ac>)
 8000cb4:	4634      	mov	r4, r6
 8000cb6:	461d      	mov	r5, r3
 8000cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cbc:	682b      	ldr	r3, [r5, #0]
 8000cbe:	8023      	strh	r3, [r4, #0]
 8000cc0:	f106 0312 	add.w	r3, r6, #18
 8000cc4:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f00b fb16 	bl	800c2fc <memset>
    if (address==0) return 1; // no zero
 8000cd0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000cd4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <flash_page_write+0x56>
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e0a5      	b.n	8000e2e <flash_page_write+0x1a2>



	send_spi1[0]=0x06; // 	 FIRST ENABLE WRITE , THEN SEND COMMAND TO WRITE , THEN WRITE  !!!!
 8000ce2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000ce6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8000cea:	2206      	movs	r2, #6
 8000cec:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // start
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2110      	movs	r1, #16
 8000cf2:	4852      	ldr	r0, [pc, #328]	; (8000e3c <flash_page_write+0x1b0>)
 8000cf4:	f007 fa02 	bl	80080fc <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);       // enable write
 8000cf8:	f107 0108 	add.w	r1, r7, #8
 8000cfc:	f507 7004 	add.w	r0, r7, #528	; 0x210
 8000d00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d04:	2201      	movs	r2, #1
 8000d06:	f008 fecc 	bl	8009aa2 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // end
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2110      	movs	r1, #16
 8000d0e:	484b      	ldr	r0, [pc, #300]	; (8000e3c <flash_page_write+0x1b0>)
 8000d10:	f007 f9f4 	bl	80080fc <HAL_GPIO_WritePin>

    send_spi1[0]=0x05; //read status register  if writing
 8000d14:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000d18:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8000d1c:	2205      	movs	r2, #5
 8000d1e:	701a      	strb	r2, [r3, #0]
	send_spi1[1]=0; //24bit address msb
 8000d20:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000d24:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8000d28:	2200      	movs	r2, #0
 8000d2a:	705a      	strb	r2, [r3, #1]
	status_reg[1]=1; // set busy on
 8000d2c:	4b44      	ldr	r3, [pc, #272]	; (8000e40 <flash_page_write+0x1b4>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); //enable
 8000d32:	2200      	movs	r2, #0
 8000d34:	2110      	movs	r1, #16
 8000d36:	4841      	ldr	r0, [pc, #260]	; (8000e3c <flash_page_write+0x1b0>)
 8000d38:	f007 f9e0 	bl	80080fc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);   // check if busy writing
 8000d3c:	f107 0108 	add.w	r1, r7, #8
 8000d40:	f507 7004 	add.w	r0, r7, #528	; 0x210
 8000d44:	23c8      	movs	r3, #200	; 0xc8
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2302      	movs	r3, #2
 8000d4a:	4a3d      	ldr	r2, [pc, #244]	; (8000e40 <flash_page_write+0x1b4>)
 8000d4c:	f009 f8f6 	bl	8009f3c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  //disable
 8000d50:	2201      	movs	r2, #1
 8000d52:	2110      	movs	r1, #16
 8000d54:	4839      	ldr	r0, [pc, #228]	; (8000e3c <flash_page_write+0x1b0>)
 8000d56:	f007 f9d1 	bl	80080fc <HAL_GPIO_WritePin>
	if (status_reg[1]&1)   return 1 ;   // quit if busy
 8000d5a:	4b39      	ldr	r3, [pc, #228]	; (8000e40 <flash_page_write+0x1b4>)
 8000d5c:	785b      	ldrb	r3, [r3, #1]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <flash_page_write+0xde>
 8000d66:	2301      	movs	r3, #1
 8000d68:	e061      	b.n	8000e2e <flash_page_write+0x1a2>

	//uint8_t temp_spi1[]={0x02,0,0,1,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page program ,24bit(address)  +1-255 byte data  (page)

	send_spi1[0]=0x02; //write page
 8000d6a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000d6e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8000d72:	2202      	movs	r2, #2
 8000d74:	701a      	strb	r2, [r3, #0]
	send_spi1[1]=(address>>16);
 8000d76:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000d7a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	0c1b      	lsrs	r3, r3, #16
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000d88:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8000d8c:	705a      	strb	r2, [r3, #1]
	send_spi1[2]=(address>>8);
 8000d8e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000d92:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000da0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8000da4:	709a      	strb	r2, [r3, #2]
	send_spi1[3]=0;
 8000da6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000daa:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8000dae:	2200      	movs	r2, #0
 8000db0:	70da      	strb	r2, [r3, #3]

	memcpy  (&send_spi1[4], block, 512);   // copy  for now
 8000db2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000db6:	f2a3 2365 	subw	r3, r3, #613	; 0x265
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f00b fa89 	bl	800c2e0 <memcpy>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);   // low
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	481a      	ldr	r0, [pc, #104]	; (8000e3c <flash_page_write+0x1b0>)
 8000dd4:	f007 f992 	bl	80080fc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 516, 100);  //address,then data
 8000dd8:	f107 0108 	add.w	r1, r7, #8
 8000ddc:	f507 7004 	add.w	r0, r7, #528	; 0x210
 8000de0:	2364      	movs	r3, #100	; 0x64
 8000de2:	f44f 7201 	mov.w	r2, #516	; 0x204
 8000de6:	f008 fe5c 	bl	8009aa2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // high end
 8000dea:	2201      	movs	r2, #1
 8000dec:	2110      	movs	r1, #16
 8000dee:	4813      	ldr	r0, [pc, #76]	; (8000e3c <flash_page_write+0x1b0>)
 8000df0:	f007 f984 	bl	80080fc <HAL_GPIO_WritePin>

		HAL_Delay(25);  // 3ms /page
 8000df4:	2019      	movs	r0, #25
 8000df6:	f005 fa77 	bl	80062e8 <HAL_Delay>

		send_spi1[0]=0x04; //disable write
 8000dfa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000dfe:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8000e02:	2204      	movs	r2, #4
 8000e04:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // low
 8000e06:	2200      	movs	r2, #0
 8000e08:	2110      	movs	r1, #16
 8000e0a:	480c      	ldr	r0, [pc, #48]	; (8000e3c <flash_page_write+0x1b0>)
 8000e0c:	f007 f976 	bl	80080fc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8000e10:	f107 0108 	add.w	r1, r7, #8
 8000e14:	f507 7004 	add.w	r0, r7, #528	; 0x210
 8000e18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f008 fe40 	bl	8009aa2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // high end
 8000e22:	2201      	movs	r2, #1
 8000e24:	2110      	movs	r1, #16
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <flash_page_write+0x1b0>)
 8000e28:	f007 f968 	bl	80080fc <HAL_GPIO_WritePin>
		return 0;
 8000e2c:	2300      	movs	r3, #0

}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f507 771b 	add.w	r7, r7, #620	; 0x26c
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e38:	0800c8e0 	.word	0x0800c8e0
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	20000154 	.word	0x20000154

08000e44 <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	70fb      	strb	r3, [r7, #3]


	char menu_string2[8];
	//var_index=var_index&15;    //set var index ie  LFO[1].rate ,false
	uint8_t menu_countr=0; //  menu vars
 8000e50:	2300      	movs	r3, #0
 8000e52:	75fb      	strb	r3, [r7, #23]
	uint8_t *menu_vars_var1=NULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]

	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000e58:	4bba      	ldr	r3, [pc, #744]	; (8001144 <menu_vars+0x300>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	801a      	strh	r2, [r3, #0]
 8000e5e:	e01d      	b.n	8000e9c <menu_vars+0x58>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000e60:	4bb8      	ldr	r3, [pc, #736]	; (8001144 <menu_vars+0x300>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4bb8      	ldr	r3, [pc, #736]	; (8001148 <menu_vars+0x304>)
 8000e68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	6810      	ldr	r0, [r2, #0]
 8000e72:	6851      	ldr	r1, [r2, #4]
 8000e74:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	2208      	movs	r2, #8
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f00b fa44 	bl	800c30c <strncmp>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d102      	bne.n	8000e90 <menu_vars+0x4c>
			menu_countr = i;
 8000e8a:	4bae      	ldr	r3, [pc, #696]	; (8001144 <menu_vars+0x300>)
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000e90:	4bac      	ldr	r3, [pc, #688]	; (8001144 <menu_vars+0x300>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	3301      	adds	r3, #1
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	4baa      	ldr	r3, [pc, #680]	; (8001144 <menu_vars+0x300>)
 8000e9a:	801a      	strh	r2, [r3, #0]
 8000e9c:	4ba9      	ldr	r3, [pc, #676]	; (8001144 <menu_vars+0x300>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	2b36      	cmp	r3, #54	; 0x36
 8000ea2:	d9dd      	bls.n	8000e60 <menu_vars+0x1c>

		}
	}
	menu_vars_ref=menu_countr ;
 8000ea4:	4aa9      	ldr	r2, [pc, #676]	; (800114c <menu_vars+0x308>)
 8000ea6:	7dfb      	ldrb	r3, [r7, #23]
 8000ea8:	7013      	strb	r3, [r2, #0]
	if (var_index>menu_vars_index_limit[menu_countr]) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000eaa:	7dfb      	ldrb	r3, [r7, #23]
 8000eac:	4aa8      	ldr	r2, [pc, #672]	; (8001150 <menu_vars+0x30c>)
 8000eae:	5cd3      	ldrb	r3, [r2, r3]
 8000eb0:	78fa      	ldrb	r2, [r7, #3]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d903      	bls.n	8000ebe <menu_vars+0x7a>
 8000eb6:	7dfb      	ldrb	r3, [r7, #23]
 8000eb8:	4aa5      	ldr	r2, [pc, #660]	; (8001150 <menu_vars+0x30c>)
 8000eba:	5cd3      	ldrb	r3, [r2, r3]
 8000ebc:	70fb      	strb	r3, [r7, #3]

	switch(menu_countr){
 8000ebe:	7dfb      	ldrb	r3, [r7, #23]
 8000ec0:	2b35      	cmp	r3, #53	; 0x35
 8000ec2:	f200 8224 	bhi.w	800130e <menu_vars+0x4ca>
 8000ec6:	a201      	add	r2, pc, #4	; (adr r2, 8000ecc <menu_vars+0x88>)
 8000ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ecc:	08000fa5 	.word	0x08000fa5
 8000ed0:	08000fab 	.word	0x08000fab
 8000ed4:	08000fbd 	.word	0x08000fbd
 8000ed8:	08000fd1 	.word	0x08000fd1
 8000edc:	08000fe5 	.word	0x08000fe5
 8000ee0:	08000ff9 	.word	0x08000ff9
 8000ee4:	0800100d 	.word	0x0800100d
 8000ee8:	08001013 	.word	0x08001013
 8000eec:	08001025 	.word	0x08001025
 8000ef0:	08001039 	.word	0x08001039
 8000ef4:	0800104d 	.word	0x0800104d
 8000ef8:	08001061 	.word	0x08001061
 8000efc:	08001067 	.word	0x08001067
 8000f00:	08001079 	.word	0x08001079
 8000f04:	0800108d 	.word	0x0800108d
 8000f08:	080010a1 	.word	0x080010a1
 8000f0c:	080010b5 	.word	0x080010b5
 8000f10:	080010c9 	.word	0x080010c9
 8000f14:	080010dd 	.word	0x080010dd
 8000f18:	080010f1 	.word	0x080010f1
 8000f1c:	08001105 	.word	0x08001105
 8000f20:	08001119 	.word	0x08001119
 8000f24:	0800111f 	.word	0x0800111f
 8000f28:	08001125 	.word	0x08001125
 8000f2c:	0800112b 	.word	0x0800112b
 8000f30:	08001137 	.word	0x08001137
 8000f34:	0800116d 	.word	0x0800116d
 8000f38:	0800117b 	.word	0x0800117b
 8000f3c:	08001187 	.word	0x08001187
 8000f40:	08001195 	.word	0x08001195
 8000f44:	080011a3 	.word	0x080011a3
 8000f48:	080011b1 	.word	0x080011b1
 8000f4c:	080011bf 	.word	0x080011bf
 8000f50:	080011cd 	.word	0x080011cd
 8000f54:	080011db 	.word	0x080011db
 8000f58:	080011e9 	.word	0x080011e9
 8000f5c:	080011fd 	.word	0x080011fd
 8000f60:	0800120f 	.word	0x0800120f
 8000f64:	08001223 	.word	0x08001223
 8000f68:	08001237 	.word	0x08001237
 8000f6c:	0800124b 	.word	0x0800124b
 8000f70:	0800125d 	.word	0x0800125d
 8000f74:	08001271 	.word	0x08001271
 8000f78:	08001285 	.word	0x08001285
 8000f7c:	08001299 	.word	0x08001299
 8000f80:	0800129f 	.word	0x0800129f
 8000f84:	080012a5 	.word	0x080012a5
 8000f88:	080012ab 	.word	0x080012ab
 8000f8c:	080012b1 	.word	0x080012b1
 8000f90:	080012b7 	.word	0x080012b7
 8000f94:	080012c9 	.word	0x080012c9
 8000f98:	080012dd 	.word	0x080012dd
 8000f9c:	080012f1 	.word	0x080012f1
 8000fa0:	08001305 	.word	0x08001305
	case 0:     menu_vars_var1= NULL; break;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	e1b4      	b.n	8001314 <menu_vars+0x4d0>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000faa:	78fa      	ldrb	r2, [r7, #3]
 8000fac:	4613      	mov	r3, r2
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	4413      	add	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4a67      	ldr	r2, [pc, #412]	; (8001154 <menu_vars+0x310>)
 8000fb6:	4413      	add	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	e1ab      	b.n	8001314 <menu_vars+0x4d0>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000fbc:	78fa      	ldrb	r2, [r7, #3]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	011b      	lsls	r3, r3, #4
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4a63      	ldr	r2, [pc, #396]	; (8001154 <menu_vars+0x310>)
 8000fc8:	4413      	add	r3, r2
 8000fca:	3301      	adds	r3, #1
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	e1a1      	b.n	8001314 <menu_vars+0x4d0>
	case 3:     menu_vars_var1= &LFO[var_index].delay    ; break;
 8000fd0:	78fa      	ldrb	r2, [r7, #3]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4a5e      	ldr	r2, [pc, #376]	; (8001154 <menu_vars+0x310>)
 8000fdc:	4413      	add	r3, r2
 8000fde:	3304      	adds	r3, #4
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	e197      	b.n	8001314 <menu_vars+0x4d0>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000fe4:	78fa      	ldrb	r2, [r7, #3]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	011b      	lsls	r3, r3, #4
 8000fea:	4413      	add	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4a59      	ldr	r2, [pc, #356]	; (8001154 <menu_vars+0x310>)
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3303      	adds	r3, #3
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	e18d      	b.n	8001314 <menu_vars+0x4d0>
	case 5:     menu_vars_var1= &patch[var_index].target    ; break;  // velocity etc
 8000ff8:	78fa      	ldrb	r2, [r7, #3]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4a55      	ldr	r2, [pc, #340]	; (8001158 <menu_vars+0x314>)
 8001004:	4413      	add	r3, r2
 8001006:	3301      	adds	r3, #1
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	e183      	b.n	8001314 <menu_vars+0x4d0>
	case 6:     menu_vars_var1= NULL   ; break;
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	e180      	b.n	8001314 <menu_vars+0x4d0>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8001012:	78fb      	ldrb	r3, [r7, #3]
 8001014:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8001018:	fb02 f303 	mul.w	r3, r2, r3
 800101c:	4a4f      	ldr	r2, [pc, #316]	; (800115c <menu_vars+0x318>)
 800101e:	4413      	add	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	e177      	b.n	8001314 <menu_vars+0x4d0>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800102a:	fb02 f303 	mul.w	r3, r2, r3
 800102e:	4a4b      	ldr	r2, [pc, #300]	; (800115c <menu_vars+0x318>)
 8001030:	4413      	add	r3, r2
 8001032:	3301      	adds	r3, #1
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	e16d      	b.n	8001314 <menu_vars+0x4d0>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800103e:	fb02 f303 	mul.w	r3, r2, r3
 8001042:	4a46      	ldr	r2, [pc, #280]	; (800115c <menu_vars+0x318>)
 8001044:	4413      	add	r3, r2
 8001046:	3302      	adds	r3, #2
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	e163      	b.n	8001314 <menu_vars+0x4d0>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8001052:	fb02 f303 	mul.w	r3, r2, r3
 8001056:	4a41      	ldr	r2, [pc, #260]	; (800115c <menu_vars+0x318>)
 8001058:	4413      	add	r3, r2
 800105a:	3303      	adds	r3, #3
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	e159      	b.n	8001314 <menu_vars+0x4d0>
	case 11:     menu_vars_var1= NULL  ; break;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	e156      	b.n	8001314 <menu_vars+0x4d0>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8001066:	78fa      	ldrb	r2, [r7, #3]
 8001068:	4613      	mov	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	1a9b      	subs	r3, r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4a3b      	ldr	r2, [pc, #236]	; (8001160 <menu_vars+0x31c>)
 8001072:	4413      	add	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	e14d      	b.n	8001314 <menu_vars+0x4d0>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8001078:	78fa      	ldrb	r2, [r7, #3]
 800107a:	4613      	mov	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	1a9b      	subs	r3, r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	4a37      	ldr	r2, [pc, #220]	; (8001160 <menu_vars+0x31c>)
 8001084:	4413      	add	r3, r2
 8001086:	3301      	adds	r3, #1
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	e143      	b.n	8001314 <menu_vars+0x4d0>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 800108c:	78fa      	ldrb	r2, [r7, #3]
 800108e:	4613      	mov	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	1a9b      	subs	r3, r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4a32      	ldr	r2, [pc, #200]	; (8001160 <menu_vars+0x31c>)
 8001098:	4413      	add	r3, r2
 800109a:	3302      	adds	r3, #2
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	e139      	b.n	8001314 <menu_vars+0x4d0>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 80010a0:	78fa      	ldrb	r2, [r7, #3]
 80010a2:	4613      	mov	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	1a9b      	subs	r3, r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4a2d      	ldr	r2, [pc, #180]	; (8001160 <menu_vars+0x31c>)
 80010ac:	4413      	add	r3, r2
 80010ae:	3303      	adds	r3, #3
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	e12f      	b.n	8001314 <menu_vars+0x4d0>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 80010b4:	78fa      	ldrb	r2, [r7, #3]
 80010b6:	4613      	mov	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	1a9b      	subs	r3, r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4a28      	ldr	r2, [pc, #160]	; (8001160 <menu_vars+0x31c>)
 80010c0:	4413      	add	r3, r2
 80010c2:	3304      	adds	r3, #4
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	e125      	b.n	8001314 <menu_vars+0x4d0>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 80010c8:	78fa      	ldrb	r2, [r7, #3]
 80010ca:	4613      	mov	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	1a9b      	subs	r3, r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4a23      	ldr	r2, [pc, #140]	; (8001160 <menu_vars+0x31c>)
 80010d4:	4413      	add	r3, r2
 80010d6:	3305      	adds	r3, #5
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	e11b      	b.n	8001314 <menu_vars+0x4d0>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 80010dc:	78fa      	ldrb	r2, [r7, #3]
 80010de:	4613      	mov	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	1a9b      	subs	r3, r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4a1e      	ldr	r2, [pc, #120]	; (8001160 <menu_vars+0x31c>)
 80010e8:	4413      	add	r3, r2
 80010ea:	3306      	adds	r3, #6
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	e111      	b.n	8001314 <menu_vars+0x4d0>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 80010f0:	78fa      	ldrb	r2, [r7, #3]
 80010f2:	4613      	mov	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	1a9b      	subs	r3, r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4a19      	ldr	r2, [pc, #100]	; (8001160 <menu_vars+0x31c>)
 80010fc:	4413      	add	r3, r2
 80010fe:	3307      	adds	r3, #7
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	e107      	b.n	8001314 <menu_vars+0x4d0>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8001104:	78fa      	ldrb	r2, [r7, #3]
 8001106:	4613      	mov	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	1a9b      	subs	r3, r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	3308      	adds	r3, #8
 8001110:	4a13      	ldr	r2, [pc, #76]	; (8001160 <menu_vars+0x31c>)
 8001112:	4413      	add	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	e0fd      	b.n	8001314 <menu_vars+0x4d0>
	case 21:     menu_vars_var1= NULL   ; break;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	e0fa      	b.n	8001314 <menu_vars+0x4d0>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <menu_vars+0x320>)
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	e0f7      	b.n	8001314 <menu_vars+0x4d0>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <menu_vars+0x324>)
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	e0f4      	b.n	8001314 <menu_vars+0x4d0>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 800112a:	78fb      	ldrb	r3, [r7, #3]
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <menu_vars+0x320>)
 800112e:	4413      	add	r3, r2
 8001130:	3302      	adds	r3, #2
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	e0ee      	b.n	8001314 <menu_vars+0x4d0>
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8001136:	78fb      	ldrb	r3, [r7, #3]
 8001138:	3310      	adds	r3, #16
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <menu_vars+0x320>)
 800113c:	4413      	add	r3, r2
 800113e:	3303      	adds	r3, #3
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	e0e7      	b.n	8001314 <menu_vars+0x4d0>
 8001144:	20000b06 	.word	0x20000b06
 8001148:	2000042c 	.word	0x2000042c
 800114c:	200078d5 	.word	0x200078d5
 8001150:	0800d7d0 	.word	0x0800d7d0
 8001154:	20004108 	.word	0x20004108
 8001158:	20004f70 	.word	0x20004f70
 800115c:	200044b4 	.word	0x200044b4
 8001160:	20000158 	.word	0x20000158
 8001164:	20004f40 	.word	0x20004f40
 8001168:	20004f41 	.word	0x20004f41
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	3320      	adds	r3, #32
 8001170:	4a6b      	ldr	r2, [pc, #428]	; (8001320 <menu_vars+0x4dc>)
 8001172:	4413      	add	r3, r2
 8001174:	3304      	adds	r3, #4
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	e0cc      	b.n	8001314 <menu_vars+0x4d0>
	case 27: 	menu_vars_var1=&filter[var_index].cutoff_1 ;break;
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	4a69      	ldr	r2, [pc, #420]	; (8001324 <menu_vars+0x4e0>)
 8001180:	4413      	add	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	e0c6      	b.n	8001314 <menu_vars+0x4d0>
	case 28: 	menu_vars_var1=&filter[var_index].cutoff_2 ;break;  // fine tune
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	4a66      	ldr	r2, [pc, #408]	; (8001324 <menu_vars+0x4e0>)
 800118c:	4413      	add	r3, r2
 800118e:	3301      	adds	r3, #1
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	e0bf      	b.n	8001314 <menu_vars+0x4d0>
	case 29: 	menu_vars_var1=&filter[var_index].resonance ;break;
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	4a62      	ldr	r2, [pc, #392]	; (8001324 <menu_vars+0x4e0>)
 800119a:	4413      	add	r3, r2
 800119c:	3302      	adds	r3, #2
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	e0b8      	b.n	8001314 <menu_vars+0x4d0>
	case 30: 	menu_vars_var1=&filter[var_index].q_level  ;break;
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	4a5f      	ldr	r2, [pc, #380]	; (8001324 <menu_vars+0x4e0>)
 80011a8:	4413      	add	r3, r2
 80011aa:	3303      	adds	r3, #3
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	e0b1      	b.n	8001314 <menu_vars+0x4d0>
	case 31: 	menu_vars_var1=&filter[var_index].level;break;
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	4a5b      	ldr	r2, [pc, #364]	; (8001324 <menu_vars+0x4e0>)
 80011b6:	4413      	add	r3, r2
 80011b8:	3304      	adds	r3, #4
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	e0aa      	b.n	8001314 <menu_vars+0x4d0>
	case 32: 	menu_vars_var1=&filter[var_index].feedback ;break;
 80011be:	78fb      	ldrb	r3, [r7, #3]
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4a58      	ldr	r2, [pc, #352]	; (8001324 <menu_vars+0x4e0>)
 80011c4:	4413      	add	r3, r2
 80011c6:	3307      	adds	r3, #7
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	e0a3      	b.n	8001314 <menu_vars+0x4d0>
	case 33: 	menu_vars_var1=&filter[var_index].out_mix ;break;
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4a54      	ldr	r2, [pc, #336]	; (8001324 <menu_vars+0x4e0>)
 80011d2:	4413      	add	r3, r2
 80011d4:	3306      	adds	r3, #6
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	e09c      	b.n	8001314 <menu_vars+0x4d0>
	case 34: 	menu_vars_var1=&filter[var_index].poles ;break;
 80011da:	78fb      	ldrb	r3, [r7, #3]
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	4a51      	ldr	r2, [pc, #324]	; (8001324 <menu_vars+0x4e0>)
 80011e0:	4413      	add	r3, r2
 80011e2:	3305      	adds	r3, #5
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	e095      	b.n	8001314 <menu_vars+0x4d0>
	case 35:     menu_vars_var1= &patch[var_index].target_index    ; break;     // select note
 80011e8:	78fa      	ldrb	r2, [r7, #3]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	4a4d      	ldr	r2, [pc, #308]	; (8001328 <menu_vars+0x4e4>)
 80011f4:	4413      	add	r3, r2
 80011f6:	3302      	adds	r3, #2
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	e08b      	b.n	8001314 <menu_vars+0x4d0>
	case 36: 	menu_vars_var1=&patch[var_index].input1 ;break;
 80011fc:	78fa      	ldrb	r2, [r7, #3]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4a48      	ldr	r2, [pc, #288]	; (8001328 <menu_vars+0x4e4>)
 8001208:	4413      	add	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	e082      	b.n	8001314 <menu_vars+0x4d0>
	case 37: 	menu_vars_var1=&patch[var_index].input2 ;break;
 800120e:	78fa      	ldrb	r2, [r7, #3]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	4a43      	ldr	r2, [pc, #268]	; (8001328 <menu_vars+0x4e4>)
 800121a:	4413      	add	r3, r2
 800121c:	3303      	adds	r3, #3
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	e078      	b.n	8001314 <menu_vars+0x4d0>
	case 38: 	menu_vars_var1=&patch[var_index].in_mix ;break;
 8001222:	78fa      	ldrb	r2, [r7, #3]
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4a3e      	ldr	r2, [pc, #248]	; (8001328 <menu_vars+0x4e4>)
 800122e:	4413      	add	r3, r2
 8001230:	3304      	adds	r3, #4
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	e06e      	b.n	8001314 <menu_vars+0x4d0>
	case 39: 	menu_vars_var1=&patch[var_index].in_offset ;break;
 8001236:	78fa      	ldrb	r2, [r7, #3]
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	4a39      	ldr	r2, [pc, #228]	; (8001328 <menu_vars+0x4e4>)
 8001242:	4413      	add	r3, r2
 8001244:	3305      	adds	r3, #5
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	e064      	b.n	8001314 <menu_vars+0x4d0>
	case 40:     menu_vars_var1= &LFO_slave1[var_index].rate   ; break;
 800124a:	78fa      	ldrb	r2, [r7, #3]
 800124c:	4613      	mov	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4413      	add	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	4a35      	ldr	r2, [pc, #212]	; (800132c <menu_vars+0x4e8>)
 8001256:	4413      	add	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	e05b      	b.n	8001314 <menu_vars+0x4d0>
	case 41:     menu_vars_var1= &LFO_slave1[var_index].depth    ; break;
 800125c:	78fa      	ldrb	r2, [r7, #3]
 800125e:	4613      	mov	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	4413      	add	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	4a31      	ldr	r2, [pc, #196]	; (800132c <menu_vars+0x4e8>)
 8001268:	4413      	add	r3, r2
 800126a:	3301      	adds	r3, #1
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	e051      	b.n	8001314 <menu_vars+0x4d0>
	case 42:     menu_vars_var1= &LFO_slave1[var_index].delay    ; break;
 8001270:	78fa      	ldrb	r2, [r7, #3]
 8001272:	4613      	mov	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4413      	add	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4a2c      	ldr	r2, [pc, #176]	; (800132c <menu_vars+0x4e8>)
 800127c:	4413      	add	r3, r2
 800127e:	3304      	adds	r3, #4
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	e047      	b.n	8001314 <menu_vars+0x4d0>
	case 43:     menu_vars_var1= &LFO_slave1[var_index].offset    ; break;
 8001284:	78fa      	ldrb	r2, [r7, #3]
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4a27      	ldr	r2, [pc, #156]	; (800132c <menu_vars+0x4e8>)
 8001290:	4413      	add	r3, r2
 8001292:	3303      	adds	r3, #3
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	e03d      	b.n	8001314 <menu_vars+0x4d0>
	case 44: 	menu_vars_var1=&sampler.start_MSB ;break;
 8001298:	4b25      	ldr	r3, [pc, #148]	; (8001330 <menu_vars+0x4ec>)
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	e03a      	b.n	8001314 <menu_vars+0x4d0>
	case 45: 	menu_vars_var1=&sampler.start_LSB ;break;
 800129e:	4b25      	ldr	r3, [pc, #148]	; (8001334 <menu_vars+0x4f0>)
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	e037      	b.n	8001314 <menu_vars+0x4d0>
	case 46: 	menu_vars_var1=&sampler.end_MSB ;break;
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <menu_vars+0x4f4>)
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	e034      	b.n	8001314 <menu_vars+0x4d0>
	case 47: 	menu_vars_var1=&sampler.end_LSB ;break;
 80012aa:	4b24      	ldr	r3, [pc, #144]	; (800133c <menu_vars+0x4f8>)
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	e031      	b.n	8001314 <menu_vars+0x4d0>
	case 48: 	menu_vars_var1=&sampler.offset ;break;
 80012b0:	4b23      	ldr	r3, [pc, #140]	; (8001340 <menu_vars+0x4fc>)
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	e02e      	b.n	8001314 <menu_vars+0x4d0>
	case 49:     menu_vars_var1= &LFO_square[var_index].rate   ; break;
 80012b6:	78fa      	ldrb	r2, [r7, #3]
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4a20      	ldr	r2, [pc, #128]	; (8001344 <menu_vars+0x500>)
 80012c2:	4413      	add	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	e025      	b.n	8001314 <menu_vars+0x4d0>
	case 50:     menu_vars_var1= &LFO_square[var_index].depth    ; break;
 80012c8:	78fa      	ldrb	r2, [r7, #3]
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <menu_vars+0x500>)
 80012d4:	4413      	add	r3, r2
 80012d6:	3301      	adds	r3, #1
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	e01b      	b.n	8001314 <menu_vars+0x4d0>
	case 51:     menu_vars_var1= &LFO_square[var_index].offset    ; break;
 80012dc:	78fa      	ldrb	r2, [r7, #3]
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4a17      	ldr	r2, [pc, #92]	; (8001344 <menu_vars+0x500>)
 80012e8:	4413      	add	r3, r2
 80012ea:	3302      	adds	r3, #2
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	e011      	b.n	8001314 <menu_vars+0x4d0>
	case 52:     menu_vars_var1= &LFO_square[var_index].delay    ; break;
 80012f0:	78fa      	ldrb	r2, [r7, #3]
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <menu_vars+0x500>)
 80012fc:	4413      	add	r3, r2
 80012fe:	3303      	adds	r3, #3
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	e007      	b.n	8001314 <menu_vars+0x4d0>
	case 53:     menu_vars_var1= &LCD_Info[var_index]    ; break; // send as char
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	4a10      	ldr	r2, [pc, #64]	; (8001348 <menu_vars+0x504>)
 8001308:	4413      	add	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	e002      	b.n	8001314 <menu_vars+0x4d0>


	default :		menu_vars_var1= NULL   ; break;
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	bf00      	nop

	}
    // copy back address  ,ok
	// return the result number for later reference
	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
 8001314:	693b      	ldr	r3, [r7, #16]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20004f40 	.word	0x20004f40
 8001324:	200001e4 	.word	0x200001e4
 8001328:	20004f70 	.word	0x20004f70
 800132c:	200043b0 	.word	0x200043b0
 8001330:	20000212 	.word	0x20000212
 8001334:	20000213 	.word	0x20000213
 8001338:	20000214 	.word	0x20000214
 800133c:	20000215 	.word	0x20000215
 8001340:	20000208 	.word	0x20000208
 8001344:	200043ec 	.word	0x200043ec
 8001348:	20010cf0 	.word	0x20010cf0

0800134c <sampler_ram_record>:

void sampler_ram_record(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0

memcpy(	&RAM[sampler.ram_pos], input_holder,sizeof(input_holder));
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <sampler_ram_record+0x44>)
 8001352:	899b      	ldrh	r3, [r3, #12]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <sampler_ram_record+0x48>)
 8001358:	4413      	add	r3, r2
 800135a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800135e:	490e      	ldr	r1, [pc, #56]	; (8001398 <sampler_ram_record+0x4c>)
 8001360:	4618      	mov	r0, r3
 8001362:	f00a ffbd 	bl	800c2e0 <memcpy>
	sampler.ram_pos =sampler.ram_pos+512;
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <sampler_ram_record+0x44>)
 8001368:	899b      	ldrh	r3, [r3, #12]
 800136a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800136e:	b29a      	uxth	r2, r3
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <sampler_ram_record+0x44>)
 8001372:	819a      	strh	r2, [r3, #12]
if (sampler.ram_pos>16383) { sampler.ram_pos=0; sampler.record_enable=0; } // reset and stop record
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <sampler_ram_record+0x44>)
 8001376:	899b      	ldrh	r3, [r3, #12]
 8001378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800137c:	d305      	bcc.n	800138a <sampler_ram_record+0x3e>
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <sampler_ram_record+0x44>)
 8001380:	2200      	movs	r2, #0
 8001382:	819a      	strh	r2, [r3, #12]
 8001384:	4b02      	ldr	r3, [pc, #8]	; (8001390 <sampler_ram_record+0x44>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000204 	.word	0x20000204
 8001394:	20007adc 	.word	0x20007adc
 8001398:	20003cfc 	.word	0x20003cfc

0800139c <menu_parser>:




void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0

	    char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 80013a2:	4a6b      	ldr	r2, [pc, #428]	; (8001550 <menu_parser+0x1b4>)
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013ac:	e883 0003 	stmia.w	r3, {r0, r1}
	    char menu_string2[8]="hhhhhhhh";
 80013b0:	4a68      	ldr	r2, [pc, #416]	; (8001554 <menu_parser+0x1b8>)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013b8:	e883 0003 	stmia.w	r3, {r0, r1}
	    uint8_t string_counter=0;
 80013bc:	2300      	movs	r3, #0
 80013be:	75fb      	strb	r3, [r7, #23]
    	    uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 80013c0:	f640 23ae 	movw	r3, #2734	; 0xaae
 80013c4:	82bb      	strh	r3, [r7, #20]

	    if (string_search>menu_searchsize) {                    //this is ok
 80013c6:	4b64      	ldr	r3, [pc, #400]	; (8001558 <menu_parser+0x1bc>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	8aba      	ldrh	r2, [r7, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	f0c0 80bb 	bcc.w	8001548 <menu_parser+0x1ac>
		    return;    }    // check if bigger than search area
	    //if (menu_counter>240)  return;
	    memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 80013d2:	4b61      	ldr	r3, [pc, #388]	; (8001558 <menu_parser+0x1bc>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b60      	ldr	r3, [pc, #384]	; (800155c <menu_parser+0x1c0>)
 80013da:	441a      	add	r2, r3
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	6810      	ldr	r0, [r2, #0]
 80013e2:	6851      	ldr	r1, [r2, #4]
 80013e4:	c303      	stmia	r3!, {r0, r1}
	    ////////////////////////////
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 80013e6:	2300      	movs	r3, #0
 80013e8:	75fb      	strb	r3, [r7, #23]
 80013ea:	e092      	b.n	8001512 <menu_parser+0x176>

		    memcpy(menu_string2,menu_titles_final[string_counter],8);
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
 80013ee:	4a5c      	ldr	r2, [pc, #368]	; (8001560 <menu_parser+0x1c4>)
 80013f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	6810      	ldr	r0, [r2, #0]
 80013f8:	6851      	ldr	r1, [r2, #4]
 80013fa:	c303      	stmia	r3!, {r0, r1}
		    if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 80013fc:	1d39      	adds	r1, r7, #4
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	2208      	movs	r2, #8
 8001404:	4618      	mov	r0, r3
 8001406:	f00a ff81 	bl	800c30c <strncmp>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d17d      	bne.n	800150c <menu_parser+0x170>
		    {

			    if ((menu_counter>110 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 8001410:	4b54      	ldr	r3, [pc, #336]	; (8001564 <menu_parser+0x1c8>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	2b6e      	cmp	r3, #110	; 0x6e
 8001416:	d909      	bls.n	800142c <menu_parser+0x90>
 8001418:	4b52      	ldr	r3, [pc, #328]	; (8001564 <menu_parser+0x1c8>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	2b7f      	cmp	r3, #127	; 0x7f
 800141e:	d805      	bhi.n	800142c <menu_parser+0x90>
 8001420:	4b50      	ldr	r3, [pc, #320]	; (8001564 <menu_parser+0x1c8>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	3310      	adds	r3, #16
 8001426:	b29a      	uxth	r2, r3
 8001428:	4b4e      	ldr	r3, [pc, #312]	; (8001564 <menu_parser+0x1c8>)
 800142a:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>238)&&(menu_counter<256 )) menu_counter=menu_counter+16; // skip
 800142c:	4b4d      	ldr	r3, [pc, #308]	; (8001564 <menu_parser+0x1c8>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	2bee      	cmp	r3, #238	; 0xee
 8001432:	d909      	bls.n	8001448 <menu_parser+0xac>
 8001434:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <menu_parser+0x1c8>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	2bff      	cmp	r3, #255	; 0xff
 800143a:	d805      	bhi.n	8001448 <menu_parser+0xac>
 800143c:	4b49      	ldr	r3, [pc, #292]	; (8001564 <menu_parser+0x1c8>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	3310      	adds	r3, #16
 8001442:	b29a      	uxth	r2, r3
 8001444:	4b47      	ldr	r3, [pc, #284]	; (8001564 <menu_parser+0x1c8>)
 8001446:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>367)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
 8001448:	4b46      	ldr	r3, [pc, #280]	; (8001564 <menu_parser+0x1c8>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8001450:	d30a      	bcc.n	8001468 <menu_parser+0xcc>
 8001452:	4b44      	ldr	r3, [pc, #272]	; (8001564 <menu_parser+0x1c8>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800145a:	d205      	bcs.n	8001468 <menu_parser+0xcc>
 800145c:	4b41      	ldr	r3, [pc, #260]	; (8001564 <menu_parser+0x1c8>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	3310      	adds	r3, #16
 8001462:	b29a      	uxth	r2, r3
 8001464:	4b3f      	ldr	r3, [pc, #252]	; (8001564 <menu_parser+0x1c8>)
 8001466:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>495)&&(menu_counter<512 )) menu_counter=menu_counter+16; // skip
 8001468:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <menu_parser+0x1c8>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8001470:	d30a      	bcc.n	8001488 <menu_parser+0xec>
 8001472:	4b3c      	ldr	r3, [pc, #240]	; (8001564 <menu_parser+0x1c8>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800147a:	d205      	bcs.n	8001488 <menu_parser+0xec>
 800147c:	4b39      	ldr	r3, [pc, #228]	; (8001564 <menu_parser+0x1c8>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	3310      	adds	r3, #16
 8001482:	b29a      	uxth	r2, r3
 8001484:	4b37      	ldr	r3, [pc, #220]	; (8001564 <menu_parser+0x1c8>)
 8001486:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>623)&&(menu_counter<640 )) menu_counter=menu_counter+16; // skip
 8001488:	4b36      	ldr	r3, [pc, #216]	; (8001564 <menu_parser+0x1c8>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8001490:	d30a      	bcc.n	80014a8 <menu_parser+0x10c>
 8001492:	4b34      	ldr	r3, [pc, #208]	; (8001564 <menu_parser+0x1c8>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800149a:	d205      	bcs.n	80014a8 <menu_parser+0x10c>
 800149c:	4b31      	ldr	r3, [pc, #196]	; (8001564 <menu_parser+0x1c8>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	3310      	adds	r3, #16
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <menu_parser+0x1c8>)
 80014a6:	801a      	strh	r2, [r3, #0]
			    menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 80014a8:	7dfb      	ldrb	r3, [r7, #23]
 80014aa:	041a      	lsls	r2, r3, #16
 80014ac:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <menu_parser+0x1c8>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014b4:	18d1      	adds	r1, r2, r3
 80014b6:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <menu_parser+0x1cc>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <menu_parser+0x1d0>)
 80014be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    			    memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <menu_parser+0x1cc>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b29      	ldr	r3, [pc, #164]	; (8001570 <menu_parser+0x1d4>)
 80014cc:	18d0      	adds	r0, r2, r3
 80014ce:	4b22      	ldr	r3, [pc, #136]	; (8001558 <menu_parser+0x1bc>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	3b02      	subs	r3, #2
 80014d4:	4a21      	ldr	r2, [pc, #132]	; (800155c <menu_parser+0x1c0>)
 80014d6:	4413      	add	r3, r2
 80014d8:	2202      	movs	r2, #2
 80014da:	4619      	mov	r1, r3
 80014dc:	f00a ff00 	bl	800c2e0 <memcpy>
        			    menu_title_count++;
 80014e0:	4b21      	ldr	r3, [pc, #132]	; (8001568 <menu_parser+0x1cc>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	3301      	adds	r3, #1
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <menu_parser+0x1cc>)
 80014ea:	701a      	strb	r2, [r3, #0]
			    menu_counter++;
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <menu_parser+0x1c8>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <menu_parser+0x1c8>)
 80014f6:	801a      	strh	r2, [r3, #0]
			    space_check=0;
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <menu_parser+0x1d8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
			    string_search=string_search+8;     // advance search position
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <menu_parser+0x1bc>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	3308      	adds	r3, #8
 8001504:	b29a      	uxth	r2, r3
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <menu_parser+0x1bc>)
 8001508:	801a      	strh	r2, [r3, #0]
    			    return;}
 800150a:	e01e      	b.n	800154a <menu_parser+0x1ae>
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 800150c:	7dfb      	ldrb	r3, [r7, #23]
 800150e:	3301      	adds	r3, #1
 8001510:	75fb      	strb	r3, [r7, #23]
 8001512:	7dfb      	ldrb	r3, [r7, #23]
 8001514:	2b36      	cmp	r3, #54	; 0x36
 8001516:	f67f af69 	bls.w	80013ec <menu_parser+0x50>
    	    }
        if (space_check>1)  menu_counter++;   //this is ok
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <menu_parser+0x1d8>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d905      	bls.n	800152e <menu_parser+0x192>
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <menu_parser+0x1c8>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	3301      	adds	r3, #1
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <menu_parser+0x1c8>)
 800152c:	801a      	strh	r2, [r3, #0]
	    space_check++;  // count empty spaces or fill characters
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <menu_parser+0x1d8>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <menu_parser+0x1d8>)
 8001538:	701a      	strb	r2, [r3, #0]
	    string_search++;
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <menu_parser+0x1bc>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <menu_parser+0x1bc>)
 8001544:	801a      	strh	r2, [r3, #0]
	    return;
 8001546:	e000      	b.n	800154a <menu_parser+0x1ae>
		    return;    }    // check if bigger than search area
 8001548:	bf00      	nop

    }
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	0800cbec 	.word	0x0800cbec
 8001554:	0800cbf4 	.word	0x0800cbf4
 8001558:	20005290 	.word	0x20005290
 800155c:	0800cd18 	.word	0x0800cd18
 8001560:	2000042c 	.word	0x2000042c
 8001564:	20005292 	.word	0x20005292
 8001568:	20005295 	.word	0x20005295
 800156c:	20005298 	.word	0x20005298
 8001570:	20005698 	.word	0x20005698
 8001574:	20005294 	.word	0x20005294

08001578 <patch_target_parse>:

void patch_target_parse(void){    // records ptr for target options , works ok
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
uint8_t skip=0;
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
		uint8_t counter;

for (counter=0;counter<20;counter++){
 8001582:	2300      	movs	r3, #0
 8001584:	73bb      	strb	r3, [r7, #14]
 8001586:	e0f5      	b.n	8001774 <patch_target_parse+0x1fc>

			uint16_t* output_hold;
			uint8_t input_hold=patch[counter].input1;
 8001588:	7bba      	ldrb	r2, [r7, #14]
 800158a:	497f      	ldr	r1, [pc, #508]	; (8001788 <patch_target_parse+0x210>)
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	440b      	add	r3, r1
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	717b      	strb	r3, [r7, #5]
			if (patch[counter].input1>=menu_lookup_count) patch[counter].input1=0;    // limit
 800159a:	7bba      	ldrb	r2, [r7, #14]
 800159c:	497a      	ldr	r1, [pc, #488]	; (8001788 <patch_target_parse+0x210>)
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	440b      	add	r3, r1
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b36      	cmp	r3, #54	; 0x36
 80015ac:	d908      	bls.n	80015c0 <patch_target_parse+0x48>
 80015ae:	7bba      	ldrb	r2, [r7, #14]
 80015b0:	4975      	ldr	r1, [pc, #468]	; (8001788 <patch_target_parse+0x210>)
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	440b      	add	r3, r1
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]

			switch(input_hold&3){     // lfo now , can add adsr later
 80015c0:	797b      	ldrb	r3, [r7, #5]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d840      	bhi.n	800164c <patch_target_parse+0xd4>
 80015ca:	a201      	add	r2, pc, #4	; (adr r2, 80015d0 <patch_target_parse+0x58>)
 80015cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d0:	080015e1 	.word	0x080015e1
 80015d4:	080015fb 	.word	0x080015fb
 80015d8:	08001617 	.word	0x08001617
 80015dc:	08001633 	.word	0x08001633

						case 0:   output_hold=&LFO[input_hold>>2].out[0];break;
 80015e0:	797b      	ldrb	r3, [r7, #5]
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	461a      	mov	r2, r3
 80015e8:	4613      	mov	r3, r2
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4a66      	ldr	r2, [pc, #408]	; (800178c <patch_target_parse+0x214>)
 80015f2:	4413      	add	r3, r2
 80015f4:	3306      	adds	r3, #6
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	e028      	b.n	800164c <patch_target_parse+0xd4>
						case 1:   output_hold=&LFO[input_hold>>2].out_saw[0];break;
 80015fa:	797b      	ldrb	r3, [r7, #5]
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	4613      	mov	r3, r2
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	3318      	adds	r3, #24
 800160c:	4a5f      	ldr	r2, [pc, #380]	; (800178c <patch_target_parse+0x214>)
 800160e:	4413      	add	r3, r2
 8001610:	3302      	adds	r3, #2
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	e01a      	b.n	800164c <patch_target_parse+0xd4>
						case 2:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 8001616:	797b      	ldrb	r3, [r7, #5]
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	b2db      	uxtb	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	4613      	mov	r3, r2
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	3328      	adds	r3, #40	; 0x28
 8001628:	4a58      	ldr	r2, [pc, #352]	; (800178c <patch_target_parse+0x214>)
 800162a:	4413      	add	r3, r2
 800162c:	3306      	adds	r3, #6
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	e00c      	b.n	800164c <patch_target_parse+0xd4>
						//case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
						case 3:   output_hold=&LFO_square[input_hold>>2].out[0];break;
 8001632:	797b      	ldrb	r3, [r7, #5]
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	b2db      	uxtb	r3, r3
 8001638:	461a      	mov	r2, r3
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4a53      	ldr	r2, [pc, #332]	; (8001790 <patch_target_parse+0x218>)
 8001644:	4413      	add	r3, r2
 8001646:	3304      	adds	r3, #4
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	bf00      	nop
			}

			patch[counter].in1_ptr=output_hold;   // sets input pointer to first sample , default is lfo[0].out [0]
 800164c:	7bba      	ldrb	r2, [r7, #14]
 800164e:	494e      	ldr	r1, [pc, #312]	; (8001788 <patch_target_parse+0x210>)
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	440b      	add	r3, r1
 800165a:	3320      	adds	r3, #32
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	601a      	str	r2, [r3, #0]
			if (patch[counter].target) {  // test if above zero
 8001660:	7bba      	ldrb	r2, [r7, #14]
 8001662:	4949      	ldr	r1, [pc, #292]	; (8001788 <patch_target_parse+0x210>)
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	440b      	add	r3, r1
 800166e:	3301      	adds	r3, #1
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d07b      	beq.n	800176e <patch_target_parse+0x1f6>
				uint8_t target_input=patch[counter].target; // copy to avoid messed up pointer
 8001676:	7bba      	ldrb	r2, [r7, #14]
 8001678:	4943      	ldr	r1, [pc, #268]	; (8001788 <patch_target_parse+0x210>)
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	440b      	add	r3, r1
 8001684:	3301      	adds	r3, #1
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	73fb      	strb	r3, [r7, #15]
 800168e:	e00a      	b.n	80016a6 <patch_target_parse+0x12e>
					if (patch_skip_list[target_input]==1)  target_input++;
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	4a40      	ldr	r2, [pc, #256]	; (8001794 <patch_target_parse+0x21c>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d102      	bne.n	80016a0 <patch_target_parse+0x128>
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	3301      	adds	r3, #1
 800169e:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	3301      	adds	r3, #1
 80016a4:	73fb      	strb	r3, [r7, #15]
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	2b36      	cmp	r3, #54	; 0x36
 80016aa:	d9f1      	bls.n	8001690 <patch_target_parse+0x118>
				}  // test against list and skip option if on 1
				if (target_input>(menu_lookup_count-1)) target_input=menu_lookup_count-1;
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	2b36      	cmp	r3, #54	; 0x36
 80016b0:	d901      	bls.n	80016b6 <patch_target_parse+0x13e>
 80016b2:	2336      	movs	r3, #54	; 0x36
 80016b4:	71fb      	strb	r3, [r7, #7]
				if (target_input!=35)  {     // make target index is not selected
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2b23      	cmp	r3, #35	; 0x23
 80016ba:	d04e      	beq.n	800175a <patch_target_parse+0x1e2>
			patch[counter].target=target_input; // write back corrected value
 80016bc:	7bba      	ldrb	r2, [r7, #14]
 80016be:	4932      	ldr	r1, [pc, #200]	; (8001788 <patch_target_parse+0x210>)
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	3301      	adds	r3, #1
 80016cc:	79fa      	ldrb	r2, [r7, #7]
 80016ce:	701a      	strb	r2, [r3, #0]

			uint8_t target_index=patch[counter].target_index;
 80016d0:	7bba      	ldrb	r2, [r7, #14]
 80016d2:	492d      	ldr	r1, [pc, #180]	; (8001788 <patch_target_parse+0x210>)
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	3302      	adds	r3, #2
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	71bb      	strb	r3, [r7, #6]
			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 80016e4:	79bb      	ldrb	r3, [r7, #6]
 80016e6:	4a2c      	ldr	r2, [pc, #176]	; (8001798 <patch_target_parse+0x220>)
 80016e8:	5cd3      	ldrb	r3, [r2, r3]
 80016ea:	79ba      	ldrb	r2, [r7, #6]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d903      	bls.n	80016f8 <patch_target_parse+0x180>
			{	target_index=menu_vars_index_limit[target_index]; }
 80016f0:	79bb      	ldrb	r3, [r7, #6]
 80016f2:	4a29      	ldr	r2, [pc, #164]	; (8001798 <patch_target_parse+0x220>)
 80016f4:	5cd3      	ldrb	r3, [r2, r3]
 80016f6:	71bb      	strb	r3, [r7, #6]
			patch[counter].target_index=target_index;
 80016f8:	7bba      	ldrb	r2, [r7, #14]
 80016fa:	4923      	ldr	r1, [pc, #140]	; (8001788 <patch_target_parse+0x210>)
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	3302      	adds	r3, #2
 8001708:	79ba      	ldrb	r2, [r7, #6]
 800170a:	701a      	strb	r2, [r3, #0]
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	4a23      	ldr	r2, [pc, #140]	; (800179c <patch_target_parse+0x224>)
 8001710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001714:	79ba      	ldrb	r2, [r7, #6]
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fb93 	bl	8000e44 <menu_vars>
 800171e:	6038      	str	r0, [r7, #0]
			if (target_out_ptr)           {patch[counter].out_ptr =target_out_ptr;     // write ptr
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d023      	beq.n	800176e <patch_target_parse+0x1f6>
 8001726:	7bba      	ldrb	r2, [r7, #14]
 8001728:	4917      	ldr	r1, [pc, #92]	; (8001788 <patch_target_parse+0x210>)
 800172a:	4613      	mov	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	440b      	add	r3, r1
 8001734:	331c      	adds	r3, #28
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	601a      	str	r2, [r3, #0]
			patch[counter].limiter=menu_vars_limiter[menu_vars_ref]; }      // writes limiter value for particular patch , deosnt save
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <patch_target_parse+0x228>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	4619      	mov	r1, r3
 8001740:	7bba      	ldrb	r2, [r7, #14]
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <patch_target_parse+0x22c>)
 8001744:	5c58      	ldrb	r0, [r3, r1]
 8001746:	4910      	ldr	r1, [pc, #64]	; (8001788 <patch_target_parse+0x210>)
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	440b      	add	r3, r1
 8001752:	3324      	adds	r3, #36	; 0x24
 8001754:	4602      	mov	r2, r0
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	e009      	b.n	800176e <patch_target_parse+0x1f6>
				}
				else patch[counter].target=0;  // write back 0 if failed
 800175a:	7bba      	ldrb	r2, [r7, #14]
 800175c:	490a      	ldr	r1, [pc, #40]	; (8001788 <patch_target_parse+0x210>)
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	440b      	add	r3, r1
 8001768:	3301      	adds	r3, #1
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
for (counter=0;counter<20;counter++){
 800176e:	7bbb      	ldrb	r3, [r7, #14]
 8001770:	3301      	adds	r3, #1
 8001772:	73bb      	strb	r3, [r7, #14]
 8001774:	7bbb      	ldrb	r3, [r7, #14]
 8001776:	2b13      	cmp	r3, #19
 8001778:	f67f af06 	bls.w	8001588 <patch_target_parse+0x10>
			}
		}
	}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20004f70 	.word	0x20004f70
 800178c:	20004108 	.word	0x20004108
 8001790:	200043ec 	.word	0x200043ec
 8001794:	0800d840 	.word	0x0800d840
 8001798:	0800d7d0 	.word	0x0800d7d0
 800179c:	2000042c 	.word	0x2000042c
 80017a0:	200078d5 	.word	0x200078d5
 80017a4:	0800d808 	.word	0x0800d808

080017a8 <patch_target_replace>:
			*ptr_to_modify =var_replaced;   // replace original value,ok
		}
	}
}

	void patch_target_replace(void){					// sttaight value replace  ,ok
 80017a8:	b490      	push	{r4, r7}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
	    uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 80017ae:	4b36      	ldr	r3, [pc, #216]	; (8001888 <patch_target_replace+0xe0>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	737b      	strb	r3, [r7, #13]
	    uint8_t counter;
	    for (counter=0;counter<20;counter++){
 80017b8:	2300      	movs	r3, #0
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	e05a      	b.n	8001874 <patch_target_replace+0xcc>



		    if (patch[counter].target) {         // check first for enable
 80017be:	7bfa      	ldrb	r2, [r7, #15]
 80017c0:	4932      	ldr	r1, [pc, #200]	; (800188c <patch_target_replace+0xe4>)
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	440b      	add	r3, r1
 80017cc:	3301      	adds	r3, #1
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d04c      	beq.n	800186e <patch_target_replace+0xc6>

			    patch[counter].output[loop_position]=*(patch[counter].in1_ptr+(loop_position));   //write output here
 80017d4:	7bfa      	ldrb	r2, [r7, #15]
 80017d6:	492d      	ldr	r1, [pc, #180]	; (800188c <patch_target_replace+0xe4>)
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	440b      	add	r3, r1
 80017e2:	3320      	adds	r3, #32
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	7b7b      	ldrb	r3, [r7, #13]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	7bfa      	ldrb	r2, [r7, #15]
 80017ee:	7b79      	ldrb	r1, [r7, #13]
 80017f0:	881c      	ldrh	r4, [r3, #0]
 80017f2:	4826      	ldr	r0, [pc, #152]	; (800188c <patch_target_replace+0xe4>)
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4403      	add	r3, r0
 8001802:	4622      	mov	r2, r4
 8001804:	80da      	strh	r2, [r3, #6]


			    uint8_t  *ptr_to_modify =patch[counter].out_ptr;       // select address , not always 8 bit ,ok
 8001806:	7bfa      	ldrb	r2, [r7, #15]
 8001808:	4920      	ldr	r1, [pc, #128]	; (800188c <patch_target_replace+0xe4>)
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	440b      	add	r3, r1
 8001814:	331c      	adds	r3, #28
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60bb      	str	r3, [r7, #8]
			    uint16_t lfo_out_temp=  (patch[counter].output [loop_position])>>8;  // 0-256,
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	7b79      	ldrb	r1, [r7, #13]
 800181e:	481b      	ldr	r0, [pc, #108]	; (800188c <patch_target_replace+0xe4>)
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4403      	add	r3, r0
 800182e:	88db      	ldrh	r3, [r3, #6]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	80fb      	strh	r3, [r7, #6]
			    uint8_t lfo_mod1=ptr_to_modify; //ok
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	717b      	strb	r3, [r7, #5]

			    uint8_t  var_replaced =  lfo_out_temp &255 ;   // grab lfo out *    data to be modfied
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	73bb      	strb	r3, [r7, #14]

			    if (var_replaced>patch[counter].limiter) var_replaced=patch[counter].limiter;  // limit lfo output
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	4913      	ldr	r1, [pc, #76]	; (800188c <patch_target_replace+0xe4>)
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	3324      	adds	r3, #36	; 0x24
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	7bba      	ldrb	r2, [r7, #14]
 8001850:	429a      	cmp	r2, r3
 8001852:	d909      	bls.n	8001868 <patch_target_replace+0xc0>
 8001854:	7bfa      	ldrb	r2, [r7, #15]
 8001856:	490d      	ldr	r1, [pc, #52]	; (800188c <patch_target_replace+0xe4>)
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	3324      	adds	r3, #36	; 0x24
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	73bb      	strb	r3, [r7, #14]

			    *ptr_to_modify =var_replaced;   // replace original value,ok
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	7bba      	ldrb	r2, [r7, #14]
 800186c:	701a      	strb	r2, [r3, #0]
	    for (counter=0;counter<20;counter++){
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	3301      	adds	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	2b13      	cmp	r3, #19
 8001878:	d9a1      	bls.n	80017be <patch_target_replace+0x16>
		    }
	    }
    }
 800187a:	bf00      	nop
 800187c:	bf00      	nop
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bc90      	pop	{r4, r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	200058ac 	.word	0x200058ac
 800188c:	20004f70 	.word	0x20004f70

08001890 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable
	{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
		if(TIM10==htim->Instance){     // send spi to display , ok
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a2e      	ldr	r2, [pc, #184]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d118      	bne.n	80018d4 <HAL_TIM_PeriodElapsedCallback+0x44>
		    HAL_SPI_Transmit_DMA(&hspi2,spi_tx_block+block_counter,54);
 80018a2:	4b2e      	ldr	r3, [pc, #184]	; (800195c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80018aa:	4413      	add	r3, r2
 80018ac:	2236      	movs	r2, #54	; 0x36
 80018ae:	4619      	mov	r1, r3
 80018b0:	482c      	ldr	r0, [pc, #176]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80018b2:	f008 fce5 	bl	800a280 <HAL_SPI_Transmit_DMA>
		    			if (block_counter<3456) block_counter=block_counter+54; else block_counter=0;
 80018b6:	4b29      	ldr	r3, [pc, #164]	; (800195c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 80018be:	d206      	bcs.n	80018ce <HAL_TIM_PeriodElapsedCallback+0x3e>
 80018c0:	4b26      	ldr	r3, [pc, #152]	; (800195c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	3336      	adds	r3, #54	; 0x36
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	4b24      	ldr	r3, [pc, #144]	; (800195c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80018ca:	801a      	strh	r2, [r3, #0]
 80018cc:	e002      	b.n	80018d4 <HAL_TIM_PeriodElapsedCallback+0x44>
 80018ce:	4b23      	ldr	r3, [pc, #140]	; (800195c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	801a      	strh	r2, [r3, #0]

		}
		if(TIM3==htim->Instance)			//
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a23      	ldr	r2, [pc, #140]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d137      	bne.n	800194e <HAL_TIM_PeriodElapsedCallback+0xbe>
	{
		    time_proc++;
 80018de:	4b23      	ldr	r3, [pc, #140]	; (800196c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	3301      	adds	r3, #1
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	4b21      	ldr	r3, [pc, #132]	; (800196c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80018e8:	801a      	strh	r2, [r3, #0]
			play_hold=play_sample[sample_point<<1]; // this is 2
 80018ea:	4b21      	ldr	r3, [pc, #132]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4a20      	ldr	r2, [pc, #128]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80018f4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80018f8:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80018fa:	801a      	strh	r2, [r3, #0]
			play_hold2=play_sample[(sample_point<<1)+1];
 80018fc:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	b29b      	uxth	r3, r3
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	3301      	adds	r3, #1
 8001906:	4a1b      	ldr	r2, [pc, #108]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001908:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <HAL_TIM_PeriodElapsedCallback+0xec>)
 800190e:	801a      	strh	r2, [r3, #0]
			if (sample_point>1022)    {bank_write=2;sample_point=0;} else sample_point++;
 8001910:	4b17      	ldr	r3, [pc, #92]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	b29b      	uxth	r3, r3
 8001916:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800191a:	4293      	cmp	r3, r2
 800191c:	d906      	bls.n	800192c <HAL_TIM_PeriodElapsedCallback+0x9c>
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001920:	2202      	movs	r2, #2
 8001922:	801a      	strh	r2, [r3, #0]
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001926:	2200      	movs	r2, #0
 8001928:	801a      	strh	r2, [r3, #0]
 800192a:	e006      	b.n	800193a <HAL_TIM_PeriodElapsedCallback+0xaa>
 800192c:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	b29b      	uxth	r3, r3
 8001932:	3301      	adds	r3, #1
 8001934:	b29a      	uxth	r2, r3
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001938:	801a      	strh	r2, [r3, #0]

	TIM3->CCR1=play_hold ;  // keep readin sample storage
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	b29a      	uxth	r2, r3
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001942:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=play_hold2 ;   // load up counter on ch2
 8001944:	4b0d      	ldr	r3, [pc, #52]	; (800197c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800194c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40014400 	.word	0x40014400
 800195c:	20010ae0 	.word	0x20010ae0
 8001960:	2000fae0 	.word	0x2000fae0
 8001964:	200112c4 	.word	0x200112c4
 8001968:	40000400 	.word	0x40000400
 800196c:	20004104 	.word	0x20004104
 8001970:	20001b0c 	.word	0x20001b0c
 8001974:	20000b08 	.word	0x20000b08
 8001978:	20001b0e 	.word	0x20001b0e
 800197c:	20001b10 	.word	0x20001b10
 8001980:	2000014e 	.word	0x2000014e

08001984 <analoginputloopb>:



    void analoginputloopb(void){  //works ,getting obsolete
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0


	    menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 8001988:	4b32      	ldr	r3, [pc, #200]	; (8001a54 <analoginputloopb+0xd0>)
 800198a:	889b      	ldrh	r3, [r3, #4]
 800198c:	091b      	lsrs	r3, r3, #4
 800198e:	b29b      	uxth	r3, r3
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <analoginputloopb+0xd4>)
 8001994:	701a      	strb	r2, [r3, #0]
		//    menuSelectX=cursor_menu[2]&15;  // Y select inside page
        		    cursor_menu[1]=0;
 8001996:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <analoginputloopb+0xd0>)
 8001998:	2200      	movs	r2, #0
 800199a:	805a      	strh	r2, [r3, #2]
   		    cursor_menu[2]=enc2_dir;
 800199c:	4b2f      	ldr	r3, [pc, #188]	; (8001a5c <analoginputloopb+0xd8>)
 800199e:	881a      	ldrh	r2, [r3, #0]
 80019a0:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <analoginputloopb+0xd0>)
 80019a2:	809a      	strh	r2, [r3, #4]

	    enc_temp=(((TIM2->CNT)+32767)>>1)&65535		;  // read counter tim2 ,divider ok
 80019a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80019ae:	337f      	adds	r3, #127	; 0x7f
 80019b0:	085b      	lsrs	r3, r3, #1
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <analoginputloopb+0xdc>)
 80019b6:	801a      	strh	r2, [r3, #0]
	 //   enc2_store[enc2_store_count]=(((TIM4->CNT)+32767)>>1)&65535;  // read counter tim4, noisy
	    enc2_temp=(((TIM4->CNT)+32767)>>1)&65535;
 80019b8:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <analoginputloopb+0xe0>)
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80019c0:	337f      	adds	r3, #127	; 0x7f
 80019c2:	085b      	lsrs	r3, r3, #1
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <analoginputloopb+0xe4>)
 80019c8:	801a      	strh	r2, [r3, #0]
	    enc2_store3=enc2_store2>>2;
	    enc2_temp=enc2_store3;
*/


	    if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;   //menu itme value change
 80019ca:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <analoginputloopb+0xdc>)
 80019cc:	881a      	ldrh	r2, [r3, #0]
 80019ce:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <analoginputloopb+0xe8>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d908      	bls.n	80019e8 <analoginputloopb+0x64>
 80019d6:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <analoginputloopb+0xec>)
 80019d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	3b01      	subs	r3, #1
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <analoginputloopb+0xec>)
 80019e6:	801a      	strh	r2, [r3, #0]
	    if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 80019e8:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <analoginputloopb+0xdc>)
 80019ea:	881a      	ldrh	r2, [r3, #0]
 80019ec:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <analoginputloopb+0xe8>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d208      	bcs.n	8001a06 <analoginputloopb+0x82>
 80019f4:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <analoginputloopb+0xec>)
 80019f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	3301      	adds	r3, #1
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	b21a      	sxth	r2, r3
 8001a02:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <analoginputloopb+0xec>)
 8001a04:	801a      	strh	r2, [r3, #0]


   //   if (enc2_temp>511) enc2_temp=511;  //mem overflow somewhere

      enc2_dir=65535-enc2_temp; //temp to try source data
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <analoginputloopb+0xe4>)
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <analoginputloopb+0xd8>)
 8001a10:	801a      	strh	r2, [r3, #0]


      if (enc_dir>32760) enc_dir=0;
 8001a12:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <analoginputloopb+0xec>)
 8001a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a18:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	dd02      	ble.n	8001a26 <analoginputloopb+0xa2>
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <analoginputloopb+0xec>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	801a      	strh	r2, [r3, #0]
			    if (enc_dir<0) enc_dir=16383;
 8001a26:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <analoginputloopb+0xec>)
 8001a28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	da03      	bge.n	8001a38 <analoginputloopb+0xb4>
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <analoginputloopb+0xec>)
 8001a32:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001a36:	801a      	strh	r2, [r3, #0]

			    enc_tempB=enc_temp;
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <analoginputloopb+0xdc>)
 8001a3a:	881a      	ldrh	r2, [r3, #0]
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <analoginputloopb+0xe8>)
 8001a3e:	801a      	strh	r2, [r3, #0]

					    enc2_tempB=enc2_temp; // to effective as counter not getting reset
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <analoginputloopb+0xe4>)
 8001a42:	881a      	ldrh	r2, [r3, #0]
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <analoginputloopb+0xf0>)
 8001a46:	801a      	strh	r2, [r3, #0]


 //   potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count


    }
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20003354 	.word	0x20003354
 8001a58:	20000afe 	.word	0x20000afe
 8001a5c:	2000333e 	.word	0x2000333e
 8001a60:	20003336 	.word	0x20003336
 8001a64:	40000800 	.word	0x40000800
 8001a68:	2000333a 	.word	0x2000333a
 8001a6c:	20003338 	.word	0x20003338
 8001a70:	20003340 	.word	0x20003340
 8001a74:	2000333c 	.word	0x2000333c

08001a78 <note_reset>:


void note_reset (void){          // reset deafult values before modulation , in case it gets left  with no modulator
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0

	note[0].velocity=255;note[1].velocity=255;note[2].velocity=255;note[3].velocity=255;note[4].velocity=255;note[5].velocity=255;note[6].velocity=255
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <note_reset+0x78>)
 8001a7e:	22ff      	movs	r2, #255	; 0xff
 8001a80:	71da      	strb	r2, [r3, #7]
 8001a82:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <note_reset+0x78>)
 8001a84:	22ff      	movs	r2, #255	; 0xff
 8001a86:	755a      	strb	r2, [r3, #21]
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <note_reset+0x78>)
 8001a8a:	22ff      	movs	r2, #255	; 0xff
 8001a8c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001a90:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <note_reset+0x78>)
 8001a92:	22ff      	movs	r2, #255	; 0xff
 8001a94:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8001a98:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <note_reset+0x78>)
 8001a9a:	22ff      	movs	r2, #255	; 0xff
 8001a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <note_reset+0x78>)
 8001aa2:	22ff      	movs	r2, #255	; 0xff
 8001aa4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <note_reset+0x78>)
 8001aaa:	22ff      	movs	r2, #255	; 0xff
 8001aac:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
																;note[0].detune=0;note[1].detune=0;note[2].detune=0;note[3].detune=0;note[4].detune=0;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <note_reset+0x78>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	721a      	strb	r2, [r3, #8]
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <note_reset+0x78>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	759a      	strb	r2, [r3, #22]
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <note_reset+0x78>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <note_reset+0x78>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <note_reset+0x78>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	note[5].detune=0;note[6].detune=0;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <note_reset+0x78>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <note_reset+0x78>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c


}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	20000158 	.word	0x20000158

08001af4 <main_initial>:

void main_initial(void){
 8001af4:	b5b0      	push	{r4, r5, r7, lr}
 8001af6:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 8001afa:	af04      	add	r7, sp, #16
	const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8001afc:	4bc4      	ldr	r3, [pc, #784]	; (8001e10 <main_initial+0x31c>)
 8001afe:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258



	//LL_SPI_Enable(SPI2);

	  HAL_SPI_Init(&hspi2); // write to register hspi2
 8001b02:	48c4      	ldr	r0, [pc, #784]	; (8001e14 <main_initial+0x320>)
 8001b04:	f007 ff44 	bl	8009990 <HAL_SPI_Init>
	  HAL_SPI_Init(&hspi1); // write to register hspi2
 8001b08:	48c3      	ldr	r0, [pc, #780]	; (8001e18 <main_initial+0x324>)
 8001b0a:	f007 ff41 	bl	8009990 <HAL_SPI_Init>
	  // lcd_init(); // keep this late or have issues
	//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
	//TIM1->CCER=0;
	HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8001b0e:	48c3      	ldr	r0, [pc, #780]	; (8001e1c <main_initial+0x328>)
 8001b10:	f008 fedc 	bl	800a8cc <HAL_TIM_Base_Start_IT>
	TIM3->CCER=0;
 8001b14:	4bc2      	ldr	r3, [pc, #776]	; (8001e20 <main_initial+0x32c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	621a      	str	r2, [r3, #32]
	HAL_TIM_Base_Start(&htim2);
 8001b1a:	48c2      	ldr	r0, [pc, #776]	; (8001e24 <main_initial+0x330>)
 8001b1c:	f008 fe7c 	bl	800a818 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8001b20:	48c1      	ldr	r0, [pc, #772]	; (8001e28 <main_initial+0x334>)
 8001b22:	f008 fe79 	bl	800a818 <HAL_TIM_Base_Start>
	//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001b26:	2100      	movs	r1, #0
 8001b28:	48bc      	ldr	r0, [pc, #752]	; (8001e1c <main_initial+0x328>)
 8001b2a:	f008 ffe3 	bl	800aaf4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001b2e:	2104      	movs	r1, #4
 8001b30:	48ba      	ldr	r0, [pc, #744]	; (8001e1c <main_initial+0x328>)
 8001b32:	f008 ffdf 	bl	800aaf4 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
	TIM2->CNT=32000;
 8001b36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b3a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001b3e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_ADC_Start(&hadc1);
 8001b40:	48ba      	ldr	r0, [pc, #744]	; (8001e2c <main_initial+0x338>)
 8001b42:	f004 fc39 	bl	80063b8 <HAL_ADC_Start>
	HAL_ADC_Start_DMA(&hadc1, adc_source, 3072); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8001b46:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001b4a:	49b9      	ldr	r1, [pc, #740]	; (8001e30 <main_initial+0x33c>)
 8001b4c:	48b7      	ldr	r0, [pc, #732]	; (8001e2c <main_initial+0x338>)
 8001b4e:	f004 fd73 	bl	8006638 <HAL_ADC_Start_DMA>
	HAL_DMA_Init(&hdma_spi2_tx);
 8001b52:	48b8      	ldr	r0, [pc, #736]	; (8001e34 <main_initial+0x340>)
 8001b54:	f005 fd6e 	bl	8007634 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi1_rx);
 8001b58:	48b7      	ldr	r0, [pc, #732]	; (8001e38 <main_initial+0x344>)
 8001b5a:	f005 fd6b 	bl	8007634 <HAL_DMA_Init>

	HAL_I2C_MspInit(&hi2c2);
 8001b5e:	48b7      	ldr	r0, [pc, #732]	; (8001e3c <main_initial+0x348>)
 8001b60:	f003 fff6 	bl	8005b50 <HAL_I2C_MspInit>
	HAL_SPI_Receive(&hspi1, return_spi1, 2, 1000);   // manuf return sif correct , 0xEF,0x17 which is correct, then repeats when more request

	*/


	HAL_Delay(5);
 8001b64:	2005      	movs	r0, #5
 8001b66:	f004 fbbf 	bl	80062e8 <HAL_Delay>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // high end

		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);*/


	uint8_t potSource2[64]={0};    // { [0 ... 112] = 64 };
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8001b70:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001b74:	223c      	movs	r2, #60	; 0x3c
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f00a fbbf 	bl	800c2fc <memset>
	uint16_t mem_count2=0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8a7 3256 	strh.w	r3, [r7, #598]	; 0x256
	uint16_t mem_counter=0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f8a7 325e 	strh.w	r3, [r7, #606]	; 0x25e
	uint8_t flash_test;
	uint8_t send_spi1[520];


	for(mem_counter=0;mem_counter<64;mem_counter++){       // spi write test
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8a7 325e 	strh.w	r3, [r7, #606]	; 0x25e
 8001b90:	e070      	b.n	8001c74 <main_initial+0x180>

	if ((mem_counter&7)==0)                        flash_test=  flash_sector_erase( (mem_counter<<9) );  // erase 4kbyte
 8001b92:	f8b7 325e 	ldrh.w	r3, [r7, #606]	; 0x25e
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d108      	bne.n	8001bb0 <main_initial+0xbc>
 8001b9e:	f8b7 325e 	ldrh.w	r3, [r7, #606]	; 0x25e
 8001ba2:	025b      	lsls	r3, r3, #9
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fff7 	bl	8000b98 <flash_sector_erase>
 8001baa:	4603      	mov	r3, r0
 8001bac:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f


	send_spi1[0]=0x05; //read status register  if writing
 8001bb0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001bb4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001bb8:	2205      	movs	r2, #5
 8001bba:	701a      	strb	r2, [r3, #0]
		send_spi1[1]=0; //24bit address msb
 8001bbc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001bc0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	705a      	strb	r2, [r3, #1]
		status_reg[1]=1; // set busy on
 8001bc8:	4b9d      	ldr	r3, [pc, #628]	; (8001e40 <main_initial+0x34c>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	705a      	strb	r2, [r3, #1]

		while (status_reg[1]&1){								// check if write busy
 8001bce:	e011      	b.n	8001bf4 <main_initial+0x100>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2110      	movs	r1, #16
 8001bd4:	489b      	ldr	r0, [pc, #620]	; (8001e44 <main_initial+0x350>)
 8001bd6:	f006 fa91 	bl	80080fc <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 8001bda:	1d39      	adds	r1, r7, #4
 8001bdc:	23c8      	movs	r3, #200	; 0xc8
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2302      	movs	r3, #2
 8001be2:	4a97      	ldr	r2, [pc, #604]	; (8001e40 <main_initial+0x34c>)
 8001be4:	488c      	ldr	r0, [pc, #560]	; (8001e18 <main_initial+0x324>)
 8001be6:	f008 f9a9 	bl	8009f3c <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1); }
 8001bea:	2201      	movs	r2, #1
 8001bec:	2110      	movs	r1, #16
 8001bee:	4895      	ldr	r0, [pc, #596]	; (8001e44 <main_initial+0x350>)
 8001bf0:	f006 fa84 	bl	80080fc <HAL_GPIO_WritePin>
		while (status_reg[1]&1){								// check if write busy
 8001bf4:	4b92      	ldr	r3, [pc, #584]	; (8001e40 <main_initial+0x34c>)
 8001bf6:	785b      	ldrb	r3, [r3, #1]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1e7      	bne.n	8001bd0 <main_initial+0xdc>


//	HAL_Delay(20);


	flash_test=  flash_page_write((mem_counter<<9),gfx_char);
 8001c00:	f8b7 325e 	ldrh.w	r3, [r7, #606]	; 0x25e
 8001c04:	025b      	lsls	r3, r3, #9
 8001c06:	461a      	mov	r2, r3
 8001c08:	4b8f      	ldr	r3, [pc, #572]	; (8001e48 <main_initial+0x354>)
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4610      	mov	r0, r2
 8001c10:	f7ff f83c 	bl	8000c8c <flash_page_write>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
	//HAL_Delay(20);
	/// wait

		send_spi1[0]=0x05; //read status register  if writing
 8001c1a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001c1e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001c22:	2205      	movs	r2, #5
 8001c24:	701a      	strb	r2, [r3, #0]
		send_spi1[1]=0; //24bit address msb
 8001c26:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001c2a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001c2e:	2200      	movs	r2, #0
 8001c30:	705a      	strb	r2, [r3, #1]
		status_reg[1]=1; // set busy on
 8001c32:	4b83      	ldr	r3, [pc, #524]	; (8001e40 <main_initial+0x34c>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	705a      	strb	r2, [r3, #1]

		while (status_reg[1]&1){								// check if write busy
 8001c38:	e011      	b.n	8001c5e <main_initial+0x16a>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2110      	movs	r1, #16
 8001c3e:	4881      	ldr	r0, [pc, #516]	; (8001e44 <main_initial+0x350>)
 8001c40:	f006 fa5c 	bl	80080fc <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 8001c44:	1d39      	adds	r1, r7, #4
 8001c46:	23c8      	movs	r3, #200	; 0xc8
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	4a7c      	ldr	r2, [pc, #496]	; (8001e40 <main_initial+0x34c>)
 8001c4e:	4872      	ldr	r0, [pc, #456]	; (8001e18 <main_initial+0x324>)
 8001c50:	f008 f974 	bl	8009f3c <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1); }
 8001c54:	2201      	movs	r2, #1
 8001c56:	2110      	movs	r1, #16
 8001c58:	487a      	ldr	r0, [pc, #488]	; (8001e44 <main_initial+0x350>)
 8001c5a:	f006 fa4f 	bl	80080fc <HAL_GPIO_WritePin>
		while (status_reg[1]&1){								// check if write busy
 8001c5e:	4b78      	ldr	r3, [pc, #480]	; (8001e40 <main_initial+0x34c>)
 8001c60:	785b      	ldrb	r3, [r3, #1]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1e7      	bne.n	8001c3a <main_initial+0x146>
	for(mem_counter=0;mem_counter<64;mem_counter++){       // spi write test
 8001c6a:	f8b7 325e 	ldrh.w	r3, [r7, #606]	; 0x25e
 8001c6e:	3301      	adds	r3, #1
 8001c70:	f8a7 325e 	strh.w	r3, [r7, #606]	; 0x25e
 8001c74:	f8b7 325e 	ldrh.w	r3, [r7, #606]	; 0x25e
 8001c78:	2b3f      	cmp	r3, #63	; 0x3f
 8001c7a:	d98a      	bls.n	8001b92 <main_initial+0x9e>
					HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1); }
*/

	//----------------------------------------------
	send_spi1[0]=0x03; //read page 1
 8001c7c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001c80:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001c84:	2203      	movs	r2, #3
 8001c86:	701a      	strb	r2, [r3, #0]
	send_spi1[1]=0;
 8001c88:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001c8c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001c90:	2200      	movs	r2, #0
 8001c92:	705a      	strb	r2, [r3, #1]
	send_spi1[2]=1;
 8001c94:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001c98:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	709a      	strb	r2, [r3, #2]
	send_spi1[3]=0;     // can start anywhere
 8001ca0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001ca4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001ca8:	2200      	movs	r2, #0
 8001caa:	70da      	strb	r2, [r3, #3]
//	HAL_SPI_Receive (&hspi1, flash_read_block, 512, 100);

//	HAL_SPI_Receive_DMA(&hspi1, flash_read_block2, 512);


	HAL_I2C_Mem_Read (&hi2c2,160,64, 2 , potSource, 512,1000); //ok
 8001cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb0:	9302      	str	r3, [sp, #8]
 8001cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	4b64      	ldr	r3, [pc, #400]	; (8001e4c <main_initial+0x358>)
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	2240      	movs	r2, #64	; 0x40
 8001cc0:	21a0      	movs	r1, #160	; 0xa0
 8001cc2:	485e      	ldr	r0, [pc, #376]	; (8001e3c <main_initial+0x348>)
 8001cc4:	f006 fc8a 	bl	80085dc <HAL_I2C_Mem_Read>


		memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 8001cc8:	4a61      	ldr	r2, [pc, #388]	; (8001e50 <main_initial+0x35c>)
 8001cca:	4b60      	ldr	r3, [pc, #384]	; (8001e4c <main_initial+0x358>)
 8001ccc:	4614      	mov	r4, r2
 8001cce:	461d      	mov	r5, r3
 8001cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cdc:	c407      	stmia	r4!, {r0, r1, r2}
 8001cde:	8023      	strh	r3, [r4, #0]
	    memcpy(&note,potSource+156,160 );   // this works but keep checking for fragmentation
 8001ce0:	4b5c      	ldr	r3, [pc, #368]	; (8001e54 <main_initial+0x360>)
 8001ce2:	22a0      	movs	r2, #160	; 0xa0
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	485c      	ldr	r0, [pc, #368]	; (8001e58 <main_initial+0x364>)
 8001ce8:	f00a fafa 	bl	800c2e0 <memcpy>

	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8a7 325e 	strh.w	r3, [r7, #606]	; 0x25e
 8001cf2:	e080      	b.n	8001df6 <main_initial+0x302>

			memcpy(&LFO[mem_counter],potSource+46+(mem_counter*6),6 );  // + 60 ,ok here
 8001cf4:	f8b7 225e 	ldrh.w	r2, [r7, #606]	; 0x25e
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4a56      	ldr	r2, [pc, #344]	; (8001e5c <main_initial+0x368>)
 8001d02:	1898      	adds	r0, r3, r2
 8001d04:	f8b7 225e 	ldrh.w	r2, [r7, #606]	; 0x25e
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	332e      	adds	r3, #46	; 0x2e
 8001d12:	4a4e      	ldr	r2, [pc, #312]	; (8001e4c <main_initial+0x358>)
 8001d14:	4413      	add	r3, r2
 8001d16:	2206      	movs	r2, #6
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f00a fae1 	bl	800c2e0 <memcpy>
			memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 8001d1e:	f8b7 325e 	ldrh.w	r3, [r7, #606]	; 0x25e
 8001d22:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	4a4d      	ldr	r2, [pc, #308]	; (8001e60 <main_initial+0x36c>)
 8001d2c:	1898      	adds	r0, r3, r2
 8001d2e:	f8b7 225e 	ldrh.w	r2, [r7, #606]	; 0x25e
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	336a      	adds	r3, #106	; 0x6a
 8001d3a:	4a44      	ldr	r2, [pc, #272]	; (8001e4c <main_initial+0x358>)
 8001d3c:	4413      	add	r3, r2
 8001d3e:	2205      	movs	r2, #5
 8001d40:	4619      	mov	r1, r3
 8001d42:	f00a facd 	bl	800c2e0 <memcpy>
			memcpy(&patch[mem_counter],potSource+316+(mem_counter*3),3 );
 8001d46:	f8b7 225e 	ldrh.w	r2, [r7, #606]	; 0x25e
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4a44      	ldr	r2, [pc, #272]	; (8001e64 <main_initial+0x370>)
 8001d54:	1898      	adds	r0, r3, r2
 8001d56:	f8b7 225e 	ldrh.w	r2, [r7, #606]	; 0x25e
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001d64:	4a39      	ldr	r2, [pc, #228]	; (8001e4c <main_initial+0x358>)
 8001d66:	4413      	add	r3, r2
 8001d68:	2203      	movs	r2, #3
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f00a fab8 	bl	800c2e0 <memcpy>
			memcpy(&patch[mem_counter+10],potSource+346+(mem_counter*3),3 );
 8001d70:	f8b7 325e 	ldrh.w	r3, [r7, #606]	; 0x25e
 8001d74:	f103 020a 	add.w	r2, r3, #10
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4a38      	ldr	r2, [pc, #224]	; (8001e64 <main_initial+0x370>)
 8001d82:	1898      	adds	r0, r3, r2
 8001d84:	f8b7 225e 	ldrh.w	r2, [r7, #606]	; 0x25e
 8001d88:	4613      	mov	r3, r2
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 73ad 	add.w	r3, r3, #346	; 0x15a
 8001d92:	4a2e      	ldr	r2, [pc, #184]	; (8001e4c <main_initial+0x358>)
 8001d94:	4413      	add	r3, r2
 8001d96:	2203      	movs	r2, #3
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f00a faa1 	bl	800c2e0 <memcpy>
			memcpy(&LFO_slave1[mem_counter],potSource+376+(mem_counter*6),6 );  // + 60 ,ok here
 8001d9e:	f8b7 225e 	ldrh.w	r2, [r7, #606]	; 0x25e
 8001da2:	4613      	mov	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4a2f      	ldr	r2, [pc, #188]	; (8001e68 <main_initial+0x374>)
 8001dac:	1898      	adds	r0, r3, r2
 8001dae:	f8b7 225e 	ldrh.w	r2, [r7, #606]	; 0x25e
 8001db2:	4613      	mov	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	4413      	add	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001dbe:	4a23      	ldr	r2, [pc, #140]	; (8001e4c <main_initial+0x358>)
 8001dc0:	4413      	add	r3, r2
 8001dc2:	2206      	movs	r2, #6
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f00a fa8b 	bl	800c2e0 <memcpy>
			memcpy(&LFO_square[mem_counter],potSource+436+(mem_counter*4),4 );
 8001dca:	f8b7 225e 	ldrh.w	r2, [r7, #606]	; 0x25e
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4a25      	ldr	r2, [pc, #148]	; (8001e6c <main_initial+0x378>)
 8001dd8:	4413      	add	r3, r2
 8001dda:	f8b7 225e 	ldrh.w	r2, [r7, #606]	; 0x25e
 8001dde:	0092      	lsls	r2, r2, #2
 8001de0:	f502 72da 	add.w	r2, r2, #436	; 0x1b4
 8001de4:	4919      	ldr	r1, [pc, #100]	; (8001e4c <main_initial+0x358>)
 8001de6:	440a      	add	r2, r1
 8001de8:	6812      	ldr	r2, [r2, #0]
 8001dea:	601a      	str	r2, [r3, #0]
	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001dec:	f8b7 325e 	ldrh.w	r3, [r7, #606]	; 0x25e
 8001df0:	3301      	adds	r3, #1
 8001df2:	f8a7 325e 	strh.w	r3, [r7, #606]	; 0x25e
 8001df6:	f8b7 325e 	ldrh.w	r3, [r7, #606]	; 0x25e
 8001dfa:	2b09      	cmp	r3, #9
 8001dfc:	f67f af7a 	bls.w	8001cf4 <main_initial+0x200>
	    }


		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <main_initial+0x37c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	801a      	strh	r2, [r3, #0]
 8001e06:	e08b      	b.n	8001f20 <main_initial+0x42c>

		for 	(n=0;n<18;n++){					// this is ok
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <main_initial+0x380>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	801a      	strh	r2, [r3, #0]
 8001e0e:	e07d      	b.n	8001f0c <main_initial+0x418>
 8001e10:	0800d2f0 	.word	0x0800d2f0
 8001e14:	200112c4 	.word	0x200112c4
 8001e18:	2001126c 	.word	0x2001126c
 8001e1c:	20011424 	.word	0x20011424
 8001e20:	40000400 	.word	0x40000400
 8001e24:	200113dc 	.word	0x200113dc
 8001e28:	2001146c 	.word	0x2001146c
 8001e2c:	20011170 	.word	0x20011170
 8001e30:	20001b18 	.word	0x20001b18
 8001e34:	2001137c 	.word	0x2001137c
 8001e38:	2001131c 	.word	0x2001131c
 8001e3c:	20011218 	.word	0x20011218
 8001e40:	20000154 	.word	0x20000154
 8001e44:	40020000 	.word	0x40020000
 8001e48:	0800d878 	.word	0x0800d878
 8001e4c:	2000089c 	.word	0x2000089c
 8001e50:	20004f40 	.word	0x20004f40
 8001e54:	20000938 	.word	0x20000938
 8001e58:	20000158 	.word	0x20000158
 8001e5c:	20004108 	.word	0x20004108
 8001e60:	200044b4 	.word	0x200044b4
 8001e64:	20004f70 	.word	0x20004f70
 8001e68:	200043b0 	.word	0x200043b0
 8001e6c:	200043ec 	.word	0x200043ec
 8001e70:	20000b06 	.word	0x20000b06
 8001e74:	20000b00 	.word	0x20000b00
			if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 8001e78:	4b8e      	ldr	r3, [pc, #568]	; (80020b4 <main_initial+0x5c0>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d114      	bne.n	8001eaa <main_initial+0x3b6>
 8001e80:	4b8d      	ldr	r3, [pc, #564]	; (80020b8 <main_initial+0x5c4>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	f003 031f 	and.w	r3, r3, #31
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	4b8a      	ldr	r3, [pc, #552]	; (80020b8 <main_initial+0x5c4>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	460b      	mov	r3, r1
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	440b      	add	r3, r1
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4b85      	ldr	r3, [pc, #532]	; (80020b4 <main_initial+0x5c0>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3a80      	subs	r2, #128	; 0x80
 8001ea4:	b2d1      	uxtb	r1, r2
 8001ea6:	4a85      	ldr	r2, [pc, #532]	; (80020bc <main_initial+0x5c8>)
 8001ea8:	54d1      	strb	r1, [r2, r3]
			if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 8001eaa:	4b82      	ldr	r3, [pc, #520]	; (80020b4 <main_initial+0x5c0>)
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d114      	bne.n	8001edc <main_initial+0x3e8>
 8001eb2:	4b81      	ldr	r3, [pc, #516]	; (80020b8 <main_initial+0x5c4>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	3310      	adds	r3, #16
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4b7e      	ldr	r3, [pc, #504]	; (80020b8 <main_initial+0x5c4>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	440b      	add	r3, r1
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4b79      	ldr	r3, [pc, #484]	; (80020b4 <main_initial+0x5c0>)
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	440b      	add	r3, r1
 8001ed4:	00d2      	lsls	r2, r2, #3
 8001ed6:	b2d1      	uxtb	r1, r2
 8001ed8:	4a78      	ldr	r2, [pc, #480]	; (80020bc <main_initial+0x5c8>)
 8001eda:	54d1      	strb	r1, [r2, r3]
			if (n>1)  gfx_ram[(i*18)+n] = 255;
 8001edc:	4b75      	ldr	r3, [pc, #468]	; (80020b4 <main_initial+0x5c0>)
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d90d      	bls.n	8001f00 <main_initial+0x40c>
 8001ee4:	4b74      	ldr	r3, [pc, #464]	; (80020b8 <main_initial+0x5c4>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4413      	add	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4b6f      	ldr	r3, [pc, #444]	; (80020b4 <main_initial+0x5c0>)
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a70      	ldr	r2, [pc, #448]	; (80020bc <main_initial+0x5c8>)
 8001efc:	21ff      	movs	r1, #255	; 0xff
 8001efe:	54d1      	strb	r1, [r2, r3]
		for 	(n=0;n<18;n++){					// this is ok
 8001f00:	4b6c      	ldr	r3, [pc, #432]	; (80020b4 <main_initial+0x5c0>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	3301      	adds	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	4b6a      	ldr	r3, [pc, #424]	; (80020b4 <main_initial+0x5c0>)
 8001f0a:	801a      	strh	r2, [r3, #0]
 8001f0c:	4b69      	ldr	r3, [pc, #420]	; (80020b4 <main_initial+0x5c0>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	2b11      	cmp	r3, #17
 8001f12:	d9b1      	bls.n	8001e78 <main_initial+0x384>
		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001f14:	4b68      	ldr	r3, [pc, #416]	; (80020b8 <main_initial+0x5c4>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <main_initial+0x5c4>)
 8001f1e:	801a      	strh	r2, [r3, #0]
 8001f20:	4b65      	ldr	r3, [pc, #404]	; (80020b8 <main_initial+0x5c4>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	2b3f      	cmp	r3, #63	; 0x3f
 8001f26:	f67f af6f 	bls.w	8001e08 <main_initial+0x314>

		}

		}
	seq.pos=0;
 8001f2a:	4b65      	ldr	r3, [pc, #404]	; (80020c0 <main_initial+0x5cc>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]


	uint32_t  tempo_hold=1;  // calculate tempo look up
 8001f30:	2301      	movs	r3, #1
 8001f32:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250


	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001f36:	4b60      	ldr	r3, [pc, #384]	; (80020b8 <main_initial+0x5c4>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	801a      	strh	r2, [r3, #0]
 8001f3c:	e01a      	b.n	8001f74 <main_initial+0x480>
	  		tempo_hold=i;
 8001f3e:	4b5e      	ldr	r3, [pc, #376]	; (80020b8 <main_initial+0x5c4>)
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	  		tempo_hold=(60*seq_sample_rate)/(tempo_hold*16); //
 8001f46:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	4a5d      	ldr	r2, [pc, #372]	; (80020c4 <main_initial+0x5d0>)
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250

	  	tempo_lut[i]=tempo_hold;
 8001f56:	4b58      	ldr	r3, [pc, #352]	; (80020b8 <main_initial+0x5c4>)
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8001f60:	b299      	uxth	r1, r3
 8001f62:	4b59      	ldr	r3, [pc, #356]	; (80020c8 <main_initial+0x5d4>)
 8001f64:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001f68:	4b53      	ldr	r3, [pc, #332]	; (80020b8 <main_initial+0x5c4>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	4b51      	ldr	r3, [pc, #324]	; (80020b8 <main_initial+0x5c4>)
 8001f72:	801a      	strh	r2, [r3, #0]
 8001f74:	4b50      	ldr	r3, [pc, #320]	; (80020b8 <main_initial+0x5c4>)
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	2bff      	cmp	r3, #255	; 0xff
 8001f7a:	d9e0      	bls.n	8001f3e <main_initial+0x44a>
	  	}

	//isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount

		noteTiming=24;
 8001f7c:	4b53      	ldr	r3, [pc, #332]	; (80020cc <main_initial+0x5d8>)
 8001f7e:	2218      	movs	r2, #24
 8001f80:	701a      	strb	r2, [r3, #0]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001f82:	4b4d      	ldr	r3, [pc, #308]	; (80020b8 <main_initial+0x5c4>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	801a      	strh	r2, [r3, #0]
 8001f88:	e00b      	b.n	8001fa2 <main_initial+0x4ae>
			spell[i]=67;
 8001f8a:	4b4b      	ldr	r3, [pc, #300]	; (80020b8 <main_initial+0x5c4>)
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b4f      	ldr	r3, [pc, #316]	; (80020d0 <main_initial+0x5dc>)
 8001f92:	2143      	movs	r1, #67	; 0x43
 8001f94:	5499      	strb	r1, [r3, r2]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001f96:	4b48      	ldr	r3, [pc, #288]	; (80020b8 <main_initial+0x5c4>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	4b46      	ldr	r3, [pc, #280]	; (80020b8 <main_initial+0x5c4>)
 8001fa0:	801a      	strh	r2, [r3, #0]
 8001fa2:	4b45      	ldr	r3, [pc, #276]	; (80020b8 <main_initial+0x5c4>)
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001faa:	d3ee      	bcc.n	8001f8a <main_initial+0x496>

		}

		gfx_clear();
 8001fac:	f002 f9fc 	bl	80043a8 <gfx_clear>
	uint16_t pars_counter;

	for (pars_counter=0;pars_counter<1000;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8a7 325c 	strh.w	r3, [r7, #604]	; 0x25c
 8001fb6:	e006      	b.n	8001fc6 <main_initial+0x4d2>

			menu_parser();  // run it closer to default_menu size ,times, if default_menu is corrupt gfx breaks pretty bad
 8001fb8:	f7ff f9f0 	bl	800139c <menu_parser>
	for (pars_counter=0;pars_counter<1000;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001fbc:	f8b7 325c 	ldrh.w	r3, [r7, #604]	; 0x25c
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f8a7 325c 	strh.w	r3, [r7, #604]	; 0x25c
 8001fc6:	f8b7 325c 	ldrh.w	r3, [r7, #604]	; 0x25c
 8001fca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fce:	d3f3      	bcc.n	8001fb8 <main_initial+0x4c4>

		}
	for (i=0;i<16384;i++) {     // change for 32khz   1-256 bpm
 8001fd0:	4b39      	ldr	r3, [pc, #228]	; (80020b8 <main_initial+0x5c4>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	801a      	strh	r2, [r3, #0]
 8001fd6:	e00c      	b.n	8001ff2 <main_initial+0x4fe>
	RAM[i]=0;
 8001fd8:	4b37      	ldr	r3, [pc, #220]	; (80020b8 <main_initial+0x5c4>)
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <main_initial+0x5e0>)
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i=0;i<16384;i++) {     // change for 32khz   1-256 bpm
 8001fe6:	4b34      	ldr	r3, [pc, #208]	; (80020b8 <main_initial+0x5c4>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	3301      	adds	r3, #1
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	4b32      	ldr	r3, [pc, #200]	; (80020b8 <main_initial+0x5c4>)
 8001ff0:	801a      	strh	r2, [r3, #0]
 8001ff2:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <main_initial+0x5c4>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ffa:	d3ed      	bcc.n	8001fd8 <main_initial+0x4e4>
	}
	for (i=0;i<1024;i++) {     // change for 32khz   1-256 bpm
 8001ffc:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <main_initial+0x5c4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	801a      	strh	r2, [r3, #0]
 8002002:	e005      	b.n	8002010 <main_initial+0x51c>
 8002004:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <main_initial+0x5c4>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <main_initial+0x5c4>)
 800200e:	801a      	strh	r2, [r3, #0]
 8002010:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <main_initial+0x5c4>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002018:	d3f4      	bcc.n	8002004 <main_initial+0x510>

	}



		for (pars_counter=0;pars_counter<512;pars_counter++)	  default_menu3[pars_counter>>1]=64;
 800201a:	2300      	movs	r3, #0
 800201c:	f8a7 325c 	strh.w	r3, [r7, #604]	; 0x25c
 8002020:	e00c      	b.n	800203c <main_initial+0x548>
 8002022:	f8b7 325c 	ldrh.w	r3, [r7, #604]	; 0x25c
 8002026:	085b      	lsrs	r3, r3, #1
 8002028:	b29b      	uxth	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <main_initial+0x5e4>)
 800202e:	2140      	movs	r1, #64	; 0x40
 8002030:	5499      	strb	r1, [r3, r2]
 8002032:	f8b7 325c 	ldrh.w	r3, [r7, #604]	; 0x25c
 8002036:	3301      	adds	r3, #1
 8002038:	f8a7 325c 	strh.w	r3, [r7, #604]	; 0x25c
 800203c:	f8b7 325c 	ldrh.w	r3, [r7, #604]	; 0x25c
 8002040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002044:	d3ed      	bcc.n	8002022 <main_initial+0x52e>

		default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 8002046:	4824      	ldr	r0, [pc, #144]	; (80020d8 <main_initial+0x5e4>)
 8002048:	f7fe f8c6 	bl	80001d8 <strlen>
 800204c:	4603      	mov	r3, r0
 800204e:	b29a      	uxth	r2, r3
 8002050:	4b22      	ldr	r3, [pc, #136]	; (80020dc <main_initial+0x5e8>)
 8002052:	801a      	strh	r2, [r3, #0]
			menu_title_count--;  //count back one
 8002054:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <main_initial+0x5ec>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	3b01      	subs	r3, #1
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <main_initial+0x5ec>)
 800205e:	701a      	strb	r2, [r3, #0]
			display_clear ();
 8002060:	f002 f9e4 	bl	800442c <display_clear>
			for (pars_counter=0;pars_counter<menu_title_count;pars_counter++)	default_menu3 [menu_title_lut[pars_counter]&1023]=48;
 8002064:	2300      	movs	r3, #0
 8002066:	f8a7 325c 	strh.w	r3, [r7, #604]	; 0x25c
 800206a:	e00e      	b.n	800208a <main_initial+0x596>
 800206c:	f8b7 325c 	ldrh.w	r3, [r7, #604]	; 0x25c
 8002070:	4a1c      	ldr	r2, [pc, #112]	; (80020e4 <main_initial+0x5f0>)
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800207a:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <main_initial+0x5e4>)
 800207c:	2130      	movs	r1, #48	; 0x30
 800207e:	54d1      	strb	r1, [r2, r3]
 8002080:	f8b7 325c 	ldrh.w	r3, [r7, #604]	; 0x25c
 8002084:	3301      	adds	r3, #1
 8002086:	f8a7 325c 	strh.w	r3, [r7, #604]	; 0x25c
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <main_initial+0x5ec>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b29b      	uxth	r3, r3
 8002090:	f8b7 225c 	ldrh.w	r2, [r7, #604]	; 0x25c
 8002094:	429a      	cmp	r2, r3
 8002096:	d3e9      	bcc.n	800206c <main_initial+0x578>
			note_reset();
 8002098:	f7ff fcee 	bl	8001a78 <note_reset>
		menuSelect=0;
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <main_initial+0x5f4>)
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
	// fill up sample
	firstbarLoop=0;
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <main_initial+0x5f8>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
	//sample_ram =  &RAM[0];    //  allocate half a second

}
 80020a8:	bf00      	nop
 80020aa:	f507 7718 	add.w	r7, r7, #608	; 0x260
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bdb0      	pop	{r4, r5, r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000b00 	.word	0x20000b00
 80020b8:	20000b06 	.word	0x20000b06
 80020bc:	2000386c 	.word	0x2000386c
 80020c0:	20004f40 	.word	0x20004f40
 80020c4:	0020b584 	.word	0x0020b584
 80020c8:	20003468 	.word	0x20003468
 80020cc:	20000698 	.word	0x20000698
 80020d0:	20000000 	.word	0x20000000
 80020d4:	20007adc 	.word	0x20007adc
 80020d8:	20010d70 	.word	0x20010d70
 80020dc:	200058a6 	.word	0x200058a6
 80020e0:	20005295 	.word	0x20005295
 80020e4:	20005298 	.word	0x20005298
 80020e8:	20000afe 	.word	0x20000afe
 80020ec:	20000aff 	.word	0x20000aff

080020f0 <patch_lists>:



}

void patch_lists(void){   //   ok
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
    uint8_t  list_counter;
    uint8_t list_counter2=0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	71bb      	strb	r3, [r7, #6]
    for (list_counter=0;list_counter<20;list_counter++){
 80020fa:	2300      	movs	r3, #0
 80020fc:	71fb      	strb	r3, [r7, #7]
 80020fe:	e02e      	b.n	800215e <patch_lists+0x6e>

	if ((patch[list_counter].input1&3)== 3   )    { LFO_sqr_list[list_counter2]   =  (patch[list_counter].target_index&7)+48;   // only writes sqr related  to list ,others left off
 8002100:	79fa      	ldrb	r2, [r7, #7]
 8002102:	491c      	ldr	r1, [pc, #112]	; (8002174 <patch_lists+0x84>)
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	440b      	add	r3, r1
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b03      	cmp	r3, #3
 8002116:	d11f      	bne.n	8002158 <patch_lists+0x68>
 8002118:	79fa      	ldrb	r2, [r7, #7]
 800211a:	4916      	ldr	r1, [pc, #88]	; (8002174 <patch_lists+0x84>)
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	440b      	add	r3, r1
 8002126:	3302      	adds	r3, #2
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	b2da      	uxtb	r2, r3
 8002130:	79bb      	ldrb	r3, [r7, #6]
 8002132:	3230      	adds	r2, #48	; 0x30
 8002134:	b2d1      	uxtb	r1, r2
 8002136:	4a10      	ldr	r2, [pc, #64]	; (8002178 <patch_lists+0x88>)
 8002138:	54d1      	strb	r1, [r2, r3]
	sqr_target_list[list_counter2] =  (patch[list_counter].target);   //just
 800213a:	79fa      	ldrb	r2, [r7, #7]
 800213c:	79b9      	ldrb	r1, [r7, #6]
 800213e:	480d      	ldr	r0, [pc, #52]	; (8002174 <patch_lists+0x84>)
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4403      	add	r3, r0
 800214a:	3301      	adds	r3, #1
 800214c:	781a      	ldrb	r2, [r3, #0]
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <patch_lists+0x8c>)
 8002150:	545a      	strb	r2, [r3, r1]
	list_counter2++;
 8002152:	79bb      	ldrb	r3, [r7, #6]
 8002154:	3301      	adds	r3, #1
 8002156:	71bb      	strb	r3, [r7, #6]
    for (list_counter=0;list_counter<20;list_counter++){
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	3301      	adds	r3, #1
 800215c:	71fb      	strb	r3, [r7, #7]
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	2b13      	cmp	r3, #19
 8002162:	d9cd      	bls.n	8002100 <patch_lists+0x10>



    }

}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20004f70 	.word	0x20004f70
 8002178:	20010ae4 	.word	0x20010ae4
 800217c:	20010d54 	.word	0x20010d54

08002180 <sampling>:


return  output;

}
void sampling(void){						// 330 atm or 8.5ms
 8002180:	b5b0      	push	{r4, r5, r7, lr}
 8002182:	f5ad 7d6c 	sub.w	sp, sp, #944	; 0x3b0
 8002186:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;

//time_proc=0;

	time_proc=0;
 8002188:	4bc3      	ldr	r3, [pc, #780]	; (8002498 <sampling+0x318>)
 800218a:	2200      	movs	r2, #0
 800218c:	801a      	strh	r2, [r3, #0]
	int32_t sample_accus[10] ={0,0,0,0,0,0,0,0,0,0};
 800218e:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8002192:	2228      	movs	r2, #40	; 0x28
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f00a f8b0 	bl	800c2fc <memset>
uint8_t mask_i;
int32_t sample_Accu[10] ={0,0,0,0,0,0,0,0,0,0};   // accu for sample output or lookup
 800219c:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 80021a0:	2228      	movs	r2, #40	; 0x28
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f00a f8a9 	bl	800c2fc <memset>
uint16_t tuned_list[10];
int32_t sample_adc;
int32_t ram_temp;
uint16_t sample_counts_temp[40]={1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
 80021aa:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80021ae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021b2:	4618      	mov	r0, r3
 80021b4:	2350      	movs	r3, #80	; 0x50
 80021b6:	461a      	mov	r2, r3
 80021b8:	2100      	movs	r1, #0
 80021ba:	f00a f89f 	bl	800c2fc <memset>
 80021be:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80021c2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021c6:	2201      	movs	r2, #1
 80021c8:	801a      	strh	r2, [r3, #0]
 80021ca:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80021ce:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021d2:	2201      	movs	r2, #1
 80021d4:	805a      	strh	r2, [r3, #2]
 80021d6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80021da:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021de:	2201      	movs	r2, #1
 80021e0:	809a      	strh	r2, [r3, #4]
 80021e2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80021e6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021ea:	2201      	movs	r2, #1
 80021ec:	80da      	strh	r2, [r3, #6]
 80021ee:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80021f2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021f6:	2201      	movs	r2, #1
 80021f8:	811a      	strh	r2, [r3, #8]
 80021fa:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80021fe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002202:	2201      	movs	r2, #1
 8002204:	815a      	strh	r2, [r3, #10]
 8002206:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800220a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800220e:	2201      	movs	r2, #1
 8002210:	819a      	strh	r2, [r3, #12]
 8002212:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002216:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800221a:	2201      	movs	r2, #1
 800221c:	81da      	strh	r2, [r3, #14]
 800221e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002222:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002226:	2201      	movs	r2, #1
 8002228:	821a      	strh	r2, [r3, #16]
 800222a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800222e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002232:	2201      	movs	r2, #1
 8002234:	825a      	strh	r2, [r3, #18]
 8002236:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800223a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800223e:	2201      	movs	r2, #1
 8002240:	829a      	strh	r2, [r3, #20]
 8002242:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002246:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800224a:	2201      	movs	r2, #1
 800224c:	82da      	strh	r2, [r3, #22]
 800224e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002252:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002256:	2201      	movs	r2, #1
 8002258:	831a      	strh	r2, [r3, #24]
 800225a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800225e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002262:	2201      	movs	r2, #1
 8002264:	835a      	strh	r2, [r3, #26]
 8002266:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800226a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800226e:	2201      	movs	r2, #1
 8002270:	839a      	strh	r2, [r3, #28]
 8002272:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002276:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800227a:	2201      	movs	r2, #1
 800227c:	83da      	strh	r2, [r3, #30]
 800227e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002282:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002286:	2201      	movs	r2, #1
 8002288:	841a      	strh	r2, [r3, #32]
 800228a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800228e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002292:	2201      	movs	r2, #1
 8002294:	845a      	strh	r2, [r3, #34]	; 0x22
 8002296:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800229a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800229e:	2201      	movs	r2, #1
 80022a0:	849a      	strh	r2, [r3, #36]	; 0x24
 80022a2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80022a6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022aa:	2201      	movs	r2, #1
 80022ac:	84da      	strh	r2, [r3, #38]	; 0x26
 80022ae:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80022b2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022b6:	2201      	movs	r2, #1
 80022b8:	851a      	strh	r2, [r3, #40]	; 0x28
 80022ba:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80022be:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022c2:	2201      	movs	r2, #1
 80022c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022c6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80022ca:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022ce:	2201      	movs	r2, #1
 80022d0:	859a      	strh	r2, [r3, #44]	; 0x2c
 80022d2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80022d6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022da:	2201      	movs	r2, #1
 80022dc:	85da      	strh	r2, [r3, #46]	; 0x2e
 80022de:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80022e2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022e6:	2201      	movs	r2, #1
 80022e8:	861a      	strh	r2, [r3, #48]	; 0x30
 80022ea:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80022ee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022f2:	2201      	movs	r2, #1
 80022f4:	865a      	strh	r2, [r3, #50]	; 0x32
 80022f6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80022fa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022fe:	2201      	movs	r2, #1
 8002300:	869a      	strh	r2, [r3, #52]	; 0x34
 8002302:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002306:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800230a:	2201      	movs	r2, #1
 800230c:	86da      	strh	r2, [r3, #54]	; 0x36
 800230e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002312:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002316:	2201      	movs	r2, #1
 8002318:	871a      	strh	r2, [r3, #56]	; 0x38
 800231a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800231e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002322:	2201      	movs	r2, #1
 8002324:	875a      	strh	r2, [r3, #58]	; 0x3a
 8002326:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800232a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800232e:	2201      	movs	r2, #1
 8002330:	879a      	strh	r2, [r3, #60]	; 0x3c
 8002332:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002336:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800233a:	2201      	movs	r2, #1
 800233c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800233e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002342:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002346:	2201      	movs	r2, #1
 8002348:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800234c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002350:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002354:	2201      	movs	r2, #1
 8002356:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800235a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800235e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002362:	2201      	movs	r2, #1
 8002364:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8002368:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800236c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002370:	2201      	movs	r2, #1
 8002372:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002376:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800237a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800237e:	2201      	movs	r2, #1
 8002380:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48


if (bank_write==2)  {sample_pointD=512;}  else sample_pointD=0;
 8002384:	4b45      	ldr	r3, [pc, #276]	; (800249c <sampling+0x31c>)
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d104      	bne.n	8002396 <sampling+0x216>
 800238c:	4b44      	ldr	r3, [pc, #272]	; (80024a0 <sampling+0x320>)
 800238e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002392:	801a      	strh	r2, [r3, #0]
 8002394:	e002      	b.n	800239c <sampling+0x21c>
 8002396:	4b42      	ldr	r3, [pc, #264]	; (80024a0 <sampling+0x320>)
 8002398:	2200      	movs	r2, #0
 800239a:	801a      	strh	r2, [r3, #0]

bank_write=0;
 800239c:	4b3f      	ldr	r3, [pc, #252]	; (800249c <sampling+0x31c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	801a      	strh	r2, [r3, #0]
memcpy(notes_joined,seq.notes1,16);
 80023a2:	2210      	movs	r2, #16
 80023a4:	493f      	ldr	r1, [pc, #252]	; (80024a4 <sampling+0x324>)
 80023a6:	4840      	ldr	r0, [pc, #256]	; (80024a8 <sampling+0x328>)
 80023a8:	f009 ff9a 	bl	800c2e0 <memcpy>
memcpy(notes_joined+16,seq.notes2,16);
 80023ac:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <sampling+0x32c>)
 80023ae:	2210      	movs	r2, #16
 80023b0:	493f      	ldr	r1, [pc, #252]	; (80024b0 <sampling+0x330>)
 80023b2:	4618      	mov	r0, r3
 80023b4:	f009 ff94 	bl	800c2e0 <memcpy>
sample_pointB=sample_pointD;
 80023b8:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <sampling+0x320>)
 80023ba:	881a      	ldrh	r2, [r3, #0]
 80023bc:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <sampling+0x334>)
 80023be:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f8a7 33ac 	strh.w	r3, [r7, #940]	; 0x3ac

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 80023c6:	4b3c      	ldr	r3, [pc, #240]	; (80024b8 <sampling+0x338>)
 80023c8:	785b      	ldrb	r3, [r3, #1]
 80023ca:	461a      	mov	r2, r3
 80023cc:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <sampling+0x33c>)
 80023ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023d2:	f8a7 33aa 	strh.w	r3, [r7, #938]	; 0x3aa
if (seq.tempo<40)  tempo_mod=511;  // syncs to main loop
 80023d6:	4b38      	ldr	r3, [pc, #224]	; (80024b8 <sampling+0x338>)
 80023d8:	785b      	ldrb	r3, [r3, #1]
 80023da:	2b27      	cmp	r3, #39	; 0x27
 80023dc:	d803      	bhi.n	80023e6 <sampling+0x266>
 80023de:	f240 13ff 	movw	r3, #511	; 0x1ff
 80023e2:	f8a7 33aa 	strh.w	r3, [r7, #938]	; 0x3aa
uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s

tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 80023e6:	f8b7 33aa 	ldrh.w	r3, [r7, #938]	; 0x3aa
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	da00      	bge.n	80023f0 <sampling+0x270>
 80023ee:	331f      	adds	r3, #31
 80023f0:	115b      	asrs	r3, r3, #5
 80023f2:	461a      	mov	r2, r3
 80023f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80023fc:	ee07 3a90 	vmov	s15, r3
 8002400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002404:	4b2e      	ldr	r3, [pc, #184]	; (80024c0 <sampling+0x340>)
 8002406:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <sampling+0x340>)
 800240c:	ed93 7a00 	vldr	s14, [r3]
 8002410:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80024c4 <sampling+0x344>
 8002414:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002418:	4b29      	ldr	r3, [pc, #164]	; (80024c0 <sampling+0x340>)
 800241a:	edc3 7a00 	vstr	s15, [r3]

if ((tempo_mod==511 )   && (sampler.ram_seq<=256)    && (seq.pos>>4)      )   { next_isr=0; tempo_count=0; }   //  this should sync  rough
 800241e:	f8b7 33aa 	ldrh.w	r3, [r7, #938]	; 0x3aa
 8002422:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002426:	4293      	cmp	r3, r2
 8002428:	d110      	bne.n	800244c <sampling+0x2cc>
 800242a:	4b27      	ldr	r3, [pc, #156]	; (80024c8 <sampling+0x348>)
 800242c:	8b1b      	ldrh	r3, [r3, #24]
 800242e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002432:	d80b      	bhi.n	800244c <sampling+0x2cc>
 8002434:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <sampling+0x338>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <sampling+0x2cc>
 8002440:	4b22      	ldr	r3, [pc, #136]	; (80024cc <sampling+0x34c>)
 8002442:	2200      	movs	r2, #0
 8002444:	801a      	strh	r2, [r3, #0]
 8002446:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <sampling+0x350>)
 8002448:	2200      	movs	r2, #0
 800244a:	801a      	strh	r2, [r3, #0]

seqpos_i=0; //reset
 800244c:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <sampling+0x354>)
 800244e:	2200      	movs	r2, #0
 8002450:	801a      	strh	r2, [r3, #0]

uint8_t looper_dat[8]={1,3,7,15};
 8002452:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002456:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800245a:	491f      	ldr	r1, [pc, #124]	; (80024d8 <sampling+0x358>)
 800245c:	4613      	mov	r3, r2
 800245e:	c903      	ldmia	r1, {r0, r1}
 8002460:	6018      	str	r0, [r3, #0]
 8002462:	3304      	adds	r3, #4
 8002464:	7019      	strb	r1, [r3, #0]
 8002466:	1d53      	adds	r3, r2, #5
 8002468:	2200      	movs	r2, #0
 800246a:	801a      	strh	r2, [r3, #0]
 800246c:	709a      	strb	r2, [r3, #2]
uint32_t lfo_tempo_hold;

if (tempo_mod_hold!=tempo_mod){					// lfo lut calculate only when changes tempo
 800246e:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <sampling+0x35c>)
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	f8b7 23aa 	ldrh.w	r2, [r7, #938]	; 0x3aa
 8002476:	429a      	cmp	r2, r3
 8002478:	d05e      	beq.n	8002538 <sampling+0x3b8>

		float lfo_tempo_calc=((1647099*4)/(tempo_mod)); // deafualt 1 note    12867  at 512
 800247a:	f8b7 33aa 	ldrh.w	r3, [r7, #938]	; 0x3aa
 800247e:	4a18      	ldr	r2, [pc, #96]	; (80024e0 <sampling+0x360>)
 8002480:	fb92 f3f3 	sdiv	r3, r2, r3
 8002484:	ee07 3a90 	vmov	s15, r3
 8002488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800248c:	edc7 7ae7 	vstr	s15, [r7, #924]	; 0x39c


						for (i=0;i<256;i++){								// 128 is 1 note
 8002490:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <sampling+0x364>)
 8002492:	2200      	movs	r2, #0
 8002494:	801a      	strh	r2, [r3, #0]
 8002496:	e04b      	b.n	8002530 <sampling+0x3b0>
 8002498:	20004104 	.word	0x20004104
 800249c:	2000014e 	.word	0x2000014e
 80024a0:	20001b12 	.word	0x20001b12
 80024a4:	20004f42 	.word	0x20004f42
 80024a8:	200078b4 	.word	0x200078b4
 80024ac:	200078c4 	.word	0x200078c4
 80024b0:	20004f53 	.word	0x20004f53
 80024b4:	20000b04 	.word	0x20000b04
 80024b8:	20004f40 	.word	0x20004f40
 80024bc:	20003468 	.word	0x20003468
 80024c0:	20003cf4 	.word	0x20003cf4
 80024c4:	42a00000 	.word	0x42a00000
 80024c8:	20000204 	.word	0x20000204
 80024cc:	20003318 	.word	0x20003318
 80024d0:	20003344 	.word	0x20003344
 80024d4:	20010d68 	.word	0x20010d68
 80024d8:	0800cbfc 	.word	0x0800cbfc
 80024dc:	20003868 	.word	0x20003868
 80024e0:	006487ec 	.word	0x006487ec
 80024e4:	20000b06 	.word	0x20000b06
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/16;               //  at 64 its 12867
 80024e8:	4b5a      	ldr	r3, [pc, #360]	; (8002654 <sampling+0x4d4>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	3301      	adds	r3, #1
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024f6:	edd7 7ae7 	vldr	s15, [r7, #924]	; 0x39c
 80024fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024fe:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002502:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800250a:	ee17 3a90 	vmov	r3, s15
 800250e:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
	lfo_tempo_lut[i]= lfo_tempo_hold;
 8002512:	4b50      	ldr	r3, [pc, #320]	; (8002654 <sampling+0x4d4>)
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 800251c:	b299      	uxth	r1, r3
 800251e:	4b4e      	ldr	r3, [pc, #312]	; (8002658 <sampling+0x4d8>)
 8002520:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						for (i=0;i<256;i++){								// 128 is 1 note
 8002524:	4b4b      	ldr	r3, [pc, #300]	; (8002654 <sampling+0x4d4>)
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	4b49      	ldr	r3, [pc, #292]	; (8002654 <sampling+0x4d4>)
 800252e:	801a      	strh	r2, [r3, #0]
 8002530:	4b48      	ldr	r3, [pc, #288]	; (8002654 <sampling+0x4d4>)
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	2bff      	cmp	r3, #255	; 0xff
 8002536:	d9d7      	bls.n	80024e8 <sampling+0x368>

}}
tempo_mod_hold=tempo_mod;   // for lfo
 8002538:	4a48      	ldr	r2, [pc, #288]	; (800265c <sampling+0x4dc>)
 800253a:	f8b7 33aa 	ldrh.w	r3, [r7, #938]	; 0x3aa
 800253e:	8013      	strh	r3, [r2, #0]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 8002540:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002544:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002548:	4618      	mov	r0, r3
 800254a:	2344      	movs	r3, #68	; 0x44
 800254c:	461a      	mov	r2, r3
 800254e:	2100      	movs	r1, #0
 8002550:	f009 fed4 	bl	800c2fc <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 8002554:	4b3f      	ldr	r3, [pc, #252]	; (8002654 <sampling+0x4d4>)
 8002556:	2200      	movs	r2, #0
 8002558:	801a      	strh	r2, [r3, #0]
 800255a:	e00f      	b.n	800257c <sampling+0x3fc>
 800255c:	4b3d      	ldr	r3, [pc, #244]	; (8002654 <sampling+0x4d4>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	4619      	mov	r1, r3
 8002562:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002566:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800256a:	2200      	movs	r2, #0
 800256c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002570:	4b38      	ldr	r3, [pc, #224]	; (8002654 <sampling+0x4d4>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	3301      	adds	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	4b36      	ldr	r3, [pc, #216]	; (8002654 <sampling+0x4d4>)
 800257a:	801a      	strh	r2, [r3, #0]
 800257c:	4b35      	ldr	r3, [pc, #212]	; (8002654 <sampling+0x4d4>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	2b0f      	cmp	r3, #15
 8002582:	d9eb      	bls.n	800255c <sampling+0x3dc>
	//potSource[150]=(freq_point[0])*100; //0-2

potSource[380]=(lcd_temp/100) +48;  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 8002584:	4b36      	ldr	r3, [pc, #216]	; (8002660 <sampling+0x4e0>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4a36      	ldr	r2, [pc, #216]	; (8002664 <sampling+0x4e4>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	b2db      	uxtb	r3, r3
 8002592:	3330      	adds	r3, #48	; 0x30
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4b34      	ldr	r3, [pc, #208]	; (8002668 <sampling+0x4e8>)
 8002598:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
potSource[381]=((lcd_temp %100)/10)+48;		 // 0-160 to 0-10
 800259c:	4b30      	ldr	r3, [pc, #192]	; (8002660 <sampling+0x4e0>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	4a30      	ldr	r2, [pc, #192]	; (8002664 <sampling+0x4e4>)
 80025a2:	fba2 1203 	umull	r1, r2, r2, r3
 80025a6:	0952      	lsrs	r2, r2, #5
 80025a8:	2164      	movs	r1, #100	; 0x64
 80025aa:	fb01 f202 	mul.w	r2, r1, r2
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	4a2e      	ldr	r2, [pc, #184]	; (800266c <sampling+0x4ec>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	08db      	lsrs	r3, r3, #3
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	3330      	adds	r3, #48	; 0x30
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	4b29      	ldr	r3, [pc, #164]	; (8002668 <sampling+0x4e8>)
 80025c2:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
potSource[382]=(lcd_temp%10)+48;
 80025c6:	4b26      	ldr	r3, [pc, #152]	; (8002660 <sampling+0x4e0>)
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	4b28      	ldr	r3, [pc, #160]	; (800266c <sampling+0x4ec>)
 80025cc:	fba3 1302 	umull	r1, r3, r3, r2
 80025d0:	08d9      	lsrs	r1, r3, #3
 80025d2:	460b      	mov	r3, r1
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	3330      	adds	r3, #48	; 0x30
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4b21      	ldr	r3, [pc, #132]	; (8002668 <sampling+0x4e8>)
 80025e4:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e

LCD_Info[0]  =( seq.pos/100) +48;
 80025e8:	4b21      	ldr	r3, [pc, #132]	; (8002670 <sampling+0x4f0>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <sampling+0x4e4>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	3330      	adds	r3, #48	; 0x30
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <sampling+0x4f4>)
 80025fc:	701a      	strb	r2, [r3, #0]
LCD_Info[1]  =( (seq.pos%100) /10)+48;
 80025fe:	4b1c      	ldr	r3, [pc, #112]	; (8002670 <sampling+0x4f0>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	4a18      	ldr	r2, [pc, #96]	; (8002664 <sampling+0x4e4>)
 8002604:	fba2 1203 	umull	r1, r2, r2, r3
 8002608:	0952      	lsrs	r2, r2, #5
 800260a:	2164      	movs	r1, #100	; 0x64
 800260c:	fb01 f202 	mul.w	r2, r1, r2
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	b2db      	uxtb	r3, r3
 8002614:	4a15      	ldr	r2, [pc, #84]	; (800266c <sampling+0x4ec>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	08db      	lsrs	r3, r3, #3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	3330      	adds	r3, #48	; 0x30
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <sampling+0x4f4>)
 8002624:	705a      	strb	r2, [r3, #1]
LCD_Info[2]  =( seq.pos%10)+48 ;
 8002626:	4b12      	ldr	r3, [pc, #72]	; (8002670 <sampling+0x4f0>)
 8002628:	781a      	ldrb	r2, [r3, #0]
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <sampling+0x4ec>)
 800262c:	fba3 1302 	umull	r1, r3, r3, r2
 8002630:	08d9      	lsrs	r1, r3, #3
 8002632:	460b      	mov	r3, r1
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	b2db      	uxtb	r3, r3
 800263e:	3330      	adds	r3, #48	; 0x30
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <sampling+0x4f4>)
 8002644:	709a      	strb	r2, [r3, #2]
patch_lists();
 8002646:	f7ff fd53 	bl	80020f0 <patch_lists>
int32_t* osc_pointers[10];   // sample outs
uint8_t pars_counter;

//if (sampler.ram_seq>15871)  sampler.ram_seq=0;  //else sampler.ram_seq=sampler.ram_seq+1024;
//setup pointers for osc options
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 800264a:	2300      	movs	r3, #0
 800264c:	f887 33a9 	strb.w	r3, [r7, #937]	; 0x3a9
 8002650:	e0fe      	b.n	8002850 <sampling+0x6d0>
 8002652:	bf00      	nop
 8002654:	20000b06 	.word	0x20000b06
 8002658:	20003668 	.word	0x20003668
 800265c:	20003868 	.word	0x20003868
 8002660:	200058aa 	.word	0x200058aa
 8002664:	51eb851f 	.word	0x51eb851f
 8002668:	2000089c 	.word	0x2000089c
 800266c:	cccccccd 	.word	0xcccccccd
 8002670:	20004f40 	.word	0x20004f40
 8002674:	20010cf0 	.word	0x20010cf0


		sample_accus[pars_counter]=sample_accus_hold[pars_counter];
 8002678:	f897 23a9 	ldrb.w	r2, [r7, #937]	; 0x3a9
 800267c:	f897 33a9 	ldrb.w	r3, [r7, #937]	; 0x3a9
 8002680:	49ac      	ldr	r1, [pc, #688]	; (8002934 <sampling+0x7b4>)
 8002682:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 800268c:	443b      	add	r3, r7
 800268e:	f843 2c6c 	str.w	r2, [r3, #-108]
	 if (note[pars_counter].osc==0) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 8002692:	f897 23a9 	ldrb.w	r2, [r7, #937]	; 0x3a9
 8002696:	49a8      	ldr	r1, [pc, #672]	; (8002938 <sampling+0x7b8>)
 8002698:	4613      	mov	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	440b      	add	r3, r1
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10a      	bne.n	80026be <sampling+0x53e>
 80026a8:	f897 23a9 	ldrb.w	r2, [r7, #937]	; 0x3a9
 80026ac:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80026b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80026b4:	f507 7147 	add.w	r1, r7, #796	; 0x31c
 80026b8:	3114      	adds	r1, #20
 80026ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 	 	 	 if (note[pars_counter].osc==1) osc_pointers[pars_counter]=&sample_accus[pars_counter];   // saw
 80026be:	f897 23a9 	ldrb.w	r2, [r7, #937]	; 0x3a9
 80026c2:	499d      	ldr	r1, [pc, #628]	; (8002938 <sampling+0x7b8>)
 80026c4:	4613      	mov	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	440b      	add	r3, r1
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d10d      	bne.n	80026f0 <sampling+0x570>
 80026d4:	f897 33a9 	ldrb.w	r3, [r7, #937]	; 0x3a9
 80026d8:	f897 23a9 	ldrb.w	r2, [r7, #937]	; 0x3a9
 80026dc:	f507 7151 	add.w	r1, r7, #836	; 0x344
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4419      	add	r1, r3
 80026e4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80026e8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80026ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==2) osc_pointers[pars_counter]=&sample_Accu[pars_counter];		// tri
 80026f0:	f897 23a9 	ldrb.w	r2, [r7, #937]	; 0x3a9
 80026f4:	4990      	ldr	r1, [pc, #576]	; (8002938 <sampling+0x7b8>)
 80026f6:	4613      	mov	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	1a9b      	subs	r3, r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	440b      	add	r3, r1
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d10d      	bne.n	8002722 <sampling+0x5a2>
 8002706:	f897 33a9 	ldrb.w	r3, [r7, #937]	; 0x3a9
 800270a:	f897 23a9 	ldrb.w	r2, [r7, #937]	; 0x3a9
 800270e:	f507 7147 	add.w	r1, r7, #796	; 0x31c
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4419      	add	r1, r3
 8002716:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800271a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800271e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==3) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];sampler.one_shot=sampler.one_shot | (1<<pars_counter);}   // sine
 8002722:	f897 23a9 	ldrb.w	r2, [r7, #937]	; 0x3a9
 8002726:	4984      	ldr	r1, [pc, #528]	; (8002938 <sampling+0x7b8>)
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	440b      	add	r3, r1
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b03      	cmp	r3, #3
 8002736:	d11c      	bne.n	8002772 <sampling+0x5f2>
 8002738:	f897 33a9 	ldrb.w	r3, [r7, #937]	; 0x3a9
 800273c:	3306      	adds	r3, #6
 800273e:	f897 23a9 	ldrb.w	r2, [r7, #937]	; 0x3a9
 8002742:	f507 7147 	add.w	r1, r7, #796	; 0x31c
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4419      	add	r1, r3
 800274a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800274e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002756:	4b79      	ldr	r3, [pc, #484]	; (800293c <sampling+0x7bc>)
 8002758:	78db      	ldrb	r3, [r3, #3]
 800275a:	b25a      	sxtb	r2, r3
 800275c:	f897 33a9 	ldrb.w	r3, [r7, #937]	; 0x3a9
 8002760:	2101      	movs	r1, #1
 8002762:	fa01 f303 	lsl.w	r3, r1, r3
 8002766:	b25b      	sxtb	r3, r3
 8002768:	4313      	orrs	r3, r2
 800276a:	b25b      	sxtb	r3, r3
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4b73      	ldr	r3, [pc, #460]	; (800293c <sampling+0x7bc>)
 8002770:	70da      	strb	r2, [r3, #3]
	 			if (note[pars_counter].osc==4) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];sampler.one_shot=sampler.one_shot &  ~(1<<pars_counter);}  // looping sample
 8002772:	f897 23a9 	ldrb.w	r2, [r7, #937]	; 0x3a9
 8002776:	4970      	ldr	r1, [pc, #448]	; (8002938 <sampling+0x7b8>)
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	440b      	add	r3, r1
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b04      	cmp	r3, #4
 8002786:	d11e      	bne.n	80027c6 <sampling+0x646>
 8002788:	f897 33a9 	ldrb.w	r3, [r7, #937]	; 0x3a9
 800278c:	3306      	adds	r3, #6
 800278e:	f897 23a9 	ldrb.w	r2, [r7, #937]	; 0x3a9
 8002792:	f507 7147 	add.w	r1, r7, #796	; 0x31c
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4419      	add	r1, r3
 800279a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800279e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80027a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80027a6:	4b65      	ldr	r3, [pc, #404]	; (800293c <sampling+0x7bc>)
 80027a8:	78db      	ldrb	r3, [r3, #3]
 80027aa:	b25a      	sxtb	r2, r3
 80027ac:	f897 33a9 	ldrb.w	r3, [r7, #937]	; 0x3a9
 80027b0:	2101      	movs	r1, #1
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	b25b      	sxtb	r3, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	b25b      	sxtb	r3, r3
 80027bc:	4013      	ands	r3, r2
 80027be:	b25b      	sxtb	r3, r3
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4b5e      	ldr	r3, [pc, #376]	; (800293c <sampling+0x7bc>)
 80027c4:	70da      	strb	r2, [r3, #3]
	 			if (note[pars_counter].osc==5) osc_pointers[pars_counter]=&sample_adc;   // sine
 80027c6:	f897 23a9 	ldrb.w	r2, [r7, #937]	; 0x3a9
 80027ca:	495b      	ldr	r1, [pc, #364]	; (8002938 <sampling+0x7b8>)
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	440b      	add	r3, r1
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b05      	cmp	r3, #5
 80027da:	d109      	bne.n	80027f0 <sampling+0x670>
 80027dc:	f897 23a9 	ldrb.w	r2, [r7, #937]	; 0x3a9
 80027e0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80027e4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80027e8:	f507 7141 	add.w	r1, r7, #772	; 0x304
 80027ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==6) osc_pointers[pars_counter]=&ram_temp ;   // sine
 80027f0:	f897 23a9 	ldrb.w	r2, [r7, #937]	; 0x3a9
 80027f4:	4950      	ldr	r1, [pc, #320]	; (8002938 <sampling+0x7b8>)
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	1a9b      	subs	r3, r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	440b      	add	r3, r1
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b06      	cmp	r3, #6
 8002804:	d109      	bne.n	800281a <sampling+0x69a>
 8002806:	f897 23a9 	ldrb.w	r2, [r7, #937]	; 0x3a9
 800280a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800280e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002812:	f507 7140 	add.w	r1, r7, #768	; 0x300
 8002816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc>6) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 800281a:	f897 23a9 	ldrb.w	r2, [r7, #937]	; 0x3a9
 800281e:	4946      	ldr	r1, [pc, #280]	; (8002938 <sampling+0x7b8>)
 8002820:	4613      	mov	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	440b      	add	r3, r1
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b06      	cmp	r3, #6
 800282e:	d90a      	bls.n	8002846 <sampling+0x6c6>
 8002830:	f897 23a9 	ldrb.w	r2, [r7, #937]	; 0x3a9
 8002834:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002838:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800283c:	f507 7147 	add.w	r1, r7, #796	; 0x31c
 8002840:	3114      	adds	r1, #20
 8002842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 8002846:	f897 33a9 	ldrb.w	r3, [r7, #937]	; 0x3a9
 800284a:	3301      	adds	r3, #1
 800284c:	f887 33a9 	strb.w	r3, [r7, #937]	; 0x3a9
 8002850:	f897 33a9 	ldrb.w	r3, [r7, #937]	; 0x3a9
 8002854:	2b03      	cmp	r3, #3
 8002856:	f67f af0f 	bls.w	8002678 <sampling+0x4f8>


 }

note_holdA=0;
 800285a:	4b39      	ldr	r3, [pc, #228]	; (8002940 <sampling+0x7c0>)
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]

// some good phasin and delays here
uint8_t cross_fade[2]={0,0};
 8002860:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002864:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002868:	2200      	movs	r2, #0
 800286a:	801a      	strh	r2, [r3, #0]
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 800286c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002870:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002874:	4a33      	ldr	r2, [pc, #204]	; (8002944 <sampling+0x7c4>)
 8002876:	461c      	mov	r4, r3
 8002878:	4615      	mov	r5, r2
 800287a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800287c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800287e:	682b      	ldr	r3, [r5, #0]
 8002880:	7023      	strb	r3, [r4, #0]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)					{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
}*/
isr_change=0;
 8002882:	4b31      	ldr	r3, [pc, #196]	; (8002948 <sampling+0x7c8>)
 8002884:	2200      	movs	r2, #0
 8002886:	801a      	strh	r2, [r3, #0]
uint8_t seq_dat=(1<<(((adc_values[0]>>3))+1))-1;
 8002888:	4b30      	ldr	r3, [pc, #192]	; (800294c <sampling+0x7cc>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	08db      	lsrs	r3, r3, #3
 800288e:	b29b      	uxth	r3, r3
 8002890:	3301      	adds	r3, #1
 8002892:	2201      	movs	r2, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	f887 3397 	strb.w	r3, [r7, #919]	; 0x397
///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 80028a0:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <sampling+0x7d0>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	801a      	strh	r2, [r3, #0]
 80028a6:	e202      	b.n	8002cae <sampling+0xb2e>

	i_total=i+sample_pointB;
 80028a8:	4b29      	ldr	r3, [pc, #164]	; (8002950 <sampling+0x7d0>)
 80028aa:	881a      	ldrh	r2, [r3, #0]
 80028ac:	4b29      	ldr	r3, [pc, #164]	; (8002954 <sampling+0x7d4>)
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	4413      	add	r3, r2
 80028b2:	f8a7 338c 	strh.w	r3, [r7, #908]	; 0x38c
	sampling_position=i>>6;   //   0-8 steps
 80028b6:	4b26      	ldr	r3, [pc, #152]	; (8002950 <sampling+0x7d0>)
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	099b      	lsrs	r3, r3, #6
 80028bc:	b29b      	uxth	r3, r3
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	4b25      	ldr	r3, [pc, #148]	; (8002958 <sampling+0x7d8>)
 80028c2:	701a      	strb	r2, [r3, #0]
	sampling_position_b=(sampling_position+7)&7;
 80028c4:	4b24      	ldr	r3, [pc, #144]	; (8002958 <sampling+0x7d8>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	3307      	adds	r3, #7
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4b22      	ldr	r3, [pc, #136]	; (800295c <sampling+0x7dc>)
 80028d4:	701a      	strb	r2, [r3, #0]
	note_plain=seq.notes1[seq.pos & 7 ];
 80028d6:	4b22      	ldr	r3, [pc, #136]	; (8002960 <sampling+0x7e0>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	4a20      	ldr	r2, [pc, #128]	; (8002960 <sampling+0x7e0>)
 80028e0:	4413      	add	r3, r2
 80028e2:	789b      	ldrb	r3, [r3, #2]
 80028e4:	f887 3373 	strb.w	r3, [r7, #883]	; 0x373
potValues[i&255]=potSource[i&255]>>4; //just to update values
 80028e8:	4b19      	ldr	r3, [pc, #100]	; (8002950 <sampling+0x7d0>)
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	4a1d      	ldr	r2, [pc, #116]	; (8002964 <sampling+0x7e4>)
 80028f0:	5cd2      	ldrb	r2, [r2, r3]
 80028f2:	4b17      	ldr	r3, [pc, #92]	; (8002950 <sampling+0x7d0>)
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	0912      	lsrs	r2, r2, #4
 80028fa:	b2d1      	uxtb	r1, r2
 80028fc:	4a1a      	ldr	r2, [pc, #104]	; (8002968 <sampling+0x7e8>)
 80028fe:	54d1      	strb	r1, [r2, r3]

//tempo_large++;
//if (tempo_large>=(tempo_mod*4096))  tempo_large=0;     // use it count for lfo long  16*16 notes

if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;isr_change=next_isr+1;  }  else {tempo_count++;  }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 8002900:	4b1a      	ldr	r3, [pc, #104]	; (800296c <sampling+0x7ec>)
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	f8b7 23aa 	ldrh.w	r2, [r7, #938]	; 0x3aa
 8002908:	429a      	cmp	r2, r3
 800290a:	d833      	bhi.n	8002974 <sampling+0x7f4>
 800290c:	4b18      	ldr	r3, [pc, #96]	; (8002970 <sampling+0x7f0>)
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	3301      	adds	r3, #1
 8002912:	b29b      	uxth	r3, r3
 8002914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002918:	b29a      	uxth	r2, r3
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <sampling+0x7f0>)
 800291c:	801a      	strh	r2, [r3, #0]
 800291e:	4b13      	ldr	r3, [pc, #76]	; (800296c <sampling+0x7ec>)
 8002920:	2200      	movs	r2, #0
 8002922:	801a      	strh	r2, [r3, #0]
 8002924:	4b12      	ldr	r3, [pc, #72]	; (8002970 <sampling+0x7f0>)
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	3301      	adds	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <sampling+0x7c8>)
 800292e:	801a      	strh	r2, [r3, #0]
 8002930:	e026      	b.n	8002980 <sampling+0x800>
 8002932:	bf00      	nop
 8002934:	2000331c 	.word	0x2000331c
 8002938:	20000158 	.word	0x20000158
 800293c:	20000204 	.word	0x20000204
 8002940:	2000331a 	.word	0x2000331a
 8002944:	0800cc04 	.word	0x0800cc04
 8002948:	20000afc 	.word	0x20000afc
 800294c:	20000144 	.word	0x20000144
 8002950:	20000b06 	.word	0x20000b06
 8002954:	20000b04 	.word	0x20000b04
 8002958:	200058ac 	.word	0x200058ac
 800295c:	200058ad 	.word	0x200058ad
 8002960:	20004f40 	.word	0x20004f40
 8002964:	2000089c 	.word	0x2000089c
 8002968:	2000069c 	.word	0x2000069c
 800296c:	20003344 	.word	0x20003344
 8002970:	20003318 	.word	0x20003318
 8002974:	4b94      	ldr	r3, [pc, #592]	; (8002bc8 <sampling+0xa48>)
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	3301      	adds	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	4b92      	ldr	r3, [pc, #584]	; (8002bc8 <sampling+0xa48>)
 800297e:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8002980:	2300      	movs	r3, #0
 8002982:	f8a7 33ac 	strh.w	r3, [r7, #940]	; 0x3ac
	if ((next_isr>>4) != (seq.pos)) { 					//     min 6400 cycles per seq.pos ,         next note step 140ms
 8002986:	4b91      	ldr	r3, [pc, #580]	; (8002bcc <sampling+0xa4c>)
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	091b      	lsrs	r3, r3, #4
 800298c:	b29a      	uxth	r2, r3
 800298e:	4b90      	ldr	r3, [pc, #576]	; (8002bd0 <sampling+0xa50>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	429a      	cmp	r2, r3
 8002996:	d009      	beq.n	80029ac <sampling+0x82c>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8002998:	4b8c      	ldr	r3, [pc, #560]	; (8002bcc <sampling+0xa4c>)
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	b29b      	uxth	r3, r3
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	4b8b      	ldr	r3, [pc, #556]	; (8002bd0 <sampling+0xa50>)
 80029a4:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 80029a6:	2301      	movs	r3, #1
 80029a8:	f8a7 33ac 	strh.w	r3, [r7, #940]	; 0x3ac
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}

	if ((next_isr&7)==0+(sampler.offset&7))	note[3].position=1;  // for sample     run always
 80029ac:	4b87      	ldr	r3, [pc, #540]	; (8002bcc <sampling+0xa4c>)
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b88      	ldr	r3, [pc, #544]	; (8002bd4 <sampling+0xa54>)
 80029b4:	791b      	ldrb	r3, [r3, #4]
 80029b6:	4053      	eors	r3, r2
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d103      	bne.n	80029c8 <sampling+0x848>
 80029c0:	4b85      	ldr	r3, [pc, #532]	; (8002bd8 <sampling+0xa58>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos ie once in ten bankwrites ,rare
 80029c8:	f8b7 33ac 	ldrh.w	r3, [r7, #940]	; 0x3ac
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 815e 	beq.w	8002c8e <sampling+0xb0e>
	{
		serial_tosend=1;
 80029d2:	4b82      	ldr	r3, [pc, #520]	; (8002bdc <sampling+0xa5c>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
		//note_reset();
		//note[1].timeshift=(adc_values[1])&31; //assigned pots to start of loopers 0-16,works
		seqpos_i=i+1;   //record postion
 80029d8:	4b81      	ldr	r3, [pc, #516]	; (8002be0 <sampling+0xa60>)
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	3301      	adds	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	4b80      	ldr	r3, [pc, #512]	; (8002be4 <sampling+0xa64>)
 80029e2:	801a      	strh	r2, [r3, #0]


	//	note[2].timeshift=note[1].timeshift=note[3].timeshift=note[4].timeshift;
		uint8_t   loop_temp1[4];
		loop_temp1[0]=seq.pos&7;
 80029e4:	4b7a      	ldr	r3, [pc, #488]	; (8002bd0 <sampling+0xa50>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80029f2:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80029f6:	701a      	strb	r2, [r3, #0]
		loop_temp1[1]=adc_values[1]>>2;
 80029f8:	4b7b      	ldr	r3, [pc, #492]	; (8002be8 <sampling+0xa68>)
 80029fa:	885b      	ldrh	r3, [r3, #2]
 80029fc:	089b      	lsrs	r3, r3, #2
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002a06:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8002a0a:	705a      	strb	r2, [r3, #1]
		loop_temp1[2]=adc_values[2]>>2;
 8002a0c:	4b76      	ldr	r3, [pc, #472]	; (8002be8 <sampling+0xa68>)
 8002a0e:	889b      	ldrh	r3, [r3, #4]
 8002a10:	089b      	lsrs	r3, r3, #2
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002a1a:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8002a1e:	709a      	strb	r2, [r3, #2]
		loop_temp1[3]=adc_values[0]>>2;
 8002a20:	4b71      	ldr	r3, [pc, #452]	; (8002be8 <sampling+0xa68>)
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	089b      	lsrs	r3, r3, #2
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002a2e:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8002a32:	70da      	strb	r2, [r3, #3]

		//loop_temp1=(seq.pos&seq_dat); // loop position and length


		seq.loop[0]=(note[0].timeshift+loop_temp1[0]+loop_temp1[1])&31;
 8002a34:	4b68      	ldr	r3, [pc, #416]	; (8002bd8 <sampling+0xa58>)
 8002a36:	799a      	ldrb	r2, [r3, #6]
 8002a38:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002a3c:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	4413      	add	r3, r2
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002a4a:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8002a4e:	785b      	ldrb	r3, [r3, #1]
 8002a50:	4413      	add	r3, r2
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4b5d      	ldr	r3, [pc, #372]	; (8002bd0 <sampling+0xa50>)
 8002a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		seq.loop[1]=(note[1].timeshift+loop_temp1[0]+loop_temp1[2])&31;
 8002a60:	4b5d      	ldr	r3, [pc, #372]	; (8002bd8 <sampling+0xa58>)
 8002a62:	7d1a      	ldrb	r2, [r3, #20]
 8002a64:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002a68:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002a76:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8002a7a:	789b      	ldrb	r3, [r3, #2]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	4b52      	ldr	r3, [pc, #328]	; (8002bd0 <sampling+0xa50>)
 8002a88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		seq.loop[2]=(note[2].timeshift+loop_temp1[0])&31; // this is really handy with sync to notes
 8002a8c:	4b52      	ldr	r3, [pc, #328]	; (8002bd8 <sampling+0xa58>)
 8002a8e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002a92:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002a96:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4b4a      	ldr	r3, [pc, #296]	; (8002bd0 <sampling+0xa50>)
 8002aa8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		seq.loop[3]=(note[3].timeshift+loop_temp1[0]+loop_temp1[3])&31;
 8002aac:	4b4a      	ldr	r3, [pc, #296]	; (8002bd8 <sampling+0xa58>)
 8002aae:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8002ab2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002ab6:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	4413      	add	r3, r2
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002ac4:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8002ac8:	78db      	ldrb	r3, [r3, #3]
 8002aca:	4413      	add	r3, r2
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	4b3e      	ldr	r3, [pc, #248]	; (8002bd0 <sampling+0xa50>)
 8002ad6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		//seq.loop[5]=(note[5].timeshift+loop_temp1[0])&31;


			note[0].pitch=(notes_joined[seq.loop[0]])+(note[0].transpose);    // maybe join 1 and 2
 8002ada:	4b3d      	ldr	r3, [pc, #244]	; (8002bd0 <sampling+0xa50>)
 8002adc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4b42      	ldr	r3, [pc, #264]	; (8002bec <sampling+0xa6c>)
 8002ae4:	5c9a      	ldrb	r2, [r3, r2]
 8002ae6:	4b3c      	ldr	r3, [pc, #240]	; (8002bd8 <sampling+0xa58>)
 8002ae8:	795b      	ldrb	r3, [r3, #5]
 8002aea:	4413      	add	r3, r2
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	4b3a      	ldr	r3, [pc, #232]	; (8002bd8 <sampling+0xa58>)
 8002af0:	709a      	strb	r2, [r3, #2]
			//note[0].pitch=note[1].pitch+(note[0].transpose); // just double
			note[1].pitch=(notes_joined[seq.loop[1]])+(note[1].transpose);  //loop 8 notes from pos and x times
 8002af2:	4b37      	ldr	r3, [pc, #220]	; (8002bd0 <sampling+0xa50>)
 8002af4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002af8:	461a      	mov	r2, r3
 8002afa:	4b3c      	ldr	r3, [pc, #240]	; (8002bec <sampling+0xa6c>)
 8002afc:	5c9a      	ldrb	r2, [r3, r2]
 8002afe:	4b36      	ldr	r3, [pc, #216]	; (8002bd8 <sampling+0xa58>)
 8002b00:	7cdb      	ldrb	r3, [r3, #19]
 8002b02:	4413      	add	r3, r2
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4b34      	ldr	r3, [pc, #208]	; (8002bd8 <sampling+0xa58>)
 8002b08:	741a      	strb	r2, [r3, #16]
			note[2].pitch=(notes_joined[seq.loop[2]])+(note[2].transpose);  //loop 8 notes from pos and x times
 8002b0a:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <sampling+0xa50>)
 8002b0c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b36      	ldr	r3, [pc, #216]	; (8002bec <sampling+0xa6c>)
 8002b14:	5c9a      	ldrb	r2, [r3, r2]
 8002b16:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <sampling+0xa58>)
 8002b18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b1c:	4413      	add	r3, r2
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <sampling+0xa58>)
 8002b22:	779a      	strb	r2, [r3, #30]

		note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8002b24:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <sampling+0xa50>)
 8002b26:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4b2f      	ldr	r3, [pc, #188]	; (8002bec <sampling+0xa6c>)
 8002b2e:	5c9a      	ldrb	r2, [r3, r2]
 8002b30:	4b29      	ldr	r3, [pc, #164]	; (8002bd8 <sampling+0xa58>)
 8002b32:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002b36:	4413      	add	r3, r2
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <sampling+0xa58>)
 8002b3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
//	if (note[3].pitch) 		{note[3].pitch=note[3].pitch+(note[3].transpose>>4);	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off

//	note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose);  //
		patch_target_replace();
 8002b40:	f7fe fe32 	bl	80017a8 <patch_target_replace>
		uint8_t detune_temp=0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	f887 33a8 	strb.w	r3, [r7, #936]	; 0x3a8
//		if(detune_temp>27) detune_temp=27;
		   //this is for sine skip mask

//	note[3].tuned=sine_lut[MajorNote[detune_temp]];	//sets freq ,1.0594  * 16536 =17518  ,
//	note[3].tuned= (note[3].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
		mask_result =0;
 8002b4a:	4b29      	ldr	r3, [pc, #164]	; (8002bf0 <sampling+0xa70>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	801a      	strh	r2, [r3, #0]

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002b50:	2300      	movs	r3, #0
 8002b52:	f887 33af 	strb.w	r3, [r7, #943]	; 0x3af
 8002b56:	e095      	b.n	8002c84 <sampling+0xb04>
   // note[0].tuned=7181;
  //  detune_temp=(note[mask_i].pitch+(note[mask_i].detune))&31    ;
	//	if(detune_temp>27) detune_temp=27;


		    detune_temp=note[mask_i].pitch+note[mask_i].detune;
 8002b58:	f897 23af 	ldrb.w	r2, [r7, #943]	; 0x3af
 8002b5c:	491e      	ldr	r1, [pc, #120]	; (8002bd8 <sampling+0xa58>)
 8002b5e:	4613      	mov	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	440b      	add	r3, r1
 8002b68:	3302      	adds	r3, #2
 8002b6a:	7819      	ldrb	r1, [r3, #0]
 8002b6c:	f897 23af 	ldrb.w	r2, [r7, #943]	; 0x3af
 8002b70:	4819      	ldr	r0, [pc, #100]	; (8002bd8 <sampling+0xa58>)
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	4403      	add	r3, r0
 8002b7c:	3308      	adds	r3, #8
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	440b      	add	r3, r1
 8002b82:	f887 33a8 	strb.w	r3, [r7, #936]	; 0x3a8

	//if	   (detune_temp>=30) detune_temp=30;
	//note[mask_i].tuned=(sample_Noteadd[MajorNote[detune_temp]]);   // put unit tune here

		        if (detune_temp>pitch_limit ) detune_temp=pitch_limit;
 8002b86:	f897 33a8 	ldrb.w	r3, [r7, #936]	; 0x3a8
 8002b8a:	2b3c      	cmp	r3, #60	; 0x3c
 8002b8c:	d902      	bls.n	8002b94 <sampling+0xa14>
 8002b8e:	233c      	movs	r3, #60	; 0x3c
 8002b90:	f887 33a8 	strb.w	r3, [r7, #936]	; 0x3a8
		    if (detune_temp>30 )   note[mask_i].tuned=sample_Noteadd[MinorNote[detune_temp-31]];    // for now
 8002b94:	f897 33a8 	ldrb.w	r3, [r7, #936]	; 0x3a8
 8002b98:	2b1e      	cmp	r3, #30
 8002b9a:	d92f      	bls.n	8002bfc <sampling+0xa7c>
 8002b9c:	f897 33a8 	ldrb.w	r3, [r7, #936]	; 0x3a8
 8002ba0:	3b1f      	subs	r3, #31
 8002ba2:	4a14      	ldr	r2, [pc, #80]	; (8002bf4 <sampling+0xa74>)
 8002ba4:	5cd3      	ldrb	r3, [r2, r3]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f897 23af 	ldrb.w	r2, [r7, #943]	; 0x3af
 8002bac:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <sampling+0xa78>)
 8002bae:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8002bb2:	4909      	ldr	r1, [pc, #36]	; (8002bd8 <sampling+0xa58>)
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	440b      	add	r3, r1
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	801a      	strh	r2, [r3, #0]
 8002bc4:	e02d      	b.n	8002c22 <sampling+0xaa2>
 8002bc6:	bf00      	nop
 8002bc8:	20003344 	.word	0x20003344
 8002bcc:	20003318 	.word	0x20003318
 8002bd0:	20004f40 	.word	0x20004f40
 8002bd4:	20000204 	.word	0x20000204
 8002bd8:	20000158 	.word	0x20000158
 8002bdc:	20007ad9 	.word	0x20007ad9
 8002be0:	20000b06 	.word	0x20000b06
 8002be4:	20010d68 	.word	0x20010d68
 8002be8:	20000144 	.word	0x20000144
 8002bec:	200078b4 	.word	0x200078b4
 8002bf0:	20001b14 	.word	0x20001b14
 8002bf4:	0800cc90 	.word	0x0800cc90
 8002bf8:	0800ccb0 	.word	0x0800ccb0
	else note[mask_i].tuned=sample_Noteadd[MajorNote[detune_temp]];
 8002bfc:	f897 33a8 	ldrb.w	r3, [r7, #936]	; 0x3a8
 8002c00:	4aa9      	ldr	r2, [pc, #676]	; (8002ea8 <sampling+0xd28>)
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
 8002c04:	4619      	mov	r1, r3
 8002c06:	f897 23af 	ldrb.w	r2, [r7, #943]	; 0x3af
 8002c0a:	4ba8      	ldr	r3, [pc, #672]	; (8002eac <sampling+0xd2c>)
 8002c0c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8002c10:	49a7      	ldr	r1, [pc, #668]	; (8002eb0 <sampling+0xd30>)
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	440b      	add	r3, r1
 8002c1c:	330c      	adds	r3, #12
 8002c1e:	4602      	mov	r2, r0
 8002c20:	801a      	strh	r2, [r3, #0]

	//note[mask_i].tuned=sample_Noteadd[MajorNote[detune_temp]];   // put unit tune here

		float tune_temp=note[mask_i].tuned;
 8002c22:	f897 23af 	ldrb.w	r2, [r7, #943]	; 0x3af
 8002c26:	49a2      	ldr	r1, [pc, #648]	; (8002eb0 <sampling+0xd30>)
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	440b      	add	r3, r1
 8002c32:	330c      	adds	r3, #12
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c3e:	edc7 7adb 	vstr	s15, [r7, #876]	; 0x36c
		note[mask_i].tuned=tune_temp*0.99;	// this works
 8002c42:	f8d7 036c 	ldr.w	r0, [r7, #876]	; 0x36c
 8002c46:	f7fd fd5d 	bl	8000704 <__aeabi_f2d>
 8002c4a:	a395      	add	r3, pc, #596	; (adr r3, 8002ea0 <sampling+0xd20>)
 8002c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c50:	f7fd faca 	bl	80001e8 <__aeabi_dmul>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	f897 43af 	ldrb.w	r4, [r7, #943]	; 0x3af
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f7fd fda8 	bl	80007b4 <__aeabi_d2uiz>
 8002c64:	4603      	mov	r3, r0
 8002c66:	b299      	uxth	r1, r3
 8002c68:	4a91      	ldr	r2, [pc, #580]	; (8002eb0 <sampling+0xd30>)
 8002c6a:	4623      	mov	r3, r4
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	1b1b      	subs	r3, r3, r4
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	330c      	adds	r3, #12
 8002c76:	460a      	mov	r2, r1
 8002c78:	801a      	strh	r2, [r3, #0]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002c7a:	f897 33af 	ldrb.w	r3, [r7, #943]	; 0x3af
 8002c7e:	3301      	adds	r3, #1
 8002c80:	f887 33af 	strb.w	r3, [r7, #943]	; 0x3af
 8002c84:	f897 33af 	ldrb.w	r3, [r7, #943]	; 0x3af
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	f67f af65 	bls.w	8002b58 <sampling+0x9d8>
		//note_tuned[3]=2751;
	} // end of note calcualte



	if ((i&63)==0)
 8002c8e:	4b89      	ldr	r3, [pc, #548]	; (8002eb4 <sampling+0xd34>)
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d103      	bne.n	8002ca2 <sampling+0xb22>
	{
	    LFO_square_one_pulse();
 8002c9a:	f000 fe65 	bl	8003968 <LFO_square_one_pulse>

		LFO_source_synced();
 8002c9e:	f000 ff0f 	bl	8003ac0 <LFO_source_synced>
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002ca2:	4b84      	ldr	r3, [pc, #528]	; (8002eb4 <sampling+0xd34>)
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	4b82      	ldr	r3, [pc, #520]	; (8002eb4 <sampling+0xd34>)
 8002cac:	801a      	strh	r2, [r3, #0]
 8002cae:	4b81      	ldr	r3, [pc, #516]	; (8002eb4 <sampling+0xd34>)
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cb6:	f4ff adf7 	bcc.w	80028a8 <sampling+0x728>
int32_t  sample_temp3;
int32_t  sample_temp4;
int32_t  sample_temp5;


memcpy(&sample_counts_temp,sample_counts_holder,80);
 8002cba:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002cbe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002cc2:	4a7d      	ldr	r2, [pc, #500]	; (8002eb8 <sampling+0xd38>)
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	2350      	movs	r3, #80	; 0x50
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f009 fb08 	bl	800c2e0 <memcpy>

sample_counts_temp[30]=note[0].tuned;
 8002cd0:	4b77      	ldr	r3, [pc, #476]	; (8002eb0 <sampling+0xd30>)
 8002cd2:	899a      	ldrh	r2, [r3, #12]
 8002cd4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002cd8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002cdc:	879a      	strh	r2, [r3, #60]	; 0x3c
sample_counts_temp[31]=note[1].tuned;
 8002cde:	4b74      	ldr	r3, [pc, #464]	; (8002eb0 <sampling+0xd30>)
 8002ce0:	8b5a      	ldrh	r2, [r3, #26]
 8002ce2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002ce6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002cea:	87da      	strh	r2, [r3, #62]	; 0x3e
sample_counts_temp[32]=note[2].tuned;
 8002cec:	4b70      	ldr	r3, [pc, #448]	; (8002eb0 <sampling+0xd30>)
 8002cee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8002cf0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002cf4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002cf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
sample_counts_temp[33]=note[3].tuned;
 8002cfc:	4b6c      	ldr	r3, [pc, #432]	; (8002eb0 <sampling+0xd30>)
 8002cfe:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8002d00:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002d04:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002d08:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42


uint32_t*  sine_ptr_temp[5];
	sampler.start=(sampler.start_MSB<<8)+sampler.start_LSB;
 8002d0c:	4b6b      	ldr	r3, [pc, #428]	; (8002ebc <sampling+0xd3c>)
 8002d0e:	7b9b      	ldrb	r3, [r3, #14]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	021b      	lsls	r3, r3, #8
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	4b69      	ldr	r3, [pc, #420]	; (8002ebc <sampling+0xd3c>)
 8002d18:	7bdb      	ldrb	r3, [r3, #15]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	4b66      	ldr	r3, [pc, #408]	; (8002ebc <sampling+0xd3c>)
 8002d22:	80da      	strh	r2, [r3, #6]
	sampler.end=(sampler.end_MSB<<8)+sampler.end_LSB;
 8002d24:	4b65      	ldr	r3, [pc, #404]	; (8002ebc <sampling+0xd3c>)
 8002d26:	7c1b      	ldrb	r3, [r3, #16]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	021b      	lsls	r3, r3, #8
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	4b63      	ldr	r3, [pc, #396]	; (8002ebc <sampling+0xd3c>)
 8002d30:	7c5b      	ldrb	r3, [r3, #17]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	4413      	add	r3, r2
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	4b60      	ldr	r3, [pc, #384]	; (8002ebc <sampling+0xd3c>)
 8002d3a:	811a      	strh	r2, [r3, #8]
	if ((sampler.one_shot&2) && (sine_counter[7]>(sampler.end-1000))&& (note[1].osc==3))     {note[0].position=0; sine_counter[7] =0;}
	if ((sampler.one_shot&4) && (sine_counter[11]>(sampler.end-1000))&& (note[2].osc==3))     {note[0].position=0; sine_counter[8] =0;}
	if ((sampler.one_shot&8) && (sine_counter[14]>(sampler.end-1000))&& (note[3].osc==3))  {note[0].position=0; sine_counter[9] =0;}
*/

	sine_ptr_temp[0]=&sine_counter[3];
 8002d3c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002d40:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002d44:	4a5e      	ldr	r2, [pc, #376]	; (8002ec0 <sampling+0xd40>)
 8002d46:	601a      	str	r2, [r3, #0]
	sine_ptr_temp[1]=&sine_counter[6];
 8002d48:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002d4c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002d50:	4a5c      	ldr	r2, [pc, #368]	; (8002ec4 <sampling+0xd44>)
 8002d52:	605a      	str	r2, [r3, #4]
	sine_ptr_temp[2]=&sine_counter[9];
 8002d54:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002d58:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002d5c:	4a5a      	ldr	r2, [pc, #360]	; (8002ec8 <sampling+0xd48>)
 8002d5e:	609a      	str	r2, [r3, #8]
	sine_ptr_temp[3]=&sine_counter[12];
 8002d60:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002d64:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002d68:	4a58      	ldr	r2, [pc, #352]	; (8002ecc <sampling+0xd4c>)
 8002d6a:	60da      	str	r2, [r3, #12]


	if(sampler.start_MSB>sampler.end_MSB) sampler.start_MSB=0; //flip to 0  for now
 8002d6c:	4b53      	ldr	r3, [pc, #332]	; (8002ebc <sampling+0xd3c>)
 8002d6e:	7b9a      	ldrb	r2, [r3, #14]
 8002d70:	4b52      	ldr	r3, [pc, #328]	; (8002ebc <sampling+0xd3c>)
 8002d72:	7c1b      	ldrb	r3, [r3, #16]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d902      	bls.n	8002d7e <sampling+0xbfe>
 8002d78:	4b50      	ldr	r3, [pc, #320]	; (8002ebc <sampling+0xd3c>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	739a      	strb	r2, [r3, #14]
	if (sampler.ram_seq<sampler.start)      sampler.ram_seq=sampler.start;
 8002d7e:	4b4f      	ldr	r3, [pc, #316]	; (8002ebc <sampling+0xd3c>)
 8002d80:	8b1a      	ldrh	r2, [r3, #24]
 8002d82:	4b4e      	ldr	r3, [pc, #312]	; (8002ebc <sampling+0xd3c>)
 8002d84:	88db      	ldrh	r3, [r3, #6]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d203      	bcs.n	8002d92 <sampling+0xc12>
 8002d8a:	4b4c      	ldr	r3, [pc, #304]	; (8002ebc <sampling+0xd3c>)
 8002d8c:	88da      	ldrh	r2, [r3, #6]
 8002d8e:	4b4b      	ldr	r3, [pc, #300]	; (8002ebc <sampling+0xd3c>)
 8002d90:	831a      	strh	r2, [r3, #24]
	if ((sampler.ram_seq+256)>sampler.end) sampler.ram_seq=sampler.start;     // just for playback counter
 8002d92:	4b4a      	ldr	r3, [pc, #296]	; (8002ebc <sampling+0xd3c>)
 8002d94:	8b1b      	ldrh	r3, [r3, #24]
 8002d96:	33ff      	adds	r3, #255	; 0xff
 8002d98:	4a48      	ldr	r2, [pc, #288]	; (8002ebc <sampling+0xd3c>)
 8002d9a:	8912      	ldrh	r2, [r2, #8]
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	db03      	blt.n	8002da8 <sampling+0xc28>
 8002da0:	4b46      	ldr	r3, [pc, #280]	; (8002ebc <sampling+0xd3c>)
 8002da2:	88da      	ldrh	r2, [r3, #6]
 8002da4:	4b45      	ldr	r3, [pc, #276]	; (8002ebc <sampling+0xd3c>)
 8002da6:	831a      	strh	r2, [r3, #24]

	sampler.length=sampler.end-sampler.start;
 8002da8:	4b44      	ldr	r3, [pc, #272]	; (8002ebc <sampling+0xd3c>)
 8002daa:	891a      	ldrh	r2, [r3, #8]
 8002dac:	4b43      	ldr	r3, [pc, #268]	; (8002ebc <sampling+0xd3c>)
 8002dae:	88db      	ldrh	r3, [r3, #6]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	4b41      	ldr	r3, [pc, #260]	; (8002ebc <sampling+0xd3c>)
 8002db6:	815a      	strh	r2, [r3, #10]
//	 if(!note[3].position )	sampler_offset=(sampler.offset&15)*1024;   // use positon to trigger   , this needs to be better

	if(sine_counter[9]<=sampler.start) sine_counter[9]=sampler.start;
 8002db8:	4b45      	ldr	r3, [pc, #276]	; (8002ed0 <sampling+0xd50>)
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	4a3f      	ldr	r2, [pc, #252]	; (8002ebc <sampling+0xd3c>)
 8002dbe:	88d2      	ldrh	r2, [r2, #6]
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d804      	bhi.n	8002dce <sampling+0xc4e>
 8002dc4:	4b3d      	ldr	r3, [pc, #244]	; (8002ebc <sampling+0xd3c>)
 8002dc6:	88db      	ldrh	r3, [r3, #6]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <sampling+0xd50>)
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24


	//if (sine_counter[9]>((sampler.length+sampler.start+sampler_offset)-256))   {sine_counter[9]=sampler.start+sampler_offset; note[3].position=0;}// jump to start , turn off
	if (sine_counter[9]>((sampler.length+sampler.start)-256))   {sine_counter[9]=sampler.start; note[3].position=0;}
 8002dce:	4b40      	ldr	r3, [pc, #256]	; (8002ed0 <sampling+0xd50>)
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	4a3a      	ldr	r2, [pc, #232]	; (8002ebc <sampling+0xd3c>)
 8002dd4:	8952      	ldrh	r2, [r2, #10]
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4a38      	ldr	r2, [pc, #224]	; (8002ebc <sampling+0xd3c>)
 8002dda:	88d2      	ldrh	r2, [r2, #6]
 8002ddc:	440a      	add	r2, r1
 8002dde:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d908      	bls.n	8002df8 <sampling+0xc78>
 8002de6:	4b35      	ldr	r3, [pc, #212]	; (8002ebc <sampling+0xd3c>)
 8002de8:	88db      	ldrh	r3, [r3, #6]
 8002dea:	461a      	mov	r2, r3
 8002dec:	4b38      	ldr	r3, [pc, #224]	; (8002ed0 <sampling+0xd50>)
 8002dee:	625a      	str	r2, [r3, #36]	; 0x24
 8002df0:	4b2f      	ldr	r3, [pc, #188]	; (8002eb0 <sampling+0xd30>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	sampler.start_ptr=&RAM[sine_counter[9]];
 8002df8:	4b35      	ldr	r3, [pc, #212]	; (8002ed0 <sampling+0xd50>)
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	4a35      	ldr	r2, [pc, #212]	; (8002ed4 <sampling+0xd54>)
 8002e00:	4413      	add	r3, r2
 8002e02:	4a2e      	ldr	r2, [pc, #184]	; (8002ebc <sampling+0xd3c>)
 8002e04:	6153      	str	r3, [r2, #20]
	//sampler.start_ptr=&RAM[sine_counter[9]-sampler_offset];    // only 256
//	sampler_offset=(sampler.offset&15)*(sampler.length>>4);

//tuned_list[0]=6397;
uint16_t accu_count[4];
memcpy(&accu_count,sample_accu_counter,8);  // copy counters
 8002e06:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002e0a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002e0e:	4a32      	ldr	r2, [pc, #200]	; (8002ed8 <sampling+0xd58>)
 8002e10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e14:	e883 0003 	stmia.w	r3, {r0, r1}

memcpy(&sample_accus,sample_accus_hold,16);    // this is good
 8002e18:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8002e1c:	2210      	movs	r2, #16
 8002e1e:	492f      	ldr	r1, [pc, #188]	; (8002edc <sampling+0xd5c>)
 8002e20:	4618      	mov	r0, r3
 8002e22:	f009 fa5d 	bl	800c2e0 <memcpy>


uint8_t*  sample_block_ptr=&flash_read_block ;    // temporary only
 8002e26:	4b2e      	ldr	r3, [pc, #184]	; (8002ee0 <sampling+0xd60>)
 8002e28:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390

uint16_t sample_block_temp[256];
uint8_t flash_result=0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f887 338f 	strb.w	r3, [r7, #911]	; 0x38f
// if (sampler.record_enable==0)      {flash_result= flash_page_read (sampler.ram_seq<<1 );    		}
uint8_t send_spi1[4];



	 send_spi1[0]=0x03; //read page 1
 8002e32:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002e36:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	701a      	strb	r2, [r3, #0]
	send_spi1[1]=0;
 8002e3e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002e42:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8002e46:	2200      	movs	r2, #0
 8002e48:	705a      	strb	r2, [r3, #1]
	send_spi1[2]=1;
 8002e4a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002e4e:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8002e52:	2201      	movs	r2, #1
 8002e54:	709a      	strb	r2, [r3, #2]
	send_spi1[3]=0;     // can start anywhere
 8002e56:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002e5a:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8002e5e:	2200      	movs	r2, #0
 8002e60:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8002e62:	2200      	movs	r2, #0
 8002e64:	2110      	movs	r1, #16
 8002e66:	481f      	ldr	r0, [pc, #124]	; (8002ee4 <sampling+0xd64>)
 8002e68:	f005 f948 	bl	80080fc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit (&hspi1, send_spi1, 4, 10); // request data
 8002e6c:	1d39      	adds	r1, r7, #4
 8002e6e:	230a      	movs	r3, #10
 8002e70:	2204      	movs	r2, #4
 8002e72:	481d      	ldr	r0, [pc, #116]	; (8002ee8 <sampling+0xd68>)
 8002e74:	f006 fe15 	bl	8009aa2 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi1,sample_block_temp, 512, 100);   // works fine ,,  150 cycles though
 8002e78:	f107 0108 	add.w	r1, r7, #8
 8002e7c:	2364      	movs	r3, #100	; 0x64
 8002e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e82:	4819      	ldr	r0, [pc, #100]	; (8002ee8 <sampling+0xd68>)
 8002e84:	f006 ff49 	bl	8009d1a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // when readin low till the end
 8002e88:	2201      	movs	r2, #1
 8002e8a:	2110      	movs	r1, #16
 8002e8c:	4815      	ldr	r0, [pc, #84]	; (8002ee4 <sampling+0xd64>)
 8002e8e:	f005 f935 	bl	80080fc <HAL_GPIO_WritePin>

//
//if (sampler.record_enable==0)      flash_result = flash_page_read (sampler.ram_seq<<1 );   // should jump 256
//  memcpy(&sample_block_temp,flash_read_block,512);

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002e92:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <sampling+0xd34>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	801a      	strh	r2, [r3, #0]
 8002e98:	e250      	b.n	800333c <sampling+0x11bc>
 8002e9a:	bf00      	nop
 8002e9c:	f3af 8000 	nop.w
 8002ea0:	7ae147ae 	.word	0x7ae147ae
 8002ea4:	3fefae14 	.word	0x3fefae14
 8002ea8:	0800cc70 	.word	0x0800cc70
 8002eac:	0800ccb0 	.word	0x0800ccb0
 8002eb0:	20000158 	.word	0x20000158
 8002eb4:	20000b06 	.word	0x20000b06
 8002eb8:	20000638 	.word	0x20000638
 8002ebc:	20000204 	.word	0x20000204
 8002ec0:	20000aa8 	.word	0x20000aa8
 8002ec4:	20000ab4 	.word	0x20000ab4
 8002ec8:	20000ac0 	.word	0x20000ac0
 8002ecc:	20000acc 	.word	0x20000acc
 8002ed0:	20000a9c 	.word	0x20000a9c
 8002ed4:	20007adc 	.word	0x20007adc
 8002ed8:	20000688 	.word	0x20000688
 8002edc:	2000331c 	.word	0x2000331c
 8002ee0:	2000022c 	.word	0x2000022c
 8002ee4:	40020000 	.word	0x40020000
 8002ee8:	2001126c 	.word	0x2001126c
	i_total=i+sample_pointB;
 8002eec:	4bce      	ldr	r3, [pc, #824]	; (8003228 <sampling+0x10a8>)
 8002eee:	881a      	ldrh	r2, [r3, #0]
 8002ef0:	4bce      	ldr	r3, [pc, #824]	; (800322c <sampling+0x10ac>)
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f8a7 338c 	strh.w	r3, [r7, #908]	; 0x38c
	sampling_position=(i>>6);
 8002efa:	4bcb      	ldr	r3, [pc, #812]	; (8003228 <sampling+0x10a8>)
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	099b      	lsrs	r3, r3, #6
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	4bca      	ldr	r3, [pc, #808]	; (8003230 <sampling+0x10b0>)
 8002f06:	701a      	strb	r2, [r3, #0]


	sample_adc=input_holder[i>>1];
 8002f08:	4bc7      	ldr	r3, [pc, #796]	; (8003228 <sampling+0x10a8>)
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	085b      	lsrs	r3, r3, #1
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	4bc8      	ldr	r3, [pc, #800]	; (8003234 <sampling+0x10b4>)
 8002f14:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002f18:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
	sample_adc=(sample_adc-2040)<<11;
 8002f1c:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8002f20:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8002f24:	02db      	lsls	r3, r3, #11
 8002f26:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
	ram_temp=((RAM[sampler.ram_seq])); // grab data   , half rate , this just loops
 8002f2a:	4bc3      	ldr	r3, [pc, #780]	; (8003238 <sampling+0x10b8>)
 8002f2c:	8b1b      	ldrh	r3, [r3, #24]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4bc2      	ldr	r3, [pc, #776]	; (800323c <sampling+0x10bc>)
 8002f32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002f36:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
	ram_temp=flash_read_block[(sampler.ram_seq&255)];
 8002f3a:	4bbf      	ldr	r3, [pc, #764]	; (8003238 <sampling+0x10b8>)
 8002f3c:	8b1b      	ldrh	r3, [r3, #24]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	4abf      	ldr	r2, [pc, #764]	; (8003240 <sampling+0x10c0>)
 8002f42:	5cd3      	ldrb	r3, [r2, r3]
 8002f44:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300

	ram_temp=(ram_temp-2040)<<11;    // will clip sometimes
 8002f48:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 8002f4c:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8002f50:	02db      	lsls	r3, r3, #11
 8002f52:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
	if(i&1)  sampler.ram_seq++;
 8002f56:	4bb4      	ldr	r3, [pc, #720]	; (8003228 <sampling+0x10a8>)
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <sampling+0xdee>
 8002f62:	4bb5      	ldr	r3, [pc, #724]	; (8003238 <sampling+0x10b8>)
 8002f64:	8b1b      	ldrh	r3, [r3, #24]
 8002f66:	3301      	adds	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	4bb3      	ldr	r3, [pc, #716]	; (8003238 <sampling+0x10b8>)
 8002f6c:	831a      	strh	r2, [r3, #24]

	if (i==seqpos_i) {sample_counts_temp[20]=sample_counts_temp[30]; 		//delay tuned changed till correct time
 8002f6e:	4bae      	ldr	r3, [pc, #696]	; (8003228 <sampling+0x10a8>)
 8002f70:	881a      	ldrh	r2, [r3, #0]
 8002f72:	4bb4      	ldr	r3, [pc, #720]	; (8003244 <sampling+0x10c4>)
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d129      	bne.n	8002fce <sampling+0xe4e>
 8002f7a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002f7e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f82:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002f84:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002f88:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f8c:	851a      	strh	r2, [r3, #40]	; 0x28
	sample_counts_temp[21]=sample_counts_temp[31];
 8002f8e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002f92:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f96:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002f98:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002f9c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
	sample_counts_temp[22]=sample_counts_temp[32];
 8002fa2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002fa6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002faa:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002fae:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002fb2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002fb6:	859a      	strh	r2, [r3, #44]	; 0x2c
	sample_counts_temp[23]=sample_counts_temp[33];
 8002fb8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002fbc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002fc0:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002fc4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002fc8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002fcc:	85da      	strh	r2, [r3, #46]	; 0x2e
	}

	if ((i&63)==0)	{
 8002fce:	4b96      	ldr	r3, [pc, #600]	; (8003228 <sampling+0x10a8>)
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f040 8095 	bne.w	8003106 <sampling+0xf86>
	  //  LFO_source_new(); // calculate lfo maybe 8 times for now
	    patch_target_replace();    // update values , not too bad
 8002fdc:	f7fe fbe4 	bl	80017a8 <patch_target_replace>
float freq_temp=arm_sin_f32(filter[0].cutoff_1*0.006159)    ;   // need this for useful filter
 8002fe0:	4b99      	ldr	r3, [pc, #612]	; (8003248 <sampling+0x10c8>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fd fb7b 	bl	80006e0 <__aeabi_i2d>
 8002fea:	a38b      	add	r3, pc, #556	; (adr r3, 8003218 <sampling+0x1098>)
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	f7fd f8fa 	bl	80001e8 <__aeabi_dmul>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	f7fd fbfa 	bl	80007f4 <__aeabi_d2f>
 8003000:	4603      	mov	r3, r0
 8003002:	ee00 3a10 	vmov	s0, r3
 8003006:	f009 f8f9 	bl	800c1fc <arm_sin_f32>
 800300a:	ed87 0ae2 	vstr	s0, [r7, #904]	; 0x388
	freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 800300e:	4b88      	ldr	r3, [pc, #544]	; (8003230 <sampling+0x10b0>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003016:	edd7 7ae2 	vldr	s15, [r7, #904]	; 0x388
 800301a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800301e:	4a8b      	ldr	r2, [pc, #556]	; (800324c <sampling+0x10cc>)
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.006)    ;
 8003028:	4b87      	ldr	r3, [pc, #540]	; (8003248 <sampling+0x10c8>)
 800302a:	7a1b      	ldrb	r3, [r3, #8]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fb57 	bl	80006e0 <__aeabi_i2d>
 8003032:	a37b      	add	r3, pc, #492	; (adr r3, 8003220 <sampling+0x10a0>)
 8003034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003038:	f7fd f8d6 	bl	80001e8 <__aeabi_dmul>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	f7fd fbd6 	bl	80007f4 <__aeabi_d2f>
 8003048:	4603      	mov	r3, r0
 800304a:	ee00 3a10 	vmov	s0, r3
 800304e:	f009 f8d5 	bl	800c1fc <arm_sin_f32>
 8003052:	ed87 0ae2 	vstr	s0, [r7, #904]	; 0x388
	freq_pointer[1] [sampling_position] =1-freq_temp ; // filter lfos
 8003056:	4b76      	ldr	r3, [pc, #472]	; (8003230 <sampling+0x10b0>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800305e:	edd7 7ae2 	vldr	s15, [r7, #904]	; 0x388
 8003062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003066:	4a79      	ldr	r2, [pc, #484]	; (800324c <sampling+0x10cc>)
 8003068:	3309      	adds	r3, #9
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	edc3 7a00 	vstr	s15, [r3]
	freq_temp=arm_sin_f32(filter[2].cutoff_1*0.006)    ;
 8003072:	4b75      	ldr	r3, [pc, #468]	; (8003248 <sampling+0x10c8>)
 8003074:	7c1b      	ldrb	r3, [r3, #16]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fb32 	bl	80006e0 <__aeabi_i2d>
 800307c:	a368      	add	r3, pc, #416	; (adr r3, 8003220 <sampling+0x10a0>)
 800307e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003082:	f7fd f8b1 	bl	80001e8 <__aeabi_dmul>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4610      	mov	r0, r2
 800308c:	4619      	mov	r1, r3
 800308e:	f7fd fbb1 	bl	80007f4 <__aeabi_d2f>
 8003092:	4603      	mov	r3, r0
 8003094:	ee00 3a10 	vmov	s0, r3
 8003098:	f009 f8b0 	bl	800c1fc <arm_sin_f32>
 800309c:	ed87 0ae2 	vstr	s0, [r7, #904]	; 0x388
	freq_pointer[2] [sampling_position] =1-freq_temp ; // filter lfos
 80030a0:	4b63      	ldr	r3, [pc, #396]	; (8003230 <sampling+0x10b0>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030a8:	edd7 7ae2 	vldr	s15, [r7, #904]	; 0x388
 80030ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030b0:	4a66      	ldr	r2, [pc, #408]	; (800324c <sampling+0x10cc>)
 80030b2:	3312      	adds	r3, #18
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[3].cutoff_1*0.006)    ;
 80030bc:	4b62      	ldr	r3, [pc, #392]	; (8003248 <sampling+0x10c8>)
 80030be:	7e1b      	ldrb	r3, [r3, #24]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd fb0d 	bl	80006e0 <__aeabi_i2d>
 80030c6:	a356      	add	r3, pc, #344	; (adr r3, 8003220 <sampling+0x10a0>)
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	f7fd f88c 	bl	80001e8 <__aeabi_dmul>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4610      	mov	r0, r2
 80030d6:	4619      	mov	r1, r3
 80030d8:	f7fd fb8c 	bl	80007f4 <__aeabi_d2f>
 80030dc:	4603      	mov	r3, r0
 80030de:	ee00 3a10 	vmov	s0, r3
 80030e2:	f009 f88b 	bl	800c1fc <arm_sin_f32>
 80030e6:	ed87 0ae2 	vstr	s0, [r7, #904]	; 0x388
	freq_pointer[3] [sampling_position] =1-freq_temp ; // filter lfos
 80030ea:	4b51      	ldr	r3, [pc, #324]	; (8003230 <sampling+0x10b0>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030f2:	edd7 7ae2 	vldr	s15, [r7, #904]	; 0x388
 80030f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030fa:	4a54      	ldr	r2, [pc, #336]	; (800324c <sampling+0x10cc>)
 80030fc:	331b      	adds	r3, #27
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	edc3 7a00 	vstr	s15, [r3]

	}

		sample_accus[0] = sample_accus[0] + sample_counts_temp[20];  // normal adder full volume
 8003106:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800310a:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800310e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8003112:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8003114:	4413      	add	r3, r2
 8003116:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
		sample_accus[1] = sample_accus[1] + sample_counts_temp[21];
 800311a:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 800311e:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8003122:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8003126:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8003128:	4413      	add	r3, r2
 800312a:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
		sample_accus[2] = sample_accus[2] + sample_counts_temp[22]; // bouncing somewhere
 800312e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8003132:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8003136:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800313a:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800313c:	4413      	add	r3, r2
 800313e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
		sample_accus[3] = sample_accus[3] + sample_counts_temp[23];  // 6 cycles
 8003142:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8003146:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800314a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800314e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8003150:	4413      	add	r3, r2
 8003152:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350

			if (sample_accus[0]>524287) sample_accus[0] =-0-sample_accus[0] ; // faster >  than &  ,strange,  or is even worse
 8003156:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800315a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800315e:	db04      	blt.n	800316a <sampling+0xfea>
 8003160:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8003164:	425b      	negs	r3, r3
 8003166:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
			if (sample_accus[1]>524287) sample_accus[1] =-0-sample_accus[1] ; // faster >  than &  ,strange
 800316a:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 800316e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003172:	db04      	blt.n	800317e <sampling+0xffe>
 8003174:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8003178:	425b      	negs	r3, r3
 800317a:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
			if (sample_accus[2]>524287) sample_accus[2] =-0-sample_accus[2] ; //
 800317e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8003182:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003186:	db04      	blt.n	8003192 <sampling+0x1012>
 8003188:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800318c:	425b      	negs	r3, r3
 800318e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
			if (sample_accus[3]>524287) sample_accus[3] =-0-sample_accus[3] ; //  6 cycles
 8003192:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8003196:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800319a:	db04      	blt.n	80031a6 <sampling+0x1026>
 800319c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80031a0:	425b      	negs	r3, r3
 80031a2:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
//		if (sample_accus[0]>(1048575)) sample_accus[0] =-0-sample_accus[0] ; // faster >  than &  ,strange,  or is even worse
//		if (sample_accus[1]>1048575) sample_accus[1] =-0-sample_accus[1] ; // faster >  than &  ,strange
//		if (sample_accus[2]>1048575) sample_accus[2] =-0-sample_accus[2] ; //
//		if (sample_accus[3]>1048575) sample_accus[3] =-0-sample_accus[3] ; //

	sample_Accu[0]=(abs(sample_accus[0])-262144)<<1;
 80031a6:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bfb8      	it	lt
 80031ae:	425b      	neglt	r3, r3
 80031b0:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
	sample_Accu[1]=(abs(sample_accus[1])-262144)<<1;
 80031ba:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bfb8      	it	lt
 80031c2:	425b      	neglt	r3, r3
 80031c4:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
	sample_Accu[2]=(abs(sample_accus[2])-262144)<<1;
 80031ce:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	bfb8      	it	lt
 80031d6:	425b      	neglt	r3, r3
 80031d8:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
	sample_Accu[3]=(abs(sample_accus[3])-262144)<<1;
 80031e2:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	bfb8      	it	lt
 80031ea:	425b      	neglt	r3, r3
 80031ec:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328



					sample_temp1=(*osc_pointers[0])*note[0].velocity;// needs cut a bit  maybe some diff vol settings
 80031f6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80031fa:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a13      	ldr	r2, [pc, #76]	; (8003250 <sampling+0x10d0>)
 8003204:	79d2      	ldrb	r2, [r2, #7]
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
					sample_temp2=(sample_temp1)>>2;
 800320e:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8003212:	109b      	asrs	r3, r3, #2
 8003214:	e01e      	b.n	8003254 <sampling+0x10d4>
 8003216:	bf00      	nop
 8003218:	f9378ee3 	.word	0xf9378ee3
 800321c:	3f793a2d 	.word	0x3f793a2d
 8003220:	bc6a7efa 	.word	0xbc6a7efa
 8003224:	3f789374 	.word	0x3f789374
 8003228:	20000b06 	.word	0x20000b06
 800322c:	20000b04 	.word	0x20000b04
 8003230:	200058ac 	.word	0x200058ac
 8003234:	20003cfc 	.word	0x20003cfc
 8003238:	20000204 	.word	0x20000204
 800323c:	20007adc 	.word	0x20007adc
 8003240:	2000022c 	.word	0x2000022c
 8003244:	20010d68 	.word	0x20010d68
 8003248:	200001e4 	.word	0x200001e4
 800324c:	200033d4 	.word	0x200033d4
 8003250:	20000158 	.word	0x20000158
 8003254:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380

					sample_temp1=(*osc_pointers[1])*note[1].velocity; // needs cut a bit  ,default 20bit
 8003258:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800325c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a4e      	ldr	r2, [pc, #312]	; (80033a0 <sampling+0x1220>)
 8003266:	7d52      	ldrb	r2, [r2, #21]
 8003268:	fb02 f303 	mul.w	r3, r2, r3
 800326c:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
					sample_temp3=sample_temp1>>2; // 20+8
 8003270:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8003274:	109b      	asrs	r3, r3, #2
 8003276:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c

					sample_temp1=(*osc_pointers[2])*note[2].velocity;      // needs some gain fine tune !
 800327a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800327e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a46      	ldr	r2, [pc, #280]	; (80033a0 <sampling+0x1220>)
 8003288:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800328c:	fb02 f303 	mul.w	r3, r2, r3
 8003290:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
					sample_temp4 =sample_temp1>>2;    // 64 default 20+8
 8003294:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8003298:	109b      	asrs	r3, r3, #2
 800329a:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378

					if (note[3].position) sample_Accu[9]=((*(sampler.start_ptr+(i>>1))-2040)<<10)+(sample_Accu[9]>>1); // bit hot , also  add avr
 800329e:	4b40      	ldr	r3, [pc, #256]	; (80033a0 <sampling+0x1220>)
 80032a0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d011      	beq.n	80032cc <sampling+0x114c>
 80032a8:	4b3e      	ldr	r3, [pc, #248]	; (80033a4 <sampling+0x1224>)
 80032aa:	695a      	ldr	r2, [r3, #20]
 80032ac:	4b3e      	ldr	r3, [pc, #248]	; (80033a8 <sampling+0x1228>)
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	085b      	lsrs	r3, r3, #1
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4413      	add	r3, r2
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 80032be:	029a      	lsls	r2, r3, #10
 80032c0:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 80032c4:	105b      	asrs	r3, r3, #1
 80032c6:	4413      	add	r3, r2
 80032c8:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340


					sample_temp1=(*osc_pointers[3])*	note[3].velocity;  // sine out is 16bit, add 4 then 16+8
 80032cc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80032d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a31      	ldr	r2, [pc, #196]	; (80033a0 <sampling+0x1220>)
 80032da:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
					sample_temp5 =sample_temp1>>2;
 80032e6:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 80032ea:	109b      	asrs	r3, r3, #2
 80032ec:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
					//sample_Accu[3] =sine_out>>4;
	play_holder0[i]=sample_temp2;  // write to bank
 80032f0:	4b2d      	ldr	r3, [pc, #180]	; (80033a8 <sampling+0x1228>)
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	4619      	mov	r1, r3
 80032f6:	4a2d      	ldr	r2, [pc, #180]	; (80033ac <sampling+0x122c>)
 80032f8:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 80032fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder1[i]=sample_temp3;
 8003300:	4b29      	ldr	r3, [pc, #164]	; (80033a8 <sampling+0x1228>)
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	4619      	mov	r1, r3
 8003306:	4a2a      	ldr	r2, [pc, #168]	; (80033b0 <sampling+0x1230>)
 8003308:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 800330c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder2[i]=sample_temp4;
 8003310:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <sampling+0x1228>)
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	4619      	mov	r1, r3
 8003316:	4a27      	ldr	r2, [pc, #156]	; (80033b4 <sampling+0x1234>)
 8003318:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 800331c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder3[i]=sample_temp5;
 8003320:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <sampling+0x1228>)
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	4619      	mov	r1, r3
 8003326:	4a24      	ldr	r2, [pc, #144]	; (80033b8 <sampling+0x1238>)
 8003328:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 800332c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8003330:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <sampling+0x1228>)
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	3301      	adds	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	4b1b      	ldr	r3, [pc, #108]	; (80033a8 <sampling+0x1228>)
 800333a:	801a      	strh	r2, [r3, #0]
 800333c:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <sampling+0x1228>)
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003344:	f4ff add2 	bcc.w	8002eec <sampling+0xd6c>
	} // end of osc , doing some sound

						if(note[3].position)		sine_counter[9]=sine_counter[9]+256;  // count up when on
 8003348:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <sampling+0x1220>)
 800334a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <sampling+0x11de>
 8003352:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <sampling+0x123c>)
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800335a:	4a18      	ldr	r2, [pc, #96]	; (80033bc <sampling+0x123c>)
 800335c:	6253      	str	r3, [r2, #36]	; 0x24

memcpy(&sample_accus_hold,sample_accus,16);
 800335e:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8003362:	2210      	movs	r2, #16
 8003364:	4619      	mov	r1, r3
 8003366:	4816      	ldr	r0, [pc, #88]	; (80033c0 <sampling+0x1240>)
 8003368:	f008 ffba 	bl	800c2e0 <memcpy>
memcpy(&sample_accu_counter,accu_count,8);   // copy back
 800336c:	4915      	ldr	r1, [pc, #84]	; (80033c4 <sampling+0x1244>)
 800336e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003372:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 8003376:	460b      	mov	r3, r1
 8003378:	e892 0003 	ldmia.w	r2, {r0, r1}
 800337c:	e883 0003 	stmia.w	r3, {r0, r1}
memcpy(&sample_counts_holder,sample_counts_temp,80);
 8003380:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <sampling+0x1248>)
 8003382:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003386:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800338a:	4610      	mov	r0, r2
 800338c:	4619      	mov	r1, r3
 800338e:	2350      	movs	r3, #80	; 0x50
 8003390:	461a      	mov	r2, r3
 8003392:	f008 ffa5 	bl	800c2e0 <memcpy>
int32_t filter_Accu2;

//uint16_t* click=&input_holder[0];


			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8003396:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <sampling+0x1228>)
 8003398:	2200      	movs	r2, #0
 800339a:	801a      	strh	r2, [r3, #0]
 800339c:	e2b3      	b.n	8003906 <sampling+0x1786>
 800339e:	bf00      	nop
 80033a0:	20000158 	.word	0x20000158
 80033a4:	20000204 	.word	0x20000204
 80033a8:	20000b06 	.word	0x20000b06
 80033ac:	200070b0 	.word	0x200070b0
 80033b0:	200058b0 	.word	0x200058b0
 80033b4:	200060b0 	.word	0x200060b0
 80033b8:	200068b0 	.word	0x200068b0
 80033bc:	20000a9c 	.word	0x20000a9c
 80033c0:	2000331c 	.word	0x2000331c
 80033c4:	20000688 	.word	0x20000688
 80033c8:	20000638 	.word	0x20000638
				i_total=i+sample_pointB;
 80033cc:	4bbd      	ldr	r3, [pc, #756]	; (80036c4 <sampling+0x1544>)
 80033ce:	881a      	ldrh	r2, [r3, #0]
 80033d0:	4bbd      	ldr	r3, [pc, #756]	; (80036c8 <sampling+0x1548>)
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	4413      	add	r3, r2
 80033d6:	f8a7 338c 	strh.w	r3, [r7, #908]	; 0x38c

			sampling_position=(i>>6);
 80033da:	4bba      	ldr	r3, [pc, #744]	; (80036c4 <sampling+0x1544>)
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	099b      	lsrs	r3, r3, #6
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	4bb9      	ldr	r3, [pc, #740]	; (80036cc <sampling+0x154c>)
 80033e6:	701a      	strb	r2, [r3, #0]
			// filter 1
			if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 80033e8:	4bb6      	ldr	r3, [pc, #728]	; (80036c4 <sampling+0x1544>)
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	095b      	lsrs	r3, r3, #5
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80033f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80033fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033fe:	4ab1      	ldr	r2, [pc, #708]	; (80036c4 <sampling+0x1544>)
 8003400:	8812      	ldrh	r2, [r2, #0]
 8003402:	f002 021f 	and.w	r2, r2, #31
 8003406:	2101      	movs	r1, #1
 8003408:	fa01 f202 	lsl.w	r2, r1, r2
 800340c:	4293      	cmp	r3, r2
 800340e:	d10f      	bne.n	8003430 <sampling+0x12b0>
 8003410:	4baf      	ldr	r3, [pc, #700]	; (80036d0 <sampling+0x1550>)
 8003412:	2200      	movs	r2, #0
 8003414:	711a      	strb	r2, [r3, #4]
 8003416:	4baf      	ldr	r3, [pc, #700]	; (80036d4 <sampling+0x1554>)
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	3301      	adds	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	4bad      	ldr	r3, [pc, #692]	; (80036d4 <sampling+0x1554>)
 8003420:	801a      	strh	r2, [r3, #0]
 8003422:	4bac      	ldr	r3, [pc, #688]	; (80036d4 <sampling+0x1554>)
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800342a:	b29a      	uxth	r2, r3
 800342c:	4ba9      	ldr	r3, [pc, #676]	; (80036d4 <sampling+0x1554>)
 800342e:	801a      	strh	r2, [r3, #0]

			phase_bank0[i&31]= sample_Accu[0]=play_holder0[i];
 8003430:	4ba4      	ldr	r3, [pc, #656]	; (80036c4 <sampling+0x1544>)
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	461a      	mov	r2, r3
 8003436:	4ba8      	ldr	r3, [pc, #672]	; (80036d8 <sampling+0x1558>)
 8003438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800343c:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8003440:	4ba0      	ldr	r3, [pc, #640]	; (80036c4 <sampling+0x1544>)
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 800344c:	49a3      	ldr	r1, [pc, #652]	; (80036dc <sampling+0x155c>)
 800344e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank1[i&31]=sample_Accu[1]=play_holder1[i] ; // saw
 8003452:	4b9c      	ldr	r3, [pc, #624]	; (80036c4 <sampling+0x1544>)
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	4ba1      	ldr	r3, [pc, #644]	; (80036e0 <sampling+0x1560>)
 800345a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800345e:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8003462:	4b98      	ldr	r3, [pc, #608]	; (80036c4 <sampling+0x1544>)
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 800346e:	499d      	ldr	r1, [pc, #628]	; (80036e4 <sampling+0x1564>)
 8003470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank2[i&31]=sample_Accu[2]=play_holder2[i];  // sine input
 8003474:	4b93      	ldr	r3, [pc, #588]	; (80036c4 <sampling+0x1544>)
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	4b9b      	ldr	r3, [pc, #620]	; (80036e8 <sampling+0x1568>)
 800347c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003480:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8003484:	4b8f      	ldr	r3, [pc, #572]	; (80036c4 <sampling+0x1544>)
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	f003 031f 	and.w	r3, r3, #31
 800348c:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 8003490:	4996      	ldr	r1, [pc, #600]	; (80036ec <sampling+0x156c>)
 8003492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank3[i&31]=sample_Accu[3]=play_holder3[i] ;
 8003496:	4b8b      	ldr	r3, [pc, #556]	; (80036c4 <sampling+0x1544>)
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	4b94      	ldr	r3, [pc, #592]	; (80036f0 <sampling+0x1570>)
 800349e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a2:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 80034a6:	4b87      	ldr	r3, [pc, #540]	; (80036c4 <sampling+0x1544>)
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	f8d7 2328 	ldr.w	r2, [r7, #808]	; 0x328
 80034b2:	4990      	ldr	r1, [pc, #576]	; (80036f4 <sampling+0x1574>)
 80034b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	if (filter[0].resonance)	sample_Accu[0]=(sample_Accu[0]>>1)+(phase_bank0[  ((i&31)+(31-(filter[0].resonance&31)))&31]>>1); // PHASER
 80034b8:	4b8f      	ldr	r3, [pc, #572]	; (80036f8 <sampling+0x1578>)
 80034ba:	789b      	ldrb	r3, [r3, #2]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d012      	beq.n	80034e6 <sampling+0x1366>
 80034c0:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 80034c4:	105a      	asrs	r2, r3, #1
 80034c6:	4b7f      	ldr	r3, [pc, #508]	; (80036c4 <sampling+0x1544>)
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	4619      	mov	r1, r3
 80034cc:	4b8a      	ldr	r3, [pc, #552]	; (80036f8 <sampling+0x1578>)
 80034ce:	789b      	ldrb	r3, [r3, #2]
 80034d0:	1acb      	subs	r3, r1, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	4980      	ldr	r1, [pc, #512]	; (80036dc <sampling+0x155c>)
 80034da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034de:	105b      	asrs	r3, r3, #1
 80034e0:	4413      	add	r3, r2
 80034e2:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
	if (filter[1].resonance)	sample_Accu[1]=(sample_Accu[1]>>1)+(phase_bank1[  ((i&31)+(31-(filter[1].resonance&31)))&31]>>1);
 80034e6:	4b84      	ldr	r3, [pc, #528]	; (80036f8 <sampling+0x1578>)
 80034e8:	7a9b      	ldrb	r3, [r3, #10]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d012      	beq.n	8003514 <sampling+0x1394>
 80034ee:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 80034f2:	105a      	asrs	r2, r3, #1
 80034f4:	4b73      	ldr	r3, [pc, #460]	; (80036c4 <sampling+0x1544>)
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	4619      	mov	r1, r3
 80034fa:	4b7f      	ldr	r3, [pc, #508]	; (80036f8 <sampling+0x1578>)
 80034fc:	7a9b      	ldrb	r3, [r3, #10]
 80034fe:	1acb      	subs	r3, r1, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	4977      	ldr	r1, [pc, #476]	; (80036e4 <sampling+0x1564>)
 8003508:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800350c:	105b      	asrs	r3, r3, #1
 800350e:	4413      	add	r3, r2
 8003510:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
	if (filter[2].resonance)	sample_Accu[2]=(sample_Accu[2]>>1)+(phase_bank2[  ((i&31)+(31-(filter[2].resonance&31)))&31]>>1);
 8003514:	4b78      	ldr	r3, [pc, #480]	; (80036f8 <sampling+0x1578>)
 8003516:	7c9b      	ldrb	r3, [r3, #18]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d012      	beq.n	8003542 <sampling+0x13c2>
 800351c:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8003520:	105a      	asrs	r2, r3, #1
 8003522:	4b68      	ldr	r3, [pc, #416]	; (80036c4 <sampling+0x1544>)
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	4619      	mov	r1, r3
 8003528:	4b73      	ldr	r3, [pc, #460]	; (80036f8 <sampling+0x1578>)
 800352a:	7c9b      	ldrb	r3, [r3, #18]
 800352c:	1acb      	subs	r3, r1, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	496d      	ldr	r1, [pc, #436]	; (80036ec <sampling+0x156c>)
 8003536:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800353a:	105b      	asrs	r3, r3, #1
 800353c:	4413      	add	r3, r2
 800353e:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
	if (filter[3].resonance)	sample_Accu[3]=(sample_Accu[3]>>1)+(phase_bank3[  ((i&31)+(31-(filter[3].resonance&31)))&31]>>1);
 8003542:	4b6d      	ldr	r3, [pc, #436]	; (80036f8 <sampling+0x1578>)
 8003544:	7e9b      	ldrb	r3, [r3, #26]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d012      	beq.n	8003570 <sampling+0x13f0>
 800354a:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 800354e:	105a      	asrs	r2, r3, #1
 8003550:	4b5c      	ldr	r3, [pc, #368]	; (80036c4 <sampling+0x1544>)
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	4619      	mov	r1, r3
 8003556:	4b68      	ldr	r3, [pc, #416]	; (80036f8 <sampling+0x1578>)
 8003558:	7e9b      	ldrb	r3, [r3, #26]
 800355a:	1acb      	subs	r3, r1, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	4964      	ldr	r1, [pc, #400]	; (80036f4 <sampling+0x1574>)
 8003564:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003568:	105b      	asrs	r3, r3, #1
 800356a:	4413      	add	r3, r2
 800356c:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
	// this section is about 100 tmr cycles
			if ((i&63)==0){frq_point();
 8003570:	4b54      	ldr	r3, [pc, #336]	; (80036c4 <sampling+0x1544>)
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <sampling+0x1400>
 800357c:	f000 fbf8 	bl	8003d70 <frq_point>


   // vol lfo


		filter_accus[1]=sample_Accu[0]; // saw
 8003580:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8003584:	ee07 3a90 	vmov	s15, r3
 8003588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800358c:	4b5b      	ldr	r3, [pc, #364]	; (80036fc <sampling+0x157c>)
 800358e:	edc3 7a01 	vstr	s15, [r3, #4]
		filter_accus[1]=filter_accus[1]-(filter_accus[3]*filter_res[0]);
 8003592:	4b5a      	ldr	r3, [pc, #360]	; (80036fc <sampling+0x157c>)
 8003594:	ed93 7a01 	vldr	s14, [r3, #4]
 8003598:	4b58      	ldr	r3, [pc, #352]	; (80036fc <sampling+0x157c>)
 800359a:	edd3 6a03 	vldr	s13, [r3, #12]
 800359e:	4b58      	ldr	r3, [pc, #352]	; (8003700 <sampling+0x1580>)
 80035a0:	edd3 7a00 	vldr	s15, [r3]
 80035a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035ac:	4b53      	ldr	r3, [pc, #332]	; (80036fc <sampling+0x157c>)
 80035ae:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);      //short=fast , adding makes it slower
 80035b2:	4b52      	ldr	r3, [pc, #328]	; (80036fc <sampling+0x157c>)
 80035b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80035b8:	4b52      	ldr	r3, [pc, #328]	; (8003704 <sampling+0x1584>)
 80035ba:	edd3 7a00 	vldr	s15, [r3]
 80035be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035c2:	4b4e      	ldr	r3, [pc, #312]	; (80036fc <sampling+0x157c>)
 80035c4:	edd3 6a02 	vldr	s13, [r3, #8]
 80035c8:	4b4e      	ldr	r3, [pc, #312]	; (8003704 <sampling+0x1584>)
 80035ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80035ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035d6:	4b49      	ldr	r3, [pc, #292]	; (80036fc <sampling+0x157c>)
 80035d8:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);			// int32 after conversions is no quicker
 80035dc:	4b47      	ldr	r3, [pc, #284]	; (80036fc <sampling+0x157c>)
 80035de:	ed93 7a02 	vldr	s14, [r3, #8]
 80035e2:	4b48      	ldr	r3, [pc, #288]	; (8003704 <sampling+0x1584>)
 80035e4:	edd3 7a00 	vldr	s15, [r3]
 80035e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035ec:	4b43      	ldr	r3, [pc, #268]	; (80036fc <sampling+0x157c>)
 80035ee:	edd3 6a03 	vldr	s13, [r3, #12]
 80035f2:	4b44      	ldr	r3, [pc, #272]	; (8003704 <sampling+0x1584>)
 80035f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80035f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003600:	4b3e      	ldr	r3, [pc, #248]	; (80036fc <sampling+0x157c>)
 8003602:	edc3 7a03 	vstr	s15, [r3, #12]
		sample_Accu[0]=filter_accus[3];
 8003606:	4b3d      	ldr	r3, [pc, #244]	; (80036fc <sampling+0x157c>)
 8003608:	edd3 7a03 	vldr	s15, [r3, #12]
 800360c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003610:	ee17 3a90 	vmov	r3, s15
 8003614:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c

	//	sample_Accu[3]=play_holder2[i] >>5;
		filter_accus[4]=sample_Accu[1];
 8003618:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 800361c:	ee07 3a90 	vmov	s15, r3
 8003620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003624:	4b35      	ldr	r3, [pc, #212]	; (80036fc <sampling+0x157c>)
 8003626:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[4]=filter_accus[4]-(filter_accus[6]*filter_res[1]);
 800362a:	4b34      	ldr	r3, [pc, #208]	; (80036fc <sampling+0x157c>)
 800362c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003630:	4b32      	ldr	r3, [pc, #200]	; (80036fc <sampling+0x157c>)
 8003632:	edd3 6a06 	vldr	s13, [r3, #24]
 8003636:	4b32      	ldr	r3, [pc, #200]	; (8003700 <sampling+0x1580>)
 8003638:	edd3 7a01 	vldr	s15, [r3, #4]
 800363c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003640:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003644:	4b2d      	ldr	r3, [pc, #180]	; (80036fc <sampling+0x157c>)
 8003646:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[2])+(filter_accus[5]*freq_point[3]);   // 30 cyles for 2 poles
 800364a:	4b2c      	ldr	r3, [pc, #176]	; (80036fc <sampling+0x157c>)
 800364c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003650:	4b2c      	ldr	r3, [pc, #176]	; (8003704 <sampling+0x1584>)
 8003652:	edd3 7a02 	vldr	s15, [r3, #8]
 8003656:	ee27 7a27 	vmul.f32	s14, s14, s15
 800365a:	4b28      	ldr	r3, [pc, #160]	; (80036fc <sampling+0x157c>)
 800365c:	edd3 6a05 	vldr	s13, [r3, #20]
 8003660:	4b28      	ldr	r3, [pc, #160]	; (8003704 <sampling+0x1584>)
 8003662:	edd3 7a03 	vldr	s15, [r3, #12]
 8003666:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800366a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800366e:	4b23      	ldr	r3, [pc, #140]	; (80036fc <sampling+0x157c>)
 8003670:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_accus[6]=(filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]);
 8003674:	4b21      	ldr	r3, [pc, #132]	; (80036fc <sampling+0x157c>)
 8003676:	ed93 7a05 	vldr	s14, [r3, #20]
 800367a:	4b22      	ldr	r3, [pc, #136]	; (8003704 <sampling+0x1584>)
 800367c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003680:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <sampling+0x157c>)
 8003686:	edd3 6a06 	vldr	s13, [r3, #24]
 800368a:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <sampling+0x1584>)
 800368c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003698:	4b18      	ldr	r3, [pc, #96]	; (80036fc <sampling+0x157c>)
 800369a:	edc3 7a06 	vstr	s15, [r3, #24]
		sample_Accu[1]=filter_accus[6];
 800369e:	4b17      	ldr	r3, [pc, #92]	; (80036fc <sampling+0x157c>)
 80036a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80036a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036a8:	ee17 3a90 	vmov	r3, s15
 80036ac:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320

		filter_accus[7]=sample_Accu[2];
 80036b0:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80036b4:	ee07 3a90 	vmov	s15, r3
 80036b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036bc:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <sampling+0x157c>)
 80036be:	edc3 7a07 	vstr	s15, [r3, #28]
 80036c2:	e021      	b.n	8003708 <sampling+0x1588>
 80036c4:	20000b06 	.word	0x20000b06
 80036c8:	20000b04 	.word	0x20000b04
 80036cc:	200058ac 	.word	0x200058ac
 80036d0:	200044b4 	.word	0x200044b4
 80036d4:	20003464 	.word	0x20003464
 80036d8:	200070b0 	.word	0x200070b0
 80036dc:	20010af0 	.word	0x20010af0
 80036e0:	200058b0 	.word	0x200058b0
 80036e4:	20010b70 	.word	0x20010b70
 80036e8:	200060b0 	.word	0x200060b0
 80036ec:	20010bf0 	.word	0x20010bf0
 80036f0:	200068b0 	.word	0x200068b0
 80036f4:	20010c70 	.word	0x20010c70
 80036f8:	200001e4 	.word	0x200001e4
 80036fc:	20003378 	.word	0x20003378
 8003700:	20003364 	.word	0x20003364
 8003704:	200033b4 	.word	0x200033b4
		filter_accus[7]=filter_accus[7]-(filter_accus[9]*filter_res[2]);  // resonance
 8003708:	4b8b      	ldr	r3, [pc, #556]	; (8003938 <sampling+0x17b8>)
 800370a:	ed93 7a07 	vldr	s14, [r3, #28]
 800370e:	4b8a      	ldr	r3, [pc, #552]	; (8003938 <sampling+0x17b8>)
 8003710:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003714:	4b89      	ldr	r3, [pc, #548]	; (800393c <sampling+0x17bc>)
 8003716:	edd3 7a02 	vldr	s15, [r3, #8]
 800371a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800371e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003722:	4b85      	ldr	r3, [pc, #532]	; (8003938 <sampling+0x17b8>)
 8003724:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[4])+(filter_accus[8]*freq_point[5]);   // 30 cyles for 2 poles
 8003728:	4b83      	ldr	r3, [pc, #524]	; (8003938 <sampling+0x17b8>)
 800372a:	ed93 7a07 	vldr	s14, [r3, #28]
 800372e:	4b84      	ldr	r3, [pc, #528]	; (8003940 <sampling+0x17c0>)
 8003730:	edd3 7a04 	vldr	s15, [r3, #16]
 8003734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003738:	4b7f      	ldr	r3, [pc, #508]	; (8003938 <sampling+0x17b8>)
 800373a:	edd3 6a08 	vldr	s13, [r3, #32]
 800373e:	4b80      	ldr	r3, [pc, #512]	; (8003940 <sampling+0x17c0>)
 8003740:	edd3 7a05 	vldr	s15, [r3, #20]
 8003744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800374c:	4b7a      	ldr	r3, [pc, #488]	; (8003938 <sampling+0x17b8>)
 800374e:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]);
 8003752:	4b79      	ldr	r3, [pc, #484]	; (8003938 <sampling+0x17b8>)
 8003754:	ed93 7a08 	vldr	s14, [r3, #32]
 8003758:	4b79      	ldr	r3, [pc, #484]	; (8003940 <sampling+0x17c0>)
 800375a:	edd3 7a04 	vldr	s15, [r3, #16]
 800375e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003762:	4b75      	ldr	r3, [pc, #468]	; (8003938 <sampling+0x17b8>)
 8003764:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003768:	4b75      	ldr	r3, [pc, #468]	; (8003940 <sampling+0x17c0>)
 800376a:	edd3 7a05 	vldr	s15, [r3, #20]
 800376e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003776:	4b70      	ldr	r3, [pc, #448]	; (8003938 <sampling+0x17b8>)
 8003778:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				sample_Accu[2]=filter_accus[9];
 800377c:	4b6e      	ldr	r3, [pc, #440]	; (8003938 <sampling+0x17b8>)
 800377e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003782:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003786:	ee17 3a90 	vmov	r3, s15
 800378a:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324

				filter_accus[10]=sample_Accu[3];
 800378e:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800379a:	4b67      	ldr	r3, [pc, #412]	; (8003938 <sampling+0x17b8>)
 800379c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_accus[10]=filter_accus[10]-(filter_accus[12]*filter_res[3]);
 80037a0:	4b65      	ldr	r3, [pc, #404]	; (8003938 <sampling+0x17b8>)
 80037a2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80037a6:	4b64      	ldr	r3, [pc, #400]	; (8003938 <sampling+0x17b8>)
 80037a8:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80037ac:	4b63      	ldr	r3, [pc, #396]	; (800393c <sampling+0x17bc>)
 80037ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80037b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ba:	4b5f      	ldr	r3, [pc, #380]	; (8003938 <sampling+0x17b8>)
 80037bc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
						filter_accus[11]=(filter_accus[10]*freq_point[6])+(filter_accus[11]*freq_point[7]);   // 30 cyles for 2 poles
 80037c0:	4b5d      	ldr	r3, [pc, #372]	; (8003938 <sampling+0x17b8>)
 80037c2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80037c6:	4b5e      	ldr	r3, [pc, #376]	; (8003940 <sampling+0x17c0>)
 80037c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80037cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037d0:	4b59      	ldr	r3, [pc, #356]	; (8003938 <sampling+0x17b8>)
 80037d2:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80037d6:	4b5a      	ldr	r3, [pc, #360]	; (8003940 <sampling+0x17c0>)
 80037d8:	edd3 7a07 	vldr	s15, [r3, #28]
 80037dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e4:	4b54      	ldr	r3, [pc, #336]	; (8003938 <sampling+0x17b8>)
 80037e6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
						filter_accus[12]=(filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]);
 80037ea:	4b53      	ldr	r3, [pc, #332]	; (8003938 <sampling+0x17b8>)
 80037ec:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80037f0:	4b53      	ldr	r3, [pc, #332]	; (8003940 <sampling+0x17c0>)
 80037f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80037f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037fa:	4b4f      	ldr	r3, [pc, #316]	; (8003938 <sampling+0x17b8>)
 80037fc:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8003800:	4b4f      	ldr	r3, [pc, #316]	; (8003940 <sampling+0x17c0>)
 8003802:	edd3 7a07 	vldr	s15, [r3, #28]
 8003806:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800380a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800380e:	4b4a      	ldr	r3, [pc, #296]	; (8003938 <sampling+0x17b8>)
 8003810:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
						sample_Accu[3]=filter_accus[12];
 8003814:	4b48      	ldr	r3, [pc, #288]	; (8003938 <sampling+0x17b8>)
 8003816:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800381a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800381e:	ee17 3a90 	vmov	r3, s15
 8003822:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
	//	filter_accus[11]=filter_accus[5]; //write back new value
		//sample_Accu[0] =sample_Accu[1];

				//sample_Accu[0]=(sample_Accu[0]>>2)+(play_holder0[(i+550)&511]>>2);   // just need 7 samples for aphaser at 500 hz

		filter_Accu=filter_Accu2=0;
 8003826:	2300      	movs	r3, #0
 8003828:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 800382c:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8003830:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
		filter_Accu=(sample_Accu[0]+sample_Accu[1])>>16;
 8003834:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 8003838:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 800383c:	4413      	add	r3, r2
 800383e:	141b      	asrs	r3, r3, #16
 8003840:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4



		filter_Accu2=(sample_Accu[2]+sample_Accu[3])>>16; //filter + drum out
 8003844:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 8003848:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 800384c:	4413      	add	r3, r2
 800384e:	141b      	asrs	r3, r3, #16
 8003850:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
		//filter_Accu=play_holder0[i];


		 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8003854:	4b3b      	ldr	r3, [pc, #236]	; (8003944 <sampling+0x17c4>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2bc7      	cmp	r3, #199	; 0xc7
 800385a:	d005      	beq.n	8003868 <sampling+0x16e8>
 800385c:	4b39      	ldr	r3, [pc, #228]	; (8003944 <sampling+0x17c4>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	3301      	adds	r3, #1
 8003862:	b2da      	uxtb	r2, r3
 8003864:	4b37      	ldr	r3, [pc, #220]	; (8003944 <sampling+0x17c4>)
 8003866:	701a      	strb	r2, [r3, #0]

		 //if (filter_Accu>0xFFFF) {filter_Accu=0xFFFF;clipping++;} else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
		 if (filter_Accu>0x3FF) {filter_Accu=0x3FF;clipping++;} else if (filter_Accu<-1023) filter_Accu=-1023;  // limiter to 11 bits
 8003868:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800386c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003870:	db0a      	blt.n	8003888 <sampling+0x1708>
 8003872:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003876:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 800387a:	4b33      	ldr	r3, [pc, #204]	; (8003948 <sampling+0x17c8>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	3301      	adds	r3, #1
 8003880:	b2da      	uxtb	r2, r3
 8003882:	4b31      	ldr	r3, [pc, #196]	; (8003948 <sampling+0x17c8>)
 8003884:	701a      	strb	r2, [r3, #0]
 8003886:	e007      	b.n	8003898 <sampling+0x1718>
 8003888:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800388c:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8003890:	dc02      	bgt.n	8003898 <sampling+0x1718>
 8003892:	4b2e      	ldr	r3, [pc, #184]	; (800394c <sampling+0x17cc>)
 8003894:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
		 if (filter_Accu2>0x3FF) {filter_Accu2=0x3FF;clipping++;} else if (filter_Accu2<-1023) filter_Accu2=-1023;  // limiter to 11 bits
 8003898:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800389c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a0:	db0a      	blt.n	80038b8 <sampling+0x1738>
 80038a2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80038a6:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 80038aa:	4b27      	ldr	r3, [pc, #156]	; (8003948 <sampling+0x17c8>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	3301      	adds	r3, #1
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b25      	ldr	r3, [pc, #148]	; (8003948 <sampling+0x17c8>)
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	e007      	b.n	80038c8 <sampling+0x1748>
 80038b8:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80038bc:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 80038c0:	dc02      	bgt.n	80038c8 <sampling+0x1748>
 80038c2:	4b22      	ldr	r3, [pc, #136]	; (800394c <sampling+0x17cc>)
 80038c4:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0



		 play_sample[(i_total<<1)]=(filter_Accu)+1023;   // final output disable for now 2544
 80038c8:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	f8b7 338c 	ldrh.w	r3, [r7, #908]	; 0x38c
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80038d8:	b291      	uxth	r1, r2
 80038da:	4a1d      	ldr	r2, [pc, #116]	; (8003950 <sampling+0x17d0>)
 80038dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		 play_sample[(i_total<<1)+1]=(filter_Accu2)+1023;
 80038e0:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	f8b7 338c 	ldrh.w	r3, [r7, #908]	; 0x38c
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	3301      	adds	r3, #1
 80038ee:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80038f2:	b291      	uxth	r1, r2
 80038f4:	4a16      	ldr	r2, [pc, #88]	; (8003950 <sampling+0x17d0>)
 80038f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 80038fa:	4b16      	ldr	r3, [pc, #88]	; (8003954 <sampling+0x17d4>)
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	3301      	adds	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	4b14      	ldr	r3, [pc, #80]	; (8003954 <sampling+0x17d4>)
 8003904:	801a      	strh	r2, [r3, #0]
 8003906:	4b13      	ldr	r3, [pc, #76]	; (8003954 <sampling+0x17d4>)
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800390e:	f4ff ad5d 	bcc.w	80033cc <sampling+0x124c>
		} // end of filer


		//time_final=time_proc;   // in samples

		if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 8003912:	4b11      	ldr	r3, [pc, #68]	; (8003958 <sampling+0x17d8>)
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <sampling+0x17a6>
 800391a:	4b10      	ldr	r3, [pc, #64]	; (800395c <sampling+0x17dc>)
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	3301      	adds	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	4b0e      	ldr	r3, [pc, #56]	; (800395c <sampling+0x17dc>)
 8003924:	801a      	strh	r2, [r3, #0]
		time_final[0]=time_proc;
 8003926:	4b0e      	ldr	r3, [pc, #56]	; (8003960 <sampling+0x17e0>)
 8003928:	881a      	ldrh	r2, [r3, #0]
 800392a:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <sampling+0x17e4>)
 800392c:	801a      	strh	r2, [r3, #0]


		//bank_write=0;   /// total 320 sample time (39khz)
		}
 800392e:	bf00      	nop
 8003930:	f507 776c 	add.w	r7, r7, #944	; 0x3b0
 8003934:	46bd      	mov	sp, r7
 8003936:	bdb0      	pop	{r4, r5, r7, pc}
 8003938:	20003378 	.word	0x20003378
 800393c:	20003364 	.word	0x20003364
 8003940:	200033b4 	.word	0x200033b4
 8003944:	20003334 	.word	0x20003334
 8003948:	200078b0 	.word	0x200078b0
 800394c:	fffffc01 	.word	0xfffffc01
 8003950:	20000b08 	.word	0x20000b08
 8003954:	20000b06 	.word	0x20000b06
 8003958:	2000014e 	.word	0x2000014e
 800395c:	20004106 	.word	0x20004106
 8003960:	20004104 	.word	0x20004104
 8003964:	20004100 	.word	0x20004100

08003968 <LFO_square_one_pulse>:
    *(return_array + 2) = sine_tuned;
    return (sine_tempA);   // add back to start value -20k-20k  or about 16bit

    }

void LFO_square_one_pulse(void){   // sends one pulse synced to seq.pos , rate= pulse width in notes , delay = start position
 8003968:	b490      	push	{r4, r7}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
       // uint16_t  temp_pulse=0;
	uint8_t seqpos = seq.pos ;
 800396e:	4b50      	ldr	r3, [pc, #320]	; (8003ab0 <LFO_square_one_pulse+0x148>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	70fb      	strb	r3, [r7, #3]
     //   uint16_t counter_up; // starts at 0+delay
	//uint8_t pulse_high;
	uint8_t pulse_low;
	uint8_t seq_div=7;
 8003974:	2307      	movs	r3, #7
 8003976:	71bb      	strb	r3, [r7, #6]
	uint8_t lfo_c ;
	uint16_t pulse_length;     // 1 note -32 ? with fractions  0-8 then 0-16 then 0-32 then 0-64 ,repeat
	uint8_t delay;

	for (lfo_c=0;lfo_c<10;lfo_c++){
 8003978:	2300      	movs	r3, #0
 800397a:	717b      	strb	r3, [r7, #5]
 800397c:	e08e      	b.n	8003a9c <LFO_square_one_pulse+0x134>

	    pulse_length=LFO_square[lfo_c].rate;
 800397e:	797a      	ldrb	r2, [r7, #5]
 8003980:	494c      	ldr	r1, [pc, #304]	; (8003ab4 <LFO_square_one_pulse+0x14c>)
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	803b      	strh	r3, [r7, #0]
	    if (LFO_square[lfo_c].delay<8) delay=LFO_square[lfo_c].delay;  else delay=7;
 8003990:	797a      	ldrb	r2, [r7, #5]
 8003992:	4948      	ldr	r1, [pc, #288]	; (8003ab4 <LFO_square_one_pulse+0x14c>)
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	3303      	adds	r3, #3
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b07      	cmp	r3, #7
 80039a4:	d80a      	bhi.n	80039bc <LFO_square_one_pulse+0x54>
 80039a6:	797a      	ldrb	r2, [r7, #5]
 80039a8:	4942      	ldr	r1, [pc, #264]	; (8003ab4 <LFO_square_one_pulse+0x14c>)
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	3303      	adds	r3, #3
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	713b      	strb	r3, [r7, #4]
 80039ba:	e001      	b.n	80039c0 <LFO_square_one_pulse+0x58>
 80039bc:	2307      	movs	r3, #7
 80039be:	713b      	strb	r3, [r7, #4]

	    if (pulse_length<120)  {pulse_low=pulse_length-56;seq_div=63;}  // This is the end
 80039c0:	883b      	ldrh	r3, [r7, #0]
 80039c2:	2b77      	cmp	r3, #119	; 0x77
 80039c4:	d805      	bhi.n	80039d2 <LFO_square_one_pulse+0x6a>
 80039c6:	883b      	ldrh	r3, [r7, #0]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	3b38      	subs	r3, #56	; 0x38
 80039cc:	71fb      	strb	r3, [r7, #7]
 80039ce:	233f      	movs	r3, #63	; 0x3f
 80039d0:	71bb      	strb	r3, [r7, #6]
	    if (pulse_length<56)  {pulse_low=pulse_length-24;seq_div=31;}
 80039d2:	883b      	ldrh	r3, [r7, #0]
 80039d4:	2b37      	cmp	r3, #55	; 0x37
 80039d6:	d805      	bhi.n	80039e4 <LFO_square_one_pulse+0x7c>
 80039d8:	883b      	ldrh	r3, [r7, #0]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	3b18      	subs	r3, #24
 80039de:	71fb      	strb	r3, [r7, #7]
 80039e0:	231f      	movs	r3, #31
 80039e2:	71bb      	strb	r3, [r7, #6]
	    if (pulse_length<24)  {pulse_low=pulse_length-8; seq_div=15;}
 80039e4:	883b      	ldrh	r3, [r7, #0]
 80039e6:	2b17      	cmp	r3, #23
 80039e8:	d805      	bhi.n	80039f6 <LFO_square_one_pulse+0x8e>
 80039ea:	883b      	ldrh	r3, [r7, #0]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	3b08      	subs	r3, #8
 80039f0:	71fb      	strb	r3, [r7, #7]
 80039f2:	230f      	movs	r3, #15
 80039f4:	71bb      	strb	r3, [r7, #6]
	    if (pulse_length<8)  {pulse_low=pulse_length; seq_div=7;}
 80039f6:	883b      	ldrh	r3, [r7, #0]
 80039f8:	2b07      	cmp	r3, #7
 80039fa:	d803      	bhi.n	8003a04 <LFO_square_one_pulse+0x9c>
 80039fc:	883b      	ldrh	r3, [r7, #0]
 80039fe:	71fb      	strb	r3, [r7, #7]
 8003a00:	2307      	movs	r3, #7
 8003a02:	71bb      	strb	r3, [r7, #6]

	    delay=(delay*seq_div)>>3;   // this is the start
 8003a04:	793b      	ldrb	r3, [r7, #4]
 8003a06:	79ba      	ldrb	r2, [r7, #6]
 8003a08:	fb02 f303 	mul.w	r3, r2, r3
 8003a0c:	10db      	asrs	r3, r3, #3
 8003a0e:	713b      	strb	r3, [r7, #4]

	    if (((seqpos&seq_div)<=pulse_low)  &&	((seqpos&seq_div)>=delay))	LFO_square[lfo_c].out[sampling_position]=((LFO_square[lfo_c].depth))<<8;  // high
 8003a10:	78fa      	ldrb	r2, [r7, #3]
 8003a12:	79bb      	ldrb	r3, [r7, #6]
 8003a14:	4013      	ands	r3, r2
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	79fa      	ldrb	r2, [r7, #7]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d321      	bcc.n	8003a62 <LFO_square_one_pulse+0xfa>
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	79bb      	ldrb	r3, [r7, #6]
 8003a22:	4013      	ands	r3, r2
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	793a      	ldrb	r2, [r7, #4]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d81a      	bhi.n	8003a62 <LFO_square_one_pulse+0xfa>
 8003a2c:	797a      	ldrb	r2, [r7, #5]
 8003a2e:	4921      	ldr	r1, [pc, #132]	; (8003ab4 <LFO_square_one_pulse+0x14c>)
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	797a      	ldrb	r2, [r7, #5]
 8003a42:	491d      	ldr	r1, [pc, #116]	; (8003ab8 <LFO_square_one_pulse+0x150>)
 8003a44:	7809      	ldrb	r1, [r1, #0]
 8003a46:	460c      	mov	r4, r1
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	b298      	uxth	r0, r3
 8003a4c:	4919      	ldr	r1, [pc, #100]	; (8003ab4 <LFO_square_one_pulse+0x14c>)
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4423      	add	r3, r4
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	440b      	add	r3, r1
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	809a      	strh	r2, [r3, #4]
 8003a60:	e019      	b.n	8003a96 <LFO_square_one_pulse+0x12e>
	    else LFO_square[lfo_c].out[sampling_position]=(LFO_square[lfo_c].offset)<<8;		//low
 8003a62:	797a      	ldrb	r2, [r7, #5]
 8003a64:	4913      	ldr	r1, [pc, #76]	; (8003ab4 <LFO_square_one_pulse+0x14c>)
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	3302      	adds	r3, #2
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	797a      	ldrb	r2, [r7, #5]
 8003a78:	490f      	ldr	r1, [pc, #60]	; (8003ab8 <LFO_square_one_pulse+0x150>)
 8003a7a:	7809      	ldrb	r1, [r1, #0]
 8003a7c:	460c      	mov	r4, r1
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	b298      	uxth	r0, r3
 8003a82:	490c      	ldr	r1, [pc, #48]	; (8003ab4 <LFO_square_one_pulse+0x14c>)
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	4423      	add	r3, r4
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	440b      	add	r3, r1
 8003a92:	4602      	mov	r2, r0
 8003a94:	809a      	strh	r2, [r3, #4]
	for (lfo_c=0;lfo_c<10;lfo_c++){
 8003a96:	797b      	ldrb	r3, [r7, #5]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	717b      	strb	r3, [r7, #5]
 8003a9c:	797b      	ldrb	r3, [r7, #5]
 8003a9e:	2b09      	cmp	r3, #9
 8003aa0:	f67f af6d 	bls.w	800397e <LFO_square_one_pulse+0x16>

	}
    }
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc90      	pop	{r4, r7}
 8003aae:	4770      	bx	lr
 8003ab0:	20004f40 	.word	0x20004f40
 8003ab4:	200043ec 	.word	0x200043ec
 8003ab8:	200058ac 	.word	0x200058ac
 8003abc:	00000000 	.word	0x00000000

08003ac0 <LFO_source_synced>:



	}

void LFO_source_synced(void){     // lfo , ok
 8003ac0:	b590      	push	{r4, r7, lr}
 8003ac2:	b08d      	sub	sp, #52	; 0x34
 8003ac4:	af00      	add	r7, sp, #0


	float	freq_temp=0;
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
	float 	freq2_temp=0;
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t 	freq_saw=0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t lfo_c ;
	float offset=0;
 8003ad6:	f04f 0300 	mov.w	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]
	uint32_t lfo_accu_temp;
	int16_t  output_hold;
	int32_t freq_tri;
	uint32_t offset2;
	uint32_t freq_temp_saw;
	uint32_t delay_value=0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
	uint16_t rate;

	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ae6:	e123      	b.n	8003d30 <LFO_source_synced+0x270>

	rate= LFO[lfo_c].rate;
 8003ae8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003aec:	4998      	ldr	r1, [pc, #608]	; (8003d50 <LFO_source_synced+0x290>)
 8003aee:	4613      	mov	r3, r2
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	837b      	strh	r3, [r7, #26]
	if (rate>10) rate=10;
 8003afc:	8b7b      	ldrh	r3, [r7, #26]
 8003afe:	2b0a      	cmp	r3, #10
 8003b00:	d901      	bls.n	8003b06 <LFO_source_synced+0x46>
 8003b02:	230a      	movs	r3, #10
 8003b04:	837b      	strh	r3, [r7, #26]

	lfo_accu_temp=(next_isr&((1<<rate)-1))*(65535>>rate);   // calculate from next_isr
 8003b06:	4b93      	ldr	r3, [pc, #588]	; (8003d54 <LFO_source_synced+0x294>)
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	8b7b      	ldrh	r3, [r7, #26]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	400b      	ands	r3, r1
 8003b18:	8b7a      	ldrh	r2, [r7, #26]
 8003b1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b1e:	fa41 f202 	asr.w	r2, r1, r2
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	60bb      	str	r3, [r7, #8]

	 if (lfo_c==0)     debug_value=lfo_accu_temp;
 8003b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d107      	bne.n	8003b40 <LFO_source_synced+0x80>
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3a:	4b87      	ldr	r3, [pc, #540]	; (8003d58 <LFO_source_synced+0x298>)
 8003b3c:	edc3 7a00 	vstr	s15, [r3]

	 delay_value=8192*(LFO[lfo_c].delay&7);
 8003b40:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b44:	4982      	ldr	r1, [pc, #520]	; (8003d50 <LFO_source_synced+0x290>)
 8003b46:	4613      	mov	r3, r2
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	3304      	adds	r3, #4
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	035b      	lsls	r3, r3, #13
 8003b5a:	60fb      	str	r3, [r7, #12]

	 freq_temp=lfo_accu_temp*0.0000479376;
 8003b5c:	68b8      	ldr	r0, [r7, #8]
 8003b5e:	f7fc fdaf 	bl	80006c0 <__aeabi_ui2d>
 8003b62:	a379      	add	r3, pc, #484	; (adr r3, 8003d48 <LFO_source_synced+0x288>)
 8003b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b68:	f7fc fb3e 	bl	80001e8 <__aeabi_dmul>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4610      	mov	r0, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	f7fc fe3e 	bl	80007f4 <__aeabi_d2f>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	617b      	str	r3, [r7, #20]

	 freq2_temp=arm_sin_f32(freq_temp);   // +10 cycles
 8003b7c:	ed97 0a05 	vldr	s0, [r7, #20]
 8003b80:	f008 fb3c 	bl	800c1fc <arm_sin_f32>
 8003b84:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	freq_temp=LFO[lfo_c].depth;
 8003b88:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b8c:	4970      	ldr	r1, [pc, #448]	; (8003d50 <LFO_source_synced+0x290>)
 8003b8e:	4613      	mov	r3, r2
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	440b      	add	r3, r1
 8003b98:	3301      	adds	r3, #1
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	ee07 3a90 	vmov	s15, r3
 8003ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba4:	edc7 7a05 	vstr	s15, [r7, #20]
	 freq_temp= (freq2_temp*freq_temp)*256;
 8003ba8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003bac:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb4:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8003d5c <LFO_source_synced+0x29c>
 8003bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bbc:	edc7 7a05 	vstr	s15, [r7, #20]

	 freq_temp_saw=(lfo_accu_temp+delay_value)&65535        ;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	61fb      	str	r3, [r7, #28]

 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
 8003bca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003bce:	4960      	ldr	r1, [pc, #384]	; (8003d50 <LFO_source_synced+0x290>)
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	3303      	adds	r3, #3
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	ee07 3a90 	vmov	s15, r3
 8003be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003be8:	edc7 7a04 	vstr	s15, [r7, #16]
			offset2=offset;
 8003bec:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bf4:	ee17 3a90 	vmov	r3, s15
 8003bf8:	607b      	str	r3, [r7, #4]
 		freq2_temp=(freq_temp+offset);
 8003bfa:	ed97 7a05 	vldr	s14, [r7, #20]
 8003bfe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c06:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		if (freq2_temp>65534)  freq2_temp=65535;
 8003c0a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003c0e:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003d60 <LFO_source_synced+0x2a0>
 8003c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c1a:	dd01      	ble.n	8003c20 <LFO_source_synced+0x160>
 8003c1c:	4b51      	ldr	r3, [pc, #324]	; (8003d64 <LFO_source_synced+0x2a4>)
 8003c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	//	if (freq2_temp<-32766) {  freq2_temp=-32767; }  // clip to 13bit -/+ 8000

						output_hold=freq2_temp;
 8003c20:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c28:	ee17 3a90 	vmov	r3, s15
 8003c2c:	807b      	strh	r3, [r7, #2]
				if (freq_temp_saw>65534)  freq_temp_saw=65535;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d902      	bls.n	8003c3e <LFO_source_synced+0x17e>
 8003c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c3c:	61fb      	str	r3, [r7, #28]
					//	lfo_accu_temp=lfo_accu_temp/6;
					freq_saw=((freq_temp_saw*LFO[lfo_c].depth)>>8)+offset2;   // 51 000  + offset
 8003c3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003c42:	4943      	ldr	r1, [pc, #268]	; (8003d50 <LFO_source_synced+0x290>)
 8003c44:	4613      	mov	r3, r2
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	3301      	adds	r3, #1
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	fb02 f303 	mul.w	r3, r2, r3
 8003c5a:	0a1b      	lsrs	r3, r3, #8
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	4413      	add	r3, r2
 8003c60:	62bb      	str	r3, [r7, #40]	; 0x28

					if (freq_saw>65534)  freq_saw=65535;   // clip
 8003c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d902      	bls.n	8003c72 <LFO_source_synced+0x1b2>
 8003c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c70:	62bb      	str	r3, [r7, #40]	; 0x28
				//	freq_saw=65535-freq_saw;
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 8003c72:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003c76:	4b3c      	ldr	r3, [pc, #240]	; (8003d68 <LFO_source_synced+0x2a8>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	461c      	mov	r4, r3
 8003c7c:	8878      	ldrh	r0, [r7, #2]
 8003c7e:	4934      	ldr	r1, [pc, #208]	; (8003d50 <LFO_source_synced+0x290>)
 8003c80:	4613      	mov	r3, r2
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	4413      	add	r3, r2
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	4423      	add	r3, r4
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	440b      	add	r3, r1
 8003c8e:	4602      	mov	r2, r0
 8003c90:	80da      	strh	r2, [r3, #6]
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;    // saw 16 bit
 8003c92:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003c96:	4b34      	ldr	r3, [pc, #208]	; (8003d68 <LFO_source_synced+0x2a8>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	461c      	mov	r4, r3
 8003c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9e:	b298      	uxth	r0, r3
 8003ca0:	492b      	ldr	r1, [pc, #172]	; (8003d50 <LFO_source_synced+0x290>)
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	4413      	add	r3, r2
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	4423      	add	r3, r4
 8003cac:	330c      	adds	r3, #12
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	440b      	add	r3, r1
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	805a      	strh	r2, [r3, #2]


				   if(freq_temp_saw<32768)   freq_tri=freq_temp_saw; else freq_tri=65536-freq_temp_saw;    // 0-32767
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cbc:	d202      	bcs.n	8003cc4 <LFO_source_synced+0x204>
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	623b      	str	r3, [r7, #32]
 8003cc2:	e003      	b.n	8003ccc <LFO_source_synced+0x20c>
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8003cca:	623b      	str	r3, [r7, #32]
				   freq_tri=((freq_tri*LFO[lfo_c].depth)>>7)+offset2 ; // tri 16 bit
 8003ccc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003cd0:	491f      	ldr	r1, [pc, #124]	; (8003d50 <LFO_source_synced+0x290>)
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	3301      	adds	r3, #1
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	fb02 f303 	mul.w	r3, r2, r3
 8003ce8:	11db      	asrs	r3, r3, #7
 8003cea:	461a      	mov	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4413      	add	r3, r2
 8003cf0:	623b      	str	r3, [r7, #32]
				//   freq_tri=((freq_tri*255)>>7)+offset2 ; // tri 16 bit
				   if (freq_tri>65534)  freq_tri=65535;   // clip
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	dd02      	ble.n	8003d02 <LFO_source_synced+0x242>
 8003cfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d00:	623b      	str	r3, [r7, #32]
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 8003d02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003d06:	4b18      	ldr	r3, [pc, #96]	; (8003d68 <LFO_source_synced+0x2a8>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	461c      	mov	r4, r3
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	b298      	uxth	r0, r3
 8003d10:	490f      	ldr	r1, [pc, #60]	; (8003d50 <LFO_source_synced+0x290>)
 8003d12:	4613      	mov	r3, r2
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	4413      	add	r3, r2
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	4423      	add	r3, r4
 8003d1c:	3314      	adds	r3, #20
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	440b      	add	r3, r1
 8003d22:	4602      	mov	r2, r0
 8003d24:	80da      	strh	r2, [r3, #6]
	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003d26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d34:	2b09      	cmp	r3, #9
 8003d36:	f67f aed7 	bls.w	8003ae8 <LFO_source_synced+0x28>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch



	}
 8003d3a:	bf00      	nop
 8003d3c:	bf00      	nop
 8003d3e:	3734      	adds	r7, #52	; 0x34
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd90      	pop	{r4, r7, pc}
 8003d44:	f3af 8000 	nop.w
 8003d48:	64dc8498 	.word	0x64dc8498
 8003d4c:	3f092213 	.word	0x3f092213
 8003d50:	20004108 	.word	0x20004108
 8003d54:	20003318 	.word	0x20003318
 8003d58:	20010d6c 	.word	0x20010d6c
 8003d5c:	43800000 	.word	0x43800000
 8003d60:	477ffe00 	.word	0x477ffe00
 8003d64:	477fff00 	.word	0x477fff00
 8003d68:	200058ac 	.word	0x200058ac
 8003d6c:	00000000 	.word	0x00000000

08003d70 <frq_point>:


void  frq_point(void){
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
	freq_point[0]=freq_pointer[0] [sampling_position];; // load up coeffs
 8003d74:	4b84      	ldr	r3, [pc, #528]	; (8003f88 <frq_point+0x218>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	4a84      	ldr	r2, [pc, #528]	; (8003f8c <frq_point+0x21c>)
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a83      	ldr	r2, [pc, #524]	; (8003f90 <frq_point+0x220>)
 8003d82:	6013      	str	r3, [r2, #0]

			freq_point[2]=freq_pointer[1] [sampling_position];  // ok , array was too short
 8003d84:	4b80      	ldr	r3, [pc, #512]	; (8003f88 <frq_point+0x218>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	4a80      	ldr	r2, [pc, #512]	; (8003f8c <frq_point+0x21c>)
 8003d8a:	3309      	adds	r3, #9
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a7f      	ldr	r2, [pc, #508]	; (8003f90 <frq_point+0x220>)
 8003d94:	6093      	str	r3, [r2, #8]
			freq_point[4]=freq_pointer[2] [sampling_position];  // ok , array was too short
 8003d96:	4b7c      	ldr	r3, [pc, #496]	; (8003f88 <frq_point+0x218>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	4a7c      	ldr	r2, [pc, #496]	; (8003f8c <frq_point+0x21c>)
 8003d9c:	3312      	adds	r3, #18
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a7a      	ldr	r2, [pc, #488]	; (8003f90 <frq_point+0x220>)
 8003da6:	6113      	str	r3, [r2, #16]
			freq_point[6]=freq_pointer[3] [sampling_position];  // ok , array was too short
 8003da8:	4b77      	ldr	r3, [pc, #476]	; (8003f88 <frq_point+0x218>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	4a77      	ldr	r2, [pc, #476]	; (8003f8c <frq_point+0x21c>)
 8003dae:	331b      	adds	r3, #27
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a76      	ldr	r2, [pc, #472]	; (8003f90 <frq_point+0x220>)
 8003db8:	6193      	str	r3, [r2, #24]

			if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 8003dba:	4b75      	ldr	r3, [pc, #468]	; (8003f90 <frq_point+0x220>)
 8003dbc:	edd3 7a00 	vldr	s15, [r3]
 8003dc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dcc:	dd04      	ble.n	8003dd8 <frq_point+0x68>
 8003dce:	4b70      	ldr	r3, [pc, #448]	; (8003f90 <frq_point+0x220>)
 8003dd0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	e00b      	b.n	8003df0 <frq_point+0x80>
 8003dd8:	4b6d      	ldr	r3, [pc, #436]	; (8003f90 <frq_point+0x220>)
 8003dda:	edd3 7a00 	vldr	s15, [r3]
 8003dde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de6:	d503      	bpl.n	8003df0 <frq_point+0x80>
 8003de8:	4b69      	ldr	r3, [pc, #420]	; (8003f90 <frq_point+0x220>)
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
			if (freq_point[4]>1) freq_point[4]=1; else if (freq_point[4]<0) freq_point[4]=0;// just in case
 8003df0:	4b67      	ldr	r3, [pc, #412]	; (8003f90 <frq_point+0x220>)
 8003df2:	edd3 7a04 	vldr	s15, [r3, #16]
 8003df6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e02:	dd04      	ble.n	8003e0e <frq_point+0x9e>
 8003e04:	4b62      	ldr	r3, [pc, #392]	; (8003f90 <frq_point+0x220>)
 8003e06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003e0a:	611a      	str	r2, [r3, #16]
 8003e0c:	e00b      	b.n	8003e26 <frq_point+0xb6>
 8003e0e:	4b60      	ldr	r3, [pc, #384]	; (8003f90 <frq_point+0x220>)
 8003e10:	edd3 7a04 	vldr	s15, [r3, #16]
 8003e14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1c:	d503      	bpl.n	8003e26 <frq_point+0xb6>
 8003e1e:	4b5c      	ldr	r3, [pc, #368]	; (8003f90 <frq_point+0x220>)
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	611a      	str	r2, [r3, #16]
			if (freq_point[2]>1) freq_point[2]=1; else if (freq_point[2]<0) freq_point[2]=0;// just in case
 8003e26:	4b5a      	ldr	r3, [pc, #360]	; (8003f90 <frq_point+0x220>)
 8003e28:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e38:	dd04      	ble.n	8003e44 <frq_point+0xd4>
 8003e3a:	4b55      	ldr	r3, [pc, #340]	; (8003f90 <frq_point+0x220>)
 8003e3c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003e40:	609a      	str	r2, [r3, #8]
 8003e42:	e00b      	b.n	8003e5c <frq_point+0xec>
 8003e44:	4b52      	ldr	r3, [pc, #328]	; (8003f90 <frq_point+0x220>)
 8003e46:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e52:	d503      	bpl.n	8003e5c <frq_point+0xec>
 8003e54:	4b4e      	ldr	r3, [pc, #312]	; (8003f90 <frq_point+0x220>)
 8003e56:	f04f 0200 	mov.w	r2, #0
 8003e5a:	609a      	str	r2, [r3, #8]
			if (freq_point[6]>1) freq_point[6]=1; else if (freq_point[6]<0) freq_point[6]=0;// just in case
 8003e5c:	4b4c      	ldr	r3, [pc, #304]	; (8003f90 <frq_point+0x220>)
 8003e5e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003e62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e6e:	dd04      	ble.n	8003e7a <frq_point+0x10a>
 8003e70:	4b47      	ldr	r3, [pc, #284]	; (8003f90 <frq_point+0x220>)
 8003e72:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003e76:	619a      	str	r2, [r3, #24]
 8003e78:	e00b      	b.n	8003e92 <frq_point+0x122>
 8003e7a:	4b45      	ldr	r3, [pc, #276]	; (8003f90 <frq_point+0x220>)
 8003e7c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003e80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e88:	d503      	bpl.n	8003e92 <frq_point+0x122>
 8003e8a:	4b41      	ldr	r3, [pc, #260]	; (8003f90 <frq_point+0x220>)
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	619a      	str	r2, [r3, #24]

			freq_point[1]=1-freq_point[0];
 8003e92:	4b3f      	ldr	r3, [pc, #252]	; (8003f90 <frq_point+0x220>)
 8003e94:	edd3 7a00 	vldr	s15, [r3]
 8003e98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ea0:	4b3b      	ldr	r3, [pc, #236]	; (8003f90 <frq_point+0x220>)
 8003ea2:	edc3 7a01 	vstr	s15, [r3, #4]
			freq_point[3]=1-freq_point[2];
 8003ea6:	4b3a      	ldr	r3, [pc, #232]	; (8003f90 <frq_point+0x220>)
 8003ea8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003eac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eb4:	4b36      	ldr	r3, [pc, #216]	; (8003f90 <frq_point+0x220>)
 8003eb6:	edc3 7a03 	vstr	s15, [r3, #12]
			freq_point[5]=1-freq_point[4];
 8003eba:	4b35      	ldr	r3, [pc, #212]	; (8003f90 <frq_point+0x220>)
 8003ebc:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ec0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ec4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ec8:	4b31      	ldr	r3, [pc, #196]	; (8003f90 <frq_point+0x220>)
 8003eca:	edc3 7a05 	vstr	s15, [r3, #20]
			freq_point[7]=1-freq_point[6];
 8003ece:	4b30      	ldr	r3, [pc, #192]	; (8003f90 <frq_point+0x220>)
 8003ed0:	edd3 7a06 	vldr	s15, [r3, #24]
 8003ed4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003edc:	4b2c      	ldr	r3, [pc, #176]	; (8003f90 <frq_point+0x220>)
 8003ede:	edc3 7a07 	vstr	s15, [r3, #28]

			filter_res[0]=freq_point[0]*0.2;
 8003ee2:	4b2b      	ldr	r3, [pc, #172]	; (8003f90 <frq_point+0x220>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fc fc0c 	bl	8000704 <__aeabi_f2d>
 8003eec:	a324      	add	r3, pc, #144	; (adr r3, 8003f80 <frq_point+0x210>)
 8003eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef2:	f7fc f979 	bl	80001e8 <__aeabi_dmul>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4610      	mov	r0, r2
 8003efc:	4619      	mov	r1, r3
 8003efe:	f7fc fc79 	bl	80007f4 <__aeabi_d2f>
 8003f02:	4603      	mov	r3, r0
 8003f04:	4a23      	ldr	r2, [pc, #140]	; (8003f94 <frq_point+0x224>)
 8003f06:	6013      	str	r3, [r2, #0]
			filter_res[1]=freq_point[1]*0.2;
 8003f08:	4b21      	ldr	r3, [pc, #132]	; (8003f90 <frq_point+0x220>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fc fbf9 	bl	8000704 <__aeabi_f2d>
 8003f12:	a31b      	add	r3, pc, #108	; (adr r3, 8003f80 <frq_point+0x210>)
 8003f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f18:	f7fc f966 	bl	80001e8 <__aeabi_dmul>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4610      	mov	r0, r2
 8003f22:	4619      	mov	r1, r3
 8003f24:	f7fc fc66 	bl	80007f4 <__aeabi_d2f>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	4a1a      	ldr	r2, [pc, #104]	; (8003f94 <frq_point+0x224>)
 8003f2c:	6053      	str	r3, [r2, #4]
			filter_res[2]=freq_point[2]*0.2;
 8003f2e:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <frq_point+0x220>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fc fbe6 	bl	8000704 <__aeabi_f2d>
 8003f38:	a311      	add	r3, pc, #68	; (adr r3, 8003f80 <frq_point+0x210>)
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	f7fc f953 	bl	80001e8 <__aeabi_dmul>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4610      	mov	r0, r2
 8003f48:	4619      	mov	r1, r3
 8003f4a:	f7fc fc53 	bl	80007f4 <__aeabi_d2f>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	4a10      	ldr	r2, [pc, #64]	; (8003f94 <frq_point+0x224>)
 8003f52:	6093      	str	r3, [r2, #8]
			filter_res[3]=freq_point[3]*0.2;
 8003f54:	4b0e      	ldr	r3, [pc, #56]	; (8003f90 <frq_point+0x220>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fc fbd3 	bl	8000704 <__aeabi_f2d>
 8003f5e:	a308      	add	r3, pc, #32	; (adr r3, 8003f80 <frq_point+0x210>)
 8003f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f64:	f7fc f940 	bl	80001e8 <__aeabi_dmul>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	f7fc fc40 	bl	80007f4 <__aeabi_d2f>
 8003f74:	4603      	mov	r3, r0
 8003f76:	4a07      	ldr	r2, [pc, #28]	; (8003f94 <frq_point+0x224>)
 8003f78:	60d3      	str	r3, [r2, #12]

}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	9999999a 	.word	0x9999999a
 8003f84:	3fc99999 	.word	0x3fc99999
 8003f88:	200058ac 	.word	0x200058ac
 8003f8c:	200033d4 	.word	0x200033d4
 8003f90:	200033b4 	.word	0x200033b4
 8003f94:	20003364 	.word	0x20003364

08003f98 <display_process>:
// disableplay related data

void display_process(void){							// keep data processing here
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0




}   // end o void
 8003f9c:	bf00      	nop
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
	...

08003fa8 <displayBuffer2>:


    void displayBuffer2 (void){       // only for feedback line now
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
														    //when scrolling maybe use this only until  settled
	uint16_t feedback_loc=(menu_title_lut[enc_out1]&896)+107;														// start 2*8 bit then squeeze in 20*6 bit characters
 8003fae:	4b72      	ldr	r3, [pc, #456]	; (8004178 <displayBuffer2+0x1d0>)
 8003fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4b71      	ldr	r3, [pc, #452]	; (800417c <displayBuffer2+0x1d4>)
 8003fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	336b      	adds	r3, #107	; 0x6b
 8003fc6:	80bb      	strh	r3, [r7, #4]

	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 8003fc8:	4b6b      	ldr	r3, [pc, #428]	; (8004178 <displayBuffer2+0x1d0>)
 8003fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4b6a      	ldr	r3, [pc, #424]	; (800417c <displayBuffer2+0x1d4>)
 8003fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd6:	0c1b      	lsrs	r3, r3, #16
 8003fd8:	70fb      	strb	r3, [r7, #3]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8003fda:	78fb      	ldrb	r3, [r7, #3]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4a68      	ldr	r2, [pc, #416]	; (8004180 <displayBuffer2+0x1d8>)
 8003fe0:	4413      	add	r3, r2
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	4b67      	ldr	r3, [pc, #412]	; (8004184 <displayBuffer2+0x1dc>)
 8003fe6:	6810      	ldr	r0, [r2, #0]
 8003fe8:	6851      	ldr	r1, [r2, #4]
 8003fea:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 8003fec:	4a66      	ldr	r2, [pc, #408]	; (8004188 <displayBuffer2+0x1e0>)
 8003fee:	463b      	mov	r3, r7
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	8019      	strh	r1, [r3, #0]
 8003ff6:	3302      	adds	r3, #2
 8003ff8:	0c12      	lsrs	r2, r2, #16
 8003ffa:	701a      	strb	r2, [r3, #0]
	// char temp_char2[]="________";
				 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8003ffc:	4b5e      	ldr	r3, [pc, #376]	; (8004178 <displayBuffer2+0x1d0>)
 8003ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	461a      	mov	r2, r3
 8004006:	4b61      	ldr	r3, [pc, #388]	; (800418c <displayBuffer2+0x1e4>)
 8004008:	4413      	add	r3, r2
 800400a:	881b      	ldrh	r3, [r3, #0]
 800400c:	b29b      	uxth	r3, r3
 800400e:	803b      	strh	r3, [r7, #0]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8004010:	463b      	mov	r3, r7
 8004012:	4618      	mov	r0, r3
 8004014:	f008 f936 	bl	800c284 <atoi>
 8004018:	4603      	mov	r3, r0
 800401a:	b2da      	uxtb	r2, r3
 800401c:	4b5c      	ldr	r3, [pc, #368]	; (8004190 <displayBuffer2+0x1e8>)
 800401e:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8004020:	4b5b      	ldr	r3, [pc, #364]	; (8004190 <displayBuffer2+0x1e8>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	4619      	mov	r1, r3
 8004026:	4857      	ldr	r0, [pc, #348]	; (8004184 <displayBuffer2+0x1dc>)
 8004028:	f7fc ff0c 	bl	8000e44 <menu_vars>
 800402c:	4603      	mov	r3, r0
 800402e:	4a59      	ldr	r2, [pc, #356]	; (8004194 <displayBuffer2+0x1ec>)
 8004030:	6013      	str	r3, [r2, #0]


	     memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 8004032:	88bb      	ldrh	r3, [r7, #4]
 8004034:	3308      	adds	r3, #8
 8004036:	4a58      	ldr	r2, [pc, #352]	; (8004198 <displayBuffer2+0x1f0>)
 8004038:	1898      	adds	r0, r3, r2
 800403a:	78fb      	ldrb	r3, [r7, #3]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4a50      	ldr	r2, [pc, #320]	; (8004180 <displayBuffer2+0x1d8>)
 8004040:	4413      	add	r3, r2
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2208      	movs	r2, #8
 8004046:	4619      	mov	r1, r3
 8004048:	f008 f94a 	bl	800c2e0 <memcpy>
	     memcpy(default_menu3+feedback_loc+17,potSource+380,3);
 800404c:	88bb      	ldrh	r3, [r7, #4]
 800404e:	3311      	adds	r3, #17
 8004050:	4a51      	ldr	r2, [pc, #324]	; (8004198 <displayBuffer2+0x1f0>)
 8004052:	4413      	add	r3, r2
 8004054:	4951      	ldr	r1, [pc, #324]	; (800419c <displayBuffer2+0x1f4>)
 8004056:	2203      	movs	r2, #3
 8004058:	4618      	mov	r0, r3
 800405a:	f008 f941 	bl	800c2e0 <memcpy>
	     memcpy(default_menu3+feedback_loc+5,temp_char,2);
 800405e:	88bb      	ldrh	r3, [r7, #4]
 8004060:	3305      	adds	r3, #5
 8004062:	4a4d      	ldr	r2, [pc, #308]	; (8004198 <displayBuffer2+0x1f0>)
 8004064:	4413      	add	r3, r2
 8004066:	883a      	ldrh	r2, [r7, #0]
 8004068:	801a      	strh	r2, [r3, #0]

	     if (menu_vars_ref==5) target_display=1;
 800406a:	4b4d      	ldr	r3, [pc, #308]	; (80041a0 <displayBuffer2+0x1f8>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b05      	cmp	r3, #5
 8004070:	d102      	bne.n	8004078 <displayBuffer2+0xd0>
 8004072:	4b4c      	ldr	r3, [pc, #304]	; (80041a4 <displayBuffer2+0x1fc>)
 8004074:	2201      	movs	r2, #1
 8004076:	701a      	strb	r2, [r3, #0]
	     if (menu_vars_ref==36) target_display=2;
 8004078:	4b49      	ldr	r3, [pc, #292]	; (80041a0 <displayBuffer2+0x1f8>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b24      	cmp	r3, #36	; 0x24
 800407e:	d102      	bne.n	8004086 <displayBuffer2+0xde>
 8004080:	4b48      	ldr	r3, [pc, #288]	; (80041a4 <displayBuffer2+0x1fc>)
 8004082:	2202      	movs	r2, #2
 8004084:	701a      	strb	r2, [r3, #0]
	     if((48<menu_vars_ref)    && (menu_vars_ref<53)) target_display=3;
 8004086:	4b46      	ldr	r3, [pc, #280]	; (80041a0 <displayBuffer2+0x1f8>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b30      	cmp	r3, #48	; 0x30
 800408c:	d906      	bls.n	800409c <displayBuffer2+0xf4>
 800408e:	4b44      	ldr	r3, [pc, #272]	; (80041a0 <displayBuffer2+0x1f8>)
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b34      	cmp	r3, #52	; 0x34
 8004094:	d802      	bhi.n	800409c <displayBuffer2+0xf4>
 8004096:	4b43      	ldr	r3, [pc, #268]	; (80041a4 <displayBuffer2+0x1fc>)
 8004098:	2203      	movs	r2, #3
 800409a:	701a      	strb	r2, [r3, #0]
	 //    if((48<menu_vars_ref)    && (menu_vars_ref<53)) memcpy(LCD_Info+3, *(menu_titles_final+(*menu_vars_var)),8);  // send target for LFO_sqr  to LCD_Info


		 if (target_display)      // write LFO.target display , might use it for other things too
 800409c:	4b41      	ldr	r3, [pc, #260]	; (80041a4 <displayBuffer2+0x1fc>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d054      	beq.n	800414e <displayBuffer2+0x1a6>
	     	{
	     		uint8_t target_tmp1=*menu_vars_var ;   // this can be put anywhere now
 80040a4:	4b3b      	ldr	r3, [pc, #236]	; (8004194 <displayBuffer2+0x1ec>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	71fb      	strb	r3, [r7, #7]
	     		if (target_tmp1>=menu_lookup_count) target_tmp1=0;    // check in case
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	2b36      	cmp	r3, #54	; 0x36
 80040b0:	d901      	bls.n	80040b6 <displayBuffer2+0x10e>
 80040b2:	2300      	movs	r3, #0
 80040b4:	71fb      	strb	r3, [r7, #7]
	     		if (target_display==1) memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+target_tmp1),8);  // copy info for LFO
 80040b6:	4b3b      	ldr	r3, [pc, #236]	; (80041a4 <displayBuffer2+0x1fc>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d10c      	bne.n	80040d8 <displayBuffer2+0x130>
 80040be:	88bb      	ldrh	r3, [r7, #4]
 80040c0:	3308      	adds	r3, #8
 80040c2:	4a35      	ldr	r2, [pc, #212]	; (8004198 <displayBuffer2+0x1f0>)
 80040c4:	1898      	adds	r0, r3, r2
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4a2d      	ldr	r2, [pc, #180]	; (8004180 <displayBuffer2+0x1d8>)
 80040cc:	4413      	add	r3, r2
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2208      	movs	r2, #8
 80040d2:	4619      	mov	r1, r3
 80040d4:	f008 f904 	bl	800c2e0 <memcpy>
	     		if (target_display==2) memcpy(default_menu3+feedback_loc+8, *(patch_inputs+target_tmp1),8);  // Limited atm
 80040d8:	4b32      	ldr	r3, [pc, #200]	; (80041a4 <displayBuffer2+0x1fc>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d10c      	bne.n	80040fa <displayBuffer2+0x152>
 80040e0:	88bb      	ldrh	r3, [r7, #4]
 80040e2:	3308      	adds	r3, #8
 80040e4:	4a2c      	ldr	r2, [pc, #176]	; (8004198 <displayBuffer2+0x1f0>)
 80040e6:	1898      	adds	r0, r3, r2
 80040e8:	79fb      	ldrb	r3, [r7, #7]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4a2e      	ldr	r2, [pc, #184]	; (80041a8 <displayBuffer2+0x200>)
 80040ee:	4413      	add	r3, r2
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2208      	movs	r2, #8
 80040f4:	4619      	mov	r1, r3
 80040f6:	f008 f8f3 	bl	800c2e0 <memcpy>
	     	//	if (target_display==3) memcpy(LCD_Info+3,  *(patch[].target+target_tmp1),8);  // Limited atm
	     		if  (target_display==3)   //  patch feedback works ok
 80040fa:	4b2a      	ldr	r3, [pc, #168]	; (80041a4 <displayBuffer2+0x1fc>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b03      	cmp	r3, #3
 8004100:	d125      	bne.n	800414e <displayBuffer2+0x1a6>
	     		    {    if (LFO_sqr_list[menu_index_in&7])   {memcpy(LCD_Info+3,  menu_titles_final[sqr_target_list[menu_index_in&7]],6);LCD_Info[10]=LFO_sqr_list[menu_index_in&7];
 8004102:	4b23      	ldr	r3, [pc, #140]	; (8004190 <displayBuffer2+0x1e8>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	4a28      	ldr	r2, [pc, #160]	; (80041ac <displayBuffer2+0x204>)
 800410c:	5cd3      	ldrb	r3, [r2, r3]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d017      	beq.n	8004142 <displayBuffer2+0x19a>
 8004112:	4827      	ldr	r0, [pc, #156]	; (80041b0 <displayBuffer2+0x208>)
 8004114:	4b1e      	ldr	r3, [pc, #120]	; (8004190 <displayBuffer2+0x1e8>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	4a25      	ldr	r2, [pc, #148]	; (80041b4 <displayBuffer2+0x20c>)
 800411e:	5cd3      	ldrb	r3, [r2, r3]
 8004120:	461a      	mov	r2, r3
 8004122:	4b17      	ldr	r3, [pc, #92]	; (8004180 <displayBuffer2+0x1d8>)
 8004124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004128:	2206      	movs	r2, #6
 800412a:	4619      	mov	r1, r3
 800412c:	f008 f8d8 	bl	800c2e0 <memcpy>
 8004130:	4b17      	ldr	r3, [pc, #92]	; (8004190 <displayBuffer2+0x1e8>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	4a1c      	ldr	r2, [pc, #112]	; (80041ac <displayBuffer2+0x204>)
 800413a:	5cd2      	ldrb	r2, [r2, r3]
 800413c:	4b1e      	ldr	r3, [pc, #120]	; (80041b8 <displayBuffer2+0x210>)
 800413e:	729a      	strb	r2, [r3, #10]
 8004140:	e005      	b.n	800414e <displayBuffer2+0x1a6>

	     		    }  // ok
	     		 else memcpy(LCD_Info+3,"        ",8); //11
 8004142:	4b1b      	ldr	r3, [pc, #108]	; (80041b0 <displayBuffer2+0x208>)
 8004144:	2208      	movs	r2, #8
 8004146:	491d      	ldr	r1, [pc, #116]	; (80041bc <displayBuffer2+0x214>)
 8004148:	4618      	mov	r0, r3
 800414a:	f008 f8c9 	bl	800c2e0 <memcpy>
	     		    }
	     	}

	     target_display=0;
 800414e:	4b15      	ldr	r3, [pc, #84]	; (80041a4 <displayBuffer2+0x1fc>)
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]





	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8004154:	4b1a      	ldr	r3, [pc, #104]	; (80041c0 <displayBuffer2+0x218>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b11      	cmp	r3, #17
 800415a:	d103      	bne.n	8004164 <displayBuffer2+0x1bc>
 800415c:	4b18      	ldr	r3, [pc, #96]	; (80041c0 <displayBuffer2+0x218>)
 800415e:	2200      	movs	r2, #0
 8004160:	701a      	strb	r2, [r3, #0]


    }    // displayBuffer2
 8004162:	e005      	b.n	8004170 <displayBuffer2+0x1c8>
	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8004164:	4b16      	ldr	r3, [pc, #88]	; (80041c0 <displayBuffer2+0x218>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	3301      	adds	r3, #1
 800416a:	b2da      	uxtb	r2, r3
 800416c:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <displayBuffer2+0x218>)
 800416e:	701a      	strb	r2, [r3, #0]
    }    // displayBuffer2
 8004170:	bf00      	nop
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	20000220 	.word	0x20000220
 800417c:	20005298 	.word	0x20005298
 8004180:	2000042c 	.word	0x2000042c
 8004184:	2000589c 	.word	0x2000589c
 8004188:	0800cc24 	.word	0x0800cc24
 800418c:	20005698 	.word	0x20005698
 8004190:	200058a4 	.word	0x200058a4
 8004194:	20005898 	.word	0x20005898
 8004198:	20010d70 	.word	0x20010d70
 800419c:	20000a18 	.word	0x20000a18
 80041a0:	200078d5 	.word	0x200078d5
 80041a4:	200058ab 	.word	0x200058ab
 80041a8:	20000508 	.word	0x20000508
 80041ac:	20010ae4 	.word	0x20010ae4
 80041b0:	20010cf3 	.word	0x20010cf3
 80041b4:	20010d54 	.word	0x20010d54
 80041b8:	20010cf0 	.word	0x20010cf0
 80041bc:	0800cc18 	.word	0x0800cc18
 80041c0:	20000150 	.word	0x20000150

080041c4 <SPI_command>:

void SPI_command(void){
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 80041ca:	4b18      	ldr	r3, [pc, #96]	; (800422c <SPI_command+0x68>)
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d128      	bne.n	8004224 <SPI_command+0x60>
 80041d2:	4b17      	ldr	r3, [pc, #92]	; (8004230 <SPI_command+0x6c>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d124      	bne.n	8004224 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 80041da:	4b16      	ldr	r3, [pc, #88]	; (8004234 <SPI_command+0x70>)
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	0a1b      	lsrs	r3, r3, #8
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <SPI_command+0x2a>
 80041e6:	4b14      	ldr	r3, [pc, #80]	; (8004238 <SPI_command+0x74>)
 80041e8:	22f8      	movs	r2, #248	; 0xf8
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	e002      	b.n	80041f4 <SPI_command+0x30>
 80041ee:	4b12      	ldr	r3, [pc, #72]	; (8004238 <SPI_command+0x74>)
 80041f0:	22fa      	movs	r2, #250	; 0xfa
 80041f2:	701a      	strb	r2, [r3, #0]

	spi_store[0]=spi_byte&255;
 80041f4:	4b10      	ldr	r3, [pc, #64]	; (8004238 <SPI_command+0x74>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 80041fa:	4b0e      	ldr	r3, [pc, #56]	; (8004234 <SPI_command+0x70>)
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	091b      	lsrs	r3, r3, #4
 8004200:	b29b      	uxth	r3, r3
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	b2db      	uxtb	r3, r3
 8004206:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8004208:	4b0a      	ldr	r3, [pc, #40]	; (8004234 <SPI_command+0x70>)
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	b2db      	uxtb	r3, r3
 8004210:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 8004212:	4639      	mov	r1, r7
 8004214:	2303      	movs	r3, #3
 8004216:	2203      	movs	r2, #3
 8004218:	4808      	ldr	r0, [pc, #32]	; (800423c <SPI_command+0x78>)
 800421a:	f005 fc42 	bl	8009aa2 <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 800421e:	4b03      	ldr	r3, [pc, #12]	; (800422c <SPI_command+0x68>)
 8004220:	2201      	movs	r2, #1
 8004222:	801a      	strh	r2, [r3, #0]
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20003348 	.word	0x20003348
 8004230:	2000334e 	.word	0x2000334e
 8004234:	2000334c 	.word	0x2000334c
 8004238:	2000334a 	.word	0x2000334a
 800423c:	200112c4 	.word	0x200112c4

08004240 <display_init>:

void display_init(void){
 8004240:	b5b0      	push	{r4, r5, r7, lr}
 8004242:	b08a      	sub	sp, #40	; 0x28
 8004244:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 8004246:	4b22      	ldr	r3, [pc, #136]	; (80042d0 <display_init+0x90>)
 8004248:	1d3c      	adds	r4, r7, #4
 800424a:	461d      	mov	r5, r3
 800424c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800424e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004254:	682b      	ldr	r3, [r5, #0]
 8004256:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8004258:	4b1e      	ldr	r3, [pc, #120]	; (80042d4 <display_init+0x94>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d132      	bne.n	80042c6 <display_init+0x86>

switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8004260:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <display_init+0x98>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b06      	subs	r3, #6
 8004268:	b29a      	uxth	r2, r3
 800426a:	4b1c      	ldr	r3, [pc, #112]	; (80042dc <display_init+0x9c>)
 800426c:	801a      	strh	r2, [r3, #0]
 800426e:	f7ff fe9b 	bl	8003fa8 <displayBuffer2>
 8004272:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <display_init+0x9c>)
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	4b19      	ldr	r3, [pc, #100]	; (80042e0 <display_init+0xa0>)
 800427a:	5c9b      	ldrb	r3, [r3, r2]
 800427c:	b29a      	uxth	r2, r3
 800427e:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <display_init+0xa4>)
 8004280:	801a      	strh	r2, [r3, #0]
 8004282:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 8004284:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <display_init+0x98>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b05      	cmp	r3, #5
 800428a:	d80b      	bhi.n	80042a4 <display_init+0x64>
 800428c:	2003      	movs	r0, #3
 800428e:	f002 f82b 	bl	80062e8 <HAL_Delay>
 8004292:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <display_init+0x98>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	3328      	adds	r3, #40	; 0x28
 800429a:	443b      	add	r3, r7
 800429c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80042a0:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <display_init+0xa4>)
 80042a2:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 80042a4:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <display_init+0x98>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	3301      	adds	r3, #1
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <display_init+0x98>)
 80042ae:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 80042b0:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <display_init+0x94>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	701a      	strb	r2, [r3, #0]
 80042b6:	f7ff ff85 	bl	80041c4 <SPI_command>
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <display_init+0x94>)
 80042bc:	2200      	movs	r2, #0
 80042be:	701a      	strb	r2, [r3, #0]
 80042c0:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <display_init+0xa8>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	801a      	strh	r2, [r3, #0]


		  }

		//  if (init==5) display_fill();
}
 80042c6:	bf00      	nop
 80042c8:	3728      	adds	r7, #40	; 0x28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bdb0      	pop	{r4, r5, r7, pc}
 80042ce:	bf00      	nop
 80042d0:	0800cc28 	.word	0x0800cc28
 80042d4:	2000334e 	.word	0x2000334e
 80042d8:	2000334f 	.word	0x2000334f
 80042dc:	20003350 	.word	0x20003350
 80042e0:	20000000 	.word	0x20000000
 80042e4:	2000334c 	.word	0x2000334c
 80042e8:	20003348 	.word	0x20003348

080042ec <gfx_TX_block>:
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;

			} HAL_SPI_Transmit_DMA(&hspi2,spi_store,54);  // ok

}
void gfx_TX_block(void){         // send spi to lcd from gfx ram , full page needed initially as it writes commands as well
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	73fb      	strb	r3, [r7, #15]
			uint8_t spi_store3=0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	72bb      	strb	r3, [r7, #10]
			uint16_t  up_counter=0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	81bb      	strh	r3, [r7, #12]
			uint8_t line_counter=0;
 80042fe:	2300      	movs	r3, #0
 8004300:	72fb      	strb	r3, [r7, #11]

			gfx_send_counter=0;
 8004302:	4b25      	ldr	r3, [pc, #148]	; (8004398 <gfx_TX_block+0xac>)
 8004304:	2200      	movs	r2, #0
 8004306:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 8004308:	2300      	movs	r3, #0
 800430a:	81bb      	strh	r3, [r7, #12]
 800430c:	e034      	b.n	8004378 <gfx_TX_block+0x8c>


			    spi_store3=gfx_ram[gfx_send_counter];
 800430e:	4b22      	ldr	r3, [pc, #136]	; (8004398 <gfx_TX_block+0xac>)
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	4b21      	ldr	r3, [pc, #132]	; (800439c <gfx_TX_block+0xb0>)
 8004316:	5c9b      	ldrb	r3, [r3, r2]
 8004318:	72bb      	strb	r3, [r7, #10]
			    if (line_counter>1) {spi_store2=250;					// 2ms delay between location commands , data is ok full speed
 800431a:	7afb      	ldrb	r3, [r7, #11]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d902      	bls.n	8004326 <gfx_TX_block+0x3a>
 8004320:	23fa      	movs	r3, #250	; 0xfa
 8004322:	73fb      	strb	r3, [r7, #15]
 8004324:	e001      	b.n	800432a <gfx_TX_block+0x3e>
			}
			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8004326:	23f8      	movs	r3, #248	; 0xf8
 8004328:	73fb      	strb	r3, [r7, #15]

					spi_store[0]=spi_store2;
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	713b      	strb	r3, [r7, #4]
					spi_store[1]=((spi_store3>>4)<<4);
 800432e:	7abb      	ldrb	r3, [r7, #10]
 8004330:	091b      	lsrs	r3, r3, #4
 8004332:	b2db      	uxtb	r3, r3
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	b2db      	uxtb	r3, r3
 8004338:	717b      	strb	r3, [r7, #5]
					spi_store[2]=((spi_store3&15)<<4);
 800433a:	7abb      	ldrb	r3, [r7, #10]
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	b2db      	uxtb	r3, r3
 8004340:	71bb      	strb	r3, [r7, #6]
					memcpy(spi_tx_block+up_counter,spi_store,3);
 8004342:	89bb      	ldrh	r3, [r7, #12]
 8004344:	4a16      	ldr	r2, [pc, #88]	; (80043a0 <gfx_TX_block+0xb4>)
 8004346:	4413      	add	r3, r2
 8004348:	461a      	mov	r2, r3
 800434a:	1d3b      	adds	r3, r7, #4
 800434c:	8819      	ldrh	r1, [r3, #0]
 800434e:	789b      	ldrb	r3, [r3, #2]
 8004350:	8011      	strh	r1, [r2, #0]
 8004352:	7093      	strb	r3, [r2, #2]
					if (line_counter==17 ) { line_counter=0;    } else line_counter++; //
 8004354:	7afb      	ldrb	r3, [r7, #11]
 8004356:	2b11      	cmp	r3, #17
 8004358:	d102      	bne.n	8004360 <gfx_TX_block+0x74>
 800435a:	2300      	movs	r3, #0
 800435c:	72fb      	strb	r3, [r7, #11]
 800435e:	e002      	b.n	8004366 <gfx_TX_block+0x7a>
 8004360:	7afb      	ldrb	r3, [r7, #11]
 8004362:	3301      	adds	r3, #1
 8004364:	72fb      	strb	r3, [r7, #11]
			 gfx_send_counter++; ;
 8004366:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <gfx_TX_block+0xac>)
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	3301      	adds	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <gfx_TX_block+0xac>)
 8004370:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 8004372:	89bb      	ldrh	r3, [r7, #12]
 8004374:	3303      	adds	r3, #3
 8004376:	81bb      	strh	r3, [r7, #12]
 8004378:	89bb      	ldrh	r3, [r7, #12]
 800437a:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 800437e:	d3c6      	bcc.n	800430e <gfx_TX_block+0x22>

			} ;  // ok
			gfx_send_counter=0; disp_end=1;
 8004380:	4b05      	ldr	r3, [pc, #20]	; (8004398 <gfx_TX_block+0xac>)
 8004382:	2200      	movs	r2, #0
 8004384:	801a      	strh	r2, [r3, #0]
 8004386:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <gfx_TX_block+0xb8>)
 8004388:	2201      	movs	r2, #1
 800438a:	701a      	strb	r2, [r3, #0]

}
 800438c:	bf00      	nop
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	20003cee 	.word	0x20003cee
 800439c:	2000386c 	.word	0x2000386c
 80043a0:	2000fae0 	.word	0x2000fae0
 80043a4:	20003cfa 	.word	0x20003cfa

080043a8 <gfx_clear>:

void gfx_clear(void){     // simple gfx ram clear ,besides feedback
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0

	for (n=0;n<1152 ;n=n+18)    {
 80043ac:	4b19      	ldr	r3, [pc, #100]	; (8004414 <gfx_clear+0x6c>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	801a      	strh	r2, [r3, #0]
 80043b2:	e01c      	b.n	80043ee <gfx_clear+0x46>
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 80043b4:	4b18      	ldr	r3, [pc, #96]	; (8004418 <gfx_clear+0x70>)
 80043b6:	2202      	movs	r2, #2
 80043b8:	801a      	strh	r2, [r3, #0]
 80043ba:	e00e      	b.n	80043da <gfx_clear+0x32>
 80043bc:	4b15      	ldr	r3, [pc, #84]	; (8004414 <gfx_clear+0x6c>)
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	4b15      	ldr	r3, [pc, #84]	; (8004418 <gfx_clear+0x70>)
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	4413      	add	r3, r2
 80043c8:	4a14      	ldr	r2, [pc, #80]	; (800441c <gfx_clear+0x74>)
 80043ca:	2100      	movs	r1, #0
 80043cc:	54d1      	strb	r1, [r2, r3]
 80043ce:	4b12      	ldr	r3, [pc, #72]	; (8004418 <gfx_clear+0x70>)
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	3301      	adds	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	4b10      	ldr	r3, [pc, #64]	; (8004418 <gfx_clear+0x70>)
 80043d8:	801a      	strh	r2, [r3, #0]
 80043da:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <gfx_clear+0x70>)
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	2b11      	cmp	r3, #17
 80043e0:	d9ec      	bls.n	80043bc <gfx_clear+0x14>
	for (n=0;n<1152 ;n=n+18)    {
 80043e2:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <gfx_clear+0x6c>)
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	3312      	adds	r3, #18
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <gfx_clear+0x6c>)
 80043ec:	801a      	strh	r2, [r3, #0]
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <gfx_clear+0x6c>)
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80043f6:	d3dd      	bcc.n	80043b4 <gfx_clear+0xc>

				}  }
	 gfx_send_swap=0;  // disable line skip
 80043f8:	4b09      	ldr	r3, [pc, #36]	; (8004420 <gfx_clear+0x78>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 80043fe:	4b09      	ldr	r3, [pc, #36]	; (8004424 <gfx_clear+0x7c>)
 8004400:	2200      	movs	r2, #0
 8004402:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 8004404:	4b08      	ldr	r3, [pc, #32]	; (8004428 <gfx_clear+0x80>)
 8004406:	2200      	movs	r2, #0
 8004408:	701a      	strb	r2, [r3, #0]

}
 800440a:	bf00      	nop
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	20000b00 	.word	0x20000b00
 8004418:	20000b06 	.word	0x20000b06
 800441c:	2000386c 	.word	0x2000386c
 8004420:	20003cf0 	.word	0x20003cf0
 8004424:	20003cee 	.word	0x20003cee
 8004428:	20003cfa 	.word	0x20003cfa

0800442c <display_clear>:

		 gfx_send();

	 }  }

void display_clear (void){ //  simple character clear on default menu3
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0

	uint16_t disp_counter=0;
 8004432:	2300      	movs	r3, #0
 8004434:	80fb      	strh	r3, [r7, #6]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 8004436:	2300      	movs	r3, #0
 8004438:	80fb      	strh	r3, [r7, #6]
 800443a:	e006      	b.n	800444a <display_clear+0x1e>
		default_menu3[disp_counter]=47;
 800443c:	88fb      	ldrh	r3, [r7, #6]
 800443e:	4a08      	ldr	r2, [pc, #32]	; (8004460 <display_clear+0x34>)
 8004440:	212f      	movs	r1, #47	; 0x2f
 8004442:	54d1      	strb	r1, [r2, r3]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	3301      	adds	r3, #1
 8004448:	80fb      	strh	r3, [r7, #6]
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004450:	d3f4      	bcc.n	800443c <display_clear+0x10>
	}


}
 8004452:	bf00      	nop
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	20010d70 	.word	0x20010d70

08004464 <display_generate>:
void display_generate(void){    // display character generate, 1+1+16 chars
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
uint8_t counter;
	gfx_clear_flag=0;
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <display_generate+0x1c>)
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]
//	for (counter=0;counter<18;counter++) {
	display_process();
 800446e:	f7ff fd93 	bl	8003f98 <display_process>
		  displayBuffer2(); // 5 cycles max for the lot or  0.2ms
 8004472:	f7ff fd99 	bl	8003fa8 <displayBuffer2>
	// if(!gfx_clear_flag)   gfx_send_swap=1;   // enable line swapping
	 disp_end=0;   ///reset till next full page
 8004476:	4b03      	ldr	r3, [pc, #12]	; (8004484 <display_generate+0x20>)
 8004478:	2200      	movs	r2, #0
 800447a:	701a      	strb	r2, [r3, #0]

	//  if (!disp_stepper) break;

}
 800447c:	bf00      	nop
 800447e:	bd80      	pop	{r7, pc}
 8004480:	200058ae 	.word	0x200058ae
 8004484:	20003cfa 	.word	0x20003cfa

08004488 <gfx_line_fill>:



}

void gfx_line_fill (){   // fills a line to gfx_ram from default_menu3 also fills gfx_block
 8004488:	b480      	push	{r7}
 800448a:	b08b      	sub	sp, #44	; 0x2c
 800448c:	af00      	add	r7, sp, #0
		    // this now is the  emain char to disp
   // uint8_t line_selected=(loop_counter&7)+((menu_title_lut[enc_out1]>>7)*8);

    uint16_t cursor= menu_title_lut[enc_out1];
 800448e:	4b5c      	ldr	r3, [pc, #368]	; (8004600 <gfx_line_fill+0x178>)
 8004490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004494:	461a      	mov	r2, r3
 8004496:	4b5b      	ldr	r3, [pc, #364]	; (8004604 <gfx_line_fill+0x17c>)
 8004498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800449c:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t line_selected=(loop_counter&7)+((cursor>>7)*8);    // thsi needs to be 1024/16
 800449e:	4b5a      	ldr	r3, [pc, #360]	; (8004608 <gfx_line_fill+0x180>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044ac:	09db      	lsrs	r3, r3, #7
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	4413      	add	r3, r2
 80044b6:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t start_line=(line_selected&7)*144;
 80044b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	b29b      	uxth	r3, r3
 80044c0:	461a      	mov	r2, r3
 80044c2:	00d2      	lsls	r2, r2, #3
 80044c4:	4413      	add	r3, r2
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	843b      	strh	r3, [r7, #32]
     uint16_t end_line=start_line+144;
 80044ca:	8c3b      	ldrh	r3, [r7, #32]
 80044cc:	3390      	adds	r3, #144	; 0x90
 80044ce:	83fb      	strh	r3, [r7, #30]
     disp_end=1;
 80044d0:	4b4e      	ldr	r3, [pc, #312]	; (800460c <gfx_line_fill+0x184>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	701a      	strb	r2, [r3, #0]
   //  uint8_t  character=default_menu3[(i-2)+(line_selected*16)]-47;
    uint8_t char_skip=0;
 80044d6:	2300      	movs	r3, #0
 80044d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     uint16_t character;
     uint8_t spi_store[3];
     uint8_t spi_store3=0;
 80044dc:	2300      	movs	r3, #0
 80044de:	777b      	strb	r3, [r7, #29]
     uint8_t reverse[16]={0};
 80044e0:	2300      	movs	r3, #0
 80044e2:	607b      	str	r3, [r7, #4]
 80044e4:	f107 0308 	add.w	r3, r7, #8
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	605a      	str	r2, [r3, #4]
 80044ee:	609a      	str	r2, [r3, #8]



     if ((cursor>>4) == line_selected)    reverse [(cursor&15)]=1;
 80044f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044f2:	091b      	lsrs	r3, r3, #4
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d107      	bne.n	800450c <gfx_line_fill+0x84>
 80044fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	3328      	adds	r3, #40	; 0x28
 8004504:	443b      	add	r3, r7
 8004506:	2201      	movs	r2, #1
 8004508:	f803 2c24 	strb.w	r2, [r3, #-36]

     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 800450c:	4a40      	ldr	r2, [pc, #256]	; (8004610 <gfx_line_fill+0x188>)
 800450e:	8c3b      	ldrh	r3, [r7, #32]
 8004510:	8013      	strh	r3, [r2, #0]
 8004512:	e068      	b.n	80045e6 <gfx_line_fill+0x15e>

	 for (i=0;i<16;i++){
 8004514:	4b3f      	ldr	r3, [pc, #252]	; (8004614 <gfx_line_fill+0x18c>)
 8004516:	2200      	movs	r2, #0
 8004518:	801a      	strh	r2, [r3, #0]
 800451a:	e055      	b.n	80045c8 <gfx_line_fill+0x140>
		 character=((default_menu3[i+(line_selected*16)]-47)*8)+char_skip;
 800451c:	4b3d      	ldr	r3, [pc, #244]	; (8004614 <gfx_line_fill+0x18c>)
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	4413      	add	r3, r2
 8004528:	4a3b      	ldr	r2, [pc, #236]	; (8004618 <gfx_line_fill+0x190>)
 800452a:	5cd3      	ldrb	r3, [r2, r3]
 800452c:	3b2f      	subs	r3, #47	; 0x2f
 800452e:	b29b      	uxth	r3, r3
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	b29a      	uxth	r2, r3
 8004534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004538:	b29b      	uxth	r3, r3
 800453a:	4413      	add	r3, r2
 800453c:	837b      	strh	r3, [r7, #26]
		 spi_store3= gfx_char[character&1023 ];     // limited characters
 800453e:	8b7b      	ldrh	r3, [r7, #26]
 8004540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004544:	4a35      	ldr	r2, [pc, #212]	; (800461c <gfx_line_fill+0x194>)
 8004546:	5cd3      	ldrb	r3, [r2, r3]
 8004548:	777b      	strb	r3, [r7, #29]
		spi_store3=spi_store3^(reverse[i]*127);
 800454a:	4b32      	ldr	r3, [pc, #200]	; (8004614 <gfx_line_fill+0x18c>)
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	3328      	adds	r3, #40	; 0x28
 8004550:	443b      	add	r3, r7
 8004552:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004556:	461a      	mov	r2, r3
 8004558:	01d2      	lsls	r2, r2, #7
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	b2db      	uxtb	r3, r3
 800455e:	b25a      	sxtb	r2, r3
 8004560:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004564:	4053      	eors	r3, r2
 8004566:	b25b      	sxtb	r3, r3
 8004568:	777b      	strb	r3, [r7, #29]
		 gfx_ram[n+i+2]=spi_store3;
 800456a:	4b29      	ldr	r3, [pc, #164]	; (8004610 <gfx_line_fill+0x188>)
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	4b28      	ldr	r3, [pc, #160]	; (8004614 <gfx_line_fill+0x18c>)
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	4413      	add	r3, r2
 8004576:	3302      	adds	r3, #2
 8004578:	4929      	ldr	r1, [pc, #164]	; (8004620 <gfx_line_fill+0x198>)
 800457a:	7f7a      	ldrb	r2, [r7, #29]
 800457c:	54ca      	strb	r2, [r1, r3]

						    spi_store[0]=250;
 800457e:	23fa      	movs	r3, #250	; 0xfa
 8004580:	753b      	strb	r3, [r7, #20]
						    spi_store[1]=((spi_store3>>4)<<4);
 8004582:	7f7b      	ldrb	r3, [r7, #29]
 8004584:	091b      	lsrs	r3, r3, #4
 8004586:	b2db      	uxtb	r3, r3
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	b2db      	uxtb	r3, r3
 800458c:	757b      	strb	r3, [r7, #21]
						    spi_store[2]=((spi_store3&15)<<4);
 800458e:	7f7b      	ldrb	r3, [r7, #29]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	b2db      	uxtb	r3, r3
 8004594:	75bb      	strb	r3, [r7, #22]
						    memcpy(spi_tx_block+(((n+i)*3)+6),spi_store,3);  // writes only data no command
 8004596:	4b1e      	ldr	r3, [pc, #120]	; (8004610 <gfx_line_fill+0x188>)
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	4b1d      	ldr	r3, [pc, #116]	; (8004614 <gfx_line_fill+0x18c>)
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	441a      	add	r2, r3
 80045a2:	4613      	mov	r3, r2
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	4413      	add	r3, r2
 80045a8:	3306      	adds	r3, #6
 80045aa:	4a1e      	ldr	r2, [pc, #120]	; (8004624 <gfx_line_fill+0x19c>)
 80045ac:	4413      	add	r3, r2
 80045ae:	461a      	mov	r2, r3
 80045b0:	f107 0314 	add.w	r3, r7, #20
 80045b4:	8819      	ldrh	r1, [r3, #0]
 80045b6:	789b      	ldrb	r3, [r3, #2]
 80045b8:	8011      	strh	r1, [r2, #0]
 80045ba:	7093      	strb	r3, [r2, #2]
	 for (i=0;i<16;i++){
 80045bc:	4b15      	ldr	r3, [pc, #84]	; (8004614 <gfx_line_fill+0x18c>)
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	3301      	adds	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	4b13      	ldr	r3, [pc, #76]	; (8004614 <gfx_line_fill+0x18c>)
 80045c6:	801a      	strh	r2, [r3, #0]
 80045c8:	4b12      	ldr	r3, [pc, #72]	; (8004614 <gfx_line_fill+0x18c>)
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	2b0f      	cmp	r3, #15
 80045ce:	d9a5      	bls.n	800451c <gfx_line_fill+0x94>
		     }
	char_skip++;
 80045d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045d4:	3301      	adds	r3, #1
 80045d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 80045da:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <gfx_line_fill+0x188>)
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	3312      	adds	r3, #18
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <gfx_line_fill+0x188>)
 80045e4:	801a      	strh	r2, [r3, #0]
 80045e6:	4b0a      	ldr	r3, [pc, #40]	; (8004610 <gfx_line_fill+0x188>)
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	8bfa      	ldrh	r2, [r7, #30]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d891      	bhi.n	8004514 <gfx_line_fill+0x8c>
    }
    }
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	372c      	adds	r7, #44	; 0x2c
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	20000220 	.word	0x20000220
 8004604:	20005298 	.word	0x20005298
 8004608:	20000b02 	.word	0x20000b02
 800460c:	20003cfa 	.word	0x20003cfa
 8004610:	20000b00 	.word	0x20000b00
 8004614:	20000b06 	.word	0x20000b06
 8004618:	20010d70 	.word	0x20010d70
 800461c:	0800d878 	.word	0x0800d878
 8004620:	2000386c 	.word	0x2000386c
 8004624:	2000fae0 	.word	0x2000fae0

08004628 <encoder2>:


void encoder2(void){  // encoder pos and data input
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0


	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 800462e:	4b5f      	ldr	r3, [pc, #380]	; (80047ac <encoder2+0x184>)
 8004630:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004634:	461a      	mov	r2, r3
 8004636:	4b5e      	ldr	r3, [pc, #376]	; (80047b0 <encoder2+0x188>)
 8004638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800463c:	0c1b      	lsrs	r3, r3, #16
 800463e:	71fb      	strb	r3, [r7, #7]

	    memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4a5b      	ldr	r2, [pc, #364]	; (80047b4 <encoder2+0x18c>)
 8004646:	4413      	add	r3, r2
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4b5b      	ldr	r3, [pc, #364]	; (80047b8 <encoder2+0x190>)
 800464c:	6810      	ldr	r0, [r2, #0]
 800464e:	6851      	ldr	r1, [r2, #4]
 8004650:	c303      	stmia	r3!, {r0, r1}
	     char temp_char[]="  ";
 8004652:	4a5a      	ldr	r2, [pc, #360]	; (80047bc <encoder2+0x194>)
 8004654:	1d3b      	adds	r3, r7, #4
 8004656:	6812      	ldr	r2, [r2, #0]
 8004658:	4611      	mov	r1, r2
 800465a:	8019      	strh	r1, [r3, #0]
 800465c:	3302      	adds	r3, #2
 800465e:	0c12      	lsrs	r2, r2, #16
 8004660:	701a      	strb	r2, [r3, #0]
				     memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8004662:	4b52      	ldr	r3, [pc, #328]	; (80047ac <encoder2+0x184>)
 8004664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	461a      	mov	r2, r3
 800466c:	4b54      	ldr	r3, [pc, #336]	; (80047c0 <encoder2+0x198>)
 800466e:	4413      	add	r3, r2
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	80bb      	strh	r3, [r7, #4]
				     menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8004676:	1d3b      	adds	r3, r7, #4
 8004678:	4618      	mov	r0, r3
 800467a:	f007 fe03 	bl	800c284 <atoi>
 800467e:	4603      	mov	r3, r0
 8004680:	b2da      	uxtb	r2, r3
 8004682:	4b50      	ldr	r3, [pc, #320]	; (80047c4 <encoder2+0x19c>)
 8004684:	701a      	strb	r2, [r3, #0]
	    menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8004686:	4b4f      	ldr	r3, [pc, #316]	; (80047c4 <encoder2+0x19c>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	4619      	mov	r1, r3
 800468c:	484a      	ldr	r0, [pc, #296]	; (80047b8 <encoder2+0x190>)
 800468e:	f7fc fbd9 	bl	8000e44 <menu_vars>
 8004692:	4603      	mov	r3, r0
 8004694:	4a4c      	ldr	r2, [pc, #304]	; (80047c8 <encoder2+0x1a0>)
 8004696:	6013      	str	r3, [r2, #0]
		if ((*menu_vars_var)>menu_vars_limiter[menu_vars_ref])     *menu_vars_var=menu_vars_limiter[menu_vars_ref];   // limit value sher too
 8004698:	4b4b      	ldr	r3, [pc, #300]	; (80047c8 <encoder2+0x1a0>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	781a      	ldrb	r2, [r3, #0]
 800469e:	4b4b      	ldr	r3, [pc, #300]	; (80047cc <encoder2+0x1a4>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	4619      	mov	r1, r3
 80046a4:	4b4a      	ldr	r3, [pc, #296]	; (80047d0 <encoder2+0x1a8>)
 80046a6:	5c5b      	ldrb	r3, [r3, r1]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d907      	bls.n	80046bc <encoder2+0x94>
 80046ac:	4b47      	ldr	r3, [pc, #284]	; (80047cc <encoder2+0x1a4>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	4619      	mov	r1, r3
 80046b2:	4b45      	ldr	r3, [pc, #276]	; (80047c8 <encoder2+0x1a0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a46      	ldr	r2, [pc, #280]	; (80047d0 <encoder2+0x1a8>)
 80046b8:	5c52      	ldrb	r2, [r2, r1]
 80046ba:	701a      	strb	r2, [r3, #0]

	    // input encode ------------------------
	    if ((enc_dir!=enc_mem_dir)  )    ///write back value if encoder changed ;
 80046bc:	4b45      	ldr	r3, [pc, #276]	; (80047d4 <encoder2+0x1ac>)
 80046be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046c2:	461a      	mov	r2, r3
 80046c4:	4b44      	ldr	r3, [pc, #272]	; (80047d8 <encoder2+0x1b0>)
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d024      	beq.n	8004716 <encoder2+0xee>
	    {
		if (enc_dir>enc_mem_dir) 							*menu_vars_var=((*menu_vars_var)+1)&255;
 80046cc:	4b41      	ldr	r3, [pc, #260]	; (80047d4 <encoder2+0x1ac>)
 80046ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046d2:	461a      	mov	r2, r3
 80046d4:	4b40      	ldr	r3, [pc, #256]	; (80047d8 <encoder2+0x1b0>)
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	dd07      	ble.n	80046ec <encoder2+0xc4>
 80046dc:	4b3a      	ldr	r3, [pc, #232]	; (80047c8 <encoder2+0x1a0>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	781a      	ldrb	r2, [r3, #0]
 80046e2:	4b39      	ldr	r3, [pc, #228]	; (80047c8 <encoder2+0x1a0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3201      	adds	r2, #1
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	701a      	strb	r2, [r3, #0]
	    if ((enc_dir<enc_mem_dir)&&(*menu_vars_var))		 *menu_vars_var=((*menu_vars_var)-1)&255;
 80046ec:	4b39      	ldr	r3, [pc, #228]	; (80047d4 <encoder2+0x1ac>)
 80046ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046f2:	461a      	mov	r2, r3
 80046f4:	4b38      	ldr	r3, [pc, #224]	; (80047d8 <encoder2+0x1b0>)
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	da0c      	bge.n	8004716 <encoder2+0xee>
 80046fc:	4b32      	ldr	r3, [pc, #200]	; (80047c8 <encoder2+0x1a0>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d007      	beq.n	8004716 <encoder2+0xee>
 8004706:	4b30      	ldr	r3, [pc, #192]	; (80047c8 <encoder2+0x1a0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	781a      	ldrb	r2, [r3, #0]
 800470c:	4b2e      	ldr	r3, [pc, #184]	; (80047c8 <encoder2+0x1a0>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3a01      	subs	r2, #1
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]
	    }
	    enc_mem_dir=enc_dir;
 8004716:	4b2f      	ldr	r3, [pc, #188]	; (80047d4 <encoder2+0x1ac>)
 8004718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800471c:	b29a      	uxth	r2, r3
 800471e:	4b2e      	ldr	r3, [pc, #184]	; (80047d8 <encoder2+0x1b0>)
 8004720:	801a      	strh	r2, [r3, #0]

	    // location encode ------------------------

	    if ((enc2_dir!=enc2_mem_dir)  )    ///write back value if encoder changed ;
 8004722:	4b2e      	ldr	r3, [pc, #184]	; (80047dc <encoder2+0x1b4>)
 8004724:	881a      	ldrh	r2, [r3, #0]
 8004726:	4b2e      	ldr	r3, [pc, #184]	; (80047e0 <encoder2+0x1b8>)
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d01d      	beq.n	800476a <encoder2+0x142>
	   	    {
	   		if (enc2_dir>enc2_mem_dir) 							enc_out1++;
 800472e:	4b2b      	ldr	r3, [pc, #172]	; (80047dc <encoder2+0x1b4>)
 8004730:	881a      	ldrh	r2, [r3, #0]
 8004732:	4b2b      	ldr	r3, [pc, #172]	; (80047e0 <encoder2+0x1b8>)
 8004734:	881b      	ldrh	r3, [r3, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d908      	bls.n	800474c <encoder2+0x124>
 800473a:	4b1c      	ldr	r3, [pc, #112]	; (80047ac <encoder2+0x184>)
 800473c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004740:	b29b      	uxth	r3, r3
 8004742:	3301      	adds	r3, #1
 8004744:	b29b      	uxth	r3, r3
 8004746:	b21a      	sxth	r2, r3
 8004748:	4b18      	ldr	r3, [pc, #96]	; (80047ac <encoder2+0x184>)
 800474a:	801a      	strh	r2, [r3, #0]
	   	    if ((enc2_dir<enc2_mem_dir))		enc_out1--;
 800474c:	4b23      	ldr	r3, [pc, #140]	; (80047dc <encoder2+0x1b4>)
 800474e:	881a      	ldrh	r2, [r3, #0]
 8004750:	4b23      	ldr	r3, [pc, #140]	; (80047e0 <encoder2+0x1b8>)
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d208      	bcs.n	800476a <encoder2+0x142>
 8004758:	4b14      	ldr	r3, [pc, #80]	; (80047ac <encoder2+0x184>)
 800475a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29b      	uxth	r3, r3
 8004764:	b21a      	sxth	r2, r3
 8004766:	4b11      	ldr	r3, [pc, #68]	; (80047ac <encoder2+0x184>)
 8004768:	801a      	strh	r2, [r3, #0]

	   	    }
	   	   if (enc_out1>menu_title_count) enc_out1=0;
 800476a:	4b10      	ldr	r3, [pc, #64]	; (80047ac <encoder2+0x184>)
 800476c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004770:	461a      	mov	r2, r3
 8004772:	4b1c      	ldr	r3, [pc, #112]	; (80047e4 <encoder2+0x1bc>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	dd02      	ble.n	8004780 <encoder2+0x158>
 800477a:	4b0c      	ldr	r3, [pc, #48]	; (80047ac <encoder2+0x184>)
 800477c:	2200      	movs	r2, #0
 800477e:	801a      	strh	r2, [r3, #0]
	   	 if (enc_out1<0) enc_out1=menu_title_count;
 8004780:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <encoder2+0x184>)
 8004782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004786:	2b00      	cmp	r3, #0
 8004788:	da04      	bge.n	8004794 <encoder2+0x16c>
 800478a:	4b16      	ldr	r3, [pc, #88]	; (80047e4 <encoder2+0x1bc>)
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	b21a      	sxth	r2, r3
 8004790:	4b06      	ldr	r3, [pc, #24]	; (80047ac <encoder2+0x184>)
 8004792:	801a      	strh	r2, [r3, #0]

	    enc2_mem_dir=enc2_dir;
 8004794:	4b11      	ldr	r3, [pc, #68]	; (80047dc <encoder2+0x1b4>)
 8004796:	881a      	ldrh	r2, [r3, #0]
 8004798:	4b11      	ldr	r3, [pc, #68]	; (80047e0 <encoder2+0x1b8>)
 800479a:	801a      	strh	r2, [r3, #0]
	   //-------------------

		    enc2_add=0;
 800479c:	4b12      	ldr	r3, [pc, #72]	; (80047e8 <encoder2+0x1c0>)
 800479e:	2200      	movs	r2, #0
 80047a0:	701a      	strb	r2, [r3, #0]

    }
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20000220 	.word	0x20000220
 80047b0:	20005298 	.word	0x20005298
 80047b4:	2000042c 	.word	0x2000042c
 80047b8:	2000589c 	.word	0x2000589c
 80047bc:	0800cc24 	.word	0x0800cc24
 80047c0:	20005698 	.word	0x20005698
 80047c4:	200058a4 	.word	0x200058a4
 80047c8:	20005898 	.word	0x20005898
 80047cc:	200078d5 	.word	0x200078d5
 80047d0:	0800d808 	.word	0x0800d808
 80047d4:	20003340 	.word	0x20003340
 80047d8:	2000fadc 	.word	0x2000fadc
 80047dc:	2000333e 	.word	0x2000333e
 80047e0:	200058a8 	.word	0x200058a8
 80047e4:	20005295 	.word	0x20005295
 80047e8:	20003342 	.word	0x20003342

080047ec <menu3_fill>:


    void menu3_fill(void){   // looping write into default_menu3
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
	uint16_t   enc_up=disp_up_counter;
 80047f2:	4b4e      	ldr	r3, [pc, #312]	; (800492c <menu3_fill+0x140>)
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	81fb      	strh	r3, [r7, #14]

	if(enc_up>menu_title_count) {enc_up=0; disp_up_counter=0;}
 80047f8:	4b4d      	ldr	r3, [pc, #308]	; (8004930 <menu3_fill+0x144>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	89fa      	ldrh	r2, [r7, #14]
 8004800:	429a      	cmp	r2, r3
 8004802:	d904      	bls.n	800480e <menu3_fill+0x22>
 8004804:	2300      	movs	r3, #0
 8004806:	81fb      	strh	r3, [r7, #14]
 8004808:	4b48      	ldr	r3, [pc, #288]	; (800492c <menu3_fill+0x140>)
 800480a:	2200      	movs	r2, #0
 800480c:	801a      	strh	r2, [r3, #0]

	uint8_t crap_hold10=(menu_title_lut[enc_up]>>16)&255;   // look up up menu_titles_final
 800480e:	89fb      	ldrh	r3, [r7, #14]
 8004810:	4a48      	ldr	r2, [pc, #288]	; (8004934 <menu3_fill+0x148>)
 8004812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004816:	0c1b      	lsrs	r3, r3, #16
 8004818:	737b      	strb	r3, [r7, #13]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold10),8);	// send back for menu vars ok
 800481a:	7b7b      	ldrb	r3, [r7, #13]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4a46      	ldr	r2, [pc, #280]	; (8004938 <menu3_fill+0x14c>)
 8004820:	4413      	add	r3, r2
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	4b45      	ldr	r3, [pc, #276]	; (800493c <menu3_fill+0x150>)
 8004826:	6810      	ldr	r0, [r2, #0]
 8004828:	6851      	ldr	r1, [r2, #4]
 800482a:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 800482c:	4a44      	ldr	r2, [pc, #272]	; (8004940 <menu3_fill+0x154>)
 800482e:	1d3b      	adds	r3, r7, #4
 8004830:	6812      	ldr	r2, [r2, #0]
 8004832:	4611      	mov	r1, r2
 8004834:	8019      	strh	r1, [r3, #0]
 8004836:	3302      	adds	r3, #2
 8004838:	0c12      	lsrs	r2, r2, #16
 800483a:	701a      	strb	r2, [r3, #0]
				 memcpy(temp_char,menu_index_list+((enc_up*2)),2);   // copy char to char,ok
 800483c:	89fb      	ldrh	r3, [r7, #14]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	461a      	mov	r2, r3
 8004842:	4b40      	ldr	r3, [pc, #256]	; (8004944 <menu3_fill+0x158>)
 8004844:	4413      	add	r3, r2
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	b29b      	uxth	r3, r3
 800484a:	80bb      	strh	r3, [r7, #4]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 800484c:	1d3b      	adds	r3, r7, #4
 800484e:	4618      	mov	r0, r3
 8004850:	f007 fd18 	bl	800c284 <atoi>
 8004854:	4603      	mov	r3, r0
 8004856:	b2da      	uxtb	r2, r3
 8004858:	4b3b      	ldr	r3, [pc, #236]	; (8004948 <menu3_fill+0x15c>)
 800485a:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 800485c:	4b3a      	ldr	r3, [pc, #232]	; (8004948 <menu3_fill+0x15c>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	4619      	mov	r1, r3
 8004862:	4836      	ldr	r0, [pc, #216]	; (800493c <menu3_fill+0x150>)
 8004864:	f7fc faee 	bl	8000e44 <menu_vars>
 8004868:	4603      	mov	r3, r0
 800486a:	4a38      	ldr	r2, [pc, #224]	; (800494c <menu3_fill+0x160>)
 800486c:	6013      	str	r3, [r2, #0]

			lcd_out3=*menu_vars_var;
 800486e:	4b37      	ldr	r3, [pc, #220]	; (800494c <menu3_fill+0x160>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	b29a      	uxth	r2, r3
 8004876:	4b36      	ldr	r3, [pc, #216]	; (8004950 <menu3_fill+0x164>)
 8004878:	801a      	strh	r2, [r3, #0]

		if (enc_out1==enc_up) 	lcd_temp=lcd_out3;
 800487a:	4b36      	ldr	r3, [pc, #216]	; (8004954 <menu3_fill+0x168>)
 800487c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004880:	461a      	mov	r2, r3
 8004882:	89fb      	ldrh	r3, [r7, #14]
 8004884:	429a      	cmp	r2, r3
 8004886:	d104      	bne.n	8004892 <menu3_fill+0xa6>
 8004888:	4b31      	ldr	r3, [pc, #196]	; (8004950 <menu3_fill+0x164>)
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	b2da      	uxtb	r2, r3
 800488e:	4b32      	ldr	r3, [pc, #200]	; (8004958 <menu3_fill+0x16c>)
 8004890:	701a      	strb	r2, [r3, #0]

		div_limit=lcd_out3;
 8004892:	4b2f      	ldr	r3, [pc, #188]	; (8004950 <menu3_fill+0x164>)
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b2da      	uxtb	r2, r3
 8004898:	4b30      	ldr	r3, [pc, #192]	; (800495c <menu3_fill+0x170>)
 800489a:	701a      	strb	r2, [r3, #0]
			if (div_limit>9) div_limit=9;
 800489c:	4b2f      	ldr	r3, [pc, #188]	; (800495c <menu3_fill+0x170>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b09      	cmp	r3, #9
 80048a2:	d902      	bls.n	80048aa <menu3_fill+0xbe>
 80048a4:	4b2d      	ldr	r3, [pc, #180]	; (800495c <menu3_fill+0x170>)
 80048a6:	2209      	movs	r2, #9
 80048a8:	701a      	strb	r2, [r3, #0]

		/*    if (lcd_out3>10)							div_limit= lcd_out3>>2;
				if (lcd_out3>40)							div_limit= lcd_out3>>5;*/


				uint16_t crap8=menu_title_lut[enc_up];
 80048aa:	89fb      	ldrh	r3, [r7, #14]
 80048ac:	4a21      	ldr	r2, [pc, #132]	; (8004934 <menu3_fill+0x148>)
 80048ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b2:	817b      	strh	r3, [r7, #10]

				default_menu3[crap8]=div_limit+48;
 80048b4:	4b29      	ldr	r3, [pc, #164]	; (800495c <menu3_fill+0x170>)
 80048b6:	781a      	ldrb	r2, [r3, #0]
 80048b8:	897b      	ldrh	r3, [r7, #10]
 80048ba:	3230      	adds	r2, #48	; 0x30
 80048bc:	b2d1      	uxtb	r1, r2
 80048be:	4a28      	ldr	r2, [pc, #160]	; (8004960 <menu3_fill+0x174>)
 80048c0:	54d1      	strb	r1, [r2, r3]
				if (menu_vars_ref==53)  default_menu3[crap8]=lcd_out3;   // keep in char , ok
 80048c2:	4b28      	ldr	r3, [pc, #160]	; (8004964 <menu3_fill+0x178>)
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	2b35      	cmp	r3, #53	; 0x35
 80048c8:	d105      	bne.n	80048d6 <menu3_fill+0xea>
 80048ca:	4b21      	ldr	r3, [pc, #132]	; (8004950 <menu3_fill+0x164>)
 80048cc:	881a      	ldrh	r2, [r3, #0]
 80048ce:	897b      	ldrh	r3, [r7, #10]
 80048d0:	b2d1      	uxtb	r1, r2
 80048d2:	4a23      	ldr	r2, [pc, #140]	; (8004960 <menu3_fill+0x174>)
 80048d4:	54d1      	strb	r1, [r2, r3]

				if ((menu_vars_ref==24) | (menu_vars_ref==25))  default_menu3[crap8]=major_notes[lcd_out3&31];
 80048d6:	4b23      	ldr	r3, [pc, #140]	; (8004964 <menu3_fill+0x178>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b18      	cmp	r3, #24
 80048dc:	bf0c      	ite	eq
 80048de:	2301      	moveq	r3, #1
 80048e0:	2300      	movne	r3, #0
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	4b1f      	ldr	r3, [pc, #124]	; (8004964 <menu3_fill+0x178>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b19      	cmp	r3, #25
 80048ea:	bf0c      	ite	eq
 80048ec:	2301      	moveq	r3, #1
 80048ee:	2300      	movne	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	4313      	orrs	r3, r2
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d008      	beq.n	800490c <menu3_fill+0x120>
 80048fa:	4b15      	ldr	r3, [pc, #84]	; (8004950 <menu3_fill+0x164>)
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	f003 021f 	and.w	r2, r3, #31
 8004902:	897b      	ldrh	r3, [r7, #10]
 8004904:	4918      	ldr	r1, [pc, #96]	; (8004968 <menu3_fill+0x17c>)
 8004906:	5c89      	ldrb	r1, [r1, r2]
 8004908:	4a15      	ldr	r2, [pc, #84]	; (8004960 <menu3_fill+0x174>)
 800490a:	54d1      	strb	r1, [r2, r3]
				disp_up_counter++;
 800490c:	4b07      	ldr	r3, [pc, #28]	; (800492c <menu3_fill+0x140>)
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	3301      	adds	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <menu3_fill+0x140>)
 8004916:	801a      	strh	r2, [r3, #0]
				disp_up_counter=disp_up_counter&255;
 8004918:	4b04      	ldr	r3, [pc, #16]	; (800492c <menu3_fill+0x140>)
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	b29a      	uxth	r2, r3
 8004920:	4b02      	ldr	r3, [pc, #8]	; (800492c <menu3_fill+0x140>)
 8004922:	801a      	strh	r2, [r3, #0]

    }
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	2000fade 	.word	0x2000fade
 8004930:	20005295 	.word	0x20005295
 8004934:	20005298 	.word	0x20005298
 8004938:	2000042c 	.word	0x2000042c
 800493c:	2000589c 	.word	0x2000589c
 8004940:	0800cc24 	.word	0x0800cc24
 8004944:	20005698 	.word	0x20005698
 8004948:	200058a4 	.word	0x200058a4
 800494c:	20005898 	.word	0x20005898
 8004950:	20003cf8 	.word	0x20003cf8
 8004954:	20000220 	.word	0x20000220
 8004958:	200058aa 	.word	0x200058aa
 800495c:	200078d6 	.word	0x200078d6
 8004960:	20010d70 	.word	0x20010d70
 8004964:	200078d5 	.word	0x200078d5
 8004968:	0800cc4c 	.word	0x0800cc4c

0800496c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800496c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800496e:	b0a5      	sub	sp, #148	; 0x94
 8004970:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004972:	f001 fc47 	bl	8006204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004976:	f000 fbbf 	bl	80050f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800497a:	f000 ff5f 	bl	800583c <MX_GPIO_Init>
  MX_DMA_Init();
 800497e:	f000 ff1f 	bl	80057c0 <MX_DMA_Init>
  MX_ADC1_Init();
 8004982:	f000 fc23 	bl	80051cc <MX_ADC1_Init>
  MX_SPI2_Init();
 8004986:	f000 fd1b 	bl	80053c0 <MX_SPI2_Init>
  MX_TIM3_Init();
 800498a:	f000 fda3 	bl	80054d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800498e:	f000 fe23 	bl	80055d8 <MX_TIM4_Init>
  MX_I2C2_Init();
 8004992:	f000 fcb1 	bl	80052f8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8004996:	f000 fcdd 	bl	8005354 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800499a:	f000 febd 	bl	8005718 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800499e:	f000 fee5 	bl	800576c <MX_USART6_UART_Init>
  MX_TIM10_Init();
 80049a2:	f000 fe6f 	bl	8005684 <MX_TIM10_Init>
  MX_TIM2_Init();
 80049a6:	f000 fd41 	bl	800542c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

main_initial();   // initial setup
 80049aa:	f7fd f8a3 	bl	8001af4 <main_initial>
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 80049ae:	4baf      	ldr	r3, [pc, #700]	; (8004c6c <main+0x300>)
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	3301      	adds	r3, #1
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	4bad      	ldr	r3, [pc, #692]	; (8004c6c <main+0x300>)
 80049b8:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 80049ba:	4bad      	ldr	r3, [pc, #692]	; (8004c70 <main+0x304>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3301      	adds	r3, #1
 80049c0:	4aab      	ldr	r2, [pc, #684]	; (8004c70 <main+0x304>)
 80049c2:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing

			  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 80049c4:	4baa      	ldr	r3, [pc, #680]	; (8004c70 <main+0x304>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	2b06      	cmp	r3, #6
 80049ce:	d101      	bne.n	80049d4 <main+0x68>
 80049d0:	f7fc ffd8 	bl	8001984 <analoginputloopb>


		if (loop_counter2==4024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 80049d4:	4ba6      	ldr	r3, [pc, #664]	; (8004c70 <main+0x304>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f640 72b8 	movw	r2, #4024	; 0xfb8
 80049dc:	4293      	cmp	r3, r2
 80049de:	f040 8187 	bne.w	8004cf0 <main+0x384>

		    if (mem_count>510) mem_count=0; else mem_count++;
 80049e2:	4ba4      	ldr	r3, [pc, #656]	; (8004c74 <main+0x308>)
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80049ea:	d903      	bls.n	80049f4 <main+0x88>
 80049ec:	4ba1      	ldr	r3, [pc, #644]	; (8004c74 <main+0x308>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	801a      	strh	r2, [r3, #0]
 80049f2:	e005      	b.n	8004a00 <main+0x94>
 80049f4:	4b9f      	ldr	r3, [pc, #636]	; (8004c74 <main+0x308>)
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	3301      	adds	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	4b9d      	ldr	r3, [pc, #628]	; (8004c74 <main+0x308>)
 80049fe:	801a      	strh	r2, [r3, #0]
		    if (mem_count>460) mem_count=461;  // this might feedback
 8004a00:	4b9c      	ldr	r3, [pc, #624]	; (8004c74 <main+0x308>)
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8004a08:	d903      	bls.n	8004a12 <main+0xa6>
 8004a0a:	4b9a      	ldr	r3, [pc, #616]	; (8004c74 <main+0x308>)
 8004a0c:	f240 12cd 	movw	r2, #461	; 0x1cd
 8004a10:	801a      	strh	r2, [r3, #0]
		   // write to first this was moved for no logical reason ?

			  patch_target_parse(); //
 8004a12:	f7fc fdb1 	bl	8001578 <patch_target_parse>
			  uint16_t mem_count2=0;	// read values from stored
 8004a16:	2300      	movs	r3, #0
 8004a18:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76


			memcpy(potSource,&seq,46); // about 35
 8004a1c:	4a96      	ldr	r2, [pc, #600]	; (8004c78 <main+0x30c>)
 8004a1e:	4b97      	ldr	r3, [pc, #604]	; (8004c7c <main+0x310>)
 8004a20:	4614      	mov	r4, r2
 8004a22:	461d      	mov	r5, r3
 8004a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a2c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004a30:	c407      	stmia	r4!, {r0, r1, r2}
 8004a32:	8023      	strh	r3, [r4, #0]

			for(i=0;i<10;i++){
 8004a34:	4b92      	ldr	r3, [pc, #584]	; (8004c80 <main+0x314>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	801a      	strh	r2, [r3, #0]
 8004a3a:	e0a2      	b.n	8004b82 <main+0x216>
					memcpy(potSource+156+(i*14),&note[i],14 );  //grab note settings ,112 total , works
 8004a3c:	4b90      	ldr	r3, [pc, #576]	; (8004c80 <main+0x314>)
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	4613      	mov	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	339c      	adds	r3, #156	; 0x9c
 8004a4c:	4a8a      	ldr	r2, [pc, #552]	; (8004c78 <main+0x30c>)
 8004a4e:	1898      	adds	r0, r3, r2
 8004a50:	4b8b      	ldr	r3, [pc, #556]	; (8004c80 <main+0x314>)
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	4613      	mov	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	4a89      	ldr	r2, [pc, #548]	; (8004c84 <main+0x318>)
 8004a60:	4413      	add	r3, r2
 8004a62:	220e      	movs	r2, #14
 8004a64:	4619      	mov	r1, r3
 8004a66:	f007 fc3b 	bl	800c2e0 <memcpy>

				memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 8004a6a:	4b85      	ldr	r3, [pc, #532]	; (8004c80 <main+0x314>)
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	4613      	mov	r3, r2
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	4413      	add	r3, r2
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	332e      	adds	r3, #46	; 0x2e
 8004a7a:	4a7f      	ldr	r2, [pc, #508]	; (8004c78 <main+0x30c>)
 8004a7c:	1898      	adds	r0, r3, r2
 8004a7e:	4b80      	ldr	r3, [pc, #512]	; (8004c80 <main+0x314>)
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	4613      	mov	r3, r2
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4a7e      	ldr	r2, [pc, #504]	; (8004c88 <main+0x31c>)
 8004a8e:	4413      	add	r3, r2
 8004a90:	2206      	movs	r2, #6
 8004a92:	4619      	mov	r1, r3
 8004a94:	f007 fc24 	bl	800c2e0 <memcpy>
				memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 8004a98:	4b79      	ldr	r3, [pc, #484]	; (8004c80 <main+0x314>)
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	336a      	adds	r3, #106	; 0x6a
 8004aa6:	4a74      	ldr	r2, [pc, #464]	; (8004c78 <main+0x30c>)
 8004aa8:	1898      	adds	r0, r3, r2
 8004aaa:	4b75      	ldr	r3, [pc, #468]	; (8004c80 <main+0x314>)
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8004ab4:	fb02 f303 	mul.w	r3, r2, r3
 8004ab8:	4a74      	ldr	r2, [pc, #464]	; (8004c8c <main+0x320>)
 8004aba:	4413      	add	r3, r2
 8004abc:	2205      	movs	r2, #5
 8004abe:	4619      	mov	r1, r3
 8004ac0:	f007 fc0e 	bl	800c2e0 <memcpy>
				memcpy(potSource+316+(i*3),&patch[i],3 );
 8004ac4:	4b6e      	ldr	r3, [pc, #440]	; (8004c80 <main+0x314>)
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	4613      	mov	r3, r2
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004ad4:	4a68      	ldr	r2, [pc, #416]	; (8004c78 <main+0x30c>)
 8004ad6:	1898      	adds	r0, r3, r2
 8004ad8:	4b69      	ldr	r3, [pc, #420]	; (8004c80 <main+0x314>)
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	461a      	mov	r2, r3
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	4a6a      	ldr	r2, [pc, #424]	; (8004c90 <main+0x324>)
 8004ae8:	4413      	add	r3, r2
 8004aea:	2203      	movs	r2, #3
 8004aec:	4619      	mov	r1, r3
 8004aee:	f007 fbf7 	bl	800c2e0 <memcpy>
				memcpy(potSource+346+(i*3),&patch[i+10],3 );
 8004af2:	4b63      	ldr	r3, [pc, #396]	; (8004c80 <main+0x314>)
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	4613      	mov	r3, r2
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 73ad 	add.w	r3, r3, #346	; 0x15a
 8004b02:	4a5d      	ldr	r2, [pc, #372]	; (8004c78 <main+0x30c>)
 8004b04:	1898      	adds	r0, r3, r2
 8004b06:	4b5e      	ldr	r3, [pc, #376]	; (8004c80 <main+0x314>)
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	f103 020a 	add.w	r2, r3, #10
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	4a5e      	ldr	r2, [pc, #376]	; (8004c90 <main+0x324>)
 8004b18:	4413      	add	r3, r2
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	f007 fbdf 	bl	800c2e0 <memcpy>
				memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 8004b22:	4b57      	ldr	r3, [pc, #348]	; (8004c80 <main+0x314>)
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	461a      	mov	r2, r3
 8004b28:	4613      	mov	r3, r2
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	4413      	add	r3, r2
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004b34:	4a50      	ldr	r2, [pc, #320]	; (8004c78 <main+0x30c>)
 8004b36:	1898      	adds	r0, r3, r2
 8004b38:	4b51      	ldr	r3, [pc, #324]	; (8004c80 <main+0x314>)
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4613      	mov	r3, r2
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	4413      	add	r3, r2
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	4a53      	ldr	r2, [pc, #332]	; (8004c94 <main+0x328>)
 8004b48:	4413      	add	r3, r2
 8004b4a:	2206      	movs	r2, #6
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	f007 fbc7 	bl	800c2e0 <memcpy>
				memcpy(potSource+436+(i*4),&LFO_square[i],4 );
 8004b52:	4b4b      	ldr	r3, [pc, #300]	; (8004c80 <main+0x314>)
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8004b5c:	4a46      	ldr	r2, [pc, #280]	; (8004c78 <main+0x30c>)
 8004b5e:	441a      	add	r2, r3
 8004b60:	4b47      	ldr	r3, [pc, #284]	; (8004c80 <main+0x314>)
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	4619      	mov	r1, r3
 8004b66:	460b      	mov	r3, r1
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	494a      	ldr	r1, [pc, #296]	; (8004c98 <main+0x32c>)
 8004b70:	440b      	add	r3, r1
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6013      	str	r3, [r2, #0]
			for(i=0;i<10;i++){
 8004b76:	4b42      	ldr	r3, [pc, #264]	; (8004c80 <main+0x314>)
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	4b40      	ldr	r3, [pc, #256]	; (8004c80 <main+0x314>)
 8004b80:	801a      	strh	r2, [r3, #0]
 8004b82:	4b3f      	ldr	r3, [pc, #252]	; (8004c80 <main+0x314>)
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	2b09      	cmp	r3, #9
 8004b88:	f67f af58 	bls.w	8004a3c <main+0xd0>
			}	// copy vars into potSource

			//HAL_UART_Transmit(&huart1,serial_send,4, 100);  //send serial again

			mem_count2=0;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			//	mem_buf=0;
					// mem_verify=0;

					// for patch write start at 2048 for now
			 uint8_t mem_buf_list[50]={0};
 8004b92:	2300      	movs	r3, #0
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	1d3b      	adds	r3, r7, #4
 8004b98:	222e      	movs	r2, #46	; 0x2e
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f007 fbad 	bl	800c2fc <memset>
			 uint8_t mem_verify_list[50]={0};
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ba6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004baa:	222e      	movs	r2, #46	; 0x2e
 8004bac:	2100      	movs	r1, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f007 fba4 	bl	800c2fc <memset>
			 uint8_t read_counter=0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			//  --   compare 50 bytes
			 memcpy(&mem_buf_list, potSource+mem_count,50);  // copy 50 from potsource
 8004bba:	4b2e      	ldr	r3, [pc, #184]	; (8004c74 <main+0x308>)
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	4b2d      	ldr	r3, [pc, #180]	; (8004c78 <main+0x30c>)
 8004bc2:	4413      	add	r3, r2
 8004bc4:	461c      	mov	r4, r3
 8004bc6:	463e      	mov	r6, r7
 8004bc8:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8004bcc:	4635      	mov	r5, r6
 8004bce:	4623      	mov	r3, r4
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	6859      	ldr	r1, [r3, #4]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bda:	3410      	adds	r4, #16
 8004bdc:	3610      	adds	r6, #16
 8004bde:	4564      	cmp	r4, ip
 8004be0:	d1f4      	bne.n	8004bcc <main+0x260>
 8004be2:	4632      	mov	r2, r6
 8004be4:	4623      	mov	r3, r4
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	8013      	strh	r3, [r2, #0]
			 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 8004bea:	4b22      	ldr	r3, [pc, #136]	; (8004c74 <main+0x308>)
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	099b      	lsrs	r3, r3, #6
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	019b      	lsls	r3, r3, #6
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	4b1e      	ldr	r3, [pc, #120]	; (8004c74 <main+0x308>)
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	4413      	add	r3, r2
 8004c06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,mem_verify_list, 50,100);    // reading is quick , 50 bytse
 8004c0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004c0e:	2364      	movs	r3, #100	; 0x64
 8004c10:	9302      	str	r3, [sp, #8]
 8004c12:	2332      	movs	r3, #50	; 0x32
 8004c14:	9301      	str	r3, [sp, #4]
 8004c16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	21a0      	movs	r1, #160	; 0xa0
 8004c20:	481e      	ldr	r0, [pc, #120]	; (8004c9c <main+0x330>)
 8004c22:	f003 fcdb 	bl	80085dc <HAL_I2C_Mem_Read>
			 for (read_counter=0;read_counter<50;read_counter++){
 8004c26:	2300      	movs	r3, #0
 8004c28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004c2c:	e018      	b.n	8004c60 <main+0x2f4>

			     if (mem_verify_list[read_counter]!=mem_buf_list[read_counter])  { break;}  // exit if found difference
 8004c2e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004c32:	3380      	adds	r3, #128	; 0x80
 8004c34:	443b      	add	r3, r7
 8004c36:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8004c3a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004c3e:	3380      	adds	r3, #128	; 0x80
 8004c40:	443b      	add	r3, r7
 8004c42:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d12a      	bne.n	8004ca0 <main+0x334>
			     mem_count++;
 8004c4a:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <main+0x308>)
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <main+0x308>)
 8004c54:	801a      	strh	r2, [r3, #0]
			 for (read_counter=0;read_counter<50;read_counter++){
 8004c56:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004c60:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004c64:	2b31      	cmp	r3, #49	; 0x31
 8004c66:	d9e2      	bls.n	8004c2e <main+0x2c2>
 8004c68:	e01b      	b.n	8004ca2 <main+0x336>
 8004c6a:	bf00      	nop
 8004c6c:	20000b02 	.word	0x20000b02
 8004c70:	2000335c 	.word	0x2000335c
 8004c74:	2000335a 	.word	0x2000335a
 8004c78:	2000089c 	.word	0x2000089c
 8004c7c:	20004f40 	.word	0x20004f40
 8004c80:	20000b06 	.word	0x20000b06
 8004c84:	20000158 	.word	0x20000158
 8004c88:	20004108 	.word	0x20004108
 8004c8c:	200044b4 	.word	0x200044b4
 8004c90:	20004f70 	.word	0x20004f70
 8004c94:	200043b0 	.word	0x200043b0
 8004c98:	200043ec 	.word	0x200043ec
 8004c9c:	20011218 	.word	0x20011218
			     if (mem_verify_list[read_counter]!=mem_buf_list[read_counter])  { break;}  // exit if found difference
 8004ca0:	bf00      	nop

			 }
						 // ----- write changed data , might shift these off by one after a while to stop wear
						 mem_buf=potSource[mem_count];
 8004ca2:	4b66      	ldr	r3, [pc, #408]	; (8004e3c <main+0x4d0>)
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	4b65      	ldr	r3, [pc, #404]	; (8004e40 <main+0x4d4>)
 8004caa:	5c9a      	ldrb	r2, [r3, r2]
 8004cac:	4b65      	ldr	r3, [pc, #404]	; (8004e44 <main+0x4d8>)
 8004cae:	701a      	strb	r2, [r3, #0]
						 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 8004cb0:	4b62      	ldr	r3, [pc, #392]	; (8004e3c <main+0x4d0>)
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	099b      	lsrs	r3, r3, #6
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	3301      	adds	r3, #1
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	019b      	lsls	r3, r3, #6
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	4b5e      	ldr	r3, [pc, #376]	; (8004e3c <main+0x4d0>)
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	4413      	add	r3, r2
 8004ccc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

						HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);   // write changed
 8004cd0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004cd4:	2364      	movs	r3, #100	; 0x64
 8004cd6:	9302      	str	r3, [sp, #8]
 8004cd8:	2301      	movs	r3, #1
 8004cda:	9301      	str	r3, [sp, #4]
 8004cdc:	4b59      	ldr	r3, [pc, #356]	; (8004e44 <main+0x4d8>)
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	21a0      	movs	r1, #160	; 0xa0
 8004ce4:	4858      	ldr	r0, [pc, #352]	; (8004e48 <main+0x4dc>)
 8004ce6:	f003 fb7f 	bl	80083e8 <HAL_I2C_Mem_Write>



		//if (mem_buf!=mem_verify)	 mem_errors++;  // check writes

		loop_counter2=0; //reset
 8004cea:	4b58      	ldr	r3, [pc, #352]	; (8004e4c <main+0x4e0>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]

		}


	if (serial_tosend){    // send on seq change
 8004cf0:	4b57      	ldr	r3, [pc, #348]	; (8004e50 <main+0x4e4>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 8093 	beq.w	8004e20 <main+0x4b4>
		uint16_t mem_counter=0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
		  memcpy(serial_source,&seq,36); // copy bits
 8004d00:	2224      	movs	r2, #36	; 0x24
 8004d02:	4954      	ldr	r1, [pc, #336]	; (8004e54 <main+0x4e8>)
 8004d04:	4854      	ldr	r0, [pc, #336]	; (8004e58 <main+0x4ec>)
 8004d06:	f007 faeb 	bl	800c2e0 <memcpy>

		  memcpy(serial_source+96,potSource+252,64 );  // 4 * 16
 8004d0a:	4b54      	ldr	r3, [pc, #336]	; (8004e5c <main+0x4f0>)
 8004d0c:	4954      	ldr	r1, [pc, #336]	; (8004e60 <main+0x4f4>)
 8004d0e:	2240      	movs	r2, #64	; 0x40
 8004d10:	4618      	mov	r0, r3
 8004d12:	f007 fae5 	bl	800c2e0 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 8004d16:	2300      	movs	r3, #0
 8004d18:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8004d1c:	e032      	b.n	8004d84 <main+0x418>
			  if (mem_counter<4)memcpy(serial_source+96+(mem_counter*7),&note[mem_counter+6],7 );
 8004d1e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d814      	bhi.n	8004d50 <main+0x3e4>
 8004d26:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	3360      	adds	r3, #96	; 0x60
 8004d32:	4a49      	ldr	r2, [pc, #292]	; (8004e58 <main+0x4ec>)
 8004d34:	1898      	adds	r0, r3, r2
 8004d36:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8004d3a:	1d9a      	adds	r2, r3, #6
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	4a47      	ldr	r2, [pc, #284]	; (8004e64 <main+0x4f8>)
 8004d46:	4413      	add	r3, r2
 8004d48:	2207      	movs	r2, #7
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	f007 fac8 	bl	800c2e0 <memcpy>
						memcpy(serial_source+36+(mem_counter*6),&LFO_slave1[mem_counter],6 );  // insert lfo settings
 8004d50:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8004d54:	4613      	mov	r3, r2
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	4413      	add	r3, r2
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	3324      	adds	r3, #36	; 0x24
 8004d5e:	4a3e      	ldr	r2, [pc, #248]	; (8004e58 <main+0x4ec>)
 8004d60:	1898      	adds	r0, r3, r2
 8004d62:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8004d66:	4613      	mov	r3, r2
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	4413      	add	r3, r2
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	4a3e      	ldr	r2, [pc, #248]	; (8004e68 <main+0x4fc>)
 8004d70:	4413      	add	r3, r2
 8004d72:	2206      	movs	r2, #6
 8004d74:	4619      	mov	r1, r3
 8004d76:	f007 fab3 	bl	800c2e0 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 8004d7a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8004d7e:	3301      	adds	r3, #1
 8004d80:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8004d84:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8004d88:	2b09      	cmp	r3, #9
 8004d8a:	d9c8      	bls.n	8004d1e <main+0x3b2>
				  }

		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 8004d8c:	e005      	b.n	8004d9a <main+0x42e>
			  serial_up++;
 8004d8e:	4b37      	ldr	r3, [pc, #220]	; (8004e6c <main+0x500>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	3301      	adds	r3, #1
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	4b35      	ldr	r3, [pc, #212]	; (8004e6c <main+0x500>)
 8004d98:	701a      	strb	r2, [r3, #0]
		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 8004d9a:	4b34      	ldr	r3, [pc, #208]	; (8004e6c <main+0x500>)
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4b33      	ldr	r3, [pc, #204]	; (8004e70 <main+0x504>)
 8004da2:	5c9a      	ldrb	r2, [r3, r2]
 8004da4:	4b31      	ldr	r3, [pc, #196]	; (8004e6c <main+0x500>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	4619      	mov	r1, r3
 8004daa:	4b2b      	ldr	r3, [pc, #172]	; (8004e58 <main+0x4ec>)
 8004dac:	5c5b      	ldrb	r3, [r3, r1]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d103      	bne.n	8004dba <main+0x44e>
 8004db2:	4b2e      	ldr	r3, [pc, #184]	; (8004e6c <main+0x500>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2ba0      	cmp	r3, #160	; 0xa0
 8004db8:	d9e9      	bls.n	8004d8e <main+0x422>
		  }

		  serial_send[6]=0;
 8004dba:	4b2e      	ldr	r3, [pc, #184]	; (8004e74 <main+0x508>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	719a      	strb	r2, [r3, #6]
		  serial_send[7]=seq.pos;  // chase
 8004dc0:	4b24      	ldr	r3, [pc, #144]	; (8004e54 <main+0x4e8>)
 8004dc2:	781a      	ldrb	r2, [r3, #0]
 8004dc4:	4b2b      	ldr	r3, [pc, #172]	; (8004e74 <main+0x508>)
 8004dc6:	71da      	strb	r2, [r3, #7]
		  serial_send[2]=serial_up;
 8004dc8:	4b28      	ldr	r3, [pc, #160]	; (8004e6c <main+0x500>)
 8004dca:	781a      	ldrb	r2, [r3, #0]
 8004dcc:	4b29      	ldr	r3, [pc, #164]	; (8004e74 <main+0x508>)
 8004dce:	709a      	strb	r2, [r3, #2]
		  serial_send[3]=serial_source[serial_up];
 8004dd0:	4b26      	ldr	r3, [pc, #152]	; (8004e6c <main+0x500>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4b20      	ldr	r3, [pc, #128]	; (8004e58 <main+0x4ec>)
 8004dd8:	5c9a      	ldrb	r2, [r3, r2]
 8004dda:	4b26      	ldr	r3, [pc, #152]	; (8004e74 <main+0x508>)
 8004ddc:	70da      	strb	r2, [r3, #3]
		  serial_source_temp[serial_up]=serial_source[serial_up];
 8004dde:	4b23      	ldr	r3, [pc, #140]	; (8004e6c <main+0x500>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	4619      	mov	r1, r3
 8004de4:	4b21      	ldr	r3, [pc, #132]	; (8004e6c <main+0x500>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	461a      	mov	r2, r3
 8004dea:	4b1b      	ldr	r3, [pc, #108]	; (8004e58 <main+0x4ec>)
 8004dec:	5c59      	ldrb	r1, [r3, r1]
 8004dee:	4b20      	ldr	r3, [pc, #128]	; (8004e70 <main+0x504>)
 8004df0:	5499      	strb	r1, [r3, r2]
		  if (serial_up>161) serial_up=0; else serial_up++;
 8004df2:	4b1e      	ldr	r3, [pc, #120]	; (8004e6c <main+0x500>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2ba1      	cmp	r3, #161	; 0xa1
 8004df8:	d903      	bls.n	8004e02 <main+0x496>
 8004dfa:	4b1c      	ldr	r3, [pc, #112]	; (8004e6c <main+0x500>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	e005      	b.n	8004e0e <main+0x4a2>
 8004e02:	4b1a      	ldr	r3, [pc, #104]	; (8004e6c <main+0x500>)
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	3301      	adds	r3, #1
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <main+0x500>)
 8004e0c:	701a      	strb	r2, [r3, #0]

		  HAL_UART_Transmit(&huart1,serial_send,8, 100);  //send serial
 8004e0e:	2364      	movs	r3, #100	; 0x64
 8004e10:	2208      	movs	r2, #8
 8004e12:	4918      	ldr	r1, [pc, #96]	; (8004e74 <main+0x508>)
 8004e14:	4818      	ldr	r0, [pc, #96]	; (8004e78 <main+0x50c>)
 8004e16:	f006 fe7c 	bl	800bb12 <HAL_UART_Transmit>
		  serial_tosend=0;
 8004e1a:	4b0d      	ldr	r3, [pc, #52]	; (8004e50 <main+0x4e4>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	701a      	strb	r2, [r3, #0]
	}

		if (disp_end==1)	  {display_generate();}      // run this after gfx draw page finish
 8004e20:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <main+0x510>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <main+0x4c0>
 8004e28:	f7ff fb1c 	bl	8004464 <display_generate>

		if (init<6)				// after 6 its done for good   // no freeze here
 8004e2c:	4b14      	ldr	r3, [pc, #80]	; (8004e80 <main+0x514>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b05      	cmp	r3, #5
 8004e32:	d841      	bhi.n	8004eb8 <main+0x54c>
		{
			for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8004e34:	4b13      	ldr	r3, [pc, #76]	; (8004e84 <main+0x518>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	801a      	strh	r2, [r3, #0]
 8004e3a:	e02d      	b.n	8004e98 <main+0x52c>
 8004e3c:	2000335a 	.word	0x2000335a
 8004e40:	2000089c 	.word	0x2000089c
 8004e44:	20003360 	.word	0x20003360
 8004e48:	20011218 	.word	0x20011218
 8004e4c:	2000335c 	.word	0x2000335c
 8004e50:	20007ad9 	.word	0x20007ad9
 8004e54:	20004f40 	.word	0x20004f40
 8004e58:	200078d8 	.word	0x200078d8
 8004e5c:	20007938 	.word	0x20007938
 8004e60:	20000998 	.word	0x20000998
 8004e64:	20000158 	.word	0x20000158
 8004e68:	200043b0 	.word	0x200043b0
 8004e6c:	20007ad8 	.word	0x20007ad8
 8004e70:	200079d8 	.word	0x200079d8
 8004e74:	20000224 	.word	0x20000224
 8004e78:	200114fc 	.word	0x200114fc
 8004e7c:	20003cfa 	.word	0x20003cfa
 8004e80:	2000334f 	.word	0x2000334f
 8004e84:	20000b06 	.word	0x20000b06
 8004e88:	f7ff f9da 	bl	8004240 <display_init>
 8004e8c:	4b88      	ldr	r3, [pc, #544]	; (80050b0 <main+0x744>)
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	3301      	adds	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	4b86      	ldr	r3, [pc, #536]	; (80050b0 <main+0x744>)
 8004e96:	801a      	strh	r2, [r3, #0]
 8004e98:	4b85      	ldr	r3, [pc, #532]	; (80050b0 <main+0x744>)
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	2b05      	cmp	r3, #5
 8004e9e:	d9f3      	bls.n	8004e88 <main+0x51c>

		if (init==6)  {HAL_TIM_Base_Start_IT(&htim10);HAL_TIM_Base_Start(&htim10);	 gfx_TX_block(); 				}
 8004ea0:	4b84      	ldr	r3, [pc, #528]	; (80050b4 <main+0x748>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b06      	cmp	r3, #6
 8004ea6:	d107      	bne.n	8004eb8 <main+0x54c>
 8004ea8:	4883      	ldr	r0, [pc, #524]	; (80050b8 <main+0x74c>)
 8004eaa:	f005 fd0f 	bl	800a8cc <HAL_TIM_Base_Start_IT>
 8004eae:	4882      	ldr	r0, [pc, #520]	; (80050b8 <main+0x74c>)
 8004eb0:	f005 fcb2 	bl	800a818 <HAL_TIM_Base_Start>
 8004eb4:	f7ff fa1a 	bl	80042ec <gfx_TX_block>
		}

		if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 8004eb8:	4b7e      	ldr	r3, [pc, #504]	; (80050b4 <main+0x748>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b05      	cmp	r3, #5
 8004ebe:	d903      	bls.n	8004ec8 <main+0x55c>


		    //full page in mem for spi

		    //  little too fast
			 menu3_fill();encoder2();
 8004ec0:	f7ff fc94 	bl	80047ec <menu3_fill>
 8004ec4:	f7ff fbb0 	bl	8004628 <encoder2>
		}


		if (loop_counter2==4000){ // grab adc readings + 3ms , 32 step  // no freeze
 8004ec8:	4b7c      	ldr	r3, [pc, #496]	; (80050bc <main+0x750>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004ed0:	d144      	bne.n	8004f5c <main+0x5f0>



			//HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

			HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 8004ed2:	487b      	ldr	r0, [pc, #492]	; (80050c0 <main+0x754>)
 8004ed4:	f001 ffb4 	bl	8006e40 <HAL_ADCEx_InjectedStart>
			uint16_t adc_temp1[4]={0,0,0,0};
 8004ed8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	605a      	str	r2, [r3, #4]

			HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	4876      	ldr	r0, [pc, #472]	; (80050c0 <main+0x754>)
 8004ee6:	f001 fb1b 	bl	8006520 <HAL_ADC_PollForConversion>

			adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8004eea:	2101      	movs	r1, #1
 8004eec:	4874      	ldr	r0, [pc, #464]	; (80050c0 <main+0x754>)
 8004eee:	f002 f8bd 	bl	800706c <HAL_ADCEx_InjectedGetValue>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
			adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8004efa:	2102      	movs	r1, #2
 8004efc:	4870      	ldr	r0, [pc, #448]	; (80050c0 <main+0x754>)
 8004efe:	f002 f8b5 	bl	800706c <HAL_ADCEx_InjectedGetValue>
 8004f02:	4603      	mov	r3, r0
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8004f0a:	2103      	movs	r1, #3
 8004f0c:	486c      	ldr	r0, [pc, #432]	; (80050c0 <main+0x754>)
 8004f0e:	f002 f8ad 	bl	800706c <HAL_ADCEx_InjectedGetValue>
 8004f12:	4603      	mov	r3, r0
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			HAL_ADCEx_InjectedStop(&hadc1) ;
 8004f1a:	4869      	ldr	r0, [pc, #420]	; (80050c0 <main+0x754>)
 8004f1c:	f002 f85a 	bl	8006fd4 <HAL_ADCEx_InjectedStop>
			//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
			adc_values[0]=	31- ( adc_temp1[0]>>7);
 8004f20:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004f24:	09db      	lsrs	r3, r3, #7
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f1c3 031f 	rsb	r3, r3, #31
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	4b65      	ldr	r3, [pc, #404]	; (80050c4 <main+0x758>)
 8004f30:	801a      	strh	r2, [r3, #0]
			adc_values[1]=	 31-( adc_temp1[1]>>7);
 8004f32:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004f36:	09db      	lsrs	r3, r3, #7
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f1c3 031f 	rsb	r3, r3, #31
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	4b60      	ldr	r3, [pc, #384]	; (80050c4 <main+0x758>)
 8004f42:	805a      	strh	r2, [r3, #2]
			adc_values[2]=	 31-( adc_temp1[2]>>7);
 8004f44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004f48:	09db      	lsrs	r3, r3, #7
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f1c3 031f 	rsb	r3, r3, #31
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	4b5c      	ldr	r3, [pc, #368]	; (80050c4 <main+0x758>)
 8004f54:	809a      	strh	r2, [r3, #4]
			//  adc_values[2]=	  adc_temp1[2]>>7;

			loop_counter=0;
 8004f56:	4b5c      	ldr	r3, [pc, #368]	; (80050c8 <main+0x75c>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	701a      	strb	r2, [r3, #0]
		}

		if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8004f5c:	4b5b      	ldr	r3, [pc, #364]	; (80050cc <main+0x760>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b07      	cmp	r3, #7
 8004f62:	d106      	bne.n	8004f72 <main+0x606>
 8004f64:	4b5a      	ldr	r3, [pc, #360]	; (80050d0 <main+0x764>)
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d102      	bne.n	8004f72 <main+0x606>
 8004f6c:	4b58      	ldr	r3, [pc, #352]	; (80050d0 <main+0x764>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 8004f72:	4b56      	ldr	r3, [pc, #344]	; (80050cc <main+0x760>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f82:	4854      	ldr	r0, [pc, #336]	; (80050d4 <main+0x768>)
 8004f84:	f003 f8ba 	bl	80080fc <HAL_GPIO_WritePin>
	//	adc_flag=0;
		if (adc_flag) {     //  only for sending out  , poor quality
 8004f88:	4b53      	ldr	r3, [pc, #332]	; (80050d8 <main+0x76c>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d060      	beq.n	8005052 <main+0x6e6>


			uint16_t    adc_page=0; ;
 8004f90:	2300      	movs	r3, #0
 8004f92:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			if		(adc_flag==1)	  	{	adc_page=0;			}	//dma start ,needs this and adc start ,set sampling time
 8004f96:	4b50      	ldr	r3, [pc, #320]	; (80050d8 <main+0x76c>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d102      	bne.n	8004fa4 <main+0x638>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			if		(adc_flag==2)	  	{	adc_page=1536;  }
 8004fa4:	4b4c      	ldr	r3, [pc, #304]	; (80050d8 <main+0x76c>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d103      	bne.n	8004fb4 <main+0x648>
 8004fac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004fb0:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a


			uint16_t    adc_convert_count;
			uint16_t    adc_convert_temp;
			for (i=0;i<512;i++){
 8004fb4:	4b3e      	ldr	r3, [pc, #248]	; (80050b0 <main+0x744>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	801a      	strh	r2, [r3, #0]
 8004fba:	e033      	b.n	8005024 <main+0x6b8>
				adc_convert_count=(i*3)+adc_page;
 8004fbc:	4b3c      	ldr	r3, [pc, #240]	; (80050b0 <main+0x744>)
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	0052      	lsls	r2, r2, #1
 8004fc4:	4413      	add	r3, r2
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8004fcc:	4413      	add	r3, r2
 8004fce:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

				adc_convert_temp=adc_source[adc_convert_count]+adc_source[adc_convert_count+1]+adc_source[adc_convert_count+2];
 8004fd2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8004fd6:	4a41      	ldr	r2, [pc, #260]	; (80050dc <main+0x770>)
 8004fd8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004fdc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	493e      	ldr	r1, [pc, #248]	; (80050dc <main+0x770>)
 8004fe4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004fe8:	4413      	add	r3, r2
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8004ff0:	3302      	adds	r3, #2
 8004ff2:	493a      	ldr	r1, [pc, #232]	; (80050dc <main+0x770>)
 8004ff4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
				input_holder[i]=adc_convert_temp/3;
 8004ffe:	4b2c      	ldr	r3, [pc, #176]	; (80050b0 <main+0x744>)
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	4619      	mov	r1, r3
 8005004:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8005008:	4a35      	ldr	r2, [pc, #212]	; (80050e0 <main+0x774>)
 800500a:	fba2 2303 	umull	r2, r3, r2, r3
 800500e:	085b      	lsrs	r3, r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	4b34      	ldr	r3, [pc, #208]	; (80050e4 <main+0x778>)
 8005014:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			for (i=0;i<512;i++){
 8005018:	4b25      	ldr	r3, [pc, #148]	; (80050b0 <main+0x744>)
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	3301      	adds	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	4b23      	ldr	r3, [pc, #140]	; (80050b0 <main+0x744>)
 8005022:	801a      	strh	r2, [r3, #0]
 8005024:	4b22      	ldr	r3, [pc, #136]	; (80050b0 <main+0x744>)
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800502c:	d3c6      	bcc.n	8004fbc <main+0x650>
				//	input_holder[i]=adc_source[(i*3)+adc_page];

			}
			if (sampler.record_enable)  {sampler_ram_record(); sampler.start_MSB=0; sampler.start_LSB=0;sampler.end_MSB=63;}
 800502e:	4b2e      	ldr	r3, [pc, #184]	; (80050e8 <main+0x77c>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <main+0x6e0>
 8005036:	f7fc f989 	bl	800134c <sampler_ram_record>
 800503a:	4b2b      	ldr	r3, [pc, #172]	; (80050e8 <main+0x77c>)
 800503c:	2200      	movs	r2, #0
 800503e:	739a      	strb	r2, [r3, #14]
 8005040:	4b29      	ldr	r3, [pc, #164]	; (80050e8 <main+0x77c>)
 8005042:	2200      	movs	r2, #0
 8005044:	73da      	strb	r2, [r3, #15]
 8005046:	4b28      	ldr	r3, [pc, #160]	; (80050e8 <main+0x77c>)
 8005048:	223f      	movs	r2, #63	; 0x3f
 800504a:	741a      	strb	r2, [r3, #16]

			adc_flag=0;
 800504c:	4b22      	ldr	r3, [pc, #136]	; (80050d8 <main+0x76c>)
 800504e:	2200      	movs	r2, #0
 8005050:	701a      	strb	r2, [r3, #0]
		}


		if ((sample_point>512)&&( sample_pointD==512)) bank_write=1;
 8005052:	4b26      	ldr	r3, [pc, #152]	; (80050ec <main+0x780>)
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800505c:	d923      	bls.n	80050a6 <main+0x73a>
 800505e:	4b24      	ldr	r3, [pc, #144]	; (80050f0 <main+0x784>)
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005066:	d11e      	bne.n	80050a6 <main+0x73a>
 8005068:	4b22      	ldr	r3, [pc, #136]	; (80050f4 <main+0x788>)
 800506a:	2201      	movs	r2, #1
 800506c:	801a      	strh	r2, [r3, #0]
		while  (bank_write)                         {							// wait for adc , priority
 800506e:	e01a      	b.n	80050a6 <main+0x73a>

			sampling();
 8005070:	f7fd f886 	bl	8002180 <sampling>

			uint8_t up_counter2=0;
 8005074:	2300      	movs	r3, #0
 8005076:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			while ((up_counter2<8) && (init > 5) )								{
 800507a:	e00c      	b.n	8005096 <main+0x72a>

			gfx_line_fill();   // just run 8 times between sampling , dont need more
 800507c:	f7ff fa04 	bl	8004488 <gfx_line_fill>
			up_counter2++;
 8005080:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8005084:	3301      	adds	r3, #1
 8005086:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			loop_counter++;
 800508a:	4b0f      	ldr	r3, [pc, #60]	; (80050c8 <main+0x75c>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	3301      	adds	r3, #1
 8005090:	b2da      	uxtb	r2, r3
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <main+0x75c>)
 8005094:	701a      	strb	r2, [r3, #0]
			while ((up_counter2<8) && (init > 5) )								{
 8005096:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800509a:	2b07      	cmp	r3, #7
 800509c:	d803      	bhi.n	80050a6 <main+0x73a>
 800509e:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <main+0x748>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b05      	cmp	r3, #5
 80050a4:	d8ea      	bhi.n	800507c <main+0x710>
		while  (bank_write)                         {							// wait for adc , priority
 80050a6:	4b13      	ldr	r3, [pc, #76]	; (80050f4 <main+0x788>)
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1e0      	bne.n	8005070 <main+0x704>
	  loop_counter++ ;
 80050ae:	e47e      	b.n	80049ae <main+0x42>
 80050b0:	20000b06 	.word	0x20000b06
 80050b4:	2000334f 	.word	0x2000334f
 80050b8:	200114b4 	.word	0x200114b4
 80050bc:	2000335c 	.word	0x2000335c
 80050c0:	20011170 	.word	0x20011170
 80050c4:	20000144 	.word	0x20000144
 80050c8:	20000b02 	.word	0x20000b02
 80050cc:	20004f40 	.word	0x20004f40
 80050d0:	20003346 	.word	0x20003346
 80050d4:	40020800 	.word	0x40020800
 80050d8:	200040fc 	.word	0x200040fc
 80050dc:	20001b18 	.word	0x20001b18
 80050e0:	aaaaaaab 	.word	0xaaaaaaab
 80050e4:	20003cfc 	.word	0x20003cfc
 80050e8:	20000204 	.word	0x20000204
 80050ec:	20001b0c 	.word	0x20001b0c
 80050f0:	20001b12 	.word	0x20001b12
 80050f4:	2000014e 	.word	0x2000014e

080050f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b094      	sub	sp, #80	; 0x50
 80050fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050fe:	f107 0320 	add.w	r3, r7, #32
 8005102:	2230      	movs	r2, #48	; 0x30
 8005104:	2100      	movs	r1, #0
 8005106:	4618      	mov	r0, r3
 8005108:	f007 f8f8 	bl	800c2fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800510c:	f107 030c 	add.w	r3, r7, #12
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	605a      	str	r2, [r3, #4]
 8005116:	609a      	str	r2, [r3, #8]
 8005118:	60da      	str	r2, [r3, #12]
 800511a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800511c:	2300      	movs	r3, #0
 800511e:	60bb      	str	r3, [r7, #8]
 8005120:	4b28      	ldr	r3, [pc, #160]	; (80051c4 <SystemClock_Config+0xcc>)
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	4a27      	ldr	r2, [pc, #156]	; (80051c4 <SystemClock_Config+0xcc>)
 8005126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800512a:	6413      	str	r3, [r2, #64]	; 0x40
 800512c:	4b25      	ldr	r3, [pc, #148]	; (80051c4 <SystemClock_Config+0xcc>)
 800512e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005134:	60bb      	str	r3, [r7, #8]
 8005136:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005138:	2300      	movs	r3, #0
 800513a:	607b      	str	r3, [r7, #4]
 800513c:	4b22      	ldr	r3, [pc, #136]	; (80051c8 <SystemClock_Config+0xd0>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a21      	ldr	r2, [pc, #132]	; (80051c8 <SystemClock_Config+0xd0>)
 8005142:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005146:	6013      	str	r3, [r2, #0]
 8005148:	4b1f      	ldr	r3, [pc, #124]	; (80051c8 <SystemClock_Config+0xd0>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005150:	607b      	str	r3, [r7, #4]
 8005152:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005154:	2302      	movs	r3, #2
 8005156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005158:	2301      	movs	r3, #1
 800515a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800515c:	2310      	movs	r3, #16
 800515e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005160:	2302      	movs	r3, #2
 8005162:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005164:	2300      	movs	r3, #0
 8005166:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005168:	2308      	movs	r3, #8
 800516a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800516c:	2364      	movs	r3, #100	; 0x64
 800516e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005170:	2302      	movs	r3, #2
 8005172:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005174:	2304      	movs	r3, #4
 8005176:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005178:	f107 0320 	add.w	r3, r7, #32
 800517c:	4618      	mov	r0, r3
 800517e:	f003 ffaf 	bl	80090e0 <HAL_RCC_OscConfig>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005188:	f000 fc20 	bl	80059cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800518c:	230f      	movs	r3, #15
 800518e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005190:	2302      	movs	r3, #2
 8005192:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005194:	2300      	movs	r3, #0
 8005196:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800519c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800519e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80051a4:	f107 030c 	add.w	r3, r7, #12
 80051a8:	2103      	movs	r1, #3
 80051aa:	4618      	mov	r0, r3
 80051ac:	f004 fa10 	bl	80095d0 <HAL_RCC_ClockConfig>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80051b6:	f000 fc09 	bl	80059cc <Error_Handler>
  }
}
 80051ba:	bf00      	nop
 80051bc:	3750      	adds	r7, #80	; 0x50
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40023800 	.word	0x40023800
 80051c8:	40007000 	.word	0x40007000

080051cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08c      	sub	sp, #48	; 0x30
 80051d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80051d2:	f107 0320 	add.w	r3, r7, #32
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	605a      	str	r2, [r3, #4]
 80051dc:	609a      	str	r2, [r3, #8]
 80051de:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80051e0:	463b      	mov	r3, r7
 80051e2:	2220      	movs	r2, #32
 80051e4:	2100      	movs	r1, #0
 80051e6:	4618      	mov	r0, r3
 80051e8:	f007 f888 	bl	800c2fc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80051ec:	4b3e      	ldr	r3, [pc, #248]	; (80052e8 <MX_ADC1_Init+0x11c>)
 80051ee:	4a3f      	ldr	r2, [pc, #252]	; (80052ec <MX_ADC1_Init+0x120>)
 80051f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80051f2:	4b3d      	ldr	r3, [pc, #244]	; (80052e8 <MX_ADC1_Init+0x11c>)
 80051f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80051fa:	4b3b      	ldr	r3, [pc, #236]	; (80052e8 <MX_ADC1_Init+0x11c>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8005200:	4b39      	ldr	r3, [pc, #228]	; (80052e8 <MX_ADC1_Init+0x11c>)
 8005202:	2201      	movs	r2, #1
 8005204:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005206:	4b38      	ldr	r3, [pc, #224]	; (80052e8 <MX_ADC1_Init+0x11c>)
 8005208:	2201      	movs	r2, #1
 800520a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800520c:	4b36      	ldr	r3, [pc, #216]	; (80052e8 <MX_ADC1_Init+0x11c>)
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005214:	4b34      	ldr	r3, [pc, #208]	; (80052e8 <MX_ADC1_Init+0x11c>)
 8005216:	2200      	movs	r2, #0
 8005218:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800521a:	4b33      	ldr	r3, [pc, #204]	; (80052e8 <MX_ADC1_Init+0x11c>)
 800521c:	4a34      	ldr	r2, [pc, #208]	; (80052f0 <MX_ADC1_Init+0x124>)
 800521e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005220:	4b31      	ldr	r3, [pc, #196]	; (80052e8 <MX_ADC1_Init+0x11c>)
 8005222:	2200      	movs	r2, #0
 8005224:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005226:	4b30      	ldr	r3, [pc, #192]	; (80052e8 <MX_ADC1_Init+0x11c>)
 8005228:	2201      	movs	r2, #1
 800522a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800522c:	4b2e      	ldr	r3, [pc, #184]	; (80052e8 <MX_ADC1_Init+0x11c>)
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005234:	4b2c      	ldr	r3, [pc, #176]	; (80052e8 <MX_ADC1_Init+0x11c>)
 8005236:	2200      	movs	r2, #0
 8005238:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800523a:	482b      	ldr	r0, [pc, #172]	; (80052e8 <MX_ADC1_Init+0x11c>)
 800523c:	f001 f878 	bl	8006330 <HAL_ADC_Init>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8005246:	f000 fbc1 	bl	80059cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800524a:	2309      	movs	r3, #9
 800524c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800524e:	2301      	movs	r3, #1
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005252:	2306      	movs	r3, #6
 8005254:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005256:	f107 0320 	add.w	r3, r7, #32
 800525a:	4619      	mov	r1, r3
 800525c:	4822      	ldr	r0, [pc, #136]	; (80052e8 <MX_ADC1_Init+0x11c>)
 800525e:	f001 fb3f 	bl	80068e0 <HAL_ADC_ConfigChannel>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8005268:	f000 fbb0 	bl	80059cc <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 800526c:	2300      	movs	r3, #0
 800526e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8005270:	2301      	movs	r3, #1
 8005272:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8005274:	2303      	movs	r3, #3
 8005276:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 8005278:	2303      	movs	r3, #3
 800527a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 800527c:	2300      	movs	r3, #0
 800527e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8005280:	4b1c      	ldr	r3, [pc, #112]	; (80052f4 <MX_ADC1_Init+0x128>)
 8005282:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8005284:	2300      	movs	r3, #0
 8005286:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8005288:	2300      	movs	r3, #0
 800528a:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005290:	463b      	mov	r3, r7
 8005292:	4619      	mov	r1, r3
 8005294:	4814      	ldr	r0, [pc, #80]	; (80052e8 <MX_ADC1_Init+0x11c>)
 8005296:	f001 ff21 	bl	80070dc <HAL_ADCEx_InjectedConfigChannel>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80052a0:	f000 fb94 	bl	80059cc <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80052a4:	2302      	movs	r3, #2
 80052a6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80052a8:	2302      	movs	r3, #2
 80052aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80052ac:	463b      	mov	r3, r7
 80052ae:	4619      	mov	r1, r3
 80052b0:	480d      	ldr	r0, [pc, #52]	; (80052e8 <MX_ADC1_Init+0x11c>)
 80052b2:	f001 ff13 	bl	80070dc <HAL_ADCEx_InjectedConfigChannel>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80052bc:	f000 fb86 	bl	80059cc <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 80052c0:	2308      	movs	r3, #8
 80052c2:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 80052c4:	2303      	movs	r3, #3
 80052c6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80052c8:	2300      	movs	r3, #0
 80052ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80052cc:	463b      	mov	r3, r7
 80052ce:	4619      	mov	r1, r3
 80052d0:	4805      	ldr	r0, [pc, #20]	; (80052e8 <MX_ADC1_Init+0x11c>)
 80052d2:	f001 ff03 	bl	80070dc <HAL_ADCEx_InjectedConfigChannel>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80052dc:	f000 fb76 	bl	80059cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80052e0:	bf00      	nop
 80052e2:	3730      	adds	r7, #48	; 0x30
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20011170 	.word	0x20011170
 80052ec:	40012000 	.word	0x40012000
 80052f0:	0f000001 	.word	0x0f000001
 80052f4:	000f0001 	.word	0x000f0001

080052f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80052fc:	4b12      	ldr	r3, [pc, #72]	; (8005348 <MX_I2C2_Init+0x50>)
 80052fe:	4a13      	ldr	r2, [pc, #76]	; (800534c <MX_I2C2_Init+0x54>)
 8005300:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005302:	4b11      	ldr	r3, [pc, #68]	; (8005348 <MX_I2C2_Init+0x50>)
 8005304:	4a12      	ldr	r2, [pc, #72]	; (8005350 <MX_I2C2_Init+0x58>)
 8005306:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005308:	4b0f      	ldr	r3, [pc, #60]	; (8005348 <MX_I2C2_Init+0x50>)
 800530a:	2200      	movs	r2, #0
 800530c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800530e:	4b0e      	ldr	r3, [pc, #56]	; (8005348 <MX_I2C2_Init+0x50>)
 8005310:	2200      	movs	r2, #0
 8005312:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005314:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <MX_I2C2_Init+0x50>)
 8005316:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800531a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800531c:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <MX_I2C2_Init+0x50>)
 800531e:	2200      	movs	r2, #0
 8005320:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005322:	4b09      	ldr	r3, [pc, #36]	; (8005348 <MX_I2C2_Init+0x50>)
 8005324:	2200      	movs	r2, #0
 8005326:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005328:	4b07      	ldr	r3, [pc, #28]	; (8005348 <MX_I2C2_Init+0x50>)
 800532a:	2200      	movs	r2, #0
 800532c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800532e:	4b06      	ldr	r3, [pc, #24]	; (8005348 <MX_I2C2_Init+0x50>)
 8005330:	2200      	movs	r2, #0
 8005332:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005334:	4804      	ldr	r0, [pc, #16]	; (8005348 <MX_I2C2_Init+0x50>)
 8005336:	f002 ff13 	bl	8008160 <HAL_I2C_Init>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005340:	f000 fb44 	bl	80059cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005344:	bf00      	nop
 8005346:	bd80      	pop	{r7, pc}
 8005348:	20011218 	.word	0x20011218
 800534c:	40005800 	.word	0x40005800
 8005350:	000186a0 	.word	0x000186a0

08005354 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005358:	4b17      	ldr	r3, [pc, #92]	; (80053b8 <MX_SPI1_Init+0x64>)
 800535a:	4a18      	ldr	r2, [pc, #96]	; (80053bc <MX_SPI1_Init+0x68>)
 800535c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800535e:	4b16      	ldr	r3, [pc, #88]	; (80053b8 <MX_SPI1_Init+0x64>)
 8005360:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005364:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005366:	4b14      	ldr	r3, [pc, #80]	; (80053b8 <MX_SPI1_Init+0x64>)
 8005368:	2200      	movs	r2, #0
 800536a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800536c:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <MX_SPI1_Init+0x64>)
 800536e:	2200      	movs	r2, #0
 8005370:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005372:	4b11      	ldr	r3, [pc, #68]	; (80053b8 <MX_SPI1_Init+0x64>)
 8005374:	2200      	movs	r2, #0
 8005376:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005378:	4b0f      	ldr	r3, [pc, #60]	; (80053b8 <MX_SPI1_Init+0x64>)
 800537a:	2200      	movs	r2, #0
 800537c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800537e:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <MX_SPI1_Init+0x64>)
 8005380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005384:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005386:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <MX_SPI1_Init+0x64>)
 8005388:	2220      	movs	r2, #32
 800538a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800538c:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <MX_SPI1_Init+0x64>)
 800538e:	2200      	movs	r2, #0
 8005390:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005392:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <MX_SPI1_Init+0x64>)
 8005394:	2200      	movs	r2, #0
 8005396:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005398:	4b07      	ldr	r3, [pc, #28]	; (80053b8 <MX_SPI1_Init+0x64>)
 800539a:	2200      	movs	r2, #0
 800539c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800539e:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <MX_SPI1_Init+0x64>)
 80053a0:	220a      	movs	r2, #10
 80053a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80053a4:	4804      	ldr	r0, [pc, #16]	; (80053b8 <MX_SPI1_Init+0x64>)
 80053a6:	f004 faf3 	bl	8009990 <HAL_SPI_Init>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80053b0:	f000 fb0c 	bl	80059cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80053b4:	bf00      	nop
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	2001126c 	.word	0x2001126c
 80053bc:	40013000 	.word	0x40013000

080053c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80053c4:	4b17      	ldr	r3, [pc, #92]	; (8005424 <MX_SPI2_Init+0x64>)
 80053c6:	4a18      	ldr	r2, [pc, #96]	; (8005428 <MX_SPI2_Init+0x68>)
 80053c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80053ca:	4b16      	ldr	r3, [pc, #88]	; (8005424 <MX_SPI2_Init+0x64>)
 80053cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80053d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80053d2:	4b14      	ldr	r3, [pc, #80]	; (8005424 <MX_SPI2_Init+0x64>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80053d8:	4b12      	ldr	r3, [pc, #72]	; (8005424 <MX_SPI2_Init+0x64>)
 80053da:	2200      	movs	r2, #0
 80053dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80053de:	4b11      	ldr	r3, [pc, #68]	; (8005424 <MX_SPI2_Init+0x64>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80053e4:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <MX_SPI2_Init+0x64>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80053ea:	4b0e      	ldr	r3, [pc, #56]	; (8005424 <MX_SPI2_Init+0x64>)
 80053ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80053f2:	4b0c      	ldr	r3, [pc, #48]	; (8005424 <MX_SPI2_Init+0x64>)
 80053f4:	2230      	movs	r2, #48	; 0x30
 80053f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80053f8:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <MX_SPI2_Init+0x64>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80053fe:	4b09      	ldr	r3, [pc, #36]	; (8005424 <MX_SPI2_Init+0x64>)
 8005400:	2200      	movs	r2, #0
 8005402:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005404:	4b07      	ldr	r3, [pc, #28]	; (8005424 <MX_SPI2_Init+0x64>)
 8005406:	2200      	movs	r2, #0
 8005408:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800540a:	4b06      	ldr	r3, [pc, #24]	; (8005424 <MX_SPI2_Init+0x64>)
 800540c:	220a      	movs	r2, #10
 800540e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005410:	4804      	ldr	r0, [pc, #16]	; (8005424 <MX_SPI2_Init+0x64>)
 8005412:	f004 fabd 	bl	8009990 <HAL_SPI_Init>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800541c:	f000 fad6 	bl	80059cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005420:	bf00      	nop
 8005422:	bd80      	pop	{r7, pc}
 8005424:	200112c4 	.word	0x200112c4
 8005428:	40003800 	.word	0x40003800

0800542c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08c      	sub	sp, #48	; 0x30
 8005430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005432:	f107 030c 	add.w	r3, r7, #12
 8005436:	2224      	movs	r2, #36	; 0x24
 8005438:	2100      	movs	r1, #0
 800543a:	4618      	mov	r0, r3
 800543c:	f006 ff5e 	bl	800c2fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005440:	1d3b      	adds	r3, r7, #4
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005448:	4b21      	ldr	r3, [pc, #132]	; (80054d0 <MX_TIM2_Init+0xa4>)
 800544a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800544e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005450:	4b1f      	ldr	r3, [pc, #124]	; (80054d0 <MX_TIM2_Init+0xa4>)
 8005452:	2200      	movs	r2, #0
 8005454:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005456:	4b1e      	ldr	r3, [pc, #120]	; (80054d0 <MX_TIM2_Init+0xa4>)
 8005458:	2200      	movs	r2, #0
 800545a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800545c:	4b1c      	ldr	r3, [pc, #112]	; (80054d0 <MX_TIM2_Init+0xa4>)
 800545e:	f04f 32ff 	mov.w	r2, #4294967295
 8005462:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005464:	4b1a      	ldr	r3, [pc, #104]	; (80054d0 <MX_TIM2_Init+0xa4>)
 8005466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800546a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800546c:	4b18      	ldr	r3, [pc, #96]	; (80054d0 <MX_TIM2_Init+0xa4>)
 800546e:	2200      	movs	r2, #0
 8005470:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005472:	2301      	movs	r3, #1
 8005474:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005476:	2302      	movs	r3, #2
 8005478:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800547a:	2301      	movs	r3, #1
 800547c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800547e:	2300      	movs	r3, #0
 8005480:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8005482:	2302      	movs	r3, #2
 8005484:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8005486:	2302      	movs	r3, #2
 8005488:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800548a:	2301      	movs	r3, #1
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800548e:	2300      	movs	r3, #0
 8005490:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8005492:	2302      	movs	r3, #2
 8005494:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005496:	f107 030c 	add.w	r3, r7, #12
 800549a:	4619      	mov	r1, r3
 800549c:	480c      	ldr	r0, [pc, #48]	; (80054d0 <MX_TIM2_Init+0xa4>)
 800549e:	f005 fbd9 	bl	800ac54 <HAL_TIM_Encoder_Init>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80054a8:	f000 fa90 	bl	80059cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054ac:	2300      	movs	r3, #0
 80054ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80054b4:	1d3b      	adds	r3, r7, #4
 80054b6:	4619      	mov	r1, r3
 80054b8:	4805      	ldr	r0, [pc, #20]	; (80054d0 <MX_TIM2_Init+0xa4>)
 80054ba:	f006 fa53 	bl	800b964 <HAL_TIMEx_MasterConfigSynchronization>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80054c4:	f000 fa82 	bl	80059cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80054c8:	bf00      	nop
 80054ca:	3730      	adds	r7, #48	; 0x30
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	200113dc 	.word	0x200113dc

080054d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08e      	sub	sp, #56	; 0x38
 80054d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	605a      	str	r2, [r3, #4]
 80054e4:	609a      	str	r2, [r3, #8]
 80054e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054e8:	f107 0320 	add.w	r3, r7, #32
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80054f2:	1d3b      	adds	r3, r7, #4
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	605a      	str	r2, [r3, #4]
 80054fa:	609a      	str	r2, [r3, #8]
 80054fc:	60da      	str	r2, [r3, #12]
 80054fe:	611a      	str	r2, [r3, #16]
 8005500:	615a      	str	r2, [r3, #20]
 8005502:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005504:	4b32      	ldr	r3, [pc, #200]	; (80055d0 <MX_TIM3_Init+0xfc>)
 8005506:	4a33      	ldr	r2, [pc, #204]	; (80055d4 <MX_TIM3_Init+0x100>)
 8005508:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800550a:	4b31      	ldr	r3, [pc, #196]	; (80055d0 <MX_TIM3_Init+0xfc>)
 800550c:	2200      	movs	r2, #0
 800550e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005510:	4b2f      	ldr	r3, [pc, #188]	; (80055d0 <MX_TIM3_Init+0xfc>)
 8005512:	2200      	movs	r2, #0
 8005514:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2800;
 8005516:	4b2e      	ldr	r3, [pc, #184]	; (80055d0 <MX_TIM3_Init+0xfc>)
 8005518:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800551c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800551e:	4b2c      	ldr	r3, [pc, #176]	; (80055d0 <MX_TIM3_Init+0xfc>)
 8005520:	2200      	movs	r2, #0
 8005522:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005524:	4b2a      	ldr	r3, [pc, #168]	; (80055d0 <MX_TIM3_Init+0xfc>)
 8005526:	2280      	movs	r2, #128	; 0x80
 8005528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800552a:	4829      	ldr	r0, [pc, #164]	; (80055d0 <MX_TIM3_Init+0xfc>)
 800552c:	f005 f924 	bl	800a778 <HAL_TIM_Base_Init>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005536:	f000 fa49 	bl	80059cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800553a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800553e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005540:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005544:	4619      	mov	r1, r3
 8005546:	4822      	ldr	r0, [pc, #136]	; (80055d0 <MX_TIM3_Init+0xfc>)
 8005548:	f005 fe50 	bl	800b1ec <HAL_TIM_ConfigClockSource>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005552:	f000 fa3b 	bl	80059cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005556:	481e      	ldr	r0, [pc, #120]	; (80055d0 <MX_TIM3_Init+0xfc>)
 8005558:	f005 fa73 	bl	800aa42 <HAL_TIM_PWM_Init>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005562:	f000 fa33 	bl	80059cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005566:	2300      	movs	r3, #0
 8005568:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800556a:	2300      	movs	r3, #0
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800556e:	f107 0320 	add.w	r3, r7, #32
 8005572:	4619      	mov	r1, r3
 8005574:	4816      	ldr	r0, [pc, #88]	; (80055d0 <MX_TIM3_Init+0xfc>)
 8005576:	f006 f9f5 	bl	800b964 <HAL_TIMEx_MasterConfigSynchronization>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005580:	f000 fa24 	bl	80059cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005584:	2360      	movs	r3, #96	; 0x60
 8005586:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005588:	2300      	movs	r3, #0
 800558a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005590:	2304      	movs	r3, #4
 8005592:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005594:	1d3b      	adds	r3, r7, #4
 8005596:	2200      	movs	r2, #0
 8005598:	4619      	mov	r1, r3
 800559a:	480d      	ldr	r0, [pc, #52]	; (80055d0 <MX_TIM3_Init+0xfc>)
 800559c:	f005 fd64 	bl	800b068 <HAL_TIM_PWM_ConfigChannel>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80055a6:	f000 fa11 	bl	80059cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80055aa:	1d3b      	adds	r3, r7, #4
 80055ac:	2204      	movs	r2, #4
 80055ae:	4619      	mov	r1, r3
 80055b0:	4807      	ldr	r0, [pc, #28]	; (80055d0 <MX_TIM3_Init+0xfc>)
 80055b2:	f005 fd59 	bl	800b068 <HAL_TIM_PWM_ConfigChannel>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80055bc:	f000 fa06 	bl	80059cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80055c0:	4803      	ldr	r0, [pc, #12]	; (80055d0 <MX_TIM3_Init+0xfc>)
 80055c2:	f000 fcc3 	bl	8005f4c <HAL_TIM_MspPostInit>

}
 80055c6:	bf00      	nop
 80055c8:	3738      	adds	r7, #56	; 0x38
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20011424 	.word	0x20011424
 80055d4:	40000400 	.word	0x40000400

080055d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08c      	sub	sp, #48	; 0x30
 80055dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80055de:	f107 030c 	add.w	r3, r7, #12
 80055e2:	2224      	movs	r2, #36	; 0x24
 80055e4:	2100      	movs	r1, #0
 80055e6:	4618      	mov	r0, r3
 80055e8:	f006 fe88 	bl	800c2fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055ec:	1d3b      	adds	r3, r7, #4
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80055f4:	4b21      	ldr	r3, [pc, #132]	; (800567c <MX_TIM4_Init+0xa4>)
 80055f6:	4a22      	ldr	r2, [pc, #136]	; (8005680 <MX_TIM4_Init+0xa8>)
 80055f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80055fa:	4b20      	ldr	r3, [pc, #128]	; (800567c <MX_TIM4_Init+0xa4>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005600:	4b1e      	ldr	r3, [pc, #120]	; (800567c <MX_TIM4_Init+0xa4>)
 8005602:	2200      	movs	r2, #0
 8005604:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005606:	4b1d      	ldr	r3, [pc, #116]	; (800567c <MX_TIM4_Init+0xa4>)
 8005608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800560c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800560e:	4b1b      	ldr	r3, [pc, #108]	; (800567c <MX_TIM4_Init+0xa4>)
 8005610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005614:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005616:	4b19      	ldr	r3, [pc, #100]	; (800567c <MX_TIM4_Init+0xa4>)
 8005618:	2200      	movs	r2, #0
 800561a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 800561c:	2302      	movs	r3, #2
 800561e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005620:	2302      	movs	r3, #2
 8005622:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005624:	2301      	movs	r3, #1
 8005626:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005628:	2300      	movs	r3, #0
 800562a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 800562c:	2304      	movs	r3, #4
 800562e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8005630:	2302      	movs	r3, #2
 8005632:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005634:	2301      	movs	r3, #1
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005638:	2300      	movs	r3, #0
 800563a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 4;
 800563c:	2304      	movs	r3, #4
 800563e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005640:	f107 030c 	add.w	r3, r7, #12
 8005644:	4619      	mov	r1, r3
 8005646:	480d      	ldr	r0, [pc, #52]	; (800567c <MX_TIM4_Init+0xa4>)
 8005648:	f005 fb04 	bl	800ac54 <HAL_TIM_Encoder_Init>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8005652:	f000 f9bb 	bl	80059cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005656:	2300      	movs	r3, #0
 8005658:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800565a:	2300      	movs	r3, #0
 800565c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800565e:	1d3b      	adds	r3, r7, #4
 8005660:	4619      	mov	r1, r3
 8005662:	4806      	ldr	r0, [pc, #24]	; (800567c <MX_TIM4_Init+0xa4>)
 8005664:	f006 f97e 	bl	800b964 <HAL_TIMEx_MasterConfigSynchronization>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800566e:	f000 f9ad 	bl	80059cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005672:	bf00      	nop
 8005674:	3730      	adds	r7, #48	; 0x30
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	2001146c 	.word	0x2001146c
 8005680:	40000800 	.word	0x40000800

08005684 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800568a:	1d3b      	adds	r3, r7, #4
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	605a      	str	r2, [r3, #4]
 8005692:	609a      	str	r2, [r3, #8]
 8005694:	60da      	str	r2, [r3, #12]
 8005696:	611a      	str	r2, [r3, #16]
 8005698:	615a      	str	r2, [r3, #20]
 800569a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800569c:	4b1c      	ldr	r3, [pc, #112]	; (8005710 <MX_TIM10_Init+0x8c>)
 800569e:	4a1d      	ldr	r2, [pc, #116]	; (8005714 <MX_TIM10_Init+0x90>)
 80056a0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 80056a2:	4b1b      	ldr	r3, [pc, #108]	; (8005710 <MX_TIM10_Init+0x8c>)
 80056a4:	2204      	movs	r2, #4
 80056a6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056a8:	4b19      	ldr	r3, [pc, #100]	; (8005710 <MX_TIM10_Init+0x8c>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000;
 80056ae:	4b18      	ldr	r3, [pc, #96]	; (8005710 <MX_TIM10_Init+0x8c>)
 80056b0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80056b4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056b6:	4b16      	ldr	r3, [pc, #88]	; (8005710 <MX_TIM10_Init+0x8c>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80056bc:	4b14      	ldr	r3, [pc, #80]	; (8005710 <MX_TIM10_Init+0x8c>)
 80056be:	2280      	movs	r2, #128	; 0x80
 80056c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80056c2:	4813      	ldr	r0, [pc, #76]	; (8005710 <MX_TIM10_Init+0x8c>)
 80056c4:	f005 f858 	bl	800a778 <HAL_TIM_Base_Init>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80056ce:	f000 f97d 	bl	80059cc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 80056d2:	480f      	ldr	r0, [pc, #60]	; (8005710 <MX_TIM10_Init+0x8c>)
 80056d4:	f005 f95c 	bl	800a990 <HAL_TIM_OC_Init>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80056de:	f000 f975 	bl	80059cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80056e2:	2300      	movs	r3, #0
 80056e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80056f2:	1d3b      	adds	r3, r7, #4
 80056f4:	2200      	movs	r2, #0
 80056f6:	4619      	mov	r1, r3
 80056f8:	4805      	ldr	r0, [pc, #20]	; (8005710 <MX_TIM10_Init+0x8c>)
 80056fa:	f005 fc59 	bl	800afb0 <HAL_TIM_OC_ConfigChannel>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8005704:	f000 f962 	bl	80059cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005708:	bf00      	nop
 800570a:	3720      	adds	r7, #32
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	200114b4 	.word	0x200114b4
 8005714:	40014400 	.word	0x40014400

08005718 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800571c:	4b11      	ldr	r3, [pc, #68]	; (8005764 <MX_USART1_UART_Init+0x4c>)
 800571e:	4a12      	ldr	r2, [pc, #72]	; (8005768 <MX_USART1_UART_Init+0x50>)
 8005720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005722:	4b10      	ldr	r3, [pc, #64]	; (8005764 <MX_USART1_UART_Init+0x4c>)
 8005724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800572a:	4b0e      	ldr	r3, [pc, #56]	; (8005764 <MX_USART1_UART_Init+0x4c>)
 800572c:	2200      	movs	r2, #0
 800572e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005730:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <MX_USART1_UART_Init+0x4c>)
 8005732:	2200      	movs	r2, #0
 8005734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005736:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <MX_USART1_UART_Init+0x4c>)
 8005738:	2200      	movs	r2, #0
 800573a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 800573c:	4b09      	ldr	r3, [pc, #36]	; (8005764 <MX_USART1_UART_Init+0x4c>)
 800573e:	2208      	movs	r2, #8
 8005740:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005742:	4b08      	ldr	r3, [pc, #32]	; (8005764 <MX_USART1_UART_Init+0x4c>)
 8005744:	2200      	movs	r2, #0
 8005746:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005748:	4b06      	ldr	r3, [pc, #24]	; (8005764 <MX_USART1_UART_Init+0x4c>)
 800574a:	2200      	movs	r2, #0
 800574c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800574e:	4805      	ldr	r0, [pc, #20]	; (8005764 <MX_USART1_UART_Init+0x4c>)
 8005750:	f006 f98a 	bl	800ba68 <HAL_HalfDuplex_Init>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800575a:	f000 f937 	bl	80059cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800575e:	bf00      	nop
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	200114fc 	.word	0x200114fc
 8005768:	40011000 	.word	0x40011000

0800576c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005770:	4b11      	ldr	r3, [pc, #68]	; (80057b8 <MX_USART6_UART_Init+0x4c>)
 8005772:	4a12      	ldr	r2, [pc, #72]	; (80057bc <MX_USART6_UART_Init+0x50>)
 8005774:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005776:	4b10      	ldr	r3, [pc, #64]	; (80057b8 <MX_USART6_UART_Init+0x4c>)
 8005778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800577c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800577e:	4b0e      	ldr	r3, [pc, #56]	; (80057b8 <MX_USART6_UART_Init+0x4c>)
 8005780:	2200      	movs	r2, #0
 8005782:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005784:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <MX_USART6_UART_Init+0x4c>)
 8005786:	2200      	movs	r2, #0
 8005788:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800578a:	4b0b      	ldr	r3, [pc, #44]	; (80057b8 <MX_USART6_UART_Init+0x4c>)
 800578c:	2200      	movs	r2, #0
 800578e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005790:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <MX_USART6_UART_Init+0x4c>)
 8005792:	220c      	movs	r2, #12
 8005794:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005796:	4b08      	ldr	r3, [pc, #32]	; (80057b8 <MX_USART6_UART_Init+0x4c>)
 8005798:	2200      	movs	r2, #0
 800579a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800579c:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <MX_USART6_UART_Init+0x4c>)
 800579e:	2200      	movs	r2, #0
 80057a0:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 80057a2:	4805      	ldr	r0, [pc, #20]	; (80057b8 <MX_USART6_UART_Init+0x4c>)
 80057a4:	f006 f960 	bl	800ba68 <HAL_HalfDuplex_Init>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80057ae:	f000 f90d 	bl	80059cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80057b2:	bf00      	nop
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20011540 	.word	0x20011540
 80057bc:	40011400 	.word	0x40011400

080057c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80057c6:	2300      	movs	r3, #0
 80057c8:	607b      	str	r3, [r7, #4]
 80057ca:	4b1b      	ldr	r3, [pc, #108]	; (8005838 <MX_DMA_Init+0x78>)
 80057cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ce:	4a1a      	ldr	r2, [pc, #104]	; (8005838 <MX_DMA_Init+0x78>)
 80057d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057d4:	6313      	str	r3, [r2, #48]	; 0x30
 80057d6:	4b18      	ldr	r3, [pc, #96]	; (8005838 <MX_DMA_Init+0x78>)
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057de:	607b      	str	r3, [r7, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80057e2:	2300      	movs	r3, #0
 80057e4:	603b      	str	r3, [r7, #0]
 80057e6:	4b14      	ldr	r3, [pc, #80]	; (8005838 <MX_DMA_Init+0x78>)
 80057e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ea:	4a13      	ldr	r2, [pc, #76]	; (8005838 <MX_DMA_Init+0x78>)
 80057ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057f0:	6313      	str	r3, [r2, #48]	; 0x30
 80057f2:	4b11      	ldr	r3, [pc, #68]	; (8005838 <MX_DMA_Init+0x78>)
 80057f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80057fe:	2200      	movs	r2, #0
 8005800:	2100      	movs	r1, #0
 8005802:	200f      	movs	r0, #15
 8005804:	f001 fedf 	bl	80075c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005808:	200f      	movs	r0, #15
 800580a:	f001 fef8 	bl	80075fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800580e:	2200      	movs	r2, #0
 8005810:	2100      	movs	r1, #0
 8005812:	2038      	movs	r0, #56	; 0x38
 8005814:	f001 fed7 	bl	80075c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005818:	2038      	movs	r0, #56	; 0x38
 800581a:	f001 fef0 	bl	80075fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800581e:	2200      	movs	r2, #0
 8005820:	2100      	movs	r1, #0
 8005822:	203c      	movs	r0, #60	; 0x3c
 8005824:	f001 fecf 	bl	80075c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8005828:	203c      	movs	r0, #60	; 0x3c
 800582a:	f001 fee8 	bl	80075fe <HAL_NVIC_EnableIRQ>

}
 800582e:	bf00      	nop
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	40023800 	.word	0x40023800

0800583c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005842:	f107 030c 	add.w	r3, r7, #12
 8005846:	2200      	movs	r2, #0
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	605a      	str	r2, [r3, #4]
 800584c:	609a      	str	r2, [r3, #8]
 800584e:	60da      	str	r2, [r3, #12]
 8005850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005852:	2300      	movs	r3, #0
 8005854:	60bb      	str	r3, [r7, #8]
 8005856:	4b35      	ldr	r3, [pc, #212]	; (800592c <MX_GPIO_Init+0xf0>)
 8005858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585a:	4a34      	ldr	r2, [pc, #208]	; (800592c <MX_GPIO_Init+0xf0>)
 800585c:	f043 0301 	orr.w	r3, r3, #1
 8005860:	6313      	str	r3, [r2, #48]	; 0x30
 8005862:	4b32      	ldr	r3, [pc, #200]	; (800592c <MX_GPIO_Init+0xf0>)
 8005864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	60bb      	str	r3, [r7, #8]
 800586c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800586e:	2300      	movs	r3, #0
 8005870:	607b      	str	r3, [r7, #4]
 8005872:	4b2e      	ldr	r3, [pc, #184]	; (800592c <MX_GPIO_Init+0xf0>)
 8005874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005876:	4a2d      	ldr	r2, [pc, #180]	; (800592c <MX_GPIO_Init+0xf0>)
 8005878:	f043 0302 	orr.w	r3, r3, #2
 800587c:	6313      	str	r3, [r2, #48]	; 0x30
 800587e:	4b2b      	ldr	r3, [pc, #172]	; (800592c <MX_GPIO_Init+0xf0>)
 8005880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	607b      	str	r3, [r7, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800588a:	2300      	movs	r3, #0
 800588c:	603b      	str	r3, [r7, #0]
 800588e:	4b27      	ldr	r3, [pc, #156]	; (800592c <MX_GPIO_Init+0xf0>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	4a26      	ldr	r2, [pc, #152]	; (800592c <MX_GPIO_Init+0xf0>)
 8005894:	f043 0304 	orr.w	r3, r3, #4
 8005898:	6313      	str	r3, [r2, #48]	; 0x30
 800589a:	4b24      	ldr	r3, [pc, #144]	; (800592c <MX_GPIO_Init+0xf0>)
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	603b      	str	r3, [r7, #0]
 80058a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80058a6:	2200      	movs	r2, #0
 80058a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058ac:	4820      	ldr	r0, [pc, #128]	; (8005930 <MX_GPIO_Init+0xf4>)
 80058ae:	f002 fc25 	bl	80080fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 80058b2:	2201      	movs	r2, #1
 80058b4:	2110      	movs	r1, #16
 80058b6:	481f      	ldr	r0, [pc, #124]	; (8005934 <MX_GPIO_Init+0xf8>)
 80058b8:	f002 fc20 	bl	80080fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80058bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058c2:	2301      	movs	r3, #1
 80058c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058c6:	2300      	movs	r3, #0
 80058c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80058ce:	f107 030c 	add.w	r3, r7, #12
 80058d2:	4619      	mov	r1, r3
 80058d4:	4816      	ldr	r0, [pc, #88]	; (8005930 <MX_GPIO_Init+0xf4>)
 80058d6:	f002 fa8d 	bl	8007df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : record_pin_Pin */
  GPIO_InitStruct.Pin = record_pin_Pin;
 80058da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80058e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80058e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058e6:	2301      	movs	r3, #1
 80058e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(record_pin_GPIO_Port, &GPIO_InitStruct);
 80058ea:	f107 030c 	add.w	r3, r7, #12
 80058ee:	4619      	mov	r1, r3
 80058f0:	4811      	ldr	r0, [pc, #68]	; (8005938 <MX_GPIO_Init+0xfc>)
 80058f2:	f002 fa7f 	bl	8007df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 80058f6:	2310      	movs	r3, #16
 80058f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058fa:	2301      	movs	r3, #1
 80058fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058fe:	2300      	movs	r3, #0
 8005900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005902:	2303      	movs	r3, #3
 8005904:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 8005906:	f107 030c 	add.w	r3, r7, #12
 800590a:	4619      	mov	r1, r3
 800590c:	4809      	ldr	r0, [pc, #36]	; (8005934 <MX_GPIO_Init+0xf8>)
 800590e:	f002 fa71 	bl	8007df4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8005912:	2200      	movs	r2, #0
 8005914:	2104      	movs	r1, #4
 8005916:	2028      	movs	r0, #40	; 0x28
 8005918:	f001 fe55 	bl	80075c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800591c:	2028      	movs	r0, #40	; 0x28
 800591e:	f001 fe6e 	bl	80075fe <HAL_NVIC_EnableIRQ>

}
 8005922:	bf00      	nop
 8005924:	3720      	adds	r7, #32
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	40023800 	.word	0x40023800
 8005930:	40020800 	.word	0x40020800
 8005934:	40020000 	.word	0x40020000
 8005938:	40020400 	.word	0x40020400

0800593c <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */


	void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
		adc_flag=1;
 8005944:	4b04      	ldr	r3, [pc, #16]	; (8005958 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8005946:	2201      	movs	r2, #1
 8005948:	701a      	strb	r2, [r3, #0]

	}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	200040fc 	.word	0x200040fc

0800595c <HAL_ADC_ConvCpltCallback>:
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
	{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
	adc_flag=2;
 8005964:	4b07      	ldr	r3, [pc, #28]	; (8005984 <HAL_ADC_ConvCpltCallback+0x28>)
 8005966:	2202      	movs	r2, #2
 8005968:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Stop_DMA(&hadc1); HAL_ADC_Start_DMA(&hadc1,& adc_source, 3072);    // try half sample rate   , its 17606  khz
 800596a:	4807      	ldr	r0, [pc, #28]	; (8005988 <HAL_ADC_ConvCpltCallback+0x2c>)
 800596c:	f000 ff54 	bl	8006818 <HAL_ADC_Stop_DMA>
 8005970:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005974:	4905      	ldr	r1, [pc, #20]	; (800598c <HAL_ADC_ConvCpltCallback+0x30>)
 8005976:	4804      	ldr	r0, [pc, #16]	; (8005988 <HAL_ADC_ConvCpltCallback+0x2c>)
 8005978:	f000 fe5e 	bl	8006638 <HAL_ADC_Start_DMA>

	}
 800597c:	bf00      	nop
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	200040fc 	.word	0x200040fc
 8005988:	20011170 	.word	0x20011170
 800598c:	20001b18 	.word	0x20001b18

08005990 <HAL_SPI_TxCpltCallback>:
		}



void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
	{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	    //
	 //   gfx_dma=1;
	//    if (SPI2==hspi->Instance) {gfx_dma=1;}


	}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	4603      	mov	r3, r0
 80059ac:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == record_pin_Pin) {
 80059ae:	88fb      	ldrh	r3, [r7, #6]
 80059b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b4:	d102      	bne.n	80059bc <HAL_GPIO_EXTI_Callback+0x18>
   sampler.record_enable=1;
 80059b6:	4b04      	ldr	r3, [pc, #16]	; (80059c8 <HAL_GPIO_EXTI_Callback+0x24>)
 80059b8:	2201      	movs	r2, #1
 80059ba:	701a      	strb	r2, [r3, #0]
  }
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	20000204 	.word	0x20000204

080059cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80059d0:	b672      	cpsid	i
}
 80059d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80059d4:	e7fe      	b.n	80059d4 <Error_Handler+0x8>
	...

080059d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059de:	2300      	movs	r3, #0
 80059e0:	607b      	str	r3, [r7, #4]
 80059e2:	4b10      	ldr	r3, [pc, #64]	; (8005a24 <HAL_MspInit+0x4c>)
 80059e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e6:	4a0f      	ldr	r2, [pc, #60]	; (8005a24 <HAL_MspInit+0x4c>)
 80059e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059ec:	6453      	str	r3, [r2, #68]	; 0x44
 80059ee:	4b0d      	ldr	r3, [pc, #52]	; (8005a24 <HAL_MspInit+0x4c>)
 80059f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059f6:	607b      	str	r3, [r7, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80059fa:	2300      	movs	r3, #0
 80059fc:	603b      	str	r3, [r7, #0]
 80059fe:	4b09      	ldr	r3, [pc, #36]	; (8005a24 <HAL_MspInit+0x4c>)
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	4a08      	ldr	r2, [pc, #32]	; (8005a24 <HAL_MspInit+0x4c>)
 8005a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a08:	6413      	str	r3, [r2, #64]	; 0x40
 8005a0a:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <HAL_MspInit+0x4c>)
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a12:	603b      	str	r3, [r7, #0]
 8005a14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	40023800 	.word	0x40023800

08005a28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	; 0x28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a30:	f107 0314 	add.w	r3, r7, #20
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	605a      	str	r2, [r3, #4]
 8005a3a:	609a      	str	r2, [r3, #8]
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a3c      	ldr	r2, [pc, #240]	; (8005b38 <HAL_ADC_MspInit+0x110>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d171      	bne.n	8005b2e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	613b      	str	r3, [r7, #16]
 8005a4e:	4b3b      	ldr	r3, [pc, #236]	; (8005b3c <HAL_ADC_MspInit+0x114>)
 8005a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a52:	4a3a      	ldr	r2, [pc, #232]	; (8005b3c <HAL_ADC_MspInit+0x114>)
 8005a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a58:	6453      	str	r3, [r2, #68]	; 0x44
 8005a5a:	4b38      	ldr	r3, [pc, #224]	; (8005b3c <HAL_ADC_MspInit+0x114>)
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a62:	613b      	str	r3, [r7, #16]
 8005a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a66:	2300      	movs	r3, #0
 8005a68:	60fb      	str	r3, [r7, #12]
 8005a6a:	4b34      	ldr	r3, [pc, #208]	; (8005b3c <HAL_ADC_MspInit+0x114>)
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	4a33      	ldr	r2, [pc, #204]	; (8005b3c <HAL_ADC_MspInit+0x114>)
 8005a70:	f043 0301 	orr.w	r3, r3, #1
 8005a74:	6313      	str	r3, [r2, #48]	; 0x30
 8005a76:	4b31      	ldr	r3, [pc, #196]	; (8005b3c <HAL_ADC_MspInit+0x114>)
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a82:	2300      	movs	r3, #0
 8005a84:	60bb      	str	r3, [r7, #8]
 8005a86:	4b2d      	ldr	r3, [pc, #180]	; (8005b3c <HAL_ADC_MspInit+0x114>)
 8005a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8a:	4a2c      	ldr	r2, [pc, #176]	; (8005b3c <HAL_ADC_MspInit+0x114>)
 8005a8c:	f043 0302 	orr.w	r3, r3, #2
 8005a90:	6313      	str	r3, [r2, #48]	; 0x30
 8005a92:	4b2a      	ldr	r3, [pc, #168]	; (8005b3c <HAL_ADC_MspInit+0x114>)
 8005a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	60bb      	str	r3, [r7, #8]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 8005a9e:	2305      	movs	r3, #5
 8005aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005aaa:	f107 0314 	add.w	r3, r7, #20
 8005aae:	4619      	mov	r1, r3
 8005ab0:	4823      	ldr	r0, [pc, #140]	; (8005b40 <HAL_ADC_MspInit+0x118>)
 8005ab2:	f002 f99f 	bl	8007df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005aba:	2303      	movs	r3, #3
 8005abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ac2:	f107 0314 	add.w	r3, r7, #20
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	481e      	ldr	r0, [pc, #120]	; (8005b44 <HAL_ADC_MspInit+0x11c>)
 8005aca:	f002 f993 	bl	8007df4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8005ace:	4b1e      	ldr	r3, [pc, #120]	; (8005b48 <HAL_ADC_MspInit+0x120>)
 8005ad0:	4a1e      	ldr	r2, [pc, #120]	; (8005b4c <HAL_ADC_MspInit+0x124>)
 8005ad2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005ad4:	4b1c      	ldr	r3, [pc, #112]	; (8005b48 <HAL_ADC_MspInit+0x120>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ada:	4b1b      	ldr	r3, [pc, #108]	; (8005b48 <HAL_ADC_MspInit+0x120>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ae0:	4b19      	ldr	r3, [pc, #100]	; (8005b48 <HAL_ADC_MspInit+0x120>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005ae6:	4b18      	ldr	r3, [pc, #96]	; (8005b48 <HAL_ADC_MspInit+0x120>)
 8005ae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005aec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005aee:	4b16      	ldr	r3, [pc, #88]	; (8005b48 <HAL_ADC_MspInit+0x120>)
 8005af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005af4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005af6:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <HAL_ADC_MspInit+0x120>)
 8005af8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005afc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005afe:	4b12      	ldr	r3, [pc, #72]	; (8005b48 <HAL_ADC_MspInit+0x120>)
 8005b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b04:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005b06:	4b10      	ldr	r3, [pc, #64]	; (8005b48 <HAL_ADC_MspInit+0x120>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b0c:	4b0e      	ldr	r3, [pc, #56]	; (8005b48 <HAL_ADC_MspInit+0x120>)
 8005b0e:	2200      	movs	r2, #0
 8005b10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005b12:	480d      	ldr	r0, [pc, #52]	; (8005b48 <HAL_ADC_MspInit+0x120>)
 8005b14:	f001 fd8e 	bl	8007634 <HAL_DMA_Init>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8005b1e:	f7ff ff55 	bl	80059cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a08      	ldr	r2, [pc, #32]	; (8005b48 <HAL_ADC_MspInit+0x120>)
 8005b26:	639a      	str	r2, [r3, #56]	; 0x38
 8005b28:	4a07      	ldr	r2, [pc, #28]	; (8005b48 <HAL_ADC_MspInit+0x120>)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005b2e:	bf00      	nop
 8005b30:	3728      	adds	r7, #40	; 0x28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	40012000 	.word	0x40012000
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	40020000 	.word	0x40020000
 8005b44:	40020400 	.word	0x40020400
 8005b48:	200111b8 	.word	0x200111b8
 8005b4c:	40026470 	.word	0x40026470

08005b50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08a      	sub	sp, #40	; 0x28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b58:	f107 0314 	add.w	r3, r7, #20
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	605a      	str	r2, [r3, #4]
 8005b62:	609a      	str	r2, [r3, #8]
 8005b64:	60da      	str	r2, [r3, #12]
 8005b66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a22      	ldr	r2, [pc, #136]	; (8005bf8 <HAL_I2C_MspInit+0xa8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d13d      	bne.n	8005bee <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b72:	2300      	movs	r3, #0
 8005b74:	613b      	str	r3, [r7, #16]
 8005b76:	4b21      	ldr	r3, [pc, #132]	; (8005bfc <HAL_I2C_MspInit+0xac>)
 8005b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7a:	4a20      	ldr	r2, [pc, #128]	; (8005bfc <HAL_I2C_MspInit+0xac>)
 8005b7c:	f043 0302 	orr.w	r3, r3, #2
 8005b80:	6313      	str	r3, [r2, #48]	; 0x30
 8005b82:	4b1e      	ldr	r3, [pc, #120]	; (8005bfc <HAL_I2C_MspInit+0xac>)
 8005b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b94:	2312      	movs	r3, #18
 8005b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8005ba0:	2309      	movs	r3, #9
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ba4:	f107 0314 	add.w	r3, r7, #20
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4815      	ldr	r0, [pc, #84]	; (8005c00 <HAL_I2C_MspInit+0xb0>)
 8005bac:	f002 f922 	bl	8007df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005bb6:	2312      	movs	r3, #18
 8005bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005bc2:	2304      	movs	r3, #4
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bc6:	f107 0314 	add.w	r3, r7, #20
 8005bca:	4619      	mov	r1, r3
 8005bcc:	480c      	ldr	r0, [pc, #48]	; (8005c00 <HAL_I2C_MspInit+0xb0>)
 8005bce:	f002 f911 	bl	8007df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <HAL_I2C_MspInit+0xac>)
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	4a08      	ldr	r2, [pc, #32]	; (8005bfc <HAL_I2C_MspInit+0xac>)
 8005bdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005be0:	6413      	str	r3, [r2, #64]	; 0x40
 8005be2:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <HAL_I2C_MspInit+0xac>)
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005bee:	bf00      	nop
 8005bf0:	3728      	adds	r7, #40	; 0x28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40005800 	.word	0x40005800
 8005bfc:	40023800 	.word	0x40023800
 8005c00:	40020400 	.word	0x40020400

08005c04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08c      	sub	sp, #48	; 0x30
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c0c:	f107 031c 	add.w	r3, r7, #28
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	605a      	str	r2, [r3, #4]
 8005c16:	609a      	str	r2, [r3, #8]
 8005c18:	60da      	str	r2, [r3, #12]
 8005c1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a60      	ldr	r2, [pc, #384]	; (8005da4 <HAL_SPI_MspInit+0x1a0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d15b      	bne.n	8005cde <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005c26:	2300      	movs	r3, #0
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	4b5f      	ldr	r3, [pc, #380]	; (8005da8 <HAL_SPI_MspInit+0x1a4>)
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2e:	4a5e      	ldr	r2, [pc, #376]	; (8005da8 <HAL_SPI_MspInit+0x1a4>)
 8005c30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c34:	6453      	str	r3, [r2, #68]	; 0x44
 8005c36:	4b5c      	ldr	r3, [pc, #368]	; (8005da8 <HAL_SPI_MspInit+0x1a4>)
 8005c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c3e:	61bb      	str	r3, [r7, #24]
 8005c40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c42:	2300      	movs	r3, #0
 8005c44:	617b      	str	r3, [r7, #20]
 8005c46:	4b58      	ldr	r3, [pc, #352]	; (8005da8 <HAL_SPI_MspInit+0x1a4>)
 8005c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4a:	4a57      	ldr	r2, [pc, #348]	; (8005da8 <HAL_SPI_MspInit+0x1a4>)
 8005c4c:	f043 0301 	orr.w	r3, r3, #1
 8005c50:	6313      	str	r3, [r2, #48]	; 0x30
 8005c52:	4b55      	ldr	r3, [pc, #340]	; (8005da8 <HAL_SPI_MspInit+0x1a4>)
 8005c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	617b      	str	r3, [r7, #20]
 8005c5c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8005c5e:	23e0      	movs	r3, #224	; 0xe0
 8005c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c62:	2302      	movs	r3, #2
 8005c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c66:	2300      	movs	r3, #0
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005c6e:	2305      	movs	r3, #5
 8005c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c72:	f107 031c 	add.w	r3, r7, #28
 8005c76:	4619      	mov	r1, r3
 8005c78:	484c      	ldr	r0, [pc, #304]	; (8005dac <HAL_SPI_MspInit+0x1a8>)
 8005c7a:	f002 f8bb 	bl	8007df4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8005c7e:	4b4c      	ldr	r3, [pc, #304]	; (8005db0 <HAL_SPI_MspInit+0x1ac>)
 8005c80:	4a4c      	ldr	r2, [pc, #304]	; (8005db4 <HAL_SPI_MspInit+0x1b0>)
 8005c82:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8005c84:	4b4a      	ldr	r3, [pc, #296]	; (8005db0 <HAL_SPI_MspInit+0x1ac>)
 8005c86:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005c8a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c8c:	4b48      	ldr	r3, [pc, #288]	; (8005db0 <HAL_SPI_MspInit+0x1ac>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c92:	4b47      	ldr	r3, [pc, #284]	; (8005db0 <HAL_SPI_MspInit+0x1ac>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005c98:	4b45      	ldr	r3, [pc, #276]	; (8005db0 <HAL_SPI_MspInit+0x1ac>)
 8005c9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c9e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ca0:	4b43      	ldr	r3, [pc, #268]	; (8005db0 <HAL_SPI_MspInit+0x1ac>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ca6:	4b42      	ldr	r3, [pc, #264]	; (8005db0 <HAL_SPI_MspInit+0x1ac>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8005cac:	4b40      	ldr	r3, [pc, #256]	; (8005db0 <HAL_SPI_MspInit+0x1ac>)
 8005cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cb2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005cb4:	4b3e      	ldr	r3, [pc, #248]	; (8005db0 <HAL_SPI_MspInit+0x1ac>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005cba:	4b3d      	ldr	r3, [pc, #244]	; (8005db0 <HAL_SPI_MspInit+0x1ac>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8005cc0:	483b      	ldr	r0, [pc, #236]	; (8005db0 <HAL_SPI_MspInit+0x1ac>)
 8005cc2:	f001 fcb7 	bl	8007634 <HAL_DMA_Init>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8005ccc:	f7ff fe7e 	bl	80059cc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a37      	ldr	r2, [pc, #220]	; (8005db0 <HAL_SPI_MspInit+0x1ac>)
 8005cd4:	64da      	str	r2, [r3, #76]	; 0x4c
 8005cd6:	4a36      	ldr	r2, [pc, #216]	; (8005db0 <HAL_SPI_MspInit+0x1ac>)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005cdc:	e05e      	b.n	8005d9c <HAL_SPI_MspInit+0x198>
  else if(hspi->Instance==SPI2)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a35      	ldr	r2, [pc, #212]	; (8005db8 <HAL_SPI_MspInit+0x1b4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d159      	bne.n	8005d9c <HAL_SPI_MspInit+0x198>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005ce8:	2300      	movs	r3, #0
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	4b2e      	ldr	r3, [pc, #184]	; (8005da8 <HAL_SPI_MspInit+0x1a4>)
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	4a2d      	ldr	r2, [pc, #180]	; (8005da8 <HAL_SPI_MspInit+0x1a4>)
 8005cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8005cf8:	4b2b      	ldr	r3, [pc, #172]	; (8005da8 <HAL_SPI_MspInit+0x1a4>)
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d00:	613b      	str	r3, [r7, #16]
 8005d02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	4b27      	ldr	r3, [pc, #156]	; (8005da8 <HAL_SPI_MspInit+0x1a4>)
 8005d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0c:	4a26      	ldr	r2, [pc, #152]	; (8005da8 <HAL_SPI_MspInit+0x1a4>)
 8005d0e:	f043 0302 	orr.w	r3, r3, #2
 8005d12:	6313      	str	r3, [r2, #48]	; 0x30
 8005d14:	4b24      	ldr	r3, [pc, #144]	; (8005da8 <HAL_SPI_MspInit+0x1a4>)
 8005d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8005d20:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d26:	2302      	movs	r3, #2
 8005d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005d32:	2305      	movs	r3, #5
 8005d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d36:	f107 031c 	add.w	r3, r7, #28
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	481f      	ldr	r0, [pc, #124]	; (8005dbc <HAL_SPI_MspInit+0x1b8>)
 8005d3e:	f002 f859 	bl	8007df4 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8005d42:	4b1f      	ldr	r3, [pc, #124]	; (8005dc0 <HAL_SPI_MspInit+0x1bc>)
 8005d44:	4a1f      	ldr	r2, [pc, #124]	; (8005dc4 <HAL_SPI_MspInit+0x1c0>)
 8005d46:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005d48:	4b1d      	ldr	r3, [pc, #116]	; (8005dc0 <HAL_SPI_MspInit+0x1bc>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d4e:	4b1c      	ldr	r3, [pc, #112]	; (8005dc0 <HAL_SPI_MspInit+0x1bc>)
 8005d50:	2240      	movs	r2, #64	; 0x40
 8005d52:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d54:	4b1a      	ldr	r3, [pc, #104]	; (8005dc0 <HAL_SPI_MspInit+0x1bc>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d5a:	4b19      	ldr	r3, [pc, #100]	; (8005dc0 <HAL_SPI_MspInit+0x1bc>)
 8005d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d60:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d62:	4b17      	ldr	r3, [pc, #92]	; (8005dc0 <HAL_SPI_MspInit+0x1bc>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d68:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <HAL_SPI_MspInit+0x1bc>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005d6e:	4b14      	ldr	r3, [pc, #80]	; (8005dc0 <HAL_SPI_MspInit+0x1bc>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005d74:	4b12      	ldr	r3, [pc, #72]	; (8005dc0 <HAL_SPI_MspInit+0x1bc>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d7a:	4b11      	ldr	r3, [pc, #68]	; (8005dc0 <HAL_SPI_MspInit+0x1bc>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005d80:	480f      	ldr	r0, [pc, #60]	; (8005dc0 <HAL_SPI_MspInit+0x1bc>)
 8005d82:	f001 fc57 	bl	8007634 <HAL_DMA_Init>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <HAL_SPI_MspInit+0x18c>
      Error_Handler();
 8005d8c:	f7ff fe1e 	bl	80059cc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a0b      	ldr	r2, [pc, #44]	; (8005dc0 <HAL_SPI_MspInit+0x1bc>)
 8005d94:	649a      	str	r2, [r3, #72]	; 0x48
 8005d96:	4a0a      	ldr	r2, [pc, #40]	; (8005dc0 <HAL_SPI_MspInit+0x1bc>)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005d9c:	bf00      	nop
 8005d9e:	3730      	adds	r7, #48	; 0x30
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	40013000 	.word	0x40013000
 8005da8:	40023800 	.word	0x40023800
 8005dac:	40020000 	.word	0x40020000
 8005db0:	2001131c 	.word	0x2001131c
 8005db4:	40026410 	.word	0x40026410
 8005db8:	40003800 	.word	0x40003800
 8005dbc:	40020400 	.word	0x40020400
 8005dc0:	2001137c 	.word	0x2001137c
 8005dc4:	40026070 	.word	0x40026070

08005dc8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08c      	sub	sp, #48	; 0x30
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dd0:	f107 031c 	add.w	r3, r7, #28
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	605a      	str	r2, [r3, #4]
 8005dda:	609a      	str	r2, [r3, #8]
 8005ddc:	60da      	str	r2, [r3, #12]
 8005dde:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de8:	d12d      	bne.n	8005e46 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005dea:	2300      	movs	r3, #0
 8005dec:	61bb      	str	r3, [r7, #24]
 8005dee:	4b30      	ldr	r3, [pc, #192]	; (8005eb0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	4a2f      	ldr	r2, [pc, #188]	; (8005eb0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005df4:	f043 0301 	orr.w	r3, r3, #1
 8005df8:	6413      	str	r3, [r2, #64]	; 0x40
 8005dfa:	4b2d      	ldr	r3, [pc, #180]	; (8005eb0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	61bb      	str	r3, [r7, #24]
 8005e04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e06:	2300      	movs	r3, #0
 8005e08:	617b      	str	r3, [r7, #20]
 8005e0a:	4b29      	ldr	r3, [pc, #164]	; (8005eb0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0e:	4a28      	ldr	r2, [pc, #160]	; (8005eb0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005e10:	f043 0301 	orr.w	r3, r3, #1
 8005e14:	6313      	str	r3, [r2, #48]	; 0x30
 8005e16:	4b26      	ldr	r3, [pc, #152]	; (8005eb0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	617b      	str	r3, [r7, #20]
 8005e20:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8005e22:	f248 0302 	movw	r3, #32770	; 0x8002
 8005e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e28:	2302      	movs	r3, #2
 8005e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e30:	2300      	movs	r3, #0
 8005e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005e34:	2301      	movs	r3, #1
 8005e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e38:	f107 031c 	add.w	r3, r7, #28
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	481d      	ldr	r0, [pc, #116]	; (8005eb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005e40:	f001 ffd8 	bl	8007df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005e44:	e030      	b.n	8005ea8 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a1b      	ldr	r2, [pc, #108]	; (8005eb8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d12b      	bne.n	8005ea8 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005e50:	2300      	movs	r3, #0
 8005e52:	613b      	str	r3, [r7, #16]
 8005e54:	4b16      	ldr	r3, [pc, #88]	; (8005eb0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	4a15      	ldr	r2, [pc, #84]	; (8005eb0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005e5a:	f043 0304 	orr.w	r3, r3, #4
 8005e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8005e60:	4b13      	ldr	r3, [pc, #76]	; (8005eb0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	613b      	str	r3, [r7, #16]
 8005e6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]
 8005e70:	4b0f      	ldr	r3, [pc, #60]	; (8005eb0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e74:	4a0e      	ldr	r2, [pc, #56]	; (8005eb0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005e76:	f043 0302 	orr.w	r3, r3, #2
 8005e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8005e7c:	4b0c      	ldr	r3, [pc, #48]	; (8005eb0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005e88:	23c0      	movs	r3, #192	; 0xc0
 8005e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e90:	2301      	movs	r3, #1
 8005e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e94:	2300      	movs	r3, #0
 8005e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005e98:	2302      	movs	r3, #2
 8005e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e9c:	f107 031c 	add.w	r3, r7, #28
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4806      	ldr	r0, [pc, #24]	; (8005ebc <HAL_TIM_Encoder_MspInit+0xf4>)
 8005ea4:	f001 ffa6 	bl	8007df4 <HAL_GPIO_Init>
}
 8005ea8:	bf00      	nop
 8005eaa:	3730      	adds	r7, #48	; 0x30
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	40020000 	.word	0x40020000
 8005eb8:	40000800 	.word	0x40000800
 8005ebc:	40020400 	.word	0x40020400

08005ec0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a1c      	ldr	r2, [pc, #112]	; (8005f40 <HAL_TIM_Base_MspInit+0x80>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d116      	bne.n	8005f00 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	4b1b      	ldr	r3, [pc, #108]	; (8005f44 <HAL_TIM_Base_MspInit+0x84>)
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	4a1a      	ldr	r2, [pc, #104]	; (8005f44 <HAL_TIM_Base_MspInit+0x84>)
 8005edc:	f043 0302 	orr.w	r3, r3, #2
 8005ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ee2:	4b18      	ldr	r3, [pc, #96]	; (8005f44 <HAL_TIM_Base_MspInit+0x84>)
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8005eee:	2200      	movs	r2, #0
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	201d      	movs	r0, #29
 8005ef4:	f001 fb67 	bl	80075c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005ef8:	201d      	movs	r0, #29
 8005efa:	f001 fb80 	bl	80075fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8005efe:	e01a      	b.n	8005f36 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a10      	ldr	r2, [pc, #64]	; (8005f48 <HAL_TIM_Base_MspInit+0x88>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d115      	bne.n	8005f36 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60bb      	str	r3, [r7, #8]
 8005f0e:	4b0d      	ldr	r3, [pc, #52]	; (8005f44 <HAL_TIM_Base_MspInit+0x84>)
 8005f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f12:	4a0c      	ldr	r2, [pc, #48]	; (8005f44 <HAL_TIM_Base_MspInit+0x84>)
 8005f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f18:	6453      	str	r3, [r2, #68]	; 0x44
 8005f1a:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <HAL_TIM_Base_MspInit+0x84>)
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f22:	60bb      	str	r3, [r7, #8]
 8005f24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8005f26:	2200      	movs	r2, #0
 8005f28:	2102      	movs	r1, #2
 8005f2a:	2019      	movs	r0, #25
 8005f2c:	f001 fb4b 	bl	80075c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005f30:	2019      	movs	r0, #25
 8005f32:	f001 fb64 	bl	80075fe <HAL_NVIC_EnableIRQ>
}
 8005f36:	bf00      	nop
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	40000400 	.word	0x40000400
 8005f44:	40023800 	.word	0x40023800
 8005f48:	40014400 	.word	0x40014400

08005f4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f54:	f107 030c 	add.w	r3, r7, #12
 8005f58:	2200      	movs	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	605a      	str	r2, [r3, #4]
 8005f5e:	609a      	str	r2, [r3, #8]
 8005f60:	60da      	str	r2, [r3, #12]
 8005f62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a12      	ldr	r2, [pc, #72]	; (8005fb4 <HAL_TIM_MspPostInit+0x68>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d11d      	bne.n	8005faa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60bb      	str	r3, [r7, #8]
 8005f72:	4b11      	ldr	r3, [pc, #68]	; (8005fb8 <HAL_TIM_MspPostInit+0x6c>)
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f76:	4a10      	ldr	r2, [pc, #64]	; (8005fb8 <HAL_TIM_MspPostInit+0x6c>)
 8005f78:	f043 0302 	orr.w	r3, r3, #2
 8005f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f7e:	4b0e      	ldr	r3, [pc, #56]	; (8005fb8 <HAL_TIM_MspPostInit+0x6c>)
 8005f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	60bb      	str	r3, [r7, #8]
 8005f88:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005f8a:	2330      	movs	r3, #48	; 0x30
 8005f8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f8e:	2302      	movs	r3, #2
 8005f90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f96:	2300      	movs	r3, #0
 8005f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f9e:	f107 030c 	add.w	r3, r7, #12
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4805      	ldr	r0, [pc, #20]	; (8005fbc <HAL_TIM_MspPostInit+0x70>)
 8005fa6:	f001 ff25 	bl	8007df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005faa:	bf00      	nop
 8005fac:	3720      	adds	r7, #32
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	40000400 	.word	0x40000400
 8005fb8:	40023800 	.word	0x40023800
 8005fbc:	40020400 	.word	0x40020400

08005fc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08c      	sub	sp, #48	; 0x30
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fc8:	f107 031c 	add.w	r3, r7, #28
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	605a      	str	r2, [r3, #4]
 8005fd2:	609a      	str	r2, [r3, #8]
 8005fd4:	60da      	str	r2, [r3, #12]
 8005fd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a33      	ldr	r2, [pc, #204]	; (80060ac <HAL_UART_MspInit+0xec>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d12d      	bne.n	800603e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61bb      	str	r3, [r7, #24]
 8005fe6:	4b32      	ldr	r3, [pc, #200]	; (80060b0 <HAL_UART_MspInit+0xf0>)
 8005fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fea:	4a31      	ldr	r2, [pc, #196]	; (80060b0 <HAL_UART_MspInit+0xf0>)
 8005fec:	f043 0310 	orr.w	r3, r3, #16
 8005ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8005ff2:	4b2f      	ldr	r3, [pc, #188]	; (80060b0 <HAL_UART_MspInit+0xf0>)
 8005ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff6:	f003 0310 	and.w	r3, r3, #16
 8005ffa:	61bb      	str	r3, [r7, #24]
 8005ffc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ffe:	2300      	movs	r3, #0
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	4b2b      	ldr	r3, [pc, #172]	; (80060b0 <HAL_UART_MspInit+0xf0>)
 8006004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006006:	4a2a      	ldr	r2, [pc, #168]	; (80060b0 <HAL_UART_MspInit+0xf0>)
 8006008:	f043 0301 	orr.w	r3, r3, #1
 800600c:	6313      	str	r3, [r2, #48]	; 0x30
 800600e:	4b28      	ldr	r3, [pc, #160]	; (80060b0 <HAL_UART_MspInit+0xf0>)
 8006010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800601a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800601e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006020:	2302      	movs	r3, #2
 8006022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006024:	2300      	movs	r3, #0
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006028:	2300      	movs	r3, #0
 800602a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800602c:	2307      	movs	r3, #7
 800602e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006030:	f107 031c 	add.w	r3, r7, #28
 8006034:	4619      	mov	r1, r3
 8006036:	481f      	ldr	r0, [pc, #124]	; (80060b4 <HAL_UART_MspInit+0xf4>)
 8006038:	f001 fedc 	bl	8007df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800603c:	e031      	b.n	80060a2 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a1d      	ldr	r2, [pc, #116]	; (80060b8 <HAL_UART_MspInit+0xf8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d12c      	bne.n	80060a2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006048:	2300      	movs	r3, #0
 800604a:	613b      	str	r3, [r7, #16]
 800604c:	4b18      	ldr	r3, [pc, #96]	; (80060b0 <HAL_UART_MspInit+0xf0>)
 800604e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006050:	4a17      	ldr	r2, [pc, #92]	; (80060b0 <HAL_UART_MspInit+0xf0>)
 8006052:	f043 0320 	orr.w	r3, r3, #32
 8006056:	6453      	str	r3, [r2, #68]	; 0x44
 8006058:	4b15      	ldr	r3, [pc, #84]	; (80060b0 <HAL_UART_MspInit+0xf0>)
 800605a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605c:	f003 0320 	and.w	r3, r3, #32
 8006060:	613b      	str	r3, [r7, #16]
 8006062:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	4b11      	ldr	r3, [pc, #68]	; (80060b0 <HAL_UART_MspInit+0xf0>)
 800606a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606c:	4a10      	ldr	r2, [pc, #64]	; (80060b0 <HAL_UART_MspInit+0xf0>)
 800606e:	f043 0301 	orr.w	r3, r3, #1
 8006072:	6313      	str	r3, [r2, #48]	; 0x30
 8006074:	4b0e      	ldr	r3, [pc, #56]	; (80060b0 <HAL_UART_MspInit+0xf0>)
 8006076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	60fb      	str	r3, [r7, #12]
 800607e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006080:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006086:	2302      	movs	r3, #2
 8006088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800608a:	2301      	movs	r3, #1
 800608c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800608e:	2300      	movs	r3, #0
 8006090:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006092:	2308      	movs	r3, #8
 8006094:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006096:	f107 031c 	add.w	r3, r7, #28
 800609a:	4619      	mov	r1, r3
 800609c:	4805      	ldr	r0, [pc, #20]	; (80060b4 <HAL_UART_MspInit+0xf4>)
 800609e:	f001 fea9 	bl	8007df4 <HAL_GPIO_Init>
}
 80060a2:	bf00      	nop
 80060a4:	3730      	adds	r7, #48	; 0x30
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	40011000 	.word	0x40011000
 80060b0:	40023800 	.word	0x40023800
 80060b4:	40020000 	.word	0x40020000
 80060b8:	40011400 	.word	0x40011400

080060bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80060c0:	e7fe      	b.n	80060c0 <NMI_Handler+0x4>

080060c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060c2:	b480      	push	{r7}
 80060c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80060c6:	e7fe      	b.n	80060c6 <HardFault_Handler+0x4>

080060c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80060cc:	e7fe      	b.n	80060cc <MemManage_Handler+0x4>

080060ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80060ce:	b480      	push	{r7}
 80060d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80060d2:	e7fe      	b.n	80060d2 <BusFault_Handler+0x4>

080060d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80060d8:	e7fe      	b.n	80060d8 <UsageFault_Handler+0x4>

080060da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80060da:	b480      	push	{r7}
 80060dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80060de:	bf00      	nop
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80060ec:	bf00      	nop
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80060f6:	b480      	push	{r7}
 80060f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80060fa:	bf00      	nop
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006108:	f000 f8ce 	bl	80062a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800610c:	bf00      	nop
 800610e:	bd80      	pop	{r7, pc}

08006110 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006114:	4802      	ldr	r0, [pc, #8]	; (8006120 <DMA1_Stream4_IRQHandler+0x10>)
 8006116:	f001 fc03 	bl	8007920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800611a:	bf00      	nop
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	2001137c 	.word	0x2001137c

08006124 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006128:	4802      	ldr	r0, [pc, #8]	; (8006134 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800612a:	f004 fe39 	bl	800ada0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800612e:	bf00      	nop
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	200114b4 	.word	0x200114b4

08006138 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800613c:	4802      	ldr	r0, [pc, #8]	; (8006148 <TIM3_IRQHandler+0x10>)
 800613e:	f004 fe2f 	bl	800ada0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006142:	bf00      	nop
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	20011424 	.word	0x20011424

0800614c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(record_pin_Pin);
 8006150:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006154:	f001 ffec 	bl	8008130 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006158:	bf00      	nop
 800615a:	bd80      	pop	{r7, pc}

0800615c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8006160:	4802      	ldr	r0, [pc, #8]	; (800616c <DMA2_Stream0_IRQHandler+0x10>)
 8006162:	f001 fbdd 	bl	8007920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006166:	bf00      	nop
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	2001131c 	.word	0x2001131c

08006170 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006174:	4802      	ldr	r0, [pc, #8]	; (8006180 <DMA2_Stream4_IRQHandler+0x10>)
 8006176:	f001 fbd3 	bl	8007920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800617a:	bf00      	nop
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	200111b8 	.word	0x200111b8

08006184 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006184:	b480      	push	{r7}
 8006186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006188:	4b08      	ldr	r3, [pc, #32]	; (80061ac <SystemInit+0x28>)
 800618a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618e:	4a07      	ldr	r2, [pc, #28]	; (80061ac <SystemInit+0x28>)
 8006190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006198:	4b04      	ldr	r3, [pc, #16]	; (80061ac <SystemInit+0x28>)
 800619a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800619e:	609a      	str	r2, [r3, #8]
#endif
}
 80061a0:	bf00      	nop
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	e000ed00 	.word	0xe000ed00

080061b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80061b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80061e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80061b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80061b6:	e003      	b.n	80061c0 <LoopCopyDataInit>

080061b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80061b8:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80061ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80061bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80061be:	3104      	adds	r1, #4

080061c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80061c0:	480b      	ldr	r0, [pc, #44]	; (80061f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80061c2:	4b0c      	ldr	r3, [pc, #48]	; (80061f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80061c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80061c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80061c8:	d3f6      	bcc.n	80061b8 <CopyDataInit>
  ldr  r2, =_sbss
 80061ca:	4a0b      	ldr	r2, [pc, #44]	; (80061f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80061cc:	e002      	b.n	80061d4 <LoopFillZerobss>

080061ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80061ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80061d0:	f842 3b04 	str.w	r3, [r2], #4

080061d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80061d4:	4b09      	ldr	r3, [pc, #36]	; (80061fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80061d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80061d8:	d3f9      	bcc.n	80061ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80061da:	f7ff ffd3 	bl	8006184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80061de:	f006 f85b 	bl	800c298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80061e2:	f7fe fbc3 	bl	800496c <main>
  bx  lr    
 80061e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80061e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80061ec:	0800e5b0 	.word	0x0800e5b0
  ldr  r0, =_sdata
 80061f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80061f4:	2000061c 	.word	0x2000061c
  ldr  r2, =_sbss
 80061f8:	2000061c 	.word	0x2000061c
  ldr  r3, = _ebss
 80061fc:	20011588 	.word	0x20011588

08006200 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006200:	e7fe      	b.n	8006200 <ADC_IRQHandler>
	...

08006204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006208:	4b0e      	ldr	r3, [pc, #56]	; (8006244 <HAL_Init+0x40>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a0d      	ldr	r2, [pc, #52]	; (8006244 <HAL_Init+0x40>)
 800620e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006212:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006214:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <HAL_Init+0x40>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a0a      	ldr	r2, [pc, #40]	; (8006244 <HAL_Init+0x40>)
 800621a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800621e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006220:	4b08      	ldr	r3, [pc, #32]	; (8006244 <HAL_Init+0x40>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a07      	ldr	r2, [pc, #28]	; (8006244 <HAL_Init+0x40>)
 8006226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800622a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800622c:	2003      	movs	r0, #3
 800622e:	f001 f9bf 	bl	80075b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006232:	2000      	movs	r0, #0
 8006234:	f000 f808 	bl	8006248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006238:	f7ff fbce 	bl	80059d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	40023c00 	.word	0x40023c00

08006248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006250:	4b12      	ldr	r3, [pc, #72]	; (800629c <HAL_InitTick+0x54>)
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	4b12      	ldr	r3, [pc, #72]	; (80062a0 <HAL_InitTick+0x58>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	4619      	mov	r1, r3
 800625a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800625e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006262:	fbb2 f3f3 	udiv	r3, r2, r3
 8006266:	4618      	mov	r0, r3
 8006268:	f001 f9d7 	bl	800761a <HAL_SYSTICK_Config>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e00e      	b.n	8006294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b0f      	cmp	r3, #15
 800627a:	d80a      	bhi.n	8006292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800627c:	2200      	movs	r2, #0
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	f04f 30ff 	mov.w	r0, #4294967295
 8006284:	f001 f99f 	bl	80075c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006288:	4a06      	ldr	r2, [pc, #24]	; (80062a4 <HAL_InitTick+0x5c>)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	e000      	b.n	8006294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
}
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	200005ac 	.word	0x200005ac
 80062a0:	200005b4 	.word	0x200005b4
 80062a4:	200005b0 	.word	0x200005b0

080062a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80062ac:	4b06      	ldr	r3, [pc, #24]	; (80062c8 <HAL_IncTick+0x20>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	4b06      	ldr	r3, [pc, #24]	; (80062cc <HAL_IncTick+0x24>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4413      	add	r3, r2
 80062b8:	4a04      	ldr	r2, [pc, #16]	; (80062cc <HAL_IncTick+0x24>)
 80062ba:	6013      	str	r3, [r2, #0]
}
 80062bc:	bf00      	nop
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	200005b4 	.word	0x200005b4
 80062cc:	20011584 	.word	0x20011584

080062d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  return uwTick;
 80062d4:	4b03      	ldr	r3, [pc, #12]	; (80062e4 <HAL_GetTick+0x14>)
 80062d6:	681b      	ldr	r3, [r3, #0]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	20011584 	.word	0x20011584

080062e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80062f0:	f7ff ffee 	bl	80062d0 <HAL_GetTick>
 80062f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006300:	d005      	beq.n	800630e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006302:	4b0a      	ldr	r3, [pc, #40]	; (800632c <HAL_Delay+0x44>)
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4413      	add	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800630e:	bf00      	nop
 8006310:	f7ff ffde 	bl	80062d0 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	429a      	cmp	r2, r3
 800631e:	d8f7      	bhi.n	8006310 <HAL_Delay+0x28>
  {
  }
}
 8006320:	bf00      	nop
 8006322:	bf00      	nop
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	200005b4 	.word	0x200005b4

08006330 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006338:	2300      	movs	r3, #0
 800633a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e033      	b.n	80063ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	2b00      	cmp	r3, #0
 800634c:	d109      	bne.n	8006362 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff fb6a 	bl	8005a28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	f003 0310 	and.w	r3, r3, #16
 800636a:	2b00      	cmp	r3, #0
 800636c:	d118      	bne.n	80063a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006376:	f023 0302 	bic.w	r3, r3, #2
 800637a:	f043 0202 	orr.w	r2, r3, #2
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fbde 	bl	8006b44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	f023 0303 	bic.w	r3, r3, #3
 8006396:	f043 0201 	orr.w	r2, r3, #1
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	641a      	str	r2, [r3, #64]	; 0x40
 800639e:	e001      	b.n	80063a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
	...

080063b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d101      	bne.n	80063d2 <HAL_ADC_Start+0x1a>
 80063ce:	2302      	movs	r3, #2
 80063d0:	e097      	b.n	8006502 <HAL_ADC_Start+0x14a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d018      	beq.n	800641a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0201 	orr.w	r2, r2, #1
 80063f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80063f8:	4b45      	ldr	r3, [pc, #276]	; (8006510 <HAL_ADC_Start+0x158>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a45      	ldr	r2, [pc, #276]	; (8006514 <HAL_ADC_Start+0x15c>)
 80063fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006402:	0c9a      	lsrs	r2, r3, #18
 8006404:	4613      	mov	r3, r2
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	4413      	add	r3, r2
 800640a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800640c:	e002      	b.n	8006414 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	3b01      	subs	r3, #1
 8006412:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1f9      	bne.n	800640e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b01      	cmp	r3, #1
 8006426:	d15f      	bne.n	80064e8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006430:	f023 0301 	bic.w	r3, r3, #1
 8006434:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006446:	2b00      	cmp	r3, #0
 8006448:	d007      	beq.n	800645a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006452:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006466:	d106      	bne.n	8006476 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800646c:	f023 0206 	bic.w	r2, r3, #6
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	645a      	str	r2, [r3, #68]	; 0x44
 8006474:	e002      	b.n	800647c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006484:	4b24      	ldr	r3, [pc, #144]	; (8006518 <HAL_ADC_Start+0x160>)
 8006486:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006490:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f003 031f 	and.w	r3, r3, #31
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10f      	bne.n	80064be <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d129      	bne.n	8006500 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80064ba:	609a      	str	r2, [r3, #8]
 80064bc:	e020      	b.n	8006500 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a16      	ldr	r2, [pc, #88]	; (800651c <HAL_ADC_Start+0x164>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d11b      	bne.n	8006500 <HAL_ADC_Start+0x148>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d114      	bne.n	8006500 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80064e4:	609a      	str	r2, [r3, #8]
 80064e6:	e00b      	b.n	8006500 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ec:	f043 0210 	orr.w	r2, r3, #16
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f8:	f043 0201 	orr.w	r2, r3, #1
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	200005ac 	.word	0x200005ac
 8006514:	431bde83 	.word	0x431bde83
 8006518:	40012300 	.word	0x40012300
 800651c:	40012000 	.word	0x40012000

08006520 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800653c:	d113      	bne.n	8006566 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800654c:	d10b      	bne.n	8006566 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	f043 0220 	orr.w	r2, r3, #32
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e063      	b.n	800662e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006566:	f7ff feb3 	bl	80062d0 <HAL_GetTick>
 800656a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800656c:	e021      	b.n	80065b2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006574:	d01d      	beq.n	80065b2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d007      	beq.n	800658c <HAL_ADC_PollForConversion+0x6c>
 800657c:	f7ff fea8 	bl	80062d0 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	429a      	cmp	r2, r3
 800658a:	d212      	bcs.n	80065b2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b02      	cmp	r3, #2
 8006598:	d00b      	beq.n	80065b2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	f043 0204 	orr.w	r2, r3, #4
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e03d      	b.n	800662e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d1d6      	bne.n	800656e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f06f 0212 	mvn.w	r2, #18
 80065c8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d123      	bne.n	800662c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d11f      	bne.n	800662c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d006      	beq.n	8006608 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006604:	2b00      	cmp	r3, #0
 8006606:	d111      	bne.n	800662c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d105      	bne.n	800662c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006624:	f043 0201 	orr.w	r2, r3, #1
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800664e:	2b01      	cmp	r3, #1
 8006650:	d101      	bne.n	8006656 <HAL_ADC_Start_DMA+0x1e>
 8006652:	2302      	movs	r3, #2
 8006654:	e0ce      	b.n	80067f4 <HAL_ADC_Start_DMA+0x1bc>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b01      	cmp	r3, #1
 800666a:	d018      	beq.n	800669e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0201 	orr.w	r2, r2, #1
 800667a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800667c:	4b5f      	ldr	r3, [pc, #380]	; (80067fc <HAL_ADC_Start_DMA+0x1c4>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a5f      	ldr	r2, [pc, #380]	; (8006800 <HAL_ADC_Start_DMA+0x1c8>)
 8006682:	fba2 2303 	umull	r2, r3, r2, r3
 8006686:	0c9a      	lsrs	r2, r3, #18
 8006688:	4613      	mov	r3, r2
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	4413      	add	r3, r2
 800668e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006690:	e002      	b.n	8006698 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	3b01      	subs	r3, #1
 8006696:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1f9      	bne.n	8006692 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ac:	d107      	bne.n	80066be <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	f040 8086 	bne.w	80067da <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80066d6:	f023 0301 	bic.w	r3, r3, #1
 80066da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d007      	beq.n	8006700 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80066f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800670c:	d106      	bne.n	800671c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006712:	f023 0206 	bic.w	r2, r3, #6
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	645a      	str	r2, [r3, #68]	; 0x44
 800671a:	e002      	b.n	8006722 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800672a:	4b36      	ldr	r3, [pc, #216]	; (8006804 <HAL_ADC_Start_DMA+0x1cc>)
 800672c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006732:	4a35      	ldr	r2, [pc, #212]	; (8006808 <HAL_ADC_Start_DMA+0x1d0>)
 8006734:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	4a34      	ldr	r2, [pc, #208]	; (800680c <HAL_ADC_Start_DMA+0x1d4>)
 800673c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006742:	4a33      	ldr	r2, [pc, #204]	; (8006810 <HAL_ADC_Start_DMA+0x1d8>)
 8006744:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800674e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800675e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689a      	ldr	r2, [r3, #8]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800676e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	334c      	adds	r3, #76	; 0x4c
 800677a:	4619      	mov	r1, r3
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f001 f806 	bl	8007790 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f003 031f 	and.w	r3, r3, #31
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10f      	bne.n	80067b0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d129      	bne.n	80067f2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80067ac:	609a      	str	r2, [r3, #8]
 80067ae:	e020      	b.n	80067f2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a17      	ldr	r2, [pc, #92]	; (8006814 <HAL_ADC_Start_DMA+0x1dc>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d11b      	bne.n	80067f2 <HAL_ADC_Start_DMA+0x1ba>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d114      	bne.n	80067f2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689a      	ldr	r2, [r3, #8]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80067d6:	609a      	str	r2, [r3, #8]
 80067d8:	e00b      	b.n	80067f2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	f043 0210 	orr.w	r2, r3, #16
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ea:	f043 0201 	orr.w	r2, r3, #1
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	200005ac 	.word	0x200005ac
 8006800:	431bde83 	.word	0x431bde83
 8006804:	40012300 	.word	0x40012300
 8006808:	08006d3d 	.word	0x08006d3d
 800680c:	08006df7 	.word	0x08006df7
 8006810:	08006e13 	.word	0x08006e13
 8006814:	40012000 	.word	0x40012000

08006818 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <HAL_ADC_Stop_DMA+0x1a>
 800682e:	2302      	movs	r3, #2
 8006830:	e048      	b.n	80068c4 <HAL_ADC_Stop_DMA+0xac>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0201 	bic.w	r2, r2, #1
 8006848:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d130      	bne.n	80068ba <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006866:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d10f      	bne.n	8006896 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687a:	4618      	mov	r0, r3
 800687c:	f000 ffe0 	bl	8007840 <HAL_DMA_Abort>
 8006880:	4603      	mov	r3, r0
 8006882:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d005      	beq.n	8006896 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80068a4:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80068ae:	f023 0301 	bic.w	r3, r3, #1
 80068b2:	f043 0201 	orr.w	r2, r3, #1
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d101      	bne.n	80068fc <HAL_ADC_ConfigChannel+0x1c>
 80068f8:	2302      	movs	r3, #2
 80068fa:	e113      	b.n	8006b24 <HAL_ADC_ConfigChannel+0x244>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b09      	cmp	r3, #9
 800690a:	d925      	bls.n	8006958 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68d9      	ldr	r1, [r3, #12]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	b29b      	uxth	r3, r3
 8006918:	461a      	mov	r2, r3
 800691a:	4613      	mov	r3, r2
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	4413      	add	r3, r2
 8006920:	3b1e      	subs	r3, #30
 8006922:	2207      	movs	r2, #7
 8006924:	fa02 f303 	lsl.w	r3, r2, r3
 8006928:	43da      	mvns	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	400a      	ands	r2, r1
 8006930:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68d9      	ldr	r1, [r3, #12]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	b29b      	uxth	r3, r3
 8006942:	4618      	mov	r0, r3
 8006944:	4603      	mov	r3, r0
 8006946:	005b      	lsls	r3, r3, #1
 8006948:	4403      	add	r3, r0
 800694a:	3b1e      	subs	r3, #30
 800694c:	409a      	lsls	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	60da      	str	r2, [r3, #12]
 8006956:	e022      	b.n	800699e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6919      	ldr	r1, [r3, #16]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	b29b      	uxth	r3, r3
 8006964:	461a      	mov	r2, r3
 8006966:	4613      	mov	r3, r2
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	4413      	add	r3, r2
 800696c:	2207      	movs	r2, #7
 800696e:	fa02 f303 	lsl.w	r3, r2, r3
 8006972:	43da      	mvns	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	400a      	ands	r2, r1
 800697a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6919      	ldr	r1, [r3, #16]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	689a      	ldr	r2, [r3, #8]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	4618      	mov	r0, r3
 800698e:	4603      	mov	r3, r0
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	4403      	add	r3, r0
 8006994:	409a      	lsls	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	2b06      	cmp	r3, #6
 80069a4:	d824      	bhi.n	80069f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	4613      	mov	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	3b05      	subs	r3, #5
 80069b8:	221f      	movs	r2, #31
 80069ba:	fa02 f303 	lsl.w	r3, r2, r3
 80069be:	43da      	mvns	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	400a      	ands	r2, r1
 80069c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	4618      	mov	r0, r3
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	3b05      	subs	r3, #5
 80069e2:	fa00 f203 	lsl.w	r2, r0, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	635a      	str	r2, [r3, #52]	; 0x34
 80069ee:	e04c      	b.n	8006a8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	2b0c      	cmp	r3, #12
 80069f6:	d824      	bhi.n	8006a42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	4613      	mov	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	3b23      	subs	r3, #35	; 0x23
 8006a0a:	221f      	movs	r2, #31
 8006a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a10:	43da      	mvns	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	400a      	ands	r2, r1
 8006a18:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	4618      	mov	r0, r3
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	3b23      	subs	r3, #35	; 0x23
 8006a34:	fa00 f203 	lsl.w	r2, r0, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8006a40:	e023      	b.n	8006a8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	3b41      	subs	r3, #65	; 0x41
 8006a54:	221f      	movs	r2, #31
 8006a56:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5a:	43da      	mvns	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	400a      	ands	r2, r1
 8006a62:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	4618      	mov	r0, r3
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	3b41      	subs	r3, #65	; 0x41
 8006a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a8a:	4b29      	ldr	r3, [pc, #164]	; (8006b30 <HAL_ADC_ConfigChannel+0x250>)
 8006a8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a28      	ldr	r2, [pc, #160]	; (8006b34 <HAL_ADC_ConfigChannel+0x254>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d10f      	bne.n	8006ab8 <HAL_ADC_ConfigChannel+0x1d8>
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b12      	cmp	r3, #18
 8006a9e:	d10b      	bne.n	8006ab8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a1d      	ldr	r2, [pc, #116]	; (8006b34 <HAL_ADC_ConfigChannel+0x254>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d12b      	bne.n	8006b1a <HAL_ADC_ConfigChannel+0x23a>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a1c      	ldr	r2, [pc, #112]	; (8006b38 <HAL_ADC_ConfigChannel+0x258>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d003      	beq.n	8006ad4 <HAL_ADC_ConfigChannel+0x1f4>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b11      	cmp	r3, #17
 8006ad2:	d122      	bne.n	8006b1a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a11      	ldr	r2, [pc, #68]	; (8006b38 <HAL_ADC_ConfigChannel+0x258>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d111      	bne.n	8006b1a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006af6:	4b11      	ldr	r3, [pc, #68]	; (8006b3c <HAL_ADC_ConfigChannel+0x25c>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a11      	ldr	r2, [pc, #68]	; (8006b40 <HAL_ADC_ConfigChannel+0x260>)
 8006afc:	fba2 2303 	umull	r2, r3, r2, r3
 8006b00:	0c9a      	lsrs	r2, r3, #18
 8006b02:	4613      	mov	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	005b      	lsls	r3, r3, #1
 8006b0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006b0c:	e002      	b.n	8006b14 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	3b01      	subs	r3, #1
 8006b12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1f9      	bne.n	8006b0e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	40012300 	.word	0x40012300
 8006b34:	40012000 	.word	0x40012000
 8006b38:	10000012 	.word	0x10000012
 8006b3c:	200005ac 	.word	0x200005ac
 8006b40:	431bde83 	.word	0x431bde83

08006b44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b4c:	4b79      	ldr	r3, [pc, #484]	; (8006d34 <ADC_Init+0x1f0>)
 8006b4e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	431a      	orrs	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6859      	ldr	r1, [r3, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	021a      	lsls	r2, r3, #8
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006b9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6859      	ldr	r1, [r3, #4]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6899      	ldr	r1, [r3, #8]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68da      	ldr	r2, [r3, #12]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd6:	4a58      	ldr	r2, [pc, #352]	; (8006d38 <ADC_Init+0x1f4>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d022      	beq.n	8006c22 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006bea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6899      	ldr	r1, [r3, #8]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006c0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6899      	ldr	r1, [r3, #8]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	609a      	str	r2, [r3, #8]
 8006c20:	e00f      	b.n	8006c42 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006c40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0202 	bic.w	r2, r2, #2
 8006c50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6899      	ldr	r1, [r3, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	7e1b      	ldrb	r3, [r3, #24]
 8006c5c:	005a      	lsls	r2, r3, #1
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	430a      	orrs	r2, r1
 8006c64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d01b      	beq.n	8006ca8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006c8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6859      	ldr	r1, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	035a      	lsls	r2, r3, #13
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	605a      	str	r2, [r3, #4]
 8006ca6:	e007      	b.n	8006cb8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	051a      	lsls	r2, r3, #20
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006cec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6899      	ldr	r1, [r3, #8]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006cfa:	025a      	lsls	r2, r3, #9
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6899      	ldr	r1, [r3, #8]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	029a      	lsls	r2, r3, #10
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	609a      	str	r2, [r3, #8]
}
 8006d28:	bf00      	nop
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	40012300 	.word	0x40012300
 8006d38:	0f000001 	.word	0x0f000001

08006d3c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d48:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d13c      	bne.n	8006dd0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d12b      	bne.n	8006dc8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d127      	bne.n	8006dc8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d006      	beq.n	8006d94 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d119      	bne.n	8006dc8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f022 0220 	bic.w	r2, r2, #32
 8006da2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d105      	bne.n	8006dc8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc0:	f043 0201 	orr.w	r2, r3, #1
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f7fe fdc7 	bl	800595c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006dce:	e00e      	b.n	8006dee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd4:	f003 0310 	and.w	r3, r3, #16
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7ff fd75 	bl	80068cc <HAL_ADC_ErrorCallback>
}
 8006de2:	e004      	b.n	8006dee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	4798      	blx	r3
}
 8006dee:	bf00      	nop
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e02:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f7fe fd99 	bl	800593c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e0a:	bf00      	nop
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b084      	sub	sp, #16
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2240      	movs	r2, #64	; 0x40
 8006e24:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2a:	f043 0204 	orr.w	r2, r3, #4
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f7ff fd4a 	bl	80068cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e38:	bf00      	nop
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	617b      	str	r3, [r7, #20]
 8006e50:	2300      	movs	r3, #0
 8006e52:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d101      	bne.n	8006e62 <HAL_ADCEx_InjectedStart+0x22>
 8006e5e:	2302      	movs	r3, #2
 8006e60:	e0aa      	b.n	8006fb8 <HAL_ADCEx_InjectedStart+0x178>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d018      	beq.n	8006eaa <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689a      	ldr	r2, [r3, #8]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0201 	orr.w	r2, r2, #1
 8006e86:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006e88:	4b4e      	ldr	r3, [pc, #312]	; (8006fc4 <HAL_ADCEx_InjectedStart+0x184>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a4e      	ldr	r2, [pc, #312]	; (8006fc8 <HAL_ADCEx_InjectedStart+0x188>)
 8006e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e92:	0c9a      	lsrs	r2, r3, #18
 8006e94:	4613      	mov	r3, r2
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	4413      	add	r3, r2
 8006e9a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006e9c:	e002      	b.n	8006ea4 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1f9      	bne.n	8006e9e <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d172      	bne.n	8006f9e <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006ec0:	f023 0301 	bic.w	r3, r3, #1
 8006ec4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d102      	bne.n	8006ede <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f06f 0204 	mvn.w	r2, #4
 8006eee:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ef0:	4b36      	ldr	r3, [pc, #216]	; (8006fcc <HAL_ADCEx_InjectedStart+0x18c>)
 8006ef2:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f003 031f 	and.w	r3, r3, #31
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d124      	bne.n	8006f4a <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	bf0c      	ite	eq
 8006f0e:	2301      	moveq	r3, #1
 8006f10:	2300      	movne	r3, #0
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	bf0c      	ite	eq
 8006f24:	2301      	moveq	r3, #1
 8006f26:	2300      	movne	r3, #0
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d041      	beq.n	8006fb6 <HAL_ADCEx_InjectedStart+0x176>
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d03e      	beq.n	8006fb6 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006f46:	609a      	str	r2, [r3, #8]
 8006f48:	e035      	b.n	8006fb6 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	bf0c      	ite	eq
 8006f58:	2301      	moveq	r3, #1
 8006f5a:	2300      	movne	r3, #0
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	bf0c      	ite	eq
 8006f6e:	2301      	moveq	r3, #1
 8006f70:	2300      	movne	r3, #0
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a15      	ldr	r2, [pc, #84]	; (8006fd0 <HAL_ADCEx_InjectedStart+0x190>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d11a      	bne.n	8006fb6 <HAL_ADCEx_InjectedStart+0x176>
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d017      	beq.n	8006fb6 <HAL_ADCEx_InjectedStart+0x176>
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d014      	beq.n	8006fb6 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006f9a:	609a      	str	r2, [r3, #8]
 8006f9c:	e00b      	b.n	8006fb6 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	f043 0210 	orr.w	r2, r3, #16
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fae:	f043 0201 	orr.w	r2, r3, #1
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	371c      	adds	r7, #28
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	200005ac 	.word	0x200005ac
 8006fc8:	431bde83 	.word	0x431bde83
 8006fcc:	40012300 	.word	0x40012300
 8006fd0:	40012000 	.word	0x40012000

08006fd4 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d101      	bne.n	8006fee <HAL_ADCEx_InjectedStop+0x1a>
 8006fea:	2302      	movs	r3, #2
 8006fec:	e037      	b.n	800705e <HAL_ADCEx_InjectedStop+0x8a>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d120      	bne.n	8007044 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800700c:	2b00      	cmp	r3, #0
 800700e:	d119      	bne.n	8007044 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f022 0201 	bic.w	r2, r2, #1
 800701e:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d112      	bne.n	8007054 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007036:	f023 0301 	bic.w	r3, r3, #1
 800703a:	f043 0201 	orr.w	r2, r3, #1
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007042:	e007      	b.n	8007054 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007048:	f043 0220 	orr.w	r2, r3, #32
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800705c:	7bfb      	ldrb	r3, [r7, #15]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
	...

0800706c <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f06f 0204 	mvn.w	r2, #4
 8007082:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	3b01      	subs	r3, #1
 8007088:	2b03      	cmp	r3, #3
 800708a:	d81f      	bhi.n	80070cc <HAL_ADCEx_InjectedGetValue+0x60>
 800708c:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <HAL_ADCEx_InjectedGetValue+0x28>)
 800708e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007092:	bf00      	nop
 8007094:	080070c3 	.word	0x080070c3
 8007098:	080070b9 	.word	0x080070b9
 800709c:	080070af 	.word	0x080070af
 80070a0:	080070a5 	.word	0x080070a5
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070aa:	60fb      	str	r3, [r7, #12]
    }  
    break;
 80070ac:	e00f      	b.n	80070ce <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b4:	60fb      	str	r3, [r7, #12]
    }  
    break;
 80070b6:	e00a      	b.n	80070ce <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	60fb      	str	r3, [r7, #12]
    }
    break;
 80070c0:	e005      	b.n	80070ce <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c8:	60fb      	str	r3, [r7, #12]
    }
    break;
 80070ca:	e000      	b.n	80070ce <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 80070cc:	bf00      	nop
  }
  return tmp;
 80070ce:	68fb      	ldr	r3, [r7, #12]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d101      	bne.n	80070f4 <HAL_ADCEx_InjectedConfigChannel+0x18>
 80070f0:	2302      	movs	r3, #2
 80070f2:	e17e      	b.n	80073f2 <HAL_ADCEx_InjectedConfigChannel+0x316>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b09      	cmp	r3, #9
 8007102:	d925      	bls.n	8007150 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68d9      	ldr	r1, [r3, #12]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	b29b      	uxth	r3, r3
 8007110:	461a      	mov	r2, r3
 8007112:	4613      	mov	r3, r2
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	4413      	add	r3, r2
 8007118:	3b1e      	subs	r3, #30
 800711a:	2207      	movs	r2, #7
 800711c:	fa02 f303 	lsl.w	r3, r2, r3
 8007120:	43da      	mvns	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	400a      	ands	r2, r1
 8007128:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68d9      	ldr	r1, [r3, #12]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	b29b      	uxth	r3, r3
 800713a:	4618      	mov	r0, r3
 800713c:	4603      	mov	r3, r0
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	4403      	add	r3, r0
 8007142:	3b1e      	subs	r3, #30
 8007144:	409a      	lsls	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	60da      	str	r2, [r3, #12]
 800714e:	e022      	b.n	8007196 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6919      	ldr	r1, [r3, #16]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	461a      	mov	r2, r3
 800715e:	4613      	mov	r3, r2
 8007160:	005b      	lsls	r3, r3, #1
 8007162:	4413      	add	r3, r2
 8007164:	2207      	movs	r2, #7
 8007166:	fa02 f303 	lsl.w	r3, r2, r3
 800716a:	43da      	mvns	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	400a      	ands	r2, r1
 8007172:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6919      	ldr	r1, [r3, #16]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	689a      	ldr	r2, [r3, #8]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	b29b      	uxth	r3, r3
 8007184:	4618      	mov	r0, r3
 8007186:	4603      	mov	r3, r0
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	4403      	add	r3, r0
 800718c:	409a      	lsls	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80071a4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	3b01      	subs	r3, #1
 80071b2:	051a      	lsls	r2, r3, #20
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	430a      	orrs	r2, r1
 80071ba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	3303      	adds	r3, #3
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	461a      	mov	r2, r3
 80071d8:	4613      	mov	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	221f      	movs	r2, #31
 80071e0:	fa02 f303 	lsl.w	r3, r2, r3
 80071e4:	43da      	mvns	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	400a      	ands	r2, r1
 80071ec:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	4618      	mov	r0, r3
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	b2da      	uxtb	r2, r3
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	b2db      	uxtb	r3, r3
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	b2db      	uxtb	r3, r3
 800720c:	3303      	adds	r3, #3
 800720e:	b2db      	uxtb	r3, r3
 8007210:	461a      	mov	r2, r3
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	fa00 f203 	lsl.w	r2, r0, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	430a      	orrs	r2, r1
 8007222:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	4a75      	ldr	r2, [pc, #468]	; (8007400 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d022      	beq.n	8007274 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800723c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6899      	ldr	r1, [r3, #8]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	699a      	ldr	r2, [r3, #24]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800725e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6899      	ldr	r1, [r3, #8]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	69da      	ldr	r2, [r3, #28]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	609a      	str	r2, [r3, #8]
 8007272:	e00f      	b.n	8007294 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689a      	ldr	r2, [r3, #8]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8007282:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689a      	ldr	r2, [r3, #8]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007292:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	7d5b      	ldrb	r3, [r3, #21]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d008      	beq.n	80072ae <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072aa:	605a      	str	r2, [r3, #4]
 80072ac:	e007      	b.n	80072be <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072bc:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	7d1b      	ldrb	r3, [r3, #20]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d008      	beq.n	80072d8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80072d4:	605a      	str	r2, [r3, #4]
 80072d6:	e007      	b.n	80072e8 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685a      	ldr	r2, [r3, #4]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80072e6:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	2b03      	cmp	r3, #3
 80072ee:	d02e      	beq.n	800734e <HAL_ADCEx_InjectedConfigChannel+0x272>
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d840      	bhi.n	8007376 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d002      	beq.n	80072fe <HAL_ADCEx_InjectedConfigChannel+0x222>
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d014      	beq.n	8007326 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80072fc:	e03b      	b.n	8007376 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	6812      	ldr	r2, [r2, #0]
 8007308:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800730c:	f023 030f 	bic.w	r3, r3, #15
 8007310:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6959      	ldr	r1, [r3, #20]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	68da      	ldr	r2, [r3, #12]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	615a      	str	r2, [r3, #20]
      break;
 8007324:	e03b      	b.n	800739e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	6812      	ldr	r2, [r2, #0]
 8007330:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007334:	f023 030f 	bic.w	r3, r3, #15
 8007338:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6999      	ldr	r1, [r3, #24]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	430a      	orrs	r2, r1
 800734a:	619a      	str	r2, [r3, #24]
      break;
 800734c:	e027      	b.n	800739e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	69db      	ldr	r3, [r3, #28]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	6812      	ldr	r2, [r2, #0]
 8007358:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800735c:	f023 030f 	bic.w	r3, r3, #15
 8007360:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	69d9      	ldr	r1, [r3, #28]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	68da      	ldr	r2, [r3, #12]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	61da      	str	r2, [r3, #28]
      break;
 8007374:	e013      	b.n	800739e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6a1b      	ldr	r3, [r3, #32]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	6812      	ldr	r2, [r2, #0]
 8007380:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007384:	f023 030f 	bic.w	r3, r3, #15
 8007388:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6a19      	ldr	r1, [r3, #32]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	621a      	str	r2, [r3, #32]
      break;
 800739c:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800739e:	4b19      	ldr	r3, [pc, #100]	; (8007404 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80073a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a18      	ldr	r2, [pc, #96]	; (8007408 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d109      	bne.n	80073c0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b12      	cmp	r3, #18
 80073b2:	d105      	bne.n	80073c0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a10      	ldr	r2, [pc, #64]	; (8007408 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d10e      	bne.n	80073e8 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a0f      	ldr	r2, [pc, #60]	; (800740c <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d003      	beq.n	80073dc <HAL_ADCEx_InjectedConfigChannel+0x300>
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b11      	cmp	r3, #17
 80073da:	d105      	bne.n	80073e8 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	000f0001 	.word	0x000f0001
 8007404:	40012300 	.word	0x40012300
 8007408:	40012000 	.word	0x40012000
 800740c:	10000012 	.word	0x10000012

08007410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f003 0307 	and.w	r3, r3, #7
 800741e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007420:	4b0c      	ldr	r3, [pc, #48]	; (8007454 <__NVIC_SetPriorityGrouping+0x44>)
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800742c:	4013      	ands	r3, r2
 800742e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800743c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007442:	4a04      	ldr	r2, [pc, #16]	; (8007454 <__NVIC_SetPriorityGrouping+0x44>)
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	60d3      	str	r3, [r2, #12]
}
 8007448:	bf00      	nop
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	e000ed00 	.word	0xe000ed00

08007458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007458:	b480      	push	{r7}
 800745a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800745c:	4b04      	ldr	r3, [pc, #16]	; (8007470 <__NVIC_GetPriorityGrouping+0x18>)
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	0a1b      	lsrs	r3, r3, #8
 8007462:	f003 0307 	and.w	r3, r3, #7
}
 8007466:	4618      	mov	r0, r3
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	e000ed00 	.word	0xe000ed00

08007474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	4603      	mov	r3, r0
 800747c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800747e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007482:	2b00      	cmp	r3, #0
 8007484:	db0b      	blt.n	800749e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007486:	79fb      	ldrb	r3, [r7, #7]
 8007488:	f003 021f 	and.w	r2, r3, #31
 800748c:	4907      	ldr	r1, [pc, #28]	; (80074ac <__NVIC_EnableIRQ+0x38>)
 800748e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007492:	095b      	lsrs	r3, r3, #5
 8007494:	2001      	movs	r0, #1
 8007496:	fa00 f202 	lsl.w	r2, r0, r2
 800749a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800749e:	bf00      	nop
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	e000e100 	.word	0xe000e100

080074b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	4603      	mov	r3, r0
 80074b8:	6039      	str	r1, [r7, #0]
 80074ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	db0a      	blt.n	80074da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	490c      	ldr	r1, [pc, #48]	; (80074fc <__NVIC_SetPriority+0x4c>)
 80074ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ce:	0112      	lsls	r2, r2, #4
 80074d0:	b2d2      	uxtb	r2, r2
 80074d2:	440b      	add	r3, r1
 80074d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80074d8:	e00a      	b.n	80074f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	4908      	ldr	r1, [pc, #32]	; (8007500 <__NVIC_SetPriority+0x50>)
 80074e0:	79fb      	ldrb	r3, [r7, #7]
 80074e2:	f003 030f 	and.w	r3, r3, #15
 80074e6:	3b04      	subs	r3, #4
 80074e8:	0112      	lsls	r2, r2, #4
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	440b      	add	r3, r1
 80074ee:	761a      	strb	r2, [r3, #24]
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	e000e100 	.word	0xe000e100
 8007500:	e000ed00 	.word	0xe000ed00

08007504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007504:	b480      	push	{r7}
 8007506:	b089      	sub	sp, #36	; 0x24
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f003 0307 	and.w	r3, r3, #7
 8007516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	f1c3 0307 	rsb	r3, r3, #7
 800751e:	2b04      	cmp	r3, #4
 8007520:	bf28      	it	cs
 8007522:	2304      	movcs	r3, #4
 8007524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	3304      	adds	r3, #4
 800752a:	2b06      	cmp	r3, #6
 800752c:	d902      	bls.n	8007534 <NVIC_EncodePriority+0x30>
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	3b03      	subs	r3, #3
 8007532:	e000      	b.n	8007536 <NVIC_EncodePriority+0x32>
 8007534:	2300      	movs	r3, #0
 8007536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007538:	f04f 32ff 	mov.w	r2, #4294967295
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	fa02 f303 	lsl.w	r3, r2, r3
 8007542:	43da      	mvns	r2, r3
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	401a      	ands	r2, r3
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800754c:	f04f 31ff 	mov.w	r1, #4294967295
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	fa01 f303 	lsl.w	r3, r1, r3
 8007556:	43d9      	mvns	r1, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800755c:	4313      	orrs	r3, r2
         );
}
 800755e:	4618      	mov	r0, r3
 8007560:	3724      	adds	r7, #36	; 0x24
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
	...

0800756c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3b01      	subs	r3, #1
 8007578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800757c:	d301      	bcc.n	8007582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800757e:	2301      	movs	r3, #1
 8007580:	e00f      	b.n	80075a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007582:	4a0a      	ldr	r2, [pc, #40]	; (80075ac <SysTick_Config+0x40>)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	3b01      	subs	r3, #1
 8007588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800758a:	210f      	movs	r1, #15
 800758c:	f04f 30ff 	mov.w	r0, #4294967295
 8007590:	f7ff ff8e 	bl	80074b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007594:	4b05      	ldr	r3, [pc, #20]	; (80075ac <SysTick_Config+0x40>)
 8007596:	2200      	movs	r2, #0
 8007598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800759a:	4b04      	ldr	r3, [pc, #16]	; (80075ac <SysTick_Config+0x40>)
 800759c:	2207      	movs	r2, #7
 800759e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	e000e010 	.word	0xe000e010

080075b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7ff ff29 	bl	8007410 <__NVIC_SetPriorityGrouping>
}
 80075be:	bf00      	nop
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b086      	sub	sp, #24
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	4603      	mov	r3, r0
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	607a      	str	r2, [r7, #4]
 80075d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80075d8:	f7ff ff3e 	bl	8007458 <__NVIC_GetPriorityGrouping>
 80075dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	68b9      	ldr	r1, [r7, #8]
 80075e2:	6978      	ldr	r0, [r7, #20]
 80075e4:	f7ff ff8e 	bl	8007504 <NVIC_EncodePriority>
 80075e8:	4602      	mov	r2, r0
 80075ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075ee:	4611      	mov	r1, r2
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7ff ff5d 	bl	80074b0 <__NVIC_SetPriority>
}
 80075f6:	bf00      	nop
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b082      	sub	sp, #8
 8007602:	af00      	add	r7, sp, #0
 8007604:	4603      	mov	r3, r0
 8007606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800760c:	4618      	mov	r0, r3
 800760e:	f7ff ff31 	bl	8007474 <__NVIC_EnableIRQ>
}
 8007612:	bf00      	nop
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7ff ffa2 	bl	800756c <SysTick_Config>
 8007628:	4603      	mov	r3, r0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
	...

08007634 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007640:	f7fe fe46 	bl	80062d0 <HAL_GetTick>
 8007644:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e099      	b.n	8007784 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0201 	bic.w	r2, r2, #1
 800766e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007670:	e00f      	b.n	8007692 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007672:	f7fe fe2d 	bl	80062d0 <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	2b05      	cmp	r3, #5
 800767e:	d908      	bls.n	8007692 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2220      	movs	r2, #32
 8007684:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2203      	movs	r2, #3
 800768a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e078      	b.n	8007784 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e8      	bne.n	8007672 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	4b38      	ldr	r3, [pc, #224]	; (800778c <HAL_DMA_Init+0x158>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	2b04      	cmp	r3, #4
 80076ea:	d107      	bne.n	80076fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f4:	4313      	orrs	r3, r2
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f023 0307 	bic.w	r3, r3, #7
 8007712:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	4313      	orrs	r3, r2
 800771c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	2b04      	cmp	r3, #4
 8007724:	d117      	bne.n	8007756 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	4313      	orrs	r3, r2
 800772e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00e      	beq.n	8007756 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fadf 	bl	8007cfc <DMA_CheckFifoParam>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d008      	beq.n	8007756 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2240      	movs	r2, #64	; 0x40
 8007748:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007752:	2301      	movs	r3, #1
 8007754:	e016      	b.n	8007784 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fa96 	bl	8007c90 <DMA_CalcBaseAndBitshift>
 8007764:	4603      	mov	r3, r0
 8007766:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800776c:	223f      	movs	r2, #63	; 0x3f
 800776e:	409a      	lsls	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	f010803f 	.word	0xf010803f

08007790 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
 800779c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <HAL_DMA_Start_IT+0x26>
 80077b2:	2302      	movs	r3, #2
 80077b4:	e040      	b.n	8007838 <HAL_DMA_Start_IT+0xa8>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d12f      	bne.n	800782a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2202      	movs	r2, #2
 80077ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	68b9      	ldr	r1, [r7, #8]
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f000 fa28 	bl	8007c34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e8:	223f      	movs	r2, #63	; 0x3f
 80077ea:	409a      	lsls	r2, r3
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f042 0216 	orr.w	r2, r2, #22
 80077fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007804:	2b00      	cmp	r3, #0
 8007806:	d007      	beq.n	8007818 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f042 0208 	orr.w	r2, r2, #8
 8007816:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0201 	orr.w	r2, r2, #1
 8007826:	601a      	str	r2, [r3, #0]
 8007828:	e005      	b.n	8007836 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007832:	2302      	movs	r3, #2
 8007834:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007836:	7dfb      	ldrb	r3, [r7, #23]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800784e:	f7fe fd3f 	bl	80062d0 <HAL_GetTick>
 8007852:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b02      	cmp	r3, #2
 800785e:	d008      	beq.n	8007872 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2280      	movs	r2, #128	; 0x80
 8007864:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e052      	b.n	8007918 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0216 	bic.w	r2, r2, #22
 8007880:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	695a      	ldr	r2, [r3, #20]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007890:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	2b00      	cmp	r3, #0
 8007898:	d103      	bne.n	80078a2 <HAL_DMA_Abort+0x62>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d007      	beq.n	80078b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 0208 	bic.w	r2, r2, #8
 80078b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 0201 	bic.w	r2, r2, #1
 80078c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80078c2:	e013      	b.n	80078ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80078c4:	f7fe fd04 	bl	80062d0 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	2b05      	cmp	r3, #5
 80078d0:	d90c      	bls.n	80078ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2220      	movs	r2, #32
 80078d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2203      	movs	r2, #3
 80078dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e015      	b.n	8007918 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1e4      	bne.n	80078c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078fe:	223f      	movs	r2, #63	; 0x3f
 8007900:	409a      	lsls	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800792c:	4b8e      	ldr	r3, [pc, #568]	; (8007b68 <HAL_DMA_IRQHandler+0x248>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a8e      	ldr	r2, [pc, #568]	; (8007b6c <HAL_DMA_IRQHandler+0x24c>)
 8007932:	fba2 2303 	umull	r2, r3, r2, r3
 8007936:	0a9b      	lsrs	r3, r3, #10
 8007938:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800793e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800794a:	2208      	movs	r2, #8
 800794c:	409a      	lsls	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	4013      	ands	r3, r2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d01a      	beq.n	800798c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0304 	and.w	r3, r3, #4
 8007960:	2b00      	cmp	r3, #0
 8007962:	d013      	beq.n	800798c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f022 0204 	bic.w	r2, r2, #4
 8007972:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007978:	2208      	movs	r2, #8
 800797a:	409a      	lsls	r2, r3
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007984:	f043 0201 	orr.w	r2, r3, #1
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007990:	2201      	movs	r2, #1
 8007992:	409a      	lsls	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	4013      	ands	r3, r2
 8007998:	2b00      	cmp	r3, #0
 800799a:	d012      	beq.n	80079c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00b      	beq.n	80079c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ae:	2201      	movs	r2, #1
 80079b0:	409a      	lsls	r2, r3
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ba:	f043 0202 	orr.w	r2, r3, #2
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c6:	2204      	movs	r2, #4
 80079c8:	409a      	lsls	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	4013      	ands	r3, r2
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d012      	beq.n	80079f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0302 	and.w	r3, r3, #2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00b      	beq.n	80079f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079e4:	2204      	movs	r2, #4
 80079e6:	409a      	lsls	r2, r3
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f0:	f043 0204 	orr.w	r2, r3, #4
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079fc:	2210      	movs	r2, #16
 80079fe:	409a      	lsls	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4013      	ands	r3, r2
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d043      	beq.n	8007a90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0308 	and.w	r3, r3, #8
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d03c      	beq.n	8007a90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a1a:	2210      	movs	r2, #16
 8007a1c:	409a      	lsls	r2, r3
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d018      	beq.n	8007a62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d108      	bne.n	8007a50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d024      	beq.n	8007a90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	4798      	blx	r3
 8007a4e:	e01f      	b.n	8007a90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d01b      	beq.n	8007a90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	4798      	blx	r3
 8007a60:	e016      	b.n	8007a90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d107      	bne.n	8007a80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 0208 	bic.w	r2, r2, #8
 8007a7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a94:	2220      	movs	r2, #32
 8007a96:	409a      	lsls	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 808f 	beq.w	8007bc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0310 	and.w	r3, r3, #16
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 8087 	beq.w	8007bc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	409a      	lsls	r2, r3
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b05      	cmp	r3, #5
 8007ac8:	d136      	bne.n	8007b38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 0216 	bic.w	r2, r2, #22
 8007ad8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	695a      	ldr	r2, [r3, #20]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ae8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d103      	bne.n	8007afa <HAL_DMA_IRQHandler+0x1da>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d007      	beq.n	8007b0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0208 	bic.w	r2, r2, #8
 8007b08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b0e:	223f      	movs	r2, #63	; 0x3f
 8007b10:	409a      	lsls	r2, r3
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d07e      	beq.n	8007c2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	4798      	blx	r3
        }
        return;
 8007b36:	e079      	b.n	8007c2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d01d      	beq.n	8007b82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10d      	bne.n	8007b70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d031      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	4798      	blx	r3
 8007b64:	e02c      	b.n	8007bc0 <HAL_DMA_IRQHandler+0x2a0>
 8007b66:	bf00      	nop
 8007b68:	200005ac 	.word	0x200005ac
 8007b6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d023      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	4798      	blx	r3
 8007b80:	e01e      	b.n	8007bc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10f      	bne.n	8007bb0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f022 0210 	bic.w	r2, r2, #16
 8007b9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d003      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d032      	beq.n	8007c2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d022      	beq.n	8007c1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2205      	movs	r2, #5
 8007bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 0201 	bic.w	r2, r2, #1
 8007bea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	60bb      	str	r3, [r7, #8]
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d307      	bcc.n	8007c08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1f2      	bne.n	8007bec <HAL_DMA_IRQHandler+0x2cc>
 8007c06:	e000      	b.n	8007c0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007c08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d005      	beq.n	8007c2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	4798      	blx	r3
 8007c2a:	e000      	b.n	8007c2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8007c2c:	bf00      	nop
    }
  }
}
 8007c2e:	3718      	adds	r7, #24
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	2b40      	cmp	r3, #64	; 0x40
 8007c60:	d108      	bne.n	8007c74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007c72:	e007      	b.n	8007c84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	60da      	str	r2, [r3, #12]
}
 8007c84:	bf00      	nop
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	3b10      	subs	r3, #16
 8007ca0:	4a14      	ldr	r2, [pc, #80]	; (8007cf4 <DMA_CalcBaseAndBitshift+0x64>)
 8007ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca6:	091b      	lsrs	r3, r3, #4
 8007ca8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007caa:	4a13      	ldr	r2, [pc, #76]	; (8007cf8 <DMA_CalcBaseAndBitshift+0x68>)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4413      	add	r3, r2
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2b03      	cmp	r3, #3
 8007cbc:	d909      	bls.n	8007cd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007cc6:	f023 0303 	bic.w	r3, r3, #3
 8007cca:	1d1a      	adds	r2, r3, #4
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	659a      	str	r2, [r3, #88]	; 0x58
 8007cd0:	e007      	b.n	8007ce2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007cda:	f023 0303 	bic.w	r3, r3, #3
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	aaaaaaab 	.word	0xaaaaaaab
 8007cf8:	0800dc90 	.word	0x0800dc90

08007cfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d11f      	bne.n	8007d56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	2b03      	cmp	r3, #3
 8007d1a:	d856      	bhi.n	8007dca <DMA_CheckFifoParam+0xce>
 8007d1c:	a201      	add	r2, pc, #4	; (adr r2, 8007d24 <DMA_CheckFifoParam+0x28>)
 8007d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d22:	bf00      	nop
 8007d24:	08007d35 	.word	0x08007d35
 8007d28:	08007d47 	.word	0x08007d47
 8007d2c:	08007d35 	.word	0x08007d35
 8007d30:	08007dcb 	.word	0x08007dcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d046      	beq.n	8007dce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d44:	e043      	b.n	8007dce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d4e:	d140      	bne.n	8007dd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d54:	e03d      	b.n	8007dd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d5e:	d121      	bne.n	8007da4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d837      	bhi.n	8007dd6 <DMA_CheckFifoParam+0xda>
 8007d66:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <DMA_CheckFifoParam+0x70>)
 8007d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6c:	08007d7d 	.word	0x08007d7d
 8007d70:	08007d83 	.word	0x08007d83
 8007d74:	08007d7d 	.word	0x08007d7d
 8007d78:	08007d95 	.word	0x08007d95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d80:	e030      	b.n	8007de4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d025      	beq.n	8007dda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d92:	e022      	b.n	8007dda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d9c:	d11f      	bne.n	8007dde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007da2:	e01c      	b.n	8007dde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d903      	bls.n	8007db2 <DMA_CheckFifoParam+0xb6>
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d003      	beq.n	8007db8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007db0:	e018      	b.n	8007de4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	73fb      	strb	r3, [r7, #15]
      break;
 8007db6:	e015      	b.n	8007de4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00e      	beq.n	8007de2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8007dc8:	e00b      	b.n	8007de2 <DMA_CheckFifoParam+0xe6>
      break;
 8007dca:	bf00      	nop
 8007dcc:	e00a      	b.n	8007de4 <DMA_CheckFifoParam+0xe8>
      break;
 8007dce:	bf00      	nop
 8007dd0:	e008      	b.n	8007de4 <DMA_CheckFifoParam+0xe8>
      break;
 8007dd2:	bf00      	nop
 8007dd4:	e006      	b.n	8007de4 <DMA_CheckFifoParam+0xe8>
      break;
 8007dd6:	bf00      	nop
 8007dd8:	e004      	b.n	8007de4 <DMA_CheckFifoParam+0xe8>
      break;
 8007dda:	bf00      	nop
 8007ddc:	e002      	b.n	8007de4 <DMA_CheckFifoParam+0xe8>
      break;   
 8007dde:	bf00      	nop
 8007de0:	e000      	b.n	8007de4 <DMA_CheckFifoParam+0xe8>
      break;
 8007de2:	bf00      	nop
    }
  } 
  
  return status; 
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop

08007df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b089      	sub	sp, #36	; 0x24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007e06:	2300      	movs	r3, #0
 8007e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	61fb      	str	r3, [r7, #28]
 8007e0e:	e159      	b.n	80080c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007e10:	2201      	movs	r2, #1
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	fa02 f303 	lsl.w	r3, r2, r3
 8007e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	697a      	ldr	r2, [r7, #20]
 8007e20:	4013      	ands	r3, r2
 8007e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	f040 8148 	bne.w	80080be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d005      	beq.n	8007e46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d130      	bne.n	8007ea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	005b      	lsls	r3, r3, #1
 8007e50:	2203      	movs	r2, #3
 8007e52:	fa02 f303 	lsl.w	r3, r2, r3
 8007e56:	43db      	mvns	r3, r3
 8007e58:	69ba      	ldr	r2, [r7, #24]
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	68da      	ldr	r2, [r3, #12]
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	005b      	lsls	r3, r3, #1
 8007e66:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6a:	69ba      	ldr	r2, [r7, #24]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	69ba      	ldr	r2, [r7, #24]
 8007e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	fa02 f303 	lsl.w	r3, r2, r3
 8007e84:	43db      	mvns	r3, r3
 8007e86:	69ba      	ldr	r2, [r7, #24]
 8007e88:	4013      	ands	r3, r2
 8007e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	091b      	lsrs	r3, r3, #4
 8007e92:	f003 0201 	and.w	r2, r3, #1
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	69ba      	ldr	r2, [r7, #24]
 8007ea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f003 0303 	and.w	r3, r3, #3
 8007eb0:	2b03      	cmp	r3, #3
 8007eb2:	d017      	beq.n	8007ee4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	005b      	lsls	r3, r3, #1
 8007ebe:	2203      	movs	r2, #3
 8007ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec4:	43db      	mvns	r3, r3
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	4013      	ands	r3, r2
 8007eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	005b      	lsls	r3, r3, #1
 8007ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f003 0303 	and.w	r3, r3, #3
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d123      	bne.n	8007f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	08da      	lsrs	r2, r3, #3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	3208      	adds	r2, #8
 8007ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	f003 0307 	and.w	r3, r3, #7
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	220f      	movs	r2, #15
 8007f08:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0c:	43db      	mvns	r3, r3
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	4013      	ands	r3, r2
 8007f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	691a      	ldr	r2, [r3, #16]
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	f003 0307 	and.w	r3, r3, #7
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	fa02 f303 	lsl.w	r3, r2, r3
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	08da      	lsrs	r2, r3, #3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	3208      	adds	r2, #8
 8007f32:	69b9      	ldr	r1, [r7, #24]
 8007f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	2203      	movs	r2, #3
 8007f44:	fa02 f303 	lsl.w	r3, r2, r3
 8007f48:	43db      	mvns	r3, r3
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	f003 0203 	and.w	r2, r3, #3
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	005b      	lsls	r3, r3, #1
 8007f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	69ba      	ldr	r2, [r7, #24]
 8007f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 80a2 	beq.w	80080be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60fb      	str	r3, [r7, #12]
 8007f7e:	4b57      	ldr	r3, [pc, #348]	; (80080dc <HAL_GPIO_Init+0x2e8>)
 8007f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f82:	4a56      	ldr	r2, [pc, #344]	; (80080dc <HAL_GPIO_Init+0x2e8>)
 8007f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f88:	6453      	str	r3, [r2, #68]	; 0x44
 8007f8a:	4b54      	ldr	r3, [pc, #336]	; (80080dc <HAL_GPIO_Init+0x2e8>)
 8007f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f92:	60fb      	str	r3, [r7, #12]
 8007f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f96:	4a52      	ldr	r2, [pc, #328]	; (80080e0 <HAL_GPIO_Init+0x2ec>)
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	089b      	lsrs	r3, r3, #2
 8007f9c:	3302      	adds	r3, #2
 8007f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	f003 0303 	and.w	r3, r3, #3
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	220f      	movs	r2, #15
 8007fae:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb2:	43db      	mvns	r3, r3
 8007fb4:	69ba      	ldr	r2, [r7, #24]
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a49      	ldr	r2, [pc, #292]	; (80080e4 <HAL_GPIO_Init+0x2f0>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d019      	beq.n	8007ff6 <HAL_GPIO_Init+0x202>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a48      	ldr	r2, [pc, #288]	; (80080e8 <HAL_GPIO_Init+0x2f4>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d013      	beq.n	8007ff2 <HAL_GPIO_Init+0x1fe>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a47      	ldr	r2, [pc, #284]	; (80080ec <HAL_GPIO_Init+0x2f8>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d00d      	beq.n	8007fee <HAL_GPIO_Init+0x1fa>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a46      	ldr	r2, [pc, #280]	; (80080f0 <HAL_GPIO_Init+0x2fc>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d007      	beq.n	8007fea <HAL_GPIO_Init+0x1f6>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a45      	ldr	r2, [pc, #276]	; (80080f4 <HAL_GPIO_Init+0x300>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d101      	bne.n	8007fe6 <HAL_GPIO_Init+0x1f2>
 8007fe2:	2304      	movs	r3, #4
 8007fe4:	e008      	b.n	8007ff8 <HAL_GPIO_Init+0x204>
 8007fe6:	2307      	movs	r3, #7
 8007fe8:	e006      	b.n	8007ff8 <HAL_GPIO_Init+0x204>
 8007fea:	2303      	movs	r3, #3
 8007fec:	e004      	b.n	8007ff8 <HAL_GPIO_Init+0x204>
 8007fee:	2302      	movs	r3, #2
 8007ff0:	e002      	b.n	8007ff8 <HAL_GPIO_Init+0x204>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e000      	b.n	8007ff8 <HAL_GPIO_Init+0x204>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	69fa      	ldr	r2, [r7, #28]
 8007ffa:	f002 0203 	and.w	r2, r2, #3
 8007ffe:	0092      	lsls	r2, r2, #2
 8008000:	4093      	lsls	r3, r2
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	4313      	orrs	r3, r2
 8008006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008008:	4935      	ldr	r1, [pc, #212]	; (80080e0 <HAL_GPIO_Init+0x2ec>)
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	089b      	lsrs	r3, r3, #2
 800800e:	3302      	adds	r3, #2
 8008010:	69ba      	ldr	r2, [r7, #24]
 8008012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008016:	4b38      	ldr	r3, [pc, #224]	; (80080f8 <HAL_GPIO_Init+0x304>)
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	43db      	mvns	r3, r3
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	4013      	ands	r3, r2
 8008024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008032:	69ba      	ldr	r2, [r7, #24]
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	4313      	orrs	r3, r2
 8008038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800803a:	4a2f      	ldr	r2, [pc, #188]	; (80080f8 <HAL_GPIO_Init+0x304>)
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008040:	4b2d      	ldr	r3, [pc, #180]	; (80080f8 <HAL_GPIO_Init+0x304>)
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	43db      	mvns	r3, r3
 800804a:	69ba      	ldr	r2, [r7, #24]
 800804c:	4013      	ands	r3, r2
 800804e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800805c:	69ba      	ldr	r2, [r7, #24]
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	4313      	orrs	r3, r2
 8008062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008064:	4a24      	ldr	r2, [pc, #144]	; (80080f8 <HAL_GPIO_Init+0x304>)
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800806a:	4b23      	ldr	r3, [pc, #140]	; (80080f8 <HAL_GPIO_Init+0x304>)
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	43db      	mvns	r3, r3
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	4013      	ands	r3, r2
 8008078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008086:	69ba      	ldr	r2, [r7, #24]
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	4313      	orrs	r3, r2
 800808c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800808e:	4a1a      	ldr	r2, [pc, #104]	; (80080f8 <HAL_GPIO_Init+0x304>)
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008094:	4b18      	ldr	r3, [pc, #96]	; (80080f8 <HAL_GPIO_Init+0x304>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	43db      	mvns	r3, r3
 800809e:	69ba      	ldr	r2, [r7, #24]
 80080a0:	4013      	ands	r3, r2
 80080a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d003      	beq.n	80080b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80080b0:	69ba      	ldr	r2, [r7, #24]
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80080b8:	4a0f      	ldr	r2, [pc, #60]	; (80080f8 <HAL_GPIO_Init+0x304>)
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	3301      	adds	r3, #1
 80080c2:	61fb      	str	r3, [r7, #28]
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	2b0f      	cmp	r3, #15
 80080c8:	f67f aea2 	bls.w	8007e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80080cc:	bf00      	nop
 80080ce:	bf00      	nop
 80080d0:	3724      	adds	r7, #36	; 0x24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	40023800 	.word	0x40023800
 80080e0:	40013800 	.word	0x40013800
 80080e4:	40020000 	.word	0x40020000
 80080e8:	40020400 	.word	0x40020400
 80080ec:	40020800 	.word	0x40020800
 80080f0:	40020c00 	.word	0x40020c00
 80080f4:	40021000 	.word	0x40021000
 80080f8:	40013c00 	.word	0x40013c00

080080fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	807b      	strh	r3, [r7, #2]
 8008108:	4613      	mov	r3, r2
 800810a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800810c:	787b      	ldrb	r3, [r7, #1]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008112:	887a      	ldrh	r2, [r7, #2]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008118:	e003      	b.n	8008122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800811a:	887b      	ldrh	r3, [r7, #2]
 800811c:	041a      	lsls	r2, r3, #16
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	619a      	str	r2, [r3, #24]
}
 8008122:	bf00      	nop
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
	...

08008130 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	4603      	mov	r3, r0
 8008138:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800813a:	4b08      	ldr	r3, [pc, #32]	; (800815c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800813c:	695a      	ldr	r2, [r3, #20]
 800813e:	88fb      	ldrh	r3, [r7, #6]
 8008140:	4013      	ands	r3, r2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d006      	beq.n	8008154 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008146:	4a05      	ldr	r2, [pc, #20]	; (800815c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008148:	88fb      	ldrh	r3, [r7, #6]
 800814a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800814c:	88fb      	ldrh	r3, [r7, #6]
 800814e:	4618      	mov	r0, r3
 8008150:	f7fd fc28 	bl	80059a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8008154:	bf00      	nop
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	40013c00 	.word	0x40013c00

08008160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e12b      	b.n	80083ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d106      	bne.n	800818c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f7fd fce2 	bl	8005b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2224      	movs	r2, #36	; 0x24
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f022 0201 	bic.w	r2, r2, #1
 80081a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80081c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80081c4:	f001 fbbc 	bl	8009940 <HAL_RCC_GetPCLK1Freq>
 80081c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	4a81      	ldr	r2, [pc, #516]	; (80083d4 <HAL_I2C_Init+0x274>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d807      	bhi.n	80081e4 <HAL_I2C_Init+0x84>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4a80      	ldr	r2, [pc, #512]	; (80083d8 <HAL_I2C_Init+0x278>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	bf94      	ite	ls
 80081dc:	2301      	movls	r3, #1
 80081de:	2300      	movhi	r3, #0
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	e006      	b.n	80081f2 <HAL_I2C_Init+0x92>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4a7d      	ldr	r2, [pc, #500]	; (80083dc <HAL_I2C_Init+0x27c>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	bf94      	ite	ls
 80081ec:	2301      	movls	r3, #1
 80081ee:	2300      	movhi	r3, #0
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e0e7      	b.n	80083ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	4a78      	ldr	r2, [pc, #480]	; (80083e0 <HAL_I2C_Init+0x280>)
 80081fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008202:	0c9b      	lsrs	r3, r3, #18
 8008204:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	430a      	orrs	r2, r1
 8008218:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	6a1b      	ldr	r3, [r3, #32]
 8008220:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	4a6a      	ldr	r2, [pc, #424]	; (80083d4 <HAL_I2C_Init+0x274>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d802      	bhi.n	8008234 <HAL_I2C_Init+0xd4>
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	3301      	adds	r3, #1
 8008232:	e009      	b.n	8008248 <HAL_I2C_Init+0xe8>
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800823a:	fb02 f303 	mul.w	r3, r2, r3
 800823e:	4a69      	ldr	r2, [pc, #420]	; (80083e4 <HAL_I2C_Init+0x284>)
 8008240:	fba2 2303 	umull	r2, r3, r2, r3
 8008244:	099b      	lsrs	r3, r3, #6
 8008246:	3301      	adds	r3, #1
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	6812      	ldr	r2, [r2, #0]
 800824c:	430b      	orrs	r3, r1
 800824e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	69db      	ldr	r3, [r3, #28]
 8008256:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800825a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	495c      	ldr	r1, [pc, #368]	; (80083d4 <HAL_I2C_Init+0x274>)
 8008264:	428b      	cmp	r3, r1
 8008266:	d819      	bhi.n	800829c <HAL_I2C_Init+0x13c>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	1e59      	subs	r1, r3, #1
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	005b      	lsls	r3, r3, #1
 8008272:	fbb1 f3f3 	udiv	r3, r1, r3
 8008276:	1c59      	adds	r1, r3, #1
 8008278:	f640 73fc 	movw	r3, #4092	; 0xffc
 800827c:	400b      	ands	r3, r1
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00a      	beq.n	8008298 <HAL_I2C_Init+0x138>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	1e59      	subs	r1, r3, #1
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	005b      	lsls	r3, r3, #1
 800828c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008290:	3301      	adds	r3, #1
 8008292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008296:	e051      	b.n	800833c <HAL_I2C_Init+0x1dc>
 8008298:	2304      	movs	r3, #4
 800829a:	e04f      	b.n	800833c <HAL_I2C_Init+0x1dc>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d111      	bne.n	80082c8 <HAL_I2C_Init+0x168>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	1e58      	subs	r0, r3, #1
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6859      	ldr	r1, [r3, #4]
 80082ac:	460b      	mov	r3, r1
 80082ae:	005b      	lsls	r3, r3, #1
 80082b0:	440b      	add	r3, r1
 80082b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80082b6:	3301      	adds	r3, #1
 80082b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082bc:	2b00      	cmp	r3, #0
 80082be:	bf0c      	ite	eq
 80082c0:	2301      	moveq	r3, #1
 80082c2:	2300      	movne	r3, #0
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	e012      	b.n	80082ee <HAL_I2C_Init+0x18e>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	1e58      	subs	r0, r3, #1
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6859      	ldr	r1, [r3, #4]
 80082d0:	460b      	mov	r3, r1
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	440b      	add	r3, r1
 80082d6:	0099      	lsls	r1, r3, #2
 80082d8:	440b      	add	r3, r1
 80082da:	fbb0 f3f3 	udiv	r3, r0, r3
 80082de:	3301      	adds	r3, #1
 80082e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	bf0c      	ite	eq
 80082e8:	2301      	moveq	r3, #1
 80082ea:	2300      	movne	r3, #0
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d001      	beq.n	80082f6 <HAL_I2C_Init+0x196>
 80082f2:	2301      	movs	r3, #1
 80082f4:	e022      	b.n	800833c <HAL_I2C_Init+0x1dc>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10e      	bne.n	800831c <HAL_I2C_Init+0x1bc>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	1e58      	subs	r0, r3, #1
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6859      	ldr	r1, [r3, #4]
 8008306:	460b      	mov	r3, r1
 8008308:	005b      	lsls	r3, r3, #1
 800830a:	440b      	add	r3, r1
 800830c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008310:	3301      	adds	r3, #1
 8008312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800831a:	e00f      	b.n	800833c <HAL_I2C_Init+0x1dc>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	1e58      	subs	r0, r3, #1
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6859      	ldr	r1, [r3, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	440b      	add	r3, r1
 800832a:	0099      	lsls	r1, r3, #2
 800832c:	440b      	add	r3, r1
 800832e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008332:	3301      	adds	r3, #1
 8008334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800833c:	6879      	ldr	r1, [r7, #4]
 800833e:	6809      	ldr	r1, [r1, #0]
 8008340:	4313      	orrs	r3, r2
 8008342:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	69da      	ldr	r2, [r3, #28]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	431a      	orrs	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	430a      	orrs	r2, r1
 800835e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800836a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	6911      	ldr	r1, [r2, #16]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	68d2      	ldr	r2, [r2, #12]
 8008376:	4311      	orrs	r1, r2
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	6812      	ldr	r2, [r2, #0]
 800837c:	430b      	orrs	r3, r1
 800837e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	695a      	ldr	r2, [r3, #20]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	431a      	orrs	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0201 	orr.w	r2, r2, #1
 80083aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2220      	movs	r2, #32
 80083b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	000186a0 	.word	0x000186a0
 80083d8:	001e847f 	.word	0x001e847f
 80083dc:	003d08ff 	.word	0x003d08ff
 80083e0:	431bde83 	.word	0x431bde83
 80083e4:	10624dd3 	.word	0x10624dd3

080083e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b088      	sub	sp, #32
 80083ec:	af02      	add	r7, sp, #8
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	4608      	mov	r0, r1
 80083f2:	4611      	mov	r1, r2
 80083f4:	461a      	mov	r2, r3
 80083f6:	4603      	mov	r3, r0
 80083f8:	817b      	strh	r3, [r7, #10]
 80083fa:	460b      	mov	r3, r1
 80083fc:	813b      	strh	r3, [r7, #8]
 80083fe:	4613      	mov	r3, r2
 8008400:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008402:	f7fd ff65 	bl	80062d0 <HAL_GetTick>
 8008406:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b20      	cmp	r3, #32
 8008412:	f040 80d9 	bne.w	80085c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	2319      	movs	r3, #25
 800841c:	2201      	movs	r2, #1
 800841e:	496d      	ldr	r1, [pc, #436]	; (80085d4 <HAL_I2C_Mem_Write+0x1ec>)
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 fc7f 	bl	8008d24 <I2C_WaitOnFlagUntilTimeout>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d001      	beq.n	8008430 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800842c:	2302      	movs	r3, #2
 800842e:	e0cc      	b.n	80085ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008436:	2b01      	cmp	r3, #1
 8008438:	d101      	bne.n	800843e <HAL_I2C_Mem_Write+0x56>
 800843a:	2302      	movs	r3, #2
 800843c:	e0c5      	b.n	80085ca <HAL_I2C_Mem_Write+0x1e2>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	2b01      	cmp	r3, #1
 8008452:	d007      	beq.n	8008464 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0201 	orr.w	r2, r2, #1
 8008462:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008472:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2221      	movs	r2, #33	; 0x21
 8008478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2240      	movs	r2, #64	; 0x40
 8008480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6a3a      	ldr	r2, [r7, #32]
 800848e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008494:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800849a:	b29a      	uxth	r2, r3
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4a4d      	ldr	r2, [pc, #308]	; (80085d8 <HAL_I2C_Mem_Write+0x1f0>)
 80084a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80084a6:	88f8      	ldrh	r0, [r7, #6]
 80084a8:	893a      	ldrh	r2, [r7, #8]
 80084aa:	8979      	ldrh	r1, [r7, #10]
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	9301      	str	r3, [sp, #4]
 80084b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	4603      	mov	r3, r0
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f000 fab6 	bl	8008a28 <I2C_RequestMemoryWrite>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d052      	beq.n	8008568 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e081      	b.n	80085ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f000 fd00 	bl	8008ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00d      	beq.n	80084f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084da:	2b04      	cmp	r3, #4
 80084dc:	d107      	bne.n	80084ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e06b      	b.n	80085ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f6:	781a      	ldrb	r2, [r3, #0]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008502:	1c5a      	adds	r2, r3, #1
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800850c:	3b01      	subs	r3, #1
 800850e:	b29a      	uxth	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008518:	b29b      	uxth	r3, r3
 800851a:	3b01      	subs	r3, #1
 800851c:	b29a      	uxth	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	695b      	ldr	r3, [r3, #20]
 8008528:	f003 0304 	and.w	r3, r3, #4
 800852c:	2b04      	cmp	r3, #4
 800852e:	d11b      	bne.n	8008568 <HAL_I2C_Mem_Write+0x180>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008534:	2b00      	cmp	r3, #0
 8008536:	d017      	beq.n	8008568 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853c:	781a      	ldrb	r2, [r3, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008552:	3b01      	subs	r3, #1
 8008554:	b29a      	uxth	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800855e:	b29b      	uxth	r3, r3
 8008560:	3b01      	subs	r3, #1
 8008562:	b29a      	uxth	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800856c:	2b00      	cmp	r3, #0
 800856e:	d1aa      	bne.n	80084c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008570:	697a      	ldr	r2, [r7, #20]
 8008572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 fcec 	bl	8008f52 <I2C_WaitOnBTFFlagUntilTimeout>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00d      	beq.n	800859c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008584:	2b04      	cmp	r3, #4
 8008586:	d107      	bne.n	8008598 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008596:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e016      	b.n	80085ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2220      	movs	r2, #32
 80085b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	e000      	b.n	80085ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80085c8:	2302      	movs	r3, #2
  }
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3718      	adds	r7, #24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	00100002 	.word	0x00100002
 80085d8:	ffff0000 	.word	0xffff0000

080085dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b08c      	sub	sp, #48	; 0x30
 80085e0:	af02      	add	r7, sp, #8
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	4608      	mov	r0, r1
 80085e6:	4611      	mov	r1, r2
 80085e8:	461a      	mov	r2, r3
 80085ea:	4603      	mov	r3, r0
 80085ec:	817b      	strh	r3, [r7, #10]
 80085ee:	460b      	mov	r3, r1
 80085f0:	813b      	strh	r3, [r7, #8]
 80085f2:	4613      	mov	r3, r2
 80085f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80085f6:	f7fd fe6b 	bl	80062d0 <HAL_GetTick>
 80085fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b20      	cmp	r3, #32
 8008606:	f040 8208 	bne.w	8008a1a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	2319      	movs	r3, #25
 8008610:	2201      	movs	r2, #1
 8008612:	497b      	ldr	r1, [pc, #492]	; (8008800 <HAL_I2C_Mem_Read+0x224>)
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 fb85 	bl	8008d24 <I2C_WaitOnFlagUntilTimeout>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d001      	beq.n	8008624 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008620:	2302      	movs	r3, #2
 8008622:	e1fb      	b.n	8008a1c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800862a:	2b01      	cmp	r3, #1
 800862c:	d101      	bne.n	8008632 <HAL_I2C_Mem_Read+0x56>
 800862e:	2302      	movs	r3, #2
 8008630:	e1f4      	b.n	8008a1c <HAL_I2C_Mem_Read+0x440>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0301 	and.w	r3, r3, #1
 8008644:	2b01      	cmp	r3, #1
 8008646:	d007      	beq.n	8008658 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f042 0201 	orr.w	r2, r2, #1
 8008656:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008666:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2222      	movs	r2, #34	; 0x22
 800866c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2240      	movs	r2, #64	; 0x40
 8008674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008682:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008688:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800868e:	b29a      	uxth	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4a5b      	ldr	r2, [pc, #364]	; (8008804 <HAL_I2C_Mem_Read+0x228>)
 8008698:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800869a:	88f8      	ldrh	r0, [r7, #6]
 800869c:	893a      	ldrh	r2, [r7, #8]
 800869e:	8979      	ldrh	r1, [r7, #10]
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	9301      	str	r3, [sp, #4]
 80086a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	4603      	mov	r3, r0
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f000 fa52 	bl	8008b54 <I2C_RequestMemoryRead>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d001      	beq.n	80086ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e1b0      	b.n	8008a1c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d113      	bne.n	80086ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086c2:	2300      	movs	r3, #0
 80086c4:	623b      	str	r3, [r7, #32]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	623b      	str	r3, [r7, #32]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	623b      	str	r3, [r7, #32]
 80086d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	e184      	b.n	80089f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d11b      	bne.n	800872a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008700:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008702:	2300      	movs	r3, #0
 8008704:	61fb      	str	r3, [r7, #28]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	61fb      	str	r3, [r7, #28]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	61fb      	str	r3, [r7, #28]
 8008716:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008726:	601a      	str	r2, [r3, #0]
 8008728:	e164      	b.n	80089f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800872e:	2b02      	cmp	r3, #2
 8008730:	d11b      	bne.n	800876a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008740:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008750:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008752:	2300      	movs	r3, #0
 8008754:	61bb      	str	r3, [r7, #24]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	61bb      	str	r3, [r7, #24]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	61bb      	str	r3, [r7, #24]
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	e144      	b.n	80089f4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800876a:	2300      	movs	r3, #0
 800876c:	617b      	str	r3, [r7, #20]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	695b      	ldr	r3, [r3, #20]
 8008774:	617b      	str	r3, [r7, #20]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	617b      	str	r3, [r7, #20]
 800877e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008780:	e138      	b.n	80089f4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008786:	2b03      	cmp	r3, #3
 8008788:	f200 80f1 	bhi.w	800896e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008790:	2b01      	cmp	r3, #1
 8008792:	d123      	bne.n	80087dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008796:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f000 fc1b 	bl	8008fd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d001      	beq.n	80087a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	e139      	b.n	8008a1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	691a      	ldr	r2, [r3, #16]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b2:	b2d2      	uxtb	r2, r2
 80087b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	1c5a      	adds	r2, r3, #1
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087c4:	3b01      	subs	r3, #1
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	3b01      	subs	r3, #1
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80087da:	e10b      	b.n	80089f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d14e      	bne.n	8008882 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ea:	2200      	movs	r2, #0
 80087ec:	4906      	ldr	r1, [pc, #24]	; (8008808 <HAL_I2C_Mem_Read+0x22c>)
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f000 fa98 	bl	8008d24 <I2C_WaitOnFlagUntilTimeout>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d008      	beq.n	800880c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e10e      	b.n	8008a1c <HAL_I2C_Mem_Read+0x440>
 80087fe:	bf00      	nop
 8008800:	00100002 	.word	0x00100002
 8008804:	ffff0000 	.word	0xffff0000
 8008808:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800881a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	691a      	ldr	r2, [r3, #16]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008826:	b2d2      	uxtb	r2, r2
 8008828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	1c5a      	adds	r2, r3, #1
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008838:	3b01      	subs	r3, #1
 800883a:	b29a      	uxth	r2, r3
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008844:	b29b      	uxth	r3, r3
 8008846:	3b01      	subs	r3, #1
 8008848:	b29a      	uxth	r2, r3
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	691a      	ldr	r2, [r3, #16]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	b2d2      	uxtb	r2, r2
 800885a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	1c5a      	adds	r2, r3, #1
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800886a:	3b01      	subs	r3, #1
 800886c:	b29a      	uxth	r2, r3
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008876:	b29b      	uxth	r3, r3
 8008878:	3b01      	subs	r3, #1
 800887a:	b29a      	uxth	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008880:	e0b8      	b.n	80089f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008888:	2200      	movs	r2, #0
 800888a:	4966      	ldr	r1, [pc, #408]	; (8008a24 <HAL_I2C_Mem_Read+0x448>)
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 fa49 	bl	8008d24 <I2C_WaitOnFlagUntilTimeout>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e0bf      	b.n	8008a1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	691a      	ldr	r2, [r3, #16]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b6:	b2d2      	uxtb	r2, r2
 80088b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088be:	1c5a      	adds	r2, r3, #1
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088c8:	3b01      	subs	r3, #1
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	3b01      	subs	r3, #1
 80088d8:	b29a      	uxth	r2, r3
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80088de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e4:	2200      	movs	r2, #0
 80088e6:	494f      	ldr	r1, [pc, #316]	; (8008a24 <HAL_I2C_Mem_Read+0x448>)
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 fa1b 	bl	8008d24 <I2C_WaitOnFlagUntilTimeout>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d001      	beq.n	80088f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	e091      	b.n	8008a1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008906:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	691a      	ldr	r2, [r3, #16]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008912:	b2d2      	uxtb	r2, r2
 8008914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891a:	1c5a      	adds	r2, r3, #1
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008924:	3b01      	subs	r3, #1
 8008926:	b29a      	uxth	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008930:	b29b      	uxth	r3, r3
 8008932:	3b01      	subs	r3, #1
 8008934:	b29a      	uxth	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	691a      	ldr	r2, [r3, #16]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008944:	b2d2      	uxtb	r2, r2
 8008946:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	1c5a      	adds	r2, r3, #1
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008956:	3b01      	subs	r3, #1
 8008958:	b29a      	uxth	r2, r3
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008962:	b29b      	uxth	r3, r3
 8008964:	3b01      	subs	r3, #1
 8008966:	b29a      	uxth	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800896c:	e042      	b.n	80089f4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800896e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008970:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f000 fb2e 	bl	8008fd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d001      	beq.n	8008982 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e04c      	b.n	8008a1c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	691a      	ldr	r2, [r3, #16]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898c:	b2d2      	uxtb	r2, r2
 800898e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	1c5a      	adds	r2, r3, #1
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800899e:	3b01      	subs	r3, #1
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	3b01      	subs	r3, #1
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	f003 0304 	and.w	r3, r3, #4
 80089be:	2b04      	cmp	r3, #4
 80089c0:	d118      	bne.n	80089f4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	691a      	ldr	r2, [r3, #16]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089cc:	b2d2      	uxtb	r2, r2
 80089ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d4:	1c5a      	adds	r2, r3, #1
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089de:	3b01      	subs	r3, #1
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	3b01      	subs	r3, #1
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f47f aec2 	bne.w	8008782 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2220      	movs	r2, #32
 8008a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	e000      	b.n	8008a1c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008a1a:	2302      	movs	r3, #2
  }
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3728      	adds	r7, #40	; 0x28
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	00010004 	.word	0x00010004

08008a28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b088      	sub	sp, #32
 8008a2c:	af02      	add	r7, sp, #8
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	4608      	mov	r0, r1
 8008a32:	4611      	mov	r1, r2
 8008a34:	461a      	mov	r2, r3
 8008a36:	4603      	mov	r3, r0
 8008a38:	817b      	strh	r3, [r7, #10]
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	813b      	strh	r3, [r7, #8]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	6a3b      	ldr	r3, [r7, #32]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f000 f960 	bl	8008d24 <I2C_WaitOnFlagUntilTimeout>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00d      	beq.n	8008a86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a78:	d103      	bne.n	8008a82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e05f      	b.n	8008b46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008a86:	897b      	ldrh	r3, [r7, #10]
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	6a3a      	ldr	r2, [r7, #32]
 8008a9a:	492d      	ldr	r1, [pc, #180]	; (8008b50 <I2C_RequestMemoryWrite+0x128>)
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 f998 	bl	8008dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e04c      	b.n	8008b46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008aac:	2300      	movs	r3, #0
 8008aae:	617b      	str	r3, [r7, #20]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	617b      	str	r3, [r7, #20]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	617b      	str	r3, [r7, #20]
 8008ac0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac4:	6a39      	ldr	r1, [r7, #32]
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f000 fa02 	bl	8008ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00d      	beq.n	8008aee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad6:	2b04      	cmp	r3, #4
 8008ad8:	d107      	bne.n	8008aea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ae8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e02b      	b.n	8008b46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008aee:	88fb      	ldrh	r3, [r7, #6]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d105      	bne.n	8008b00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008af4:	893b      	ldrh	r3, [r7, #8]
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	611a      	str	r2, [r3, #16]
 8008afe:	e021      	b.n	8008b44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008b00:	893b      	ldrh	r3, [r7, #8]
 8008b02:	0a1b      	lsrs	r3, r3, #8
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b10:	6a39      	ldr	r1, [r7, #32]
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f000 f9dc 	bl	8008ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00d      	beq.n	8008b3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b22:	2b04      	cmp	r3, #4
 8008b24:	d107      	bne.n	8008b36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e005      	b.n	8008b46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b3a:	893b      	ldrh	r3, [r7, #8]
 8008b3c:	b2da      	uxtb	r2, r3
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3718      	adds	r7, #24
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	00010002 	.word	0x00010002

08008b54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b088      	sub	sp, #32
 8008b58:	af02      	add	r7, sp, #8
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	4608      	mov	r0, r1
 8008b5e:	4611      	mov	r1, r2
 8008b60:	461a      	mov	r2, r3
 8008b62:	4603      	mov	r3, r0
 8008b64:	817b      	strh	r3, [r7, #10]
 8008b66:	460b      	mov	r3, r1
 8008b68:	813b      	strh	r3, [r7, #8]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	6a3b      	ldr	r3, [r7, #32]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f000 f8c2 	bl	8008d24 <I2C_WaitOnFlagUntilTimeout>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00d      	beq.n	8008bc2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb4:	d103      	bne.n	8008bbe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e0aa      	b.n	8008d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008bc2:	897b      	ldrh	r3, [r7, #10]
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008bd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd4:	6a3a      	ldr	r2, [r7, #32]
 8008bd6:	4952      	ldr	r1, [pc, #328]	; (8008d20 <I2C_RequestMemoryRead+0x1cc>)
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f000 f8fa 	bl	8008dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e097      	b.n	8008d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008be8:	2300      	movs	r3, #0
 8008bea:	617b      	str	r3, [r7, #20]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	617b      	str	r3, [r7, #20]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	617b      	str	r3, [r7, #20]
 8008bfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c00:	6a39      	ldr	r1, [r7, #32]
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 f964 	bl	8008ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00d      	beq.n	8008c2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c12:	2b04      	cmp	r3, #4
 8008c14:	d107      	bne.n	8008c26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e076      	b.n	8008d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c2a:	88fb      	ldrh	r3, [r7, #6]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d105      	bne.n	8008c3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c30:	893b      	ldrh	r3, [r7, #8]
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	611a      	str	r2, [r3, #16]
 8008c3a:	e021      	b.n	8008c80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008c3c:	893b      	ldrh	r3, [r7, #8]
 8008c3e:	0a1b      	lsrs	r3, r3, #8
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c4c:	6a39      	ldr	r1, [r7, #32]
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 f93e 	bl	8008ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00d      	beq.n	8008c76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5e:	2b04      	cmp	r3, #4
 8008c60:	d107      	bne.n	8008c72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e050      	b.n	8008d18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c76:	893b      	ldrh	r3, [r7, #8]
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c82:	6a39      	ldr	r1, [r7, #32]
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f000 f923 	bl	8008ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00d      	beq.n	8008cac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c94:	2b04      	cmp	r3, #4
 8008c96:	d107      	bne.n	8008ca8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ca6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e035      	b.n	8008d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	6a3b      	ldr	r3, [r7, #32]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f000 f82b 	bl	8008d24 <I2C_WaitOnFlagUntilTimeout>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00d      	beq.n	8008cf0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ce2:	d103      	bne.n	8008cec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e013      	b.n	8008d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008cf0:	897b      	ldrh	r3, [r7, #10]
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	f043 0301 	orr.w	r3, r3, #1
 8008cf8:	b2da      	uxtb	r2, r3
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d02:	6a3a      	ldr	r2, [r7, #32]
 8008d04:	4906      	ldr	r1, [pc, #24]	; (8008d20 <I2C_RequestMemoryRead+0x1cc>)
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f000 f863 	bl	8008dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e000      	b.n	8008d18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3718      	adds	r7, #24
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	00010002 	.word	0x00010002

08008d24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	603b      	str	r3, [r7, #0]
 8008d30:	4613      	mov	r3, r2
 8008d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d34:	e025      	b.n	8008d82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3c:	d021      	beq.n	8008d82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d3e:	f7fd fac7 	bl	80062d0 <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	683a      	ldr	r2, [r7, #0]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d302      	bcc.n	8008d54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d116      	bne.n	8008d82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2200      	movs	r2, #0
 8008d58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2220      	movs	r2, #32
 8008d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6e:	f043 0220 	orr.w	r2, r3, #32
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e023      	b.n	8008dca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	0c1b      	lsrs	r3, r3, #16
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d10d      	bne.n	8008da8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	43da      	mvns	r2, r3
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	4013      	ands	r3, r2
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	bf0c      	ite	eq
 8008d9e:	2301      	moveq	r3, #1
 8008da0:	2300      	movne	r3, #0
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	461a      	mov	r2, r3
 8008da6:	e00c      	b.n	8008dc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	43da      	mvns	r2, r3
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	4013      	ands	r3, r2
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	bf0c      	ite	eq
 8008dba:	2301      	moveq	r3, #1
 8008dbc:	2300      	movne	r3, #0
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	79fb      	ldrb	r3, [r7, #7]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d0b6      	beq.n	8008d36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b084      	sub	sp, #16
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	60b9      	str	r1, [r7, #8]
 8008ddc:	607a      	str	r2, [r7, #4]
 8008dde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008de0:	e051      	b.n	8008e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	695b      	ldr	r3, [r3, #20]
 8008de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008df0:	d123      	bne.n	8008e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008e0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2220      	movs	r2, #32
 8008e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e26:	f043 0204 	orr.w	r2, r3, #4
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e046      	b.n	8008ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e40:	d021      	beq.n	8008e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e42:	f7fd fa45 	bl	80062d0 <HAL_GetTick>
 8008e46:	4602      	mov	r2, r0
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d302      	bcc.n	8008e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d116      	bne.n	8008e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2220      	movs	r2, #32
 8008e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e72:	f043 0220 	orr.w	r2, r3, #32
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e020      	b.n	8008ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	0c1b      	lsrs	r3, r3, #16
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d10c      	bne.n	8008eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	43da      	mvns	r2, r3
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	bf14      	ite	ne
 8008ea2:	2301      	movne	r3, #1
 8008ea4:	2300      	moveq	r3, #0
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	e00b      	b.n	8008ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	699b      	ldr	r3, [r3, #24]
 8008eb0:	43da      	mvns	r2, r3
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	bf14      	ite	ne
 8008ebc:	2301      	movne	r3, #1
 8008ebe:	2300      	moveq	r3, #0
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d18d      	bne.n	8008de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008edc:	e02d      	b.n	8008f3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f000 f8ce 	bl	8009080 <I2C_IsAcknowledgeFailed>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d001      	beq.n	8008eee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e02d      	b.n	8008f4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef4:	d021      	beq.n	8008f3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ef6:	f7fd f9eb 	bl	80062d0 <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	68ba      	ldr	r2, [r7, #8]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d302      	bcc.n	8008f0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d116      	bne.n	8008f3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2220      	movs	r2, #32
 8008f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f26:	f043 0220 	orr.w	r2, r3, #32
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e007      	b.n	8008f4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	695b      	ldr	r3, [r3, #20]
 8008f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f44:	2b80      	cmp	r3, #128	; 0x80
 8008f46:	d1ca      	bne.n	8008ede <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b084      	sub	sp, #16
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	60f8      	str	r0, [r7, #12]
 8008f5a:	60b9      	str	r1, [r7, #8]
 8008f5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008f5e:	e02d      	b.n	8008fbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f000 f88d 	bl	8009080 <I2C_IsAcknowledgeFailed>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e02d      	b.n	8008fcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f76:	d021      	beq.n	8008fbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f78:	f7fd f9aa 	bl	80062d0 <HAL_GetTick>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d302      	bcc.n	8008f8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d116      	bne.n	8008fbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2220      	movs	r2, #32
 8008f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa8:	f043 0220 	orr.w	r2, r3, #32
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e007      	b.n	8008fcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	695b      	ldr	r3, [r3, #20]
 8008fc2:	f003 0304 	and.w	r3, r3, #4
 8008fc6:	2b04      	cmp	r3, #4
 8008fc8:	d1ca      	bne.n	8008f60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008fe0:	e042      	b.n	8009068 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	f003 0310 	and.w	r3, r3, #16
 8008fec:	2b10      	cmp	r3, #16
 8008fee:	d119      	bne.n	8009024 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f06f 0210 	mvn.w	r2, #16
 8008ff8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2220      	movs	r2, #32
 8009004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e029      	b.n	8009078 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009024:	f7fd f954 	bl	80062d0 <HAL_GetTick>
 8009028:	4602      	mov	r2, r0
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	429a      	cmp	r2, r3
 8009032:	d302      	bcc.n	800903a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d116      	bne.n	8009068 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2220      	movs	r2, #32
 8009044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009054:	f043 0220 	orr.w	r2, r3, #32
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e007      	b.n	8009078 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009072:	2b40      	cmp	r3, #64	; 0x40
 8009074:	d1b5      	bne.n	8008fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	695b      	ldr	r3, [r3, #20]
 800908e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009096:	d11b      	bne.n	80090d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80090a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2220      	movs	r2, #32
 80090ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090bc:	f043 0204 	orr.w	r2, r3, #4
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	e000      	b.n	80090d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	370c      	adds	r7, #12
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
	...

080090e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b086      	sub	sp, #24
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d101      	bne.n	80090f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e267      	b.n	80095c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0301 	and.w	r3, r3, #1
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d075      	beq.n	80091ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80090fe:	4b88      	ldr	r3, [pc, #544]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	f003 030c 	and.w	r3, r3, #12
 8009106:	2b04      	cmp	r3, #4
 8009108:	d00c      	beq.n	8009124 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800910a:	4b85      	ldr	r3, [pc, #532]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009112:	2b08      	cmp	r3, #8
 8009114:	d112      	bne.n	800913c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009116:	4b82      	ldr	r3, [pc, #520]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800911e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009122:	d10b      	bne.n	800913c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009124:	4b7e      	ldr	r3, [pc, #504]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d05b      	beq.n	80091e8 <HAL_RCC_OscConfig+0x108>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d157      	bne.n	80091e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e242      	b.n	80095c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009144:	d106      	bne.n	8009154 <HAL_RCC_OscConfig+0x74>
 8009146:	4b76      	ldr	r3, [pc, #472]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a75      	ldr	r2, [pc, #468]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 800914c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009150:	6013      	str	r3, [r2, #0]
 8009152:	e01d      	b.n	8009190 <HAL_RCC_OscConfig+0xb0>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800915c:	d10c      	bne.n	8009178 <HAL_RCC_OscConfig+0x98>
 800915e:	4b70      	ldr	r3, [pc, #448]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a6f      	ldr	r2, [pc, #444]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 8009164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	4b6d      	ldr	r3, [pc, #436]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a6c      	ldr	r2, [pc, #432]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 8009170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009174:	6013      	str	r3, [r2, #0]
 8009176:	e00b      	b.n	8009190 <HAL_RCC_OscConfig+0xb0>
 8009178:	4b69      	ldr	r3, [pc, #420]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a68      	ldr	r2, [pc, #416]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 800917e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009182:	6013      	str	r3, [r2, #0]
 8009184:	4b66      	ldr	r3, [pc, #408]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a65      	ldr	r2, [pc, #404]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 800918a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800918e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d013      	beq.n	80091c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009198:	f7fd f89a 	bl	80062d0 <HAL_GetTick>
 800919c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800919e:	e008      	b.n	80091b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80091a0:	f7fd f896 	bl	80062d0 <HAL_GetTick>
 80091a4:	4602      	mov	r2, r0
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	2b64      	cmp	r3, #100	; 0x64
 80091ac:	d901      	bls.n	80091b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80091ae:	2303      	movs	r3, #3
 80091b0:	e207      	b.n	80095c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091b2:	4b5b      	ldr	r3, [pc, #364]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d0f0      	beq.n	80091a0 <HAL_RCC_OscConfig+0xc0>
 80091be:	e014      	b.n	80091ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091c0:	f7fd f886 	bl	80062d0 <HAL_GetTick>
 80091c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091c6:	e008      	b.n	80091da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80091c8:	f7fd f882 	bl	80062d0 <HAL_GetTick>
 80091cc:	4602      	mov	r2, r0
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	2b64      	cmp	r3, #100	; 0x64
 80091d4:	d901      	bls.n	80091da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e1f3      	b.n	80095c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091da:	4b51      	ldr	r3, [pc, #324]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1f0      	bne.n	80091c8 <HAL_RCC_OscConfig+0xe8>
 80091e6:	e000      	b.n	80091ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 0302 	and.w	r3, r3, #2
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d063      	beq.n	80092be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80091f6:	4b4a      	ldr	r3, [pc, #296]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	f003 030c 	and.w	r3, r3, #12
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00b      	beq.n	800921a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009202:	4b47      	ldr	r3, [pc, #284]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800920a:	2b08      	cmp	r3, #8
 800920c:	d11c      	bne.n	8009248 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800920e:	4b44      	ldr	r3, [pc, #272]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009216:	2b00      	cmp	r3, #0
 8009218:	d116      	bne.n	8009248 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800921a:	4b41      	ldr	r3, [pc, #260]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 0302 	and.w	r3, r3, #2
 8009222:	2b00      	cmp	r3, #0
 8009224:	d005      	beq.n	8009232 <HAL_RCC_OscConfig+0x152>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d001      	beq.n	8009232 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	e1c7      	b.n	80095c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009232:	4b3b      	ldr	r3, [pc, #236]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	00db      	lsls	r3, r3, #3
 8009240:	4937      	ldr	r1, [pc, #220]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 8009242:	4313      	orrs	r3, r2
 8009244:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009246:	e03a      	b.n	80092be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d020      	beq.n	8009292 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009250:	4b34      	ldr	r3, [pc, #208]	; (8009324 <HAL_RCC_OscConfig+0x244>)
 8009252:	2201      	movs	r2, #1
 8009254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009256:	f7fd f83b 	bl	80062d0 <HAL_GetTick>
 800925a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800925c:	e008      	b.n	8009270 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800925e:	f7fd f837 	bl	80062d0 <HAL_GetTick>
 8009262:	4602      	mov	r2, r0
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	2b02      	cmp	r3, #2
 800926a:	d901      	bls.n	8009270 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800926c:	2303      	movs	r3, #3
 800926e:	e1a8      	b.n	80095c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009270:	4b2b      	ldr	r3, [pc, #172]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 0302 	and.w	r3, r3, #2
 8009278:	2b00      	cmp	r3, #0
 800927a:	d0f0      	beq.n	800925e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800927c:	4b28      	ldr	r3, [pc, #160]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	00db      	lsls	r3, r3, #3
 800928a:	4925      	ldr	r1, [pc, #148]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 800928c:	4313      	orrs	r3, r2
 800928e:	600b      	str	r3, [r1, #0]
 8009290:	e015      	b.n	80092be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009292:	4b24      	ldr	r3, [pc, #144]	; (8009324 <HAL_RCC_OscConfig+0x244>)
 8009294:	2200      	movs	r2, #0
 8009296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009298:	f7fd f81a 	bl	80062d0 <HAL_GetTick>
 800929c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800929e:	e008      	b.n	80092b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092a0:	f7fd f816 	bl	80062d0 <HAL_GetTick>
 80092a4:	4602      	mov	r2, r0
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d901      	bls.n	80092b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80092ae:	2303      	movs	r3, #3
 80092b0:	e187      	b.n	80095c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092b2:	4b1b      	ldr	r3, [pc, #108]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 0302 	and.w	r3, r3, #2
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1f0      	bne.n	80092a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 0308 	and.w	r3, r3, #8
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d036      	beq.n	8009338 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d016      	beq.n	8009300 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092d2:	4b15      	ldr	r3, [pc, #84]	; (8009328 <HAL_RCC_OscConfig+0x248>)
 80092d4:	2201      	movs	r2, #1
 80092d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092d8:	f7fc fffa 	bl	80062d0 <HAL_GetTick>
 80092dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092de:	e008      	b.n	80092f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80092e0:	f7fc fff6 	bl	80062d0 <HAL_GetTick>
 80092e4:	4602      	mov	r2, r0
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d901      	bls.n	80092f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80092ee:	2303      	movs	r3, #3
 80092f0:	e167      	b.n	80095c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092f2:	4b0b      	ldr	r3, [pc, #44]	; (8009320 <HAL_RCC_OscConfig+0x240>)
 80092f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092f6:	f003 0302 	and.w	r3, r3, #2
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d0f0      	beq.n	80092e0 <HAL_RCC_OscConfig+0x200>
 80092fe:	e01b      	b.n	8009338 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009300:	4b09      	ldr	r3, [pc, #36]	; (8009328 <HAL_RCC_OscConfig+0x248>)
 8009302:	2200      	movs	r2, #0
 8009304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009306:	f7fc ffe3 	bl	80062d0 <HAL_GetTick>
 800930a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800930c:	e00e      	b.n	800932c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800930e:	f7fc ffdf 	bl	80062d0 <HAL_GetTick>
 8009312:	4602      	mov	r2, r0
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	1ad3      	subs	r3, r2, r3
 8009318:	2b02      	cmp	r3, #2
 800931a:	d907      	bls.n	800932c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800931c:	2303      	movs	r3, #3
 800931e:	e150      	b.n	80095c2 <HAL_RCC_OscConfig+0x4e2>
 8009320:	40023800 	.word	0x40023800
 8009324:	42470000 	.word	0x42470000
 8009328:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800932c:	4b88      	ldr	r3, [pc, #544]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 800932e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009330:	f003 0302 	and.w	r3, r3, #2
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1ea      	bne.n	800930e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0304 	and.w	r3, r3, #4
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 8097 	beq.w	8009474 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009346:	2300      	movs	r3, #0
 8009348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800934a:	4b81      	ldr	r3, [pc, #516]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 800934c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10f      	bne.n	8009376 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009356:	2300      	movs	r3, #0
 8009358:	60bb      	str	r3, [r7, #8]
 800935a:	4b7d      	ldr	r3, [pc, #500]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 800935c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935e:	4a7c      	ldr	r2, [pc, #496]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 8009360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009364:	6413      	str	r3, [r2, #64]	; 0x40
 8009366:	4b7a      	ldr	r3, [pc, #488]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 8009368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800936e:	60bb      	str	r3, [r7, #8]
 8009370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009372:	2301      	movs	r3, #1
 8009374:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009376:	4b77      	ldr	r3, [pc, #476]	; (8009554 <HAL_RCC_OscConfig+0x474>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800937e:	2b00      	cmp	r3, #0
 8009380:	d118      	bne.n	80093b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009382:	4b74      	ldr	r3, [pc, #464]	; (8009554 <HAL_RCC_OscConfig+0x474>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a73      	ldr	r2, [pc, #460]	; (8009554 <HAL_RCC_OscConfig+0x474>)
 8009388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800938c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800938e:	f7fc ff9f 	bl	80062d0 <HAL_GetTick>
 8009392:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009394:	e008      	b.n	80093a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009396:	f7fc ff9b 	bl	80062d0 <HAL_GetTick>
 800939a:	4602      	mov	r2, r0
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	1ad3      	subs	r3, r2, r3
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d901      	bls.n	80093a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80093a4:	2303      	movs	r3, #3
 80093a6:	e10c      	b.n	80095c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093a8:	4b6a      	ldr	r3, [pc, #424]	; (8009554 <HAL_RCC_OscConfig+0x474>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d0f0      	beq.n	8009396 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d106      	bne.n	80093ca <HAL_RCC_OscConfig+0x2ea>
 80093bc:	4b64      	ldr	r3, [pc, #400]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 80093be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c0:	4a63      	ldr	r2, [pc, #396]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 80093c2:	f043 0301 	orr.w	r3, r3, #1
 80093c6:	6713      	str	r3, [r2, #112]	; 0x70
 80093c8:	e01c      	b.n	8009404 <HAL_RCC_OscConfig+0x324>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	2b05      	cmp	r3, #5
 80093d0:	d10c      	bne.n	80093ec <HAL_RCC_OscConfig+0x30c>
 80093d2:	4b5f      	ldr	r3, [pc, #380]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 80093d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d6:	4a5e      	ldr	r2, [pc, #376]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 80093d8:	f043 0304 	orr.w	r3, r3, #4
 80093dc:	6713      	str	r3, [r2, #112]	; 0x70
 80093de:	4b5c      	ldr	r3, [pc, #368]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 80093e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093e2:	4a5b      	ldr	r2, [pc, #364]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 80093e4:	f043 0301 	orr.w	r3, r3, #1
 80093e8:	6713      	str	r3, [r2, #112]	; 0x70
 80093ea:	e00b      	b.n	8009404 <HAL_RCC_OscConfig+0x324>
 80093ec:	4b58      	ldr	r3, [pc, #352]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 80093ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f0:	4a57      	ldr	r2, [pc, #348]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 80093f2:	f023 0301 	bic.w	r3, r3, #1
 80093f6:	6713      	str	r3, [r2, #112]	; 0x70
 80093f8:	4b55      	ldr	r3, [pc, #340]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 80093fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fc:	4a54      	ldr	r2, [pc, #336]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 80093fe:	f023 0304 	bic.w	r3, r3, #4
 8009402:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d015      	beq.n	8009438 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800940c:	f7fc ff60 	bl	80062d0 <HAL_GetTick>
 8009410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009412:	e00a      	b.n	800942a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009414:	f7fc ff5c 	bl	80062d0 <HAL_GetTick>
 8009418:	4602      	mov	r2, r0
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009422:	4293      	cmp	r3, r2
 8009424:	d901      	bls.n	800942a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009426:	2303      	movs	r3, #3
 8009428:	e0cb      	b.n	80095c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800942a:	4b49      	ldr	r3, [pc, #292]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 800942c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800942e:	f003 0302 	and.w	r3, r3, #2
 8009432:	2b00      	cmp	r3, #0
 8009434:	d0ee      	beq.n	8009414 <HAL_RCC_OscConfig+0x334>
 8009436:	e014      	b.n	8009462 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009438:	f7fc ff4a 	bl	80062d0 <HAL_GetTick>
 800943c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800943e:	e00a      	b.n	8009456 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009440:	f7fc ff46 	bl	80062d0 <HAL_GetTick>
 8009444:	4602      	mov	r2, r0
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	f241 3288 	movw	r2, #5000	; 0x1388
 800944e:	4293      	cmp	r3, r2
 8009450:	d901      	bls.n	8009456 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	e0b5      	b.n	80095c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009456:	4b3e      	ldr	r3, [pc, #248]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 8009458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800945a:	f003 0302 	and.w	r3, r3, #2
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1ee      	bne.n	8009440 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009462:	7dfb      	ldrb	r3, [r7, #23]
 8009464:	2b01      	cmp	r3, #1
 8009466:	d105      	bne.n	8009474 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009468:	4b39      	ldr	r3, [pc, #228]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 800946a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946c:	4a38      	ldr	r2, [pc, #224]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 800946e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009472:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	699b      	ldr	r3, [r3, #24]
 8009478:	2b00      	cmp	r3, #0
 800947a:	f000 80a1 	beq.w	80095c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800947e:	4b34      	ldr	r3, [pc, #208]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	f003 030c 	and.w	r3, r3, #12
 8009486:	2b08      	cmp	r3, #8
 8009488:	d05c      	beq.n	8009544 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	699b      	ldr	r3, [r3, #24]
 800948e:	2b02      	cmp	r3, #2
 8009490:	d141      	bne.n	8009516 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009492:	4b31      	ldr	r3, [pc, #196]	; (8009558 <HAL_RCC_OscConfig+0x478>)
 8009494:	2200      	movs	r2, #0
 8009496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009498:	f7fc ff1a 	bl	80062d0 <HAL_GetTick>
 800949c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800949e:	e008      	b.n	80094b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094a0:	f7fc ff16 	bl	80062d0 <HAL_GetTick>
 80094a4:	4602      	mov	r2, r0
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d901      	bls.n	80094b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80094ae:	2303      	movs	r3, #3
 80094b0:	e087      	b.n	80095c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094b2:	4b27      	ldr	r3, [pc, #156]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1f0      	bne.n	80094a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	69da      	ldr	r2, [r3, #28]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	431a      	orrs	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094cc:	019b      	lsls	r3, r3, #6
 80094ce:	431a      	orrs	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d4:	085b      	lsrs	r3, r3, #1
 80094d6:	3b01      	subs	r3, #1
 80094d8:	041b      	lsls	r3, r3, #16
 80094da:	431a      	orrs	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e0:	061b      	lsls	r3, r3, #24
 80094e2:	491b      	ldr	r1, [pc, #108]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 80094e4:	4313      	orrs	r3, r2
 80094e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80094e8:	4b1b      	ldr	r3, [pc, #108]	; (8009558 <HAL_RCC_OscConfig+0x478>)
 80094ea:	2201      	movs	r2, #1
 80094ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094ee:	f7fc feef 	bl	80062d0 <HAL_GetTick>
 80094f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094f4:	e008      	b.n	8009508 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094f6:	f7fc feeb 	bl	80062d0 <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	2b02      	cmp	r3, #2
 8009502:	d901      	bls.n	8009508 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009504:	2303      	movs	r3, #3
 8009506:	e05c      	b.n	80095c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009508:	4b11      	ldr	r3, [pc, #68]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009510:	2b00      	cmp	r3, #0
 8009512:	d0f0      	beq.n	80094f6 <HAL_RCC_OscConfig+0x416>
 8009514:	e054      	b.n	80095c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009516:	4b10      	ldr	r3, [pc, #64]	; (8009558 <HAL_RCC_OscConfig+0x478>)
 8009518:	2200      	movs	r2, #0
 800951a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800951c:	f7fc fed8 	bl	80062d0 <HAL_GetTick>
 8009520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009522:	e008      	b.n	8009536 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009524:	f7fc fed4 	bl	80062d0 <HAL_GetTick>
 8009528:	4602      	mov	r2, r0
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	2b02      	cmp	r3, #2
 8009530:	d901      	bls.n	8009536 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009532:	2303      	movs	r3, #3
 8009534:	e045      	b.n	80095c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009536:	4b06      	ldr	r3, [pc, #24]	; (8009550 <HAL_RCC_OscConfig+0x470>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1f0      	bne.n	8009524 <HAL_RCC_OscConfig+0x444>
 8009542:	e03d      	b.n	80095c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	2b01      	cmp	r3, #1
 800954a:	d107      	bne.n	800955c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e038      	b.n	80095c2 <HAL_RCC_OscConfig+0x4e2>
 8009550:	40023800 	.word	0x40023800
 8009554:	40007000 	.word	0x40007000
 8009558:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800955c:	4b1b      	ldr	r3, [pc, #108]	; (80095cc <HAL_RCC_OscConfig+0x4ec>)
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d028      	beq.n	80095bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009574:	429a      	cmp	r2, r3
 8009576:	d121      	bne.n	80095bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009582:	429a      	cmp	r2, r3
 8009584:	d11a      	bne.n	80095bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800958c:	4013      	ands	r3, r2
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009592:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009594:	4293      	cmp	r3, r2
 8009596:	d111      	bne.n	80095bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a2:	085b      	lsrs	r3, r3, #1
 80095a4:	3b01      	subs	r3, #1
 80095a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d107      	bne.n	80095bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d001      	beq.n	80095c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e000      	b.n	80095c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3718      	adds	r7, #24
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	40023800 	.word	0x40023800

080095d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d101      	bne.n	80095e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	e0cc      	b.n	800977e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80095e4:	4b68      	ldr	r3, [pc, #416]	; (8009788 <HAL_RCC_ClockConfig+0x1b8>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 0307 	and.w	r3, r3, #7
 80095ec:	683a      	ldr	r2, [r7, #0]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d90c      	bls.n	800960c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095f2:	4b65      	ldr	r3, [pc, #404]	; (8009788 <HAL_RCC_ClockConfig+0x1b8>)
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	b2d2      	uxtb	r2, r2
 80095f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095fa:	4b63      	ldr	r3, [pc, #396]	; (8009788 <HAL_RCC_ClockConfig+0x1b8>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 0307 	and.w	r3, r3, #7
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	429a      	cmp	r2, r3
 8009606:	d001      	beq.n	800960c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	e0b8      	b.n	800977e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 0302 	and.w	r3, r3, #2
 8009614:	2b00      	cmp	r3, #0
 8009616:	d020      	beq.n	800965a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0304 	and.w	r3, r3, #4
 8009620:	2b00      	cmp	r3, #0
 8009622:	d005      	beq.n	8009630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009624:	4b59      	ldr	r3, [pc, #356]	; (800978c <HAL_RCC_ClockConfig+0x1bc>)
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	4a58      	ldr	r2, [pc, #352]	; (800978c <HAL_RCC_ClockConfig+0x1bc>)
 800962a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800962e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 0308 	and.w	r3, r3, #8
 8009638:	2b00      	cmp	r3, #0
 800963a:	d005      	beq.n	8009648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800963c:	4b53      	ldr	r3, [pc, #332]	; (800978c <HAL_RCC_ClockConfig+0x1bc>)
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	4a52      	ldr	r2, [pc, #328]	; (800978c <HAL_RCC_ClockConfig+0x1bc>)
 8009642:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009648:	4b50      	ldr	r3, [pc, #320]	; (800978c <HAL_RCC_ClockConfig+0x1bc>)
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	494d      	ldr	r1, [pc, #308]	; (800978c <HAL_RCC_ClockConfig+0x1bc>)
 8009656:	4313      	orrs	r3, r2
 8009658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 0301 	and.w	r3, r3, #1
 8009662:	2b00      	cmp	r3, #0
 8009664:	d044      	beq.n	80096f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d107      	bne.n	800967e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800966e:	4b47      	ldr	r3, [pc, #284]	; (800978c <HAL_RCC_ClockConfig+0x1bc>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009676:	2b00      	cmp	r3, #0
 8009678:	d119      	bne.n	80096ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e07f      	b.n	800977e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	2b02      	cmp	r3, #2
 8009684:	d003      	beq.n	800968e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800968a:	2b03      	cmp	r3, #3
 800968c:	d107      	bne.n	800969e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800968e:	4b3f      	ldr	r3, [pc, #252]	; (800978c <HAL_RCC_ClockConfig+0x1bc>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009696:	2b00      	cmp	r3, #0
 8009698:	d109      	bne.n	80096ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e06f      	b.n	800977e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800969e:	4b3b      	ldr	r3, [pc, #236]	; (800978c <HAL_RCC_ClockConfig+0x1bc>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 0302 	and.w	r3, r3, #2
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e067      	b.n	800977e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80096ae:	4b37      	ldr	r3, [pc, #220]	; (800978c <HAL_RCC_ClockConfig+0x1bc>)
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f023 0203 	bic.w	r2, r3, #3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	4934      	ldr	r1, [pc, #208]	; (800978c <HAL_RCC_ClockConfig+0x1bc>)
 80096bc:	4313      	orrs	r3, r2
 80096be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80096c0:	f7fc fe06 	bl	80062d0 <HAL_GetTick>
 80096c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096c6:	e00a      	b.n	80096de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096c8:	f7fc fe02 	bl	80062d0 <HAL_GetTick>
 80096cc:	4602      	mov	r2, r0
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d901      	bls.n	80096de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80096da:	2303      	movs	r3, #3
 80096dc:	e04f      	b.n	800977e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096de:	4b2b      	ldr	r3, [pc, #172]	; (800978c <HAL_RCC_ClockConfig+0x1bc>)
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f003 020c 	and.w	r2, r3, #12
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d1eb      	bne.n	80096c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80096f0:	4b25      	ldr	r3, [pc, #148]	; (8009788 <HAL_RCC_ClockConfig+0x1b8>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 0307 	and.w	r3, r3, #7
 80096f8:	683a      	ldr	r2, [r7, #0]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d20c      	bcs.n	8009718 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096fe:	4b22      	ldr	r3, [pc, #136]	; (8009788 <HAL_RCC_ClockConfig+0x1b8>)
 8009700:	683a      	ldr	r2, [r7, #0]
 8009702:	b2d2      	uxtb	r2, r2
 8009704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009706:	4b20      	ldr	r3, [pc, #128]	; (8009788 <HAL_RCC_ClockConfig+0x1b8>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 0307 	and.w	r3, r3, #7
 800970e:	683a      	ldr	r2, [r7, #0]
 8009710:	429a      	cmp	r2, r3
 8009712:	d001      	beq.n	8009718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	e032      	b.n	800977e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 0304 	and.w	r3, r3, #4
 8009720:	2b00      	cmp	r3, #0
 8009722:	d008      	beq.n	8009736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009724:	4b19      	ldr	r3, [pc, #100]	; (800978c <HAL_RCC_ClockConfig+0x1bc>)
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	4916      	ldr	r1, [pc, #88]	; (800978c <HAL_RCC_ClockConfig+0x1bc>)
 8009732:	4313      	orrs	r3, r2
 8009734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f003 0308 	and.w	r3, r3, #8
 800973e:	2b00      	cmp	r3, #0
 8009740:	d009      	beq.n	8009756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009742:	4b12      	ldr	r3, [pc, #72]	; (800978c <HAL_RCC_ClockConfig+0x1bc>)
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	00db      	lsls	r3, r3, #3
 8009750:	490e      	ldr	r1, [pc, #56]	; (800978c <HAL_RCC_ClockConfig+0x1bc>)
 8009752:	4313      	orrs	r3, r2
 8009754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009756:	f000 f821 	bl	800979c <HAL_RCC_GetSysClockFreq>
 800975a:	4602      	mov	r2, r0
 800975c:	4b0b      	ldr	r3, [pc, #44]	; (800978c <HAL_RCC_ClockConfig+0x1bc>)
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	091b      	lsrs	r3, r3, #4
 8009762:	f003 030f 	and.w	r3, r3, #15
 8009766:	490a      	ldr	r1, [pc, #40]	; (8009790 <HAL_RCC_ClockConfig+0x1c0>)
 8009768:	5ccb      	ldrb	r3, [r1, r3]
 800976a:	fa22 f303 	lsr.w	r3, r2, r3
 800976e:	4a09      	ldr	r2, [pc, #36]	; (8009794 <HAL_RCC_ClockConfig+0x1c4>)
 8009770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009772:	4b09      	ldr	r3, [pc, #36]	; (8009798 <HAL_RCC_ClockConfig+0x1c8>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4618      	mov	r0, r3
 8009778:	f7fc fd66 	bl	8006248 <HAL_InitTick>

  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	40023c00 	.word	0x40023c00
 800978c:	40023800 	.word	0x40023800
 8009790:	0800dc78 	.word	0x0800dc78
 8009794:	200005ac 	.word	0x200005ac
 8009798:	200005b0 	.word	0x200005b0

0800979c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800979c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097a0:	b090      	sub	sp, #64	; 0x40
 80097a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80097a4:	2300      	movs	r3, #0
 80097a6:	637b      	str	r3, [r7, #52]	; 0x34
 80097a8:	2300      	movs	r3, #0
 80097aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097ac:	2300      	movs	r3, #0
 80097ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80097b0:	2300      	movs	r3, #0
 80097b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80097b4:	4b59      	ldr	r3, [pc, #356]	; (800991c <HAL_RCC_GetSysClockFreq+0x180>)
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f003 030c 	and.w	r3, r3, #12
 80097bc:	2b08      	cmp	r3, #8
 80097be:	d00d      	beq.n	80097dc <HAL_RCC_GetSysClockFreq+0x40>
 80097c0:	2b08      	cmp	r3, #8
 80097c2:	f200 80a1 	bhi.w	8009908 <HAL_RCC_GetSysClockFreq+0x16c>
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d002      	beq.n	80097d0 <HAL_RCC_GetSysClockFreq+0x34>
 80097ca:	2b04      	cmp	r3, #4
 80097cc:	d003      	beq.n	80097d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80097ce:	e09b      	b.n	8009908 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80097d0:	4b53      	ldr	r3, [pc, #332]	; (8009920 <HAL_RCC_GetSysClockFreq+0x184>)
 80097d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80097d4:	e09b      	b.n	800990e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80097d6:	4b53      	ldr	r3, [pc, #332]	; (8009924 <HAL_RCC_GetSysClockFreq+0x188>)
 80097d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80097da:	e098      	b.n	800990e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80097dc:	4b4f      	ldr	r3, [pc, #316]	; (800991c <HAL_RCC_GetSysClockFreq+0x180>)
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80097e6:	4b4d      	ldr	r3, [pc, #308]	; (800991c <HAL_RCC_GetSysClockFreq+0x180>)
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d028      	beq.n	8009844 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097f2:	4b4a      	ldr	r3, [pc, #296]	; (800991c <HAL_RCC_GetSysClockFreq+0x180>)
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	099b      	lsrs	r3, r3, #6
 80097f8:	2200      	movs	r2, #0
 80097fa:	623b      	str	r3, [r7, #32]
 80097fc:	627a      	str	r2, [r7, #36]	; 0x24
 80097fe:	6a3b      	ldr	r3, [r7, #32]
 8009800:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009804:	2100      	movs	r1, #0
 8009806:	4b47      	ldr	r3, [pc, #284]	; (8009924 <HAL_RCC_GetSysClockFreq+0x188>)
 8009808:	fb03 f201 	mul.w	r2, r3, r1
 800980c:	2300      	movs	r3, #0
 800980e:	fb00 f303 	mul.w	r3, r0, r3
 8009812:	4413      	add	r3, r2
 8009814:	4a43      	ldr	r2, [pc, #268]	; (8009924 <HAL_RCC_GetSysClockFreq+0x188>)
 8009816:	fba0 1202 	umull	r1, r2, r0, r2
 800981a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800981c:	460a      	mov	r2, r1
 800981e:	62ba      	str	r2, [r7, #40]	; 0x28
 8009820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009822:	4413      	add	r3, r2
 8009824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009828:	2200      	movs	r2, #0
 800982a:	61bb      	str	r3, [r7, #24]
 800982c:	61fa      	str	r2, [r7, #28]
 800982e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009832:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009836:	f7f7 f82d 	bl	8000894 <__aeabi_uldivmod>
 800983a:	4602      	mov	r2, r0
 800983c:	460b      	mov	r3, r1
 800983e:	4613      	mov	r3, r2
 8009840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009842:	e053      	b.n	80098ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009844:	4b35      	ldr	r3, [pc, #212]	; (800991c <HAL_RCC_GetSysClockFreq+0x180>)
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	099b      	lsrs	r3, r3, #6
 800984a:	2200      	movs	r2, #0
 800984c:	613b      	str	r3, [r7, #16]
 800984e:	617a      	str	r2, [r7, #20]
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009856:	f04f 0b00 	mov.w	fp, #0
 800985a:	4652      	mov	r2, sl
 800985c:	465b      	mov	r3, fp
 800985e:	f04f 0000 	mov.w	r0, #0
 8009862:	f04f 0100 	mov.w	r1, #0
 8009866:	0159      	lsls	r1, r3, #5
 8009868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800986c:	0150      	lsls	r0, r2, #5
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	ebb2 080a 	subs.w	r8, r2, sl
 8009876:	eb63 090b 	sbc.w	r9, r3, fp
 800987a:	f04f 0200 	mov.w	r2, #0
 800987e:	f04f 0300 	mov.w	r3, #0
 8009882:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009886:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800988a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800988e:	ebb2 0408 	subs.w	r4, r2, r8
 8009892:	eb63 0509 	sbc.w	r5, r3, r9
 8009896:	f04f 0200 	mov.w	r2, #0
 800989a:	f04f 0300 	mov.w	r3, #0
 800989e:	00eb      	lsls	r3, r5, #3
 80098a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80098a4:	00e2      	lsls	r2, r4, #3
 80098a6:	4614      	mov	r4, r2
 80098a8:	461d      	mov	r5, r3
 80098aa:	eb14 030a 	adds.w	r3, r4, sl
 80098ae:	603b      	str	r3, [r7, #0]
 80098b0:	eb45 030b 	adc.w	r3, r5, fp
 80098b4:	607b      	str	r3, [r7, #4]
 80098b6:	f04f 0200 	mov.w	r2, #0
 80098ba:	f04f 0300 	mov.w	r3, #0
 80098be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80098c2:	4629      	mov	r1, r5
 80098c4:	028b      	lsls	r3, r1, #10
 80098c6:	4621      	mov	r1, r4
 80098c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80098cc:	4621      	mov	r1, r4
 80098ce:	028a      	lsls	r2, r1, #10
 80098d0:	4610      	mov	r0, r2
 80098d2:	4619      	mov	r1, r3
 80098d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d6:	2200      	movs	r2, #0
 80098d8:	60bb      	str	r3, [r7, #8]
 80098da:	60fa      	str	r2, [r7, #12]
 80098dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098e0:	f7f6 ffd8 	bl	8000894 <__aeabi_uldivmod>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	4613      	mov	r3, r2
 80098ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80098ec:	4b0b      	ldr	r3, [pc, #44]	; (800991c <HAL_RCC_GetSysClockFreq+0x180>)
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	0c1b      	lsrs	r3, r3, #16
 80098f2:	f003 0303 	and.w	r3, r3, #3
 80098f6:	3301      	adds	r3, #1
 80098f8:	005b      	lsls	r3, r3, #1
 80098fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80098fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009900:	fbb2 f3f3 	udiv	r3, r2, r3
 8009904:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009906:	e002      	b.n	800990e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009908:	4b05      	ldr	r3, [pc, #20]	; (8009920 <HAL_RCC_GetSysClockFreq+0x184>)
 800990a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800990c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800990e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009910:	4618      	mov	r0, r3
 8009912:	3740      	adds	r7, #64	; 0x40
 8009914:	46bd      	mov	sp, r7
 8009916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800991a:	bf00      	nop
 800991c:	40023800 	.word	0x40023800
 8009920:	00f42400 	.word	0x00f42400
 8009924:	017d7840 	.word	0x017d7840

08009928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009928:	b480      	push	{r7}
 800992a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800992c:	4b03      	ldr	r3, [pc, #12]	; (800993c <HAL_RCC_GetHCLKFreq+0x14>)
 800992e:	681b      	ldr	r3, [r3, #0]
}
 8009930:	4618      	mov	r0, r3
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	200005ac 	.word	0x200005ac

08009940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009944:	f7ff fff0 	bl	8009928 <HAL_RCC_GetHCLKFreq>
 8009948:	4602      	mov	r2, r0
 800994a:	4b05      	ldr	r3, [pc, #20]	; (8009960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	0a9b      	lsrs	r3, r3, #10
 8009950:	f003 0307 	and.w	r3, r3, #7
 8009954:	4903      	ldr	r1, [pc, #12]	; (8009964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009956:	5ccb      	ldrb	r3, [r1, r3]
 8009958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800995c:	4618      	mov	r0, r3
 800995e:	bd80      	pop	{r7, pc}
 8009960:	40023800 	.word	0x40023800
 8009964:	0800dc88 	.word	0x0800dc88

08009968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800996c:	f7ff ffdc 	bl	8009928 <HAL_RCC_GetHCLKFreq>
 8009970:	4602      	mov	r2, r0
 8009972:	4b05      	ldr	r3, [pc, #20]	; (8009988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	0b5b      	lsrs	r3, r3, #13
 8009978:	f003 0307 	and.w	r3, r3, #7
 800997c:	4903      	ldr	r1, [pc, #12]	; (800998c <HAL_RCC_GetPCLK2Freq+0x24>)
 800997e:	5ccb      	ldrb	r3, [r1, r3]
 8009980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009984:	4618      	mov	r0, r3
 8009986:	bd80      	pop	{r7, pc}
 8009988:	40023800 	.word	0x40023800
 800998c:	0800dc88 	.word	0x0800dc88

08009990 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d101      	bne.n	80099a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e07b      	b.n	8009a9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d108      	bne.n	80099bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099b2:	d009      	beq.n	80099c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	61da      	str	r2, [r3, #28]
 80099ba:	e005      	b.n	80099c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d106      	bne.n	80099e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7fc f90e 	bl	8005c04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2202      	movs	r2, #2
 80099ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009a10:	431a      	orrs	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	f003 0302 	and.w	r3, r3, #2
 8009a24:	431a      	orrs	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	f003 0301 	and.w	r3, r3, #1
 8009a2e:	431a      	orrs	r2, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a38:	431a      	orrs	r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	69db      	ldr	r3, [r3, #28]
 8009a3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a42:	431a      	orrs	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a1b      	ldr	r3, [r3, #32]
 8009a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a4c:	ea42 0103 	orr.w	r1, r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	430a      	orrs	r2, r1
 8009a5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	699b      	ldr	r3, [r3, #24]
 8009a64:	0c1b      	lsrs	r3, r3, #16
 8009a66:	f003 0104 	and.w	r1, r3, #4
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6e:	f003 0210 	and.w	r2, r3, #16
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	430a      	orrs	r2, r1
 8009a78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	69da      	ldr	r2, [r3, #28]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b088      	sub	sp, #32
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	60f8      	str	r0, [r7, #12]
 8009aaa:	60b9      	str	r1, [r7, #8]
 8009aac:	603b      	str	r3, [r7, #0]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d101      	bne.n	8009ac4 <HAL_SPI_Transmit+0x22>
 8009ac0:	2302      	movs	r3, #2
 8009ac2:	e126      	b.n	8009d12 <HAL_SPI_Transmit+0x270>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009acc:	f7fc fc00 	bl	80062d0 <HAL_GetTick>
 8009ad0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009ad2:	88fb      	ldrh	r3, [r7, #6]
 8009ad4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d002      	beq.n	8009ae8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009ae6:	e10b      	b.n	8009d00 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d002      	beq.n	8009af4 <HAL_SPI_Transmit+0x52>
 8009aee:	88fb      	ldrh	r3, [r7, #6]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d102      	bne.n	8009afa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009af8:	e102      	b.n	8009d00 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2203      	movs	r2, #3
 8009afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2200      	movs	r2, #0
 8009b06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	88fa      	ldrh	r2, [r7, #6]
 8009b12:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	88fa      	ldrh	r2, [r7, #6]
 8009b18:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2200      	movs	r2, #0
 8009b36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b40:	d10f      	bne.n	8009b62 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b6c:	2b40      	cmp	r3, #64	; 0x40
 8009b6e:	d007      	beq.n	8009b80 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b88:	d14b      	bne.n	8009c22 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d002      	beq.n	8009b98 <HAL_SPI_Transmit+0xf6>
 8009b92:	8afb      	ldrh	r3, [r7, #22]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d13e      	bne.n	8009c16 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9c:	881a      	ldrh	r2, [r3, #0]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ba8:	1c9a      	adds	r2, r3, #2
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009bbc:	e02b      	b.n	8009c16 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	f003 0302 	and.w	r3, r3, #2
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d112      	bne.n	8009bf2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd0:	881a      	ldrh	r2, [r3, #0]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bdc:	1c9a      	adds	r2, r3, #2
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	3b01      	subs	r3, #1
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	86da      	strh	r2, [r3, #54]	; 0x36
 8009bf0:	e011      	b.n	8009c16 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009bf2:	f7fc fb6d 	bl	80062d0 <HAL_GetTick>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	683a      	ldr	r2, [r7, #0]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d803      	bhi.n	8009c0a <HAL_SPI_Transmit+0x168>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c08:	d102      	bne.n	8009c10 <HAL_SPI_Transmit+0x16e>
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d102      	bne.n	8009c16 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009c10:	2303      	movs	r3, #3
 8009c12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009c14:	e074      	b.n	8009d00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1ce      	bne.n	8009bbe <HAL_SPI_Transmit+0x11c>
 8009c20:	e04c      	b.n	8009cbc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d002      	beq.n	8009c30 <HAL_SPI_Transmit+0x18e>
 8009c2a:	8afb      	ldrh	r3, [r7, #22]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d140      	bne.n	8009cb2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	330c      	adds	r3, #12
 8009c3a:	7812      	ldrb	r2, [r2, #0]
 8009c3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c42:	1c5a      	adds	r2, r3, #1
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009c56:	e02c      	b.n	8009cb2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	f003 0302 	and.w	r3, r3, #2
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d113      	bne.n	8009c8e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	330c      	adds	r3, #12
 8009c70:	7812      	ldrb	r2, [r2, #0]
 8009c72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c78:	1c5a      	adds	r2, r3, #1
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	3b01      	subs	r3, #1
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8009c8c:	e011      	b.n	8009cb2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c8e:	f7fc fb1f 	bl	80062d0 <HAL_GetTick>
 8009c92:	4602      	mov	r2, r0
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	683a      	ldr	r2, [r7, #0]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d803      	bhi.n	8009ca6 <HAL_SPI_Transmit+0x204>
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca4:	d102      	bne.n	8009cac <HAL_SPI_Transmit+0x20a>
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d102      	bne.n	8009cb2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009cb0:	e026      	b.n	8009d00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1cd      	bne.n	8009c58 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009cbc:	69ba      	ldr	r2, [r7, #24]
 8009cbe:	6839      	ldr	r1, [r7, #0]
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f000 fd17 	bl	800a6f4 <SPI_EndRxTxTransaction>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d002      	beq.n	8009cd2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2220      	movs	r2, #32
 8009cd0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10a      	bne.n	8009cf0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009cda:	2300      	movs	r3, #0
 8009cdc:	613b      	str	r3, [r7, #16]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	613b      	str	r3, [r7, #16]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	613b      	str	r3, [r7, #16]
 8009cee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d002      	beq.n	8009cfe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	77fb      	strb	r3, [r7, #31]
 8009cfc:	e000      	b.n	8009d00 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009cfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009d10:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3720      	adds	r7, #32
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b088      	sub	sp, #32
 8009d1e:	af02      	add	r7, sp, #8
 8009d20:	60f8      	str	r0, [r7, #12]
 8009d22:	60b9      	str	r1, [r7, #8]
 8009d24:	603b      	str	r3, [r7, #0]
 8009d26:	4613      	mov	r3, r2
 8009d28:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d36:	d112      	bne.n	8009d5e <HAL_SPI_Receive+0x44>
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10e      	bne.n	8009d5e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2204      	movs	r2, #4
 8009d44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009d48:	88fa      	ldrh	r2, [r7, #6]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	68b9      	ldr	r1, [r7, #8]
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f000 f8f1 	bl	8009f3c <HAL_SPI_TransmitReceive>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	e0ea      	b.n	8009f34 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d101      	bne.n	8009d6c <HAL_SPI_Receive+0x52>
 8009d68:	2302      	movs	r3, #2
 8009d6a:	e0e3      	b.n	8009f34 <HAL_SPI_Receive+0x21a>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d74:	f7fc faac 	bl	80062d0 <HAL_GetTick>
 8009d78:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d002      	beq.n	8009d8c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009d86:	2302      	movs	r3, #2
 8009d88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009d8a:	e0ca      	b.n	8009f22 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d002      	beq.n	8009d98 <HAL_SPI_Receive+0x7e>
 8009d92:	88fb      	ldrh	r3, [r7, #6]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d102      	bne.n	8009d9e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009d9c:	e0c1      	b.n	8009f22 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2204      	movs	r2, #4
 8009da2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	88fa      	ldrh	r2, [r7, #6]
 8009db6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	88fa      	ldrh	r2, [r7, #6]
 8009dbc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009de4:	d10f      	bne.n	8009e06 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009df4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009e04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e10:	2b40      	cmp	r3, #64	; 0x40
 8009e12:	d007      	beq.n	8009e24 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d162      	bne.n	8009ef2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009e2c:	e02e      	b.n	8009e8c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	f003 0301 	and.w	r3, r3, #1
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d115      	bne.n	8009e68 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f103 020c 	add.w	r2, r3, #12
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e48:	7812      	ldrb	r2, [r2, #0]
 8009e4a:	b2d2      	uxtb	r2, r2
 8009e4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e52:	1c5a      	adds	r2, r3, #1
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009e66:	e011      	b.n	8009e8c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e68:	f7fc fa32 	bl	80062d0 <HAL_GetTick>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d803      	bhi.n	8009e80 <HAL_SPI_Receive+0x166>
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e7e:	d102      	bne.n	8009e86 <HAL_SPI_Receive+0x16c>
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d102      	bne.n	8009e8c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009e86:	2303      	movs	r3, #3
 8009e88:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009e8a:	e04a      	b.n	8009f22 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1cb      	bne.n	8009e2e <HAL_SPI_Receive+0x114>
 8009e96:	e031      	b.n	8009efc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	f003 0301 	and.w	r3, r3, #1
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d113      	bne.n	8009ece <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68da      	ldr	r2, [r3, #12]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb0:	b292      	uxth	r2, r2
 8009eb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb8:	1c9a      	adds	r2, r3, #2
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	b29a      	uxth	r2, r3
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009ecc:	e011      	b.n	8009ef2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ece:	f7fc f9ff 	bl	80062d0 <HAL_GetTick>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	683a      	ldr	r2, [r7, #0]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d803      	bhi.n	8009ee6 <HAL_SPI_Receive+0x1cc>
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee4:	d102      	bne.n	8009eec <HAL_SPI_Receive+0x1d2>
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d102      	bne.n	8009ef2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009eec:	2303      	movs	r3, #3
 8009eee:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009ef0:	e017      	b.n	8009f22 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1cd      	bne.n	8009e98 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	6839      	ldr	r1, [r7, #0]
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f000 fb91 	bl	800a628 <SPI_EndRxTransaction>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d002      	beq.n	8009f12 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2220      	movs	r2, #32
 8009f10:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d002      	beq.n	8009f20 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	75fb      	strb	r3, [r7, #23]
 8009f1e:	e000      	b.n	8009f22 <HAL_SPI_Receive+0x208>
  }

error :
 8009f20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2201      	movs	r2, #1
 8009f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3718      	adds	r7, #24
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b08c      	sub	sp, #48	; 0x30
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d101      	bne.n	8009f62 <HAL_SPI_TransmitReceive+0x26>
 8009f5e:	2302      	movs	r3, #2
 8009f60:	e18a      	b.n	800a278 <HAL_SPI_TransmitReceive+0x33c>
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f6a:	f7fc f9b1 	bl	80062d0 <HAL_GetTick>
 8009f6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009f80:	887b      	ldrh	r3, [r7, #2]
 8009f82:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009f84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d00f      	beq.n	8009fac <HAL_SPI_TransmitReceive+0x70>
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f92:	d107      	bne.n	8009fa4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d103      	bne.n	8009fa4 <HAL_SPI_TransmitReceive+0x68>
 8009f9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009fa0:	2b04      	cmp	r3, #4
 8009fa2:	d003      	beq.n	8009fac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009faa:	e15b      	b.n	800a264 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d005      	beq.n	8009fbe <HAL_SPI_TransmitReceive+0x82>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d002      	beq.n	8009fbe <HAL_SPI_TransmitReceive+0x82>
 8009fb8:	887b      	ldrh	r3, [r7, #2]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d103      	bne.n	8009fc6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009fc4:	e14e      	b.n	800a264 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2b04      	cmp	r3, #4
 8009fd0:	d003      	beq.n	8009fda <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2205      	movs	r2, #5
 8009fd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	887a      	ldrh	r2, [r7, #2]
 8009fea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	887a      	ldrh	r2, [r7, #2]
 8009ff0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	887a      	ldrh	r2, [r7, #2]
 8009ffc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	887a      	ldrh	r2, [r7, #2]
 800a002:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2200      	movs	r2, #0
 800a008:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2200      	movs	r2, #0
 800a00e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a01a:	2b40      	cmp	r3, #64	; 0x40
 800a01c:	d007      	beq.n	800a02e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a02c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a036:	d178      	bne.n	800a12a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d002      	beq.n	800a046 <HAL_SPI_TransmitReceive+0x10a>
 800a040:	8b7b      	ldrh	r3, [r7, #26]
 800a042:	2b01      	cmp	r3, #1
 800a044:	d166      	bne.n	800a114 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a04a:	881a      	ldrh	r2, [r3, #0]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a056:	1c9a      	adds	r2, r3, #2
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a060:	b29b      	uxth	r3, r3
 800a062:	3b01      	subs	r3, #1
 800a064:	b29a      	uxth	r2, r3
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a06a:	e053      	b.n	800a114 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	f003 0302 	and.w	r3, r3, #2
 800a076:	2b02      	cmp	r3, #2
 800a078:	d11b      	bne.n	800a0b2 <HAL_SPI_TransmitReceive+0x176>
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a07e:	b29b      	uxth	r3, r3
 800a080:	2b00      	cmp	r3, #0
 800a082:	d016      	beq.n	800a0b2 <HAL_SPI_TransmitReceive+0x176>
 800a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a086:	2b01      	cmp	r3, #1
 800a088:	d113      	bne.n	800a0b2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08e:	881a      	ldrh	r2, [r3, #0]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a09a:	1c9a      	adds	r2, r3, #2
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	f003 0301 	and.w	r3, r3, #1
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d119      	bne.n	800a0f4 <HAL_SPI_TransmitReceive+0x1b8>
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d014      	beq.n	800a0f4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	68da      	ldr	r2, [r3, #12]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d4:	b292      	uxth	r2, r2
 800a0d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0dc:	1c9a      	adds	r2, r3, #2
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a0f4:	f7fc f8ec 	bl	80062d0 <HAL_GetTick>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a100:	429a      	cmp	r2, r3
 800a102:	d807      	bhi.n	800a114 <HAL_SPI_TransmitReceive+0x1d8>
 800a104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a10a:	d003      	beq.n	800a114 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a10c:	2303      	movs	r3, #3
 800a10e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a112:	e0a7      	b.n	800a264 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a118:	b29b      	uxth	r3, r3
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1a6      	bne.n	800a06c <HAL_SPI_TransmitReceive+0x130>
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a122:	b29b      	uxth	r3, r3
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1a1      	bne.n	800a06c <HAL_SPI_TransmitReceive+0x130>
 800a128:	e07c      	b.n	800a224 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d002      	beq.n	800a138 <HAL_SPI_TransmitReceive+0x1fc>
 800a132:	8b7b      	ldrh	r3, [r7, #26]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d16b      	bne.n	800a210 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	330c      	adds	r3, #12
 800a142:	7812      	ldrb	r2, [r2, #0]
 800a144:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14a:	1c5a      	adds	r2, r3, #1
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a154:	b29b      	uxth	r3, r3
 800a156:	3b01      	subs	r3, #1
 800a158:	b29a      	uxth	r2, r3
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a15e:	e057      	b.n	800a210 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	f003 0302 	and.w	r3, r3, #2
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d11c      	bne.n	800a1a8 <HAL_SPI_TransmitReceive+0x26c>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a172:	b29b      	uxth	r3, r3
 800a174:	2b00      	cmp	r3, #0
 800a176:	d017      	beq.n	800a1a8 <HAL_SPI_TransmitReceive+0x26c>
 800a178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d114      	bne.n	800a1a8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	330c      	adds	r3, #12
 800a188:	7812      	ldrb	r2, [r2, #0]
 800a18a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a190:	1c5a      	adds	r2, r3, #1
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	3b01      	subs	r3, #1
 800a19e:	b29a      	uxth	r2, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	f003 0301 	and.w	r3, r3, #1
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d119      	bne.n	800a1ea <HAL_SPI_TransmitReceive+0x2ae>
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d014      	beq.n	800a1ea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68da      	ldr	r2, [r3, #12]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ca:	b2d2      	uxtb	r2, r2
 800a1cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d2:	1c5a      	adds	r2, r3, #1
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a1ea:	f7fc f871 	bl	80062d0 <HAL_GetTick>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d803      	bhi.n	800a202 <HAL_SPI_TransmitReceive+0x2c6>
 800a1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a200:	d102      	bne.n	800a208 <HAL_SPI_TransmitReceive+0x2cc>
 800a202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a204:	2b00      	cmp	r3, #0
 800a206:	d103      	bne.n	800a210 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a208:	2303      	movs	r3, #3
 800a20a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a20e:	e029      	b.n	800a264 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a214:	b29b      	uxth	r3, r3
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1a2      	bne.n	800a160 <HAL_SPI_TransmitReceive+0x224>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a21e:	b29b      	uxth	r3, r3
 800a220:	2b00      	cmp	r3, #0
 800a222:	d19d      	bne.n	800a160 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a226:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f000 fa63 	bl	800a6f4 <SPI_EndRxTxTransaction>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d006      	beq.n	800a242 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2220      	movs	r2, #32
 800a23e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a240:	e010      	b.n	800a264 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10b      	bne.n	800a262 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a24a:	2300      	movs	r3, #0
 800a24c:	617b      	str	r3, [r7, #20]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	617b      	str	r3, [r7, #20]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	617b      	str	r3, [r7, #20]
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	e000      	b.n	800a264 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a262:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a274:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3730      	adds	r7, #48	; 0x30
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	4613      	mov	r3, r2
 800a28c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d101      	bne.n	800a2a0 <HAL_SPI_Transmit_DMA+0x20>
 800a29c:	2302      	movs	r3, #2
 800a29e:	e09b      	b.n	800a3d8 <HAL_SPI_Transmit_DMA+0x158>
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d002      	beq.n	800a2ba <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a2b8:	e089      	b.n	800a3ce <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d002      	beq.n	800a2c6 <HAL_SPI_Transmit_DMA+0x46>
 800a2c0:	88fb      	ldrh	r3, [r7, #6]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d102      	bne.n	800a2cc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a2ca:	e080      	b.n	800a3ce <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2203      	movs	r2, #3
 800a2d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	88fa      	ldrh	r2, [r7, #6]
 800a2e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	88fa      	ldrh	r2, [r7, #6]
 800a2ea:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2200      	movs	r2, #0
 800a302:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a312:	d10f      	bne.n	800a334 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a322:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a332:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a338:	4a29      	ldr	r2, [pc, #164]	; (800a3e0 <HAL_SPI_Transmit_DMA+0x160>)
 800a33a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a340:	4a28      	ldr	r2, [pc, #160]	; (800a3e4 <HAL_SPI_Transmit_DMA+0x164>)
 800a342:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a348:	4a27      	ldr	r2, [pc, #156]	; (800a3e8 <HAL_SPI_Transmit_DMA+0x168>)
 800a34a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a350:	2200      	movs	r2, #0
 800a352:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35c:	4619      	mov	r1, r3
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	330c      	adds	r3, #12
 800a364:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a36a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a36c:	f7fd fa10 	bl	8007790 <HAL_DMA_Start_IT>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00c      	beq.n	800a390 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a37a:	f043 0210 	orr.w	r2, r3, #16
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2201      	movs	r2, #1
 800a38a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800a38e:	e01e      	b.n	800a3ce <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a39a:	2b40      	cmp	r3, #64	; 0x40
 800a39c:	d007      	beq.n	800a3ae <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3ac:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f042 0220 	orr.w	r2, r2, #32
 800a3bc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f042 0202 	orr.w	r2, r2, #2
 800a3cc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a3d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3718      	adds	r7, #24
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	0800a4bd 	.word	0x0800a4bd
 800a3e4:	0800a415 	.word	0x0800a415
 800a3e8:	0800a4d9 	.word	0x0800a4d9

0800a3ec <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a3f4:	bf00      	nop
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a408:	bf00      	nop
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b086      	sub	sp, #24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a420:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a422:	f7fb ff55 	bl	80062d0 <HAL_GetTick>
 800a426:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a436:	d03b      	beq.n	800a4b0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	685a      	ldr	r2, [r3, #4]
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f022 0220 	bic.w	r2, r2, #32
 800a446:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	685a      	ldr	r2, [r3, #4]
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f022 0202 	bic.w	r2, r2, #2
 800a456:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a458:	693a      	ldr	r2, [r7, #16]
 800a45a:	2164      	movs	r1, #100	; 0x64
 800a45c:	6978      	ldr	r0, [r7, #20]
 800a45e:	f000 f949 	bl	800a6f4 <SPI_EndRxTxTransaction>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d005      	beq.n	800a474 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a46c:	f043 0220 	orr.w	r2, r3, #32
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d10a      	bne.n	800a492 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a47c:	2300      	movs	r3, #0
 800a47e:	60fb      	str	r3, [r7, #12]
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	60fb      	str	r3, [r7, #12]
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	60fb      	str	r3, [r7, #12]
 800a490:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	2200      	movs	r2, #0
 800a496:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d003      	beq.n	800a4b0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a4a8:	6978      	ldr	r0, [r7, #20]
 800a4aa:	f7ff ffa9 	bl	800a400 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a4ae:	e002      	b.n	800a4b6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800a4b0:	6978      	ldr	r0, [r7, #20]
 800a4b2:	f7fb fa6d 	bl	8005990 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a4b6:	3718      	adds	r7, #24
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f7ff ff8e 	bl	800a3ec <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a4d0:	bf00      	nop
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f022 0203 	bic.w	r2, r2, #3
 800a4f4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4fa:	f043 0210 	orr.w	r2, r3, #16
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2201      	movs	r2, #1
 800a506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	f7ff ff78 	bl	800a400 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a510:	bf00      	nop
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b088      	sub	sp, #32
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	603b      	str	r3, [r7, #0]
 800a524:	4613      	mov	r3, r2
 800a526:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a528:	f7fb fed2 	bl	80062d0 <HAL_GetTick>
 800a52c:	4602      	mov	r2, r0
 800a52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a530:	1a9b      	subs	r3, r3, r2
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	4413      	add	r3, r2
 800a536:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a538:	f7fb feca 	bl	80062d0 <HAL_GetTick>
 800a53c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a53e:	4b39      	ldr	r3, [pc, #228]	; (800a624 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	015b      	lsls	r3, r3, #5
 800a544:	0d1b      	lsrs	r3, r3, #20
 800a546:	69fa      	ldr	r2, [r7, #28]
 800a548:	fb02 f303 	mul.w	r3, r2, r3
 800a54c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a54e:	e054      	b.n	800a5fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a556:	d050      	beq.n	800a5fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a558:	f7fb feba 	bl	80062d0 <HAL_GetTick>
 800a55c:	4602      	mov	r2, r0
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	69fa      	ldr	r2, [r7, #28]
 800a564:	429a      	cmp	r2, r3
 800a566:	d902      	bls.n	800a56e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d13d      	bne.n	800a5ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	685a      	ldr	r2, [r3, #4]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a57c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a586:	d111      	bne.n	800a5ac <SPI_WaitFlagStateUntilTimeout+0x94>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a590:	d004      	beq.n	800a59c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a59a:	d107      	bne.n	800a5ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5b4:	d10f      	bne.n	800a5d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a5c4:	601a      	str	r2, [r3, #0]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a5d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	e017      	b.n	800a61a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689a      	ldr	r2, [r3, #8]
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	4013      	ands	r3, r2
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	429a      	cmp	r2, r3
 800a608:	bf0c      	ite	eq
 800a60a:	2301      	moveq	r3, #1
 800a60c:	2300      	movne	r3, #0
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	461a      	mov	r2, r3
 800a612:	79fb      	ldrb	r3, [r7, #7]
 800a614:	429a      	cmp	r2, r3
 800a616:	d19b      	bne.n	800a550 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3720      	adds	r7, #32
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	200005ac 	.word	0x200005ac

0800a628 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b086      	sub	sp, #24
 800a62c:	af02      	add	r7, sp, #8
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a63c:	d111      	bne.n	800a662 <SPI_EndRxTransaction+0x3a>
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a646:	d004      	beq.n	800a652 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a650:	d107      	bne.n	800a662 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a660:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a66a:	d12a      	bne.n	800a6c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a674:	d012      	beq.n	800a69c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	2200      	movs	r2, #0
 800a67e:	2180      	movs	r1, #128	; 0x80
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f7ff ff49 	bl	800a518 <SPI_WaitFlagStateUntilTimeout>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d02d      	beq.n	800a6e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a690:	f043 0220 	orr.w	r2, r3, #32
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a698:	2303      	movs	r3, #3
 800a69a:	e026      	b.n	800a6ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	2101      	movs	r1, #1
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f7ff ff36 	bl	800a518 <SPI_WaitFlagStateUntilTimeout>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d01a      	beq.n	800a6e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6b6:	f043 0220 	orr.w	r2, r3, #32
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	e013      	b.n	800a6ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	2101      	movs	r1, #1
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f7ff ff23 	bl	800a518 <SPI_WaitFlagStateUntilTimeout>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d007      	beq.n	800a6e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6dc:	f043 0220 	orr.w	r2, r3, #32
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a6e4:	2303      	movs	r3, #3
 800a6e6:	e000      	b.n	800a6ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
	...

0800a6f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b088      	sub	sp, #32
 800a6f8:	af02      	add	r7, sp, #8
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a700:	4b1b      	ldr	r3, [pc, #108]	; (800a770 <SPI_EndRxTxTransaction+0x7c>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a1b      	ldr	r2, [pc, #108]	; (800a774 <SPI_EndRxTxTransaction+0x80>)
 800a706:	fba2 2303 	umull	r2, r3, r2, r3
 800a70a:	0d5b      	lsrs	r3, r3, #21
 800a70c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a710:	fb02 f303 	mul.w	r3, r2, r3
 800a714:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a71e:	d112      	bne.n	800a746 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	2200      	movs	r2, #0
 800a728:	2180      	movs	r1, #128	; 0x80
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f7ff fef4 	bl	800a518 <SPI_WaitFlagStateUntilTimeout>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d016      	beq.n	800a764 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a73a:	f043 0220 	orr.w	r2, r3, #32
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a742:	2303      	movs	r3, #3
 800a744:	e00f      	b.n	800a766 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00a      	beq.n	800a762 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	3b01      	subs	r3, #1
 800a750:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a75c:	2b80      	cmp	r3, #128	; 0x80
 800a75e:	d0f2      	beq.n	800a746 <SPI_EndRxTxTransaction+0x52>
 800a760:	e000      	b.n	800a764 <SPI_EndRxTxTransaction+0x70>
        break;
 800a762:	bf00      	nop
  }

  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3718      	adds	r7, #24
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	200005ac 	.word	0x200005ac
 800a774:	165e9f81 	.word	0x165e9f81

0800a778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d101      	bne.n	800a78a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	e041      	b.n	800a80e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a790:	b2db      	uxtb	r3, r3
 800a792:	2b00      	cmp	r3, #0
 800a794:	d106      	bne.n	800a7a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f7fb fb8e 	bl	8005ec0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2202      	movs	r2, #2
 800a7a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	3304      	adds	r3, #4
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	4610      	mov	r0, r2
 800a7b8:	f000 fe08 	bl	800b3cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
	...

0800a818 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a826:	b2db      	uxtb	r3, r3
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d001      	beq.n	800a830 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e03c      	b.n	800a8aa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2202      	movs	r2, #2
 800a834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a1e      	ldr	r2, [pc, #120]	; (800a8b8 <HAL_TIM_Base_Start+0xa0>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d018      	beq.n	800a874 <HAL_TIM_Base_Start+0x5c>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a84a:	d013      	beq.n	800a874 <HAL_TIM_Base_Start+0x5c>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a1a      	ldr	r2, [pc, #104]	; (800a8bc <HAL_TIM_Base_Start+0xa4>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d00e      	beq.n	800a874 <HAL_TIM_Base_Start+0x5c>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a19      	ldr	r2, [pc, #100]	; (800a8c0 <HAL_TIM_Base_Start+0xa8>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d009      	beq.n	800a874 <HAL_TIM_Base_Start+0x5c>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a17      	ldr	r2, [pc, #92]	; (800a8c4 <HAL_TIM_Base_Start+0xac>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d004      	beq.n	800a874 <HAL_TIM_Base_Start+0x5c>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a16      	ldr	r2, [pc, #88]	; (800a8c8 <HAL_TIM_Base_Start+0xb0>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d111      	bne.n	800a898 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	f003 0307 	and.w	r3, r3, #7
 800a87e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2b06      	cmp	r3, #6
 800a884:	d010      	beq.n	800a8a8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f042 0201 	orr.w	r2, r2, #1
 800a894:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a896:	e007      	b.n	800a8a8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f042 0201 	orr.w	r2, r2, #1
 800a8a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	40010000 	.word	0x40010000
 800a8bc:	40000400 	.word	0x40000400
 800a8c0:	40000800 	.word	0x40000800
 800a8c4:	40000c00 	.word	0x40000c00
 800a8c8:	40014000 	.word	0x40014000

0800a8cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d001      	beq.n	800a8e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e044      	b.n	800a96e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2202      	movs	r2, #2
 800a8e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	68da      	ldr	r2, [r3, #12]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f042 0201 	orr.w	r2, r2, #1
 800a8fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a1e      	ldr	r2, [pc, #120]	; (800a97c <HAL_TIM_Base_Start_IT+0xb0>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d018      	beq.n	800a938 <HAL_TIM_Base_Start_IT+0x6c>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a90e:	d013      	beq.n	800a938 <HAL_TIM_Base_Start_IT+0x6c>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a1a      	ldr	r2, [pc, #104]	; (800a980 <HAL_TIM_Base_Start_IT+0xb4>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d00e      	beq.n	800a938 <HAL_TIM_Base_Start_IT+0x6c>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a19      	ldr	r2, [pc, #100]	; (800a984 <HAL_TIM_Base_Start_IT+0xb8>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d009      	beq.n	800a938 <HAL_TIM_Base_Start_IT+0x6c>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a17      	ldr	r2, [pc, #92]	; (800a988 <HAL_TIM_Base_Start_IT+0xbc>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d004      	beq.n	800a938 <HAL_TIM_Base_Start_IT+0x6c>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a16      	ldr	r2, [pc, #88]	; (800a98c <HAL_TIM_Base_Start_IT+0xc0>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d111      	bne.n	800a95c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	f003 0307 	and.w	r3, r3, #7
 800a942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2b06      	cmp	r3, #6
 800a948:	d010      	beq.n	800a96c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f042 0201 	orr.w	r2, r2, #1
 800a958:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a95a:	e007      	b.n	800a96c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f042 0201 	orr.w	r2, r2, #1
 800a96a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	40010000 	.word	0x40010000
 800a980:	40000400 	.word	0x40000400
 800a984:	40000800 	.word	0x40000800
 800a988:	40000c00 	.word	0x40000c00
 800a98c:	40014000 	.word	0x40014000

0800a990 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d101      	bne.n	800a9a2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e041      	b.n	800aa26 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d106      	bne.n	800a9bc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f839 	bl	800aa2e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2202      	movs	r2, #2
 800a9c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	3304      	adds	r3, #4
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	4610      	mov	r0, r2
 800a9d0:	f000 fcfc 	bl	800b3cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2201      	movs	r2, #1
 800aa08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3708      	adds	r7, #8
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800aa2e:	b480      	push	{r7}
 800aa30:	b083      	sub	sp, #12
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800aa36:	bf00      	nop
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b082      	sub	sp, #8
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d101      	bne.n	800aa54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e041      	b.n	800aad8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d106      	bne.n	800aa6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 f839 	bl	800aae0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2202      	movs	r2, #2
 800aa72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	4619      	mov	r1, r3
 800aa80:	4610      	mov	r0, r2
 800aa82:	f000 fca3 	bl	800b3cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2201      	movs	r2, #1
 800aa92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2201      	movs	r2, #1
 800aa9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2201      	movs	r2, #1
 800aab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2201      	movs	r2, #1
 800aaba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2201      	movs	r2, #1
 800aac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2201      	movs	r2, #1
 800aaca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2201      	movs	r2, #1
 800aad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aad6:	2300      	movs	r3, #0
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d109      	bne.n	800ab18 <HAL_TIM_PWM_Start+0x24>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	bf14      	ite	ne
 800ab10:	2301      	movne	r3, #1
 800ab12:	2300      	moveq	r3, #0
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	e022      	b.n	800ab5e <HAL_TIM_PWM_Start+0x6a>
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	2b04      	cmp	r3, #4
 800ab1c:	d109      	bne.n	800ab32 <HAL_TIM_PWM_Start+0x3e>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	bf14      	ite	ne
 800ab2a:	2301      	movne	r3, #1
 800ab2c:	2300      	moveq	r3, #0
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	e015      	b.n	800ab5e <HAL_TIM_PWM_Start+0x6a>
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	2b08      	cmp	r3, #8
 800ab36:	d109      	bne.n	800ab4c <HAL_TIM_PWM_Start+0x58>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	bf14      	ite	ne
 800ab44:	2301      	movne	r3, #1
 800ab46:	2300      	moveq	r3, #0
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	e008      	b.n	800ab5e <HAL_TIM_PWM_Start+0x6a>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	bf14      	ite	ne
 800ab58:	2301      	movne	r3, #1
 800ab5a:	2300      	moveq	r3, #0
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d001      	beq.n	800ab66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ab62:	2301      	movs	r3, #1
 800ab64:	e068      	b.n	800ac38 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d104      	bne.n	800ab76 <HAL_TIM_PWM_Start+0x82>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2202      	movs	r2, #2
 800ab70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab74:	e013      	b.n	800ab9e <HAL_TIM_PWM_Start+0xaa>
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	2b04      	cmp	r3, #4
 800ab7a:	d104      	bne.n	800ab86 <HAL_TIM_PWM_Start+0x92>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2202      	movs	r2, #2
 800ab80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab84:	e00b      	b.n	800ab9e <HAL_TIM_PWM_Start+0xaa>
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	2b08      	cmp	r3, #8
 800ab8a:	d104      	bne.n	800ab96 <HAL_TIM_PWM_Start+0xa2>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2202      	movs	r2, #2
 800ab90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab94:	e003      	b.n	800ab9e <HAL_TIM_PWM_Start+0xaa>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2202      	movs	r2, #2
 800ab9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	2201      	movs	r2, #1
 800aba4:	6839      	ldr	r1, [r7, #0]
 800aba6:	4618      	mov	r0, r3
 800aba8:	f000 feb6 	bl	800b918 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a23      	ldr	r2, [pc, #140]	; (800ac40 <HAL_TIM_PWM_Start+0x14c>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d107      	bne.n	800abc6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800abc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a1d      	ldr	r2, [pc, #116]	; (800ac40 <HAL_TIM_PWM_Start+0x14c>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d018      	beq.n	800ac02 <HAL_TIM_PWM_Start+0x10e>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abd8:	d013      	beq.n	800ac02 <HAL_TIM_PWM_Start+0x10e>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a19      	ldr	r2, [pc, #100]	; (800ac44 <HAL_TIM_PWM_Start+0x150>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d00e      	beq.n	800ac02 <HAL_TIM_PWM_Start+0x10e>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a17      	ldr	r2, [pc, #92]	; (800ac48 <HAL_TIM_PWM_Start+0x154>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d009      	beq.n	800ac02 <HAL_TIM_PWM_Start+0x10e>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a16      	ldr	r2, [pc, #88]	; (800ac4c <HAL_TIM_PWM_Start+0x158>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d004      	beq.n	800ac02 <HAL_TIM_PWM_Start+0x10e>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a14      	ldr	r2, [pc, #80]	; (800ac50 <HAL_TIM_PWM_Start+0x15c>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d111      	bne.n	800ac26 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	f003 0307 	and.w	r3, r3, #7
 800ac0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2b06      	cmp	r3, #6
 800ac12:	d010      	beq.n	800ac36 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f042 0201 	orr.w	r2, r2, #1
 800ac22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac24:	e007      	b.n	800ac36 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f042 0201 	orr.w	r2, r2, #1
 800ac34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	40010000 	.word	0x40010000
 800ac44:	40000400 	.word	0x40000400
 800ac48:	40000800 	.word	0x40000800
 800ac4c:	40000c00 	.word	0x40000c00
 800ac50:	40014000 	.word	0x40014000

0800ac54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b086      	sub	sp, #24
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d101      	bne.n	800ac68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	e097      	b.n	800ad98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d106      	bne.n	800ac82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f7fb f8a3 	bl	8005dc8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2202      	movs	r2, #2
 800ac86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	6812      	ldr	r2, [r2, #0]
 800ac94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac98:	f023 0307 	bic.w	r3, r3, #7
 800ac9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	3304      	adds	r3, #4
 800aca6:	4619      	mov	r1, r3
 800aca8:	4610      	mov	r0, r2
 800acaa:	f000 fb8f 	bl	800b3cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	699b      	ldr	r3, [r3, #24]
 800acbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	6a1b      	ldr	r3, [r3, #32]
 800acc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	697a      	ldr	r2, [r7, #20]
 800accc:	4313      	orrs	r3, r2
 800acce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acd6:	f023 0303 	bic.w	r3, r3, #3
 800acda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	689a      	ldr	r2, [r3, #8]
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	699b      	ldr	r3, [r3, #24]
 800ace4:	021b      	lsls	r3, r3, #8
 800ace6:	4313      	orrs	r3, r2
 800ace8:	693a      	ldr	r2, [r7, #16]
 800acea:	4313      	orrs	r3, r2
 800acec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800acf4:	f023 030c 	bic.w	r3, r3, #12
 800acf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	68da      	ldr	r2, [r3, #12]
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	69db      	ldr	r3, [r3, #28]
 800ad0e:	021b      	lsls	r3, r3, #8
 800ad10:	4313      	orrs	r3, r2
 800ad12:	693a      	ldr	r2, [r7, #16]
 800ad14:	4313      	orrs	r3, r2
 800ad16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	691b      	ldr	r3, [r3, #16]
 800ad1c:	011a      	lsls	r2, r3, #4
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	6a1b      	ldr	r3, [r3, #32]
 800ad22:	031b      	lsls	r3, r3, #12
 800ad24:	4313      	orrs	r3, r2
 800ad26:	693a      	ldr	r2, [r7, #16]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ad32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ad3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	685a      	ldr	r2, [r3, #4]
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	695b      	ldr	r3, [r3, #20]
 800ad44:	011b      	lsls	r3, r3, #4
 800ad46:	4313      	orrs	r3, r2
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	697a      	ldr	r2, [r7, #20]
 800ad54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	693a      	ldr	r2, [r7, #16]
 800ad5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2201      	movs	r2, #1
 800ad6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2201      	movs	r2, #1
 800ad72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2201      	movs	r2, #1
 800ad82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2201      	movs	r2, #1
 800ad92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3718      	adds	r7, #24
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	f003 0302 	and.w	r3, r3, #2
 800adb2:	2b02      	cmp	r3, #2
 800adb4:	d122      	bne.n	800adfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	f003 0302 	and.w	r3, r3, #2
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	d11b      	bne.n	800adfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f06f 0202 	mvn.w	r2, #2
 800adcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2201      	movs	r2, #1
 800add2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	699b      	ldr	r3, [r3, #24]
 800adda:	f003 0303 	and.w	r3, r3, #3
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d003      	beq.n	800adea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 fad3 	bl	800b38e <HAL_TIM_IC_CaptureCallback>
 800ade8:	e005      	b.n	800adf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 fac5 	bl	800b37a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 fad6 	bl	800b3a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	f003 0304 	and.w	r3, r3, #4
 800ae06:	2b04      	cmp	r3, #4
 800ae08:	d122      	bne.n	800ae50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	68db      	ldr	r3, [r3, #12]
 800ae10:	f003 0304 	and.w	r3, r3, #4
 800ae14:	2b04      	cmp	r3, #4
 800ae16:	d11b      	bne.n	800ae50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f06f 0204 	mvn.w	r2, #4
 800ae20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2202      	movs	r2, #2
 800ae26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d003      	beq.n	800ae3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 faa9 	bl	800b38e <HAL_TIM_IC_CaptureCallback>
 800ae3c:	e005      	b.n	800ae4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 fa9b 	bl	800b37a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 faac 	bl	800b3a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	f003 0308 	and.w	r3, r3, #8
 800ae5a:	2b08      	cmp	r3, #8
 800ae5c:	d122      	bne.n	800aea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	f003 0308 	and.w	r3, r3, #8
 800ae68:	2b08      	cmp	r3, #8
 800ae6a:	d11b      	bne.n	800aea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f06f 0208 	mvn.w	r2, #8
 800ae74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2204      	movs	r2, #4
 800ae7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	69db      	ldr	r3, [r3, #28]
 800ae82:	f003 0303 	and.w	r3, r3, #3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d003      	beq.n	800ae92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 fa7f 	bl	800b38e <HAL_TIM_IC_CaptureCallback>
 800ae90:	e005      	b.n	800ae9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 fa71 	bl	800b37a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 fa82 	bl	800b3a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	691b      	ldr	r3, [r3, #16]
 800aeaa:	f003 0310 	and.w	r3, r3, #16
 800aeae:	2b10      	cmp	r3, #16
 800aeb0:	d122      	bne.n	800aef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	f003 0310 	and.w	r3, r3, #16
 800aebc:	2b10      	cmp	r3, #16
 800aebe:	d11b      	bne.n	800aef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f06f 0210 	mvn.w	r2, #16
 800aec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2208      	movs	r2, #8
 800aece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	69db      	ldr	r3, [r3, #28]
 800aed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d003      	beq.n	800aee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 fa55 	bl	800b38e <HAL_TIM_IC_CaptureCallback>
 800aee4:	e005      	b.n	800aef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 fa47 	bl	800b37a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 fa58 	bl	800b3a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	f003 0301 	and.w	r3, r3, #1
 800af02:	2b01      	cmp	r3, #1
 800af04:	d10e      	bne.n	800af24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	f003 0301 	and.w	r3, r3, #1
 800af10:	2b01      	cmp	r3, #1
 800af12:	d107      	bne.n	800af24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f06f 0201 	mvn.w	r2, #1
 800af1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f7f6 fcb6 	bl	8001890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af2e:	2b80      	cmp	r3, #128	; 0x80
 800af30:	d10e      	bne.n	800af50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af3c:	2b80      	cmp	r3, #128	; 0x80
 800af3e:	d107      	bne.n	800af50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800af48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 fd82 	bl	800ba54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af5a:	2b40      	cmp	r3, #64	; 0x40
 800af5c:	d10e      	bne.n	800af7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af68:	2b40      	cmp	r3, #64	; 0x40
 800af6a:	d107      	bne.n	800af7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 fa1d 	bl	800b3b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	f003 0320 	and.w	r3, r3, #32
 800af86:	2b20      	cmp	r3, #32
 800af88:	d10e      	bne.n	800afa8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	f003 0320 	and.w	r3, r3, #32
 800af94:	2b20      	cmp	r3, #32
 800af96:	d107      	bne.n	800afa8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f06f 0220 	mvn.w	r2, #32
 800afa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 fd4c 	bl	800ba40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800afa8:	bf00      	nop
 800afaa:	3708      	adds	r7, #8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b086      	sub	sp, #24
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afbc:	2300      	movs	r3, #0
 800afbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d101      	bne.n	800afce <HAL_TIM_OC_ConfigChannel+0x1e>
 800afca:	2302      	movs	r3, #2
 800afcc:	e048      	b.n	800b060 <HAL_TIM_OC_ConfigChannel+0xb0>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2201      	movs	r2, #1
 800afd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2b0c      	cmp	r3, #12
 800afda:	d839      	bhi.n	800b050 <HAL_TIM_OC_ConfigChannel+0xa0>
 800afdc:	a201      	add	r2, pc, #4	; (adr r2, 800afe4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800afde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe2:	bf00      	nop
 800afe4:	0800b019 	.word	0x0800b019
 800afe8:	0800b051 	.word	0x0800b051
 800afec:	0800b051 	.word	0x0800b051
 800aff0:	0800b051 	.word	0x0800b051
 800aff4:	0800b027 	.word	0x0800b027
 800aff8:	0800b051 	.word	0x0800b051
 800affc:	0800b051 	.word	0x0800b051
 800b000:	0800b051 	.word	0x0800b051
 800b004:	0800b035 	.word	0x0800b035
 800b008:	0800b051 	.word	0x0800b051
 800b00c:	0800b051 	.word	0x0800b051
 800b010:	0800b051 	.word	0x0800b051
 800b014:	0800b043 	.word	0x0800b043
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	68b9      	ldr	r1, [r7, #8]
 800b01e:	4618      	mov	r0, r3
 800b020:	f000 fa54 	bl	800b4cc <TIM_OC1_SetConfig>
      break;
 800b024:	e017      	b.n	800b056 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	68b9      	ldr	r1, [r7, #8]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f000 fab3 	bl	800b598 <TIM_OC2_SetConfig>
      break;
 800b032:	e010      	b.n	800b056 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68b9      	ldr	r1, [r7, #8]
 800b03a:	4618      	mov	r0, r3
 800b03c:	f000 fb18 	bl	800b670 <TIM_OC3_SetConfig>
      break;
 800b040:	e009      	b.n	800b056 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	68b9      	ldr	r1, [r7, #8]
 800b048:	4618      	mov	r0, r3
 800b04a:	f000 fb7b 	bl	800b744 <TIM_OC4_SetConfig>
      break;
 800b04e:	e002      	b.n	800b056 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800b050:	2301      	movs	r3, #1
 800b052:	75fb      	strb	r3, [r7, #23]
      break;
 800b054:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b05e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b060:	4618      	mov	r0, r3
 800b062:	3718      	adds	r7, #24
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b074:	2300      	movs	r3, #0
 800b076:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d101      	bne.n	800b086 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b082:	2302      	movs	r3, #2
 800b084:	e0ae      	b.n	800b1e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2201      	movs	r2, #1
 800b08a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2b0c      	cmp	r3, #12
 800b092:	f200 809f 	bhi.w	800b1d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b096:	a201      	add	r2, pc, #4	; (adr r2, 800b09c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b09c:	0800b0d1 	.word	0x0800b0d1
 800b0a0:	0800b1d5 	.word	0x0800b1d5
 800b0a4:	0800b1d5 	.word	0x0800b1d5
 800b0a8:	0800b1d5 	.word	0x0800b1d5
 800b0ac:	0800b111 	.word	0x0800b111
 800b0b0:	0800b1d5 	.word	0x0800b1d5
 800b0b4:	0800b1d5 	.word	0x0800b1d5
 800b0b8:	0800b1d5 	.word	0x0800b1d5
 800b0bc:	0800b153 	.word	0x0800b153
 800b0c0:	0800b1d5 	.word	0x0800b1d5
 800b0c4:	0800b1d5 	.word	0x0800b1d5
 800b0c8:	0800b1d5 	.word	0x0800b1d5
 800b0cc:	0800b193 	.word	0x0800b193
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	68b9      	ldr	r1, [r7, #8]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f000 f9f8 	bl	800b4cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	699a      	ldr	r2, [r3, #24]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f042 0208 	orr.w	r2, r2, #8
 800b0ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	699a      	ldr	r2, [r3, #24]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f022 0204 	bic.w	r2, r2, #4
 800b0fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	6999      	ldr	r1, [r3, #24]
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	691a      	ldr	r2, [r3, #16]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	430a      	orrs	r2, r1
 800b10c:	619a      	str	r2, [r3, #24]
      break;
 800b10e:	e064      	b.n	800b1da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	68b9      	ldr	r1, [r7, #8]
 800b116:	4618      	mov	r0, r3
 800b118:	f000 fa3e 	bl	800b598 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	699a      	ldr	r2, [r3, #24]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b12a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	699a      	ldr	r2, [r3, #24]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b13a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	6999      	ldr	r1, [r3, #24]
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	021a      	lsls	r2, r3, #8
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	430a      	orrs	r2, r1
 800b14e:	619a      	str	r2, [r3, #24]
      break;
 800b150:	e043      	b.n	800b1da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	68b9      	ldr	r1, [r7, #8]
 800b158:	4618      	mov	r0, r3
 800b15a:	f000 fa89 	bl	800b670 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	69da      	ldr	r2, [r3, #28]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f042 0208 	orr.w	r2, r2, #8
 800b16c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	69da      	ldr	r2, [r3, #28]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f022 0204 	bic.w	r2, r2, #4
 800b17c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	69d9      	ldr	r1, [r3, #28]
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	691a      	ldr	r2, [r3, #16]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	430a      	orrs	r2, r1
 800b18e:	61da      	str	r2, [r3, #28]
      break;
 800b190:	e023      	b.n	800b1da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68b9      	ldr	r1, [r7, #8]
 800b198:	4618      	mov	r0, r3
 800b19a:	f000 fad3 	bl	800b744 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	69da      	ldr	r2, [r3, #28]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	69da      	ldr	r2, [r3, #28]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	69d9      	ldr	r1, [r3, #28]
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	021a      	lsls	r2, r3, #8
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	430a      	orrs	r2, r1
 800b1d0:	61da      	str	r2, [r3, #28]
      break;
 800b1d2:	e002      	b.n	800b1da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	75fb      	strb	r3, [r7, #23]
      break;
 800b1d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b1e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3718      	adds	r7, #24
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b200:	2b01      	cmp	r3, #1
 800b202:	d101      	bne.n	800b208 <HAL_TIM_ConfigClockSource+0x1c>
 800b204:	2302      	movs	r3, #2
 800b206:	e0b4      	b.n	800b372 <HAL_TIM_ConfigClockSource+0x186>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2202      	movs	r2, #2
 800b214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b22e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	68ba      	ldr	r2, [r7, #8]
 800b236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b240:	d03e      	beq.n	800b2c0 <HAL_TIM_ConfigClockSource+0xd4>
 800b242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b246:	f200 8087 	bhi.w	800b358 <HAL_TIM_ConfigClockSource+0x16c>
 800b24a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b24e:	f000 8086 	beq.w	800b35e <HAL_TIM_ConfigClockSource+0x172>
 800b252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b256:	d87f      	bhi.n	800b358 <HAL_TIM_ConfigClockSource+0x16c>
 800b258:	2b70      	cmp	r3, #112	; 0x70
 800b25a:	d01a      	beq.n	800b292 <HAL_TIM_ConfigClockSource+0xa6>
 800b25c:	2b70      	cmp	r3, #112	; 0x70
 800b25e:	d87b      	bhi.n	800b358 <HAL_TIM_ConfigClockSource+0x16c>
 800b260:	2b60      	cmp	r3, #96	; 0x60
 800b262:	d050      	beq.n	800b306 <HAL_TIM_ConfigClockSource+0x11a>
 800b264:	2b60      	cmp	r3, #96	; 0x60
 800b266:	d877      	bhi.n	800b358 <HAL_TIM_ConfigClockSource+0x16c>
 800b268:	2b50      	cmp	r3, #80	; 0x50
 800b26a:	d03c      	beq.n	800b2e6 <HAL_TIM_ConfigClockSource+0xfa>
 800b26c:	2b50      	cmp	r3, #80	; 0x50
 800b26e:	d873      	bhi.n	800b358 <HAL_TIM_ConfigClockSource+0x16c>
 800b270:	2b40      	cmp	r3, #64	; 0x40
 800b272:	d058      	beq.n	800b326 <HAL_TIM_ConfigClockSource+0x13a>
 800b274:	2b40      	cmp	r3, #64	; 0x40
 800b276:	d86f      	bhi.n	800b358 <HAL_TIM_ConfigClockSource+0x16c>
 800b278:	2b30      	cmp	r3, #48	; 0x30
 800b27a:	d064      	beq.n	800b346 <HAL_TIM_ConfigClockSource+0x15a>
 800b27c:	2b30      	cmp	r3, #48	; 0x30
 800b27e:	d86b      	bhi.n	800b358 <HAL_TIM_ConfigClockSource+0x16c>
 800b280:	2b20      	cmp	r3, #32
 800b282:	d060      	beq.n	800b346 <HAL_TIM_ConfigClockSource+0x15a>
 800b284:	2b20      	cmp	r3, #32
 800b286:	d867      	bhi.n	800b358 <HAL_TIM_ConfigClockSource+0x16c>
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d05c      	beq.n	800b346 <HAL_TIM_ConfigClockSource+0x15a>
 800b28c:	2b10      	cmp	r3, #16
 800b28e:	d05a      	beq.n	800b346 <HAL_TIM_ConfigClockSource+0x15a>
 800b290:	e062      	b.n	800b358 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6818      	ldr	r0, [r3, #0]
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	6899      	ldr	r1, [r3, #8]
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	685a      	ldr	r2, [r3, #4]
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	f000 fb19 	bl	800b8d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b2b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	609a      	str	r2, [r3, #8]
      break;
 800b2be:	e04f      	b.n	800b360 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6818      	ldr	r0, [r3, #0]
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	6899      	ldr	r1, [r3, #8]
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	685a      	ldr	r2, [r3, #4]
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	f000 fb02 	bl	800b8d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	689a      	ldr	r2, [r3, #8]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b2e2:	609a      	str	r2, [r3, #8]
      break;
 800b2e4:	e03c      	b.n	800b360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6818      	ldr	r0, [r3, #0]
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	6859      	ldr	r1, [r3, #4]
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	68db      	ldr	r3, [r3, #12]
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	f000 fa76 	bl	800b7e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2150      	movs	r1, #80	; 0x50
 800b2fe:	4618      	mov	r0, r3
 800b300:	f000 facf 	bl	800b8a2 <TIM_ITRx_SetConfig>
      break;
 800b304:	e02c      	b.n	800b360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6818      	ldr	r0, [r3, #0]
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	6859      	ldr	r1, [r3, #4]
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	461a      	mov	r2, r3
 800b314:	f000 fa95 	bl	800b842 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2160      	movs	r1, #96	; 0x60
 800b31e:	4618      	mov	r0, r3
 800b320:	f000 fabf 	bl	800b8a2 <TIM_ITRx_SetConfig>
      break;
 800b324:	e01c      	b.n	800b360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6818      	ldr	r0, [r3, #0]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	6859      	ldr	r1, [r3, #4]
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	461a      	mov	r2, r3
 800b334:	f000 fa56 	bl	800b7e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2140      	movs	r1, #64	; 0x40
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 faaf 	bl	800b8a2 <TIM_ITRx_SetConfig>
      break;
 800b344:	e00c      	b.n	800b360 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4619      	mov	r1, r3
 800b350:	4610      	mov	r0, r2
 800b352:	f000 faa6 	bl	800b8a2 <TIM_ITRx_SetConfig>
      break;
 800b356:	e003      	b.n	800b360 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b358:	2301      	movs	r3, #1
 800b35a:	73fb      	strb	r3, [r7, #15]
      break;
 800b35c:	e000      	b.n	800b360 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b35e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b370:	7bfb      	ldrb	r3, [r7, #15]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b37a:	b480      	push	{r7}
 800b37c:	b083      	sub	sp, #12
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b382:	bf00      	nop
 800b384:	370c      	adds	r7, #12
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b38e:	b480      	push	{r7}
 800b390:	b083      	sub	sp, #12
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b396:	bf00      	nop
 800b398:	370c      	adds	r7, #12
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr

0800b3a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b083      	sub	sp, #12
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b3aa:	bf00      	nop
 800b3ac:	370c      	adds	r7, #12
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b083      	sub	sp, #12
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b3be:	bf00      	nop
 800b3c0:	370c      	adds	r7, #12
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
	...

0800b3cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b085      	sub	sp, #20
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	4a34      	ldr	r2, [pc, #208]	; (800b4b0 <TIM_Base_SetConfig+0xe4>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d00f      	beq.n	800b404 <TIM_Base_SetConfig+0x38>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3ea:	d00b      	beq.n	800b404 <TIM_Base_SetConfig+0x38>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4a31      	ldr	r2, [pc, #196]	; (800b4b4 <TIM_Base_SetConfig+0xe8>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d007      	beq.n	800b404 <TIM_Base_SetConfig+0x38>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4a30      	ldr	r2, [pc, #192]	; (800b4b8 <TIM_Base_SetConfig+0xec>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d003      	beq.n	800b404 <TIM_Base_SetConfig+0x38>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4a2f      	ldr	r2, [pc, #188]	; (800b4bc <TIM_Base_SetConfig+0xf0>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d108      	bne.n	800b416 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b40a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	4313      	orrs	r3, r2
 800b414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	4a25      	ldr	r2, [pc, #148]	; (800b4b0 <TIM_Base_SetConfig+0xe4>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d01b      	beq.n	800b456 <TIM_Base_SetConfig+0x8a>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b424:	d017      	beq.n	800b456 <TIM_Base_SetConfig+0x8a>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	4a22      	ldr	r2, [pc, #136]	; (800b4b4 <TIM_Base_SetConfig+0xe8>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d013      	beq.n	800b456 <TIM_Base_SetConfig+0x8a>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4a21      	ldr	r2, [pc, #132]	; (800b4b8 <TIM_Base_SetConfig+0xec>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d00f      	beq.n	800b456 <TIM_Base_SetConfig+0x8a>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4a20      	ldr	r2, [pc, #128]	; (800b4bc <TIM_Base_SetConfig+0xf0>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d00b      	beq.n	800b456 <TIM_Base_SetConfig+0x8a>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4a1f      	ldr	r2, [pc, #124]	; (800b4c0 <TIM_Base_SetConfig+0xf4>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d007      	beq.n	800b456 <TIM_Base_SetConfig+0x8a>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4a1e      	ldr	r2, [pc, #120]	; (800b4c4 <TIM_Base_SetConfig+0xf8>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d003      	beq.n	800b456 <TIM_Base_SetConfig+0x8a>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	4a1d      	ldr	r2, [pc, #116]	; (800b4c8 <TIM_Base_SetConfig+0xfc>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d108      	bne.n	800b468 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b45c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	4313      	orrs	r3, r2
 800b466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	695b      	ldr	r3, [r3, #20]
 800b472:	4313      	orrs	r3, r2
 800b474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	689a      	ldr	r2, [r3, #8]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4a08      	ldr	r2, [pc, #32]	; (800b4b0 <TIM_Base_SetConfig+0xe4>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d103      	bne.n	800b49c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	691a      	ldr	r2, [r3, #16]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	615a      	str	r2, [r3, #20]
}
 800b4a2:	bf00      	nop
 800b4a4:	3714      	adds	r7, #20
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	40010000 	.word	0x40010000
 800b4b4:	40000400 	.word	0x40000400
 800b4b8:	40000800 	.word	0x40000800
 800b4bc:	40000c00 	.word	0x40000c00
 800b4c0:	40014000 	.word	0x40014000
 800b4c4:	40014400 	.word	0x40014400
 800b4c8:	40014800 	.word	0x40014800

0800b4cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b087      	sub	sp, #28
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a1b      	ldr	r3, [r3, #32]
 800b4da:	f023 0201 	bic.w	r2, r3, #1
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a1b      	ldr	r3, [r3, #32]
 800b4e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	699b      	ldr	r3, [r3, #24]
 800b4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f023 0303 	bic.w	r3, r3, #3
 800b502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	4313      	orrs	r3, r2
 800b50c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	f023 0302 	bic.w	r3, r3, #2
 800b514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4a1c      	ldr	r2, [pc, #112]	; (800b594 <TIM_OC1_SetConfig+0xc8>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d10c      	bne.n	800b542 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	f023 0308 	bic.w	r3, r3, #8
 800b52e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	697a      	ldr	r2, [r7, #20]
 800b536:	4313      	orrs	r3, r2
 800b538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	f023 0304 	bic.w	r3, r3, #4
 800b540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	4a13      	ldr	r2, [pc, #76]	; (800b594 <TIM_OC1_SetConfig+0xc8>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d111      	bne.n	800b56e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	695b      	ldr	r3, [r3, #20]
 800b55e:	693a      	ldr	r2, [r7, #16]
 800b560:	4313      	orrs	r3, r2
 800b562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	699b      	ldr	r3, [r3, #24]
 800b568:	693a      	ldr	r2, [r7, #16]
 800b56a:	4313      	orrs	r3, r2
 800b56c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	693a      	ldr	r2, [r7, #16]
 800b572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	68fa      	ldr	r2, [r7, #12]
 800b578:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	685a      	ldr	r2, [r3, #4]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	697a      	ldr	r2, [r7, #20]
 800b586:	621a      	str	r2, [r3, #32]
}
 800b588:	bf00      	nop
 800b58a:	371c      	adds	r7, #28
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr
 800b594:	40010000 	.word	0x40010000

0800b598 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b598:	b480      	push	{r7}
 800b59a:	b087      	sub	sp, #28
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6a1b      	ldr	r3, [r3, #32]
 800b5a6:	f023 0210 	bic.w	r2, r3, #16
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a1b      	ldr	r3, [r3, #32]
 800b5b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	699b      	ldr	r3, [r3, #24]
 800b5be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	021b      	lsls	r3, r3, #8
 800b5d6:	68fa      	ldr	r2, [r7, #12]
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	f023 0320 	bic.w	r3, r3, #32
 800b5e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	689b      	ldr	r3, [r3, #8]
 800b5e8:	011b      	lsls	r3, r3, #4
 800b5ea:	697a      	ldr	r2, [r7, #20]
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a1e      	ldr	r2, [pc, #120]	; (800b66c <TIM_OC2_SetConfig+0xd4>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d10d      	bne.n	800b614 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	011b      	lsls	r3, r3, #4
 800b606:	697a      	ldr	r2, [r7, #20]
 800b608:	4313      	orrs	r3, r2
 800b60a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b612:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4a15      	ldr	r2, [pc, #84]	; (800b66c <TIM_OC2_SetConfig+0xd4>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d113      	bne.n	800b644 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b622:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b62a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	695b      	ldr	r3, [r3, #20]
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	693a      	ldr	r2, [r7, #16]
 800b634:	4313      	orrs	r3, r2
 800b636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	699b      	ldr	r3, [r3, #24]
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	693a      	ldr	r2, [r7, #16]
 800b640:	4313      	orrs	r3, r2
 800b642:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	693a      	ldr	r2, [r7, #16]
 800b648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	685a      	ldr	r2, [r3, #4]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	697a      	ldr	r2, [r7, #20]
 800b65c:	621a      	str	r2, [r3, #32]
}
 800b65e:	bf00      	nop
 800b660:	371c      	adds	r7, #28
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr
 800b66a:	bf00      	nop
 800b66c:	40010000 	.word	0x40010000

0800b670 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b670:	b480      	push	{r7}
 800b672:	b087      	sub	sp, #28
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6a1b      	ldr	r3, [r3, #32]
 800b67e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6a1b      	ldr	r3, [r3, #32]
 800b68a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	69db      	ldr	r3, [r3, #28]
 800b696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b69e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f023 0303 	bic.w	r3, r3, #3
 800b6a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b6b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	021b      	lsls	r3, r3, #8
 800b6c0:	697a      	ldr	r2, [r7, #20]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	4a1d      	ldr	r2, [pc, #116]	; (800b740 <TIM_OC3_SetConfig+0xd0>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d10d      	bne.n	800b6ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b6d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	021b      	lsls	r3, r3, #8
 800b6dc:	697a      	ldr	r2, [r7, #20]
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b6e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4a14      	ldr	r2, [pc, #80]	; (800b740 <TIM_OC3_SetConfig+0xd0>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d113      	bne.n	800b71a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	695b      	ldr	r3, [r3, #20]
 800b706:	011b      	lsls	r3, r3, #4
 800b708:	693a      	ldr	r2, [r7, #16]
 800b70a:	4313      	orrs	r3, r2
 800b70c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	699b      	ldr	r3, [r3, #24]
 800b712:	011b      	lsls	r3, r3, #4
 800b714:	693a      	ldr	r2, [r7, #16]
 800b716:	4313      	orrs	r3, r2
 800b718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	693a      	ldr	r2, [r7, #16]
 800b71e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	685a      	ldr	r2, [r3, #4]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	697a      	ldr	r2, [r7, #20]
 800b732:	621a      	str	r2, [r3, #32]
}
 800b734:	bf00      	nop
 800b736:	371c      	adds	r7, #28
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr
 800b740:	40010000 	.word	0x40010000

0800b744 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b744:	b480      	push	{r7}
 800b746:	b087      	sub	sp, #28
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6a1b      	ldr	r3, [r3, #32]
 800b752:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a1b      	ldr	r3, [r3, #32]
 800b75e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	69db      	ldr	r3, [r3, #28]
 800b76a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b77a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	021b      	lsls	r3, r3, #8
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	4313      	orrs	r3, r2
 800b786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b78e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	031b      	lsls	r3, r3, #12
 800b796:	693a      	ldr	r2, [r7, #16]
 800b798:	4313      	orrs	r3, r2
 800b79a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a10      	ldr	r2, [pc, #64]	; (800b7e0 <TIM_OC4_SetConfig+0x9c>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d109      	bne.n	800b7b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	695b      	ldr	r3, [r3, #20]
 800b7b0:	019b      	lsls	r3, r3, #6
 800b7b2:	697a      	ldr	r2, [r7, #20]
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	697a      	ldr	r2, [r7, #20]
 800b7bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	685a      	ldr	r2, [r3, #4]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	693a      	ldr	r2, [r7, #16]
 800b7d0:	621a      	str	r2, [r3, #32]
}
 800b7d2:	bf00      	nop
 800b7d4:	371c      	adds	r7, #28
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr
 800b7de:	bf00      	nop
 800b7e0:	40010000 	.word	0x40010000

0800b7e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b087      	sub	sp, #28
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6a1b      	ldr	r3, [r3, #32]
 800b7f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	6a1b      	ldr	r3, [r3, #32]
 800b7fa:	f023 0201 	bic.w	r2, r3, #1
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	699b      	ldr	r3, [r3, #24]
 800b806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b80e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	011b      	lsls	r3, r3, #4
 800b814:	693a      	ldr	r2, [r7, #16]
 800b816:	4313      	orrs	r3, r2
 800b818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	f023 030a 	bic.w	r3, r3, #10
 800b820:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b822:	697a      	ldr	r2, [r7, #20]
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	4313      	orrs	r3, r2
 800b828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	693a      	ldr	r2, [r7, #16]
 800b82e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	697a      	ldr	r2, [r7, #20]
 800b834:	621a      	str	r2, [r3, #32]
}
 800b836:	bf00      	nop
 800b838:	371c      	adds	r7, #28
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b842:	b480      	push	{r7}
 800b844:	b087      	sub	sp, #28
 800b846:	af00      	add	r7, sp, #0
 800b848:	60f8      	str	r0, [r7, #12]
 800b84a:	60b9      	str	r1, [r7, #8]
 800b84c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6a1b      	ldr	r3, [r3, #32]
 800b852:	f023 0210 	bic.w	r2, r3, #16
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	699b      	ldr	r3, [r3, #24]
 800b85e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6a1b      	ldr	r3, [r3, #32]
 800b864:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b86c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	031b      	lsls	r3, r3, #12
 800b872:	697a      	ldr	r2, [r7, #20]
 800b874:	4313      	orrs	r3, r2
 800b876:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b87e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	011b      	lsls	r3, r3, #4
 800b884:	693a      	ldr	r2, [r7, #16]
 800b886:	4313      	orrs	r3, r2
 800b888:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	697a      	ldr	r2, [r7, #20]
 800b88e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	693a      	ldr	r2, [r7, #16]
 800b894:	621a      	str	r2, [r3, #32]
}
 800b896:	bf00      	nop
 800b898:	371c      	adds	r7, #28
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr

0800b8a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b8a2:	b480      	push	{r7}
 800b8a4:	b085      	sub	sp, #20
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
 800b8aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	f043 0307 	orr.w	r3, r3, #7
 800b8c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	609a      	str	r2, [r3, #8]
}
 800b8cc:	bf00      	nop
 800b8ce:	3714      	adds	r7, #20
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b087      	sub	sp, #28
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	607a      	str	r2, [r7, #4]
 800b8e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	689b      	ldr	r3, [r3, #8]
 800b8ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	021a      	lsls	r2, r3, #8
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	431a      	orrs	r2, r3
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	697a      	ldr	r2, [r7, #20]
 800b902:	4313      	orrs	r3, r2
 800b904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	697a      	ldr	r2, [r7, #20]
 800b90a:	609a      	str	r2, [r3, #8]
}
 800b90c:	bf00      	nop
 800b90e:	371c      	adds	r7, #28
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b918:	b480      	push	{r7}
 800b91a:	b087      	sub	sp, #28
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	f003 031f 	and.w	r3, r3, #31
 800b92a:	2201      	movs	r2, #1
 800b92c:	fa02 f303 	lsl.w	r3, r2, r3
 800b930:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6a1a      	ldr	r2, [r3, #32]
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	43db      	mvns	r3, r3
 800b93a:	401a      	ands	r2, r3
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6a1a      	ldr	r2, [r3, #32]
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	f003 031f 	and.w	r3, r3, #31
 800b94a:	6879      	ldr	r1, [r7, #4]
 800b94c:	fa01 f303 	lsl.w	r3, r1, r3
 800b950:	431a      	orrs	r2, r3
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	621a      	str	r2, [r3, #32]
}
 800b956:	bf00      	nop
 800b958:	371c      	adds	r7, #28
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr
	...

0800b964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b964:	b480      	push	{r7}
 800b966:	b085      	sub	sp, #20
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b974:	2b01      	cmp	r3, #1
 800b976:	d101      	bne.n	800b97c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b978:	2302      	movs	r3, #2
 800b97a:	e050      	b.n	800ba1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2202      	movs	r2, #2
 800b988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a1c      	ldr	r2, [pc, #112]	; (800ba2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d018      	beq.n	800b9f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9c8:	d013      	beq.n	800b9f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a18      	ldr	r2, [pc, #96]	; (800ba30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d00e      	beq.n	800b9f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a16      	ldr	r2, [pc, #88]	; (800ba34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d009      	beq.n	800b9f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a15      	ldr	r2, [pc, #84]	; (800ba38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d004      	beq.n	800b9f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a13      	ldr	r2, [pc, #76]	; (800ba3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d10c      	bne.n	800ba0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	68ba      	ldr	r2, [r7, #8]
 800ba00:	4313      	orrs	r3, r2
 800ba02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	68ba      	ldr	r2, [r7, #8]
 800ba0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba1c:	2300      	movs	r3, #0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3714      	adds	r7, #20
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	40010000 	.word	0x40010000
 800ba30:	40000400 	.word	0x40000400
 800ba34:	40000800 	.word	0x40000800
 800ba38:	40000c00 	.word	0x40000c00
 800ba3c:	40014000 	.word	0x40014000

0800ba40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba48:	bf00      	nop
 800ba4a:	370c      	adds	r7, #12
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b083      	sub	sp, #12
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba5c:	bf00      	nop
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d101      	bne.n	800ba7a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800ba76:	2301      	movs	r3, #1
 800ba78:	e047      	b.n	800bb0a <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d106      	bne.n	800ba94 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f7fa fa96 	bl	8005fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2224      	movs	r2, #36	; 0x24
 800ba98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	68da      	ldr	r2, [r3, #12]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800baaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 f931 	bl	800bd14 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	691a      	ldr	r2, [r3, #16]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bac0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	695a      	ldr	r2, [r3, #20]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800bad0:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	695a      	ldr	r2, [r3, #20]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f042 0208 	orr.w	r2, r2, #8
 800bae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	68da      	ldr	r2, [r3, #12]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800baf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2200      	movs	r2, #0
 800baf6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2220      	movs	r2, #32
 800bafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2220      	movs	r2, #32
 800bb04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b08a      	sub	sp, #40	; 0x28
 800bb16:	af02      	add	r7, sp, #8
 800bb18:	60f8      	str	r0, [r7, #12]
 800bb1a:	60b9      	str	r1, [r7, #8]
 800bb1c:	603b      	str	r3, [r7, #0]
 800bb1e:	4613      	mov	r3, r2
 800bb20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bb22:	2300      	movs	r3, #0
 800bb24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	2b20      	cmp	r3, #32
 800bb30:	d17c      	bne.n	800bc2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d002      	beq.n	800bb3e <HAL_UART_Transmit+0x2c>
 800bb38:	88fb      	ldrh	r3, [r7, #6]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d101      	bne.n	800bb42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e075      	b.n	800bc2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d101      	bne.n	800bb50 <HAL_UART_Transmit+0x3e>
 800bb4c:	2302      	movs	r3, #2
 800bb4e:	e06e      	b.n	800bc2e <HAL_UART_Transmit+0x11c>
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2201      	movs	r2, #1
 800bb54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2221      	movs	r2, #33	; 0x21
 800bb62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bb66:	f7fa fbb3 	bl	80062d0 <HAL_GetTick>
 800bb6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	88fa      	ldrh	r2, [r7, #6]
 800bb70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	88fa      	ldrh	r2, [r7, #6]
 800bb76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb80:	d108      	bne.n	800bb94 <HAL_UART_Transmit+0x82>
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	691b      	ldr	r3, [r3, #16]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d104      	bne.n	800bb94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	61bb      	str	r3, [r7, #24]
 800bb92:	e003      	b.n	800bb9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bba4:	e02a      	b.n	800bbfc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	9300      	str	r3, [sp, #0]
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	2200      	movs	r2, #0
 800bbae:	2180      	movs	r1, #128	; 0x80
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f000 f840 	bl	800bc36 <UART_WaitOnFlagUntilTimeout>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d001      	beq.n	800bbc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bbbc:	2303      	movs	r3, #3
 800bbbe:	e036      	b.n	800bc2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d10b      	bne.n	800bbde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	881b      	ldrh	r3, [r3, #0]
 800bbca:	461a      	mov	r2, r3
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bbd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	3302      	adds	r3, #2
 800bbda:	61bb      	str	r3, [r7, #24]
 800bbdc:	e007      	b.n	800bbee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	781a      	ldrb	r2, [r3, #0]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bbe8:	69fb      	ldr	r3, [r7, #28]
 800bbea:	3301      	adds	r3, #1
 800bbec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	3b01      	subs	r3, #1
 800bbf6:	b29a      	uxth	r2, r3
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d1cf      	bne.n	800bba6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	2140      	movs	r1, #64	; 0x40
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f000 f810 	bl	800bc36 <UART_WaitOnFlagUntilTimeout>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d001      	beq.n	800bc20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	e006      	b.n	800bc2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2220      	movs	r2, #32
 800bc24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	e000      	b.n	800bc2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bc2c:	2302      	movs	r3, #2
  }
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3720      	adds	r7, #32
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b090      	sub	sp, #64	; 0x40
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	60f8      	str	r0, [r7, #12]
 800bc3e:	60b9      	str	r1, [r7, #8]
 800bc40:	603b      	str	r3, [r7, #0]
 800bc42:	4613      	mov	r3, r2
 800bc44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc46:	e050      	b.n	800bcea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc4e:	d04c      	beq.n	800bcea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bc50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d007      	beq.n	800bc66 <UART_WaitOnFlagUntilTimeout+0x30>
 800bc56:	f7fa fb3b 	bl	80062d0 <HAL_GetTick>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	1ad3      	subs	r3, r2, r3
 800bc60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d241      	bcs.n	800bcea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	330c      	adds	r3, #12
 800bc6c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc70:	e853 3f00 	ldrex	r3, [r3]
 800bc74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	330c      	adds	r3, #12
 800bc84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc86:	637a      	str	r2, [r7, #52]	; 0x34
 800bc88:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc8e:	e841 2300 	strex	r3, r2, [r1]
 800bc92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d1e5      	bne.n	800bc66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	3314      	adds	r3, #20
 800bca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	e853 3f00 	ldrex	r3, [r3]
 800bca8:	613b      	str	r3, [r7, #16]
   return(result);
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	f023 0301 	bic.w	r3, r3, #1
 800bcb0:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	3314      	adds	r3, #20
 800bcb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcba:	623a      	str	r2, [r7, #32]
 800bcbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcbe:	69f9      	ldr	r1, [r7, #28]
 800bcc0:	6a3a      	ldr	r2, [r7, #32]
 800bcc2:	e841 2300 	strex	r3, r2, [r1]
 800bcc6:	61bb      	str	r3, [r7, #24]
   return(result);
 800bcc8:	69bb      	ldr	r3, [r7, #24]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d1e5      	bne.n	800bc9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2220      	movs	r2, #32
 800bcd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2220      	movs	r2, #32
 800bcda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800bce6:	2303      	movs	r3, #3
 800bce8:	e00f      	b.n	800bd0a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	4013      	ands	r3, r2
 800bcf4:	68ba      	ldr	r2, [r7, #8]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	bf0c      	ite	eq
 800bcfa:	2301      	moveq	r3, #1
 800bcfc:	2300      	movne	r3, #0
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	461a      	mov	r2, r3
 800bd02:	79fb      	ldrb	r3, [r7, #7]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d09f      	beq.n	800bc48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3740      	adds	r7, #64	; 0x40
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
	...

0800bd14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd18:	b0c0      	sub	sp, #256	; 0x100
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	691b      	ldr	r3, [r3, #16]
 800bd28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bd2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd30:	68d9      	ldr	r1, [r3, #12]
 800bd32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	ea40 0301 	orr.w	r3, r0, r1
 800bd3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bd3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd42:	689a      	ldr	r2, [r3, #8]
 800bd44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd48:	691b      	ldr	r3, [r3, #16]
 800bd4a:	431a      	orrs	r2, r3
 800bd4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd50:	695b      	ldr	r3, [r3, #20]
 800bd52:	431a      	orrs	r2, r3
 800bd54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd58:	69db      	ldr	r3, [r3, #28]
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bd60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bd6c:	f021 010c 	bic.w	r1, r1, #12
 800bd70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bd7a:	430b      	orrs	r3, r1
 800bd7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bd7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	695b      	ldr	r3, [r3, #20]
 800bd86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bd8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd8e:	6999      	ldr	r1, [r3, #24]
 800bd90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	ea40 0301 	orr.w	r3, r0, r1
 800bd9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bd9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	4b8f      	ldr	r3, [pc, #572]	; (800bfe0 <UART_SetConfig+0x2cc>)
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d005      	beq.n	800bdb4 <UART_SetConfig+0xa0>
 800bda8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	4b8d      	ldr	r3, [pc, #564]	; (800bfe4 <UART_SetConfig+0x2d0>)
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d104      	bne.n	800bdbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bdb4:	f7fd fdd8 	bl	8009968 <HAL_RCC_GetPCLK2Freq>
 800bdb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bdbc:	e003      	b.n	800bdc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bdbe:	f7fd fdbf 	bl	8009940 <HAL_RCC_GetPCLK1Freq>
 800bdc2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bdc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdca:	69db      	ldr	r3, [r3, #28]
 800bdcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdd0:	f040 810c 	bne.w	800bfec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bdd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bdde:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bde2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bde6:	4622      	mov	r2, r4
 800bde8:	462b      	mov	r3, r5
 800bdea:	1891      	adds	r1, r2, r2
 800bdec:	65b9      	str	r1, [r7, #88]	; 0x58
 800bdee:	415b      	adcs	r3, r3
 800bdf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdf2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bdf6:	4621      	mov	r1, r4
 800bdf8:	eb12 0801 	adds.w	r8, r2, r1
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	eb43 0901 	adc.w	r9, r3, r1
 800be02:	f04f 0200 	mov.w	r2, #0
 800be06:	f04f 0300 	mov.w	r3, #0
 800be0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800be0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800be12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800be16:	4690      	mov	r8, r2
 800be18:	4699      	mov	r9, r3
 800be1a:	4623      	mov	r3, r4
 800be1c:	eb18 0303 	adds.w	r3, r8, r3
 800be20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800be24:	462b      	mov	r3, r5
 800be26:	eb49 0303 	adc.w	r3, r9, r3
 800be2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800be2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800be3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800be3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800be42:	460b      	mov	r3, r1
 800be44:	18db      	adds	r3, r3, r3
 800be46:	653b      	str	r3, [r7, #80]	; 0x50
 800be48:	4613      	mov	r3, r2
 800be4a:	eb42 0303 	adc.w	r3, r2, r3
 800be4e:	657b      	str	r3, [r7, #84]	; 0x54
 800be50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800be54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800be58:	f7f4 fd1c 	bl	8000894 <__aeabi_uldivmod>
 800be5c:	4602      	mov	r2, r0
 800be5e:	460b      	mov	r3, r1
 800be60:	4b61      	ldr	r3, [pc, #388]	; (800bfe8 <UART_SetConfig+0x2d4>)
 800be62:	fba3 2302 	umull	r2, r3, r3, r2
 800be66:	095b      	lsrs	r3, r3, #5
 800be68:	011c      	lsls	r4, r3, #4
 800be6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be6e:	2200      	movs	r2, #0
 800be70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800be78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800be7c:	4642      	mov	r2, r8
 800be7e:	464b      	mov	r3, r9
 800be80:	1891      	adds	r1, r2, r2
 800be82:	64b9      	str	r1, [r7, #72]	; 0x48
 800be84:	415b      	adcs	r3, r3
 800be86:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800be8c:	4641      	mov	r1, r8
 800be8e:	eb12 0a01 	adds.w	sl, r2, r1
 800be92:	4649      	mov	r1, r9
 800be94:	eb43 0b01 	adc.w	fp, r3, r1
 800be98:	f04f 0200 	mov.w	r2, #0
 800be9c:	f04f 0300 	mov.w	r3, #0
 800bea0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bea4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bea8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800beac:	4692      	mov	sl, r2
 800beae:	469b      	mov	fp, r3
 800beb0:	4643      	mov	r3, r8
 800beb2:	eb1a 0303 	adds.w	r3, sl, r3
 800beb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800beba:	464b      	mov	r3, r9
 800bebc:	eb4b 0303 	adc.w	r3, fp, r3
 800bec0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bed0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bed4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bed8:	460b      	mov	r3, r1
 800beda:	18db      	adds	r3, r3, r3
 800bedc:	643b      	str	r3, [r7, #64]	; 0x40
 800bede:	4613      	mov	r3, r2
 800bee0:	eb42 0303 	adc.w	r3, r2, r3
 800bee4:	647b      	str	r3, [r7, #68]	; 0x44
 800bee6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800beea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800beee:	f7f4 fcd1 	bl	8000894 <__aeabi_uldivmod>
 800bef2:	4602      	mov	r2, r0
 800bef4:	460b      	mov	r3, r1
 800bef6:	4611      	mov	r1, r2
 800bef8:	4b3b      	ldr	r3, [pc, #236]	; (800bfe8 <UART_SetConfig+0x2d4>)
 800befa:	fba3 2301 	umull	r2, r3, r3, r1
 800befe:	095b      	lsrs	r3, r3, #5
 800bf00:	2264      	movs	r2, #100	; 0x64
 800bf02:	fb02 f303 	mul.w	r3, r2, r3
 800bf06:	1acb      	subs	r3, r1, r3
 800bf08:	00db      	lsls	r3, r3, #3
 800bf0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bf0e:	4b36      	ldr	r3, [pc, #216]	; (800bfe8 <UART_SetConfig+0x2d4>)
 800bf10:	fba3 2302 	umull	r2, r3, r3, r2
 800bf14:	095b      	lsrs	r3, r3, #5
 800bf16:	005b      	lsls	r3, r3, #1
 800bf18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bf1c:	441c      	add	r4, r3
 800bf1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf22:	2200      	movs	r2, #0
 800bf24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bf28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bf2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bf30:	4642      	mov	r2, r8
 800bf32:	464b      	mov	r3, r9
 800bf34:	1891      	adds	r1, r2, r2
 800bf36:	63b9      	str	r1, [r7, #56]	; 0x38
 800bf38:	415b      	adcs	r3, r3
 800bf3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bf40:	4641      	mov	r1, r8
 800bf42:	1851      	adds	r1, r2, r1
 800bf44:	6339      	str	r1, [r7, #48]	; 0x30
 800bf46:	4649      	mov	r1, r9
 800bf48:	414b      	adcs	r3, r1
 800bf4a:	637b      	str	r3, [r7, #52]	; 0x34
 800bf4c:	f04f 0200 	mov.w	r2, #0
 800bf50:	f04f 0300 	mov.w	r3, #0
 800bf54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bf58:	4659      	mov	r1, fp
 800bf5a:	00cb      	lsls	r3, r1, #3
 800bf5c:	4651      	mov	r1, sl
 800bf5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf62:	4651      	mov	r1, sl
 800bf64:	00ca      	lsls	r2, r1, #3
 800bf66:	4610      	mov	r0, r2
 800bf68:	4619      	mov	r1, r3
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	4642      	mov	r2, r8
 800bf6e:	189b      	adds	r3, r3, r2
 800bf70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf74:	464b      	mov	r3, r9
 800bf76:	460a      	mov	r2, r1
 800bf78:	eb42 0303 	adc.w	r3, r2, r3
 800bf7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bf8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bf90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bf94:	460b      	mov	r3, r1
 800bf96:	18db      	adds	r3, r3, r3
 800bf98:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	eb42 0303 	adc.w	r3, r2, r3
 800bfa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bfa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bfaa:	f7f4 fc73 	bl	8000894 <__aeabi_uldivmod>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	4b0d      	ldr	r3, [pc, #52]	; (800bfe8 <UART_SetConfig+0x2d4>)
 800bfb4:	fba3 1302 	umull	r1, r3, r3, r2
 800bfb8:	095b      	lsrs	r3, r3, #5
 800bfba:	2164      	movs	r1, #100	; 0x64
 800bfbc:	fb01 f303 	mul.w	r3, r1, r3
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	00db      	lsls	r3, r3, #3
 800bfc4:	3332      	adds	r3, #50	; 0x32
 800bfc6:	4a08      	ldr	r2, [pc, #32]	; (800bfe8 <UART_SetConfig+0x2d4>)
 800bfc8:	fba2 2303 	umull	r2, r3, r2, r3
 800bfcc:	095b      	lsrs	r3, r3, #5
 800bfce:	f003 0207 	and.w	r2, r3, #7
 800bfd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4422      	add	r2, r4
 800bfda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bfdc:	e105      	b.n	800c1ea <UART_SetConfig+0x4d6>
 800bfde:	bf00      	nop
 800bfe0:	40011000 	.word	0x40011000
 800bfe4:	40011400 	.word	0x40011400
 800bfe8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bfec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bff0:	2200      	movs	r2, #0
 800bff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bff6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bffa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bffe:	4642      	mov	r2, r8
 800c000:	464b      	mov	r3, r9
 800c002:	1891      	adds	r1, r2, r2
 800c004:	6239      	str	r1, [r7, #32]
 800c006:	415b      	adcs	r3, r3
 800c008:	627b      	str	r3, [r7, #36]	; 0x24
 800c00a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c00e:	4641      	mov	r1, r8
 800c010:	1854      	adds	r4, r2, r1
 800c012:	4649      	mov	r1, r9
 800c014:	eb43 0501 	adc.w	r5, r3, r1
 800c018:	f04f 0200 	mov.w	r2, #0
 800c01c:	f04f 0300 	mov.w	r3, #0
 800c020:	00eb      	lsls	r3, r5, #3
 800c022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c026:	00e2      	lsls	r2, r4, #3
 800c028:	4614      	mov	r4, r2
 800c02a:	461d      	mov	r5, r3
 800c02c:	4643      	mov	r3, r8
 800c02e:	18e3      	adds	r3, r4, r3
 800c030:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c034:	464b      	mov	r3, r9
 800c036:	eb45 0303 	adc.w	r3, r5, r3
 800c03a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c03e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c04a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c04e:	f04f 0200 	mov.w	r2, #0
 800c052:	f04f 0300 	mov.w	r3, #0
 800c056:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c05a:	4629      	mov	r1, r5
 800c05c:	008b      	lsls	r3, r1, #2
 800c05e:	4621      	mov	r1, r4
 800c060:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c064:	4621      	mov	r1, r4
 800c066:	008a      	lsls	r2, r1, #2
 800c068:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c06c:	f7f4 fc12 	bl	8000894 <__aeabi_uldivmod>
 800c070:	4602      	mov	r2, r0
 800c072:	460b      	mov	r3, r1
 800c074:	4b60      	ldr	r3, [pc, #384]	; (800c1f8 <UART_SetConfig+0x4e4>)
 800c076:	fba3 2302 	umull	r2, r3, r3, r2
 800c07a:	095b      	lsrs	r3, r3, #5
 800c07c:	011c      	lsls	r4, r3, #4
 800c07e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c082:	2200      	movs	r2, #0
 800c084:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c088:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c08c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c090:	4642      	mov	r2, r8
 800c092:	464b      	mov	r3, r9
 800c094:	1891      	adds	r1, r2, r2
 800c096:	61b9      	str	r1, [r7, #24]
 800c098:	415b      	adcs	r3, r3
 800c09a:	61fb      	str	r3, [r7, #28]
 800c09c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c0a0:	4641      	mov	r1, r8
 800c0a2:	1851      	adds	r1, r2, r1
 800c0a4:	6139      	str	r1, [r7, #16]
 800c0a6:	4649      	mov	r1, r9
 800c0a8:	414b      	adcs	r3, r1
 800c0aa:	617b      	str	r3, [r7, #20]
 800c0ac:	f04f 0200 	mov.w	r2, #0
 800c0b0:	f04f 0300 	mov.w	r3, #0
 800c0b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c0b8:	4659      	mov	r1, fp
 800c0ba:	00cb      	lsls	r3, r1, #3
 800c0bc:	4651      	mov	r1, sl
 800c0be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c0c2:	4651      	mov	r1, sl
 800c0c4:	00ca      	lsls	r2, r1, #3
 800c0c6:	4610      	mov	r0, r2
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	4642      	mov	r2, r8
 800c0ce:	189b      	adds	r3, r3, r2
 800c0d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c0d4:	464b      	mov	r3, r9
 800c0d6:	460a      	mov	r2, r1
 800c0d8:	eb42 0303 	adc.w	r3, r2, r3
 800c0dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c0e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	67bb      	str	r3, [r7, #120]	; 0x78
 800c0ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c0ec:	f04f 0200 	mov.w	r2, #0
 800c0f0:	f04f 0300 	mov.w	r3, #0
 800c0f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c0f8:	4649      	mov	r1, r9
 800c0fa:	008b      	lsls	r3, r1, #2
 800c0fc:	4641      	mov	r1, r8
 800c0fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c102:	4641      	mov	r1, r8
 800c104:	008a      	lsls	r2, r1, #2
 800c106:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c10a:	f7f4 fbc3 	bl	8000894 <__aeabi_uldivmod>
 800c10e:	4602      	mov	r2, r0
 800c110:	460b      	mov	r3, r1
 800c112:	4b39      	ldr	r3, [pc, #228]	; (800c1f8 <UART_SetConfig+0x4e4>)
 800c114:	fba3 1302 	umull	r1, r3, r3, r2
 800c118:	095b      	lsrs	r3, r3, #5
 800c11a:	2164      	movs	r1, #100	; 0x64
 800c11c:	fb01 f303 	mul.w	r3, r1, r3
 800c120:	1ad3      	subs	r3, r2, r3
 800c122:	011b      	lsls	r3, r3, #4
 800c124:	3332      	adds	r3, #50	; 0x32
 800c126:	4a34      	ldr	r2, [pc, #208]	; (800c1f8 <UART_SetConfig+0x4e4>)
 800c128:	fba2 2303 	umull	r2, r3, r2, r3
 800c12c:	095b      	lsrs	r3, r3, #5
 800c12e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c132:	441c      	add	r4, r3
 800c134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c138:	2200      	movs	r2, #0
 800c13a:	673b      	str	r3, [r7, #112]	; 0x70
 800c13c:	677a      	str	r2, [r7, #116]	; 0x74
 800c13e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c142:	4642      	mov	r2, r8
 800c144:	464b      	mov	r3, r9
 800c146:	1891      	adds	r1, r2, r2
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	415b      	adcs	r3, r3
 800c14c:	60fb      	str	r3, [r7, #12]
 800c14e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c152:	4641      	mov	r1, r8
 800c154:	1851      	adds	r1, r2, r1
 800c156:	6039      	str	r1, [r7, #0]
 800c158:	4649      	mov	r1, r9
 800c15a:	414b      	adcs	r3, r1
 800c15c:	607b      	str	r3, [r7, #4]
 800c15e:	f04f 0200 	mov.w	r2, #0
 800c162:	f04f 0300 	mov.w	r3, #0
 800c166:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c16a:	4659      	mov	r1, fp
 800c16c:	00cb      	lsls	r3, r1, #3
 800c16e:	4651      	mov	r1, sl
 800c170:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c174:	4651      	mov	r1, sl
 800c176:	00ca      	lsls	r2, r1, #3
 800c178:	4610      	mov	r0, r2
 800c17a:	4619      	mov	r1, r3
 800c17c:	4603      	mov	r3, r0
 800c17e:	4642      	mov	r2, r8
 800c180:	189b      	adds	r3, r3, r2
 800c182:	66bb      	str	r3, [r7, #104]	; 0x68
 800c184:	464b      	mov	r3, r9
 800c186:	460a      	mov	r2, r1
 800c188:	eb42 0303 	adc.w	r3, r2, r3
 800c18c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c18e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	663b      	str	r3, [r7, #96]	; 0x60
 800c198:	667a      	str	r2, [r7, #100]	; 0x64
 800c19a:	f04f 0200 	mov.w	r2, #0
 800c19e:	f04f 0300 	mov.w	r3, #0
 800c1a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c1a6:	4649      	mov	r1, r9
 800c1a8:	008b      	lsls	r3, r1, #2
 800c1aa:	4641      	mov	r1, r8
 800c1ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c1b0:	4641      	mov	r1, r8
 800c1b2:	008a      	lsls	r2, r1, #2
 800c1b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c1b8:	f7f4 fb6c 	bl	8000894 <__aeabi_uldivmod>
 800c1bc:	4602      	mov	r2, r0
 800c1be:	460b      	mov	r3, r1
 800c1c0:	4b0d      	ldr	r3, [pc, #52]	; (800c1f8 <UART_SetConfig+0x4e4>)
 800c1c2:	fba3 1302 	umull	r1, r3, r3, r2
 800c1c6:	095b      	lsrs	r3, r3, #5
 800c1c8:	2164      	movs	r1, #100	; 0x64
 800c1ca:	fb01 f303 	mul.w	r3, r1, r3
 800c1ce:	1ad3      	subs	r3, r2, r3
 800c1d0:	011b      	lsls	r3, r3, #4
 800c1d2:	3332      	adds	r3, #50	; 0x32
 800c1d4:	4a08      	ldr	r2, [pc, #32]	; (800c1f8 <UART_SetConfig+0x4e4>)
 800c1d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c1da:	095b      	lsrs	r3, r3, #5
 800c1dc:	f003 020f 	and.w	r2, r3, #15
 800c1e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4422      	add	r2, r4
 800c1e8:	609a      	str	r2, [r3, #8]
}
 800c1ea:	bf00      	nop
 800c1ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c1f6:	bf00      	nop
 800c1f8:	51eb851f 	.word	0x51eb851f

0800c1fc <arm_sin_f32>:
 800c1fc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800c278 <arm_sin_f32+0x7c>
 800c200:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c204:	ee20 7a07 	vmul.f32	s14, s0, s14
 800c208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c20c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800c210:	d42c      	bmi.n	800c26c <arm_sin_f32+0x70>
 800c212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c216:	eddf 6a19 	vldr	s13, [pc, #100]	; 800c27c <arm_sin_f32+0x80>
 800c21a:	4a19      	ldr	r2, [pc, #100]	; (800c280 <arm_sin_f32+0x84>)
 800c21c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c220:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c224:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c228:	eef4 7ae6 	vcmpe.f32	s15, s13
 800c22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c230:	bfa8      	it	ge
 800c232:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800c236:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800c23a:	ee17 3a10 	vmov	r3, s14
 800c23e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c242:	ee07 3a10 	vmov	s14, r3
 800c246:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800c24a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800c24e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c252:	edd1 6a01 	vldr	s13, [r1, #4]
 800c256:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c25a:	ed91 0a00 	vldr	s0, [r1]
 800c25e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c262:	ee27 0a00 	vmul.f32	s0, s14, s0
 800c266:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c26a:	4770      	bx	lr
 800c26c:	ee17 3a90 	vmov	r3, s15
 800c270:	3b01      	subs	r3, #1
 800c272:	ee07 3a90 	vmov	s15, r3
 800c276:	e7cc      	b.n	800c212 <arm_sin_f32+0x16>
 800c278:	3e22f983 	.word	0x3e22f983
 800c27c:	44000000 	.word	0x44000000
 800c280:	0800dc98 	.word	0x0800dc98

0800c284 <atoi>:
 800c284:	220a      	movs	r2, #10
 800c286:	2100      	movs	r1, #0
 800c288:	f000 b8d6 	b.w	800c438 <strtol>

0800c28c <__errno>:
 800c28c:	4b01      	ldr	r3, [pc, #4]	; (800c294 <__errno+0x8>)
 800c28e:	6818      	ldr	r0, [r3, #0]
 800c290:	4770      	bx	lr
 800c292:	bf00      	nop
 800c294:	200005b8 	.word	0x200005b8

0800c298 <__libc_init_array>:
 800c298:	b570      	push	{r4, r5, r6, lr}
 800c29a:	4d0d      	ldr	r5, [pc, #52]	; (800c2d0 <__libc_init_array+0x38>)
 800c29c:	4c0d      	ldr	r4, [pc, #52]	; (800c2d4 <__libc_init_array+0x3c>)
 800c29e:	1b64      	subs	r4, r4, r5
 800c2a0:	10a4      	asrs	r4, r4, #2
 800c2a2:	2600      	movs	r6, #0
 800c2a4:	42a6      	cmp	r6, r4
 800c2a6:	d109      	bne.n	800c2bc <__libc_init_array+0x24>
 800c2a8:	4d0b      	ldr	r5, [pc, #44]	; (800c2d8 <__libc_init_array+0x40>)
 800c2aa:	4c0c      	ldr	r4, [pc, #48]	; (800c2dc <__libc_init_array+0x44>)
 800c2ac:	f000 f8ce 	bl	800c44c <_init>
 800c2b0:	1b64      	subs	r4, r4, r5
 800c2b2:	10a4      	asrs	r4, r4, #2
 800c2b4:	2600      	movs	r6, #0
 800c2b6:	42a6      	cmp	r6, r4
 800c2b8:	d105      	bne.n	800c2c6 <__libc_init_array+0x2e>
 800c2ba:	bd70      	pop	{r4, r5, r6, pc}
 800c2bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2c0:	4798      	blx	r3
 800c2c2:	3601      	adds	r6, #1
 800c2c4:	e7ee      	b.n	800c2a4 <__libc_init_array+0xc>
 800c2c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2ca:	4798      	blx	r3
 800c2cc:	3601      	adds	r6, #1
 800c2ce:	e7f2      	b.n	800c2b6 <__libc_init_array+0x1e>
 800c2d0:	0800e5a8 	.word	0x0800e5a8
 800c2d4:	0800e5a8 	.word	0x0800e5a8
 800c2d8:	0800e5a8 	.word	0x0800e5a8
 800c2dc:	0800e5ac 	.word	0x0800e5ac

0800c2e0 <memcpy>:
 800c2e0:	440a      	add	r2, r1
 800c2e2:	4291      	cmp	r1, r2
 800c2e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2e8:	d100      	bne.n	800c2ec <memcpy+0xc>
 800c2ea:	4770      	bx	lr
 800c2ec:	b510      	push	{r4, lr}
 800c2ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2f6:	4291      	cmp	r1, r2
 800c2f8:	d1f9      	bne.n	800c2ee <memcpy+0xe>
 800c2fa:	bd10      	pop	{r4, pc}

0800c2fc <memset>:
 800c2fc:	4402      	add	r2, r0
 800c2fe:	4603      	mov	r3, r0
 800c300:	4293      	cmp	r3, r2
 800c302:	d100      	bne.n	800c306 <memset+0xa>
 800c304:	4770      	bx	lr
 800c306:	f803 1b01 	strb.w	r1, [r3], #1
 800c30a:	e7f9      	b.n	800c300 <memset+0x4>

0800c30c <strncmp>:
 800c30c:	b510      	push	{r4, lr}
 800c30e:	b17a      	cbz	r2, 800c330 <strncmp+0x24>
 800c310:	4603      	mov	r3, r0
 800c312:	3901      	subs	r1, #1
 800c314:	1884      	adds	r4, r0, r2
 800c316:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c31a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c31e:	4290      	cmp	r0, r2
 800c320:	d101      	bne.n	800c326 <strncmp+0x1a>
 800c322:	42a3      	cmp	r3, r4
 800c324:	d101      	bne.n	800c32a <strncmp+0x1e>
 800c326:	1a80      	subs	r0, r0, r2
 800c328:	bd10      	pop	{r4, pc}
 800c32a:	2800      	cmp	r0, #0
 800c32c:	d1f3      	bne.n	800c316 <strncmp+0xa>
 800c32e:	e7fa      	b.n	800c326 <strncmp+0x1a>
 800c330:	4610      	mov	r0, r2
 800c332:	e7f9      	b.n	800c328 <strncmp+0x1c>

0800c334 <_strtol_l.constprop.0>:
 800c334:	2b01      	cmp	r3, #1
 800c336:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c33a:	d001      	beq.n	800c340 <_strtol_l.constprop.0+0xc>
 800c33c:	2b24      	cmp	r3, #36	; 0x24
 800c33e:	d906      	bls.n	800c34e <_strtol_l.constprop.0+0x1a>
 800c340:	f7ff ffa4 	bl	800c28c <__errno>
 800c344:	2316      	movs	r3, #22
 800c346:	6003      	str	r3, [r0, #0]
 800c348:	2000      	movs	r0, #0
 800c34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c34e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c434 <_strtol_l.constprop.0+0x100>
 800c352:	460d      	mov	r5, r1
 800c354:	462e      	mov	r6, r5
 800c356:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c35a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c35e:	f017 0708 	ands.w	r7, r7, #8
 800c362:	d1f7      	bne.n	800c354 <_strtol_l.constprop.0+0x20>
 800c364:	2c2d      	cmp	r4, #45	; 0x2d
 800c366:	d132      	bne.n	800c3ce <_strtol_l.constprop.0+0x9a>
 800c368:	782c      	ldrb	r4, [r5, #0]
 800c36a:	2701      	movs	r7, #1
 800c36c:	1cb5      	adds	r5, r6, #2
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d05b      	beq.n	800c42a <_strtol_l.constprop.0+0xf6>
 800c372:	2b10      	cmp	r3, #16
 800c374:	d109      	bne.n	800c38a <_strtol_l.constprop.0+0x56>
 800c376:	2c30      	cmp	r4, #48	; 0x30
 800c378:	d107      	bne.n	800c38a <_strtol_l.constprop.0+0x56>
 800c37a:	782c      	ldrb	r4, [r5, #0]
 800c37c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c380:	2c58      	cmp	r4, #88	; 0x58
 800c382:	d14d      	bne.n	800c420 <_strtol_l.constprop.0+0xec>
 800c384:	786c      	ldrb	r4, [r5, #1]
 800c386:	2310      	movs	r3, #16
 800c388:	3502      	adds	r5, #2
 800c38a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c38e:	f108 38ff 	add.w	r8, r8, #4294967295
 800c392:	f04f 0c00 	mov.w	ip, #0
 800c396:	fbb8 f9f3 	udiv	r9, r8, r3
 800c39a:	4666      	mov	r6, ip
 800c39c:	fb03 8a19 	mls	sl, r3, r9, r8
 800c3a0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c3a4:	f1be 0f09 	cmp.w	lr, #9
 800c3a8:	d816      	bhi.n	800c3d8 <_strtol_l.constprop.0+0xa4>
 800c3aa:	4674      	mov	r4, lr
 800c3ac:	42a3      	cmp	r3, r4
 800c3ae:	dd24      	ble.n	800c3fa <_strtol_l.constprop.0+0xc6>
 800c3b0:	f1bc 0f00 	cmp.w	ip, #0
 800c3b4:	db1e      	blt.n	800c3f4 <_strtol_l.constprop.0+0xc0>
 800c3b6:	45b1      	cmp	r9, r6
 800c3b8:	d31c      	bcc.n	800c3f4 <_strtol_l.constprop.0+0xc0>
 800c3ba:	d101      	bne.n	800c3c0 <_strtol_l.constprop.0+0x8c>
 800c3bc:	45a2      	cmp	sl, r4
 800c3be:	db19      	blt.n	800c3f4 <_strtol_l.constprop.0+0xc0>
 800c3c0:	fb06 4603 	mla	r6, r6, r3, r4
 800c3c4:	f04f 0c01 	mov.w	ip, #1
 800c3c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c3cc:	e7e8      	b.n	800c3a0 <_strtol_l.constprop.0+0x6c>
 800c3ce:	2c2b      	cmp	r4, #43	; 0x2b
 800c3d0:	bf04      	itt	eq
 800c3d2:	782c      	ldrbeq	r4, [r5, #0]
 800c3d4:	1cb5      	addeq	r5, r6, #2
 800c3d6:	e7ca      	b.n	800c36e <_strtol_l.constprop.0+0x3a>
 800c3d8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c3dc:	f1be 0f19 	cmp.w	lr, #25
 800c3e0:	d801      	bhi.n	800c3e6 <_strtol_l.constprop.0+0xb2>
 800c3e2:	3c37      	subs	r4, #55	; 0x37
 800c3e4:	e7e2      	b.n	800c3ac <_strtol_l.constprop.0+0x78>
 800c3e6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c3ea:	f1be 0f19 	cmp.w	lr, #25
 800c3ee:	d804      	bhi.n	800c3fa <_strtol_l.constprop.0+0xc6>
 800c3f0:	3c57      	subs	r4, #87	; 0x57
 800c3f2:	e7db      	b.n	800c3ac <_strtol_l.constprop.0+0x78>
 800c3f4:	f04f 3cff 	mov.w	ip, #4294967295
 800c3f8:	e7e6      	b.n	800c3c8 <_strtol_l.constprop.0+0x94>
 800c3fa:	f1bc 0f00 	cmp.w	ip, #0
 800c3fe:	da05      	bge.n	800c40c <_strtol_l.constprop.0+0xd8>
 800c400:	2322      	movs	r3, #34	; 0x22
 800c402:	6003      	str	r3, [r0, #0]
 800c404:	4646      	mov	r6, r8
 800c406:	b942      	cbnz	r2, 800c41a <_strtol_l.constprop.0+0xe6>
 800c408:	4630      	mov	r0, r6
 800c40a:	e79e      	b.n	800c34a <_strtol_l.constprop.0+0x16>
 800c40c:	b107      	cbz	r7, 800c410 <_strtol_l.constprop.0+0xdc>
 800c40e:	4276      	negs	r6, r6
 800c410:	2a00      	cmp	r2, #0
 800c412:	d0f9      	beq.n	800c408 <_strtol_l.constprop.0+0xd4>
 800c414:	f1bc 0f00 	cmp.w	ip, #0
 800c418:	d000      	beq.n	800c41c <_strtol_l.constprop.0+0xe8>
 800c41a:	1e69      	subs	r1, r5, #1
 800c41c:	6011      	str	r1, [r2, #0]
 800c41e:	e7f3      	b.n	800c408 <_strtol_l.constprop.0+0xd4>
 800c420:	2430      	movs	r4, #48	; 0x30
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1b1      	bne.n	800c38a <_strtol_l.constprop.0+0x56>
 800c426:	2308      	movs	r3, #8
 800c428:	e7af      	b.n	800c38a <_strtol_l.constprop.0+0x56>
 800c42a:	2c30      	cmp	r4, #48	; 0x30
 800c42c:	d0a5      	beq.n	800c37a <_strtol_l.constprop.0+0x46>
 800c42e:	230a      	movs	r3, #10
 800c430:	e7ab      	b.n	800c38a <_strtol_l.constprop.0+0x56>
 800c432:	bf00      	nop
 800c434:	0800e49d 	.word	0x0800e49d

0800c438 <strtol>:
 800c438:	4613      	mov	r3, r2
 800c43a:	460a      	mov	r2, r1
 800c43c:	4601      	mov	r1, r0
 800c43e:	4802      	ldr	r0, [pc, #8]	; (800c448 <strtol+0x10>)
 800c440:	6800      	ldr	r0, [r0, #0]
 800c442:	f7ff bf77 	b.w	800c334 <_strtol_l.constprop.0>
 800c446:	bf00      	nop
 800c448:	200005b8 	.word	0x200005b8

0800c44c <_init>:
 800c44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c44e:	bf00      	nop
 800c450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c452:	bc08      	pop	{r3}
 800c454:	469e      	mov	lr, r3
 800c456:	4770      	bx	lr

0800c458 <_fini>:
 800c458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c45a:	bf00      	nop
 800c45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c45e:	bc08      	pop	{r3}
 800c460:	469e      	mov	lr, r3
 800c462:	4770      	bx	lr
