
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015c0  08009a9c  08009a9c  00019a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b05c  0800b05c  00020758  2**0
                  CONTENTS
  4 .ARM          00000008  0800b05c  0800b05c  0001b05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b064  0800b064  00020758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b064  0800b064  0001b064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b068  0800b068  0001b068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000758  20000000  0800b06c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024ec  20000758  0800b7c4  00020758  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c44  0800b7c4  00022c44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020758  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014172  00000000  00000000  00020788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002749  00000000  00000000  000348fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00037048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a0  00000000  00000000  00038210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c78  00000000  00000000  000392b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015070  00000000  00000000  00051f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e79f  00000000  00000000  00066f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00105737  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005438  00000000  00000000  001057f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  0010ac30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000758 	.word	0x20000758
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009a84 	.word	0x08009a84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000075c 	.word	0x2000075c
 80001dc:	08009a84 	.word	0x08009a84

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b974 	b.w	8000bec <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468e      	mov	lr, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	d14d      	bne.n	80009c6 <__udivmoddi4+0xaa>
 800092a:	428a      	cmp	r2, r1
 800092c:	4694      	mov	ip, r2
 800092e:	d969      	bls.n	8000a04 <__udivmoddi4+0xe8>
 8000930:	fab2 f282 	clz	r2, r2
 8000934:	b152      	cbz	r2, 800094c <__udivmoddi4+0x30>
 8000936:	fa01 f302 	lsl.w	r3, r1, r2
 800093a:	f1c2 0120 	rsb	r1, r2, #32
 800093e:	fa20 f101 	lsr.w	r1, r0, r1
 8000942:	fa0c fc02 	lsl.w	ip, ip, r2
 8000946:	ea41 0e03 	orr.w	lr, r1, r3
 800094a:	4094      	lsls	r4, r2
 800094c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000950:	0c21      	lsrs	r1, r4, #16
 8000952:	fbbe f6f8 	udiv	r6, lr, r8
 8000956:	fa1f f78c 	uxth.w	r7, ip
 800095a:	fb08 e316 	mls	r3, r8, r6, lr
 800095e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000962:	fb06 f107 	mul.w	r1, r6, r7
 8000966:	4299      	cmp	r1, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x64>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000972:	f080 811f 	bcs.w	8000bb4 <__udivmoddi4+0x298>
 8000976:	4299      	cmp	r1, r3
 8000978:	f240 811c 	bls.w	8000bb4 <__udivmoddi4+0x298>
 800097c:	3e02      	subs	r6, #2
 800097e:	4463      	add	r3, ip
 8000980:	1a5b      	subs	r3, r3, r1
 8000982:	b2a4      	uxth	r4, r4
 8000984:	fbb3 f0f8 	udiv	r0, r3, r8
 8000988:	fb08 3310 	mls	r3, r8, r0, r3
 800098c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000990:	fb00 f707 	mul.w	r7, r0, r7
 8000994:	42a7      	cmp	r7, r4
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x92>
 8000998:	eb1c 0404 	adds.w	r4, ip, r4
 800099c:	f100 33ff 	add.w	r3, r0, #4294967295
 80009a0:	f080 810a 	bcs.w	8000bb8 <__udivmoddi4+0x29c>
 80009a4:	42a7      	cmp	r7, r4
 80009a6:	f240 8107 	bls.w	8000bb8 <__udivmoddi4+0x29c>
 80009aa:	4464      	add	r4, ip
 80009ac:	3802      	subs	r0, #2
 80009ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b2:	1be4      	subs	r4, r4, r7
 80009b4:	2600      	movs	r6, #0
 80009b6:	b11d      	cbz	r5, 80009c0 <__udivmoddi4+0xa4>
 80009b8:	40d4      	lsrs	r4, r2
 80009ba:	2300      	movs	r3, #0
 80009bc:	e9c5 4300 	strd	r4, r3, [r5]
 80009c0:	4631      	mov	r1, r6
 80009c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d909      	bls.n	80009de <__udivmoddi4+0xc2>
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	f000 80ef 	beq.w	8000bae <__udivmoddi4+0x292>
 80009d0:	2600      	movs	r6, #0
 80009d2:	e9c5 0100 	strd	r0, r1, [r5]
 80009d6:	4630      	mov	r0, r6
 80009d8:	4631      	mov	r1, r6
 80009da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009de:	fab3 f683 	clz	r6, r3
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d14a      	bne.n	8000a7c <__udivmoddi4+0x160>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d302      	bcc.n	80009f0 <__udivmoddi4+0xd4>
 80009ea:	4282      	cmp	r2, r0
 80009ec:	f200 80f9 	bhi.w	8000be2 <__udivmoddi4+0x2c6>
 80009f0:	1a84      	subs	r4, r0, r2
 80009f2:	eb61 0303 	sbc.w	r3, r1, r3
 80009f6:	2001      	movs	r0, #1
 80009f8:	469e      	mov	lr, r3
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d0e0      	beq.n	80009c0 <__udivmoddi4+0xa4>
 80009fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a02:	e7dd      	b.n	80009c0 <__udivmoddi4+0xa4>
 8000a04:	b902      	cbnz	r2, 8000a08 <__udivmoddi4+0xec>
 8000a06:	deff      	udf	#255	; 0xff
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	f040 8092 	bne.w	8000b36 <__udivmoddi4+0x21a>
 8000a12:	eba1 010c 	sub.w	r1, r1, ip
 8000a16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1a:	fa1f fe8c 	uxth.w	lr, ip
 8000a1e:	2601      	movs	r6, #1
 8000a20:	0c20      	lsrs	r0, r4, #16
 8000a22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a26:	fb07 1113 	mls	r1, r7, r3, r1
 8000a2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a2e:	fb0e f003 	mul.w	r0, lr, r3
 8000a32:	4288      	cmp	r0, r1
 8000a34:	d908      	bls.n	8000a48 <__udivmoddi4+0x12c>
 8000a36:	eb1c 0101 	adds.w	r1, ip, r1
 8000a3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a3e:	d202      	bcs.n	8000a46 <__udivmoddi4+0x12a>
 8000a40:	4288      	cmp	r0, r1
 8000a42:	f200 80cb 	bhi.w	8000bdc <__udivmoddi4+0x2c0>
 8000a46:	4643      	mov	r3, r8
 8000a48:	1a09      	subs	r1, r1, r0
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a50:	fb07 1110 	mls	r1, r7, r0, r1
 8000a54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a58:	fb0e fe00 	mul.w	lr, lr, r0
 8000a5c:	45a6      	cmp	lr, r4
 8000a5e:	d908      	bls.n	8000a72 <__udivmoddi4+0x156>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a68:	d202      	bcs.n	8000a70 <__udivmoddi4+0x154>
 8000a6a:	45a6      	cmp	lr, r4
 8000a6c:	f200 80bb 	bhi.w	8000be6 <__udivmoddi4+0x2ca>
 8000a70:	4608      	mov	r0, r1
 8000a72:	eba4 040e 	sub.w	r4, r4, lr
 8000a76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a7a:	e79c      	b.n	80009b6 <__udivmoddi4+0x9a>
 8000a7c:	f1c6 0720 	rsb	r7, r6, #32
 8000a80:	40b3      	lsls	r3, r6
 8000a82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a92:	431c      	orrs	r4, r3
 8000a94:	40f9      	lsrs	r1, r7
 8000a96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000aa2:	0c20      	lsrs	r0, r4, #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ab0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ab4:	4288      	cmp	r0, r1
 8000ab6:	fa02 f206 	lsl.w	r2, r2, r6
 8000aba:	d90b      	bls.n	8000ad4 <__udivmoddi4+0x1b8>
 8000abc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ac4:	f080 8088 	bcs.w	8000bd8 <__udivmoddi4+0x2bc>
 8000ac8:	4288      	cmp	r0, r1
 8000aca:	f240 8085 	bls.w	8000bd8 <__udivmoddi4+0x2bc>
 8000ace:	f1a8 0802 	sub.w	r8, r8, #2
 8000ad2:	4461      	add	r1, ip
 8000ad4:	1a09      	subs	r1, r1, r0
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000adc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ae0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ae4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ae8:	458e      	cmp	lr, r1
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x1e2>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000af4:	d26c      	bcs.n	8000bd0 <__udivmoddi4+0x2b4>
 8000af6:	458e      	cmp	lr, r1
 8000af8:	d96a      	bls.n	8000bd0 <__udivmoddi4+0x2b4>
 8000afa:	3802      	subs	r0, #2
 8000afc:	4461      	add	r1, ip
 8000afe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b02:	fba0 9402 	umull	r9, r4, r0, r2
 8000b06:	eba1 010e 	sub.w	r1, r1, lr
 8000b0a:	42a1      	cmp	r1, r4
 8000b0c:	46c8      	mov	r8, r9
 8000b0e:	46a6      	mov	lr, r4
 8000b10:	d356      	bcc.n	8000bc0 <__udivmoddi4+0x2a4>
 8000b12:	d053      	beq.n	8000bbc <__udivmoddi4+0x2a0>
 8000b14:	b15d      	cbz	r5, 8000b2e <__udivmoddi4+0x212>
 8000b16:	ebb3 0208 	subs.w	r2, r3, r8
 8000b1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b22:	fa22 f306 	lsr.w	r3, r2, r6
 8000b26:	40f1      	lsrs	r1, r6
 8000b28:	431f      	orrs	r7, r3
 8000b2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b2e:	2600      	movs	r6, #0
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	40d8      	lsrs	r0, r3
 8000b3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b40:	fa21 f303 	lsr.w	r3, r1, r3
 8000b44:	4091      	lsls	r1, r2
 8000b46:	4301      	orrs	r1, r0
 8000b48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4c:	fa1f fe8c 	uxth.w	lr, ip
 8000b50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b54:	fb07 3610 	mls	r6, r7, r0, r3
 8000b58:	0c0b      	lsrs	r3, r1, #16
 8000b5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b62:	429e      	cmp	r6, r3
 8000b64:	fa04 f402 	lsl.w	r4, r4, r2
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x260>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b72:	d22f      	bcs.n	8000bd4 <__udivmoddi4+0x2b8>
 8000b74:	429e      	cmp	r6, r3
 8000b76:	d92d      	bls.n	8000bd4 <__udivmoddi4+0x2b8>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	1b9b      	subs	r3, r3, r6
 8000b7e:	b289      	uxth	r1, r1
 8000b80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b84:	fb07 3316 	mls	r3, r7, r6, r3
 8000b88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d908      	bls.n	8000ba6 <__udivmoddi4+0x28a>
 8000b94:	eb1c 0101 	adds.w	r1, ip, r1
 8000b98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b9c:	d216      	bcs.n	8000bcc <__udivmoddi4+0x2b0>
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d914      	bls.n	8000bcc <__udivmoddi4+0x2b0>
 8000ba2:	3e02      	subs	r6, #2
 8000ba4:	4461      	add	r1, ip
 8000ba6:	1ac9      	subs	r1, r1, r3
 8000ba8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bac:	e738      	b.n	8000a20 <__udivmoddi4+0x104>
 8000bae:	462e      	mov	r6, r5
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	e705      	b.n	80009c0 <__udivmoddi4+0xa4>
 8000bb4:	4606      	mov	r6, r0
 8000bb6:	e6e3      	b.n	8000980 <__udivmoddi4+0x64>
 8000bb8:	4618      	mov	r0, r3
 8000bba:	e6f8      	b.n	80009ae <__udivmoddi4+0x92>
 8000bbc:	454b      	cmp	r3, r9
 8000bbe:	d2a9      	bcs.n	8000b14 <__udivmoddi4+0x1f8>
 8000bc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000bc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bc8:	3801      	subs	r0, #1
 8000bca:	e7a3      	b.n	8000b14 <__udivmoddi4+0x1f8>
 8000bcc:	4646      	mov	r6, r8
 8000bce:	e7ea      	b.n	8000ba6 <__udivmoddi4+0x28a>
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	e794      	b.n	8000afe <__udivmoddi4+0x1e2>
 8000bd4:	4640      	mov	r0, r8
 8000bd6:	e7d1      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bd8:	46d0      	mov	r8, sl
 8000bda:	e77b      	b.n	8000ad4 <__udivmoddi4+0x1b8>
 8000bdc:	3b02      	subs	r3, #2
 8000bde:	4461      	add	r1, ip
 8000be0:	e732      	b.n	8000a48 <__udivmoddi4+0x12c>
 8000be2:	4630      	mov	r0, r6
 8000be4:	e709      	b.n	80009fa <__udivmoddi4+0xde>
 8000be6:	4464      	add	r4, ip
 8000be8:	3802      	subs	r0, #2
 8000bea:	e742      	b.n	8000a72 <__udivmoddi4+0x156>

08000bec <__aeabi_idiv0>:
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bf8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bfc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d013      	beq.n	8000c30 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c0c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c10:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00b      	beq.n	8000c30 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c18:	e000      	b.n	8000c1c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c1a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0f9      	beq.n	8000c1a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c26:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c30:	687b      	ldr	r3, [r7, #4]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_write>:
uint16_t enc2_lut[180];   // lut to skip cells ,filled in on main
uint16_t feedback_line[17]={'F','o','o','d','b','a','c','k','g','_' ,'k',64, 278, 279, 280,64}; // this is variable , last display line for info
uint16_t feedback_pointer;  // pointer for feedback item start position , maybe bit search for less menu data ,dunno

int _write(int file, char *ptr, int len)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e009      	b.n	8000c64 <_write+0x26>
	{
	   ITM_SendChar( *ptr++ );
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ffc9 	bl	8000bf0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbf1      	blt.n	8000c50 <_write+0x12>
	}

	return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <SPI_command>:
void SPI_command(void){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <SPI_command+0x68>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d128      	bne.n	8000cd8 <SPI_command+0x60>
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <SPI_command+0x6c>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d124      	bne.n	8000cd8 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <SPI_command+0x70>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	0a1b      	lsrs	r3, r3, #8
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <SPI_command+0x2a>
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <SPI_command+0x74>)
 8000c9c:	22f8      	movs	r2, #248	; 0xf8
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e002      	b.n	8000ca8 <SPI_command+0x30>
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <SPI_command+0x74>)
 8000ca4:	22fa      	movs	r2, #250	; 0xfa
 8000ca6:	701a      	strb	r2, [r3, #0]
/*		bsrr_long=spi_byte<<16; // top byte for command 24-16, then 2 bytes of data 16-0
		spi_hold=(spi_hold&255);
		bsrr_long=bsrr_long+((spi_hold>>4)<<12); // 4 bits to top
		bsrr_long=bsrr_long+((spi_hold&15)<<4);	// 4 bits to top
*/
	spi_store[0]=spi_byte&255;
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <SPI_command+0x74>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <SPI_command+0x70>)
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	091b      	lsrs	r3, r3, #4
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <SPI_command+0x70>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	011b      	lsls	r3, r3, #4
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
		HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 100);  // working good
 8000cc6:	4639      	mov	r1, r7
 8000cc8:	2364      	movs	r3, #100	; 0x64
 8000cca:	2203      	movs	r2, #3
 8000ccc:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <SPI_command+0x78>)
 8000cce:	f006 fc0a 	bl	80074e6 <HAL_SPI_Transmit>


//HAL_Delay(10);
	spi_enable=1; }
 8000cd2:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <SPI_command+0x68>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	801a      	strh	r2, [r3, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20001cfa 	.word	0x20001cfa
 8000ce4:	20001d00 	.word	0x20001d00
 8000ce8:	20001cfe 	.word	0x20001cfe
 8000cec:	20001cfc 	.word	0x20001cfc
 8000cf0:	20002afc 	.word	0x20002afc

08000cf4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

	sample_point=sample_point & 1023;// this is 1
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d0a:	801a      	strh	r2, [r3, #0]
	play_hold=play_sample[sample_point]; // this is 2
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000d16:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d1c:	801a      	strh	r2, [r3, #0]

		if(TIM3==htim->Instance)			// nothing here is consistent
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d10b      	bne.n	8000d40 <HAL_TIM_PeriodElapsedCallback+0x4c>
{


TIM3->CCR3=play_hold ;  // keep readin sample storage
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d30:	63da      	str	r2, [r3, #60]	; 0x3c


//if (bs_count==255
	//	)  { bs_count=0; menu_store=(menuSelect>>2); } else bs_count++; // menu select, higher count just spills over  159 chamge to 128 2*64
//}
sample_point++; //this needs to be here or too fast and wrong sample rate
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	3301      	adds	r3, #1
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d3e:	801a      	strh	r2, [r3, #0]

}

}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	20001442 	.word	0x20001442
 8000d50:	20000c40 	.word	0x20000c40
 8000d54:	20001444 	.word	0x20001444
 8000d58:	40000400 	.word	0x40000400

08000d5c <analoginputloopb>:
						}  // get value this this on e is blank
		//HAL_ADC_Stop(&hadc1);
//for (i=0;i<3;i++){ adc_values[i]= (adc_values[i]>>8) &15; } // reduce value to 4 bit
}
*/
void analoginputloopb(void){  //works fine still
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0


	//menuSelect = (7 - (adc_values[0] >>2))<<1;		//x *16  main menu select
	//menuSelect = (15 - (adc_values[0] >>1));		//x *7  main menu select
	//menuSelectX=(31 - adc_values[1])>>1;  // Y select inside page
	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 8000d62:	4b80      	ldr	r3, [pc, #512]	; (8000f64 <analoginputloopb+0x208>)
 8000d64:	889b      	ldrh	r3, [r3, #4]
 8000d66:	091b      	lsrs	r3, r3, #4
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b7e      	ldr	r3, [pc, #504]	; (8000f68 <analoginputloopb+0x20c>)
 8000d6e:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 8000d70:	4b7c      	ldr	r3, [pc, #496]	; (8000f64 <analoginputloopb+0x208>)
 8000d72:	889b      	ldrh	r3, [r3, #4]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b7b      	ldr	r3, [pc, #492]	; (8000f6c <analoginputloopb+0x210>)
 8000d7e:	701a      	strb	r2, [r3, #0]
	//	counterVarB = menuSelectX + menuSelect; // select mem page 10*8  and location pointer  77
//		if (adc_values[1]>15)	menu_holder=disp_lut [(menuSelect)	+1] [31-adc_values[1]]; // change back to 0-15
//	else menu_holder=disp_lut [(menuSelect)	] [15-adc_values[1]];  // grab disp lut value for pointer if valid then write for now

		//menu_holder=disp_lut [(menuSelect)	] [(15-adc_values[1])];   // value from disp lut
		menu_holder=disp_lut [menuSelect] [menuSelectX];   // value from disp lut
 8000d80:	4b79      	ldr	r3, [pc, #484]	; (8000f68 <analoginputloopb+0x20c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	4b79      	ldr	r3, [pc, #484]	; (8000f6c <analoginputloopb+0x210>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4a78      	ldr	r2, [pc, #480]	; (8000f70 <analoginputloopb+0x214>)
 8000d8e:	0103      	lsls	r3, r0, #4
 8000d90:	440b      	add	r3, r1
 8000d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d96:	80fb      	strh	r3, [r7, #6]
		cursor_menu[1]=0;
 8000d98:	4b72      	ldr	r3, [pc, #456]	; (8000f64 <analoginputloopb+0x208>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	805a      	strh	r2, [r3, #2]
		//cursor_menu[2]=cursor_lookup[enc2_dir];
		// cursor_menu[2]=cursor_lookup[enc2_dir]; //needed for correct line sequence ,obsolete
		cursor_menu[2]=enc2_dir;
 8000d9e:	4b75      	ldr	r3, [pc, #468]	; (8000f74 <analoginputloopb+0x218>)
 8000da0:	881a      	ldrh	r2, [r3, #0]
 8000da2:	4b70      	ldr	r3, [pc, #448]	; (8000f64 <analoginputloopb+0x208>)
 8000da4:	809a      	strh	r2, [r3, #4]

		//cursor_menu[2]=(16-adc_values[1]);



		if (menu_holder>127)	counterVarB=menu_holder-128; //  points to actual potvalues location from dsip_lut when value is higher than 127 , works ok problem with menu display
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	2b7f      	cmp	r3, #127	; 0x7f
 8000daa:	d904      	bls.n	8000db6 <analoginputloopb+0x5a>
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	3b80      	subs	r3, #128	; 0x80
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	4b71      	ldr	r3, [pc, #452]	; (8000f78 <analoginputloopb+0x21c>)
 8000db4:	801a      	strh	r2, [r3, #0]
		if (menu_holder>511)	counterVarB=menu_holder-384;		// text pointer , max potvalue address is 142 , fix second page issue later
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dbc:	d305      	bcc.n	8000dca <analoginputloopb+0x6e>
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	4b6c      	ldr	r3, [pc, #432]	; (8000f78 <analoginputloopb+0x21c>)
 8000dc8:	801a      	strh	r2, [r3, #0]


		enc_dir=potSource[counterVarB];
 8000dca:	4b6b      	ldr	r3, [pc, #428]	; (8000f78 <analoginputloopb+0x21c>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b6a      	ldr	r3, [pc, #424]	; (8000f7c <analoginputloopb+0x220>)
 8000dd2:	5c9b      	ldrb	r3, [r3, r2]
 8000dd4:	b21a      	sxth	r2, r3
 8000dd6:	4b6a      	ldr	r3, [pc, #424]	; (8000f80 <analoginputloopb+0x224>)
 8000dd8:	801a      	strh	r2, [r3, #0]


	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 8000dda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de0:	085b      	lsrs	r3, r3, #1
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	4b67      	ldr	r3, [pc, #412]	; (8000f84 <analoginputloopb+0x228>)
 8000de6:	801a      	strh	r2, [r3, #0]
	enc2_temp=(TIM4->CNT)>>1;  // read counter tim4
 8000de8:	4b67      	ldr	r3, [pc, #412]	; (8000f88 <analoginputloopb+0x22c>)
 8000dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dec:	085b      	lsrs	r3, r3, #1
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b66      	ldr	r3, [pc, #408]	; (8000f8c <analoginputloopb+0x230>)
 8000df2:	801a      	strh	r2, [r3, #0]
	enc2_temp=enc2_temp&127; // fix overflow ? , dont need a lot because of skip
 8000df4:	4b65      	ldr	r3, [pc, #404]	; (8000f8c <analoginputloopb+0x230>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	4b63      	ldr	r3, [pc, #396]	; (8000f8c <analoginputloopb+0x230>)
 8000e00:	801a      	strh	r2, [r3, #0]

	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite
 8000e02:	4b60      	ldr	r3, [pc, #384]	; (8000f84 <analoginputloopb+0x228>)
 8000e04:	881a      	ldrh	r2, [r3, #0]
 8000e06:	4b62      	ldr	r3, [pc, #392]	; (8000f90 <analoginputloopb+0x234>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d910      	bls.n	8000e30 <analoginputloopb+0xd4>
 8000e0e:	4b5c      	ldr	r3, [pc, #368]	; (8000f80 <analoginputloopb+0x224>)
 8000e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	4b57      	ldr	r3, [pc, #348]	; (8000f74 <analoginputloopb+0x218>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	091b      	lsrs	r3, r3, #4
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4b5c      	ldr	r3, [pc, #368]	; (8000f94 <analoginputloopb+0x238>)
 8000e22:	5c5b      	ldrb	r3, [r3, r1]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	4b54      	ldr	r3, [pc, #336]	; (8000f80 <analoginputloopb+0x224>)
 8000e2e:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite , step multiplier
 8000e30:	4b54      	ldr	r3, [pc, #336]	; (8000f84 <analoginputloopb+0x228>)
 8000e32:	881a      	ldrh	r2, [r3, #0]
 8000e34:	4b56      	ldr	r3, [pc, #344]	; (8000f90 <analoginputloopb+0x234>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d210      	bcs.n	8000e5e <analoginputloopb+0x102>
 8000e3c:	4b4d      	ldr	r3, [pc, #308]	; (8000f74 <analoginputloopb+0x218>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	091b      	lsrs	r3, r3, #4
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b53      	ldr	r3, [pc, #332]	; (8000f94 <analoginputloopb+0x238>)
 8000e48:	5c9b      	ldrb	r3, [r3, r2]
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	4b4c      	ldr	r3, [pc, #304]	; (8000f80 <analoginputloopb+0x224>)
 8000e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	4413      	add	r3, r2
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	4b49      	ldr	r3, [pc, #292]	; (8000f80 <analoginputloopb+0x224>)
 8000e5c:	801a      	strh	r2, [r3, #0]
	//if (enc_temp<enc_tempB)	 enc_dir++;

  enc2_temp=enc2_lut[enc2_temp];  // force alternative values for skip  , seems to work ok , disable temporarily
 8000e5e:	4b4b      	ldr	r3, [pc, #300]	; (8000f8c <analoginputloopb+0x230>)
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b4c      	ldr	r3, [pc, #304]	; (8000f98 <analoginputloopb+0x23c>)
 8000e66:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000e6a:	4b48      	ldr	r3, [pc, #288]	; (8000f8c <analoginputloopb+0x230>)
 8000e6c:	801a      	strh	r2, [r3, #0]
  if (enc2_temp>383) enc2_temp=383;  //mem overflow somewhere
 8000e6e:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <analoginputloopb+0x230>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000e76:	d303      	bcc.n	8000e80 <analoginputloopb+0x124>
 8000e78:	4b44      	ldr	r3, [pc, #272]	; (8000f8c <analoginputloopb+0x230>)
 8000e7a:	f240 127f 	movw	r2, #383	; 0x17f
 8000e7e:	801a      	strh	r2, [r3, #0]
	if (enc_dir>160) enc_dir=160;
 8000e80:	4b3f      	ldr	r3, [pc, #252]	; (8000f80 <analoginputloopb+0x224>)
 8000e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e86:	2ba0      	cmp	r3, #160	; 0xa0
 8000e88:	dd02      	ble.n	8000e90 <analoginputloopb+0x134>
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <analoginputloopb+0x224>)
 8000e8c:	22a0      	movs	r2, #160	; 0xa0
 8000e8e:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 8000e90:	4b3b      	ldr	r3, [pc, #236]	; (8000f80 <analoginputloopb+0x224>)
 8000e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	da02      	bge.n	8000ea0 <analoginputloopb+0x144>
 8000e9a:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <analoginputloopb+0x224>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	801a      	strh	r2, [r3, #0]
			//if (enc2_temp<16) enc_dir=(enc_dir<<2) & 127; // faster for notes on first row

			potSource[counterVarB]=enc_dir;       // enter data into potsource
 8000ea0:	4b37      	ldr	r3, [pc, #220]	; (8000f80 <analoginputloopb+0x224>)
 8000ea2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <analoginputloopb+0x21c>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	b2c9      	uxtb	r1, r1
 8000eae:	4b33      	ldr	r3, [pc, #204]	; (8000f7c <analoginputloopb+0x220>)
 8000eb0:	5499      	strb	r1, [r3, r2]
					enc_dir=0;
 8000eb2:	4b33      	ldr	r3, [pc, #204]	; (8000f80 <analoginputloopb+0x224>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	801a      	strh	r2, [r3, #0]
			enc_tempB=enc_temp;
 8000eb8:	4b32      	ldr	r3, [pc, #200]	; (8000f84 <analoginputloopb+0x228>)
 8000eba:	881a      	ldrh	r2, [r3, #0]
 8000ebc:	4b34      	ldr	r3, [pc, #208]	; (8000f90 <analoginputloopb+0x234>)
 8000ebe:	801a      	strh	r2, [r3, #0]
			//if (enc2_dir>383) enc2_dir=383;

			//if  (enc2_temp>enc2_tempB)	 enc2_dir++;   // start settle timer , will do 2 times per turn always
			//if (enc2_temp<enc2_tempB)	 enc2_dir--;
			enc2_dir=enc2_temp; //temp to try source data
 8000ec0:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <analoginputloopb+0x230>)
 8000ec2:	881a      	ldrh	r2, [r3, #0]
 8000ec4:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <analoginputloopb+0x218>)
 8000ec6:	801a      	strh	r2, [r3, #0]
		//	if (enc2_dir>127) menu_page[1]=127; else if (enc2_dir>255)   menu_page[1]=255;				else menu_page[1]=0;
		//	menu_page[1]= (enc2_dir >>7) <<7;

			menu_page[1]=enc2_dir&384;
 8000ec8:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <analoginputloopb+0x218>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	4b32      	ldr	r3, [pc, #200]	; (8000f9c <analoginputloopb+0x240>)
 8000ed4:	805a      	strh	r2, [r3, #2]


			//if (enc2_dir>255) {menu_page[1]=0;display_fill();}

					if ((enc2_temp>127) && (enc2_tempB<=127)) display_fill();    // need to optimize
 8000ed6:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <analoginputloopb+0x230>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	2b7f      	cmp	r3, #127	; 0x7f
 8000edc:	d905      	bls.n	8000eea <analoginputloopb+0x18e>
 8000ede:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <analoginputloopb+0x244>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ee4:	d801      	bhi.n	8000eea <analoginputloopb+0x18e>
 8000ee6:	f000 fa07 	bl	80012f8 <display_fill>
					if ((enc2_temp<=127) && (enc2_tempB>127)) display_fill();
 8000eea:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <analoginputloopb+0x230>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef0:	d805      	bhi.n	8000efe <analoginputloopb+0x1a2>
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <analoginputloopb+0x244>)
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef8:	d901      	bls.n	8000efe <analoginputloopb+0x1a2>
 8000efa:	f000 f9fd 	bl	80012f8 <display_fill>
					if ((enc2_temp>255) && (enc2_tempB<=255)) display_fill();
 8000efe:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <analoginputloopb+0x230>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	2bff      	cmp	r3, #255	; 0xff
 8000f04:	d905      	bls.n	8000f12 <analoginputloopb+0x1b6>
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <analoginputloopb+0x244>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	2bff      	cmp	r3, #255	; 0xff
 8000f0c:	d801      	bhi.n	8000f12 <analoginputloopb+0x1b6>
 8000f0e:	f000 f9f3 	bl	80012f8 <display_fill>
					if ((enc2_temp<=255) && (enc2_tempB>255)) display_fill();
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <analoginputloopb+0x230>)
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	2bff      	cmp	r3, #255	; 0xff
 8000f18:	d805      	bhi.n	8000f26 <analoginputloopb+0x1ca>
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <analoginputloopb+0x244>)
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	2bff      	cmp	r3, #255	; 0xff
 8000f20:	d901      	bls.n	8000f26 <analoginputloopb+0x1ca>
 8000f22:	f000 f9e9 	bl	80012f8 <display_fill>
					if ((enc2_temp>383) && (enc2_tempB<=383)) display_fill();
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <analoginputloopb+0x230>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000f2e:	d306      	bcc.n	8000f3e <analoginputloopb+0x1e2>
 8000f30:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <analoginputloopb+0x244>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000f38:	d201      	bcs.n	8000f3e <analoginputloopb+0x1e2>
 8000f3a:	f000 f9dd 	bl	80012f8 <display_fill>
					//if ((enc2_temp<=383) && (enc2_tempB>383)) display_fill();
					//if ((enc2_temp<127) && (enc2_tempB>384)) display_fill();
					//if ((enc2_temp<=511) && (enc2_tempB<127)) display_fill();


					enc2_tempB=enc2_temp; // to effective as counter not getting reset
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <analoginputloopb+0x230>)
 8000f40:	881a      	ldrh	r2, [r3, #0]
 8000f42:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <analoginputloopb+0x244>)
 8000f44:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <analoginputloopb+0x21c>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <analoginputloopb+0x220>)
 8000f4e:	5c9b      	ldrb	r3, [r3, r2]
 8000f50:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <analoginputloopb+0x21c>)
 8000f52:	8812      	ldrh	r2, [r2, #0]
 8000f54:	091b      	lsrs	r3, r3, #4
 8000f56:	b2d9      	uxtb	r1, r3
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <analoginputloopb+0x248>)
 8000f5a:	5499      	strb	r1, [r3, r2]

//potValues[counterVarB]=potSource[counterVarB] & 15 ;  // reduce values for now ,use original for others



}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20001d04 	.word	0x20001d04
 8000f68:	20000be4 	.word	0x20000be4
 8000f6c:	20000be5 	.word	0x20000be5
 8000f70:	08009dfc 	.word	0x08009dfc
 8000f74:	20001cf2 	.word	0x20001cf2
 8000f78:	20000be6 	.word	0x20000be6
 8000f7c:	20000a64 	.word	0x20000a64
 8000f80:	20001cf4 	.word	0x20001cf4
 8000f84:	20001cea 	.word	0x20001cea
 8000f88:	40000800 	.word	0x40000800
 8000f8c:	20001cee 	.word	0x20001cee
 8000f90:	20001cec 	.word	0x20001cec
 8000f94:	200006c4 	.word	0x200006c4
 8000f98:	20000774 	.word	0x20000774
 8000f9c:	20001d14 	.word	0x20001d14
 8000fa0:	20001cf0 	.word	0x20001cf0
 8000fa4:	200008e4 	.word	0x200008e4

08000fa8 <display_init>:
void display_init(void){
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);


		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd
 8000fae:	4b64      	ldr	r3, [pc, #400]	; (8001140 <display_init+0x198>)
 8000fb0:	1d3c      	adds	r4, r7, #4
 8000fb2:	461d      	mov	r5, r3
 8000fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbc:	682b      	ldr	r3, [r5, #0]
 8000fbe:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8000fc0:	4b60      	ldr	r3, [pc, #384]	; (8001144 <display_init+0x19c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f040 80b6 	bne.w	8001136 <display_init+0x18e>

/*if ((enc2_dir>63) && (menu_page[2]==0))  {init=4;menu_page[2]=1;}  //restart page draw for second page , might need home pos init
if  ((init==76) && (menu_page[2]==1)) menu_page[2]=2; //after drawing second page and finish
if ((enc2_dir<63) && (menu_page[2]==2))  {init=4;menu_page[2]=0;}
*/
switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded
 8000fca:	4b5f      	ldr	r3, [pc, #380]	; (8001148 <display_init+0x1a0>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	3b4d      	subs	r3, #77	; 0x4d
 8000fd0:	2b07      	cmp	r3, #7
 8000fd2:	d879      	bhi.n	80010c8 <display_init+0x120>
 8000fd4:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <display_init+0x34>)
 8000fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fda:	bf00      	nop
 8000fdc:	08000ffd 	.word	0x08000ffd
 8000fe0:	0800102d 	.word	0x0800102d
 8000fe4:	08001035 	.word	0x08001035
 8000fe8:	08001051 	.word	0x08001051
 8000fec:	08001065 	.word	0x08001065
 8000ff0:	08001073 	.word	0x08001073
 8000ff4:	08001087 	.word	0x08001087
 8000ff8:	0800109b 	.word	0x0800109b

case 77: spi_hold=384+(init_b>>1);init=init+((init_b&1)*2);break; // no delay ,jump to either blink sets
 8000ffc:	4b53      	ldr	r3, [pc, #332]	; (800114c <display_init+0x1a4>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	085b      	lsrs	r3, r3, #1
 8001002:	b29b      	uxth	r3, r3
 8001004:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001008:	b29a      	uxth	r2, r3
 800100a:	4b51      	ldr	r3, [pc, #324]	; (8001150 <display_init+0x1a8>)
 800100c:	801a      	strh	r2, [r3, #0]
 800100e:	4b4f      	ldr	r3, [pc, #316]	; (800114c <display_init+0x1a4>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b4a      	ldr	r3, [pc, #296]	; (8001148 <display_init+0x1a0>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	4413      	add	r3, r2
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b48      	ldr	r3, [pc, #288]	; (8001148 <display_init+0x1a0>)
 8001028:	701a      	strb	r2, [r3, #0]
 800102a:	e05f      	b.n	80010ec <display_init+0x144>

case 78: spi_hold=10;break; //write one set then jump
 800102c:	4b48      	ldr	r3, [pc, #288]	; (8001150 <display_init+0x1a8>)
 800102e:	220a      	movs	r2, #10
 8001030:	801a      	strh	r2, [r3, #0]
 8001032:	e05b      	b.n	80010ec <display_init+0x144>
case 79: spi_hold=spell[(init_b&62)+1];init=81;break;
 8001034:	4b45      	ldr	r3, [pc, #276]	; (800114c <display_init+0x1a4>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800103c:	3301      	adds	r3, #1
 800103e:	4a45      	ldr	r2, [pc, #276]	; (8001154 <display_init+0x1ac>)
 8001040:	5cd3      	ldrb	r3, [r2, r3]
 8001042:	b29a      	uxth	r2, r3
 8001044:	4b42      	ldr	r3, [pc, #264]	; (8001150 <display_init+0x1a8>)
 8001046:	801a      	strh	r2, [r3, #0]
 8001048:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <display_init+0x1a0>)
 800104a:	2251      	movs	r2, #81	; 0x51
 800104c:	701a      	strb	r2, [r3, #0]
 800104e:	e04d      	b.n	80010ec <display_init+0x144>
case 80: spi_hold=spell[init_b&62];break; // or write other set then jump
 8001050:	4b3e      	ldr	r3, [pc, #248]	; (800114c <display_init+0x1a4>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001058:	4a3e      	ldr	r2, [pc, #248]	; (8001154 <display_init+0x1ac>)
 800105a:	5cd3      	ldrb	r3, [r2, r3]
 800105c:	b29a      	uxth	r2, r3
 800105e:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <display_init+0x1a8>)
 8001060:	801a      	strh	r2, [r3, #0]
 8001062:	e043      	b.n	80010ec <display_init+0x144>
case 81: spi_hold=10;init=81;break;
 8001064:	4b3a      	ldr	r3, [pc, #232]	; (8001150 <display_init+0x1a8>)
 8001066:	220a      	movs	r2, #10
 8001068:	801a      	strh	r2, [r3, #0]
 800106a:	4b37      	ldr	r3, [pc, #220]	; (8001148 <display_init+0x1a0>)
 800106c:	2251      	movs	r2, #81	; 0x51
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	e03c      	b.n	80010ec <display_init+0x144>


case 82: spi_hold=384+(init_b>>1);break;  // finish writes
 8001072:	4b36      	ldr	r3, [pc, #216]	; (800114c <display_init+0x1a4>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	085b      	lsrs	r3, r3, #1
 8001078:	b29b      	uxth	r3, r3
 800107a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800107e:	b29a      	uxth	r2, r3
 8001080:	4b33      	ldr	r3, [pc, #204]	; (8001150 <display_init+0x1a8>)
 8001082:	801a      	strh	r2, [r3, #0]
 8001084:	e032      	b.n	80010ec <display_init+0x144>
case 83: spi_hold=spell[init_b&62];break;
 8001086:	4b31      	ldr	r3, [pc, #196]	; (800114c <display_init+0x1a4>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800108e:	4a31      	ldr	r2, [pc, #196]	; (8001154 <display_init+0x1ac>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	b29a      	uxth	r2, r3
 8001094:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <display_init+0x1a8>)
 8001096:	801a      	strh	r2, [r3, #0]
 8001098:	e028      	b.n	80010ec <display_init+0x144>
case 84 : spi_hold=spell[(init_b&62)+1];init_b=cursor_menu[2]&63;displayBuffer ();init=76; break; //update cursor and displaybuffer
 800109a:	4b2c      	ldr	r3, [pc, #176]	; (800114c <display_init+0x1a4>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80010a2:	3301      	adds	r3, #1
 80010a4:	4a2b      	ldr	r2, [pc, #172]	; (8001154 <display_init+0x1ac>)
 80010a6:	5cd3      	ldrb	r3, [r2, r3]
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	4b29      	ldr	r3, [pc, #164]	; (8001150 <display_init+0x1a8>)
 80010ac:	801a      	strh	r2, [r3, #0]
 80010ae:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <display_init+0x1b0>)
 80010b0:	889b      	ldrh	r3, [r3, #4]
 80010b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4b24      	ldr	r3, [pc, #144]	; (800114c <display_init+0x1a4>)
 80010ba:	801a      	strh	r2, [r3, #0]
 80010bc:	f000 f948 	bl	8001350 <displayBuffer>
 80010c0:	4b21      	ldr	r3, [pc, #132]	; (8001148 <display_init+0x1a0>)
 80010c2:	224c      	movs	r2, #76	; 0x4c
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e011      	b.n	80010ec <display_init+0x144>
default : init_b=init-6;displayBuffer ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <display_init+0x1a0>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	3b06      	subs	r3, #6
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	4b1e      	ldr	r3, [pc, #120]	; (800114c <display_init+0x1a4>)
 80010d4:	801a      	strh	r2, [r3, #0]
 80010d6:	f000 f93b 	bl	8001350 <displayBuffer>
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <display_init+0x1a4>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <display_init+0x1ac>)
 80010e2:	5c9b      	ldrb	r3, [r3, r2]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <display_init+0x1a8>)
 80010e8:	801a      	strh	r2, [r3, #0]
 80010ea:	bf00      	nop
}


if (init<6)	{HAL_Delay(30);spi_hold=disp[init] ;  init_b=cursor_menu[2]; } //delay needs to go
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <display_init+0x1a0>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	d80f      	bhi.n	8001114 <display_init+0x16c>
 80010f4:	201e      	movs	r0, #30
 80010f6:	f002 fe3b 	bl	8003d70 <HAL_Delay>
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <display_init+0x1a0>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	3328      	adds	r3, #40	; 0x28
 8001102:	443b      	add	r3, r7
 8001104:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <display_init+0x1a8>)
 800110a:	801a      	strh	r2, [r3, #0]
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <display_init+0x1b0>)
 800110e:	889a      	ldrh	r2, [r3, #4]
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <display_init+0x1a4>)
 8001112:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <display_init+0x1a0>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	3301      	adds	r3, #1
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <display_init+0x1a0>)
 800111e:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <display_init+0x19c>)
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	f7ff fda7 	bl	8000c78 <SPI_command>
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <display_init+0x19c>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <display_init+0x1b4>)
 8001132:	2200      	movs	r2, #0
 8001134:	801a      	strh	r2, [r3, #0]
		  //if ((bsrr_counter==49) && (spi_send==2)) {bsrr_counter=0; spi_send=0;}
		  if (bsrr_counter==49)  {bsrr_counter=0; spi_send=0;}
		 }
*/

}
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	; 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bdb0      	pop	{r4, r5, r7, pc}
 800113e:	bf00      	nop
 8001140:	08009d10 	.word	0x08009d10
 8001144:	20001d00 	.word	0x20001d00
 8001148:	20001d01 	.word	0x20001d01
 800114c:	20001d02 	.word	0x20001d02
 8001150:	20001cfe 	.word	0x20001cfe
 8001154:	2000010c 	.word	0x2000010c
 8001158:	20001d04 	.word	0x20001d04
 800115c:	20001cfa 	.word	0x20001cfa

08001160 <display_update>:



}

void display_update(void){				//spi display updater code , all gfx , works pretty ok n doesn't need to be running always 18x 128 ,constant scanning
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0

	uint8_t spi_store[5];

switch (gfx_skip) { // 1-17  one row
 8001166:	4b5d      	ldr	r3, [pc, #372]	; (80012dc <display_update+0x17c>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d035      	beq.n	80011da <display_update+0x7a>
 800116e:	2b03      	cmp	r3, #3
 8001170:	dc3d      	bgt.n	80011ee <display_update+0x8e>
 8001172:	2b01      	cmp	r3, #1
 8001174:	d002      	beq.n	800117c <display_update+0x1c>
 8001176:	2b02      	cmp	r3, #2
 8001178:	d020      	beq.n	80011bc <display_update+0x5c>
 800117a:	e038      	b.n	80011ee <display_update+0x8e>


case 1 : {spi_hold=((gfx_counter[0])&31)+384;gfx_counter[4]=(gfx_counter[0]>>5);  gfx_counter[0]=(gfx_counter[0]+1)&63 ;gfx_skip++;break ;}  // count up positions
 800117c:	4b58      	ldr	r3, [pc, #352]	; (80012e0 <display_update+0x180>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	f003 031f 	and.w	r3, r3, #31
 8001184:	b29b      	uxth	r3, r3
 8001186:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800118a:	b29a      	uxth	r2, r3
 800118c:	4b55      	ldr	r3, [pc, #340]	; (80012e4 <display_update+0x184>)
 800118e:	801a      	strh	r2, [r3, #0]
 8001190:	4b53      	ldr	r3, [pc, #332]	; (80012e0 <display_update+0x180>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	095b      	lsrs	r3, r3, #5
 8001196:	b29a      	uxth	r2, r3
 8001198:	4b51      	ldr	r3, [pc, #324]	; (80012e0 <display_update+0x180>)
 800119a:	811a      	strh	r2, [r3, #8]
 800119c:	4b50      	ldr	r3, [pc, #320]	; (80012e0 <display_update+0x180>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	4b4d      	ldr	r3, [pc, #308]	; (80012e0 <display_update+0x180>)
 80011ac:	801a      	strh	r2, [r3, #0]
 80011ae:	4b4b      	ldr	r3, [pc, #300]	; (80012dc <display_update+0x17c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	3301      	adds	r3, #1
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4b49      	ldr	r3, [pc, #292]	; (80012dc <display_update+0x17c>)
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	e028      	b.n	800120e <display_update+0xae>
case 2  : {	spi_hold=384+(gfx_counter[4]*8);gfx_skip++;break ;  }
 80011bc:	4b48      	ldr	r3, [pc, #288]	; (80012e0 <display_update+0x180>)
 80011be:	891b      	ldrh	r3, [r3, #8]
 80011c0:	3330      	adds	r3, #48	; 0x30
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <display_update+0x184>)
 80011ca:	801a      	strh	r2, [r3, #0]
 80011cc:	4b43      	ldr	r3, [pc, #268]	; (80012dc <display_update+0x17c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b41      	ldr	r3, [pc, #260]	; (80012dc <display_update+0x17c>)
 80011d6:	701a      	strb	r2, [r3, #0]
 80011d8:	e019      	b.n	800120e <display_update+0xae>
case 3   : gfx_counter[3]=0; gfx_skip++;break;
 80011da:	4b41      	ldr	r3, [pc, #260]	; (80012e0 <display_update+0x180>)
 80011dc:	2200      	movs	r2, #0
 80011de:	80da      	strh	r2, [r3, #6]
 80011e0:	4b3e      	ldr	r3, [pc, #248]	; (80012dc <display_update+0x17c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <display_update+0x17c>)
 80011ea:	701a      	strb	r2, [r3, #0]
 80011ec:	e00f      	b.n	800120e <display_update+0xae>
//case 18 : gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;break;  //not ideal
default :  gfx_counter[3]=(gfx_counter[3]+1)&15;gfx_skip++;break;
 80011ee:	4b3c      	ldr	r3, [pc, #240]	; (80012e0 <display_update+0x180>)
 80011f0:	88db      	ldrh	r3, [r3, #6]
 80011f2:	3301      	adds	r3, #1
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <display_update+0x180>)
 80011fe:	80da      	strh	r2, [r3, #6]
 8001200:	4b36      	ldr	r3, [pc, #216]	; (80012dc <display_update+0x17c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b34      	ldr	r3, [pc, #208]	; (80012dc <display_update+0x17c>)
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	bf00      	nop

}


if ((gfx_skip==2) || (gfx_skip==3) || (gfx_skip==1)) spi_hold=spi_hold; else spi_hold=gfx_ram[gfx_counter[2]] [gfx_counter[3]] ; // write command or data
 800120e:	4b33      	ldr	r3, [pc, #204]	; (80012dc <display_update+0x17c>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d007      	beq.n	8001226 <display_update+0xc6>
 8001216:	4b31      	ldr	r3, [pc, #196]	; (80012dc <display_update+0x17c>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b03      	cmp	r3, #3
 800121c:	d003      	beq.n	8001226 <display_update+0xc6>
 800121e:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <display_update+0x17c>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d104      	bne.n	8001230 <display_update+0xd0>
 8001226:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <display_update+0x184>)
 8001228:	881a      	ldrh	r2, [r3, #0]
 800122a:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <display_update+0x184>)
 800122c:	801a      	strh	r2, [r3, #0]
 800122e:	e00d      	b.n	800124c <display_update+0xec>
 8001230:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <display_update+0x180>)
 8001232:	889b      	ldrh	r3, [r3, #4]
 8001234:	4618      	mov	r0, r3
 8001236:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <display_update+0x180>)
 8001238:	88db      	ldrh	r3, [r3, #6]
 800123a:	4619      	mov	r1, r3
 800123c:	4a2a      	ldr	r2, [pc, #168]	; (80012e8 <display_update+0x188>)
 800123e:	0103      	lsls	r3, r0, #4
 8001240:	4413      	add	r3, r2
 8001242:	440b      	add	r3, r1
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <display_update+0x184>)
 800124a:	801a      	strh	r2, [r3, #0]

if (gfx_skip==19)  {gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;}   // fixed last doubled char
 800124c:	4b23      	ldr	r3, [pc, #140]	; (80012dc <display_update+0x17c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b13      	cmp	r3, #19
 8001252:	d10e      	bne.n	8001272 <display_update+0x112>
 8001254:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <display_update+0x180>)
 8001256:	889b      	ldrh	r3, [r3, #4]
 8001258:	3301      	adds	r3, #1
 800125a:	b29b      	uxth	r3, r3
 800125c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001260:	b29a      	uxth	r2, r3
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <display_update+0x180>)
 8001264:	809a      	strh	r2, [r3, #4]
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <display_update+0x180>)
 8001268:	2200      	movs	r2, #0
 800126a:	80da      	strh	r2, [r3, #6]
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <display_update+0x17c>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]

		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <display_update+0x184>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	0a1b      	lsrs	r3, r3, #8
 8001278:	b29b      	uxth	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <display_update+0x126>
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <display_update+0x18c>)
 8001280:	22f8      	movs	r2, #248	; 0xf8
 8001282:	701a      	strb	r2, [r3, #0]
 8001284:	e002      	b.n	800128c <display_update+0x12c>
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <display_update+0x18c>)
 8001288:	22fa      	movs	r2, #250	; 0xfa
 800128a:	701a      	strb	r2, [r3, #0]

		spi_store[0]=spi_byte&255;
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <display_update+0x18c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	703b      	strb	r3, [r7, #0]
		spi_store[1]=((spi_hold>>4)<<4)&255;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <display_update+0x184>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	b29b      	uxth	r3, r3
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	b2db      	uxtb	r3, r3
 800129e:	707b      	strb	r3, [r7, #1]
		spi_store[2]=((spi_hold&15)<<4)&255;
 80012a0:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <display_update+0x184>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	70bb      	strb	r3, [r7, #2]

	// send this to spi for now
			HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 100);  // working good ,blocking
 80012aa:	4639      	mov	r1, r7
 80012ac:	2364      	movs	r3, #100	; 0x64
 80012ae:	2203      	movs	r2, #3
 80012b0:	480f      	ldr	r0, [pc, #60]	; (80012f0 <display_update+0x190>)
 80012b2:	f006 f918 	bl	80074e6 <HAL_SPI_Transmit>


disp_end=gfx_skip+gfx_counter[2]+gfx_counter[3];			// vsynch for displaybuffer
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <display_update+0x180>)
 80012b8:	889b      	ldrh	r3, [r3, #4]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <display_update+0x17c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4413      	add	r3, r2
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <display_update+0x180>)
 80012c6:	88db      	ldrh	r3, [r3, #6]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <display_update+0x194>)
 80012d0:	701a      	strb	r2, [r3, #0]


}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200006c0 	.word	0x200006c0
 80012e0:	200025ec 	.word	0x200025ec
 80012e4:	20001cfe 	.word	0x20001cfe
 80012e8:	200021b4 	.word	0x200021b4
 80012ec:	20001cfc 	.word	0x20001cfc
 80012f0:	20002afc 	.word	0x20002afc
 80012f4:	200025fa 	.word	0x200025fa

080012f8 <display_fill>:
void display_fill(void)  {     // full update of gfx memory
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
loop_counter3=1;
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <display_fill+0x48>)
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
for (n=0;n<2048;n++)	{ //fills up gfx ram or not
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <display_fill+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	801a      	strh	r2, [r3, #0]
 8001308:	e011      	b.n	800132e <display_fill+0x36>

enc2_dir=(n>>4)+menu_page[1]; 												// 0-128         +      0,127,255,
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <display_fill+0x4c>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	b29a      	uxth	r2, r3
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <display_fill+0x50>)
 8001314:	885b      	ldrh	r3, [r3, #2]
 8001316:	4413      	add	r3, r2
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <display_fill+0x54>)
 800131c:	801a      	strh	r2, [r3, #0]

displayBuffer();
 800131e:	f000 f817 	bl	8001350 <displayBuffer>
for (n=0;n<2048;n++)	{ //fills up gfx ram or not
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <display_fill+0x4c>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	3301      	adds	r3, #1
 8001328:	b29a      	uxth	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <display_fill+0x4c>)
 800132c:	801a      	strh	r2, [r3, #0]
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <display_fill+0x4c>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001336:	d3e8      	bcc.n	800130a <display_fill+0x12>
}
//enc2_dir=menu_page[1];  // end clean
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200025fb 	.word	0x200025fb
 8001344:	20000c1a 	.word	0x20000c1a
 8001348:	20001d14 	.word	0x20001d14
 800134c:	20001cf2 	.word	0x20001cf2

08001350 <displayBuffer>:



void displayBuffer (void){        //  in a constant state of flux
 8001350:	b4b0      	push	{r4, r5, r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0

	if (disp_stepper==0) init_b=enc2_dir; else init_b=111+disp_stepper;  // fetch values for last line or cursor
 8001356:	4b39      	ldr	r3, [pc, #228]	; (800143c <displayBuffer+0xec>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d104      	bne.n	8001368 <displayBuffer+0x18>
 800135e:	4b38      	ldr	r3, [pc, #224]	; (8001440 <displayBuffer+0xf0>)
 8001360:	881a      	ldrh	r2, [r3, #0]
 8001362:	4b38      	ldr	r3, [pc, #224]	; (8001444 <displayBuffer+0xf4>)
 8001364:	801a      	strh	r2, [r3, #0]
 8001366:	e006      	b.n	8001376 <displayBuffer+0x26>
 8001368:	4b34      	ldr	r3, [pc, #208]	; (800143c <displayBuffer+0xec>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	b29b      	uxth	r3, r3
 800136e:	336f      	adds	r3, #111	; 0x6f
 8001370:	b29a      	uxth	r2, r3
 8001372:	4b34      	ldr	r3, [pc, #208]	; (8001444 <displayBuffer+0xf4>)
 8001374:	801a      	strh	r2, [r3, #0]

	uint8_t d_count;
uint16_t init_x=((init_b>>4)<<3);    // normal x8 , try other 64 x16
 8001376:	4b33      	ldr	r3, [pc, #204]	; (8001444 <displayBuffer+0xf4>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	b29b      	uxth	r3, r3
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	83bb      	strh	r3, [r7, #28]
uint8_t init_x2=init_x&63;  // 0-64  character address in gfx
 8001382:	8bbb      	ldrh	r3, [r7, #28]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800138a:	76fb      	strb	r3, [r7, #27]
uint8_t init_y=init_b&15;
 800138c:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <displayBuffer+0xf4>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	76bb      	strb	r3, [r7, #26]
uint16_t store_x;
uint8_t lfotarget_menu[20]={0,40,16,8,40,40,48,56,64,72,0,0,0,0,0,0,0,0,0,0};  // keep lfo target list here for now *8
 8001398:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <displayBuffer+0xf8>)
 800139a:	1d3c      	adds	r4, r7, #4
 800139c:	461d      	mov	r5, r3
 800139e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a2:	682b      	ldr	r3, [r5, #0]
 80013a4:	6023      	str	r3, [r4, #0]
// just to point the lfo number



//if (enc2_dir<128){
	if (disp_stepper==0) { store_c= disp_lut [init_b>>4]  [init_y] ; feedback_pointer=((enc2_dir>>4)<<3)&127; feedback_line[10]=((enc2_dir&15)>>1)+48;  // pointer and data , runs at every character drawn at cursor
 80013a6:	4b25      	ldr	r3, [pc, #148]	; (800143c <displayBuffer+0xec>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d17a      	bne.n	80014a4 <displayBuffer+0x154>
 80013ae:	4b25      	ldr	r3, [pc, #148]	; (8001444 <displayBuffer+0xf4>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	091b      	lsrs	r3, r3, #4
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	7ebb      	ldrb	r3, [r7, #26]
 80013ba:	4924      	ldr	r1, [pc, #144]	; (800144c <displayBuffer+0xfc>)
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	4413      	add	r3, r2
 80013c0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80013c4:	4b22      	ldr	r3, [pc, #136]	; (8001450 <displayBuffer+0x100>)
 80013c6:	801a      	strh	r2, [r3, #0]
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <displayBuffer+0xf0>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013d8:	b29a      	uxth	r2, r3
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <displayBuffer+0x104>)
 80013dc:	801a      	strh	r2, [r3, #0]
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <displayBuffer+0xf0>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	105b      	asrs	r3, r3, #1
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	3330      	adds	r3, #48	; 0x30
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <displayBuffer+0x108>)
 80013f2:	829a      	strh	r2, [r3, #20]


	menulength = sizeof(menu_items) / sizeof(menu_items[feedback_pointer]);  // get length of data on location
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <displayBuffer+0x10c>)
 80013f6:	2235      	movs	r2, #53	; 0x35
 80013f8:	701a      	strb	r2, [r3, #0]

	for (i = 0; i < 56; i++)
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <displayBuffer+0x110>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	801a      	strh	r2, [r3, #0]
 8001400:	e014      	b.n	800142c <displayBuffer+0xdc>
		{ if (menu_loc[i]==store_c){menu_locA=i;break;}    // gets disp_lut number that points in menu_items
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <displayBuffer+0x110>)
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <displayBuffer+0x114>)
 800140a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <displayBuffer+0x100>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d104      	bne.n	8001420 <displayBuffer+0xd0>
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <displayBuffer+0x110>)
 8001418:	881a      	ldrh	r2, [r3, #0]
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <displayBuffer+0x118>)
 800141c:	801a      	strh	r2, [r3, #0]
 800141e:	e009      	b.n	8001434 <displayBuffer+0xe4>
	for (i = 0; i < 56; i++)
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <displayBuffer+0x110>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	3301      	adds	r3, #1
 8001426:	b29a      	uxth	r2, r3
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <displayBuffer+0x110>)
 800142a:	801a      	strh	r2, [r3, #0]
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <displayBuffer+0x110>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	2b37      	cmp	r3, #55	; 0x37
 8001432:	d9e6      	bls.n	8001402 <displayBuffer+0xb2>

		}

	for (i = 0; i < menulength; i++)
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <displayBuffer+0x110>)
 8001436:	2200      	movs	r2, #0
 8001438:	801a      	strh	r2, [r3, #0]
 800143a:	e02c      	b.n	8001496 <displayBuffer+0x146>
 800143c:	200006e5 	.word	0x200006e5
 8001440:	20001cf2 	.word	0x20001cf2
 8001444:	20001d02 	.word	0x20001d02
 8001448:	08009d34 	.word	0x08009d34
 800144c:	08009dfc 	.word	0x08009dfc
 8001450:	20000c18 	.word	0x20000c18
 8001454:	200008dc 	.word	0x200008dc
 8001458:	20000000 	.word	0x20000000
 800145c:	200008e0 	.word	0x200008e0
 8001460:	20000c3c 	.word	0x20000c3c
 8001464:	0800a1fc 	.word	0x0800a1fc
 8001468:	200008de 	.word	0x200008de
	{ menulist_hold[i+1]=menu_items[menu_locA] [i];
 800146c:	4b84      	ldr	r3, [pc, #528]	; (8001680 <displayBuffer+0x330>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b84      	ldr	r3, [pc, #528]	; (8001684 <displayBuffer+0x334>)
 8001474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001478:	4a83      	ldr	r2, [pc, #524]	; (8001688 <displayBuffer+0x338>)
 800147a:	8812      	ldrh	r2, [r2, #0]
 800147c:	441a      	add	r2, r3
 800147e:	4b82      	ldr	r3, [pc, #520]	; (8001688 <displayBuffer+0x338>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	3301      	adds	r3, #1
 8001484:	7811      	ldrb	r1, [r2, #0]
 8001486:	4a81      	ldr	r2, [pc, #516]	; (800168c <displayBuffer+0x33c>)
 8001488:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < menulength; i++)
 800148a:	4b7f      	ldr	r3, [pc, #508]	; (8001688 <displayBuffer+0x338>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	3301      	adds	r3, #1
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b7d      	ldr	r3, [pc, #500]	; (8001688 <displayBuffer+0x338>)
 8001494:	801a      	strh	r2, [r3, #0]
 8001496:	4b7e      	ldr	r3, [pc, #504]	; (8001690 <displayBuffer+0x340>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b29a      	uxth	r2, r3
 800149c:	4b7a      	ldr	r3, [pc, #488]	; (8001688 <displayBuffer+0x338>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d8e3      	bhi.n	800146c <displayBuffer+0x11c>

	}   // grab item , this works but slower

	}

	if  ((disp_stepper<11) && (disp_stepper))   {      // 0-9 chars of line 8 , overhead is ok
 80014a4:	4b7b      	ldr	r3, [pc, #492]	; (8001694 <displayBuffer+0x344>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b0a      	cmp	r3, #10
 80014aa:	d817      	bhi.n	80014dc <displayBuffer+0x18c>
 80014ac:	4b79      	ldr	r3, [pc, #484]	; (8001694 <displayBuffer+0x344>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d013      	beq.n	80014dc <displayBuffer+0x18c>

//{	feedback_line[disp_stepper]=menuList[disp_stepper+feedback_pointer];  // feedback data info standard , per character 0-16

		feedback_line[disp_stepper]=menulist_hold[disp_stepper];  // feedback data modified 0-16
 80014b4:	4b77      	ldr	r3, [pc, #476]	; (8001694 <displayBuffer+0x344>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b74      	ldr	r3, [pc, #464]	; (800168c <displayBuffer+0x33c>)
 80014bc:	5c99      	ldrb	r1, [r3, r2]
 80014be:	4b75      	ldr	r3, [pc, #468]	; (8001694 <displayBuffer+0x344>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	b289      	uxth	r1, r1
 80014c6:	4b74      	ldr	r3, [pc, #464]	; (8001698 <displayBuffer+0x348>)
 80014c8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

store_c=feedback_line[disp_stepper];//gets potvalues pointer from menus or feedback line , per character
 80014cc:	4b71      	ldr	r3, [pc, #452]	; (8001694 <displayBuffer+0x344>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b71      	ldr	r3, [pc, #452]	; (8001698 <displayBuffer+0x348>)
 80014d4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80014d8:	4b70      	ldr	r3, [pc, #448]	; (800169c <displayBuffer+0x34c>)
 80014da:	801a      	strh	r2, [r3, #0]
	}

if (disp_stepper>10) store_c=feedback_line[disp_stepper];  /// just the lcd out  values at end of line 8
 80014dc:	4b6d      	ldr	r3, [pc, #436]	; (8001694 <displayBuffer+0x344>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b0a      	cmp	r3, #10
 80014e2:	d907      	bls.n	80014f4 <displayBuffer+0x1a4>
 80014e4:	4b6b      	ldr	r3, [pc, #428]	; (8001694 <displayBuffer+0x344>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b6b      	ldr	r3, [pc, #428]	; (8001698 <displayBuffer+0x348>)
 80014ec:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80014f0:	4b6a      	ldr	r3, [pc, #424]	; (800169c <displayBuffer+0x34c>)
 80014f2:	801a      	strh	r2, [r3, #0]


	// all this can be simplified
	 if (store_c==64) store_c=47;  //EMPTY SPACE
 80014f4:	4b69      	ldr	r3, [pc, #420]	; (800169c <displayBuffer+0x34c>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	2b40      	cmp	r3, #64	; 0x40
 80014fa:	d102      	bne.n	8001502 <displayBuffer+0x1b2>
 80014fc:	4b67      	ldr	r3, [pc, #412]	; (800169c <displayBuffer+0x34c>)
 80014fe:	222f      	movs	r2, #47	; 0x2f
 8001500:	801a      	strh	r2, [r3, #0]
	if ((store_c>127)&& (store_c<255))  {lcd_out3=potSource[store_c-128] ;     store_c= potValues[store_c&127]+48;															}		// NORMAL POTVALUES 0-127
 8001502:	4b66      	ldr	r3, [pc, #408]	; (800169c <displayBuffer+0x34c>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	2b7f      	cmp	r3, #127	; 0x7f
 8001508:	d916      	bls.n	8001538 <displayBuffer+0x1e8>
 800150a:	4b64      	ldr	r3, [pc, #400]	; (800169c <displayBuffer+0x34c>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	2bfe      	cmp	r3, #254	; 0xfe
 8001510:	d812      	bhi.n	8001538 <displayBuffer+0x1e8>
 8001512:	4b62      	ldr	r3, [pc, #392]	; (800169c <displayBuffer+0x34c>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	3b80      	subs	r3, #128	; 0x80
 8001518:	4a61      	ldr	r2, [pc, #388]	; (80016a0 <displayBuffer+0x350>)
 800151a:	5cd3      	ldrb	r3, [r2, r3]
 800151c:	b29a      	uxth	r2, r3
 800151e:	4b61      	ldr	r3, [pc, #388]	; (80016a4 <displayBuffer+0x354>)
 8001520:	801a      	strh	r2, [r3, #0]
 8001522:	4b5e      	ldr	r3, [pc, #376]	; (800169c <displayBuffer+0x34c>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800152a:	4a5f      	ldr	r2, [pc, #380]	; (80016a8 <displayBuffer+0x358>)
 800152c:	5cd3      	ldrb	r3, [r2, r3]
 800152e:	b29b      	uxth	r3, r3
 8001530:	3330      	adds	r3, #48	; 0x30
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b59      	ldr	r3, [pc, #356]	; (800169c <displayBuffer+0x34c>)
 8001536:	801a      	strh	r2, [r3, #0]
	if ((store_c>254)	&& (store_c<384)) 											{lcd_out3=potSource[store_c-128] ;store_c= potValues[store_c-128]+48;}  // POTVALUES 128+
 8001538:	4b58      	ldr	r3, [pc, #352]	; (800169c <displayBuffer+0x34c>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	2bfe      	cmp	r3, #254	; 0xfe
 800153e:	d916      	bls.n	800156e <displayBuffer+0x21e>
 8001540:	4b56      	ldr	r3, [pc, #344]	; (800169c <displayBuffer+0x34c>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001548:	d211      	bcs.n	800156e <displayBuffer+0x21e>
 800154a:	4b54      	ldr	r3, [pc, #336]	; (800169c <displayBuffer+0x34c>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	3b80      	subs	r3, #128	; 0x80
 8001550:	4a53      	ldr	r2, [pc, #332]	; (80016a0 <displayBuffer+0x350>)
 8001552:	5cd3      	ldrb	r3, [r2, r3]
 8001554:	b29a      	uxth	r2, r3
 8001556:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <displayBuffer+0x354>)
 8001558:	801a      	strh	r2, [r3, #0]
 800155a:	4b50      	ldr	r3, [pc, #320]	; (800169c <displayBuffer+0x34c>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	3b80      	subs	r3, #128	; 0x80
 8001560:	4a51      	ldr	r2, [pc, #324]	; (80016a8 <displayBuffer+0x358>)
 8001562:	5cd3      	ldrb	r3, [r2, r3]
 8001564:	b29b      	uxth	r3, r3
 8001566:	3330      	adds	r3, #48	; 0x30
 8001568:	b29a      	uxth	r2, r3
 800156a:	4b4c      	ldr	r3, [pc, #304]	; (800169c <displayBuffer+0x34c>)
 800156c:	801a      	strh	r2, [r3, #0]
//	if ((store_c>127)	&& (store_c<384)) 	{store_c= potValues[store_c&127]+48;}		// NORMAL POTVALUES
	if (store_c>511)		{store_c=store_c&127;			store_c= menuList2		[     (lfotarget_menu[   ((store_c>>3))  ])	+(store_c&7)]						; } // VARIABLE MENU ITEMS CHAR LUT
 800156e:	4b4b      	ldr	r3, [pc, #300]	; (800169c <displayBuffer+0x34c>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001576:	d319      	bcc.n	80015ac <displayBuffer+0x25c>
 8001578:	4b48      	ldr	r3, [pc, #288]	; (800169c <displayBuffer+0x34c>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001580:	b29a      	uxth	r2, r3
 8001582:	4b46      	ldr	r3, [pc, #280]	; (800169c <displayBuffer+0x34c>)
 8001584:	801a      	strh	r2, [r3, #0]
 8001586:	4b45      	ldr	r3, [pc, #276]	; (800169c <displayBuffer+0x34c>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	08db      	lsrs	r3, r3, #3
 800158c:	b29b      	uxth	r3, r3
 800158e:	3320      	adds	r3, #32
 8001590:	443b      	add	r3, r7
 8001592:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001596:	461a      	mov	r2, r3
 8001598:	4b40      	ldr	r3, [pc, #256]	; (800169c <displayBuffer+0x34c>)
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	4413      	add	r3, r2
 80015a2:	4a42      	ldr	r2, [pc, #264]	; (80016ac <displayBuffer+0x35c>)
 80015a4:	5cd3      	ldrb	r3, [r2, r3]
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	4b3c      	ldr	r3, [pc, #240]	; (800169c <displayBuffer+0x34c>)
 80015aa:	801a      	strh	r2, [r3, #0]

	store_c=store_c-47; store_c = store_c &127;	  // spell no longer ?, store_c changes		STARTS FROM 0
 80015ac:	4b3b      	ldr	r3, [pc, #236]	; (800169c <displayBuffer+0x34c>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	3b2f      	subs	r3, #47	; 0x2f
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4b39      	ldr	r3, [pc, #228]	; (800169c <displayBuffer+0x34c>)
 80015b6:	801a      	strh	r2, [r3, #0]
 80015b8:	4b38      	ldr	r3, [pc, #224]	; (800169c <displayBuffer+0x34c>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	4b36      	ldr	r3, [pc, #216]	; (800169c <displayBuffer+0x34c>)
 80015c4:	801a      	strh	r2, [r3, #0]

store_x=(store_c*8);  // i line characters , might shrink it and use extr for other  visuals
 80015c6:	4b35      	ldr	r3, [pc, #212]	; (800169c <displayBuffer+0x34c>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	833b      	strh	r3, [r7, #24]


if (( !loop_counter3) && (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 80015ce:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <displayBuffer+0x360>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d11f      	bne.n	8001616 <displayBuffer+0x2c6>
 80015d6:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <displayBuffer+0x344>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d11b      	bne.n	8001616 <displayBuffer+0x2c6>
	for (d_count=0;d_count<7;d_count++){
 80015de:	2300      	movs	r3, #0
 80015e0:	77fb      	strb	r3, [r7, #31]
 80015e2:	e014      	b.n	800160e <displayBuffer+0x2be>
						gfx_ram[d_count+init_x2] [init_y] = gfx_char[d_count+store_x]^127; //write character to ram ,should be elsewhere , blank is correct
 80015e4:	7ffa      	ldrb	r2, [r7, #31]
 80015e6:	8b3b      	ldrh	r3, [r7, #24]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a32      	ldr	r2, [pc, #200]	; (80016b4 <displayBuffer+0x364>)
 80015ec:	5cd1      	ldrb	r1, [r2, r3]
 80015ee:	7ffa      	ldrb	r2, [r7, #31]
 80015f0:	7efb      	ldrb	r3, [r7, #27]
 80015f2:	441a      	add	r2, r3
 80015f4:	7ebb      	ldrb	r3, [r7, #26]
 80015f6:	f081 017f 	eor.w	r1, r1, #127	; 0x7f
 80015fa:	b2c8      	uxtb	r0, r1
 80015fc:	492e      	ldr	r1, [pc, #184]	; (80016b8 <displayBuffer+0x368>)
 80015fe:	0112      	lsls	r2, r2, #4
 8001600:	440a      	add	r2, r1
 8001602:	4413      	add	r3, r2
 8001604:	4602      	mov	r2, r0
 8001606:	701a      	strb	r2, [r3, #0]
	for (d_count=0;d_count<7;d_count++){
 8001608:	7ffb      	ldrb	r3, [r7, #31]
 800160a:	3301      	adds	r3, #1
 800160c:	77fb      	strb	r3, [r7, #31]
 800160e:	7ffb      	ldrb	r3, [r7, #31]
 8001610:	2b06      	cmp	r3, #6
 8001612:	d9e7      	bls.n	80015e4 <displayBuffer+0x294>
if (( !loop_counter3) && (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 8001614:	e017      	b.n	8001646 <displayBuffer+0x2f6>
	}
else for (d_count=0;d_count<7;d_count++){
 8001616:	2300      	movs	r3, #0
 8001618:	77fb      	strb	r3, [r7, #31]
 800161a:	e011      	b.n	8001640 <displayBuffer+0x2f0>
	gfx_ram[d_count+init_x2] [init_y] = gfx_char[d_count+store_x]; //write character to ram ,should be elsewhere , seems affected by later stufff
 800161c:	7ffa      	ldrb	r2, [r7, #31]
 800161e:	8b3b      	ldrh	r3, [r7, #24]
 8001620:	18d1      	adds	r1, r2, r3
 8001622:	7ffa      	ldrb	r2, [r7, #31]
 8001624:	7efb      	ldrb	r3, [r7, #27]
 8001626:	441a      	add	r2, r3
 8001628:	7ebb      	ldrb	r3, [r7, #26]
 800162a:	4822      	ldr	r0, [pc, #136]	; (80016b4 <displayBuffer+0x364>)
 800162c:	5c40      	ldrb	r0, [r0, r1]
 800162e:	4922      	ldr	r1, [pc, #136]	; (80016b8 <displayBuffer+0x368>)
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	440a      	add	r2, r1
 8001634:	4413      	add	r3, r2
 8001636:	4602      	mov	r2, r0
 8001638:	701a      	strb	r2, [r3, #0]
else for (d_count=0;d_count<7;d_count++){
 800163a:	7ffb      	ldrb	r3, [r7, #31]
 800163c:	3301      	adds	r3, #1
 800163e:	77fb      	strb	r3, [r7, #31]
 8001640:	7ffb      	ldrb	r3, [r7, #31]
 8001642:	2b06      	cmp	r3, #6
 8001644:	d9ea      	bls.n	800161c <displayBuffer+0x2cc>





gfx_ram[7+init_x2] [init_y] = 0; // last line is blank between rows or whatever
 8001646:	7efb      	ldrb	r3, [r7, #27]
 8001648:	1dda      	adds	r2, r3, #7
 800164a:	7ebb      	ldrb	r3, [r7, #26]
 800164c:	491a      	ldr	r1, [pc, #104]	; (80016b8 <displayBuffer+0x368>)
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	440a      	add	r2, r1
 8001652:	4413      	add	r3, r2
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]



if (disp_stepper==15) disp_stepper=0; else disp_stepper++;				// count to 16
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <displayBuffer+0x344>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b0f      	cmp	r3, #15
 800165e:	d103      	bne.n	8001668 <displayBuffer+0x318>
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <displayBuffer+0x344>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]

}
 8001666:	e005      	b.n	8001674 <displayBuffer+0x324>
if (disp_stepper==15) disp_stepper=0; else disp_stepper++;				// count to 16
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <displayBuffer+0x344>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	b2da      	uxtb	r2, r3
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <displayBuffer+0x344>)
 8001672:	701a      	strb	r2, [r3, #0]
}
 8001674:	bf00      	nop
 8001676:	3724      	adds	r7, #36	; 0x24
 8001678:	46bd      	mov	sp, r7
 800167a:	bcb0      	pop	{r4, r5, r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	200008de 	.word	0x200008de
 8001684:	20000024 	.word	0x20000024
 8001688:	20000c3c 	.word	0x20000c3c
 800168c:	200000f8 	.word	0x200000f8
 8001690:	200008e0 	.word	0x200008e0
 8001694:	200006e5 	.word	0x200006e5
 8001698:	20000000 	.word	0x20000000
 800169c:	20000c18 	.word	0x20000c18
 80016a0:	20000a64 	.word	0x20000a64
 80016a4:	200025f8 	.word	0x200025f8
 80016a8:	200008e4 	.word	0x200008e4
 80016ac:	0800a268 	.word	0x0800a268
 80016b0:	200025fb 	.word	0x200025fb
 80016b4:	200002c0 	.word	0x200002c0
 80016b8:	200021b4 	.word	0x200021b4
 80016bc:	00000000 	.word	0x00000000

080016c0 <sampling>:


void sampling(void){						// 18 ms of data
 80016c0:	b5b0      	push	{r4, r5, r7, lr}
 80016c2:	f5ad 5d85 	sub.w	sp, sp, #4256	; 0x10a0
 80016c6:	af00      	add	r7, sp, #0
uint8_t mask_i;
uint8_t mask_k;
uint8_t adsr_mult[5];
//adc_read();
//uint16_t isr_tempo=isrMask; // get tempo value
sample_pointB=sample_pointD;
 80016c8:	4ba3      	ldr	r3, [pc, #652]	; (8001958 <sampling+0x298>)
 80016ca:	881a      	ldrh	r2, [r3, #0]
 80016cc:	4ba3      	ldr	r3, [pc, #652]	; (800195c <sampling+0x29c>)
 80016ce:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80016d6:	f102 021c 	add.w	r2, r2, #28
 80016da:	8013      	strh	r3, [r2, #0]
static unsigned short tempo_end=0;   // last count before note start
uint16_t i_total;
uint16_t tempo_mod=tempo_lut[potSource[109]];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 80016dc:	4ba0      	ldr	r3, [pc, #640]	; (8001960 <sampling+0x2a0>)
 80016de:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b9f      	ldr	r3, [pc, #636]	; (8001964 <sampling+0x2a4>)
 80016e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80016ea:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80016ee:	f102 020e 	add.w	r2, r2, #14
 80016f2:	8013      	strh	r3, [r2, #0]

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s
float freq_temp;	// (1/(bpm/60)) /0.00045712=tempo count ie 1093.8 for 120bpm
float freq2_temp;
float freq_adder;
float tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 80016f4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80016f8:	f103 030e 	add.w	r3, r3, #14
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	da00      	bge.n	8001704 <sampling+0x44>
 8001702:	331f      	adds	r3, #31
 8001704:	115b      	asrs	r3, r3, #5
 8001706:	461a      	mov	r2, r3
 8001708:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800170c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001718:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800171c:	f103 0308 	add.w	r3, r3, #8
 8001720:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 8001724:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001728:	f103 0308 	add.w	r3, r3, #8
 800172c:	ed93 7a00 	vldr	s14, [r3]
 8001730:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8001968 <sampling+0x2a8>
 8001734:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001738:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800173c:	f103 0308 	add.w	r3, r3, #8
 8001740:	edc3 7a00 	vstr	s15, [r3]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 8001744:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001748:	f103 0304 	add.w	r3, r3, #4
 800174c:	2244      	movs	r2, #68	; 0x44
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f007 fa01 	bl	8008b58 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 8001756:	4b85      	ldr	r3, [pc, #532]	; (800196c <sampling+0x2ac>)
 8001758:	2200      	movs	r2, #0
 800175a:	801a      	strh	r2, [r3, #0]
 800175c:	e00e      	b.n	800177c <sampling+0xbc>
 800175e:	4b83      	ldr	r3, [pc, #524]	; (800196c <sampling+0x2ac>)
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8001768:	443b      	add	r3, r7
 800176a:	2200      	movs	r2, #0
 800176c:	f843 2c7c 	str.w	r2, [r3, #-124]
 8001770:	4b7e      	ldr	r3, [pc, #504]	; (800196c <sampling+0x2ac>)
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	b29a      	uxth	r2, r3
 8001778:	4b7c      	ldr	r3, [pc, #496]	; (800196c <sampling+0x2ac>)
 800177a:	801a      	strh	r2, [r3, #0]
 800177c:	4b7b      	ldr	r3, [pc, #492]	; (800196c <sampling+0x2ac>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d9ec      	bls.n	800175e <sampling+0x9e>

//lcd_out3=menu_page[1]; // still goes to 15

//lcd_out3=adc_values[0]+adc_values[1]+adc_values[2]; // 3 digit read out , works ok,, [2] works but thats it
//lcd_out3=lcd_out3+180;
potSource[150]=(lcd_out3/100)*16;  // still works
 8001784:	4b7a      	ldr	r3, [pc, #488]	; (8001970 <sampling+0x2b0>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	4a7a      	ldr	r2, [pc, #488]	; (8001974 <sampling+0x2b4>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	b29b      	uxth	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b71      	ldr	r3, [pc, #452]	; (8001960 <sampling+0x2a0>)
 800179a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
potSource[151]=((lcd_out3 %100)/10)*16;		 // 0-160 to 0-10
 800179e:	4b74      	ldr	r3, [pc, #464]	; (8001970 <sampling+0x2b0>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	4a74      	ldr	r2, [pc, #464]	; (8001974 <sampling+0x2b4>)
 80017a4:	fba2 1203 	umull	r1, r2, r2, r3
 80017a8:	0952      	lsrs	r2, r2, #5
 80017aa:	2164      	movs	r1, #100	; 0x64
 80017ac:	fb01 f202 	mul.w	r2, r1, r2
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	4a70      	ldr	r2, [pc, #448]	; (8001978 <sampling+0x2b8>)
 80017b6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ba:	08db      	lsrs	r3, r3, #3
 80017bc:	b29b      	uxth	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	4b66      	ldr	r3, [pc, #408]	; (8001960 <sampling+0x2a0>)
 80017c6:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
potSource[152]=(lcd_out3%10)*16;
 80017ca:	4b69      	ldr	r3, [pc, #420]	; (8001970 <sampling+0x2b0>)
 80017cc:	881a      	ldrh	r2, [r3, #0]
 80017ce:	4b6a      	ldr	r3, [pc, #424]	; (8001978 <sampling+0x2b8>)
 80017d0:	fba3 1302 	umull	r1, r3, r3, r2
 80017d4:	08d9      	lsrs	r1, r3, #3
 80017d6:	460b      	mov	r3, r1
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b5d      	ldr	r3, [pc, #372]	; (8001960 <sampling+0x2a0>)
 80017ea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98


unsigned short  sine_zero;  // zero cross
note_holdA=0;
 80017ee:	4b63      	ldr	r3, [pc, #396]	; (800197c <sampling+0x2bc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
//printf ("crap \n");
//printf("%d|",adc_values[0] );printf("%d|",adc_values[1] );printf("%d|",adc_values[2] );printf("%d|\n",adc_values[3] );
uint8_t note_patterns[8]={1,4,2,2,1,4,2,1,4,2,1,4,4};   // creating beats
 80017f4:	4a62      	ldr	r2, [pc, #392]	; (8001980 <sampling+0x2c0>)
 80017f6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80017fa:	f103 031c 	add.w	r3, r3, #28
 80017fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001802:	e883 0003 	stmia.w	r3, {r0, r1}
uint8_t note_lenght=5-note_patterns[seq_pos&7] ; // note length modifier , higher faster
 8001806:	4b5f      	ldr	r3, [pc, #380]	; (8001984 <sampling+0x2c4>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8001812:	443b      	add	r3, r7
 8001814:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8001818:	f1c3 0305 	rsb	r3, r3, #5
 800181c:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001820:	f102 0207 	add.w	r2, r2, #7
 8001824:	7013      	strb	r3, [r2, #0]
//tempo_mod=tempo_mod-63+(lfo_out[1]>>7);
//if (tempo_mod<450) tempo_mod=((tempo_mod-200)>>1) +200; // more res lower
uint8_t note_plain;
int8_t ring_mod=0;
 8001826:	2300      	movs	r3, #0
 8001828:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800182c:	f102 0206 	add.w	r2, r2, #6
 8001830:	7013      	strb	r3, [r2, #0]
//sample_Accu2=0;
//printf (adc_values[0]," ",adc_values[1]," ",adc_values[2]," ","crap \n");
// some good phasin and delays here
uint8_t cross_fade[2];
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 8001832:	4b55      	ldr	r3, [pc, #340]	; (8001988 <sampling+0x2c8>)
 8001834:	f507 5480 	add.w	r4, r7, #4096	; 0x1000
 8001838:	f104 0404 	add.w	r4, r4, #4
 800183c:	461d      	mov	r5, r3
 800183e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001842:	682b      	ldr	r3, [r5, #0]
 8001844:	7023      	strb	r3, [r4, #0]

if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader
 8001846:	4b51      	ldr	r3, [pc, #324]	; (800198c <sampling+0x2cc>)
 8001848:	889b      	ldrh	r3, [r3, #4]
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2b00      	cmp	r3, #0
 8001850:	d017      	beq.n	8001882 <sampling+0x1c2>
 8001852:	4b4e      	ldr	r3, [pc, #312]	; (800198c <sampling+0x2cc>)
 8001854:	889b      	ldrh	r3, [r3, #4]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800185e:	443b      	add	r3, r7
 8001860:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 8001864:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001868:	b2db      	uxtb	r3, r3
 800186a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800186e:	f102 0219 	add.w	r2, r2, #25
 8001872:	7013      	strb	r3, [r2, #0]
 8001874:	237f      	movs	r3, #127	; 0x7f
 8001876:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800187a:	f102 021a 	add.w	r2, r2, #26
 800187e:	7013      	strb	r3, [r2, #0]
 8001880:	e013      	b.n	80018aa <sampling+0x1ea>
 8001882:	4b42      	ldr	r3, [pc, #264]	; (800198c <sampling+0x2cc>)
 8001884:	889b      	ldrh	r3, [r3, #4]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800188e:	443b      	add	r3, r7
 8001890:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 8001894:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001898:	f102 021a 	add.w	r2, r2, #26
 800189c:	7013      	strb	r3, [r2, #0]
 800189e:	237f      	movs	r3, #127	; 0x7f
 80018a0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80018a4:	f102 0219 	add.w	r2, r2, #25
 80018a8:	7013      	strb	r3, [r2, #0]

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (adsr_temp==0) {		adsr_att=(161-potSource[20] ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 80018aa:	4b39      	ldr	r3, [pc, #228]	; (8001990 <sampling+0x2d0>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d146      	bne.n	8001940 <sampling+0x280>
 80018b2:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <sampling+0x2a0>)
 80018b4:	7d1b      	ldrb	r3, [r3, #20]
 80018b6:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe ff5c 	bl	8000778 <__aeabi_i2d>
 80018c0:	a321      	add	r3, pc, #132	; (adr r3, 8001948 <sampling+0x288>)
 80018c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c6:	f7fe fcdb 	bl	8000280 <__aeabi_dmul>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	f7fe ffbb 	bl	800084c <__aeabi_d2f>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4a2e      	ldr	r2, [pc, #184]	; (8001994 <sampling+0x2d4>)
 80018da:	6013      	str	r3, [r2, #0]
as_sustain=((161-potSource[21])*0.01);  // length and level this is ok is running 1/16 ish				as_attack=as_attack-as_sustain;
 80018dc:	4b20      	ldr	r3, [pc, #128]	; (8001960 <sampling+0x2a0>)
 80018de:	7d5b      	ldrb	r3, [r3, #21]
 80018e0:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe ff47 	bl	8000778 <__aeabi_i2d>
 80018ea:	a319      	add	r3, pc, #100	; (adr r3, 8001950 <sampling+0x290>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7fe fcc6 	bl	8000280 <__aeabi_dmul>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7fe ffa6 	bl	800084c <__aeabi_d2f>
 8001900:	4603      	mov	r3, r0
 8001902:	4a25      	ldr	r2, [pc, #148]	; (8001998 <sampling+0x2d8>)
 8001904:	6013      	str	r3, [r2, #0]
adsr_att=adsr_att*adsr_att;
 8001906:	4b23      	ldr	r3, [pc, #140]	; (8001994 <sampling+0x2d4>)
 8001908:	ed93 7a00 	vldr	s14, [r3]
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <sampling+0x2d4>)
 800190e:	edd3 7a00 	vldr	s15, [r3]
 8001912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001916:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <sampling+0x2d4>)
 8001918:	edc3 7a00 	vstr	s15, [r3]
as_sustain=as_sustain*as_sustain;
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <sampling+0x2d8>)
 800191e:	ed93 7a00 	vldr	s14, [r3]
 8001922:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <sampling+0x2d8>)
 8001924:	edd3 7a00 	vldr	s15, [r3]
 8001928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <sampling+0x2d8>)
 800192e:	edc3 7a00 	vstr	s15, [r3]

adsr_temp=1;
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <sampling+0x2d0>)
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
as_attack=0;
 8001938:	4b18      	ldr	r3, [pc, #96]	; (800199c <sampling+0x2dc>)
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
}

float lut_temp;

for (i=0;i<256;i++) {
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <sampling+0x2ac>)
 8001942:	2200      	movs	r2, #0
 8001944:	801a      	strh	r2, [r3, #0]
 8001946:	e0fc      	b.n	8001b42 <sampling+0x482>
 8001948:	47ae147b 	.word	0x47ae147b
 800194c:	3f947ae1 	.word	0x3f947ae1
 8001950:	47ae147b 	.word	0x47ae147b
 8001954:	3f847ae1 	.word	0x3f847ae1
 8001958:	20001446 	.word	0x20001446
 800195c:	20000c3a 	.word	0x20000c3a
 8001960:	20000a64 	.word	0x20000a64
 8001964:	20002070 	.word	0x20002070
 8001968:	42a00000 	.word	0x42a00000
 800196c:	20000c3c 	.word	0x20000c3c
 8001970:	200025f8 	.word	0x200025f8
 8001974:	51eb851f 	.word	0x51eb851f
 8001978:	cccccccd 	.word	0xcccccccd
 800197c:	20001caf 	.word	0x20001caf
 8001980:	08009d48 	.word	0x08009d48
 8001984:	20000c14 	.word	0x20000c14
 8001988:	08009d50 	.word	0x08009d50
 800198c:	200002b4 	.word	0x200002b4
 8001990:	20001c88 	.word	0x20001c88
 8001994:	200025e8 	.word	0x200025e8
 8001998:	200025e4 	.word	0x200025e4
 800199c:	200025e0 	.word	0x200025e0

	if     (as_attack<1000)    																		{as_attack=as_attack+adsr_att;					lut_temp=as_attack; } //0-1000
 80019a0:	4b8d      	ldr	r3, [pc, #564]	; (8001bd8 <sampling+0x518>)
 80019a2:	edd3 7a00 	vldr	s15, [r3]
 80019a6:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8001bdc <sampling+0x51c>
 80019aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b2:	d511      	bpl.n	80019d8 <sampling+0x318>
 80019b4:	4b88      	ldr	r3, [pc, #544]	; (8001bd8 <sampling+0x518>)
 80019b6:	ed93 7a00 	vldr	s14, [r3]
 80019ba:	4b89      	ldr	r3, [pc, #548]	; (8001be0 <sampling+0x520>)
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c4:	4b84      	ldr	r3, [pc, #528]	; (8001bd8 <sampling+0x518>)
 80019c6:	edc3 7a00 	vstr	s15, [r3]
 80019ca:	4b83      	ldr	r3, [pc, #524]	; (8001bd8 <sampling+0x518>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80019d2:	f102 0214 	add.w	r2, r2, #20
 80019d6:	6013      	str	r3, [r2, #0]
	 if  ((as_attack<1500)  && (as_attack>999))  										{as_attack=as_attack+adsr_att;					lut_temp=1500-(as_attack-500);  }  // 1000-500
 80019d8:	4b7f      	ldr	r3, [pc, #508]	; (8001bd8 <sampling+0x518>)
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001be4 <sampling+0x524>
 80019e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	d525      	bpl.n	8001a38 <sampling+0x378>
 80019ec:	4b7a      	ldr	r3, [pc, #488]	; (8001bd8 <sampling+0x518>)
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001be8 <sampling+0x528>
 80019f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fe:	dd1b      	ble.n	8001a38 <sampling+0x378>
 8001a00:	4b75      	ldr	r3, [pc, #468]	; (8001bd8 <sampling+0x518>)
 8001a02:	ed93 7a00 	vldr	s14, [r3]
 8001a06:	4b76      	ldr	r3, [pc, #472]	; (8001be0 <sampling+0x520>)
 8001a08:	edd3 7a00 	vldr	s15, [r3]
 8001a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a10:	4b71      	ldr	r3, [pc, #452]	; (8001bd8 <sampling+0x518>)
 8001a12:	edc3 7a00 	vstr	s15, [r3]
 8001a16:	4b70      	ldr	r3, [pc, #448]	; (8001bd8 <sampling+0x518>)
 8001a18:	edd3 7a00 	vldr	s15, [r3]
 8001a1c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001bec <sampling+0x52c>
 8001a20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a24:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001be4 <sampling+0x524>
 8001a28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a2c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001a30:	f103 0314 	add.w	r3, r3, #20
 8001a34:	edc3 7a00 	vstr	s15, [r3]
	 if ((as_attack>1499)   && 		(as_attack<2000)) 																{		lut_temp=500; 	as_attack=as_attack+as_sustain;}
 8001a38:	4b67      	ldr	r3, [pc, #412]	; (8001bd8 <sampling+0x518>)
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001bf0 <sampling+0x530>
 8001a42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4a:	dd1a      	ble.n	8001a82 <sampling+0x3c2>
 8001a4c:	4b62      	ldr	r3, [pc, #392]	; (8001bd8 <sampling+0x518>)
 8001a4e:	edd3 7a00 	vldr	s15, [r3]
 8001a52:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001bf4 <sampling+0x534>
 8001a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5e:	d510      	bpl.n	8001a82 <sampling+0x3c2>
 8001a60:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <sampling+0x538>)
 8001a62:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001a66:	f102 0214 	add.w	r2, r2, #20
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b5a      	ldr	r3, [pc, #360]	; (8001bd8 <sampling+0x518>)
 8001a6e:	ed93 7a00 	vldr	s14, [r3]
 8001a72:	4b62      	ldr	r3, [pc, #392]	; (8001bfc <sampling+0x53c>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7c:	4b56      	ldr	r3, [pc, #344]	; (8001bd8 <sampling+0x518>)
 8001a7e:	edc3 7a00 	vstr	s15, [r3]
	if ((as_attack>1999)  &&  (as_attack<2500)	)																							{as_attack=as_attack+as_sustain	;	lut_temp=2500-as_attack; } //500-0;
 8001a82:	4b55      	ldr	r3, [pc, #340]	; (8001bd8 <sampling+0x518>)
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001c00 <sampling+0x540>
 8001a8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a94:	dd21      	ble.n	8001ada <sampling+0x41a>
 8001a96:	4b50      	ldr	r3, [pc, #320]	; (8001bd8 <sampling+0x518>)
 8001a98:	edd3 7a00 	vldr	s15, [r3]
 8001a9c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001c04 <sampling+0x544>
 8001aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa8:	d517      	bpl.n	8001ada <sampling+0x41a>
 8001aaa:	4b4b      	ldr	r3, [pc, #300]	; (8001bd8 <sampling+0x518>)
 8001aac:	ed93 7a00 	vldr	s14, [r3]
 8001ab0:	4b52      	ldr	r3, [pc, #328]	; (8001bfc <sampling+0x53c>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aba:	4b47      	ldr	r3, [pc, #284]	; (8001bd8 <sampling+0x518>)
 8001abc:	edc3 7a00 	vstr	s15, [r3]
 8001ac0:	4b45      	ldr	r3, [pc, #276]	; (8001bd8 <sampling+0x518>)
 8001ac2:	edd3 7a00 	vldr	s15, [r3]
 8001ac6:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001c04 <sampling+0x544>
 8001aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ace:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001ad2:	f103 0314 	add.w	r3, r3, #20
 8001ad6:	edc3 7a00 	vstr	s15, [r3]
	if (as_attack>3000)   																																			{lut_temp=1; as_attack=4000; }     // THE END
 8001ada:	4b3f      	ldr	r3, [pc, #252]	; (8001bd8 <sampling+0x518>)
 8001adc:	edd3 7a00 	vldr	s15, [r3]
 8001ae0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001c08 <sampling+0x548>
 8001ae4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aec:	dd09      	ble.n	8001b02 <sampling+0x442>
 8001aee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001af2:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001af6:	f102 0214 	add.w	r2, r2, #20
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <sampling+0x518>)
 8001afe:	4a43      	ldr	r2, [pc, #268]	; (8001c0c <sampling+0x54c>)
 8001b00:	601a      	str	r2, [r3, #0]

adsr_lut[i]= lut_temp*0.001;
 8001b02:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001b06:	f103 0314 	add.w	r3, r3, #20
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	f7fe fe46 	bl	800079c <__aeabi_f2d>
 8001b10:	a32f      	add	r3, pc, #188	; (adr r3, 8001bd0 <sampling+0x510>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	f7fe fbb3 	bl	8000280 <__aeabi_dmul>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	493c      	ldr	r1, [pc, #240]	; (8001c10 <sampling+0x550>)
 8001b20:	8809      	ldrh	r1, [r1, #0]
 8001b22:	460c      	mov	r4, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f7fe fe90 	bl	800084c <__aeabi_d2f>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4939      	ldr	r1, [pc, #228]	; (8001c14 <sampling+0x554>)
 8001b30:	00a3      	lsls	r3, r4, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	601a      	str	r2, [r3, #0]
for (i=0;i<256;i++) {
 8001b36:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <sampling+0x550>)
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	4b34      	ldr	r3, [pc, #208]	; (8001c10 <sampling+0x550>)
 8001b40:	801a      	strh	r2, [r3, #0]
 8001b42:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <sampling+0x550>)
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	2bff      	cmp	r3, #255	; 0xff
 8001b48:	f67f af2a 	bls.w	80019a0 <sampling+0x2e0>
}


///////////////////////////////////////////////////////////////

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8001b4c:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <sampling+0x550>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	801a      	strh	r2, [r3, #0]
 8001b52:	e355      	b.n	8002200 <sampling+0xb40>

	i_total=i+sample_pointB;
 8001b54:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <sampling+0x550>)
 8001b56:	881a      	ldrh	r2, [r3, #0]
 8001b58:	4b2f      	ldr	r3, [pc, #188]	; (8001c18 <sampling+0x558>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001b62:	f102 021e 	add.w	r2, r2, #30
 8001b66:	8013      	strh	r3, [r2, #0]
	i_frac=i>>6;
 8001b68:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <sampling+0x550>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	099b      	lsrs	r3, r3, #6
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4b2a      	ldr	r3, [pc, #168]	; (8001c1c <sampling+0x55c>)
 8001b74:	701a      	strb	r2, [r3, #0]
	note_plain=potValues[seq_pos & 7 ];
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <sampling+0x560>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	4a29      	ldr	r2, [pc, #164]	; (8001c24 <sampling+0x564>)
 8001b80:	5cd3      	ldrb	r3, [r2, r3]
 8001b82:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001b86:	f102 021b 	add.w	r2, r2, #27
 8001b8a:	7013      	strb	r3, [r2, #0]
potValues[i&255]=potSource[i&255]>>4; //just to update values
 8001b8c:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <sampling+0x550>)
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	4a25      	ldr	r2, [pc, #148]	; (8001c28 <sampling+0x568>)
 8001b94:	5cd2      	ldrb	r2, [r2, r3]
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <sampling+0x550>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	0912      	lsrs	r2, r2, #4
 8001b9e:	b2d1      	uxtb	r1, r2
 8001ba0:	4a20      	ldr	r2, [pc, #128]	; (8001c24 <sampling+0x564>)
 8001ba2:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 8001ba4:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <sampling+0x56c>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001bac:	f102 020e 	add.w	r2, r2, #14
 8001bb0:	8812      	ldrh	r2, [r2, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d83e      	bhi.n	8001c34 <sampling+0x574>
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <sampling+0x570>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <sampling+0x570>)
 8001bc6:	801a      	strh	r2, [r3, #0]
 8001bc8:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <sampling+0x56c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	801a      	strh	r2, [r3, #0]
 8001bce:	e037      	b.n	8001c40 <sampling+0x580>
 8001bd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bd4:	3f50624d 	.word	0x3f50624d
 8001bd8:	200025e0 	.word	0x200025e0
 8001bdc:	447a0000 	.word	0x447a0000
 8001be0:	200025e8 	.word	0x200025e8
 8001be4:	44bb8000 	.word	0x44bb8000
 8001be8:	4479c000 	.word	0x4479c000
 8001bec:	43fa0000 	.word	0x43fa0000
 8001bf0:	44bb6000 	.word	0x44bb6000
 8001bf4:	44fa0000 	.word	0x44fa0000
 8001bf8:	43fa0000 	.word	0x43fa0000
 8001bfc:	200025e4 	.word	0x200025e4
 8001c00:	44f9e000 	.word	0x44f9e000
 8001c04:	451c4000 	.word	0x451c4000
 8001c08:	453b8000 	.word	0x453b8000
 8001c0c:	457a0000 	.word	0x457a0000
 8001c10:	20000c3c 	.word	0x20000c3c
 8001c14:	20001888 	.word	0x20001888
 8001c18:	20000c3a 	.word	0x20000c3a
 8001c1c:	20001e14 	.word	0x20001e14
 8001c20:	20000c14 	.word	0x20000c14
 8001c24:	200008e4 	.word	0x200008e4
 8001c28:	20000a64 	.word	0x20000a64
 8001c2c:	20001cf6 	.word	0x20001cf6
 8001c30:	20001ca2 	.word	0x20001ca2
 8001c34:	4b7d      	ldr	r3, [pc, #500]	; (8001e2c <sampling+0x76c>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	4b7b      	ldr	r3, [pc, #492]	; (8001e2c <sampling+0x76c>)
 8001c3e:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001c46:	f102 021c 	add.w	r2, r2, #28
 8001c4a:	8013      	strh	r3, [r2, #0]
	if ((next_isr>>4) != (seq_pos)) { 					// next note step 140ms
 8001c4c:	4b78      	ldr	r3, [pc, #480]	; (8001e30 <sampling+0x770>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	4b77      	ldr	r3, [pc, #476]	; (8001e34 <sampling+0x774>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d00c      	beq.n	8001c78 <sampling+0x5b8>
		seq_pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8001c5e:	4b74      	ldr	r3, [pc, #464]	; (8001e30 <sampling+0x770>)
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	091b      	lsrs	r3, r3, #4
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	4b72      	ldr	r3, [pc, #456]	; (8001e34 <sampling+0x774>)
 8001c6a:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001c72:	f102 021c 	add.w	r2, r2, #28
 8001c76:	8013      	strh	r3, [r2, #0]
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq_pos somehow  , only activates when change in seq pos
 8001c78:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001c7c:	f103 031c 	add.w	r3, r3, #28
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 812f 	beq.w	8001ee6 <sampling+0x826>
	{
	//printf("\n");//	ITM_SendChar( 65 );   //  Send ASCII code 65 = ’A’
	//printf("%d" ,note_channel[10]);


		potValues[32]=(adc_values[0]>>2)&15; //assigned pots to start of loopers 0-16,works
 8001c88:	4b6b      	ldr	r3, [pc, #428]	; (8001e38 <sampling+0x778>)
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	089b      	lsrs	r3, r3, #2
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	4b68      	ldr	r3, [pc, #416]	; (8001e3c <sampling+0x77c>)
 8001c9a:	f883 2020 	strb.w	r2, [r3, #32]
		potValues[33]=(adc_values[1]>>2)&15;
 8001c9e:	4b66      	ldr	r3, [pc, #408]	; (8001e38 <sampling+0x778>)
 8001ca0:	885b      	ldrh	r3, [r3, #2]
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	4b63      	ldr	r3, [pc, #396]	; (8001e3c <sampling+0x77c>)
 8001cb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


		seq_loop[2]=((potValues[32]+(seq_pos&7))&15); // calc  8 note loop positions sets looping point in sequence
 8001cb4:	4b61      	ldr	r3, [pc, #388]	; (8001e3c <sampling+0x77c>)
 8001cb6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001cba:	4b5e      	ldr	r3, [pc, #376]	; (8001e34 <sampling+0x774>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b5c      	ldr	r3, [pc, #368]	; (8001e40 <sampling+0x780>)
 8001cd0:	709a      	strb	r2, [r3, #2]

		//seq_loop[3]=(potValues[33]+(( seq_pos&31 ) >>2)) & 15;  // quater speed
			seq_loop[3]=((potValues[33]+(seq_pos&15))&15); //sets looping point in sequence this is full 16 note
 8001cd2:	4b5a      	ldr	r3, [pc, #360]	; (8001e3c <sampling+0x77c>)
 8001cd4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001cd8:	4b56      	ldr	r3, [pc, #344]	; (8001e34 <sampling+0x774>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4413      	add	r3, r2
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4b56      	ldr	r3, [pc, #344]	; (8001e40 <sampling+0x780>)
 8001ce8:	70da      	strb	r2, [r3, #3]

			seq_loop[4]=((potValues[32]+(seq_pos&7))&15);
 8001cea:	4b54      	ldr	r3, [pc, #336]	; (8001e3c <sampling+0x77c>)
 8001cec:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001cf0:	4b50      	ldr	r3, [pc, #320]	; (8001e34 <sampling+0x774>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	4b4e      	ldr	r3, [pc, #312]	; (8001e40 <sampling+0x780>)
 8001d06:	711a      	strb	r2, [r3, #4]

		//seq_loop[4]=((potValues[32]+((seq_pos&15)>>1))&15); // half speed

		note_channel[2]=potValues[80+seq_loop[2]]+potValues[72];  //loop 8 notes from pos and x times
 8001d08:	4b4d      	ldr	r3, [pc, #308]	; (8001e40 <sampling+0x780>)
 8001d0a:	789b      	ldrb	r3, [r3, #2]
 8001d0c:	3350      	adds	r3, #80	; 0x50
 8001d0e:	4a4b      	ldr	r2, [pc, #300]	; (8001e3c <sampling+0x77c>)
 8001d10:	5cd3      	ldrb	r3, [r2, r3]
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	4b49      	ldr	r3, [pc, #292]	; (8001e3c <sampling+0x77c>)
 8001d16:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	4b48      	ldr	r3, [pc, #288]	; (8001e44 <sampling+0x784>)
 8001d22:	809a      	strh	r2, [r3, #4]
		note_channel[3]=potValues[seq_loop[3]];  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8001d24:	4b46      	ldr	r3, [pc, #280]	; (8001e40 <sampling+0x780>)
 8001d26:	78db      	ldrb	r3, [r3, #3]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b44      	ldr	r3, [pc, #272]	; (8001e3c <sampling+0x77c>)
 8001d2c:	5c9b      	ldrb	r3, [r3, r2]
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	4b44      	ldr	r3, [pc, #272]	; (8001e44 <sampling+0x784>)
 8001d32:	80da      	strh	r2, [r3, #6]
	if (note_channel[3]) 		{note_channel[3]=note_channel[3]+potValues[73];	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off
 8001d34:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <sampling+0x784>)
 8001d36:	88db      	ldrh	r3, [r3, #6]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d01c      	beq.n	8001d76 <sampling+0x6b6>
 8001d3c:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <sampling+0x784>)
 8001d3e:	88da      	ldrh	r2, [r3, #6]
 8001d40:	4b3e      	ldr	r3, [pc, #248]	; (8001e3c <sampling+0x77c>)
 8001d42:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <sampling+0x784>)
 8001d4e:	80da      	strh	r2, [r3, #6]
 8001d50:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <sampling+0x788>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	80da      	strh	r2, [r3, #6]
 8001d56:	4b3d      	ldr	r3, [pc, #244]	; (8001e4c <sampling+0x78c>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	2201      	movs	r2, #1
 8001d60:	409a      	lsls	r2, r3
 8001d62:	4b3a      	ldr	r3, [pc, #232]	; (8001e4c <sampling+0x78c>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8001d70:	443b      	add	r3, r7
 8001d72:	f843 2c7c 	str.w	r2, [r3, #-124]
	//note_channel[3]=(note_channel[3]-4)+(lfo_out[2]>>11);

	//if (((seq_pos&7)==0) && (adsr_toggle[6]==2))		{adsr_retrigger[6]=1; } else adsr_retrigger[6]=0; // delete


	note_channel[5]=potValues[80+(seq_pos&15)];  // sample
 8001d76:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <sampling+0x774>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3350      	adds	r3, #80	; 0x50
 8001d80:	4a2e      	ldr	r2, [pc, #184]	; (8001e3c <sampling+0x77c>)
 8001d82:	5cd3      	ldrb	r3, [r2, r3]
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	4b2f      	ldr	r3, [pc, #188]	; (8001e44 <sampling+0x784>)
 8001d88:	815a      	strh	r2, [r3, #10]


	if ((note_channel[5]) && (adsr_toggle[5]==2)) {note_holdB=note_channel[5]; one_shot=0;}  // grab note when on ,one shot also , also delete
 8001d8a:	4b2e      	ldr	r3, [pc, #184]	; (8001e44 <sampling+0x784>)
 8001d8c:	895b      	ldrh	r3, [r3, #10]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00b      	beq.n	8001daa <sampling+0x6ea>
 8001d92:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <sampling+0x790>)
 8001d94:	795b      	ldrb	r3, [r3, #5]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d107      	bne.n	8001daa <sampling+0x6ea>
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <sampling+0x784>)
 8001d9c:	895b      	ldrh	r3, [r3, #10]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	4b2c      	ldr	r3, [pc, #176]	; (8001e54 <sampling+0x794>)
 8001da2:	701a      	strb	r2, [r3, #0]
 8001da4:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <sampling+0x798>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]


	note_holdB=potValues[80+seq_loop[2]]+(potValues[74]);  //
 8001daa:	4b25      	ldr	r3, [pc, #148]	; (8001e40 <sampling+0x780>)
 8001dac:	789b      	ldrb	r3, [r3, #2]
 8001dae:	3350      	adds	r3, #80	; 0x50
 8001db0:	4a22      	ldr	r2, [pc, #136]	; (8001e3c <sampling+0x77c>)
 8001db2:	5cd2      	ldrb	r2, [r2, r3]
 8001db4:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <sampling+0x77c>)
 8001db6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001dba:	4413      	add	r3, r2
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <sampling+0x794>)
 8001dc0:	701a      	strb	r2, [r3, #0]

	note_holdB=(note_holdB-4)+(lfo_out[2][i_frac]>>11);  //no go with float
 8001dc2:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <sampling+0x79c>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	4a26      	ldr	r2, [pc, #152]	; (8001e60 <sampling+0x7a0>)
 8001dc8:	3314      	adds	r3, #20
 8001dca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dce:	0adb      	lsrs	r3, r3, #11
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <sampling+0x794>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4413      	add	r3, r2
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	3b04      	subs	r3, #4
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <sampling+0x794>)
 8001de2:	701a      	strb	r2, [r3, #0]



	note_holdB=MajorNote[note_holdB];
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <sampling+0x794>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <sampling+0x7a4>)
 8001dec:	5c9a      	ldrb	r2, [r3, r2]
 8001dee:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <sampling+0x794>)
 8001df0:	701a      	strb	r2, [r3, #0]

	sine_adder=sine_lut[note_holdB];	//sets freq ,1.0594  * 16536 =17518  ,
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <sampling+0x794>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <sampling+0x7a8>)
 8001dfa:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001dfe:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <sampling+0x7ac>)
 8001e00:	801a      	strh	r2, [r3, #0]
	sine_adder= (sine_adder*1200)>>10;  // modify different sample size , just need single cycle length and thats it
 8001e02:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <sampling+0x7ac>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001e0c:	fb02 f303 	mul.w	r3, r2, r3
 8001e10:	129b      	asrs	r3, r3, #10
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <sampling+0x7ac>)
 8001e16:	801a      	strh	r2, [r3, #0]
		mask_result =0;
 8001e18:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <sampling+0x7b0>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	801a      	strh	r2, [r3, #0]
		sample_Accu[3]=0; // reset to 0 mani sample hold
		sample_Accu[4]=0; // reset to 0 mani sample hold
		sample_Accu[5]=0; // reset to 0 mani sample hold
*/

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001e24:	f102 021f 	add.w	r2, r2, #31
 8001e28:	7013      	strb	r3, [r2, #0]
 8001e2a:	e055      	b.n	8001ed8 <sampling+0x818>
 8001e2c:	20001cf6 	.word	0x20001cf6
 8001e30:	20001ca2 	.word	0x20001ca2
 8001e34:	20000c14 	.word	0x20000c14
 8001e38:	200002b4 	.word	0x200002b4
 8001e3c:	200008e4 	.word	0x200008e4
 8001e40:	20001d1c 	.word	0x20001d1c
 8001e44:	20001448 	.word	0x20001448
 8001e48:	20001c8c 	.word	0x20001c8c
 8001e4c:	20000c3c 	.word	0x20000c3c
 8001e50:	20001ca4 	.word	0x20001ca4
 8001e54:	20001cb0 	.word	0x20001cb0
 8001e58:	20001ce8 	.word	0x20001ce8
 8001e5c:	20001e14 	.word	0x20001e14
 8001e60:	20001fa8 	.word	0x20001fa8
 8001e64:	08009d7c 	.word	0x08009d7c
 8001e68:	20000250 	.word	0x20000250
 8001e6c:	20000c16 	.word	0x20000c16
 8001e70:	20001486 	.word	0x20001486

		if (note_channel[mask_i]) {tune_Accu=sample_Noteadd[MajorNote[note_channel[mask_i]]];   note_tuned[mask_i]=(tune_Accu);       } // relies on note channel clear , not good , clear not channel straight after
 8001e74:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001e78:	f103 031f 	add.w	r3, r3, #31
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	4a60      	ldr	r2, [pc, #384]	; (8002000 <sampling+0x940>)
 8001e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d01c      	beq.n	8001ec2 <sampling+0x802>
 8001e88:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001e8c:	f103 031f 	add.w	r3, r3, #31
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	4a5b      	ldr	r2, [pc, #364]	; (8002000 <sampling+0x940>)
 8001e94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b5a      	ldr	r3, [pc, #360]	; (8002004 <sampling+0x944>)
 8001e9c:	5c9b      	ldrb	r3, [r3, r2]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b59      	ldr	r3, [pc, #356]	; (8002008 <sampling+0x948>)
 8001ea2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b58      	ldr	r3, [pc, #352]	; (800200c <sampling+0x94c>)
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	4b57      	ldr	r3, [pc, #348]	; (800200c <sampling+0x94c>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001eb4:	f103 031f 	add.w	r3, r3, #31
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	b291      	uxth	r1, r2
 8001ebc:	4a54      	ldr	r2, [pc, #336]	; (8002010 <sampling+0x950>)
 8001ebe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8001ec2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001ec6:	f103 031f 	add.w	r3, r3, #31
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001ed2:	f102 021f 	add.w	r2, r2, #31
 8001ed6:	7013      	strb	r3, [r2, #0]
 8001ed8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001edc:	f103 031f 	add.w	r3, r3, #31
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d9c6      	bls.n	8001e74 <sampling+0x7b4>

  // calc freq 1/isr or 1/16 per note ,need for pitch bend and so on , change depending on decay

// lfo section

	if ((i&63)==0) {   // calculate lfo maybe 8 times for now , seems to fill up
 8001ee6:	4b4b      	ldr	r3, [pc, #300]	; (8002014 <sampling+0x954>)
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f040 8180 	bne.w	80021f4 <sampling+0xb34>
freq_temp=0;
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001efc:	f102 0214 	add.w	r2, r2, #20
 8001f00:	6013      	str	r3, [r2, #0]
freq2_temp=0;
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001f0a:	f102 0210 	add.w	r2, r2, #16
 8001f0e:	6013      	str	r3, [r2, #0]

//uint8_t i_frac2=(i_frac+7)&7;  //previous value can change shape  , not  bad effect

		for (l=0;l<10;l++){   //current lfo setup , messy
 8001f10:	2300      	movs	r3, #0
 8001f12:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001f16:	f102 021b 	add.w	r2, r2, #27
 8001f1a:	7013      	strb	r3, [r2, #0]
 8001f1c:	e128      	b.n	8002170 <sampling+0xab0>

			freq_temp=potSource[130+l];
 8001f1e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001f22:	f103 031b 	add.w	r3, r3, #27
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	3382      	adds	r3, #130	; 0x82
 8001f2a:	4a3b      	ldr	r2, [pc, #236]	; (8002018 <sampling+0x958>)
 8001f2c:	5cd3      	ldrb	r3, [r2, r3]
 8001f2e:	ee07 3a90 	vmov	s15, r3
 8001f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f36:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f3a:	f103 0314 	add.w	r3, r3, #20
 8001f3e:	edc3 7a00 	vstr	s15, [r3]
			freq2_temp=freq_temp*tempo_sync ; //correction to one note per cycle ,fixed , maybe loose this
 8001f42:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f46:	f103 0314 	add.w	r3, r3, #20
 8001f4a:	ed93 7a00 	vldr	s14, [r3]
 8001f4e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001f52:	f103 0308 	add.w	r3, r3, #8
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f5e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f62:	f103 0310 	add.w	r3, r3, #16
 8001f66:	edc3 7a00 	vstr	s15, [r3]

			freq_temp=lfo_accu[l][i_frac]+ freq2_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8001f6a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001f6e:	f103 031b 	add.w	r3, r3, #27
 8001f72:	781a      	ldrb	r2, [r3, #0]
 8001f74:	4b29      	ldr	r3, [pc, #164]	; (800201c <sampling+0x95c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	4929      	ldr	r1, [pc, #164]	; (8002020 <sampling+0x960>)
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4403      	add	r3, r0
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	edd3 7a00 	vldr	s15, [r3]
 8001f8e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f92:	f103 0310 	add.w	r3, r3, #16
 8001f96:	ed93 7a00 	vldr	s14, [r3]
 8001f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001fa2:	f103 0314 	add.w	r3, r3, #20
 8001fa6:	edc3 7a00 	vstr	s15, [r3]


//			if ((tempo_count<50) && ((next_isr&15)==15)) freq_temp=0;   // trying retrigger
		if (freq_temp>16384) lfo_accu[l][i_frac]=freq_temp-16384; else lfo_accu[l][i_frac]=freq_temp; // write back value
 8001faa:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001fae:	f103 0314 	add.w	r3, r3, #20
 8001fb2:	edd3 7a00 	vldr	s15, [r3]
 8001fb6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002024 <sampling+0x964>
 8001fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc2:	dd31      	ble.n	8002028 <sampling+0x968>
 8001fc4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001fc8:	f103 031b 	add.w	r3, r3, #27
 8001fcc:	781a      	ldrb	r2, [r3, #0]
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <sampling+0x95c>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001fd8:	f103 0314 	add.w	r3, r3, #20
 8001fdc:	edd3 7a00 	vldr	s15, [r3]
 8001fe0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002024 <sampling+0x964>
 8001fe4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fe8:	490d      	ldr	r1, [pc, #52]	; (8002020 <sampling+0x960>)
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4403      	add	r3, r0
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	edc3 7a00 	vstr	s15, [r3]
 8001ffc:	e02a      	b.n	8002054 <sampling+0x994>
 8001ffe:	bf00      	nop
 8002000:	20001448 	.word	0x20001448
 8002004:	08009d7c 	.word	0x08009d7c
 8002008:	08009d98 	.word	0x08009d98
 800200c:	20000c10 	.word	0x20000c10
 8002010:	20000bf8 	.word	0x20000bf8
 8002014:	20000c3c 	.word	0x20000c3c
 8002018:	20000a64 	.word	0x20000a64
 800201c:	20001e14 	.word	0x20001e14
 8002020:	20001e18 	.word	0x20001e18
 8002024:	46800000 	.word	0x46800000
 8002028:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800202c:	f103 031b 	add.w	r3, r3, #27
 8002030:	781a      	ldrb	r2, [r3, #0]
 8002032:	4b7d      	ldr	r3, [pc, #500]	; (8002228 <sampling+0xb68>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	497c      	ldr	r1, [pc, #496]	; (800222c <sampling+0xb6c>)
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4403      	add	r3, r0
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800204c:	f102 0214 	add.w	r2, r2, #20
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	601a      	str	r2, [r3, #0]
		freq_temp=lfo_accu[l][i_frac]; // 0-255 limit + above zero
 8002054:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002058:	f103 031b 	add.w	r3, r3, #27
 800205c:	781a      	ldrb	r2, [r3, #0]
 800205e:	4b72      	ldr	r3, [pc, #456]	; (8002228 <sampling+0xb68>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	4971      	ldr	r1, [pc, #452]	; (800222c <sampling+0xb6c>)
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4403      	add	r3, r0
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800207a:	f102 0214 	add.w	r2, r2, #20
 800207e:	6013      	str	r3, [r2, #0]
		freq_temp=freq_temp*0.000383495;  // 0-255 , chang this for depth
 8002080:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002084:	f103 0314 	add.w	r3, r3, #20
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	f7fe fb87 	bl	800079c <__aeabi_f2d>
 800208e:	a362      	add	r3, pc, #392	; (adr r3, 8002218 <sampling+0xb58>)
 8002090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002094:	f7fe f8f4 	bl	8000280 <__aeabi_dmul>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	f7fe fbd4 	bl	800084c <__aeabi_d2f>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80020aa:	f102 0214 	add.w	r2, r2, #20
 80020ae:	6013      	str	r3, [r2, #0]
		freq2_temp =arm_sin_f32(freq_temp); // seems to be working ok till here , not doing right here now
 80020b0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020b4:	f103 0314 	add.w	r3, r3, #20
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	f7fe fb6f 	bl	800079c <__aeabi_f2d>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	ec43 2b10 	vmov	d0, r2, r3
 80020c6:	f006 fcd9 	bl	8008a7c <arm_sin_f32>
 80020ca:	ee07 0a90 	vmov	s15, r0
 80020ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020d6:	f103 0310 	add.w	r3, r3, #16
 80020da:	edc3 7a00 	vstr	s15, [r3]
		freq_temp=freq2_temp*potSource[140+l]*51;   // not working  proper something with angles i think
 80020de:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80020e2:	f103 031b 	add.w	r3, r3, #27
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	338c      	adds	r3, #140	; 0x8c
 80020ea:	4a51      	ldr	r2, [pc, #324]	; (8002230 <sampling+0xb70>)
 80020ec:	5cd3      	ldrb	r3, [r2, r3]
 80020ee:	ee07 3a90 	vmov	s15, r3
 80020f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020fa:	f103 0310 	add.w	r3, r3, #16
 80020fe:	edd3 7a00 	vldr	s15, [r3]
 8002102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002106:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002234 <sampling+0xb74>
 800210a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800210e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002112:	f103 0314 	add.w	r3, r3, #20
 8002116:	edc3 7a00 	vstr	s15, [r3]

		lfo_out[l] [i_frac]=freq_temp+8195; // ok now
 800211a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800211e:	f103 0314 	add.w	r3, r3, #20
 8002122:	edd3 7a00 	vldr	s15, [r3]
 8002126:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002238 <sampling+0xb78>
 800212a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800212e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002132:	f103 031b 	add.w	r3, r3, #27
 8002136:	781a      	ldrb	r2, [r3, #0]
 8002138:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <sampling+0xb68>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	461c      	mov	r4, r3
 800213e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002142:	ee17 3a90 	vmov	r3, s15
 8002146:	b298      	uxth	r0, r3
 8002148:	493c      	ldr	r1, [pc, #240]	; (800223c <sampling+0xb7c>)
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4423      	add	r3, r4
 8002154:	4602      	mov	r2, r0
 8002156:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (l=0;l<10;l++){   //current lfo setup , messy
 800215a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800215e:	f103 031b 	add.w	r3, r3, #27
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	3301      	adds	r3, #1
 8002166:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800216a:	f102 021b 	add.w	r2, r2, #27
 800216e:	7013      	strb	r3, [r2, #0]
 8002170:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002174:	f103 031b 	add.w	r3, r3, #27
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b09      	cmp	r3, #9
 800217c:	f67f aecf 	bls.w	8001f1e <sampling+0x85e>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch


			freq_pointer[0] [i_frac]=lfo_out [0][i_frac]*0.00006435; // problem was selecting accu instead of out , good now
 8002180:	4b29      	ldr	r3, [pc, #164]	; (8002228 <sampling+0xb68>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	4b2d      	ldr	r3, [pc, #180]	; (800223c <sampling+0xb7c>)
 8002188:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe faf3 	bl	8000778 <__aeabi_i2d>
 8002192:	a323      	add	r3, pc, #140	; (adr r3, 8002220 <sampling+0xb60>)
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	f7fe f872 	bl	8000280 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4921      	ldr	r1, [pc, #132]	; (8002228 <sampling+0xb68>)
 80021a2:	7809      	ldrb	r1, [r1, #0]
 80021a4:	460c      	mov	r4, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	f7fe fb4f 	bl	800084c <__aeabi_d2f>
 80021ae:	4602      	mov	r2, r0
 80021b0:	4923      	ldr	r1, [pc, #140]	; (8002240 <sampling+0xb80>)
 80021b2:	00a3      	lsls	r3, r4, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	601a      	str	r2, [r3, #0]
		freq_pointer[2] [i_frac] =lfo_out [3][i_frac]*0.00006435;; // filter lfos
 80021b8:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <sampling+0xb68>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4a1f      	ldr	r2, [pc, #124]	; (800223c <sampling+0xb7c>)
 80021be:	331e      	adds	r3, #30
 80021c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe fad7 	bl	8000778 <__aeabi_i2d>
 80021ca:	a315      	add	r3, pc, #84	; (adr r3, 8002220 <sampling+0xb60>)
 80021cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d0:	f7fe f856 	bl	8000280 <__aeabi_dmul>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4913      	ldr	r1, [pc, #76]	; (8002228 <sampling+0xb68>)
 80021da:	7809      	ldrb	r1, [r1, #0]
 80021dc:	460c      	mov	r4, r1
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	f7fe fb33 	bl	800084c <__aeabi_d2f>
 80021e6:	4602      	mov	r2, r0
 80021e8:	4915      	ldr	r1, [pc, #84]	; (8002240 <sampling+0xb80>)
 80021ea:	f104 0312 	add.w	r3, r4, #18
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	601a      	str	r2, [r3, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <sampling+0xb84>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	3301      	adds	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <sampling+0xb84>)
 80021fe:	801a      	strh	r2, [r3, #0]
 8002200:	4b10      	ldr	r3, [pc, #64]	; (8002244 <sampling+0xb84>)
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002208:	f4ff aca4 	bcc.w	8001b54 <sampling+0x494>
// filter loop
int32_t play_holder1[512];    // data banks
int32_t play_holder2[512];


for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 800220c:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <sampling+0xb84>)
 800220e:	2200      	movs	r2, #0
 8002210:	801a      	strh	r2, [r3, #0]
 8002212:	e0f7      	b.n	8002404 <sampling+0xd44>
 8002214:	f3af 8000 	nop.w
 8002218:	7bb1a72c 	.word	0x7bb1a72c
 800221c:	3f3921fa 	.word	0x3f3921fa
 8002220:	94fd52a7 	.word	0x94fd52a7
 8002224:	3f10de74 	.word	0x3f10de74
 8002228:	20001e14 	.word	0x20001e14
 800222c:	20001e18 	.word	0x20001e18
 8002230:	20000a64 	.word	0x20000a64
 8002234:	424c0000 	.word	0x424c0000
 8002238:	46000c00 	.word	0x46000c00
 800223c:	20001fa8 	.word	0x20001fa8
 8002240:	20001d84 	.word	0x20001d84
 8002244:	20000c3c 	.word	0x20000c3c
	i_total=i+sample_pointB;
 8002248:	4b7a      	ldr	r3, [pc, #488]	; (8002434 <sampling+0xd74>)
 800224a:	881a      	ldrh	r2, [r3, #0]
 800224c:	4b7a      	ldr	r3, [pc, #488]	; (8002438 <sampling+0xd78>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	4413      	add	r3, r2
 8002252:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002256:	f102 021e 	add.w	r2, r2, #30
 800225a:	8013      	strh	r3, [r2, #0]
	i_frac=(i>>6);
 800225c:	4b75      	ldr	r3, [pc, #468]	; (8002434 <sampling+0xd74>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	099b      	lsrs	r3, r3, #6
 8002262:	b29b      	uxth	r3, r3
 8002264:	b2da      	uxtb	r2, r3
 8002266:	4b75      	ldr	r3, [pc, #468]	; (800243c <sampling+0xd7c>)
 8002268:	701a      	strb	r2, [r3, #0]
// every step   1,110,928   >>20  ,per note
// New oscillators , sync, trigger input , waveshape ,zero cross
	sample_accus[0] = sample_accus[0] + note_tuned[0]; //careful with signed bit shift,better compare
 800226a:	4b75      	ldr	r3, [pc, #468]	; (8002440 <sampling+0xd80>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a75      	ldr	r2, [pc, #468]	; (8002444 <sampling+0xd84>)
 8002270:	8812      	ldrh	r2, [r2, #0]
 8002272:	4413      	add	r3, r2
 8002274:	4a72      	ldr	r2, [pc, #456]	; (8002440 <sampling+0xd80>)
 8002276:	6013      	str	r3, [r2, #0]

	if (sample_accus[0]>524287) sample_accus[0] =-sample_accus[0] ; // faster >  than &  ,strange
 8002278:	4b71      	ldr	r3, [pc, #452]	; (8002440 <sampling+0xd80>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002280:	db04      	blt.n	800228c <sampling+0xbcc>
 8002282:	4b6f      	ldr	r3, [pc, #444]	; (8002440 <sampling+0xd80>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	425b      	negs	r3, r3
 8002288:	4a6d      	ldr	r2, [pc, #436]	; (8002440 <sampling+0xd80>)
 800228a:	6013      	str	r3, [r2, #0]



	sample_accus[1] = sample_accus[1] + note_tuned[1];  // normal adder full volume
 800228c:	4b6c      	ldr	r3, [pc, #432]	; (8002440 <sampling+0xd80>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	4a6c      	ldr	r2, [pc, #432]	; (8002444 <sampling+0xd84>)
 8002292:	8852      	ldrh	r2, [r2, #2]
 8002294:	4413      	add	r3, r2
 8002296:	4a6a      	ldr	r2, [pc, #424]	; (8002440 <sampling+0xd80>)
 8002298:	6053      	str	r3, [r2, #4]
		//	if (!(note_channel[0]))   sample_accus[1] =0;  // turn off with vel now , maybe use mask
			if (sample_accus[1]>524287) sample_accus[1] =-sample_accus[1] ; // faster >  than &  ,strange
 800229a:	4b69      	ldr	r3, [pc, #420]	; (8002440 <sampling+0xd80>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022a2:	db04      	blt.n	80022ae <sampling+0xbee>
 80022a4:	4b66      	ldr	r3, [pc, #408]	; (8002440 <sampling+0xd80>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	425b      	negs	r3, r3
 80022aa:	4a65      	ldr	r2, [pc, #404]	; (8002440 <sampling+0xd80>)
 80022ac:	6053      	str	r3, [r2, #4]

			sample_accus[2] = sample_accus[2] + note_tuned[2];
 80022ae:	4b64      	ldr	r3, [pc, #400]	; (8002440 <sampling+0xd80>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	4a64      	ldr	r2, [pc, #400]	; (8002444 <sampling+0xd84>)
 80022b4:	8892      	ldrh	r2, [r2, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	4a61      	ldr	r2, [pc, #388]	; (8002440 <sampling+0xd80>)
 80022ba:	6093      	str	r3, [r2, #8]
			//		if (!(note_channel[0]))   sample_accus[2] =0;  // turn off with vel now , maybe use mask
					if (sample_accus[2]>524287) sample_accus[2] =-sample_accus[2] ; // faster >  than &  ,strange
 80022bc:	4b60      	ldr	r3, [pc, #384]	; (8002440 <sampling+0xd80>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022c4:	db04      	blt.n	80022d0 <sampling+0xc10>
 80022c6:	4b5e      	ldr	r3, [pc, #376]	; (8002440 <sampling+0xd80>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	425b      	negs	r3, r3
 80022cc:	4a5c      	ldr	r2, [pc, #368]	; (8002440 <sampling+0xd80>)
 80022ce:	6093      	str	r3, [r2, #8]

					sample_accus[3] = sample_accus[3] + note_tuned[3]; // bouncing somewhere
 80022d0:	4b5b      	ldr	r3, [pc, #364]	; (8002440 <sampling+0xd80>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4a5b      	ldr	r2, [pc, #364]	; (8002444 <sampling+0xd84>)
 80022d6:	88d2      	ldrh	r2, [r2, #6]
 80022d8:	4413      	add	r3, r2
 80022da:	4a59      	ldr	r2, [pc, #356]	; (8002440 <sampling+0xd80>)
 80022dc:	60d3      	str	r3, [r2, #12]
					//sample_accus[3] = sample_accus[3] +4000;
					//	if (!(note_channel[0]))   sample_accus[3] =0;  // turn off with vel now , maybe use mask
							if (sample_accus[3]>524287) sample_accus[3] =-sample_accus[3] ; // faster >  than &  ,strange
 80022de:	4b58      	ldr	r3, [pc, #352]	; (8002440 <sampling+0xd80>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022e6:	db04      	blt.n	80022f2 <sampling+0xc32>
 80022e8:	4b55      	ldr	r3, [pc, #340]	; (8002440 <sampling+0xd80>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	425b      	negs	r3, r3
 80022ee:	4a54      	ldr	r2, [pc, #336]	; (8002440 <sampling+0xd80>)
 80022f0:	60d3      	str	r3, [r2, #12]

							sample_accus[4] = sample_accus[4] + note_tuned[4];
 80022f2:	4b53      	ldr	r3, [pc, #332]	; (8002440 <sampling+0xd80>)
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	4a53      	ldr	r2, [pc, #332]	; (8002444 <sampling+0xd84>)
 80022f8:	8912      	ldrh	r2, [r2, #8]
 80022fa:	4413      	add	r3, r2
 80022fc:	4a50      	ldr	r2, [pc, #320]	; (8002440 <sampling+0xd80>)
 80022fe:	6113      	str	r3, [r2, #16]
								//	if (!(note_channel[4]))   sample_accus[4] =0;  // turn off with vel now , maybe use mask
									if (sample_accus[4]>524287) sample_accus[4] =-sample_accus[4] ; // faster >  than &  ,strange
 8002300:	4b4f      	ldr	r3, [pc, #316]	; (8002440 <sampling+0xd80>)
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002308:	db04      	blt.n	8002314 <sampling+0xc54>
 800230a:	4b4d      	ldr	r3, [pc, #308]	; (8002440 <sampling+0xd80>)
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	425b      	negs	r3, r3
 8002310:	4a4b      	ldr	r2, [pc, #300]	; (8002440 <sampling+0xd80>)
 8002312:	6113      	str	r3, [r2, #16]

									sample_Accu[2] = 0;sample_Accu[0] =0;sample_Accu[3] =0; //all zeroed
 8002314:	4b4c      	ldr	r3, [pc, #304]	; (8002448 <sampling+0xd88>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	4b4b      	ldr	r3, [pc, #300]	; (8002448 <sampling+0xd88>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	4b49      	ldr	r3, [pc, #292]	; (8002448 <sampling+0xd88>)
 8002322:	2200      	movs	r2, #0
 8002324:	60da      	str	r2, [r3, #12]
									//if (sample_accus[2]<0) sample_Accu[2]=+sample_accus[2]; else sample_Accu[2]=sample_accus[2]; // convert to triangle ?
									sample_Accu[0]=sample_accus[2]>>7; // needs cut a bit
 8002326:	4b46      	ldr	r3, [pc, #280]	; (8002440 <sampling+0xd80>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	11db      	asrs	r3, r3, #7
 800232c:	4a46      	ldr	r2, [pc, #280]	; (8002448 <sampling+0xd88>)
 800232e:	6013      	str	r3, [r2, #0]

							sample_Accu[0] = ((sine_out+sample_Accu[0])*cross_fade[1]);   // sine input
 8002330:	4b45      	ldr	r3, [pc, #276]	; (8002448 <sampling+0xd88>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b45      	ldr	r3, [pc, #276]	; (800244c <sampling+0xd8c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4413      	add	r3, r2
 800233a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800233e:	f102 0219 	add.w	r2, r2, #25
 8002342:	7812      	ldrb	r2, [r2, #0]
 8002344:	fb02 f303 	mul.w	r3, r2, r3
 8002348:	4a3f      	ldr	r2, [pc, #252]	; (8002448 <sampling+0xd88>)
 800234a:	6013      	str	r3, [r2, #0]

									//if (sample_accus[3]<0) sample_Accu[3]=+sample_accus[3]; else sample_Accu[3]=sample_accus[3]; // convert to triangle
									sample_Accu[3]=sample_accus[3];
 800234c:	4b3c      	ldr	r3, [pc, #240]	; (8002440 <sampling+0xd80>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a3d      	ldr	r2, [pc, #244]	; (8002448 <sampling+0xd88>)
 8002352:	60d3      	str	r3, [r2, #12]
									sample_Accu[2] = (sample_Accu[3]*cross_fade[2]);			//27b, 2 out f2  might do a crossfade here using pot 3
 8002354:	4b3c      	ldr	r3, [pc, #240]	; (8002448 <sampling+0xd88>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800235c:	f102 021a 	add.w	r2, r2, #26
 8002360:	7812      	ldrb	r2, [r2, #0]
 8002362:	fb02 f303 	mul.w	r3, r2, r3
 8002366:	4a38      	ldr	r2, [pc, #224]	; (8002448 <sampling+0xd88>)
 8002368:	6093      	str	r3, [r2, #8]
									//	sample_Accu[5] = sample_Accu[4]+ (sample_accus[4]*4);			// drum and envelope

	//	sample_Accu=sample_Accu-(1<<21);


if (sine_counterB==0) 	sine_temp2=sine_adder;
 800236a:	4b39      	ldr	r3, [pc, #228]	; (8002450 <sampling+0xd90>)
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d103      	bne.n	800237a <sampling+0xcba>
 8002372:	4b38      	ldr	r3, [pc, #224]	; (8002454 <sampling+0xd94>)
 8002374:	881a      	ldrh	r2, [r3, #0]
 8002376:	4b38      	ldr	r3, [pc, #224]	; (8002458 <sampling+0xd98>)
 8002378:	801a      	strh	r2, [r3, #0]

	sine_counterB=sine_counterB+sine_temp2 ;  // sine up counter per cycle , however sine adder nees to wait
 800237a:	4b35      	ldr	r3, [pc, #212]	; (8002450 <sampling+0xd90>)
 800237c:	881a      	ldrh	r2, [r3, #0]
 800237e:	4b36      	ldr	r3, [pc, #216]	; (8002458 <sampling+0xd98>)
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	4413      	add	r3, r2
 8002384:	b29a      	uxth	r2, r3
 8002386:	4b32      	ldr	r3, [pc, #200]	; (8002450 <sampling+0xd90>)
 8002388:	801a      	strh	r2, [r3, #0]
	if (sine_counterB>>7) sine_zero=0; else sine_zero=1;
 800238a:	4b31      	ldr	r3, [pc, #196]	; (8002450 <sampling+0xd90>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	09db      	lsrs	r3, r3, #7
 8002390:	b29b      	uxth	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d006      	beq.n	80023a4 <sampling+0xce4>
 8002396:	2300      	movs	r3, #0
 8002398:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800239c:	f102 021c 	add.w	r2, r2, #28
 80023a0:	8013      	strh	r3, [r2, #0]
 80023a2:	e005      	b.n	80023b0 <sampling+0xcf0>
 80023a4:	2301      	movs	r3, #1
 80023a6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80023aa:	f102 021c 	add.w	r2, r2, #28
 80023ae:	8013      	strh	r3, [r2, #0]

if (sine_counterB>(sine_length<<5)) sine_counterB=0; //fixed for now
 80023b0:	4b27      	ldr	r3, [pc, #156]	; (8002450 <sampling+0xd90>)
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b29      	ldr	r3, [pc, #164]	; (800245c <sampling+0xd9c>)
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	015b      	lsls	r3, r3, #5
 80023bc:	429a      	cmp	r2, r3
 80023be:	dd02      	ble.n	80023c6 <sampling+0xd06>
 80023c0:	4b23      	ldr	r3, [pc, #140]	; (8002450 <sampling+0xd90>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	801a      	strh	r2, [r3, #0]
sine_count(); // calc sine
 80023c6:	f000 fa7b 	bl	80028c0 <sine_count>
play_holder1[i]=sample_Accu[0];  // write to bank
 80023ca:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <sampling+0xd74>)
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	4619      	mov	r1, r3
 80023d0:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <sampling+0xd88>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80023d8:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 80023dc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
play_holder2[i]=sample_Accu[2];
 80023e0:	4b14      	ldr	r3, [pc, #80]	; (8002434 <sampling+0xd74>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <sampling+0xd88>)
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80023ee:	4619      	mov	r1, r3
 80023f0:	0083      	lsls	r3, r0, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	f843 2c9c 	str.w	r2, [r3, #-156]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 80023f8:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <sampling+0xd74>)
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	3301      	adds	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <sampling+0xd74>)
 8002402:	801a      	strh	r2, [r3, #0]
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <sampling+0xd74>)
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800240c:	f4ff af1c 	bcc.w	8002248 <sampling+0xb88>


} // end of osc , doing some sound

HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go
 8002410:	4813      	ldr	r0, [pc, #76]	; (8002460 <sampling+0xda0>)
 8002412:	f001 ff45 	bl	80042a0 <HAL_ADC_Stop_DMA>


HAL_ADC_Start_DMA(&hadc1, adc_source, 512); //dma start ,needs this and adc start ,set sampling time
 8002416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800241a:	4912      	ldr	r1, [pc, #72]	; (8002464 <sampling+0xda4>)
 800241c:	4810      	ldr	r0, [pc, #64]	; (8002460 <sampling+0xda0>)
 800241e:	f001 fe4f 	bl	80040c0 <HAL_ADC_Start_DMA>

int32_t filter_Accu;


int32_t feedback_out=filter_out[3];
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <sampling+0xda8>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800242a:	6013      	str	r3, [r2, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 800242c:	4b01      	ldr	r3, [pc, #4]	; (8002434 <sampling+0xd74>)
 800242e:	2200      	movs	r2, #0
 8002430:	801a      	strh	r2, [r3, #0]
 8002432:	e22f      	b.n	8002894 <sampling+0x11d4>
 8002434:	20000c3c 	.word	0x20000c3c
 8002438:	20000c3a 	.word	0x20000c3a
 800243c:	20001e14 	.word	0x20001e14
 8002440:	20001cd0 	.word	0x20001cd0
 8002444:	20000bf8 	.word	0x20000bf8
 8002448:	20000c1c 	.word	0x20000c1c
 800244c:	20000bf0 	.word	0x20000bf0
 8002450:	20000bee 	.word	0x20000bee
 8002454:	20000c16 	.word	0x20000c16
 8002458:	20000bf4 	.word	0x20000bf4
 800245c:	2000024e 	.word	0x2000024e
 8002460:	20002a00 	.word	0x20002a00
 8002464:	20001488 	.word	0x20001488
 8002468:	20001cb4 	.word	0x20001cb4
	i_total=i+sample_pointB;
 800246c:	4b36      	ldr	r3, [pc, #216]	; (8002548 <sampling+0xe88>)
 800246e:	881a      	ldrh	r2, [r3, #0]
 8002470:	4b36      	ldr	r3, [pc, #216]	; (800254c <sampling+0xe8c>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	4413      	add	r3, r2
 8002476:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800247a:	f102 021e 	add.w	r2, r2, #30
 800247e:	8013      	strh	r3, [r2, #0]
i_frac=(i>>6);
 8002480:	4b31      	ldr	r3, [pc, #196]	; (8002548 <sampling+0xe88>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	099b      	lsrs	r3, r3, #6
 8002486:	b29b      	uxth	r3, r3
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4b31      	ldr	r3, [pc, #196]	; (8002550 <sampling+0xe90>)
 800248c:	701a      	strb	r2, [r3, #0]

// filter 1
if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{adsr_temp =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 800248e:	4b2e      	ldr	r3, [pc, #184]	; (8002548 <sampling+0xe88>)
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	b29b      	uxth	r3, r3
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800249c:	443b      	add	r3, r7
 800249e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80024a2:	4a29      	ldr	r2, [pc, #164]	; (8002548 <sampling+0xe88>)
 80024a4:	8812      	ldrh	r2, [r2, #0]
 80024a6:	f002 021f 	and.w	r2, r2, #31
 80024aa:	2101      	movs	r1, #1
 80024ac:	fa01 f202 	lsl.w	r2, r1, r2
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d10f      	bne.n	80024d4 <sampling+0xe14>
 80024b4:	4b27      	ldr	r3, [pc, #156]	; (8002554 <sampling+0xe94>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	4b27      	ldr	r3, [pc, #156]	; (8002558 <sampling+0xe98>)
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	3301      	adds	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	4b25      	ldr	r3, [pc, #148]	; (8002558 <sampling+0xe98>)
 80024c4:	801a      	strh	r2, [r3, #0]
 80024c6:	4b24      	ldr	r3, [pc, #144]	; (8002558 <sampling+0xe98>)
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	4b21      	ldr	r3, [pc, #132]	; (8002558 <sampling+0xe98>)
 80024d2:	801a      	strh	r2, [r3, #0]

//if (feedback_out>0xFFFF) feedback_out=0xFFFF; else if (feedback_out<-65535) feedback_out=-65535;  // limiter to 16 bits
sample_Accu[1]=input_holder[i];
 80024d4:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <sampling+0xe88>)
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <sampling+0xe9c>)
 80024dc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80024e0:	461a      	mov	r2, r3
 80024e2:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <sampling+0xea0>)
 80024e4:	605a      	str	r2, [r3, #4]

sample_Accu[1]=(sample_Accu[1]-1020)<<15; // shit to correct level
 80024e6:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <sampling+0xea0>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80024ee:	03db      	lsls	r3, r3, #15
 80024f0:	4a1b      	ldr	r2, [pc, #108]	; (8002560 <sampling+0xea0>)
 80024f2:	6053      	str	r3, [r2, #4]
//sample_Accu[1]=sample_Accu[1]-60000;
//sample_Accu[1]=play_holder1[i];  // sine input

freq_point[0]=freq_pointer[0] [i_frac];; // load up coeffs
 80024f4:	4b16      	ldr	r3, [pc, #88]	; (8002550 <sampling+0xe90>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	4a1a      	ldr	r2, [pc, #104]	; (8002564 <sampling+0xea4>)
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a19      	ldr	r2, [pc, #100]	; (8002568 <sampling+0xea8>)
 8002502:	6013      	str	r3, [r2, #0]
//freq_point[1]=freq_pointer[1] [i_frac];
freq_point[2]=freq_pointer[2] [i_frac];  // ok , array was too short
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <sampling+0xe90>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	4a16      	ldr	r2, [pc, #88]	; (8002564 <sampling+0xea4>)
 800250a:	3312      	adds	r3, #18
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a15      	ldr	r2, [pc, #84]	; (8002568 <sampling+0xea8>)
 8002514:	6093      	str	r3, [r2, #8]
//freq_point[3]=freq_pointer[3] [i_frac];
//freq_point[0]=0.5;  //was ok with this
	//	freq_point[2]=0.5;


adsr_level[3] = adsr_lut	[i>>1];
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <sampling+0xe88>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	085b      	lsrs	r3, r3, #1
 800251c:	b29b      	uxth	r3, r3
 800251e:	4a13      	ldr	r2, [pc, #76]	; (800256c <sampling+0xeac>)
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a12      	ldr	r2, [pc, #72]	; (8002570 <sampling+0xeb0>)
 8002528:	60d3      	str	r3, [r2, #12]


if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 800252a:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <sampling+0xea8>)
 800252c:	edd3 7a00 	vldr	s15, [r3]
 8002530:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253c:	dd1a      	ble.n	8002574 <sampling+0xeb4>
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <sampling+0xea8>)
 8002540:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	e021      	b.n	800258c <sampling+0xecc>
 8002548:	20000c3c 	.word	0x20000c3c
 800254c:	20000c3a 	.word	0x20000c3a
 8002550:	20001e14 	.word	0x20001e14
 8002554:	20001c88 	.word	0x20001c88
 8002558:	20001e16 	.word	0x20001e16
 800255c:	20002600 	.word	0x20002600
 8002560:	20000c1c 	.word	0x20000c1c
 8002564:	20001d84 	.word	0x20001d84
 8002568:	20001d74 	.word	0x20001d74
 800256c:	20001888 	.word	0x20001888
 8002570:	200025b4 	.word	0x200025b4
 8002574:	4bae      	ldr	r3, [pc, #696]	; (8002830 <sampling+0x1170>)
 8002576:	edd3 7a00 	vldr	s15, [r3]
 800257a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800257e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002582:	d503      	bpl.n	800258c <sampling+0xecc>
 8002584:	4baa      	ldr	r3, [pc, #680]	; (8002830 <sampling+0x1170>)
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
		//freq_point[0]=0.50;
		freq_point[1]=1-freq_point[0];
 800258c:	4ba8      	ldr	r3, [pc, #672]	; (8002830 <sampling+0x1170>)
 800258e:	edd3 7a00 	vldr	s15, [r3]
 8002592:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259a:	4ba5      	ldr	r3, [pc, #660]	; (8002830 <sampling+0x1170>)
 800259c:	edc3 7a01 	vstr	s15, [r3, #4]
		filter_accus[1]=sample_Accu[1];
 80025a0:	4ba4      	ldr	r3, [pc, #656]	; (8002834 <sampling+0x1174>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	ee07 3a90 	vmov	s15, r3
 80025a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ac:	4ba2      	ldr	r3, [pc, #648]	; (8002838 <sampling+0x1178>)
 80025ae:	edc3 7a01 	vstr	s15, [r3, #4]
	//	filter_accus[1]=sample_Accu[1]+((filter_hold[0])*0.5); // saw
	//	filter_accus[1]=	filter_accus[1]*adsr_level[3][i_frac];
		filter_accus[1]=	filter_accus[1]*adsr_level[3];
 80025b2:	4ba1      	ldr	r3, [pc, #644]	; (8002838 <sampling+0x1178>)
 80025b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80025b8:	4ba0      	ldr	r3, [pc, #640]	; (800283c <sampling+0x117c>)
 80025ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80025be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c2:	4b9d      	ldr	r3, [pc, #628]	; (8002838 <sampling+0x1178>)
 80025c4:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);					// maybe allow bandpass insted of lpf
 80025c8:	4b9b      	ldr	r3, [pc, #620]	; (8002838 <sampling+0x1178>)
 80025ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80025ce:	4b98      	ldr	r3, [pc, #608]	; (8002830 <sampling+0x1170>)
 80025d0:	edd3 7a00 	vldr	s15, [r3]
 80025d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d8:	4b97      	ldr	r3, [pc, #604]	; (8002838 <sampling+0x1178>)
 80025da:	edd3 6a02 	vldr	s13, [r3, #8]
 80025de:	4b94      	ldr	r3, [pc, #592]	; (8002830 <sampling+0x1170>)
 80025e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80025e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ec:	4b92      	ldr	r3, [pc, #584]	; (8002838 <sampling+0x1178>)
 80025ee:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);
 80025f2:	4b91      	ldr	r3, [pc, #580]	; (8002838 <sampling+0x1178>)
 80025f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80025f8:	4b8d      	ldr	r3, [pc, #564]	; (8002830 <sampling+0x1170>)
 80025fa:	edd3 7a00 	vldr	s15, [r3]
 80025fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002602:	4b8d      	ldr	r3, [pc, #564]	; (8002838 <sampling+0x1178>)
 8002604:	edd3 6a03 	vldr	s13, [r3, #12]
 8002608:	4b89      	ldr	r3, [pc, #548]	; (8002830 <sampling+0x1170>)
 800260a:	edd3 7a01 	vldr	s15, [r3, #4]
 800260e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002616:	4b88      	ldr	r3, [pc, #544]	; (8002838 <sampling+0x1178>)
 8002618:	edc3 7a03 	vstr	s15, [r3, #12]
		filter_accus[4]=(filter_accus[3]*freq_point[0])+(filter_accus[4]*freq_point[1]);
 800261c:	4b86      	ldr	r3, [pc, #536]	; (8002838 <sampling+0x1178>)
 800261e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002622:	4b83      	ldr	r3, [pc, #524]	; (8002830 <sampling+0x1170>)
 8002624:	edd3 7a00 	vldr	s15, [r3]
 8002628:	ee27 7a27 	vmul.f32	s14, s14, s15
 800262c:	4b82      	ldr	r3, [pc, #520]	; (8002838 <sampling+0x1178>)
 800262e:	edd3 6a04 	vldr	s13, [r3, #16]
 8002632:	4b7f      	ldr	r3, [pc, #508]	; (8002830 <sampling+0x1170>)
 8002634:	edd3 7a01 	vldr	s15, [r3, #4]
 8002638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800263c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002640:	4b7d      	ldr	r3, [pc, #500]	; (8002838 <sampling+0x1178>)
 8002642:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[0])+(filter_accus[5]*freq_point[1]);
 8002646:	4b7c      	ldr	r3, [pc, #496]	; (8002838 <sampling+0x1178>)
 8002648:	ed93 7a04 	vldr	s14, [r3, #16]
 800264c:	4b78      	ldr	r3, [pc, #480]	; (8002830 <sampling+0x1170>)
 800264e:	edd3 7a00 	vldr	s15, [r3]
 8002652:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002656:	4b78      	ldr	r3, [pc, #480]	; (8002838 <sampling+0x1178>)
 8002658:	edd3 6a05 	vldr	s13, [r3, #20]
 800265c:	4b74      	ldr	r3, [pc, #464]	; (8002830 <sampling+0x1170>)
 800265e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266a:	4b73      	ldr	r3, [pc, #460]	; (8002838 <sampling+0x1178>)
 800266c:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_hold[0]=(filter_accus[5]+filter_accus[11])*0.5; //half sample , nice
 8002670:	4b71      	ldr	r3, [pc, #452]	; (8002838 <sampling+0x1178>)
 8002672:	ed93 7a05 	vldr	s14, [r3, #20]
 8002676:	4b70      	ldr	r3, [pc, #448]	; (8002838 <sampling+0x1178>)
 8002678:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800267c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002680:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002684:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002688:	4b6d      	ldr	r3, [pc, #436]	; (8002840 <sampling+0x1180>)
 800268a:	edc3 7a00 	vstr	s15, [r3]
		sample_Accu[0] =filter_accus[5]; // out
 800268e:	4b6a      	ldr	r3, [pc, #424]	; (8002838 <sampling+0x1178>)
 8002690:	edd3 7a05 	vldr	s15, [r3, #20]
 8002694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002698:	ee17 2a90 	vmov	r2, s15
 800269c:	4b65      	ldr	r3, [pc, #404]	; (8002834 <sampling+0x1174>)
 800269e:	601a      	str	r2, [r3, #0]
		filter_accus[11]=filter_accus[5]; //write back new value
 80026a0:	4b65      	ldr	r3, [pc, #404]	; (8002838 <sampling+0x1178>)
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	4a64      	ldr	r2, [pc, #400]	; (8002838 <sampling+0x1178>)
 80026a6:	62d3      	str	r3, [r2, #44]	; 0x2c

		//filter 2
		//sample_Accu[3]=play_holder2[i] >>5; // sine


				if (freq_point[2]>1) freq_point[2]=1;
 80026a8:	4b61      	ldr	r3, [pc, #388]	; (8002830 <sampling+0x1170>)
 80026aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80026ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ba:	dd03      	ble.n	80026c4 <sampling+0x1004>
 80026bc:	4b5c      	ldr	r3, [pc, #368]	; (8002830 <sampling+0x1170>)
 80026be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80026c2:	609a      	str	r2, [r3, #8]

				freq_point[3]=1-freq_point[2];
 80026c4:	4b5a      	ldr	r3, [pc, #360]	; (8002830 <sampling+0x1170>)
 80026c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80026ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d2:	4b57      	ldr	r3, [pc, #348]	; (8002830 <sampling+0x1170>)
 80026d4:	edc3 7a03 	vstr	s15, [r3, #12]
				filter_accus[6]=sample_Accu[3];
 80026d8:	4b56      	ldr	r3, [pc, #344]	; (8002834 <sampling+0x1174>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	ee07 3a90 	vmov	s15, r3
 80026e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026e4:	4b54      	ldr	r3, [pc, #336]	; (8002838 <sampling+0x1178>)
 80026e6:	edc3 7a06 	vstr	s15, [r3, #24]
				filter_accus[6]= filter_accus[6]*adsr_level[3]; // add adsr envelope
 80026ea:	4b53      	ldr	r3, [pc, #332]	; (8002838 <sampling+0x1178>)
 80026ec:	ed93 7a06 	vldr	s14, [r3, #24]
 80026f0:	4b52      	ldr	r3, [pc, #328]	; (800283c <sampling+0x117c>)
 80026f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80026f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fa:	4b4f      	ldr	r3, [pc, #316]	; (8002838 <sampling+0x1178>)
 80026fc:	edc3 7a06 	vstr	s15, [r3, #24]

				filter_accus[7]=(filter_accus[6]*freq_point[2])+(filter_accus[7]*freq_point[3]);
 8002700:	4b4d      	ldr	r3, [pc, #308]	; (8002838 <sampling+0x1178>)
 8002702:	ed93 7a06 	vldr	s14, [r3, #24]
 8002706:	4b4a      	ldr	r3, [pc, #296]	; (8002830 <sampling+0x1170>)
 8002708:	edd3 7a02 	vldr	s15, [r3, #8]
 800270c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002710:	4b49      	ldr	r3, [pc, #292]	; (8002838 <sampling+0x1178>)
 8002712:	edd3 6a07 	vldr	s13, [r3, #28]
 8002716:	4b46      	ldr	r3, [pc, #280]	; (8002830 <sampling+0x1170>)
 8002718:	edd3 7a03 	vldr	s15, [r3, #12]
 800271c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002724:	4b44      	ldr	r3, [pc, #272]	; (8002838 <sampling+0x1178>)
 8002726:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[2])+(filter_accus[8]*freq_point[3]);
 800272a:	4b43      	ldr	r3, [pc, #268]	; (8002838 <sampling+0x1178>)
 800272c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002730:	4b3f      	ldr	r3, [pc, #252]	; (8002830 <sampling+0x1170>)
 8002732:	edd3 7a02 	vldr	s15, [r3, #8]
 8002736:	ee27 7a27 	vmul.f32	s14, s14, s15
 800273a:	4b3f      	ldr	r3, [pc, #252]	; (8002838 <sampling+0x1178>)
 800273c:	edd3 6a08 	vldr	s13, [r3, #32]
 8002740:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <sampling+0x1170>)
 8002742:	edd3 7a03 	vldr	s15, [r3, #12]
 8002746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800274a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274e:	4b3a      	ldr	r3, [pc, #232]	; (8002838 <sampling+0x1178>)
 8002750:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[2])+(filter_accus[9]*freq_point[3]);
 8002754:	4b38      	ldr	r3, [pc, #224]	; (8002838 <sampling+0x1178>)
 8002756:	ed93 7a08 	vldr	s14, [r3, #32]
 800275a:	4b35      	ldr	r3, [pc, #212]	; (8002830 <sampling+0x1170>)
 800275c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002760:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002764:	4b34      	ldr	r3, [pc, #208]	; (8002838 <sampling+0x1178>)
 8002766:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800276a:	4b31      	ldr	r3, [pc, #196]	; (8002830 <sampling+0x1170>)
 800276c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002770:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002778:	4b2f      	ldr	r3, [pc, #188]	; (8002838 <sampling+0x1178>)
 800277a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				filter_accus[10]=(filter_accus[9]*freq_point[2])+(filter_accus[10]*freq_point[3]);
 800277e:	4b2e      	ldr	r3, [pc, #184]	; (8002838 <sampling+0x1178>)
 8002780:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002784:	4b2a      	ldr	r3, [pc, #168]	; (8002830 <sampling+0x1170>)
 8002786:	edd3 7a02 	vldr	s15, [r3, #8]
 800278a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800278e:	4b2a      	ldr	r3, [pc, #168]	; (8002838 <sampling+0x1178>)
 8002790:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002794:	4b26      	ldr	r3, [pc, #152]	; (8002830 <sampling+0x1170>)
 8002796:	edd3 7a03 	vldr	s15, [r3, #12]
 800279a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800279e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a2:	4b25      	ldr	r3, [pc, #148]	; (8002838 <sampling+0x1178>)
 80027a4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_hold[1]=(filter_accus[10]+filter_accus[12])*0.5; //half sample
 80027a8:	4b23      	ldr	r3, [pc, #140]	; (8002838 <sampling+0x1178>)
 80027aa:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80027ae:	4b22      	ldr	r3, [pc, #136]	; (8002838 <sampling+0x1178>)
 80027b0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80027b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027c0:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <sampling+0x1180>)
 80027c2:	edc3 7a01 	vstr	s15, [r3, #4]
				sample_Accu[2] =filter_accus[10]; //out
 80027c6:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <sampling+0x1178>)
 80027c8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80027cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027d0:	ee17 2a90 	vmov	r2, s15
 80027d4:	4b17      	ldr	r3, [pc, #92]	; (8002834 <sampling+0x1174>)
 80027d6:	609a      	str	r2, [r3, #8]
				filter_accus[12]=filter_accus[10]; //write back new value
 80027d8:	4b17      	ldr	r3, [pc, #92]	; (8002838 <sampling+0x1178>)
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	4a16      	ldr	r2, [pc, #88]	; (8002838 <sampling+0x1178>)
 80027de:	6313      	str	r3, [r2, #48]	; 0x30


filter_Accu=0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80027e6:	f102 0210 	add.w	r2, r2, #16
 80027ea:	6013      	str	r3, [r2, #0]
//filter_Accu=(sample_Accu[0]+sample_Accu[2])>>8; //filter + drum out


//filter_Accu=(sample_Accu[1]+sample_Accu[3])>>8; //filter + drum out ,clean out
 filter_Accu=sample_Accu[1]>>8;
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <sampling+0x1174>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	121b      	asrs	r3, r3, #8
 80027f2:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80027f6:	f102 0210 	add.w	r2, r2, #16
 80027fa:	6013      	str	r3, [r2, #0]
//filter_Accu=(sample_Accu[1]>>7)+(sample_Accu[3]>>8); //filter + drum out
 if (one_shot!=199)   one_shot++;  //play one attack then stop
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <sampling+0x1184>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2bc7      	cmp	r3, #199	; 0xc7
 8002802:	d005      	beq.n	8002810 <sampling+0x1150>
 8002804:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <sampling+0x1184>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	3301      	adds	r3, #1
 800280a:	b2da      	uxtb	r2, r3
 800280c:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <sampling+0x1184>)
 800280e:	701a      	strb	r2, [r3, #0]

 if (filter_Accu>0xFFFF) filter_Accu=0xFFFF; else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 8002810:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002814:	f103 0310 	add.w	r3, r3, #16
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281e:	db13      	blt.n	8002848 <sampling+0x1188>
 8002820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002824:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002828:	f102 0210 	add.w	r2, r2, #16
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e019      	b.n	8002864 <sampling+0x11a4>
 8002830:	20001d74 	.word	0x20001d74
 8002834:	20000c1c 	.word	0x20000c1c
 8002838:	20001d24 	.word	0x20001d24
 800283c:	200025b4 	.word	0x200025b4
 8002840:	20001d60 	.word	0x20001d60
 8002844:	20001ce8 	.word	0x20001ce8
 8002848:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800284c:	f103 0310 	add.w	r3, r3, #16
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002856:	dc05      	bgt.n	8002864 <sampling+0x11a4>
 8002858:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <sampling+0x11f0>)
 800285a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800285e:	f102 0210 	add.w	r2, r2, #16
 8002862:	6013      	str	r3, [r2, #0]


 play_sample[i_total]=(filter_Accu>>6)+1023;   // final output disable for now
 8002864:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002868:	f103 0310 	add.w	r3, r3, #16
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	119b      	asrs	r3, r3, #6
 8002870:	b29a      	uxth	r2, r3
 8002872:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002876:	f103 031e 	add.w	r3, r3, #30
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8002880:	b291      	uxth	r1, r2
 8002882:	4a0c      	ldr	r2, [pc, #48]	; (80028b4 <sampling+0x11f4>)
 8002884:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <sampling+0x11f8>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	3301      	adds	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <sampling+0x11f8>)
 8002892:	801a      	strh	r2, [r3, #0]
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <sampling+0x11f8>)
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800289c:	f4ff ade6 	bcc.w	800246c <sampling+0xdac>
 //play_sample[i_total]=(input_holder[i]);  // works good

} // end of filer


bank_write=0;
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <sampling+0x11fc>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	801a      	strh	r2, [r3, #0]
}
 80028a6:	bf00      	nop
 80028a8:	f507 5785 	add.w	r7, r7, #4256	; 0x10a0
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bdb0      	pop	{r4, r5, r7, pc}
 80028b0:	ffff0001 	.word	0xffff0001
 80028b4:	20000c40 	.word	0x20000c40
 80028b8:	20000c3c 	.word	0x20000c3c
 80028bc:	200002be 	.word	0x200002be

080028c0 <sine_count>:
mask_result=mask_tempB &1;


}

void sine_count(void) {         // sine_out is the output 9  bit  , works
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
int32_t sine_tempA;
int32_t sine_tempB;
int8_t sine_frac;


sine_counter=(sine_counterB>>5);  // up countr controlled by counter
 80028c6:	4b2f      	ldr	r3, [pc, #188]	; (8002984 <sine_count+0xc4>)
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <sine_count+0xc8>)
 80028d0:	801a      	strh	r2, [r3, #0]
sine_frac=sine_counterB & 31;  // grab last 5 bits, actual position for linear interpol,fractional
 80028d2:	4b2c      	ldr	r3, [pc, #176]	; (8002984 <sine_count+0xc4>)
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	b25b      	sxtb	r3, r3
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	73fb      	strb	r3, [r7, #15]

	if (sine_counter>sine_length) sine_counter = sine_length;		// seems to be faster than using a for loop to calculate both values
 80028de:	4b2a      	ldr	r3, [pc, #168]	; (8002988 <sine_count+0xc8>)
 80028e0:	881a      	ldrh	r2, [r3, #0]
 80028e2:	4b2a      	ldr	r3, [pc, #168]	; (800298c <sine_count+0xcc>)
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d903      	bls.n	80028f2 <sine_count+0x32>
 80028ea:	4b28      	ldr	r3, [pc, #160]	; (800298c <sine_count+0xcc>)
 80028ec:	881a      	ldrh	r2, [r3, #0]
 80028ee:	4b26      	ldr	r3, [pc, #152]	; (8002988 <sine_count+0xc8>)
 80028f0:	801a      	strh	r2, [r3, #0]

	sine_out = sine_block[sine_counter];  // 0- 40000
 80028f2:	4b25      	ldr	r3, [pc, #148]	; (8002988 <sine_count+0xc8>)
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	4b25      	ldr	r3, [pc, #148]	; (8002990 <sine_count+0xd0>)
 80028fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80028fe:	461a      	mov	r2, r3
 8002900:	4b24      	ldr	r3, [pc, #144]	; (8002994 <sine_count+0xd4>)
 8002902:	601a      	str	r2, [r3, #0]
	sine_tempA=sine_out; // grab first value , needs to be always plus
 8002904:	4b23      	ldr	r3, [pc, #140]	; (8002994 <sine_count+0xd4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60bb      	str	r3, [r7, #8]
	sine_tempA=sine_tempA-20000; //convert to signed
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002910:	3b20      	subs	r3, #32
 8002912:	60bb      	str	r3, [r7, #8]

	sine_counter++;
 8002914:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <sine_count+0xc8>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	3301      	adds	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <sine_count+0xc8>)
 800291e:	801a      	strh	r2, [r3, #0]
	if (sine_counter>=sine_length)  sine_counter=0; // set to sample length
 8002920:	4b19      	ldr	r3, [pc, #100]	; (8002988 <sine_count+0xc8>)
 8002922:	881a      	ldrh	r2, [r3, #0]
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <sine_count+0xcc>)
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d302      	bcc.n	8002932 <sine_count+0x72>
 800292c:	4b16      	ldr	r3, [pc, #88]	; (8002988 <sine_count+0xc8>)
 800292e:	2200      	movs	r2, #0
 8002930:	801a      	strh	r2, [r3, #0]

			sine_out = sine_block[sine_counter];  // grab second value
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <sine_count+0xc8>)
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <sine_count+0xd0>)
 800293a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800293e:	461a      	mov	r2, r3
 8002940:	4b14      	ldr	r3, [pc, #80]	; (8002994 <sine_count+0xd4>)
 8002942:	601a      	str	r2, [r3, #0]

		sine_tempB=sine_out; // grab first value
 8002944:	4b13      	ldr	r3, [pc, #76]	; (8002994 <sine_count+0xd4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB-20000;  // convert to signed and +256 to -256
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002950:	3b20      	subs	r3, #32
 8002952:	607b      	str	r3, [r7, #4]

			sine_tempB=	sine_tempB-sine_tempA;   // calculate fraction then add
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB>>5; // div 32 or 32 upsample
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	115b      	asrs	r3, r3, #5
 8002960:	607b      	str	r3, [r7, #4]

			sine_tempB=sine_tempB*sine_frac; // mult by steps , can overshoot !!
 8002962:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	fb02 f303 	mul.w	r3, r2, r3
 800296c:	607b      	str	r3, [r7, #4]

			sine_out=(sine_tempA+sine_tempB);   // add back to start value
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	4a07      	ldr	r2, [pc, #28]	; (8002994 <sine_count+0xd4>)
 8002976:	6013      	str	r3, [r2, #0]
			//sine_tempA=sine_tempA; //needs

			//sine_out=sine_tempA;


}
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	20000bee 	.word	0x20000bee
 8002988:	20000bec 	.word	0x20000bec
 800298c:	2000024e 	.word	0x2000024e
 8002990:	0800a2ec 	.word	0x0800a2ec
 8002994:	20000bf0 	.word	0x20000bf0

08002998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b0ac      	sub	sp, #176	; 0xb0
 800299c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800299e:	f001 f975 	bl	8003c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029a2:	f000 fb0d 	bl	8002fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029a6:	f000 fdab 	bl	8003500 <MX_GPIO_Init>
  MX_DMA_Init();
 80029aa:	f000 fd89 	bl	80034c0 <MX_DMA_Init>
  MX_ADC1_Init();
 80029ae:	f000 fb71 	bl	8003094 <MX_ADC1_Init>
  MX_SPI2_Init();
 80029b2:	f000 fc31 	bl	8003218 <MX_SPI2_Init>
  MX_TIM3_Init();
 80029b6:	f000 fcb9 	bl	800332c <MX_TIM3_Init>
  MX_TIM4_Init();
 80029ba:	f000 fd2d 	bl	8003418 <MX_TIM4_Init>
  MX_I2C2_Init();
 80029be:	f000 fbfd 	bl	80031bc <MX_I2C2_Init>
  MX_TIM2_Init();
 80029c2:	f000 fc5f 	bl	8003284 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 80029c6:	4ba0      	ldr	r3, [pc, #640]	; (8002c48 <main+0x2b0>)
 80029c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2); // write to register hspi2
 80029cc:	489f      	ldr	r0, [pc, #636]	; (8002c4c <main+0x2b4>)
 80029ce:	f004 fd01 	bl	80073d4 <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 80029d2:	489f      	ldr	r0, [pc, #636]	; (8002c50 <main+0x2b8>)
 80029d4:	f005 f838 	bl	8007a48 <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 80029d8:	4b9e      	ldr	r3, [pc, #632]	; (8002c54 <main+0x2bc>)
 80029da:	2200      	movs	r2, #0
 80029dc:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 80029de:	489e      	ldr	r0, [pc, #632]	; (8002c58 <main+0x2c0>)
 80029e0:	f004 ffd8 	bl	8007994 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 80029e4:	489d      	ldr	r0, [pc, #628]	; (8002c5c <main+0x2c4>)
 80029e6:	f004 ffd5 	bl	8007994 <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80029ea:	2108      	movs	r1, #8
 80029ec:	4898      	ldr	r0, [pc, #608]	; (8002c50 <main+0x2b8>)
 80029ee:	f005 f8e7 	bl	8007bc0 <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 80029f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029f6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 80029fc:	4898      	ldr	r0, [pc, #608]	; (8002c60 <main+0x2c8>)
 80029fe:	f001 fa1f 	bl	8003e40 <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 512); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8002a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a06:	4997      	ldr	r1, [pc, #604]	; (8002c64 <main+0x2cc>)
 8002a08:	4895      	ldr	r0, [pc, #596]	; (8002c60 <main+0x2c8>)
 8002a0a:	f001 fb59 	bl	80040c0 <HAL_ADC_Start_DMA>


HAL_I2C_MspInit(&hi2c2);
 8002a0e:	4896      	ldr	r0, [pc, #600]	; (8002c68 <main+0x2d0>)
 8002a10:	f000 feb6 	bl	8003780 <HAL_I2C_MspInit>
} // reads stored values for potvalues
*/

uint8_t potSource2[65];
uint8_t potSource3[65];
HAL_I2C_Mem_Read(&hi2c2, 160, (1<<6), 2,&potSource, 64,1000);		// all good
 8002a14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a18:	9302      	str	r3, [sp, #8]
 8002a1a:	2340      	movs	r3, #64	; 0x40
 8002a1c:	9301      	str	r3, [sp, #4]
 8002a1e:	4b93      	ldr	r3, [pc, #588]	; (8002c6c <main+0x2d4>)
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	2302      	movs	r3, #2
 8002a24:	2240      	movs	r2, #64	; 0x40
 8002a26:	21a0      	movs	r1, #160	; 0xa0
 8002a28:	488f      	ldr	r0, [pc, #572]	; (8002c68 <main+0x2d0>)
 8002a2a:	f003 fb0d 	bl	8006048 <HAL_I2C_Mem_Read>
HAL_I2C_Mem_Read(&hi2c2, 160, (2<<6), 2,&potSource2,64,1000);
 8002a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a32:	9302      	str	r3, [sp, #8]
 8002a34:	2340      	movs	r3, #64	; 0x40
 8002a36:	9301      	str	r3, [sp, #4]
 8002a38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	2302      	movs	r3, #2
 8002a40:	2280      	movs	r2, #128	; 0x80
 8002a42:	21a0      	movs	r1, #160	; 0xa0
 8002a44:	4888      	ldr	r0, [pc, #544]	; (8002c68 <main+0x2d0>)
 8002a46:	f003 faff 	bl	8006048 <HAL_I2C_Mem_Read>
HAL_I2C_Mem_Read(&hi2c2, 160, (3<<6), 2,&potSource3,64,1000);
 8002a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a4e:	9302      	str	r3, [sp, #8]
 8002a50:	2340      	movs	r3, #64	; 0x40
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	f107 030c 	add.w	r3, r7, #12
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	22c0      	movs	r2, #192	; 0xc0
 8002a5e:	21a0      	movs	r1, #160	; 0xa0
 8002a60:	4881      	ldr	r0, [pc, #516]	; (8002c68 <main+0x2d0>)
 8002a62:	f003 faf1 	bl	8006048 <HAL_I2C_Mem_Read>

for(i=0;i<1024;i++){
 8002a66:	4b82      	ldr	r3, [pc, #520]	; (8002c70 <main+0x2d8>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	801a      	strh	r2, [r3, #0]
 8002a6c:	e024      	b.n	8002ab8 <main+0x120>
//	gfx_ram[i]=gfx_char[((i>>5)&7)+((i>>8)<<3)]; // test input fill  8*128 v+h just normal characters
	gfx_ram[i&63] [i>>6]  =gfx_char[8+(i&7)+(((i>>3)*8)&63)];
 8002a6e:	4b80      	ldr	r3, [pc, #512]	; (8002c70 <main+0x2d8>)
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	f103 0208 	add.w	r2, r3, #8
 8002a7a:	4b7d      	ldr	r3, [pc, #500]	; (8002c70 <main+0x2d8>)
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	08db      	lsrs	r3, r3, #3
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a88:	441a      	add	r2, r3
 8002a8a:	4b79      	ldr	r3, [pc, #484]	; (8002c70 <main+0x2d8>)
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a92:	4977      	ldr	r1, [pc, #476]	; (8002c70 <main+0x2d8>)
 8002a94:	8809      	ldrh	r1, [r1, #0]
 8002a96:	0989      	lsrs	r1, r1, #6
 8002a98:	b289      	uxth	r1, r1
 8002a9a:	4608      	mov	r0, r1
 8002a9c:	4975      	ldr	r1, [pc, #468]	; (8002c74 <main+0x2dc>)
 8002a9e:	5c89      	ldrb	r1, [r1, r2]
 8002aa0:	4a75      	ldr	r2, [pc, #468]	; (8002c78 <main+0x2e0>)
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	4413      	add	r3, r2
 8002aa6:	4403      	add	r3, r0
 8002aa8:	460a      	mov	r2, r1
 8002aaa:	701a      	strb	r2, [r3, #0]
for(i=0;i<1024;i++){
 8002aac:	4b70      	ldr	r3, [pc, #448]	; (8002c70 <main+0x2d8>)
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	4b6e      	ldr	r3, [pc, #440]	; (8002c70 <main+0x2d8>)
 8002ab6:	801a      	strh	r2, [r3, #0]
 8002ab8:	4b6d      	ldr	r3, [pc, #436]	; (8002c70 <main+0x2d8>)
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac0:	d3d5      	bcc.n	8002a6e <main+0xd6>
//gfx_ram[i&63] [i>>6]  =250;
}

for(i=0;i<64;i++){
 8002ac2:	4b6b      	ldr	r3, [pc, #428]	; (8002c70 <main+0x2d8>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	801a      	strh	r2, [r3, #0]
 8002ac8:	e011      	b.n	8002aee <main+0x156>
	potSource[i+64]=potSource2[i];  //load up from eeprom
 8002aca:	4b69      	ldr	r3, [pc, #420]	; (8002c70 <main+0x2d8>)
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4b67      	ldr	r3, [pc, #412]	; (8002c70 <main+0x2d8>)
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	3340      	adds	r3, #64	; 0x40
 8002ad6:	32a0      	adds	r2, #160	; 0xa0
 8002ad8:	443a      	add	r2, r7
 8002ada:	f812 1c50 	ldrb.w	r1, [r2, #-80]
 8002ade:	4a63      	ldr	r2, [pc, #396]	; (8002c6c <main+0x2d4>)
 8002ae0:	54d1      	strb	r1, [r2, r3]
for(i=0;i<64;i++){
 8002ae2:	4b63      	ldr	r3, [pc, #396]	; (8002c70 <main+0x2d8>)
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	4b61      	ldr	r3, [pc, #388]	; (8002c70 <main+0x2d8>)
 8002aec:	801a      	strh	r2, [r3, #0]
 8002aee:	4b60      	ldr	r3, [pc, #384]	; (8002c70 <main+0x2d8>)
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	2b3f      	cmp	r3, #63	; 0x3f
 8002af4:	d9e9      	bls.n	8002aca <main+0x132>
}

for(i=0;i<64;i++){
 8002af6:	4b5e      	ldr	r3, [pc, #376]	; (8002c70 <main+0x2d8>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	801a      	strh	r2, [r3, #0]
 8002afc:	e011      	b.n	8002b22 <main+0x18a>
	potSource[i+128]=potSource3[i];
 8002afe:	4b5c      	ldr	r3, [pc, #368]	; (8002c70 <main+0x2d8>)
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b5a      	ldr	r3, [pc, #360]	; (8002c70 <main+0x2d8>)
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	3380      	adds	r3, #128	; 0x80
 8002b0a:	32a0      	adds	r2, #160	; 0xa0
 8002b0c:	443a      	add	r2, r7
 8002b0e:	f812 1c94 	ldrb.w	r1, [r2, #-148]
 8002b12:	4a56      	ldr	r2, [pc, #344]	; (8002c6c <main+0x2d4>)
 8002b14:	54d1      	strb	r1, [r2, r3]
for(i=0;i<64;i++){
 8002b16:	4b56      	ldr	r3, [pc, #344]	; (8002c70 <main+0x2d8>)
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	4b54      	ldr	r3, [pc, #336]	; (8002c70 <main+0x2d8>)
 8002b20:	801a      	strh	r2, [r3, #0]
 8002b22:	4b53      	ldr	r3, [pc, #332]	; (8002c70 <main+0x2d8>)
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	2b3f      	cmp	r3, #63	; 0x3f
 8002b28:	d9e9      	bls.n	8002afe <main+0x166>
}

for(i=0;i<180;i++){
 8002b2a:	4b51      	ldr	r3, [pc, #324]	; (8002c70 <main+0x2d8>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	801a      	strh	r2, [r3, #0]
 8002b30:	e010      	b.n	8002b54 <main+0x1bc>
	potValues[i]=potSource[i]>>4;
 8002b32:	4b4f      	ldr	r3, [pc, #316]	; (8002c70 <main+0x2d8>)
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b4c      	ldr	r3, [pc, #304]	; (8002c6c <main+0x2d4>)
 8002b3a:	5c9b      	ldrb	r3, [r3, r2]
 8002b3c:	4a4c      	ldr	r2, [pc, #304]	; (8002c70 <main+0x2d8>)
 8002b3e:	8812      	ldrh	r2, [r2, #0]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	b2d9      	uxtb	r1, r3
 8002b44:	4b4d      	ldr	r3, [pc, #308]	; (8002c7c <main+0x2e4>)
 8002b46:	5499      	strb	r1, [r3, r2]
for(i=0;i<180;i++){
 8002b48:	4b49      	ldr	r3, [pc, #292]	; (8002c70 <main+0x2d8>)
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	4b47      	ldr	r3, [pc, #284]	; (8002c70 <main+0x2d8>)
 8002b52:	801a      	strh	r2, [r3, #0]
 8002b54:	4b46      	ldr	r3, [pc, #280]	; (8002c70 <main+0x2d8>)
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	2bb3      	cmp	r3, #179	; 0xb3
 8002b5a:	d9ea      	bls.n	8002b32 <main+0x19a>
}

float tempo_hold;  // calculate tempo look up
for (i=0;i<161;i++) {
 8002b5c:	4b44      	ldr	r3, [pc, #272]	; (8002c70 <main+0x2d8>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	801a      	strh	r2, [r3, #0]
 8002b62:	e040      	b.n	8002be6 <main+0x24e>

tempo_hold=(i+180)*0.0166666666;
 8002b64:	4b42      	ldr	r3, [pc, #264]	; (8002c70 <main+0x2d8>)
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	33b4      	adds	r3, #180	; 0xb4
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fd fe04 	bl	8000778 <__aeabi_i2d>
 8002b70:	a331      	add	r3, pc, #196	; (adr r3, 8002c38 <main+0x2a0>)
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	f7fd fb83 	bl	8000280 <__aeabi_dmul>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4610      	mov	r0, r2
 8002b80:	4619      	mov	r1, r3
 8002b82:	f7fd fe63 	bl	800084c <__aeabi_d2f>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

tempo_hold=	1/tempo_hold;
 8002b8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b90:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002b94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b98:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
//tempo_hold=	tempo_hold*2187.6*4;      // change for the sake of note length
tempo_hold=	tempo_hold*2187.6*1;      // change for the sake of note length
 8002b9c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002ba0:	f7fd fdfc 	bl	800079c <__aeabi_f2d>
 8002ba4:	a326      	add	r3, pc, #152	; (adr r3, 8002c40 <main+0x2a8>)
 8002ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002baa:	f7fd fb69 	bl	8000280 <__aeabi_dmul>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f7fd fe49 	bl	800084c <__aeabi_d2f>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
tempo_lut[i]=tempo_hold;
 8002bc0:	4b2b      	ldr	r3, [pc, #172]	; (8002c70 <main+0x2d8>)
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bce:	ee17 3a90 	vmov	r3, s15
 8002bd2:	b299      	uxth	r1, r3
 8002bd4:	4b2a      	ldr	r3, [pc, #168]	; (8002c80 <main+0x2e8>)
 8002bd6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<161;i++) {
 8002bda:	4b25      	ldr	r3, [pc, #148]	; (8002c70 <main+0x2d8>)
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	3301      	adds	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <main+0x2d8>)
 8002be4:	801a      	strh	r2, [r3, #0]
 8002be6:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <main+0x2d8>)
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	2ba0      	cmp	r3, #160	; 0xa0
 8002bec:	d9ba      	bls.n	8002b64 <main+0x1cc>
}
isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount
 8002bee:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <main+0x2ec>)
 8002bf0:	f240 223b 	movw	r2, #571	; 0x23b
 8002bf4:	801a      	strh	r2, [r3, #0]

noteTiming=24;
 8002bf6:	4b24      	ldr	r3, [pc, #144]	; (8002c88 <main+0x2f0>)
 8002bf8:	2218      	movs	r2, #24
 8002bfa:	701a      	strb	r2, [r3, #0]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8002bfc:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <main+0x2d8>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	801a      	strh	r2, [r3, #0]
 8002c02:	e00b      	b.n	8002c1c <main+0x284>
	spell[i]=67;
 8002c04:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <main+0x2d8>)
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <main+0x2f4>)
 8002c0c:	2143      	movs	r1, #67	; 0x43
 8002c0e:	5499      	strb	r1, [r3, r2]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8002c10:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <main+0x2d8>)
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	3301      	adds	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <main+0x2d8>)
 8002c1a:	801a      	strh	r2, [r3, #0]
 8002c1c:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <main+0x2d8>)
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002c24:	d3ee      	bcc.n	8002c04 <main+0x26c>

}

display_fill();
 8002c26:	f7fe fb67 	bl	80012f8 <display_fill>
// build display, enc_lut2, works good

for (i=0;i<512;i++)	{gfx_char[i]=gfx_char[i];
 8002c2a:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <main+0x2d8>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	801a      	strh	r2, [r3, #0]
 8002c30:	e03e      	b.n	8002cb0 <main+0x318>
 8002c32:	bf00      	nop
 8002c34:	f3af 8000 	nop.w
 8002c38:	0febdd13 	.word	0x0febdd13
 8002c3c:	3f911111 	.word	0x3f911111
 8002c40:	33333333 	.word	0x33333333
 8002c44:	40a11733 	.word	0x40a11733
 8002c48:	0800d2f0 	.word	0x0800d2f0
 8002c4c:	20002afc 	.word	0x20002afc
 8002c50:	20002b9c 	.word	0x20002b9c
 8002c54:	40000400 	.word	0x40000400
 8002c58:	20002b54 	.word	0x20002b54
 8002c5c:	20002be4 	.word	0x20002be4
 8002c60:	20002a00 	.word	0x20002a00
 8002c64:	20001488 	.word	0x20001488
 8002c68:	20002aa8 	.word	0x20002aa8
 8002c6c:	20000a64 	.word	0x20000a64
 8002c70:	20000c3c 	.word	0x20000c3c
 8002c74:	200002c0 	.word	0x200002c0
 8002c78:	200021b4 	.word	0x200021b4
 8002c7c:	200008e4 	.word	0x200008e4
 8002c80:	20002070 	.word	0x20002070
 8002c84:	20000bea 	.word	0x20000bea
 8002c88:	20000be3 	.word	0x20000be3
 8002c8c:	2000010c 	.word	0x2000010c
 8002c90:	4b74      	ldr	r3, [pc, #464]	; (8002e64 <main+0x4cc>)
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	4619      	mov	r1, r3
 8002c96:	4b73      	ldr	r3, [pc, #460]	; (8002e64 <main+0x4cc>)
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4b72      	ldr	r3, [pc, #456]	; (8002e68 <main+0x4d0>)
 8002c9e:	5c59      	ldrb	r1, [r3, r1]
 8002ca0:	4b71      	ldr	r3, [pc, #452]	; (8002e68 <main+0x4d0>)
 8002ca2:	5499      	strb	r1, [r3, r2]
 8002ca4:	4b6f      	ldr	r3, [pc, #444]	; (8002e64 <main+0x4cc>)
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	4b6d      	ldr	r3, [pc, #436]	; (8002e64 <main+0x4cc>)
 8002cae:	801a      	strh	r2, [r3, #0]
 8002cb0:	4b6c      	ldr	r3, [pc, #432]	; (8002e64 <main+0x4cc>)
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cb8:	d3ea      	bcc.n	8002c90 <main+0x2f8>

}    //font replace



uint16_t lut_temp2=0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
uint16_t lut_temp3=0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
for  (i=0;i<390;i++){					// get a few more pages
 8002cc6:	4b67      	ldr	r3, [pc, #412]	; (8002e64 <main+0x4cc>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	801a      	strh	r2, [r3, #0]
 8002ccc:	e027      	b.n	8002d1e <main+0x386>

	if (disp_lut [i>>4] [i&15] <95) lut_temp2=lut_temp2+1;    // skip space or characters
 8002cce:	4b65      	ldr	r3, [pc, #404]	; (8002e64 <main+0x4cc>)
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	091b      	lsrs	r3, r3, #4
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4b62      	ldr	r3, [pc, #392]	; (8002e64 <main+0x4cc>)
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	4962      	ldr	r1, [pc, #392]	; (8002e6c <main+0x4d4>)
 8002ce2:	0112      	lsls	r2, r2, #4
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002cea:	2b5e      	cmp	r3, #94	; 0x5e
 8002cec:	d805      	bhi.n	8002cfa <main+0x362>
 8002cee:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002cf8:	e00b      	b.n	8002d12 <main+0x37a>

	else {enc2_lut[lut_temp3] =i;  lut_temp3++;}     // goes to 511
 8002cfa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002cfe:	4a59      	ldr	r2, [pc, #356]	; (8002e64 <main+0x4cc>)
 8002d00:	8811      	ldrh	r1, [r2, #0]
 8002d02:	4a5b      	ldr	r2, [pc, #364]	; (8002e70 <main+0x4d8>)
 8002d04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002d08:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
for  (i=0;i<390;i++){					// get a few more pages
 8002d12:	4b54      	ldr	r3, [pc, #336]	; (8002e64 <main+0x4cc>)
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	3301      	adds	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	4b52      	ldr	r3, [pc, #328]	; (8002e64 <main+0x4cc>)
 8002d1c:	801a      	strh	r2, [r3, #0]
 8002d1e:	4b51      	ldr	r3, [pc, #324]	; (8002e64 <main+0x4cc>)
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8002d26:	d3d2      	bcc.n	8002cce <main+0x336>
}


menuSelect=0;
 8002d28:	4b52      	ldr	r3, [pc, #328]	; (8002e74 <main+0x4dc>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 8002d2e:	4b52      	ldr	r3, [pc, #328]	; (8002e78 <main+0x4e0>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]
printf("Hello everybody");
 8002d34:	4851      	ldr	r0, [pc, #324]	; (8002e7c <main+0x4e4>)
 8002d36:	f005 ff17 	bl	8008b68 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 8002d3a:	4b51      	ldr	r3, [pc, #324]	; (8002e80 <main+0x4e8>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	4b4f      	ldr	r3, [pc, #316]	; (8002e80 <main+0x4e8>)
 8002d44:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;//
 8002d46:	4b4f      	ldr	r3, [pc, #316]	; (8002e84 <main+0x4ec>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	4a4d      	ldr	r2, [pc, #308]	; (8002e84 <main+0x4ec>)
 8002d4e:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing
if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick
 8002d50:	4b4c      	ldr	r3, [pc, #304]	; (8002e84 <main+0x4ec>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	2b06      	cmp	r3, #6
 8002d5a:	d101      	bne.n	8002d60 <main+0x3c8>
 8002d5c:	f7fd fffe 	bl	8000d5c <analoginputloopb>
if (loop_counter2==9096) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour
 8002d60:	4b48      	ldr	r3, [pc, #288]	; (8002e84 <main+0x4ec>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f242 3288 	movw	r2, #9096	; 0x2388
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d137      	bne.n	8002ddc <main+0x444>

	mem_buf=potSource[mem_count];
 8002d6c:	4b46      	ldr	r3, [pc, #280]	; (8002e88 <main+0x4f0>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	4b46      	ldr	r3, [pc, #280]	; (8002e8c <main+0x4f4>)
 8002d74:	5c9a      	ldrb	r2, [r3, r2]
 8002d76:	4b46      	ldr	r3, [pc, #280]	; (8002e90 <main+0x4f8>)
 8002d78:	701a      	strb	r2, [r3, #0]
	// read values from stored
	HAL_I2C_Mem_Write(&hi2c2, 160, ((1+(mem_count>>6))<<6)+(mem_count&63), 2, &mem_buf, 1, 1000);  // "&hi2c2"  actual register address
 8002d7a:	4b43      	ldr	r3, [pc, #268]	; (8002e88 <main+0x4f0>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	099b      	lsrs	r3, r3, #6
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3301      	adds	r3, #1
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	019b      	lsls	r3, r3, #6
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	4b3e      	ldr	r3, [pc, #248]	; (8002e88 <main+0x4f0>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002da0:	9302      	str	r3, [sp, #8]
 8002da2:	2301      	movs	r3, #1
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	4b3a      	ldr	r3, [pc, #232]	; (8002e90 <main+0x4f8>)
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	2302      	movs	r3, #2
 8002dac:	21a0      	movs	r1, #160	; 0xa0
 8002dae:	4839      	ldr	r0, [pc, #228]	; (8002e94 <main+0x4fc>)
 8002db0:	f003 f850 	bl	8005e54 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8002db4:	2005      	movs	r0, #5
 8002db6:	f000 ffdb 	bl	8003d70 <HAL_Delay>
	if (mem_count==255) mem_count=0; else mem_count++;  // write to first
 8002dba:	4b33      	ldr	r3, [pc, #204]	; (8002e88 <main+0x4f0>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2bff      	cmp	r3, #255	; 0xff
 8002dc0:	d103      	bne.n	8002dca <main+0x432>
 8002dc2:	4b31      	ldr	r3, [pc, #196]	; (8002e88 <main+0x4f0>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	e005      	b.n	8002dd6 <main+0x43e>
 8002dca:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <main+0x4f0>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	4b2d      	ldr	r3, [pc, #180]	; (8002e88 <main+0x4f0>)
 8002dd4:	701a      	strb	r2, [r3, #0]
	loop_counter2=0; //reset
 8002dd6:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <main+0x4ec>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

}


	  if (disp_end==1)	 {  // displaybuffer after each full screen update on spi
 8002ddc:	4b2e      	ldr	r3, [pc, #184]	; (8002e98 <main+0x500>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d12a      	bne.n	8002e3a <main+0x4a2>

		  { if (loop_counter3)  enc2_tempc=enc2_dir; else enc2_dir=enc2_tempc; }    //hold enc till finished , this to clean up characters for now ,works ok
 8002de4:	4b2d      	ldr	r3, [pc, #180]	; (8002e9c <main+0x504>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d004      	beq.n	8002df6 <main+0x45e>
 8002dec:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <main+0x508>)
 8002dee:	881a      	ldrh	r2, [r3, #0]
 8002df0:	4b2c      	ldr	r3, [pc, #176]	; (8002ea4 <main+0x50c>)
 8002df2:	801a      	strh	r2, [r3, #0]
 8002df4:	e003      	b.n	8002dfe <main+0x466>
 8002df6:	4b2b      	ldr	r3, [pc, #172]	; (8002ea4 <main+0x50c>)
 8002df8:	881a      	ldrh	r2, [r3, #0]
 8002dfa:	4b29      	ldr	r3, [pc, #164]	; (8002ea0 <main+0x508>)
 8002dfc:	801a      	strh	r2, [r3, #0]
		  loop_counter3=!loop_counter3;  //blinker flips on each full page refresh
 8002dfe:	4b27      	ldr	r3, [pc, #156]	; (8002e9c <main+0x504>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	bf0c      	ite	eq
 8002e06:	2301      	moveq	r3, #1
 8002e08:	2300      	movne	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <main+0x504>)
 8002e10:	701a      	strb	r2, [r3, #0]

		  for (i=0;i<16;i++) {   displayBuffer();}
 8002e12:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <main+0x4cc>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	801a      	strh	r2, [r3, #0]
 8002e18:	e007      	b.n	8002e2a <main+0x492>
 8002e1a:	f7fe fa99 	bl	8001350 <displayBuffer>
 8002e1e:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <main+0x4cc>)
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	3301      	adds	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <main+0x4cc>)
 8002e28:	801a      	strh	r2, [r3, #0]
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <main+0x4cc>)
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	2b0f      	cmp	r3, #15
 8002e30:	d9f3      	bls.n	8002e1a <main+0x482>
		  enc2_dir=enc2_tempc;
 8002e32:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <main+0x50c>)
 8002e34:	881a      	ldrh	r2, [r3, #0]
 8002e36:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <main+0x508>)
 8002e38:	801a      	strh	r2, [r3, #0]

	  }


	  if (init<6)				// after 6 its done for good
 8002e3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <main+0x510>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b05      	cmp	r3, #5
 8002e40:	d834      	bhi.n	8002eac <main+0x514>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <main+0x4cc>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	801a      	strh	r2, [r3, #0]
 8002e48:	e007      	b.n	8002e5a <main+0x4c2>
 8002e4a:	f7fe f8ad 	bl	8000fa8 <display_init>
 8002e4e:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <main+0x4cc>)
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	3301      	adds	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <main+0x4cc>)
 8002e58:	801a      	strh	r2, [r3, #0]
 8002e5a:	4b02      	ldr	r3, [pc, #8]	; (8002e64 <main+0x4cc>)
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	2b05      	cmp	r3, #5
 8002e60:	d9f3      	bls.n	8002e4a <main+0x4b2>
 8002e62:	e025      	b.n	8002eb0 <main+0x518>
 8002e64:	20000c3c 	.word	0x20000c3c
 8002e68:	200002c0 	.word	0x200002c0
 8002e6c:	08009dfc 	.word	0x08009dfc
 8002e70:	20000774 	.word	0x20000774
 8002e74:	20000be4 	.word	0x20000be4
 8002e78:	20000be8 	.word	0x20000be8
 8002e7c:	08009d6c 	.word	0x08009d6c
 8002e80:	20000c38 	.word	0x20000c38
 8002e84:	20001d0c 	.word	0x20001d0c
 8002e88:	20001d0a 	.word	0x20001d0a
 8002e8c:	20000a64 	.word	0x20000a64
 8002e90:	20001d10 	.word	0x20001d10
 8002e94:	20002aa8 	.word	0x20002aa8
 8002e98:	200025fa 	.word	0x200025fa
 8002e9c:	200025fb 	.word	0x200025fb
 8002ea0:	20001cf2 	.word	0x20001cf2
 8002ea4:	200025fc 	.word	0x200025fc
 8002ea8:	20001d01 	.word	0x20001d01
} else {display_update(); }  // send spi line data every loop cycle , self contained, single 8pixel line 18*256steps
 8002eac:	f7fe f958 	bl	8001160 <display_update>

	  ///////////////////////////////////////////////////////////////////////////////

	  if (loop_counter == 255)	{ // grab adc readings + 3ms , 32 step
 8002eb0:	4b39      	ldr	r3, [pc, #228]	; (8002f98 <main+0x600>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2bff      	cmp	r3, #255	; 0xff
 8002eb6:	d134      	bne.n	8002f22 <main+0x58a>



		  //HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

		  HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 8002eb8:	4838      	ldr	r0, [pc, #224]	; (8002f9c <main+0x604>)
 8002eba:	f001 fd0f 	bl	80048dc <HAL_ADCEx_InjectedStart>
		  uint16_t adc_temp1[4]={0,0,0,0};
 8002ebe:	1d3b      	adds	r3, r7, #4
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]

		  HAL_ADC_PollForConversion(&hadc1,10);  // works but  slow ,blocking
 8002ec6:	210a      	movs	r1, #10
 8002ec8:	4834      	ldr	r0, [pc, #208]	; (8002f9c <main+0x604>)
 8002eca:	f001 f86d 	bl	8003fa8 <HAL_ADC_PollForConversion>



		  adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8002ece:	2101      	movs	r1, #1
 8002ed0:	4832      	ldr	r0, [pc, #200]	; (8002f9c <main+0x604>)
 8002ed2:	f001 fe19 	bl	8004b08 <HAL_ADCEx_InjectedGetValue>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	80bb      	strh	r3, [r7, #4]
		  adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8002edc:	2102      	movs	r1, #2
 8002ede:	482f      	ldr	r0, [pc, #188]	; (8002f9c <main+0x604>)
 8002ee0:	f001 fe12 	bl	8004b08 <HAL_ADCEx_InjectedGetValue>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	80fb      	strh	r3, [r7, #6]
		  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8002eea:	2103      	movs	r1, #3
 8002eec:	482b      	ldr	r0, [pc, #172]	; (8002f9c <main+0x604>)
 8002eee:	f001 fe0b 	bl	8004b08 <HAL_ADCEx_InjectedGetValue>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	813b      	strh	r3, [r7, #8]
		  adc_values[0]=	  adc_temp1[0]>>7;
 8002ef8:	88bb      	ldrh	r3, [r7, #4]
 8002efa:	09db      	lsrs	r3, r3, #7
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <main+0x608>)
 8002f00:	801a      	strh	r2, [r3, #0]
		  adc_values[1]=	  adc_temp1[1]>>7;
 8002f02:	88fb      	ldrh	r3, [r7, #6]
 8002f04:	09db      	lsrs	r3, r3, #7
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <main+0x608>)
 8002f0a:	805a      	strh	r2, [r3, #2]
		  adc_values[2]=	  adc_temp1[2]>>7;
 8002f0c:	893b      	ldrh	r3, [r7, #8]
 8002f0e:	09db      	lsrs	r3, r3, #7
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	4b23      	ldr	r3, [pc, #140]	; (8002fa0 <main+0x608>)
 8002f14:	809a      	strh	r2, [r3, #4]
		  HAL_ADCEx_InjectedStop(&hadc1) ;
 8002f16:	4821      	ldr	r0, [pc, #132]	; (8002f9c <main+0x604>)
 8002f18:	f001 fdaa 	bl	8004a70 <HAL_ADCEx_InjectedStop>
		  //HAL_ADC_Start_DMA(&hadc1, adc_source, 512);


	  	loop_counter=0;
 8002f1c:	4b1e      	ldr	r3, [pc, #120]	; (8002f98 <main+0x600>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq_pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8002f22:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <main+0x60c>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b07      	cmp	r3, #7
 8002f28:	d106      	bne.n	8002f38 <main+0x5a0>
 8002f2a:	4b1f      	ldr	r3, [pc, #124]	; (8002fa8 <main+0x610>)
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d102      	bne.n	8002f38 <main+0x5a0>
 8002f32:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <main+0x610>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	801a      	strh	r2, [r3, #0]
	   if (promValue<64) promValue=promValue+1 ; else promValue=0;  // fetch eeprom   nogo
	  	  if ((promValues[promValue] ) !=(potValues[promValue]))  EEPROM.write(promValue,(potValues[promValue]));   //  not too happy can totally kill speed  will have to put elsewhere
	  	  promValues[promValue] =potValues[promValue];
	  	   */

	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq_pos & 1)); // easy skip ?
 8002f38:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <main+0x60c>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f48:	4818      	ldr	r0, [pc, #96]	; (8002fac <main+0x614>)
 8002f4a:	f002 fe25 	bl	8005b98 <HAL_GPIO_WritePin>
	  	    // very inconsistent

	  if (sample_point>511) sample_pointD=0; // loop when zero cross , good but limited, works ok
 8002f4e:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <main+0x618>)
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f58:	d302      	bcc.n	8002f60 <main+0x5c8>
 8002f5a:	4b16      	ldr	r3, [pc, #88]	; (8002fb4 <main+0x61c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	801a      	strh	r2, [r3, #0]
	  if (sample_point<511)  sample_pointD=512;
 8002f60:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <main+0x618>)
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8002f6a:	d803      	bhi.n	8002f74 <main+0x5dc>
 8002f6c:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <main+0x61c>)
 8002f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f72:	801a      	strh	r2, [r3, #0]


	  if (sample_pointB!=sample_pointD) bank_write=1; // set start of buffer ,grab , works ok
 8002f74:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <main+0x620>)
 8002f76:	881a      	ldrh	r2, [r3, #0]
 8002f78:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <main+0x61c>)
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d002      	beq.n	8002f86 <main+0x5ee>
 8002f80:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <main+0x624>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	801a      	strh	r2, [r3, #0]
	  if (bank_write){
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <main+0x624>)
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f43f aed5 	beq.w	8002d3a <main+0x3a2>

	  	sampling();
 8002f90:	f7fe fb96 	bl	80016c0 <sampling>
	  loop_counter++ ;
 8002f94:	e6d1      	b.n	8002d3a <main+0x3a2>
 8002f96:	bf00      	nop
 8002f98:	20000c38 	.word	0x20000c38
 8002f9c:	20002a00 	.word	0x20002a00
 8002fa0:	200002b4 	.word	0x200002b4
 8002fa4:	20000c14 	.word	0x20000c14
 8002fa8:	20001cf8 	.word	0x20001cf8
 8002fac:	40020800 	.word	0x40020800
 8002fb0:	20001442 	.word	0x20001442
 8002fb4:	20001446 	.word	0x20001446
 8002fb8:	20000c3a 	.word	0x20000c3a
 8002fbc:	200002be 	.word	0x200002be

08002fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b094      	sub	sp, #80	; 0x50
 8002fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fc6:	f107 0320 	add.w	r3, r7, #32
 8002fca:	2230      	movs	r2, #48	; 0x30
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f005 fdc2 	bl	8008b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fd4:	f107 030c 	add.w	r3, r7, #12
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	4b28      	ldr	r3, [pc, #160]	; (800308c <SystemClock_Config+0xcc>)
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	4a27      	ldr	r2, [pc, #156]	; (800308c <SystemClock_Config+0xcc>)
 8002fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff4:	4b25      	ldr	r3, [pc, #148]	; (800308c <SystemClock_Config+0xcc>)
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003000:	2300      	movs	r3, #0
 8003002:	607b      	str	r3, [r7, #4]
 8003004:	4b22      	ldr	r3, [pc, #136]	; (8003090 <SystemClock_Config+0xd0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a21      	ldr	r2, [pc, #132]	; (8003090 <SystemClock_Config+0xd0>)
 800300a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	4b1f      	ldr	r3, [pc, #124]	; (8003090 <SystemClock_Config+0xd0>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003018:	607b      	str	r3, [r7, #4]
 800301a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800301c:	2302      	movs	r3, #2
 800301e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003020:	2301      	movs	r3, #1
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003024:	2310      	movs	r3, #16
 8003026:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003028:	2302      	movs	r3, #2
 800302a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800302c:	2300      	movs	r3, #0
 800302e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003030:	2308      	movs	r3, #8
 8003032:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003034:	2364      	movs	r3, #100	; 0x64
 8003036:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003038:	2302      	movs	r3, #2
 800303a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800303c:	2304      	movs	r3, #4
 800303e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003040:	f107 0320 	add.w	r3, r7, #32
 8003044:	4618      	mov	r0, r3
 8003046:	f003 fd81 	bl	8006b4c <HAL_RCC_OscConfig>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003050:	f000 fad4 	bl	80035fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003054:	230f      	movs	r3, #15
 8003056:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003058:	2302      	movs	r3, #2
 800305a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003064:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800306a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800306c:	f107 030c 	add.w	r3, r7, #12
 8003070:	2103      	movs	r1, #3
 8003072:	4618      	mov	r0, r3
 8003074:	f003 ffe2 	bl	800703c <HAL_RCC_ClockConfig>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800307e:	f000 fabd 	bl	80035fc <Error_Handler>
  }
}
 8003082:	bf00      	nop
 8003084:	3750      	adds	r7, #80	; 0x50
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800
 8003090:	40007000 	.word	0x40007000

08003094 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08c      	sub	sp, #48	; 0x30
 8003098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800309a:	f107 0320 	add.w	r3, r7, #32
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	605a      	str	r2, [r3, #4]
 80030a4:	609a      	str	r2, [r3, #8]
 80030a6:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80030a8:	463b      	mov	r3, r7
 80030aa:	2220      	movs	r2, #32
 80030ac:	2100      	movs	r1, #0
 80030ae:	4618      	mov	r0, r3
 80030b0:	f005 fd52 	bl	8008b58 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80030b4:	4b3d      	ldr	r3, [pc, #244]	; (80031ac <MX_ADC1_Init+0x118>)
 80030b6:	4a3e      	ldr	r2, [pc, #248]	; (80031b0 <MX_ADC1_Init+0x11c>)
 80030b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80030ba:	4b3c      	ldr	r3, [pc, #240]	; (80031ac <MX_ADC1_Init+0x118>)
 80030bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80030c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80030c2:	4b3a      	ldr	r3, [pc, #232]	; (80031ac <MX_ADC1_Init+0x118>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80030c8:	4b38      	ldr	r3, [pc, #224]	; (80031ac <MX_ADC1_Init+0x118>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80030ce:	4b37      	ldr	r3, [pc, #220]	; (80031ac <MX_ADC1_Init+0x118>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80030d4:	4b35      	ldr	r3, [pc, #212]	; (80031ac <MX_ADC1_Init+0x118>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80030dc:	4b33      	ldr	r3, [pc, #204]	; (80031ac <MX_ADC1_Init+0x118>)
 80030de:	2200      	movs	r2, #0
 80030e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030e2:	4b32      	ldr	r3, [pc, #200]	; (80031ac <MX_ADC1_Init+0x118>)
 80030e4:	4a33      	ldr	r2, [pc, #204]	; (80031b4 <MX_ADC1_Init+0x120>)
 80030e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030e8:	4b30      	ldr	r3, [pc, #192]	; (80031ac <MX_ADC1_Init+0x118>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80030ee:	4b2f      	ldr	r3, [pc, #188]	; (80031ac <MX_ADC1_Init+0x118>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80030f4:	4b2d      	ldr	r3, [pc, #180]	; (80031ac <MX_ADC1_Init+0x118>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80030fc:	4b2b      	ldr	r3, [pc, #172]	; (80031ac <MX_ADC1_Init+0x118>)
 80030fe:	2200      	movs	r2, #0
 8003100:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003102:	482a      	ldr	r0, [pc, #168]	; (80031ac <MX_ADC1_Init+0x118>)
 8003104:	f000 fe58 	bl	8003db8 <HAL_ADC_Init>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 800310e:	f000 fa75 	bl	80035fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003112:	2309      	movs	r3, #9
 8003114:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8003116:	2301      	movs	r3, #1
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800311a:	2306      	movs	r3, #6
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800311e:	f107 0320 	add.w	r3, r7, #32
 8003122:	4619      	mov	r1, r3
 8003124:	4821      	ldr	r0, [pc, #132]	; (80031ac <MX_ADC1_Init+0x118>)
 8003126:	f001 f929 	bl	800437c <HAL_ADC_ConfigChannel>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003130:	f000 fa64 	bl	80035fc <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8003134:	2304      	movs	r3, #4
 8003136:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8003138:	2301      	movs	r3, #1
 800313a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 800313c:	2303      	movs	r3, #3
 800313e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003140:	2303      	movs	r3, #3
 8003142:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8003144:	2300      	movs	r3, #0
 8003146:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8003148:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <MX_ADC1_Init+0x124>)
 800314a:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800314c:	2300      	movs	r3, #0
 800314e:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8003150:	2300      	movs	r3, #0
 8003152:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003158:	463b      	mov	r3, r7
 800315a:	4619      	mov	r1, r3
 800315c:	4813      	ldr	r0, [pc, #76]	; (80031ac <MX_ADC1_Init+0x118>)
 800315e:	f001 fd0b 	bl	8004b78 <HAL_ADCEx_InjectedConfigChannel>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8003168:	f000 fa48 	bl	80035fc <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 800316c:	2305      	movs	r3, #5
 800316e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8003170:	2302      	movs	r3, #2
 8003172:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003174:	463b      	mov	r3, r7
 8003176:	4619      	mov	r1, r3
 8003178:	480c      	ldr	r0, [pc, #48]	; (80031ac <MX_ADC1_Init+0x118>)
 800317a:	f001 fcfd 	bl	8004b78 <HAL_ADCEx_InjectedConfigChannel>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8003184:	f000 fa3a 	bl	80035fc <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8003188:	2306      	movs	r3, #6
 800318a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 800318c:	2303      	movs	r3, #3
 800318e:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003190:	463b      	mov	r3, r7
 8003192:	4619      	mov	r1, r3
 8003194:	4805      	ldr	r0, [pc, #20]	; (80031ac <MX_ADC1_Init+0x118>)
 8003196:	f001 fcef 	bl	8004b78 <HAL_ADCEx_InjectedConfigChannel>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80031a0:	f000 fa2c 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80031a4:	bf00      	nop
 80031a6:	3730      	adds	r7, #48	; 0x30
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20002a00 	.word	0x20002a00
 80031b0:	40012000 	.word	0x40012000
 80031b4:	0f000001 	.word	0x0f000001
 80031b8:	000f0001 	.word	0x000f0001

080031bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80031c0:	4b12      	ldr	r3, [pc, #72]	; (800320c <MX_I2C2_Init+0x50>)
 80031c2:	4a13      	ldr	r2, [pc, #76]	; (8003210 <MX_I2C2_Init+0x54>)
 80031c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80031c6:	4b11      	ldr	r3, [pc, #68]	; (800320c <MX_I2C2_Init+0x50>)
 80031c8:	4a12      	ldr	r2, [pc, #72]	; (8003214 <MX_I2C2_Init+0x58>)
 80031ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031cc:	4b0f      	ldr	r3, [pc, #60]	; (800320c <MX_I2C2_Init+0x50>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80031d2:	4b0e      	ldr	r3, [pc, #56]	; (800320c <MX_I2C2_Init+0x50>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <MX_I2C2_Init+0x50>)
 80031da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <MX_I2C2_Init+0x50>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <MX_I2C2_Init+0x50>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <MX_I2C2_Init+0x50>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <MX_I2C2_Init+0x50>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80031f8:	4804      	ldr	r0, [pc, #16]	; (800320c <MX_I2C2_Init+0x50>)
 80031fa:	f002 fce7 	bl	8005bcc <HAL_I2C_Init>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003204:	f000 f9fa 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003208:	bf00      	nop
 800320a:	bd80      	pop	{r7, pc}
 800320c:	20002aa8 	.word	0x20002aa8
 8003210:	40005800 	.word	0x40005800
 8003214:	00061a80 	.word	0x00061a80

08003218 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800321c:	4b17      	ldr	r3, [pc, #92]	; (800327c <MX_SPI2_Init+0x64>)
 800321e:	4a18      	ldr	r2, [pc, #96]	; (8003280 <MX_SPI2_Init+0x68>)
 8003220:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003222:	4b16      	ldr	r3, [pc, #88]	; (800327c <MX_SPI2_Init+0x64>)
 8003224:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003228:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800322a:	4b14      	ldr	r3, [pc, #80]	; (800327c <MX_SPI2_Init+0x64>)
 800322c:	2200      	movs	r2, #0
 800322e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003230:	4b12      	ldr	r3, [pc, #72]	; (800327c <MX_SPI2_Init+0x64>)
 8003232:	2200      	movs	r2, #0
 8003234:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003236:	4b11      	ldr	r3, [pc, #68]	; (800327c <MX_SPI2_Init+0x64>)
 8003238:	2200      	movs	r2, #0
 800323a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800323c:	4b0f      	ldr	r3, [pc, #60]	; (800327c <MX_SPI2_Init+0x64>)
 800323e:	2200      	movs	r2, #0
 8003240:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003242:	4b0e      	ldr	r3, [pc, #56]	; (800327c <MX_SPI2_Init+0x64>)
 8003244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003248:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800324a:	4b0c      	ldr	r3, [pc, #48]	; (800327c <MX_SPI2_Init+0x64>)
 800324c:	2230      	movs	r2, #48	; 0x30
 800324e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003250:	4b0a      	ldr	r3, [pc, #40]	; (800327c <MX_SPI2_Init+0x64>)
 8003252:	2200      	movs	r2, #0
 8003254:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <MX_SPI2_Init+0x64>)
 8003258:	2200      	movs	r2, #0
 800325a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800325c:	4b07      	ldr	r3, [pc, #28]	; (800327c <MX_SPI2_Init+0x64>)
 800325e:	2200      	movs	r2, #0
 8003260:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003262:	4b06      	ldr	r3, [pc, #24]	; (800327c <MX_SPI2_Init+0x64>)
 8003264:	220a      	movs	r2, #10
 8003266:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003268:	4804      	ldr	r0, [pc, #16]	; (800327c <MX_SPI2_Init+0x64>)
 800326a:	f004 f8b3 	bl	80073d4 <HAL_SPI_Init>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003274:	f000 f9c2 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003278:	bf00      	nop
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20002afc 	.word	0x20002afc
 8003280:	40003800 	.word	0x40003800

08003284 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08c      	sub	sp, #48	; 0x30
 8003288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800328a:	f107 030c 	add.w	r3, r7, #12
 800328e:	2224      	movs	r2, #36	; 0x24
 8003290:	2100      	movs	r1, #0
 8003292:	4618      	mov	r0, r3
 8003294:	f005 fc60 	bl	8008b58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003298:	1d3b      	adds	r3, r7, #4
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032a0:	4b21      	ldr	r3, [pc, #132]	; (8003328 <MX_TIM2_Init+0xa4>)
 80032a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80032a8:	4b1f      	ldr	r3, [pc, #124]	; (8003328 <MX_TIM2_Init+0xa4>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ae:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <MX_TIM2_Init+0xa4>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80032b4:	4b1c      	ldr	r3, [pc, #112]	; (8003328 <MX_TIM2_Init+0xa4>)
 80032b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80032bc:	4b1a      	ldr	r3, [pc, #104]	; (8003328 <MX_TIM2_Init+0xa4>)
 80032be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032c4:	4b18      	ldr	r3, [pc, #96]	; (8003328 <MX_TIM2_Init+0xa4>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80032ca:	2301      	movs	r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80032ce:	2302      	movs	r3, #2
 80032d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80032d2:	2301      	movs	r3, #1
 80032d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80032da:	2302      	movs	r3, #2
 80032dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80032de:	2302      	movs	r3, #2
 80032e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80032e2:	2301      	movs	r3, #1
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032e6:	2300      	movs	r3, #0
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 80032ea:	2302      	movs	r3, #2
 80032ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80032ee:	f107 030c 	add.w	r3, r7, #12
 80032f2:	4619      	mov	r1, r3
 80032f4:	480c      	ldr	r0, [pc, #48]	; (8003328 <MX_TIM2_Init+0xa4>)
 80032f6:	f004 fd13 	bl	8007d20 <HAL_TIM_Encoder_Init>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003300:	f000 f97c 	bl	80035fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003304:	2300      	movs	r3, #0
 8003306:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003308:	2300      	movs	r3, #0
 800330a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800330c:	1d3b      	adds	r3, r7, #4
 800330e:	4619      	mov	r1, r3
 8003310:	4805      	ldr	r0, [pc, #20]	; (8003328 <MX_TIM2_Init+0xa4>)
 8003312:	f005 fb31 	bl	8008978 <HAL_TIMEx_MasterConfigSynchronization>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800331c:	f000 f96e 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003320:	bf00      	nop
 8003322:	3730      	adds	r7, #48	; 0x30
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	20002b54 	.word	0x20002b54

0800332c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08e      	sub	sp, #56	; 0x38
 8003330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	605a      	str	r2, [r3, #4]
 800333c:	609a      	str	r2, [r3, #8]
 800333e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003340:	f107 0320 	add.w	r3, r7, #32
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800334a:	1d3b      	adds	r3, r7, #4
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	611a      	str	r2, [r3, #16]
 8003358:	615a      	str	r2, [r3, #20]
 800335a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800335c:	4b2c      	ldr	r3, [pc, #176]	; (8003410 <MX_TIM3_Init+0xe4>)
 800335e:	4a2d      	ldr	r2, [pc, #180]	; (8003414 <MX_TIM3_Init+0xe8>)
 8003360:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003362:	4b2b      	ldr	r3, [pc, #172]	; (8003410 <MX_TIM3_Init+0xe4>)
 8003364:	2200      	movs	r2, #0
 8003366:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003368:	4b29      	ldr	r3, [pc, #164]	; (8003410 <MX_TIM3_Init+0xe4>)
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2544;
 800336e:	4b28      	ldr	r3, [pc, #160]	; (8003410 <MX_TIM3_Init+0xe4>)
 8003370:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 8003374:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003376:	4b26      	ldr	r3, [pc, #152]	; (8003410 <MX_TIM3_Init+0xe4>)
 8003378:	2200      	movs	r2, #0
 800337a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800337c:	4b24      	ldr	r3, [pc, #144]	; (8003410 <MX_TIM3_Init+0xe4>)
 800337e:	2280      	movs	r2, #128	; 0x80
 8003380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003382:	4823      	ldr	r0, [pc, #140]	; (8003410 <MX_TIM3_Init+0xe4>)
 8003384:	f004 fab6 	bl	80078f4 <HAL_TIM_Base_Init>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800338e:	f000 f935 	bl	80035fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003398:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800339c:	4619      	mov	r1, r3
 800339e:	481c      	ldr	r0, [pc, #112]	; (8003410 <MX_TIM3_Init+0xe4>)
 80033a0:	f004 ff2e 	bl	8008200 <HAL_TIM_ConfigClockSource>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80033aa:	f000 f927 	bl	80035fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80033ae:	4818      	ldr	r0, [pc, #96]	; (8003410 <MX_TIM3_Init+0xe4>)
 80033b0:	f004 fbac 	bl	8007b0c <HAL_TIM_PWM_Init>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80033ba:	f000 f91f 	bl	80035fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033be:	2300      	movs	r3, #0
 80033c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033c2:	2300      	movs	r3, #0
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033c6:	f107 0320 	add.w	r3, r7, #32
 80033ca:	4619      	mov	r1, r3
 80033cc:	4810      	ldr	r0, [pc, #64]	; (8003410 <MX_TIM3_Init+0xe4>)
 80033ce:	f005 fad3 	bl	8008978 <HAL_TIMEx_MasterConfigSynchronization>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80033d8:	f000 f910 	bl	80035fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80033dc:	2370      	movs	r3, #112	; 0x70
 80033de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033ec:	1d3b      	adds	r3, r7, #4
 80033ee:	2208      	movs	r2, #8
 80033f0:	4619      	mov	r1, r3
 80033f2:	4807      	ldr	r0, [pc, #28]	; (8003410 <MX_TIM3_Init+0xe4>)
 80033f4:	f004 fe42 	bl	800807c <HAL_TIM_PWM_ConfigChannel>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80033fe:	f000 f8fd 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003402:	4803      	ldr	r0, [pc, #12]	; (8003410 <MX_TIM3_Init+0xe4>)
 8003404:	f000 fb02 	bl	8003a0c <HAL_TIM_MspPostInit>

}
 8003408:	bf00      	nop
 800340a:	3738      	adds	r7, #56	; 0x38
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20002b9c 	.word	0x20002b9c
 8003414:	40000400 	.word	0x40000400

08003418 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08c      	sub	sp, #48	; 0x30
 800341c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800341e:	f107 030c 	add.w	r3, r7, #12
 8003422:	2224      	movs	r2, #36	; 0x24
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f005 fb96 	bl	8008b58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800342c:	1d3b      	adds	r3, r7, #4
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003434:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <MX_TIM4_Init+0xa0>)
 8003436:	4a21      	ldr	r2, [pc, #132]	; (80034bc <MX_TIM4_Init+0xa4>)
 8003438:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800343a:	4b1f      	ldr	r3, [pc, #124]	; (80034b8 <MX_TIM4_Init+0xa0>)
 800343c:	2200      	movs	r2, #0
 800343e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003440:	4b1d      	ldr	r3, [pc, #116]	; (80034b8 <MX_TIM4_Init+0xa0>)
 8003442:	2200      	movs	r2, #0
 8003444:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003446:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <MX_TIM4_Init+0xa0>)
 8003448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800344c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <MX_TIM4_Init+0xa0>)
 8003450:	2200      	movs	r2, #0
 8003452:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003454:	4b18      	ldr	r3, [pc, #96]	; (80034b8 <MX_TIM4_Init+0xa0>)
 8003456:	2200      	movs	r2, #0
 8003458:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800345a:	2301      	movs	r3, #1
 800345c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800345e:	2302      	movs	r3, #2
 8003460:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003462:	2301      	movs	r3, #1
 8003464:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003466:	2300      	movs	r3, #0
 8003468:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 800346a:	2302      	movs	r3, #2
 800346c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800346e:	2302      	movs	r3, #2
 8003470:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003472:	2301      	movs	r3, #1
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003476:	2300      	movs	r3, #0
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 800347a:	2302      	movs	r3, #2
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800347e:	f107 030c 	add.w	r3, r7, #12
 8003482:	4619      	mov	r1, r3
 8003484:	480c      	ldr	r0, [pc, #48]	; (80034b8 <MX_TIM4_Init+0xa0>)
 8003486:	f004 fc4b 	bl	8007d20 <HAL_TIM_Encoder_Init>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003490:	f000 f8b4 	bl	80035fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003494:	2300      	movs	r3, #0
 8003496:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003498:	2300      	movs	r3, #0
 800349a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800349c:	1d3b      	adds	r3, r7, #4
 800349e:	4619      	mov	r1, r3
 80034a0:	4805      	ldr	r0, [pc, #20]	; (80034b8 <MX_TIM4_Init+0xa0>)
 80034a2:	f005 fa69 	bl	8008978 <HAL_TIMEx_MasterConfigSynchronization>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80034ac:	f000 f8a6 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80034b0:	bf00      	nop
 80034b2:	3730      	adds	r7, #48	; 0x30
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20002be4 	.word	0x20002be4
 80034bc:	40000800 	.word	0x40000800

080034c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	607b      	str	r3, [r7, #4]
 80034ca:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <MX_DMA_Init+0x3c>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	4a0b      	ldr	r2, [pc, #44]	; (80034fc <MX_DMA_Init+0x3c>)
 80034d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034d4:	6313      	str	r3, [r2, #48]	; 0x30
 80034d6:	4b09      	ldr	r3, [pc, #36]	; (80034fc <MX_DMA_Init+0x3c>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034de:	607b      	str	r3, [r7, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80034e2:	2200      	movs	r2, #0
 80034e4:	2100      	movs	r1, #0
 80034e6:	203c      	movs	r0, #60	; 0x3c
 80034e8:	f001 fdbb 	bl	8005062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80034ec:	203c      	movs	r0, #60	; 0x3c
 80034ee:	f001 fdd4 	bl	800509a <HAL_NVIC_EnableIRQ>

}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023800 	.word	0x40023800

08003500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003506:	f107 030c 	add.w	r3, r7, #12
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	605a      	str	r2, [r3, #4]
 8003510:	609a      	str	r2, [r3, #8]
 8003512:	60da      	str	r2, [r3, #12]
 8003514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	4b20      	ldr	r3, [pc, #128]	; (800359c <MX_GPIO_Init+0x9c>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	4a1f      	ldr	r2, [pc, #124]	; (800359c <MX_GPIO_Init+0x9c>)
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	6313      	str	r3, [r2, #48]	; 0x30
 8003526:	4b1d      	ldr	r3, [pc, #116]	; (800359c <MX_GPIO_Init+0x9c>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	607b      	str	r3, [r7, #4]
 8003536:	4b19      	ldr	r3, [pc, #100]	; (800359c <MX_GPIO_Init+0x9c>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	4a18      	ldr	r2, [pc, #96]	; (800359c <MX_GPIO_Init+0x9c>)
 800353c:	f043 0302 	orr.w	r3, r3, #2
 8003540:	6313      	str	r3, [r2, #48]	; 0x30
 8003542:	4b16      	ldr	r3, [pc, #88]	; (800359c <MX_GPIO_Init+0x9c>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	607b      	str	r3, [r7, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	603b      	str	r3, [r7, #0]
 8003552:	4b12      	ldr	r3, [pc, #72]	; (800359c <MX_GPIO_Init+0x9c>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	4a11      	ldr	r2, [pc, #68]	; (800359c <MX_GPIO_Init+0x9c>)
 8003558:	f043 0304 	orr.w	r3, r3, #4
 800355c:	6313      	str	r3, [r2, #48]	; 0x30
 800355e:	4b0f      	ldr	r3, [pc, #60]	; (800359c <MX_GPIO_Init+0x9c>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800356a:	2200      	movs	r2, #0
 800356c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003570:	480b      	ldr	r0, [pc, #44]	; (80035a0 <MX_GPIO_Init+0xa0>)
 8003572:	f002 fb11 	bl	8005b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800357a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800357c:	2301      	movs	r3, #1
 800357e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003584:	2300      	movs	r3, #0
 8003586:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003588:	f107 030c 	add.w	r3, r7, #12
 800358c:	4619      	mov	r1, r3
 800358e:	4804      	ldr	r0, [pc, #16]	; (80035a0 <MX_GPIO_Init+0xa0>)
 8003590:	f002 f97e 	bl	8005890 <HAL_GPIO_Init>

}
 8003594:	bf00      	nop
 8003596:	3720      	adds	r7, #32
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40023800 	.word	0x40023800
 80035a0:	40020800 	.word	0x40020800

080035a4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
	for (i=0;i<512;i++)
 80035ac:	4b10      	ldr	r3, [pc, #64]	; (80035f0 <HAL_ADC_ConvCpltCallback+0x4c>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	801a      	strh	r2, [r3, #0]
 80035b2:	e011      	b.n	80035d8 <HAL_ADC_ConvCpltCallback+0x34>
	{input_holder[i] = adc_source[i];
 80035b4:	4b0e      	ldr	r3, [pc, #56]	; (80035f0 <HAL_ADC_ConvCpltCallback+0x4c>)
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	4619      	mov	r1, r3
 80035ba:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <HAL_ADC_ConvCpltCallback+0x4c>)
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <HAL_ADC_ConvCpltCallback+0x50>)
 80035c2:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <HAL_ADC_ConvCpltCallback+0x54>)
 80035c8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i=0;i<512;i++)
 80035cc:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <HAL_ADC_ConvCpltCallback+0x4c>)
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	3301      	adds	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_ADC_ConvCpltCallback+0x4c>)
 80035d6:	801a      	strh	r2, [r3, #0]
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_ADC_ConvCpltCallback+0x4c>)
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e0:	d3e8      	bcc.n	80035b4 <HAL_ADC_ConvCpltCallback+0x10>

	}
}
 80035e2:	bf00      	nop
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	20000c3c 	.word	0x20000c3c
 80035f4:	20001488 	.word	0x20001488
 80035f8:	20002600 	.word	0x20002600

080035fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003600:	b672      	cpsid	i
}
 8003602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003604:	e7fe      	b.n	8003604 <Error_Handler+0x8>
	...

08003608 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <HAL_MspInit+0x4c>)
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	4a0f      	ldr	r2, [pc, #60]	; (8003654 <HAL_MspInit+0x4c>)
 8003618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800361c:	6453      	str	r3, [r2, #68]	; 0x44
 800361e:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <HAL_MspInit+0x4c>)
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003626:	607b      	str	r3, [r7, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	603b      	str	r3, [r7, #0]
 800362e:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_MspInit+0x4c>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	4a08      	ldr	r2, [pc, #32]	; (8003654 <HAL_MspInit+0x4c>)
 8003634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003638:	6413      	str	r3, [r2, #64]	; 0x40
 800363a:	4b06      	ldr	r3, [pc, #24]	; (8003654 <HAL_MspInit+0x4c>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800

08003658 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08a      	sub	sp, #40	; 0x28
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003660:	f107 0314 	add.w	r3, r7, #20
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	60da      	str	r2, [r3, #12]
 800366e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a3c      	ldr	r2, [pc, #240]	; (8003768 <HAL_ADC_MspInit+0x110>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d171      	bne.n	800375e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	4b3b      	ldr	r3, [pc, #236]	; (800376c <HAL_ADC_MspInit+0x114>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	4a3a      	ldr	r2, [pc, #232]	; (800376c <HAL_ADC_MspInit+0x114>)
 8003684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003688:	6453      	str	r3, [r2, #68]	; 0x44
 800368a:	4b38      	ldr	r3, [pc, #224]	; (800376c <HAL_ADC_MspInit+0x114>)
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	4b34      	ldr	r3, [pc, #208]	; (800376c <HAL_ADC_MspInit+0x114>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	4a33      	ldr	r2, [pc, #204]	; (800376c <HAL_ADC_MspInit+0x114>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	6313      	str	r3, [r2, #48]	; 0x30
 80036a6:	4b31      	ldr	r3, [pc, #196]	; (800376c <HAL_ADC_MspInit+0x114>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	4b2d      	ldr	r3, [pc, #180]	; (800376c <HAL_ADC_MspInit+0x114>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	4a2c      	ldr	r2, [pc, #176]	; (800376c <HAL_ADC_MspInit+0x114>)
 80036bc:	f043 0302 	orr.w	r3, r3, #2
 80036c0:	6313      	str	r3, [r2, #48]	; 0x30
 80036c2:	4b2a      	ldr	r3, [pc, #168]	; (800376c <HAL_ADC_MspInit+0x114>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	60bb      	str	r3, [r7, #8]
 80036cc:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA5     ------> ADC1_IN5
    PB1     ------> ADC1_IN9
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4;
 80036ce:	2378      	movs	r3, #120	; 0x78
 80036d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036d2:	2303      	movs	r3, #3
 80036d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036da:	f107 0314 	add.w	r3, r7, #20
 80036de:	4619      	mov	r1, r3
 80036e0:	4823      	ldr	r0, [pc, #140]	; (8003770 <HAL_ADC_MspInit+0x118>)
 80036e2:	f002 f8d5 	bl	8005890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80036e6:	2302      	movs	r3, #2
 80036e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036ea:	2303      	movs	r3, #3
 80036ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f2:	f107 0314 	add.w	r3, r7, #20
 80036f6:	4619      	mov	r1, r3
 80036f8:	481e      	ldr	r0, [pc, #120]	; (8003774 <HAL_ADC_MspInit+0x11c>)
 80036fa:	f002 f8c9 	bl	8005890 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80036fe:	4b1e      	ldr	r3, [pc, #120]	; (8003778 <HAL_ADC_MspInit+0x120>)
 8003700:	4a1e      	ldr	r2, [pc, #120]	; (800377c <HAL_ADC_MspInit+0x124>)
 8003702:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003704:	4b1c      	ldr	r3, [pc, #112]	; (8003778 <HAL_ADC_MspInit+0x120>)
 8003706:	2200      	movs	r2, #0
 8003708:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800370a:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <HAL_ADC_MspInit+0x120>)
 800370c:	2200      	movs	r2, #0
 800370e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003710:	4b19      	ldr	r3, [pc, #100]	; (8003778 <HAL_ADC_MspInit+0x120>)
 8003712:	2200      	movs	r2, #0
 8003714:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003716:	4b18      	ldr	r3, [pc, #96]	; (8003778 <HAL_ADC_MspInit+0x120>)
 8003718:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800371c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800371e:	4b16      	ldr	r3, [pc, #88]	; (8003778 <HAL_ADC_MspInit+0x120>)
 8003720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003724:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003726:	4b14      	ldr	r3, [pc, #80]	; (8003778 <HAL_ADC_MspInit+0x120>)
 8003728:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800372c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800372e:	4b12      	ldr	r3, [pc, #72]	; (8003778 <HAL_ADC_MspInit+0x120>)
 8003730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003734:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003736:	4b10      	ldr	r3, [pc, #64]	; (8003778 <HAL_ADC_MspInit+0x120>)
 8003738:	2200      	movs	r2, #0
 800373a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800373c:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <HAL_ADC_MspInit+0x120>)
 800373e:	2200      	movs	r2, #0
 8003740:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003742:	480d      	ldr	r0, [pc, #52]	; (8003778 <HAL_ADC_MspInit+0x120>)
 8003744:	f001 fcc4 	bl	80050d0 <HAL_DMA_Init>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800374e:	f7ff ff55 	bl	80035fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a08      	ldr	r2, [pc, #32]	; (8003778 <HAL_ADC_MspInit+0x120>)
 8003756:	639a      	str	r2, [r3, #56]	; 0x38
 8003758:	4a07      	ldr	r2, [pc, #28]	; (8003778 <HAL_ADC_MspInit+0x120>)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800375e:	bf00      	nop
 8003760:	3728      	adds	r7, #40	; 0x28
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40012000 	.word	0x40012000
 800376c:	40023800 	.word	0x40023800
 8003770:	40020000 	.word	0x40020000
 8003774:	40020400 	.word	0x40020400
 8003778:	20002a48 	.word	0x20002a48
 800377c:	40026470 	.word	0x40026470

08003780 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	; 0x28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003788:	f107 0314 	add.w	r3, r7, #20
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a22      	ldr	r2, [pc, #136]	; (8003828 <HAL_I2C_MspInit+0xa8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d13d      	bne.n	800381e <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	4b21      	ldr	r3, [pc, #132]	; (800382c <HAL_I2C_MspInit+0xac>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	4a20      	ldr	r2, [pc, #128]	; (800382c <HAL_I2C_MspInit+0xac>)
 80037ac:	f043 0302 	orr.w	r3, r3, #2
 80037b0:	6313      	str	r3, [r2, #48]	; 0x30
 80037b2:	4b1e      	ldr	r3, [pc, #120]	; (800382c <HAL_I2C_MspInit+0xac>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80037be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037c4:	2312      	movs	r3, #18
 80037c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037cc:	2303      	movs	r3, #3
 80037ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80037d0:	2309      	movs	r3, #9
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037d4:	f107 0314 	add.w	r3, r7, #20
 80037d8:	4619      	mov	r1, r3
 80037da:	4815      	ldr	r0, [pc, #84]	; (8003830 <HAL_I2C_MspInit+0xb0>)
 80037dc:	f002 f858 	bl	8005890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80037e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037e6:	2312      	movs	r3, #18
 80037e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ee:	2303      	movs	r3, #3
 80037f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80037f2:	2304      	movs	r3, #4
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f6:	f107 0314 	add.w	r3, r7, #20
 80037fa:	4619      	mov	r1, r3
 80037fc:	480c      	ldr	r0, [pc, #48]	; (8003830 <HAL_I2C_MspInit+0xb0>)
 80037fe:	f002 f847 	bl	8005890 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	4b09      	ldr	r3, [pc, #36]	; (800382c <HAL_I2C_MspInit+0xac>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	4a08      	ldr	r2, [pc, #32]	; (800382c <HAL_I2C_MspInit+0xac>)
 800380c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003810:	6413      	str	r3, [r2, #64]	; 0x40
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <HAL_I2C_MspInit+0xac>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800381e:	bf00      	nop
 8003820:	3728      	adds	r7, #40	; 0x28
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40005800 	.word	0x40005800
 800382c:	40023800 	.word	0x40023800
 8003830:	40020400 	.word	0x40020400

08003834 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	; 0x28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383c:	f107 0314 	add.w	r3, r7, #20
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	60da      	str	r2, [r3, #12]
 800384a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a19      	ldr	r2, [pc, #100]	; (80038b8 <HAL_SPI_MspInit+0x84>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d12c      	bne.n	80038b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	4b18      	ldr	r3, [pc, #96]	; (80038bc <HAL_SPI_MspInit+0x88>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	4a17      	ldr	r2, [pc, #92]	; (80038bc <HAL_SPI_MspInit+0x88>)
 8003860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003864:	6413      	str	r3, [r2, #64]	; 0x40
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <HAL_SPI_MspInit+0x88>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800386e:	613b      	str	r3, [r7, #16]
 8003870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	4b11      	ldr	r3, [pc, #68]	; (80038bc <HAL_SPI_MspInit+0x88>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	4a10      	ldr	r2, [pc, #64]	; (80038bc <HAL_SPI_MspInit+0x88>)
 800387c:	f043 0302 	orr.w	r3, r3, #2
 8003880:	6313      	str	r3, [r2, #48]	; 0x30
 8003882:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <HAL_SPI_MspInit+0x88>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 800388e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003894:	2302      	movs	r3, #2
 8003896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003898:	2300      	movs	r3, #0
 800389a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800389c:	2303      	movs	r3, #3
 800389e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038a0:	2305      	movs	r3, #5
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a4:	f107 0314 	add.w	r3, r7, #20
 80038a8:	4619      	mov	r1, r3
 80038aa:	4805      	ldr	r0, [pc, #20]	; (80038c0 <HAL_SPI_MspInit+0x8c>)
 80038ac:	f001 fff0 	bl	8005890 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80038b0:	bf00      	nop
 80038b2:	3728      	adds	r7, #40	; 0x28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40003800 	.word	0x40003800
 80038bc:	40023800 	.word	0x40023800
 80038c0:	40020400 	.word	0x40020400

080038c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08c      	sub	sp, #48	; 0x30
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038cc:	f107 031c 	add.w	r3, r7, #28
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	60da      	str	r2, [r3, #12]
 80038da:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e4:	d12d      	bne.n	8003942 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	61bb      	str	r3, [r7, #24]
 80038ea:	4b30      	ldr	r3, [pc, #192]	; (80039ac <HAL_TIM_Encoder_MspInit+0xe8>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	4a2f      	ldr	r2, [pc, #188]	; (80039ac <HAL_TIM_Encoder_MspInit+0xe8>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	6413      	str	r3, [r2, #64]	; 0x40
 80038f6:	4b2d      	ldr	r3, [pc, #180]	; (80039ac <HAL_TIM_Encoder_MspInit+0xe8>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	61bb      	str	r3, [r7, #24]
 8003900:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	4b29      	ldr	r3, [pc, #164]	; (80039ac <HAL_TIM_Encoder_MspInit+0xe8>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	4a28      	ldr	r2, [pc, #160]	; (80039ac <HAL_TIM_Encoder_MspInit+0xe8>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	6313      	str	r3, [r2, #48]	; 0x30
 8003912:	4b26      	ldr	r3, [pc, #152]	; (80039ac <HAL_TIM_Encoder_MspInit+0xe8>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 800391e:	f248 0302 	movw	r3, #32770	; 0x8002
 8003922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003924:	2302      	movs	r3, #2
 8003926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003928:	2301      	movs	r3, #1
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392c:	2300      	movs	r3, #0
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003930:	2301      	movs	r3, #1
 8003932:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003934:	f107 031c 	add.w	r3, r7, #28
 8003938:	4619      	mov	r1, r3
 800393a:	481d      	ldr	r0, [pc, #116]	; (80039b0 <HAL_TIM_Encoder_MspInit+0xec>)
 800393c:	f001 ffa8 	bl	8005890 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003940:	e030      	b.n	80039a4 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1b      	ldr	r2, [pc, #108]	; (80039b4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d12b      	bne.n	80039a4 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800394c:	2300      	movs	r3, #0
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	4b16      	ldr	r3, [pc, #88]	; (80039ac <HAL_TIM_Encoder_MspInit+0xe8>)
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	4a15      	ldr	r2, [pc, #84]	; (80039ac <HAL_TIM_Encoder_MspInit+0xe8>)
 8003956:	f043 0304 	orr.w	r3, r3, #4
 800395a:	6413      	str	r3, [r2, #64]	; 0x40
 800395c:	4b13      	ldr	r3, [pc, #76]	; (80039ac <HAL_TIM_Encoder_MspInit+0xe8>)
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <HAL_TIM_Encoder_MspInit+0xe8>)
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	4a0e      	ldr	r2, [pc, #56]	; (80039ac <HAL_TIM_Encoder_MspInit+0xe8>)
 8003972:	f043 0302 	orr.w	r3, r3, #2
 8003976:	6313      	str	r3, [r2, #48]	; 0x30
 8003978:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <HAL_TIM_Encoder_MspInit+0xe8>)
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003984:	23c0      	movs	r3, #192	; 0xc0
 8003986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003988:	2302      	movs	r3, #2
 800398a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800398c:	2301      	movs	r3, #1
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003990:	2300      	movs	r3, #0
 8003992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003994:	2302      	movs	r3, #2
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003998:	f107 031c 	add.w	r3, r7, #28
 800399c:	4619      	mov	r1, r3
 800399e:	4806      	ldr	r0, [pc, #24]	; (80039b8 <HAL_TIM_Encoder_MspInit+0xf4>)
 80039a0:	f001 ff76 	bl	8005890 <HAL_GPIO_Init>
}
 80039a4:	bf00      	nop
 80039a6:	3730      	adds	r7, #48	; 0x30
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40023800 	.word	0x40023800
 80039b0:	40020000 	.word	0x40020000
 80039b4:	40000800 	.word	0x40000800
 80039b8:	40020400 	.word	0x40020400

080039bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a0e      	ldr	r2, [pc, #56]	; (8003a04 <HAL_TIM_Base_MspInit+0x48>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d115      	bne.n	80039fa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <HAL_TIM_Base_MspInit+0x4c>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	4a0c      	ldr	r2, [pc, #48]	; (8003a08 <HAL_TIM_Base_MspInit+0x4c>)
 80039d8:	f043 0302 	orr.w	r3, r3, #2
 80039dc:	6413      	str	r3, [r2, #64]	; 0x40
 80039de:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <HAL_TIM_Base_MspInit+0x4c>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80039ea:	2200      	movs	r2, #0
 80039ec:	2100      	movs	r1, #0
 80039ee:	201d      	movs	r0, #29
 80039f0:	f001 fb37 	bl	8005062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80039f4:	201d      	movs	r0, #29
 80039f6:	f001 fb50 	bl	800509a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40000400 	.word	0x40000400
 8003a08:	40023800 	.word	0x40023800

08003a0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a14:	f107 030c 	add.w	r3, r7, #12
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	609a      	str	r2, [r3, #8]
 8003a20:	60da      	str	r2, [r3, #12]
 8003a22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a12      	ldr	r2, [pc, #72]	; (8003a74 <HAL_TIM_MspPostInit+0x68>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d11d      	bne.n	8003a6a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <HAL_TIM_MspPostInit+0x6c>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	4a10      	ldr	r2, [pc, #64]	; (8003a78 <HAL_TIM_MspPostInit+0x6c>)
 8003a38:	f043 0302 	orr.w	r3, r3, #2
 8003a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3e:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <HAL_TIM_MspPostInit+0x6c>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a5e:	f107 030c 	add.w	r3, r7, #12
 8003a62:	4619      	mov	r1, r3
 8003a64:	4805      	ldr	r0, [pc, #20]	; (8003a7c <HAL_TIM_MspPostInit+0x70>)
 8003a66:	f001 ff13 	bl	8005890 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003a6a:	bf00      	nop
 8003a6c:	3720      	adds	r7, #32
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40000400 	.word	0x40000400
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	40020400 	.word	0x40020400

08003a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a84:	e7fe      	b.n	8003a84 <NMI_Handler+0x4>

08003a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a86:	b480      	push	{r7}
 8003a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a8a:	e7fe      	b.n	8003a8a <HardFault_Handler+0x4>

08003a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a90:	e7fe      	b.n	8003a90 <MemManage_Handler+0x4>

08003a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a92:	b480      	push	{r7}
 8003a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a96:	e7fe      	b.n	8003a96 <BusFault_Handler+0x4>

08003a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a9c:	e7fe      	b.n	8003a9c <UsageFault_Handler+0x4>

08003a9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003aa2:	bf00      	nop
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003aba:	b480      	push	{r7}
 8003abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003acc:	f000 f930 	bl	8003d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ad0:	bf00      	nop
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ad8:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <TIM3_IRQHandler+0x10>)
 8003ada:	f004 f9c7 	bl	8007e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20002b9c 	.word	0x20002b9c

08003ae8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003aec:	4802      	ldr	r0, [pc, #8]	; (8003af8 <DMA2_Stream4_IRQHandler+0x10>)
 8003aee:	f001 fc65 	bl	80053bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20002a48 	.word	0x20002a48

08003afc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	e00a      	b.n	8003b24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b0e:	f3af 8000 	nop.w
 8003b12:	4601      	mov	r1, r0
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	60ba      	str	r2, [r7, #8]
 8003b1a:	b2ca      	uxtb	r2, r1
 8003b1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	3301      	adds	r3, #1
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	dbf0      	blt.n	8003b0e <_read+0x12>
	}

return len;
 8003b2c:	687b      	ldr	r3, [r7, #4]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
	return -1;
 8003b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b5e:	605a      	str	r2, [r3, #4]
	return 0;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <_isatty>:

int _isatty(int file)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
	return 1;
 8003b76:	2301      	movs	r3, #1
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
	return 0;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
	...

08003ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ba8:	4a14      	ldr	r2, [pc, #80]	; (8003bfc <_sbrk+0x5c>)
 8003baa:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <_sbrk+0x60>)
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bb4:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <_sbrk+0x64>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d102      	bne.n	8003bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bbc:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <_sbrk+0x64>)
 8003bbe:	4a12      	ldr	r2, [pc, #72]	; (8003c08 <_sbrk+0x68>)
 8003bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bc2:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <_sbrk+0x64>)
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4413      	add	r3, r2
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d207      	bcs.n	8003be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bd0:	f004 ff98 	bl	8008b04 <__errno>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	220c      	movs	r2, #12
 8003bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bda:	f04f 33ff 	mov.w	r3, #4294967295
 8003bde:	e009      	b.n	8003bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003be0:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <_sbrk+0x64>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003be6:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <_sbrk+0x64>)
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	4a05      	ldr	r2, [pc, #20]	; (8003c04 <_sbrk+0x64>)
 8003bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20020000 	.word	0x20020000
 8003c00:	00000400 	.word	0x00000400
 8003c04:	20002c2c 	.word	0x20002c2c
 8003c08:	20002c48 	.word	0x20002c48

08003c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c10:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <SystemInit+0x28>)
 8003c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c16:	4a07      	ldr	r2, [pc, #28]	; (8003c34 <SystemInit+0x28>)
 8003c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c20:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <SystemInit+0x28>)
 8003c22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c26:	609a      	str	r2, [r3, #8]
#endif
}
 8003c28:	bf00      	nop
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	e000ed00 	.word	0xe000ed00

08003c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c3e:	e003      	b.n	8003c48 <LoopCopyDataInit>

08003c40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c46:	3104      	adds	r1, #4

08003c48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c48:	480b      	ldr	r0, [pc, #44]	; (8003c78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c4a:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c50:	d3f6      	bcc.n	8003c40 <CopyDataInit>
  ldr  r2, =_sbss
 8003c52:	4a0b      	ldr	r2, [pc, #44]	; (8003c80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c54:	e002      	b.n	8003c5c <LoopFillZerobss>

08003c56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c58:	f842 3b04 	str.w	r3, [r2], #4

08003c5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c5c:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c60:	d3f9      	bcc.n	8003c56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c62:	f7ff ffd3 	bl	8003c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c66:	f004 ff53 	bl	8008b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c6a:	f7fe fe95 	bl	8002998 <main>
  bx  lr    
 8003c6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003c74:	0800b06c 	.word	0x0800b06c
  ldr  r0, =_sdata
 8003c78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c7c:	20000758 	.word	0x20000758
  ldr  r2, =_sbss
 8003c80:	20000758 	.word	0x20000758
  ldr  r3, = _ebss
 8003c84:	20002c44 	.word	0x20002c44

08003c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c88:	e7fe      	b.n	8003c88 <ADC_IRQHandler>
	...

08003c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c90:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <HAL_Init+0x40>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a0d      	ldr	r2, [pc, #52]	; (8003ccc <HAL_Init+0x40>)
 8003c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_Init+0x40>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a0a      	ldr	r2, [pc, #40]	; (8003ccc <HAL_Init+0x40>)
 8003ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ca8:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <HAL_Init+0x40>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a07      	ldr	r2, [pc, #28]	; (8003ccc <HAL_Init+0x40>)
 8003cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cb4:	2003      	movs	r0, #3
 8003cb6:	f001 f9c9 	bl	800504c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cba:	2000      	movs	r0, #0
 8003cbc:	f000 f808 	bl	8003cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cc0:	f7ff fca2 	bl	8003608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40023c00 	.word	0x40023c00

08003cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cd8:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <HAL_InitTick+0x54>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <HAL_InitTick+0x58>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f001 f9e1 	bl	80050b6 <HAL_SYSTICK_Config>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e00e      	b.n	8003d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b0f      	cmp	r3, #15
 8003d02:	d80a      	bhi.n	8003d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d04:	2200      	movs	r2, #0
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0c:	f001 f9a9 	bl	8005062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d10:	4a06      	ldr	r2, [pc, #24]	; (8003d2c <HAL_InitTick+0x5c>)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	e000      	b.n	8003d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	200006e8 	.word	0x200006e8
 8003d28:	200006f0 	.word	0x200006f0
 8003d2c:	200006ec 	.word	0x200006ec

08003d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_IncTick+0x20>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <HAL_IncTick+0x24>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4413      	add	r3, r2
 8003d40:	4a04      	ldr	r2, [pc, #16]	; (8003d54 <HAL_IncTick+0x24>)
 8003d42:	6013      	str	r3, [r2, #0]
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	200006f0 	.word	0x200006f0
 8003d54:	20002c30 	.word	0x20002c30

08003d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d5c:	4b03      	ldr	r3, [pc, #12]	; (8003d6c <HAL_GetTick+0x14>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	20002c30 	.word	0x20002c30

08003d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d78:	f7ff ffee 	bl	8003d58 <HAL_GetTick>
 8003d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d005      	beq.n	8003d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <HAL_Delay+0x44>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d96:	bf00      	nop
 8003d98:	f7ff ffde 	bl	8003d58 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d8f7      	bhi.n	8003d98 <HAL_Delay+0x28>
  {
  }
}
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	200006f0 	.word	0x200006f0

08003db8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e033      	b.n	8003e36 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff fc3e 	bl	8003658 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	f003 0310 	and.w	r3, r3, #16
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d118      	bne.n	8003e28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003dfe:	f023 0302 	bic.w	r3, r3, #2
 8003e02:	f043 0202 	orr.w	r2, r3, #2
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fbe8 	bl	80045e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f023 0303 	bic.w	r3, r3, #3
 8003e1e:	f043 0201 	orr.w	r2, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40
 8003e26:	e001      	b.n	8003e2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_ADC_Start+0x1a>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e097      	b.n	8003f8a <HAL_ADC_Start+0x14a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d018      	beq.n	8003ea2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e80:	4b45      	ldr	r3, [pc, #276]	; (8003f98 <HAL_ADC_Start+0x158>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a45      	ldr	r2, [pc, #276]	; (8003f9c <HAL_ADC_Start+0x15c>)
 8003e86:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8a:	0c9a      	lsrs	r2, r3, #18
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	4413      	add	r3, r2
 8003e92:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e94:	e002      	b.n	8003e9c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f9      	bne.n	8003e96 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d15f      	bne.n	8003f70 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d007      	beq.n	8003ee2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003eda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eee:	d106      	bne.n	8003efe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef4:	f023 0206 	bic.w	r2, r3, #6
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	645a      	str	r2, [r3, #68]	; 0x44
 8003efc:	e002      	b.n	8003f04 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f0c:	4b24      	ldr	r3, [pc, #144]	; (8003fa0 <HAL_ADC_Start+0x160>)
 8003f0e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f18:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f003 031f 	and.w	r3, r3, #31
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10f      	bne.n	8003f46 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d129      	bne.n	8003f88 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	e020      	b.n	8003f88 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a16      	ldr	r2, [pc, #88]	; (8003fa4 <HAL_ADC_Start+0x164>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d11b      	bne.n	8003f88 <HAL_ADC_Start+0x148>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d114      	bne.n	8003f88 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f6c:	609a      	str	r2, [r3, #8]
 8003f6e:	e00b      	b.n	8003f88 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	f043 0210 	orr.w	r2, r3, #16
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f80:	f043 0201 	orr.w	r2, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	200006e8 	.word	0x200006e8
 8003f9c:	431bde83 	.word	0x431bde83
 8003fa0:	40012300 	.word	0x40012300
 8003fa4:	40012000 	.word	0x40012000

08003fa8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc4:	d113      	bne.n	8003fee <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd4:	d10b      	bne.n	8003fee <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f043 0220 	orr.w	r2, r3, #32
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e063      	b.n	80040b6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003fee:	f7ff feb3 	bl	8003d58 <HAL_GetTick>
 8003ff2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003ff4:	e021      	b.n	800403a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffc:	d01d      	beq.n	800403a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d007      	beq.n	8004014 <HAL_ADC_PollForConversion+0x6c>
 8004004:	f7ff fea8 	bl	8003d58 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d212      	bcs.n	800403a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b02      	cmp	r3, #2
 8004020:	d00b      	beq.n	800403a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f043 0204 	orr.w	r2, r3, #4
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e03d      	b.n	80040b6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b02      	cmp	r3, #2
 8004046:	d1d6      	bne.n	8003ff6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0212 	mvn.w	r2, #18
 8004050:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d123      	bne.n	80040b4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004070:	2b00      	cmp	r3, #0
 8004072:	d11f      	bne.n	80040b4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800407e:	2b00      	cmp	r3, #0
 8004080:	d006      	beq.n	8004090 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800408c:	2b00      	cmp	r3, #0
 800408e:	d111      	bne.n	80040b4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d105      	bne.n	80040b4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	f043 0201 	orr.w	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d101      	bne.n	80040de <HAL_ADC_Start_DMA+0x1e>
 80040da:	2302      	movs	r3, #2
 80040dc:	e0ce      	b.n	800427c <HAL_ADC_Start_DMA+0x1bc>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d018      	beq.n	8004126 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004104:	4b5f      	ldr	r3, [pc, #380]	; (8004284 <HAL_ADC_Start_DMA+0x1c4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a5f      	ldr	r2, [pc, #380]	; (8004288 <HAL_ADC_Start_DMA+0x1c8>)
 800410a:	fba2 2303 	umull	r2, r3, r2, r3
 800410e:	0c9a      	lsrs	r2, r3, #18
 8004110:	4613      	mov	r3, r2
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	4413      	add	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004118:	e002      	b.n	8004120 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	3b01      	subs	r3, #1
 800411e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f9      	bne.n	800411a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004134:	d107      	bne.n	8004146 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004144:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b01      	cmp	r3, #1
 8004152:	f040 8086 	bne.w	8004262 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004174:	2b00      	cmp	r3, #0
 8004176:	d007      	beq.n	8004188 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004180:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004194:	d106      	bne.n	80041a4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419a:	f023 0206 	bic.w	r2, r3, #6
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	645a      	str	r2, [r3, #68]	; 0x44
 80041a2:	e002      	b.n	80041aa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041b2:	4b36      	ldr	r3, [pc, #216]	; (800428c <HAL_ADC_Start_DMA+0x1cc>)
 80041b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	4a35      	ldr	r2, [pc, #212]	; (8004290 <HAL_ADC_Start_DMA+0x1d0>)
 80041bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	4a34      	ldr	r2, [pc, #208]	; (8004294 <HAL_ADC_Start_DMA+0x1d4>)
 80041c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	4a33      	ldr	r2, [pc, #204]	; (8004298 <HAL_ADC_Start_DMA+0x1d8>)
 80041cc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80041d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80041e6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041f6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	334c      	adds	r3, #76	; 0x4c
 8004202:	4619      	mov	r1, r3
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f001 f810 	bl	800522c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10f      	bne.n	8004238 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d129      	bne.n	800427a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004234:	609a      	str	r2, [r3, #8]
 8004236:	e020      	b.n	800427a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a17      	ldr	r2, [pc, #92]	; (800429c <HAL_ADC_Start_DMA+0x1dc>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d11b      	bne.n	800427a <HAL_ADC_Start_DMA+0x1ba>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d114      	bne.n	800427a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	e00b      	b.n	800427a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	f043 0210 	orr.w	r2, r3, #16
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	f043 0201 	orr.w	r2, r3, #1
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	200006e8 	.word	0x200006e8
 8004288:	431bde83 	.word	0x431bde83
 800428c:	40012300 	.word	0x40012300
 8004290:	080047d9 	.word	0x080047d9
 8004294:	08004893 	.word	0x08004893
 8004298:	080048af 	.word	0x080048af
 800429c:	40012000 	.word	0x40012000

080042a0 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d101      	bne.n	80042ba <HAL_ADC_Stop_DMA+0x1a>
 80042b6:	2302      	movs	r3, #2
 80042b8:	e048      	b.n	800434c <HAL_ADC_Stop_DMA+0xac>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0201 	bic.w	r2, r2, #1
 80042d0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d130      	bne.n	8004342 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042ee:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d10f      	bne.n	800431e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004302:	4618      	mov	r0, r3
 8004304:	f000 ffea 	bl	80052dc <HAL_DMA_Abort>
 8004308:	4603      	mov	r3, r0
 800430a:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800432c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004336:	f023 0301 	bic.w	r3, r3, #1
 800433a:	f043 0201 	orr.w	r2, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800434a:	7bfb      	ldrb	r3, [r7, #15]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x1c>
 8004394:	2302      	movs	r3, #2
 8004396:	e113      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x244>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b09      	cmp	r3, #9
 80043a6:	d925      	bls.n	80043f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68d9      	ldr	r1, [r3, #12]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	461a      	mov	r2, r3
 80043b6:	4613      	mov	r3, r2
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	4413      	add	r3, r2
 80043bc:	3b1e      	subs	r3, #30
 80043be:	2207      	movs	r2, #7
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	43da      	mvns	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	400a      	ands	r2, r1
 80043cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68d9      	ldr	r1, [r3, #12]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	4618      	mov	r0, r3
 80043e0:	4603      	mov	r3, r0
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	4403      	add	r3, r0
 80043e6:	3b1e      	subs	r3, #30
 80043e8:	409a      	lsls	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	60da      	str	r2, [r3, #12]
 80043f2:	e022      	b.n	800443a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6919      	ldr	r1, [r3, #16]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	461a      	mov	r2, r3
 8004402:	4613      	mov	r3, r2
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	4413      	add	r3, r2
 8004408:	2207      	movs	r2, #7
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	43da      	mvns	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	400a      	ands	r2, r1
 8004416:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6919      	ldr	r1, [r3, #16]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	4618      	mov	r0, r3
 800442a:	4603      	mov	r3, r0
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	4403      	add	r3, r0
 8004430:	409a      	lsls	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b06      	cmp	r3, #6
 8004440:	d824      	bhi.n	800448c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	3b05      	subs	r3, #5
 8004454:	221f      	movs	r2, #31
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43da      	mvns	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	400a      	ands	r2, r1
 8004462:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	4618      	mov	r0, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	3b05      	subs	r3, #5
 800447e:	fa00 f203 	lsl.w	r2, r0, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	635a      	str	r2, [r3, #52]	; 0x34
 800448a:	e04c      	b.n	8004526 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b0c      	cmp	r3, #12
 8004492:	d824      	bhi.n	80044de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	3b23      	subs	r3, #35	; 0x23
 80044a6:	221f      	movs	r2, #31
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	43da      	mvns	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	400a      	ands	r2, r1
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	4618      	mov	r0, r3
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	3b23      	subs	r3, #35	; 0x23
 80044d0:	fa00 f203 	lsl.w	r2, r0, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
 80044dc:	e023      	b.n	8004526 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	3b41      	subs	r3, #65	; 0x41
 80044f0:	221f      	movs	r2, #31
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43da      	mvns	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	400a      	ands	r2, r1
 80044fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	b29b      	uxth	r3, r3
 800450c:	4618      	mov	r0, r3
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	3b41      	subs	r3, #65	; 0x41
 800451a:	fa00 f203 	lsl.w	r2, r0, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004526:	4b29      	ldr	r3, [pc, #164]	; (80045cc <HAL_ADC_ConfigChannel+0x250>)
 8004528:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a28      	ldr	r2, [pc, #160]	; (80045d0 <HAL_ADC_ConfigChannel+0x254>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d10f      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x1d8>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b12      	cmp	r3, #18
 800453a:	d10b      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a1d      	ldr	r2, [pc, #116]	; (80045d0 <HAL_ADC_ConfigChannel+0x254>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d12b      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x23a>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a1c      	ldr	r2, [pc, #112]	; (80045d4 <HAL_ADC_ConfigChannel+0x258>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d003      	beq.n	8004570 <HAL_ADC_ConfigChannel+0x1f4>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b11      	cmp	r3, #17
 800456e:	d122      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a11      	ldr	r2, [pc, #68]	; (80045d4 <HAL_ADC_ConfigChannel+0x258>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d111      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004592:	4b11      	ldr	r3, [pc, #68]	; (80045d8 <HAL_ADC_ConfigChannel+0x25c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a11      	ldr	r2, [pc, #68]	; (80045dc <HAL_ADC_ConfigChannel+0x260>)
 8004598:	fba2 2303 	umull	r2, r3, r2, r3
 800459c:	0c9a      	lsrs	r2, r3, #18
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80045a8:	e002      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	3b01      	subs	r3, #1
 80045ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f9      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	40012300 	.word	0x40012300
 80045d0:	40012000 	.word	0x40012000
 80045d4:	10000012 	.word	0x10000012
 80045d8:	200006e8 	.word	0x200006e8
 80045dc:	431bde83 	.word	0x431bde83

080045e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045e8:	4b79      	ldr	r3, [pc, #484]	; (80047d0 <ADC_Init+0x1f0>)
 80045ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	431a      	orrs	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004614:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6859      	ldr	r1, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	021a      	lsls	r2, r3, #8
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004638:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6859      	ldr	r1, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800465a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6899      	ldr	r1, [r3, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	4a58      	ldr	r2, [pc, #352]	; (80047d4 <ADC_Init+0x1f4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d022      	beq.n	80046be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004686:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6899      	ldr	r1, [r3, #8]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6899      	ldr	r1, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	609a      	str	r2, [r3, #8]
 80046bc:	e00f      	b.n	80046de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0202 	bic.w	r2, r2, #2
 80046ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6899      	ldr	r1, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	7e1b      	ldrb	r3, [r3, #24]
 80046f8:	005a      	lsls	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d01b      	beq.n	8004744 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800471a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800472a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6859      	ldr	r1, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	3b01      	subs	r3, #1
 8004738:	035a      	lsls	r2, r3, #13
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]
 8004742:	e007      	b.n	8004754 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004752:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004762:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	3b01      	subs	r3, #1
 8004770:	051a      	lsls	r2, r3, #20
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004788:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6899      	ldr	r1, [r3, #8]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004796:	025a      	lsls	r2, r3, #9
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6899      	ldr	r1, [r3, #8]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	029a      	lsls	r2, r3, #10
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	609a      	str	r2, [r3, #8]
}
 80047c4:	bf00      	nop
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	40012300 	.word	0x40012300
 80047d4:	0f000001 	.word	0x0f000001

080047d8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d13c      	bne.n	800486c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d12b      	bne.n	8004864 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004810:	2b00      	cmp	r3, #0
 8004812:	d127      	bne.n	8004864 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800481e:	2b00      	cmp	r3, #0
 8004820:	d006      	beq.n	8004830 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800482c:	2b00      	cmp	r3, #0
 800482e:	d119      	bne.n	8004864 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0220 	bic.w	r2, r2, #32
 800483e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d105      	bne.n	8004864 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	f043 0201 	orr.w	r2, r3, #1
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f7fe fe9d 	bl	80035a4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800486a:	e00e      	b.n	800488a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f7ff fd75 	bl	8004368 <HAL_ADC_ErrorCallback>
}
 800487e:	e004      	b.n	800488a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	4798      	blx	r3
}
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b084      	sub	sp, #16
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f7ff fd57 	bl	8004354 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048a6:	bf00      	nop
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b084      	sub	sp, #16
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2240      	movs	r2, #64	; 0x40
 80048c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c6:	f043 0204 	orr.w	r2, r3, #4
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f7ff fd4a 	bl	8004368 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048d4:	bf00      	nop
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	2300      	movs	r3, #0
 80048ee:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_ADCEx_InjectedStart+0x22>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e0aa      	b.n	8004a54 <HAL_ADCEx_InjectedStart+0x178>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b01      	cmp	r3, #1
 8004912:	d018      	beq.n	8004946 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004924:	4b4e      	ldr	r3, [pc, #312]	; (8004a60 <HAL_ADCEx_InjectedStart+0x184>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a4e      	ldr	r2, [pc, #312]	; (8004a64 <HAL_ADCEx_InjectedStart+0x188>)
 800492a:	fba2 2303 	umull	r2, r3, r2, r3
 800492e:	0c9a      	lsrs	r2, r3, #18
 8004930:	4613      	mov	r3, r2
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	4413      	add	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004938:	e002      	b.n	8004940 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	3b01      	subs	r3, #1
 800493e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f9      	bne.n	800493a <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b01      	cmp	r3, #1
 8004952:	d172      	bne.n	8004a3a <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d102      	bne.n	800497a <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f06f 0204 	mvn.w	r2, #4
 800498a:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800498c:	4b36      	ldr	r3, [pc, #216]	; (8004a68 <HAL_ADCEx_InjectedStart+0x18c>)
 800498e:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f003 031f 	and.w	r3, r3, #31
 8004998:	2b00      	cmp	r3, #0
 800499a:	d124      	bne.n	80049e6 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	bf0c      	ite	eq
 80049aa:	2301      	moveq	r3, #1
 80049ac:	2300      	movne	r3, #0
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049bc:	2b00      	cmp	r3, #0
 80049be:	bf0c      	ite	eq
 80049c0:	2301      	moveq	r3, #1
 80049c2:	2300      	movne	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d041      	beq.n	8004a52 <HAL_ADCEx_InjectedStart+0x176>
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d03e      	beq.n	8004a52 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80049e2:	609a      	str	r2, [r3, #8]
 80049e4:	e035      	b.n	8004a52 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	bf0c      	ite	eq
 80049f4:	2301      	moveq	r3, #1
 80049f6:	2300      	movne	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	bf0c      	ite	eq
 8004a0a:	2301      	moveq	r3, #1
 8004a0c:	2300      	movne	r3, #0
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a15      	ldr	r2, [pc, #84]	; (8004a6c <HAL_ADCEx_InjectedStart+0x190>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d11a      	bne.n	8004a52 <HAL_ADCEx_InjectedStart+0x176>
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d017      	beq.n	8004a52 <HAL_ADCEx_InjectedStart+0x176>
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d014      	beq.n	8004a52 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	e00b      	b.n	8004a52 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f043 0210 	orr.w	r2, r3, #16
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4a:	f043 0201 	orr.w	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	371c      	adds	r7, #28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	200006e8 	.word	0x200006e8
 8004a64:	431bde83 	.word	0x431bde83
 8004a68:	40012300 	.word	0x40012300
 8004a6c:	40012000 	.word	0x40012000

08004a70 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <HAL_ADCEx_InjectedStop+0x1a>
 8004a86:	2302      	movs	r3, #2
 8004a88:	e037      	b.n	8004afa <HAL_ADCEx_InjectedStop+0x8a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d120      	bne.n	8004ae0 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d119      	bne.n	8004ae0 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0201 	bic.w	r2, r2, #1
 8004aba:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d112      	bne.n	8004af0 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004ad2:	f023 0301 	bic.w	r3, r3, #1
 8004ad6:	f043 0201 	orr.w	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004ade:	e007      	b.n	8004af0 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	f043 0220 	orr.w	r2, r3, #32
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
	...

08004b08 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f06f 0204 	mvn.w	r2, #4
 8004b1e:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d81f      	bhi.n	8004b68 <HAL_ADCEx_InjectedGetValue+0x60>
 8004b28:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <HAL_ADCEx_InjectedGetValue+0x28>)
 8004b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2e:	bf00      	nop
 8004b30:	08004b5f 	.word	0x08004b5f
 8004b34:	08004b55 	.word	0x08004b55
 8004b38:	08004b4b 	.word	0x08004b4b
 8004b3c:	08004b41 	.word	0x08004b41
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b46:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8004b48:	e00f      	b.n	8004b6a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b50:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8004b52:	e00a      	b.n	8004b6a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004b5c:	e005      	b.n	8004b6a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b64:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004b66:	e000      	b.n	8004b6a <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8004b68:	bf00      	nop
  }
  return tmp;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e17e      	b.n	8004e8e <HAL_ADCEx_InjectedConfigChannel+0x316>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b09      	cmp	r3, #9
 8004b9e:	d925      	bls.n	8004bec <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68d9      	ldr	r1, [r3, #12]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	461a      	mov	r2, r3
 8004bae:	4613      	mov	r3, r2
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	4413      	add	r3, r2
 8004bb4:	3b1e      	subs	r3, #30
 8004bb6:	2207      	movs	r2, #7
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	43da      	mvns	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	400a      	ands	r2, r1
 8004bc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68d9      	ldr	r1, [r3, #12]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	4603      	mov	r3, r0
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	4403      	add	r3, r0
 8004bde:	3b1e      	subs	r3, #30
 8004be0:	409a      	lsls	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	60da      	str	r2, [r3, #12]
 8004bea:	e022      	b.n	8004c32 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6919      	ldr	r1, [r3, #16]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	4413      	add	r3, r2
 8004c00:	2207      	movs	r2, #7
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	43da      	mvns	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	400a      	ands	r2, r1
 8004c0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6919      	ldr	r1, [r3, #16]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	4618      	mov	r0, r3
 8004c22:	4603      	mov	r3, r0
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	4403      	add	r3, r0
 8004c28:	409a      	lsls	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004c40:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	051a      	lsls	r2, r3, #20
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	3303      	adds	r3, #3
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	221f      	movs	r2, #31
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	43da      	mvns	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	400a      	ands	r2, r1
 8004c88:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	4618      	mov	r0, r3
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	3303      	adds	r3, #3
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	fa00 f203 	lsl.w	r2, r0, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	4a75      	ldr	r2, [pc, #468]	; (8004e9c <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d022      	beq.n	8004d10 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004cd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6899      	ldr	r1, [r3, #8]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	699a      	ldr	r2, [r3, #24]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004cfa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6899      	ldr	r1, [r3, #8]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	69da      	ldr	r2, [r3, #28]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	609a      	str	r2, [r3, #8]
 8004d0e:	e00f      	b.n	8004d30 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004d1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004d2e:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	7d5b      	ldrb	r3, [r3, #21]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d008      	beq.n	8004d4a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d46:	605a      	str	r2, [r3, #4]
 8004d48:	e007      	b.n	8004d5a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d58:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	7d1b      	ldrb	r3, [r3, #20]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d008      	beq.n	8004d74 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d70:	605a      	str	r2, [r3, #4]
 8004d72:	e007      	b.n	8004d84 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d82:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d02e      	beq.n	8004dea <HAL_ADCEx_InjectedConfigChannel+0x272>
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d840      	bhi.n	8004e12 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d002      	beq.n	8004d9a <HAL_ADCEx_InjectedConfigChannel+0x222>
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d014      	beq.n	8004dc2 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8004d98:	e03b      	b.n	8004e12 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6812      	ldr	r2, [r2, #0]
 8004da4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004da8:	f023 030f 	bic.w	r3, r3, #15
 8004dac:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6959      	ldr	r1, [r3, #20]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	615a      	str	r2, [r3, #20]
      break;
 8004dc0:	e03b      	b.n	8004e3a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	6812      	ldr	r2, [r2, #0]
 8004dcc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004dd0:	f023 030f 	bic.w	r3, r3, #15
 8004dd4:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6999      	ldr	r1, [r3, #24]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	619a      	str	r2, [r3, #24]
      break;
 8004de8:	e027      	b.n	8004e3a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6812      	ldr	r2, [r2, #0]
 8004df4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004df8:	f023 030f 	bic.w	r3, r3, #15
 8004dfc:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69d9      	ldr	r1, [r3, #28]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	61da      	str	r2, [r3, #28]
      break;
 8004e10:	e013      	b.n	8004e3a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6812      	ldr	r2, [r2, #0]
 8004e1c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004e20:	f023 030f 	bic.w	r3, r3, #15
 8004e24:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6a19      	ldr	r1, [r3, #32]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	621a      	str	r2, [r3, #32]
      break;
 8004e38:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e3a:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a18      	ldr	r2, [pc, #96]	; (8004ea4 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d109      	bne.n	8004e5c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b12      	cmp	r3, #18
 8004e4e:	d105      	bne.n	8004e5c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a10      	ldr	r2, [pc, #64]	; (8004ea4 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d10e      	bne.n	8004e84 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a0f      	ldr	r2, [pc, #60]	; (8004ea8 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d003      	beq.n	8004e78 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b11      	cmp	r3, #17
 8004e76:	d105      	bne.n	8004e84 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	000f0001 	.word	0x000f0001
 8004ea0:	40012300 	.word	0x40012300
 8004ea4:	40012000 	.word	0x40012000
 8004ea8:	10000012 	.word	0x10000012

08004eac <__NVIC_SetPriorityGrouping>:
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ebc:	4b0c      	ldr	r3, [pc, #48]	; (8004ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ec8:	4013      	ands	r3, r2
 8004eca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ede:	4a04      	ldr	r2, [pc, #16]	; (8004ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	60d3      	str	r3, [r2, #12]
}
 8004ee4:	bf00      	nop
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	e000ed00 	.word	0xe000ed00

08004ef4 <__NVIC_GetPriorityGrouping>:
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ef8:	4b04      	ldr	r3, [pc, #16]	; (8004f0c <__NVIC_GetPriorityGrouping+0x18>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	0a1b      	lsrs	r3, r3, #8
 8004efe:	f003 0307 	and.w	r3, r3, #7
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	e000ed00 	.word	0xe000ed00

08004f10 <__NVIC_EnableIRQ>:
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	4603      	mov	r3, r0
 8004f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	db0b      	blt.n	8004f3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f22:	79fb      	ldrb	r3, [r7, #7]
 8004f24:	f003 021f 	and.w	r2, r3, #31
 8004f28:	4907      	ldr	r1, [pc, #28]	; (8004f48 <__NVIC_EnableIRQ+0x38>)
 8004f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	2001      	movs	r0, #1
 8004f32:	fa00 f202 	lsl.w	r2, r0, r2
 8004f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	e000e100 	.word	0xe000e100

08004f4c <__NVIC_SetPriority>:
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	4603      	mov	r3, r0
 8004f54:	6039      	str	r1, [r7, #0]
 8004f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	db0a      	blt.n	8004f76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	490c      	ldr	r1, [pc, #48]	; (8004f98 <__NVIC_SetPriority+0x4c>)
 8004f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f6a:	0112      	lsls	r2, r2, #4
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	440b      	add	r3, r1
 8004f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f74:	e00a      	b.n	8004f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	4908      	ldr	r1, [pc, #32]	; (8004f9c <__NVIC_SetPriority+0x50>)
 8004f7c:	79fb      	ldrb	r3, [r7, #7]
 8004f7e:	f003 030f 	and.w	r3, r3, #15
 8004f82:	3b04      	subs	r3, #4
 8004f84:	0112      	lsls	r2, r2, #4
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	440b      	add	r3, r1
 8004f8a:	761a      	strb	r2, [r3, #24]
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	e000e100 	.word	0xe000e100
 8004f9c:	e000ed00 	.word	0xe000ed00

08004fa0 <NVIC_EncodePriority>:
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b089      	sub	sp, #36	; 0x24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f1c3 0307 	rsb	r3, r3, #7
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	bf28      	it	cs
 8004fbe:	2304      	movcs	r3, #4
 8004fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	2b06      	cmp	r3, #6
 8004fc8:	d902      	bls.n	8004fd0 <NVIC_EncodePriority+0x30>
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	3b03      	subs	r3, #3
 8004fce:	e000      	b.n	8004fd2 <NVIC_EncodePriority+0x32>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	fa02 f303 	lsl.w	r3, r2, r3
 8004fde:	43da      	mvns	r2, r3
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	401a      	ands	r2, r3
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff2:	43d9      	mvns	r1, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ff8:	4313      	orrs	r3, r2
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3724      	adds	r7, #36	; 0x24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
	...

08005008 <SysTick_Config>:
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3b01      	subs	r3, #1
 8005014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005018:	d301      	bcc.n	800501e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800501a:	2301      	movs	r3, #1
 800501c:	e00f      	b.n	800503e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800501e:	4a0a      	ldr	r2, [pc, #40]	; (8005048 <SysTick_Config+0x40>)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3b01      	subs	r3, #1
 8005024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005026:	210f      	movs	r1, #15
 8005028:	f04f 30ff 	mov.w	r0, #4294967295
 800502c:	f7ff ff8e 	bl	8004f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005030:	4b05      	ldr	r3, [pc, #20]	; (8005048 <SysTick_Config+0x40>)
 8005032:	2200      	movs	r2, #0
 8005034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005036:	4b04      	ldr	r3, [pc, #16]	; (8005048 <SysTick_Config+0x40>)
 8005038:	2207      	movs	r2, #7
 800503a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	e000e010 	.word	0xe000e010

0800504c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7ff ff29 	bl	8004eac <__NVIC_SetPriorityGrouping>
}
 800505a:	bf00      	nop
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005062:	b580      	push	{r7, lr}
 8005064:	b086      	sub	sp, #24
 8005066:	af00      	add	r7, sp, #0
 8005068:	4603      	mov	r3, r0
 800506a:	60b9      	str	r1, [r7, #8]
 800506c:	607a      	str	r2, [r7, #4]
 800506e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005074:	f7ff ff3e 	bl	8004ef4 <__NVIC_GetPriorityGrouping>
 8005078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	6978      	ldr	r0, [r7, #20]
 8005080:	f7ff ff8e 	bl	8004fa0 <NVIC_EncodePriority>
 8005084:	4602      	mov	r2, r0
 8005086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800508a:	4611      	mov	r1, r2
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff ff5d 	bl	8004f4c <__NVIC_SetPriority>
}
 8005092:	bf00      	nop
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	4603      	mov	r3, r0
 80050a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff ff31 	bl	8004f10 <__NVIC_EnableIRQ>
}
 80050ae:	bf00      	nop
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff ffa2 	bl	8005008 <SysTick_Config>
 80050c4:	4603      	mov	r3, r0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80050dc:	f7fe fe3c 	bl	8003d58 <HAL_GetTick>
 80050e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e099      	b.n	8005220 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0201 	bic.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800510c:	e00f      	b.n	800512e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800510e:	f7fe fe23 	bl	8003d58 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b05      	cmp	r3, #5
 800511a:	d908      	bls.n	800512e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2220      	movs	r2, #32
 8005120:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2203      	movs	r2, #3
 8005126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e078      	b.n	8005220 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e8      	bne.n	800510e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4b38      	ldr	r3, [pc, #224]	; (8005228 <HAL_DMA_Init+0x158>)
 8005148:	4013      	ands	r3, r2
 800514a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800515a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005166:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005172:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	4313      	orrs	r3, r2
 800517e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	2b04      	cmp	r3, #4
 8005186:	d107      	bne.n	8005198 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005190:	4313      	orrs	r3, r2
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	4313      	orrs	r3, r2
 8005196:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f023 0307 	bic.w	r3, r3, #7
 80051ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d117      	bne.n	80051f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00e      	beq.n	80051f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fadf 	bl	8005798 <DMA_CheckFifoParam>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2240      	movs	r2, #64	; 0x40
 80051e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80051ee:	2301      	movs	r3, #1
 80051f0:	e016      	b.n	8005220 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fa96 	bl	800572c <DMA_CalcBaseAndBitshift>
 8005200:	4603      	mov	r3, r0
 8005202:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005208:	223f      	movs	r2, #63	; 0x3f
 800520a:	409a      	lsls	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	f010803f 	.word	0xf010803f

0800522c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005242:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800524a:	2b01      	cmp	r3, #1
 800524c:	d101      	bne.n	8005252 <HAL_DMA_Start_IT+0x26>
 800524e:	2302      	movs	r3, #2
 8005250:	e040      	b.n	80052d4 <HAL_DMA_Start_IT+0xa8>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b01      	cmp	r3, #1
 8005264:	d12f      	bne.n	80052c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2202      	movs	r2, #2
 800526a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 fa28 	bl	80056d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005284:	223f      	movs	r2, #63	; 0x3f
 8005286:	409a      	lsls	r2, r3
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0216 	orr.w	r2, r2, #22
 800529a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d007      	beq.n	80052b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0208 	orr.w	r2, r2, #8
 80052b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	e005      	b.n	80052d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80052ce:	2302      	movs	r3, #2
 80052d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80052ea:	f7fe fd35 	bl	8003d58 <HAL_GetTick>
 80052ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d008      	beq.n	800530e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2280      	movs	r2, #128	; 0x80
 8005300:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e052      	b.n	80053b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0216 	bic.w	r2, r2, #22
 800531c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695a      	ldr	r2, [r3, #20]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800532c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d103      	bne.n	800533e <HAL_DMA_Abort+0x62>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800533a:	2b00      	cmp	r3, #0
 800533c:	d007      	beq.n	800534e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0208 	bic.w	r2, r2, #8
 800534c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0201 	bic.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800535e:	e013      	b.n	8005388 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005360:	f7fe fcfa 	bl	8003d58 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b05      	cmp	r3, #5
 800536c:	d90c      	bls.n	8005388 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2203      	movs	r2, #3
 8005378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e015      	b.n	80053b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e4      	bne.n	8005360 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539a:	223f      	movs	r2, #63	; 0x3f
 800539c:	409a      	lsls	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053c8:	4b8e      	ldr	r3, [pc, #568]	; (8005604 <HAL_DMA_IRQHandler+0x248>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a8e      	ldr	r2, [pc, #568]	; (8005608 <HAL_DMA_IRQHandler+0x24c>)
 80053ce:	fba2 2303 	umull	r2, r3, r2, r3
 80053d2:	0a9b      	lsrs	r3, r3, #10
 80053d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e6:	2208      	movs	r2, #8
 80053e8:	409a      	lsls	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01a      	beq.n	8005428 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d013      	beq.n	8005428 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0204 	bic.w	r2, r2, #4
 800540e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005414:	2208      	movs	r2, #8
 8005416:	409a      	lsls	r2, r3
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005420:	f043 0201 	orr.w	r2, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800542c:	2201      	movs	r2, #1
 800542e:	409a      	lsls	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4013      	ands	r3, r2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d012      	beq.n	800545e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00b      	beq.n	800545e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544a:	2201      	movs	r2, #1
 800544c:	409a      	lsls	r2, r3
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005456:	f043 0202 	orr.w	r2, r3, #2
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005462:	2204      	movs	r2, #4
 8005464:	409a      	lsls	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4013      	ands	r3, r2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d012      	beq.n	8005494 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00b      	beq.n	8005494 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005480:	2204      	movs	r2, #4
 8005482:	409a      	lsls	r2, r3
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548c:	f043 0204 	orr.w	r2, r3, #4
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005498:	2210      	movs	r2, #16
 800549a:	409a      	lsls	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4013      	ands	r3, r2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d043      	beq.n	800552c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d03c      	beq.n	800552c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b6:	2210      	movs	r2, #16
 80054b8:	409a      	lsls	r2, r3
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d018      	beq.n	80054fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d108      	bne.n	80054ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d024      	beq.n	800552c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	4798      	blx	r3
 80054ea:	e01f      	b.n	800552c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01b      	beq.n	800552c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	4798      	blx	r3
 80054fc:	e016      	b.n	800552c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005508:	2b00      	cmp	r3, #0
 800550a:	d107      	bne.n	800551c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0208 	bic.w	r2, r2, #8
 800551a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005530:	2220      	movs	r2, #32
 8005532:	409a      	lsls	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4013      	ands	r3, r2
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 808f 	beq.w	800565c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 8087 	beq.w	800565c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005552:	2220      	movs	r2, #32
 8005554:	409a      	lsls	r2, r3
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b05      	cmp	r3, #5
 8005564:	d136      	bne.n	80055d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0216 	bic.w	r2, r2, #22
 8005574:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695a      	ldr	r2, [r3, #20]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005584:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	2b00      	cmp	r3, #0
 800558c:	d103      	bne.n	8005596 <HAL_DMA_IRQHandler+0x1da>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005592:	2b00      	cmp	r3, #0
 8005594:	d007      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0208 	bic.w	r2, r2, #8
 80055a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055aa:	223f      	movs	r2, #63	; 0x3f
 80055ac:	409a      	lsls	r2, r3
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d07e      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	4798      	blx	r3
        }
        return;
 80055d2:	e079      	b.n	80056c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d01d      	beq.n	800561e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10d      	bne.n	800560c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d031      	beq.n	800565c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	4798      	blx	r3
 8005600:	e02c      	b.n	800565c <HAL_DMA_IRQHandler+0x2a0>
 8005602:	bf00      	nop
 8005604:	200006e8 	.word	0x200006e8
 8005608:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d023      	beq.n	800565c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	4798      	blx	r3
 800561c:	e01e      	b.n	800565c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10f      	bne.n	800564c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0210 	bic.w	r2, r2, #16
 800563a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005660:	2b00      	cmp	r3, #0
 8005662:	d032      	beq.n	80056ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d022      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2205      	movs	r2, #5
 8005674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0201 	bic.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	3301      	adds	r3, #1
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	429a      	cmp	r2, r3
 8005692:	d307      	bcc.n	80056a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f2      	bne.n	8005688 <HAL_DMA_IRQHandler+0x2cc>
 80056a2:	e000      	b.n	80056a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80056a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	4798      	blx	r3
 80056c6:	e000      	b.n	80056ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80056c8:	bf00      	nop
    }
  }
}
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2b40      	cmp	r3, #64	; 0x40
 80056fc:	d108      	bne.n	8005710 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800570e:	e007      	b.n	8005720 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	60da      	str	r2, [r3, #12]
}
 8005720:	bf00      	nop
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	b2db      	uxtb	r3, r3
 800573a:	3b10      	subs	r3, #16
 800573c:	4a14      	ldr	r2, [pc, #80]	; (8005790 <DMA_CalcBaseAndBitshift+0x64>)
 800573e:	fba2 2303 	umull	r2, r3, r2, r3
 8005742:	091b      	lsrs	r3, r3, #4
 8005744:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005746:	4a13      	ldr	r2, [pc, #76]	; (8005794 <DMA_CalcBaseAndBitshift+0x68>)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	461a      	mov	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b03      	cmp	r3, #3
 8005758:	d909      	bls.n	800576e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005762:	f023 0303 	bic.w	r3, r3, #3
 8005766:	1d1a      	adds	r2, r3, #4
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	659a      	str	r2, [r3, #88]	; 0x58
 800576c:	e007      	b.n	800577e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005776:	f023 0303 	bic.w	r3, r3, #3
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	aaaaaaab 	.word	0xaaaaaaab
 8005794:	0800a7b8 	.word	0x0800a7b8

08005798 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d11f      	bne.n	80057f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d856      	bhi.n	8005866 <DMA_CheckFifoParam+0xce>
 80057b8:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <DMA_CheckFifoParam+0x28>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	080057d1 	.word	0x080057d1
 80057c4:	080057e3 	.word	0x080057e3
 80057c8:	080057d1 	.word	0x080057d1
 80057cc:	08005867 	.word	0x08005867
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d046      	beq.n	800586a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057e0:	e043      	b.n	800586a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057ea:	d140      	bne.n	800586e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057f0:	e03d      	b.n	800586e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057fa:	d121      	bne.n	8005840 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d837      	bhi.n	8005872 <DMA_CheckFifoParam+0xda>
 8005802:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <DMA_CheckFifoParam+0x70>)
 8005804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005808:	08005819 	.word	0x08005819
 800580c:	0800581f 	.word	0x0800581f
 8005810:	08005819 	.word	0x08005819
 8005814:	08005831 	.word	0x08005831
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	73fb      	strb	r3, [r7, #15]
      break;
 800581c:	e030      	b.n	8005880 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d025      	beq.n	8005876 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800582e:	e022      	b.n	8005876 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005834:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005838:	d11f      	bne.n	800587a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800583e:	e01c      	b.n	800587a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b02      	cmp	r3, #2
 8005844:	d903      	bls.n	800584e <DMA_CheckFifoParam+0xb6>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2b03      	cmp	r3, #3
 800584a:	d003      	beq.n	8005854 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800584c:	e018      	b.n	8005880 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	73fb      	strb	r3, [r7, #15]
      break;
 8005852:	e015      	b.n	8005880 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00e      	beq.n	800587e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	73fb      	strb	r3, [r7, #15]
      break;
 8005864:	e00b      	b.n	800587e <DMA_CheckFifoParam+0xe6>
      break;
 8005866:	bf00      	nop
 8005868:	e00a      	b.n	8005880 <DMA_CheckFifoParam+0xe8>
      break;
 800586a:	bf00      	nop
 800586c:	e008      	b.n	8005880 <DMA_CheckFifoParam+0xe8>
      break;
 800586e:	bf00      	nop
 8005870:	e006      	b.n	8005880 <DMA_CheckFifoParam+0xe8>
      break;
 8005872:	bf00      	nop
 8005874:	e004      	b.n	8005880 <DMA_CheckFifoParam+0xe8>
      break;
 8005876:	bf00      	nop
 8005878:	e002      	b.n	8005880 <DMA_CheckFifoParam+0xe8>
      break;   
 800587a:	bf00      	nop
 800587c:	e000      	b.n	8005880 <DMA_CheckFifoParam+0xe8>
      break;
 800587e:	bf00      	nop
    }
  } 
  
  return status; 
 8005880:	7bfb      	ldrb	r3, [r7, #15]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop

08005890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005890:	b480      	push	{r7}
 8005892:	b089      	sub	sp, #36	; 0x24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800589a:	2300      	movs	r3, #0
 800589c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800589e:	2300      	movs	r3, #0
 80058a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058a6:	2300      	movs	r3, #0
 80058a8:	61fb      	str	r3, [r7, #28]
 80058aa:	e159      	b.n	8005b60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80058ac:	2201      	movs	r2, #1
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4013      	ands	r3, r2
 80058be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	f040 8148 	bne.w	8005b5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d005      	beq.n	80058e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d130      	bne.n	8005944 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	2203      	movs	r2, #3
 80058ee:	fa02 f303 	lsl.w	r3, r2, r3
 80058f2:	43db      	mvns	r3, r3
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	4013      	ands	r3, r2
 80058f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68da      	ldr	r2, [r3, #12]
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	4313      	orrs	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005918:	2201      	movs	r2, #1
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	fa02 f303 	lsl.w	r3, r2, r3
 8005920:	43db      	mvns	r3, r3
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	4013      	ands	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	091b      	lsrs	r3, r3, #4
 800592e:	f003 0201 	and.w	r2, r3, #1
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	4313      	orrs	r3, r2
 800593c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f003 0303 	and.w	r3, r3, #3
 800594c:	2b03      	cmp	r3, #3
 800594e:	d017      	beq.n	8005980 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	2203      	movs	r2, #3
 800595c:	fa02 f303 	lsl.w	r3, r2, r3
 8005960:	43db      	mvns	r3, r3
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	4013      	ands	r3, r2
 8005966:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	4313      	orrs	r3, r2
 8005978:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f003 0303 	and.w	r3, r3, #3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d123      	bne.n	80059d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	08da      	lsrs	r2, r3, #3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3208      	adds	r2, #8
 8005994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005998:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	220f      	movs	r2, #15
 80059a4:	fa02 f303 	lsl.w	r3, r2, r3
 80059a8:	43db      	mvns	r3, r3
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	4013      	ands	r3, r2
 80059ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	691a      	ldr	r2, [r3, #16]
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	08da      	lsrs	r2, r3, #3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	3208      	adds	r2, #8
 80059ce:	69b9      	ldr	r1, [r7, #24]
 80059d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	2203      	movs	r2, #3
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	43db      	mvns	r3, r3
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	4013      	ands	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f003 0203 	and.w	r2, r3, #3
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 80a2 	beq.w	8005b5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a16:	2300      	movs	r3, #0
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	4b57      	ldr	r3, [pc, #348]	; (8005b78 <HAL_GPIO_Init+0x2e8>)
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1e:	4a56      	ldr	r2, [pc, #344]	; (8005b78 <HAL_GPIO_Init+0x2e8>)
 8005a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a24:	6453      	str	r3, [r2, #68]	; 0x44
 8005a26:	4b54      	ldr	r3, [pc, #336]	; (8005b78 <HAL_GPIO_Init+0x2e8>)
 8005a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a32:	4a52      	ldr	r2, [pc, #328]	; (8005b7c <HAL_GPIO_Init+0x2ec>)
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	089b      	lsrs	r3, r3, #2
 8005a38:	3302      	adds	r3, #2
 8005a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	220f      	movs	r2, #15
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	4013      	ands	r3, r2
 8005a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a49      	ldr	r2, [pc, #292]	; (8005b80 <HAL_GPIO_Init+0x2f0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d019      	beq.n	8005a92 <HAL_GPIO_Init+0x202>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a48      	ldr	r2, [pc, #288]	; (8005b84 <HAL_GPIO_Init+0x2f4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d013      	beq.n	8005a8e <HAL_GPIO_Init+0x1fe>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a47      	ldr	r2, [pc, #284]	; (8005b88 <HAL_GPIO_Init+0x2f8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00d      	beq.n	8005a8a <HAL_GPIO_Init+0x1fa>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a46      	ldr	r2, [pc, #280]	; (8005b8c <HAL_GPIO_Init+0x2fc>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d007      	beq.n	8005a86 <HAL_GPIO_Init+0x1f6>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a45      	ldr	r2, [pc, #276]	; (8005b90 <HAL_GPIO_Init+0x300>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d101      	bne.n	8005a82 <HAL_GPIO_Init+0x1f2>
 8005a7e:	2304      	movs	r3, #4
 8005a80:	e008      	b.n	8005a94 <HAL_GPIO_Init+0x204>
 8005a82:	2307      	movs	r3, #7
 8005a84:	e006      	b.n	8005a94 <HAL_GPIO_Init+0x204>
 8005a86:	2303      	movs	r3, #3
 8005a88:	e004      	b.n	8005a94 <HAL_GPIO_Init+0x204>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e002      	b.n	8005a94 <HAL_GPIO_Init+0x204>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <HAL_GPIO_Init+0x204>
 8005a92:	2300      	movs	r3, #0
 8005a94:	69fa      	ldr	r2, [r7, #28]
 8005a96:	f002 0203 	and.w	r2, r2, #3
 8005a9a:	0092      	lsls	r2, r2, #2
 8005a9c:	4093      	lsls	r3, r2
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005aa4:	4935      	ldr	r1, [pc, #212]	; (8005b7c <HAL_GPIO_Init+0x2ec>)
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	089b      	lsrs	r3, r3, #2
 8005aaa:	3302      	adds	r3, #2
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ab2:	4b38      	ldr	r3, [pc, #224]	; (8005b94 <HAL_GPIO_Init+0x304>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	43db      	mvns	r3, r3
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ad6:	4a2f      	ldr	r2, [pc, #188]	; (8005b94 <HAL_GPIO_Init+0x304>)
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005adc:	4b2d      	ldr	r3, [pc, #180]	; (8005b94 <HAL_GPIO_Init+0x304>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	43db      	mvns	r3, r3
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b00:	4a24      	ldr	r2, [pc, #144]	; (8005b94 <HAL_GPIO_Init+0x304>)
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b06:	4b23      	ldr	r3, [pc, #140]	; (8005b94 <HAL_GPIO_Init+0x304>)
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	4013      	ands	r3, r2
 8005b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b2a:	4a1a      	ldr	r2, [pc, #104]	; (8005b94 <HAL_GPIO_Init+0x304>)
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b30:	4b18      	ldr	r3, [pc, #96]	; (8005b94 <HAL_GPIO_Init+0x304>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b54:	4a0f      	ldr	r2, [pc, #60]	; (8005b94 <HAL_GPIO_Init+0x304>)
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	61fb      	str	r3, [r7, #28]
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	2b0f      	cmp	r3, #15
 8005b64:	f67f aea2 	bls.w	80058ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b68:	bf00      	nop
 8005b6a:	bf00      	nop
 8005b6c:	3724      	adds	r7, #36	; 0x24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	40013800 	.word	0x40013800
 8005b80:	40020000 	.word	0x40020000
 8005b84:	40020400 	.word	0x40020400
 8005b88:	40020800 	.word	0x40020800
 8005b8c:	40020c00 	.word	0x40020c00
 8005b90:	40021000 	.word	0x40021000
 8005b94:	40013c00 	.word	0x40013c00

08005b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	807b      	strh	r3, [r7, #2]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ba8:	787b      	ldrb	r3, [r7, #1]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bae:	887a      	ldrh	r2, [r7, #2]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005bb4:	e003      	b.n	8005bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005bb6:	887b      	ldrh	r3, [r7, #2]
 8005bb8:	041a      	lsls	r2, r3, #16
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	619a      	str	r2, [r3, #24]
}
 8005bbe:	bf00      	nop
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
	...

08005bcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e12b      	b.n	8005e36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fd fdc4 	bl	8003780 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2224      	movs	r2, #36	; 0x24
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0201 	bic.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c30:	f001 fbbc 	bl	80073ac <HAL_RCC_GetPCLK1Freq>
 8005c34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	4a81      	ldr	r2, [pc, #516]	; (8005e40 <HAL_I2C_Init+0x274>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d807      	bhi.n	8005c50 <HAL_I2C_Init+0x84>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4a80      	ldr	r2, [pc, #512]	; (8005e44 <HAL_I2C_Init+0x278>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	bf94      	ite	ls
 8005c48:	2301      	movls	r3, #1
 8005c4a:	2300      	movhi	r3, #0
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	e006      	b.n	8005c5e <HAL_I2C_Init+0x92>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4a7d      	ldr	r2, [pc, #500]	; (8005e48 <HAL_I2C_Init+0x27c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	bf94      	ite	ls
 8005c58:	2301      	movls	r3, #1
 8005c5a:	2300      	movhi	r3, #0
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e0e7      	b.n	8005e36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4a78      	ldr	r2, [pc, #480]	; (8005e4c <HAL_I2C_Init+0x280>)
 8005c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6e:	0c9b      	lsrs	r3, r3, #18
 8005c70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	4a6a      	ldr	r2, [pc, #424]	; (8005e40 <HAL_I2C_Init+0x274>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d802      	bhi.n	8005ca0 <HAL_I2C_Init+0xd4>
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	e009      	b.n	8005cb4 <HAL_I2C_Init+0xe8>
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005ca6:	fb02 f303 	mul.w	r3, r2, r3
 8005caa:	4a69      	ldr	r2, [pc, #420]	; (8005e50 <HAL_I2C_Init+0x284>)
 8005cac:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb0:	099b      	lsrs	r3, r3, #6
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	6812      	ldr	r2, [r2, #0]
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005cc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	495c      	ldr	r1, [pc, #368]	; (8005e40 <HAL_I2C_Init+0x274>)
 8005cd0:	428b      	cmp	r3, r1
 8005cd2:	d819      	bhi.n	8005d08 <HAL_I2C_Init+0x13c>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	1e59      	subs	r1, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ce2:	1c59      	adds	r1, r3, #1
 8005ce4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ce8:	400b      	ands	r3, r1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <HAL_I2C_Init+0x138>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	1e59      	subs	r1, r3, #1
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d02:	e051      	b.n	8005da8 <HAL_I2C_Init+0x1dc>
 8005d04:	2304      	movs	r3, #4
 8005d06:	e04f      	b.n	8005da8 <HAL_I2C_Init+0x1dc>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d111      	bne.n	8005d34 <HAL_I2C_Init+0x168>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	1e58      	subs	r0, r3, #1
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6859      	ldr	r1, [r3, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	440b      	add	r3, r1
 8005d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d22:	3301      	adds	r3, #1
 8005d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	bf0c      	ite	eq
 8005d2c:	2301      	moveq	r3, #1
 8005d2e:	2300      	movne	r3, #0
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	e012      	b.n	8005d5a <HAL_I2C_Init+0x18e>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	1e58      	subs	r0, r3, #1
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6859      	ldr	r1, [r3, #4]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	440b      	add	r3, r1
 8005d42:	0099      	lsls	r1, r3, #2
 8005d44:	440b      	add	r3, r1
 8005d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	bf0c      	ite	eq
 8005d54:	2301      	moveq	r3, #1
 8005d56:	2300      	movne	r3, #0
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <HAL_I2C_Init+0x196>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e022      	b.n	8005da8 <HAL_I2C_Init+0x1dc>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10e      	bne.n	8005d88 <HAL_I2C_Init+0x1bc>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	1e58      	subs	r0, r3, #1
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6859      	ldr	r1, [r3, #4]
 8005d72:	460b      	mov	r3, r1
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	440b      	add	r3, r1
 8005d78:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d86:	e00f      	b.n	8005da8 <HAL_I2C_Init+0x1dc>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	1e58      	subs	r0, r3, #1
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6859      	ldr	r1, [r3, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	440b      	add	r3, r1
 8005d96:	0099      	lsls	r1, r3, #2
 8005d98:	440b      	add	r3, r1
 8005d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d9e:	3301      	adds	r3, #1
 8005da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	6809      	ldr	r1, [r1, #0]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	69da      	ldr	r2, [r3, #28]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005dd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	6911      	ldr	r1, [r2, #16]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	68d2      	ldr	r2, [r2, #12]
 8005de2:	4311      	orrs	r1, r2
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	6812      	ldr	r2, [r2, #0]
 8005de8:	430b      	orrs	r3, r1
 8005dea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	695a      	ldr	r2, [r3, #20]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0201 	orr.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	000186a0 	.word	0x000186a0
 8005e44:	001e847f 	.word	0x001e847f
 8005e48:	003d08ff 	.word	0x003d08ff
 8005e4c:	431bde83 	.word	0x431bde83
 8005e50:	10624dd3 	.word	0x10624dd3

08005e54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af02      	add	r7, sp, #8
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	4608      	mov	r0, r1
 8005e5e:	4611      	mov	r1, r2
 8005e60:	461a      	mov	r2, r3
 8005e62:	4603      	mov	r3, r0
 8005e64:	817b      	strh	r3, [r7, #10]
 8005e66:	460b      	mov	r3, r1
 8005e68:	813b      	strh	r3, [r7, #8]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e6e:	f7fd ff73 	bl	8003d58 <HAL_GetTick>
 8005e72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	f040 80d9 	bne.w	8006034 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	2319      	movs	r3, #25
 8005e88:	2201      	movs	r2, #1
 8005e8a:	496d      	ldr	r1, [pc, #436]	; (8006040 <HAL_I2C_Mem_Write+0x1ec>)
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f000 fc7f 	bl	8006790 <I2C_WaitOnFlagUntilTimeout>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e0cc      	b.n	8006036 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_I2C_Mem_Write+0x56>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e0c5      	b.n	8006036 <HAL_I2C_Mem_Write+0x1e2>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d007      	beq.n	8005ed0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0201 	orr.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ede:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2221      	movs	r2, #33	; 0x21
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2240      	movs	r2, #64	; 0x40
 8005eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a3a      	ldr	r2, [r7, #32]
 8005efa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4a4d      	ldr	r2, [pc, #308]	; (8006044 <HAL_I2C_Mem_Write+0x1f0>)
 8005f10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f12:	88f8      	ldrh	r0, [r7, #6]
 8005f14:	893a      	ldrh	r2, [r7, #8]
 8005f16:	8979      	ldrh	r1, [r7, #10]
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	9301      	str	r3, [sp, #4]
 8005f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	4603      	mov	r3, r0
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 fab6 	bl	8006494 <I2C_RequestMemoryWrite>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d052      	beq.n	8005fd4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e081      	b.n	8006036 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 fd00 	bl	800693c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00d      	beq.n	8005f5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d107      	bne.n	8005f5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e06b      	b.n	8006036 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	781a      	ldrb	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b04      	cmp	r3, #4
 8005f9a:	d11b      	bne.n	8005fd4 <HAL_I2C_Mem_Write+0x180>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d017      	beq.n	8005fd4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	781a      	ldrb	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1aa      	bne.n	8005f32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 fcec 	bl	80069be <I2C_WaitOnBTFFlagUntilTimeout>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00d      	beq.n	8006008 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d107      	bne.n	8006004 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006002:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e016      	b.n	8006036 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2220      	movs	r2, #32
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	e000      	b.n	8006036 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006034:	2302      	movs	r3, #2
  }
}
 8006036:	4618      	mov	r0, r3
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	00100002 	.word	0x00100002
 8006044:	ffff0000 	.word	0xffff0000

08006048 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08c      	sub	sp, #48	; 0x30
 800604c:	af02      	add	r7, sp, #8
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	4608      	mov	r0, r1
 8006052:	4611      	mov	r1, r2
 8006054:	461a      	mov	r2, r3
 8006056:	4603      	mov	r3, r0
 8006058:	817b      	strh	r3, [r7, #10]
 800605a:	460b      	mov	r3, r1
 800605c:	813b      	strh	r3, [r7, #8]
 800605e:	4613      	mov	r3, r2
 8006060:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006062:	f7fd fe79 	bl	8003d58 <HAL_GetTick>
 8006066:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b20      	cmp	r3, #32
 8006072:	f040 8208 	bne.w	8006486 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	2319      	movs	r3, #25
 800607c:	2201      	movs	r2, #1
 800607e:	497b      	ldr	r1, [pc, #492]	; (800626c <HAL_I2C_Mem_Read+0x224>)
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 fb85 	bl	8006790 <I2C_WaitOnFlagUntilTimeout>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800608c:	2302      	movs	r3, #2
 800608e:	e1fb      	b.n	8006488 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006096:	2b01      	cmp	r3, #1
 8006098:	d101      	bne.n	800609e <HAL_I2C_Mem_Read+0x56>
 800609a:	2302      	movs	r3, #2
 800609c:	e1f4      	b.n	8006488 <HAL_I2C_Mem_Read+0x440>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d007      	beq.n	80060c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0201 	orr.w	r2, r2, #1
 80060c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2222      	movs	r2, #34	; 0x22
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2240      	movs	r2, #64	; 0x40
 80060e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80060f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4a5b      	ldr	r2, [pc, #364]	; (8006270 <HAL_I2C_Mem_Read+0x228>)
 8006104:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006106:	88f8      	ldrh	r0, [r7, #6]
 8006108:	893a      	ldrh	r2, [r7, #8]
 800610a:	8979      	ldrh	r1, [r7, #10]
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	4603      	mov	r3, r0
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f000 fa52 	bl	80065c0 <I2C_RequestMemoryRead>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e1b0      	b.n	8006488 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800612a:	2b00      	cmp	r3, #0
 800612c:	d113      	bne.n	8006156 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800612e:	2300      	movs	r3, #0
 8006130:	623b      	str	r3, [r7, #32]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	623b      	str	r3, [r7, #32]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	623b      	str	r3, [r7, #32]
 8006142:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	e184      	b.n	8006460 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800615a:	2b01      	cmp	r3, #1
 800615c:	d11b      	bne.n	8006196 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800616c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800616e:	2300      	movs	r3, #0
 8006170:	61fb      	str	r3, [r7, #28]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	61fb      	str	r3, [r7, #28]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	61fb      	str	r3, [r7, #28]
 8006182:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	e164      	b.n	8006460 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619a:	2b02      	cmp	r3, #2
 800619c:	d11b      	bne.n	80061d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061be:	2300      	movs	r3, #0
 80061c0:	61bb      	str	r3, [r7, #24]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	61bb      	str	r3, [r7, #24]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	61bb      	str	r3, [r7, #24]
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	e144      	b.n	8006460 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061d6:	2300      	movs	r3, #0
 80061d8:	617b      	str	r3, [r7, #20]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	617b      	str	r3, [r7, #20]
 80061ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80061ec:	e138      	b.n	8006460 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	f200 80f1 	bhi.w	80063da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d123      	bne.n	8006248 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006202:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 fc1b 	bl	8006a40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e139      	b.n	8006488 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	691a      	ldr	r2, [r3, #16]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006230:	3b01      	subs	r3, #1
 8006232:	b29a      	uxth	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623c:	b29b      	uxth	r3, r3
 800623e:	3b01      	subs	r3, #1
 8006240:	b29a      	uxth	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006246:	e10b      	b.n	8006460 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800624c:	2b02      	cmp	r3, #2
 800624e:	d14e      	bne.n	80062ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006256:	2200      	movs	r2, #0
 8006258:	4906      	ldr	r1, [pc, #24]	; (8006274 <HAL_I2C_Mem_Read+0x22c>)
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 fa98 	bl	8006790 <I2C_WaitOnFlagUntilTimeout>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d008      	beq.n	8006278 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e10e      	b.n	8006488 <HAL_I2C_Mem_Read+0x440>
 800626a:	bf00      	nop
 800626c:	00100002 	.word	0x00100002
 8006270:	ffff0000 	.word	0xffff0000
 8006274:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006286:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691a      	ldr	r2, [r3, #16]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a4:	3b01      	subs	r3, #1
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	3b01      	subs	r3, #1
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691a      	ldr	r2, [r3, #16]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	b2d2      	uxtb	r2, r2
 80062c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d6:	3b01      	subs	r3, #1
 80062d8:	b29a      	uxth	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062ec:	e0b8      	b.n	8006460 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f4:	2200      	movs	r2, #0
 80062f6:	4966      	ldr	r1, [pc, #408]	; (8006490 <HAL_I2C_Mem_Read+0x448>)
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 fa49 	bl	8006790 <I2C_WaitOnFlagUntilTimeout>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d001      	beq.n	8006308 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e0bf      	b.n	8006488 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006316:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691a      	ldr	r2, [r3, #16]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006340:	b29b      	uxth	r3, r3
 8006342:	3b01      	subs	r3, #1
 8006344:	b29a      	uxth	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006350:	2200      	movs	r2, #0
 8006352:	494f      	ldr	r1, [pc, #316]	; (8006490 <HAL_I2C_Mem_Read+0x448>)
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 fa1b 	bl	8006790 <I2C_WaitOnFlagUntilTimeout>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e091      	b.n	8006488 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006372:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691a      	ldr	r2, [r3, #16]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006390:	3b01      	subs	r3, #1
 8006392:	b29a      	uxth	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800639c:	b29b      	uxth	r3, r3
 800639e:	3b01      	subs	r3, #1
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	691a      	ldr	r2, [r3, #16]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	b2d2      	uxtb	r2, r2
 80063b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c2:	3b01      	subs	r3, #1
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	3b01      	subs	r3, #1
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063d8:	e042      	b.n	8006460 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 fb2e 	bl	8006a40 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e04c      	b.n	8006488 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	b2d2      	uxtb	r2, r2
 80063fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640a:	3b01      	subs	r3, #1
 800640c:	b29a      	uxth	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006416:	b29b      	uxth	r3, r3
 8006418:	3b01      	subs	r3, #1
 800641a:	b29a      	uxth	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	f003 0304 	and.w	r3, r3, #4
 800642a:	2b04      	cmp	r3, #4
 800642c:	d118      	bne.n	8006460 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	691a      	ldr	r2, [r3, #16]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800644a:	3b01      	subs	r3, #1
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006456:	b29b      	uxth	r3, r3
 8006458:	3b01      	subs	r3, #1
 800645a:	b29a      	uxth	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006464:	2b00      	cmp	r3, #0
 8006466:	f47f aec2 	bne.w	80061ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2220      	movs	r2, #32
 800646e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	e000      	b.n	8006488 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006486:	2302      	movs	r3, #2
  }
}
 8006488:	4618      	mov	r0, r3
 800648a:	3728      	adds	r7, #40	; 0x28
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	00010004 	.word	0x00010004

08006494 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af02      	add	r7, sp, #8
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	4608      	mov	r0, r1
 800649e:	4611      	mov	r1, r2
 80064a0:	461a      	mov	r2, r3
 80064a2:	4603      	mov	r3, r0
 80064a4:	817b      	strh	r3, [r7, #10]
 80064a6:	460b      	mov	r3, r1
 80064a8:	813b      	strh	r3, [r7, #8]
 80064aa:	4613      	mov	r3, r2
 80064ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 f960 	bl	8006790 <I2C_WaitOnFlagUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00d      	beq.n	80064f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e4:	d103      	bne.n	80064ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e05f      	b.n	80065b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064f2:	897b      	ldrh	r3, [r7, #10]
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	461a      	mov	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006500:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	6a3a      	ldr	r2, [r7, #32]
 8006506:	492d      	ldr	r1, [pc, #180]	; (80065bc <I2C_RequestMemoryWrite+0x128>)
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 f998 	bl	800683e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e04c      	b.n	80065b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006518:	2300      	movs	r3, #0
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800652e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006530:	6a39      	ldr	r1, [r7, #32]
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 fa02 	bl	800693c <I2C_WaitOnTXEFlagUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00d      	beq.n	800655a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	2b04      	cmp	r3, #4
 8006544:	d107      	bne.n	8006556 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006554:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e02b      	b.n	80065b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800655a:	88fb      	ldrh	r3, [r7, #6]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d105      	bne.n	800656c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006560:	893b      	ldrh	r3, [r7, #8]
 8006562:	b2da      	uxtb	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	611a      	str	r2, [r3, #16]
 800656a:	e021      	b.n	80065b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800656c:	893b      	ldrh	r3, [r7, #8]
 800656e:	0a1b      	lsrs	r3, r3, #8
 8006570:	b29b      	uxth	r3, r3
 8006572:	b2da      	uxtb	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800657a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657c:	6a39      	ldr	r1, [r7, #32]
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 f9dc 	bl	800693c <I2C_WaitOnTXEFlagUntilTimeout>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00d      	beq.n	80065a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	2b04      	cmp	r3, #4
 8006590:	d107      	bne.n	80065a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e005      	b.n	80065b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065a6:	893b      	ldrh	r3, [r7, #8]
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	00010002 	.word	0x00010002

080065c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b088      	sub	sp, #32
 80065c4:	af02      	add	r7, sp, #8
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	4608      	mov	r0, r1
 80065ca:	4611      	mov	r1, r2
 80065cc:	461a      	mov	r2, r3
 80065ce:	4603      	mov	r3, r0
 80065d0:	817b      	strh	r3, [r7, #10]
 80065d2:	460b      	mov	r3, r1
 80065d4:	813b      	strh	r3, [r7, #8]
 80065d6:	4613      	mov	r3, r2
 80065d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	2200      	movs	r2, #0
 8006602:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 f8c2 	bl	8006790 <I2C_WaitOnFlagUntilTimeout>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00d      	beq.n	800662e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006620:	d103      	bne.n	800662a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006628:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e0aa      	b.n	8006784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800662e:	897b      	ldrh	r3, [r7, #10]
 8006630:	b2db      	uxtb	r3, r3
 8006632:	461a      	mov	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800663c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	6a3a      	ldr	r2, [r7, #32]
 8006642:	4952      	ldr	r1, [pc, #328]	; (800678c <I2C_RequestMemoryRead+0x1cc>)
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 f8fa 	bl	800683e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d001      	beq.n	8006654 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e097      	b.n	8006784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006654:	2300      	movs	r3, #0
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	617b      	str	r3, [r7, #20]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800666a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666c:	6a39      	ldr	r1, [r7, #32]
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 f964 	bl	800693c <I2C_WaitOnTXEFlagUntilTimeout>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00d      	beq.n	8006696 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	2b04      	cmp	r3, #4
 8006680:	d107      	bne.n	8006692 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006690:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e076      	b.n	8006784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006696:	88fb      	ldrh	r3, [r7, #6]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d105      	bne.n	80066a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800669c:	893b      	ldrh	r3, [r7, #8]
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	611a      	str	r2, [r3, #16]
 80066a6:	e021      	b.n	80066ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066a8:	893b      	ldrh	r3, [r7, #8]
 80066aa:	0a1b      	lsrs	r3, r3, #8
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b8:	6a39      	ldr	r1, [r7, #32]
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 f93e 	bl	800693c <I2C_WaitOnTXEFlagUntilTimeout>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00d      	beq.n	80066e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d107      	bne.n	80066de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e050      	b.n	8006784 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066e2:	893b      	ldrh	r3, [r7, #8]
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ee:	6a39      	ldr	r1, [r7, #32]
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 f923 	bl	800693c <I2C_WaitOnTXEFlagUntilTimeout>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00d      	beq.n	8006718 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006700:	2b04      	cmp	r3, #4
 8006702:	d107      	bne.n	8006714 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006712:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e035      	b.n	8006784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006726:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	2200      	movs	r2, #0
 8006730:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f82b 	bl	8006790 <I2C_WaitOnFlagUntilTimeout>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00d      	beq.n	800675c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800674e:	d103      	bne.n	8006758 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006756:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e013      	b.n	8006784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800675c:	897b      	ldrh	r3, [r7, #10]
 800675e:	b2db      	uxtb	r3, r3
 8006760:	f043 0301 	orr.w	r3, r3, #1
 8006764:	b2da      	uxtb	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	6a3a      	ldr	r2, [r7, #32]
 8006770:	4906      	ldr	r1, [pc, #24]	; (800678c <I2C_RequestMemoryRead+0x1cc>)
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 f863 	bl	800683e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e000      	b.n	8006784 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	00010002 	.word	0x00010002

08006790 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	603b      	str	r3, [r7, #0]
 800679c:	4613      	mov	r3, r2
 800679e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067a0:	e025      	b.n	80067ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a8:	d021      	beq.n	80067ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067aa:	f7fd fad5 	bl	8003d58 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d302      	bcc.n	80067c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d116      	bne.n	80067ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	f043 0220 	orr.w	r2, r3, #32
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e023      	b.n	8006836 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	0c1b      	lsrs	r3, r3, #16
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d10d      	bne.n	8006814 <I2C_WaitOnFlagUntilTimeout+0x84>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	43da      	mvns	r2, r3
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	4013      	ands	r3, r2
 8006804:	b29b      	uxth	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	bf0c      	ite	eq
 800680a:	2301      	moveq	r3, #1
 800680c:	2300      	movne	r3, #0
 800680e:	b2db      	uxtb	r3, r3
 8006810:	461a      	mov	r2, r3
 8006812:	e00c      	b.n	800682e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	43da      	mvns	r2, r3
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	4013      	ands	r3, r2
 8006820:	b29b      	uxth	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	bf0c      	ite	eq
 8006826:	2301      	moveq	r3, #1
 8006828:	2300      	movne	r3, #0
 800682a:	b2db      	uxtb	r3, r3
 800682c:	461a      	mov	r2, r3
 800682e:	79fb      	ldrb	r3, [r7, #7]
 8006830:	429a      	cmp	r2, r3
 8006832:	d0b6      	beq.n	80067a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	607a      	str	r2, [r7, #4]
 800684a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800684c:	e051      	b.n	80068f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800685c:	d123      	bne.n	80068a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800686c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006876:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2220      	movs	r2, #32
 8006882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	f043 0204 	orr.w	r2, r3, #4
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e046      	b.n	8006934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ac:	d021      	beq.n	80068f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ae:	f7fd fa53 	bl	8003d58 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d302      	bcc.n	80068c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d116      	bne.n	80068f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	f043 0220 	orr.w	r2, r3, #32
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e020      	b.n	8006934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	0c1b      	lsrs	r3, r3, #16
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d10c      	bne.n	8006916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	43da      	mvns	r2, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	4013      	ands	r3, r2
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	bf14      	ite	ne
 800690e:	2301      	movne	r3, #1
 8006910:	2300      	moveq	r3, #0
 8006912:	b2db      	uxtb	r3, r3
 8006914:	e00b      	b.n	800692e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	43da      	mvns	r2, r3
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	4013      	ands	r3, r2
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	bf14      	ite	ne
 8006928:	2301      	movne	r3, #1
 800692a:	2300      	moveq	r3, #0
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d18d      	bne.n	800684e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006948:	e02d      	b.n	80069a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 f8ce 	bl	8006aec <I2C_IsAcknowledgeFailed>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e02d      	b.n	80069b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006960:	d021      	beq.n	80069a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006962:	f7fd f9f9 	bl	8003d58 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	429a      	cmp	r2, r3
 8006970:	d302      	bcc.n	8006978 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d116      	bne.n	80069a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2220      	movs	r2, #32
 8006982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	f043 0220 	orr.w	r2, r3, #32
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e007      	b.n	80069b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b0:	2b80      	cmp	r3, #128	; 0x80
 80069b2:	d1ca      	bne.n	800694a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b084      	sub	sp, #16
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069ca:	e02d      	b.n	8006a28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 f88d 	bl	8006aec <I2C_IsAcknowledgeFailed>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e02d      	b.n	8006a38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e2:	d021      	beq.n	8006a28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e4:	f7fd f9b8 	bl	8003d58 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d302      	bcc.n	80069fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d116      	bne.n	8006a28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a14:	f043 0220 	orr.w	r2, r3, #32
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e007      	b.n	8006a38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	f003 0304 	and.w	r3, r3, #4
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d1ca      	bne.n	80069cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a4c:	e042      	b.n	8006ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	f003 0310 	and.w	r3, r3, #16
 8006a58:	2b10      	cmp	r3, #16
 8006a5a:	d119      	bne.n	8006a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f06f 0210 	mvn.w	r2, #16
 8006a64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e029      	b.n	8006ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a90:	f7fd f962 	bl	8003d58 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d302      	bcc.n	8006aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d116      	bne.n	8006ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac0:	f043 0220 	orr.w	r2, r3, #32
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e007      	b.n	8006ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ade:	2b40      	cmp	r3, #64	; 0x40
 8006ae0:	d1b5      	bne.n	8006a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b02:	d11b      	bne.n	8006b3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2220      	movs	r2, #32
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b28:	f043 0204 	orr.w	r2, r3, #4
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e000      	b.n	8006b3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
	...

08006b4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e267      	b.n	800702e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d075      	beq.n	8006c56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b6a:	4b88      	ldr	r3, [pc, #544]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f003 030c 	and.w	r3, r3, #12
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	d00c      	beq.n	8006b90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b76:	4b85      	ldr	r3, [pc, #532]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b7e:	2b08      	cmp	r3, #8
 8006b80:	d112      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b82:	4b82      	ldr	r3, [pc, #520]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b8e:	d10b      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b90:	4b7e      	ldr	r3, [pc, #504]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d05b      	beq.n	8006c54 <HAL_RCC_OscConfig+0x108>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d157      	bne.n	8006c54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e242      	b.n	800702e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb0:	d106      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x74>
 8006bb2:	4b76      	ldr	r3, [pc, #472]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a75      	ldr	r2, [pc, #468]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bbc:	6013      	str	r3, [r2, #0]
 8006bbe:	e01d      	b.n	8006bfc <HAL_RCC_OscConfig+0xb0>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bc8:	d10c      	bne.n	8006be4 <HAL_RCC_OscConfig+0x98>
 8006bca:	4b70      	ldr	r3, [pc, #448]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a6f      	ldr	r2, [pc, #444]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bd4:	6013      	str	r3, [r2, #0]
 8006bd6:	4b6d      	ldr	r3, [pc, #436]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a6c      	ldr	r2, [pc, #432]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006be0:	6013      	str	r3, [r2, #0]
 8006be2:	e00b      	b.n	8006bfc <HAL_RCC_OscConfig+0xb0>
 8006be4:	4b69      	ldr	r3, [pc, #420]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a68      	ldr	r2, [pc, #416]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bee:	6013      	str	r3, [r2, #0]
 8006bf0:	4b66      	ldr	r3, [pc, #408]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a65      	ldr	r2, [pc, #404]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d013      	beq.n	8006c2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c04:	f7fd f8a8 	bl	8003d58 <HAL_GetTick>
 8006c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c0a:	e008      	b.n	8006c1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c0c:	f7fd f8a4 	bl	8003d58 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b64      	cmp	r3, #100	; 0x64
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e207      	b.n	800702e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c1e:	4b5b      	ldr	r3, [pc, #364]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0f0      	beq.n	8006c0c <HAL_RCC_OscConfig+0xc0>
 8006c2a:	e014      	b.n	8006c56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c2c:	f7fd f894 	bl	8003d58 <HAL_GetTick>
 8006c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c32:	e008      	b.n	8006c46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c34:	f7fd f890 	bl	8003d58 <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	2b64      	cmp	r3, #100	; 0x64
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e1f3      	b.n	800702e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c46:	4b51      	ldr	r3, [pc, #324]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1f0      	bne.n	8006c34 <HAL_RCC_OscConfig+0xe8>
 8006c52:	e000      	b.n	8006c56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d063      	beq.n	8006d2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c62:	4b4a      	ldr	r3, [pc, #296]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f003 030c 	and.w	r3, r3, #12
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00b      	beq.n	8006c86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c6e:	4b47      	ldr	r3, [pc, #284]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c76:	2b08      	cmp	r3, #8
 8006c78:	d11c      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c7a:	4b44      	ldr	r3, [pc, #272]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d116      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c86:	4b41      	ldr	r3, [pc, #260]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d005      	beq.n	8006c9e <HAL_RCC_OscConfig+0x152>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d001      	beq.n	8006c9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e1c7      	b.n	800702e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c9e:	4b3b      	ldr	r3, [pc, #236]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	00db      	lsls	r3, r3, #3
 8006cac:	4937      	ldr	r1, [pc, #220]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cb2:	e03a      	b.n	8006d2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d020      	beq.n	8006cfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cbc:	4b34      	ldr	r3, [pc, #208]	; (8006d90 <HAL_RCC_OscConfig+0x244>)
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc2:	f7fd f849 	bl	8003d58 <HAL_GetTick>
 8006cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cc8:	e008      	b.n	8006cdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cca:	f7fd f845 	bl	8003d58 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d901      	bls.n	8006cdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e1a8      	b.n	800702e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cdc:	4b2b      	ldr	r3, [pc, #172]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0f0      	beq.n	8006cca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ce8:	4b28      	ldr	r3, [pc, #160]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	00db      	lsls	r3, r3, #3
 8006cf6:	4925      	ldr	r1, [pc, #148]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	600b      	str	r3, [r1, #0]
 8006cfc:	e015      	b.n	8006d2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cfe:	4b24      	ldr	r3, [pc, #144]	; (8006d90 <HAL_RCC_OscConfig+0x244>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d04:	f7fd f828 	bl	8003d58 <HAL_GetTick>
 8006d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d0a:	e008      	b.n	8006d1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d0c:	f7fd f824 	bl	8003d58 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e187      	b.n	800702e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d1e:	4b1b      	ldr	r3, [pc, #108]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0302 	and.w	r3, r3, #2
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1f0      	bne.n	8006d0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0308 	and.w	r3, r3, #8
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d036      	beq.n	8006da4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d016      	beq.n	8006d6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d3e:	4b15      	ldr	r3, [pc, #84]	; (8006d94 <HAL_RCC_OscConfig+0x248>)
 8006d40:	2201      	movs	r2, #1
 8006d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d44:	f7fd f808 	bl	8003d58 <HAL_GetTick>
 8006d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d4a:	e008      	b.n	8006d5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d4c:	f7fd f804 	bl	8003d58 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e167      	b.n	800702e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d5e:	4b0b      	ldr	r3, [pc, #44]	; (8006d8c <HAL_RCC_OscConfig+0x240>)
 8006d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0f0      	beq.n	8006d4c <HAL_RCC_OscConfig+0x200>
 8006d6a:	e01b      	b.n	8006da4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d6c:	4b09      	ldr	r3, [pc, #36]	; (8006d94 <HAL_RCC_OscConfig+0x248>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d72:	f7fc fff1 	bl	8003d58 <HAL_GetTick>
 8006d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d78:	e00e      	b.n	8006d98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d7a:	f7fc ffed 	bl	8003d58 <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d907      	bls.n	8006d98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e150      	b.n	800702e <HAL_RCC_OscConfig+0x4e2>
 8006d8c:	40023800 	.word	0x40023800
 8006d90:	42470000 	.word	0x42470000
 8006d94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d98:	4b88      	ldr	r3, [pc, #544]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1ea      	bne.n	8006d7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 8097 	beq.w	8006ee0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006db2:	2300      	movs	r3, #0
 8006db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006db6:	4b81      	ldr	r3, [pc, #516]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10f      	bne.n	8006de2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60bb      	str	r3, [r7, #8]
 8006dc6:	4b7d      	ldr	r3, [pc, #500]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dca:	4a7c      	ldr	r2, [pc, #496]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8006dd2:	4b7a      	ldr	r3, [pc, #488]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dda:	60bb      	str	r3, [r7, #8]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dde:	2301      	movs	r3, #1
 8006de0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006de2:	4b77      	ldr	r3, [pc, #476]	; (8006fc0 <HAL_RCC_OscConfig+0x474>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d118      	bne.n	8006e20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dee:	4b74      	ldr	r3, [pc, #464]	; (8006fc0 <HAL_RCC_OscConfig+0x474>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a73      	ldr	r2, [pc, #460]	; (8006fc0 <HAL_RCC_OscConfig+0x474>)
 8006df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dfa:	f7fc ffad 	bl	8003d58 <HAL_GetTick>
 8006dfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e00:	e008      	b.n	8006e14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e02:	f7fc ffa9 	bl	8003d58 <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d901      	bls.n	8006e14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e10c      	b.n	800702e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e14:	4b6a      	ldr	r3, [pc, #424]	; (8006fc0 <HAL_RCC_OscConfig+0x474>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d0f0      	beq.n	8006e02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d106      	bne.n	8006e36 <HAL_RCC_OscConfig+0x2ea>
 8006e28:	4b64      	ldr	r3, [pc, #400]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2c:	4a63      	ldr	r2, [pc, #396]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006e2e:	f043 0301 	orr.w	r3, r3, #1
 8006e32:	6713      	str	r3, [r2, #112]	; 0x70
 8006e34:	e01c      	b.n	8006e70 <HAL_RCC_OscConfig+0x324>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	2b05      	cmp	r3, #5
 8006e3c:	d10c      	bne.n	8006e58 <HAL_RCC_OscConfig+0x30c>
 8006e3e:	4b5f      	ldr	r3, [pc, #380]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e42:	4a5e      	ldr	r2, [pc, #376]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006e44:	f043 0304 	orr.w	r3, r3, #4
 8006e48:	6713      	str	r3, [r2, #112]	; 0x70
 8006e4a:	4b5c      	ldr	r3, [pc, #368]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4e:	4a5b      	ldr	r2, [pc, #364]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006e50:	f043 0301 	orr.w	r3, r3, #1
 8006e54:	6713      	str	r3, [r2, #112]	; 0x70
 8006e56:	e00b      	b.n	8006e70 <HAL_RCC_OscConfig+0x324>
 8006e58:	4b58      	ldr	r3, [pc, #352]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5c:	4a57      	ldr	r2, [pc, #348]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006e5e:	f023 0301 	bic.w	r3, r3, #1
 8006e62:	6713      	str	r3, [r2, #112]	; 0x70
 8006e64:	4b55      	ldr	r3, [pc, #340]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e68:	4a54      	ldr	r2, [pc, #336]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006e6a:	f023 0304 	bic.w	r3, r3, #4
 8006e6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d015      	beq.n	8006ea4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e78:	f7fc ff6e 	bl	8003d58 <HAL_GetTick>
 8006e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e7e:	e00a      	b.n	8006e96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e80:	f7fc ff6a 	bl	8003d58 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d901      	bls.n	8006e96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e0cb      	b.n	800702e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e96:	4b49      	ldr	r3, [pc, #292]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0ee      	beq.n	8006e80 <HAL_RCC_OscConfig+0x334>
 8006ea2:	e014      	b.n	8006ece <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ea4:	f7fc ff58 	bl	8003d58 <HAL_GetTick>
 8006ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006eaa:	e00a      	b.n	8006ec2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eac:	f7fc ff54 	bl	8003d58 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e0b5      	b.n	800702e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ec2:	4b3e      	ldr	r3, [pc, #248]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1ee      	bne.n	8006eac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ece:	7dfb      	ldrb	r3, [r7, #23]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d105      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ed4:	4b39      	ldr	r3, [pc, #228]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed8:	4a38      	ldr	r2, [pc, #224]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ede:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 80a1 	beq.w	800702c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006eea:	4b34      	ldr	r3, [pc, #208]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f003 030c 	and.w	r3, r3, #12
 8006ef2:	2b08      	cmp	r3, #8
 8006ef4:	d05c      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d141      	bne.n	8006f82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006efe:	4b31      	ldr	r3, [pc, #196]	; (8006fc4 <HAL_RCC_OscConfig+0x478>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f04:	f7fc ff28 	bl	8003d58 <HAL_GetTick>
 8006f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f0a:	e008      	b.n	8006f1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f0c:	f7fc ff24 	bl	8003d58 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e087      	b.n	800702e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f1e:	4b27      	ldr	r3, [pc, #156]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1f0      	bne.n	8006f0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69da      	ldr	r2, [r3, #28]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	431a      	orrs	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	019b      	lsls	r3, r3, #6
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f40:	085b      	lsrs	r3, r3, #1
 8006f42:	3b01      	subs	r3, #1
 8006f44:	041b      	lsls	r3, r3, #16
 8006f46:	431a      	orrs	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	061b      	lsls	r3, r3, #24
 8006f4e:	491b      	ldr	r1, [pc, #108]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f54:	4b1b      	ldr	r3, [pc, #108]	; (8006fc4 <HAL_RCC_OscConfig+0x478>)
 8006f56:	2201      	movs	r2, #1
 8006f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f5a:	f7fc fefd 	bl	8003d58 <HAL_GetTick>
 8006f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f60:	e008      	b.n	8006f74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f62:	f7fc fef9 	bl	8003d58 <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d901      	bls.n	8006f74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e05c      	b.n	800702e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f74:	4b11      	ldr	r3, [pc, #68]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d0f0      	beq.n	8006f62 <HAL_RCC_OscConfig+0x416>
 8006f80:	e054      	b.n	800702c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f82:	4b10      	ldr	r3, [pc, #64]	; (8006fc4 <HAL_RCC_OscConfig+0x478>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f88:	f7fc fee6 	bl	8003d58 <HAL_GetTick>
 8006f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f8e:	e008      	b.n	8006fa2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f90:	f7fc fee2 	bl	8003d58 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e045      	b.n	800702e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fa2:	4b06      	ldr	r3, [pc, #24]	; (8006fbc <HAL_RCC_OscConfig+0x470>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1f0      	bne.n	8006f90 <HAL_RCC_OscConfig+0x444>
 8006fae:	e03d      	b.n	800702c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d107      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e038      	b.n	800702e <HAL_RCC_OscConfig+0x4e2>
 8006fbc:	40023800 	.word	0x40023800
 8006fc0:	40007000 	.word	0x40007000
 8006fc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fc8:	4b1b      	ldr	r3, [pc, #108]	; (8007038 <HAL_RCC_OscConfig+0x4ec>)
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d028      	beq.n	8007028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d121      	bne.n	8007028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d11a      	bne.n	8007028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ffe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007000:	4293      	cmp	r3, r2
 8007002:	d111      	bne.n	8007028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	085b      	lsrs	r3, r3, #1
 8007010:	3b01      	subs	r3, #1
 8007012:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007014:	429a      	cmp	r2, r3
 8007016:	d107      	bne.n	8007028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007022:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007024:	429a      	cmp	r2, r3
 8007026:	d001      	beq.n	800702c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e000      	b.n	800702e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3718      	adds	r7, #24
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	40023800 	.word	0x40023800

0800703c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e0cc      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007050:	4b68      	ldr	r3, [pc, #416]	; (80071f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0307 	and.w	r3, r3, #7
 8007058:	683a      	ldr	r2, [r7, #0]
 800705a:	429a      	cmp	r2, r3
 800705c:	d90c      	bls.n	8007078 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800705e:	4b65      	ldr	r3, [pc, #404]	; (80071f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	b2d2      	uxtb	r2, r2
 8007064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007066:	4b63      	ldr	r3, [pc, #396]	; (80071f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0307 	and.w	r3, r3, #7
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	429a      	cmp	r2, r3
 8007072:	d001      	beq.n	8007078 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e0b8      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b00      	cmp	r3, #0
 8007082:	d020      	beq.n	80070c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	2b00      	cmp	r3, #0
 800708e:	d005      	beq.n	800709c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007090:	4b59      	ldr	r3, [pc, #356]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	4a58      	ldr	r2, [pc, #352]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007096:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800709a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0308 	and.w	r3, r3, #8
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d005      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070a8:	4b53      	ldr	r3, [pc, #332]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	4a52      	ldr	r2, [pc, #328]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 80070ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070b4:	4b50      	ldr	r3, [pc, #320]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	494d      	ldr	r1, [pc, #308]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d044      	beq.n	800715c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d107      	bne.n	80070ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070da:	4b47      	ldr	r3, [pc, #284]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d119      	bne.n	800711a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e07f      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d003      	beq.n	80070fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d107      	bne.n	800710a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070fa:	4b3f      	ldr	r3, [pc, #252]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d109      	bne.n	800711a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e06f      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800710a:	4b3b      	ldr	r3, [pc, #236]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e067      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800711a:	4b37      	ldr	r3, [pc, #220]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f023 0203 	bic.w	r2, r3, #3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	4934      	ldr	r1, [pc, #208]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007128:	4313      	orrs	r3, r2
 800712a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800712c:	f7fc fe14 	bl	8003d58 <HAL_GetTick>
 8007130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007132:	e00a      	b.n	800714a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007134:	f7fc fe10 	bl	8003d58 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007142:	4293      	cmp	r3, r2
 8007144:	d901      	bls.n	800714a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e04f      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800714a:	4b2b      	ldr	r3, [pc, #172]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f003 020c 	and.w	r2, r3, #12
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	429a      	cmp	r2, r3
 800715a:	d1eb      	bne.n	8007134 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800715c:	4b25      	ldr	r3, [pc, #148]	; (80071f4 <HAL_RCC_ClockConfig+0x1b8>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0307 	and.w	r3, r3, #7
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	429a      	cmp	r2, r3
 8007168:	d20c      	bcs.n	8007184 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800716a:	4b22      	ldr	r3, [pc, #136]	; (80071f4 <HAL_RCC_ClockConfig+0x1b8>)
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	b2d2      	uxtb	r2, r2
 8007170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007172:	4b20      	ldr	r3, [pc, #128]	; (80071f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0307 	and.w	r3, r3, #7
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	429a      	cmp	r2, r3
 800717e:	d001      	beq.n	8007184 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e032      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b00      	cmp	r3, #0
 800718e:	d008      	beq.n	80071a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007190:	4b19      	ldr	r3, [pc, #100]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	4916      	ldr	r1, [pc, #88]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0308 	and.w	r3, r3, #8
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d009      	beq.n	80071c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071ae:	4b12      	ldr	r3, [pc, #72]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	00db      	lsls	r3, r3, #3
 80071bc:	490e      	ldr	r1, [pc, #56]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071c2:	f000 f821 	bl	8007208 <HAL_RCC_GetSysClockFreq>
 80071c6:	4602      	mov	r2, r0
 80071c8:	4b0b      	ldr	r3, [pc, #44]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	091b      	lsrs	r3, r3, #4
 80071ce:	f003 030f 	and.w	r3, r3, #15
 80071d2:	490a      	ldr	r1, [pc, #40]	; (80071fc <HAL_RCC_ClockConfig+0x1c0>)
 80071d4:	5ccb      	ldrb	r3, [r1, r3]
 80071d6:	fa22 f303 	lsr.w	r3, r2, r3
 80071da:	4a09      	ldr	r2, [pc, #36]	; (8007200 <HAL_RCC_ClockConfig+0x1c4>)
 80071dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071de:	4b09      	ldr	r3, [pc, #36]	; (8007204 <HAL_RCC_ClockConfig+0x1c8>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fc fd74 	bl	8003cd0 <HAL_InitTick>

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	40023c00 	.word	0x40023c00
 80071f8:	40023800 	.word	0x40023800
 80071fc:	0800a7a0 	.word	0x0800a7a0
 8007200:	200006e8 	.word	0x200006e8
 8007204:	200006ec 	.word	0x200006ec

08007208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800720c:	b090      	sub	sp, #64	; 0x40
 800720e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	637b      	str	r3, [r7, #52]	; 0x34
 8007214:	2300      	movs	r3, #0
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007218:	2300      	movs	r3, #0
 800721a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007220:	4b59      	ldr	r3, [pc, #356]	; (8007388 <HAL_RCC_GetSysClockFreq+0x180>)
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f003 030c 	and.w	r3, r3, #12
 8007228:	2b08      	cmp	r3, #8
 800722a:	d00d      	beq.n	8007248 <HAL_RCC_GetSysClockFreq+0x40>
 800722c:	2b08      	cmp	r3, #8
 800722e:	f200 80a1 	bhi.w	8007374 <HAL_RCC_GetSysClockFreq+0x16c>
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <HAL_RCC_GetSysClockFreq+0x34>
 8007236:	2b04      	cmp	r3, #4
 8007238:	d003      	beq.n	8007242 <HAL_RCC_GetSysClockFreq+0x3a>
 800723a:	e09b      	b.n	8007374 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800723c:	4b53      	ldr	r3, [pc, #332]	; (800738c <HAL_RCC_GetSysClockFreq+0x184>)
 800723e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007240:	e09b      	b.n	800737a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007242:	4b53      	ldr	r3, [pc, #332]	; (8007390 <HAL_RCC_GetSysClockFreq+0x188>)
 8007244:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007246:	e098      	b.n	800737a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007248:	4b4f      	ldr	r3, [pc, #316]	; (8007388 <HAL_RCC_GetSysClockFreq+0x180>)
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007250:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007252:	4b4d      	ldr	r3, [pc, #308]	; (8007388 <HAL_RCC_GetSysClockFreq+0x180>)
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d028      	beq.n	80072b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800725e:	4b4a      	ldr	r3, [pc, #296]	; (8007388 <HAL_RCC_GetSysClockFreq+0x180>)
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	099b      	lsrs	r3, r3, #6
 8007264:	2200      	movs	r2, #0
 8007266:	623b      	str	r3, [r7, #32]
 8007268:	627a      	str	r2, [r7, #36]	; 0x24
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007270:	2100      	movs	r1, #0
 8007272:	4b47      	ldr	r3, [pc, #284]	; (8007390 <HAL_RCC_GetSysClockFreq+0x188>)
 8007274:	fb03 f201 	mul.w	r2, r3, r1
 8007278:	2300      	movs	r3, #0
 800727a:	fb00 f303 	mul.w	r3, r0, r3
 800727e:	4413      	add	r3, r2
 8007280:	4a43      	ldr	r2, [pc, #268]	; (8007390 <HAL_RCC_GetSysClockFreq+0x188>)
 8007282:	fba0 1202 	umull	r1, r2, r0, r2
 8007286:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007288:	460a      	mov	r2, r1
 800728a:	62ba      	str	r2, [r7, #40]	; 0x28
 800728c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800728e:	4413      	add	r3, r2
 8007290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007294:	2200      	movs	r2, #0
 8007296:	61bb      	str	r3, [r7, #24]
 8007298:	61fa      	str	r2, [r7, #28]
 800729a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800729e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80072a2:	f7f9 fb23 	bl	80008ec <__aeabi_uldivmod>
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	4613      	mov	r3, r2
 80072ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072ae:	e053      	b.n	8007358 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072b0:	4b35      	ldr	r3, [pc, #212]	; (8007388 <HAL_RCC_GetSysClockFreq+0x180>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	099b      	lsrs	r3, r3, #6
 80072b6:	2200      	movs	r2, #0
 80072b8:	613b      	str	r3, [r7, #16]
 80072ba:	617a      	str	r2, [r7, #20]
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80072c2:	f04f 0b00 	mov.w	fp, #0
 80072c6:	4652      	mov	r2, sl
 80072c8:	465b      	mov	r3, fp
 80072ca:	f04f 0000 	mov.w	r0, #0
 80072ce:	f04f 0100 	mov.w	r1, #0
 80072d2:	0159      	lsls	r1, r3, #5
 80072d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072d8:	0150      	lsls	r0, r2, #5
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	ebb2 080a 	subs.w	r8, r2, sl
 80072e2:	eb63 090b 	sbc.w	r9, r3, fp
 80072e6:	f04f 0200 	mov.w	r2, #0
 80072ea:	f04f 0300 	mov.w	r3, #0
 80072ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80072f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80072f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80072fa:	ebb2 0408 	subs.w	r4, r2, r8
 80072fe:	eb63 0509 	sbc.w	r5, r3, r9
 8007302:	f04f 0200 	mov.w	r2, #0
 8007306:	f04f 0300 	mov.w	r3, #0
 800730a:	00eb      	lsls	r3, r5, #3
 800730c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007310:	00e2      	lsls	r2, r4, #3
 8007312:	4614      	mov	r4, r2
 8007314:	461d      	mov	r5, r3
 8007316:	eb14 030a 	adds.w	r3, r4, sl
 800731a:	603b      	str	r3, [r7, #0]
 800731c:	eb45 030b 	adc.w	r3, r5, fp
 8007320:	607b      	str	r3, [r7, #4]
 8007322:	f04f 0200 	mov.w	r2, #0
 8007326:	f04f 0300 	mov.w	r3, #0
 800732a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800732e:	4629      	mov	r1, r5
 8007330:	028b      	lsls	r3, r1, #10
 8007332:	4621      	mov	r1, r4
 8007334:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007338:	4621      	mov	r1, r4
 800733a:	028a      	lsls	r2, r1, #10
 800733c:	4610      	mov	r0, r2
 800733e:	4619      	mov	r1, r3
 8007340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007342:	2200      	movs	r2, #0
 8007344:	60bb      	str	r3, [r7, #8]
 8007346:	60fa      	str	r2, [r7, #12]
 8007348:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800734c:	f7f9 face 	bl	80008ec <__aeabi_uldivmod>
 8007350:	4602      	mov	r2, r0
 8007352:	460b      	mov	r3, r1
 8007354:	4613      	mov	r3, r2
 8007356:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007358:	4b0b      	ldr	r3, [pc, #44]	; (8007388 <HAL_RCC_GetSysClockFreq+0x180>)
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	0c1b      	lsrs	r3, r3, #16
 800735e:	f003 0303 	and.w	r3, r3, #3
 8007362:	3301      	adds	r3, #1
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007368:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007370:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007372:	e002      	b.n	800737a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007374:	4b05      	ldr	r3, [pc, #20]	; (800738c <HAL_RCC_GetSysClockFreq+0x184>)
 8007376:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800737c:	4618      	mov	r0, r3
 800737e:	3740      	adds	r7, #64	; 0x40
 8007380:	46bd      	mov	sp, r7
 8007382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007386:	bf00      	nop
 8007388:	40023800 	.word	0x40023800
 800738c:	00f42400 	.word	0x00f42400
 8007390:	017d7840 	.word	0x017d7840

08007394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007394:	b480      	push	{r7}
 8007396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007398:	4b03      	ldr	r3, [pc, #12]	; (80073a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800739a:	681b      	ldr	r3, [r3, #0]
}
 800739c:	4618      	mov	r0, r3
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	200006e8 	.word	0x200006e8

080073ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073b0:	f7ff fff0 	bl	8007394 <HAL_RCC_GetHCLKFreq>
 80073b4:	4602      	mov	r2, r0
 80073b6:	4b05      	ldr	r3, [pc, #20]	; (80073cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	0a9b      	lsrs	r3, r3, #10
 80073bc:	f003 0307 	and.w	r3, r3, #7
 80073c0:	4903      	ldr	r1, [pc, #12]	; (80073d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073c2:	5ccb      	ldrb	r3, [r1, r3]
 80073c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	40023800 	.word	0x40023800
 80073d0:	0800a7b0 	.word	0x0800a7b0

080073d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e07b      	b.n	80074de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d108      	bne.n	8007400 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073f6:	d009      	beq.n	800740c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	61da      	str	r2, [r3, #28]
 80073fe:	e005      	b.n	800740c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d106      	bne.n	800742c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7fc fa04 	bl	8003834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007442:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007454:	431a      	orrs	r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	f003 0302 	and.w	r3, r3, #2
 8007468:	431a      	orrs	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	431a      	orrs	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800747c:	431a      	orrs	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007486:	431a      	orrs	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a1b      	ldr	r3, [r3, #32]
 800748c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007490:	ea42 0103 	orr.w	r1, r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007498:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	0c1b      	lsrs	r3, r3, #16
 80074aa:	f003 0104 	and.w	r1, r3, #4
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	f003 0210 	and.w	r2, r3, #16
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69da      	ldr	r2, [r3, #28]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b088      	sub	sp, #32
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	603b      	str	r3, [r7, #0]
 80074f2:	4613      	mov	r3, r2
 80074f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074f6:	2300      	movs	r3, #0
 80074f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007500:	2b01      	cmp	r3, #1
 8007502:	d101      	bne.n	8007508 <HAL_SPI_Transmit+0x22>
 8007504:	2302      	movs	r3, #2
 8007506:	e126      	b.n	8007756 <HAL_SPI_Transmit+0x270>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007510:	f7fc fc22 	bl	8003d58 <HAL_GetTick>
 8007514:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007516:	88fb      	ldrh	r3, [r7, #6]
 8007518:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b01      	cmp	r3, #1
 8007524:	d002      	beq.n	800752c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007526:	2302      	movs	r3, #2
 8007528:	77fb      	strb	r3, [r7, #31]
    goto error;
 800752a:	e10b      	b.n	8007744 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <HAL_SPI_Transmit+0x52>
 8007532:	88fb      	ldrh	r3, [r7, #6]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d102      	bne.n	800753e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800753c:	e102      	b.n	8007744 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2203      	movs	r2, #3
 8007542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	88fa      	ldrh	r2, [r7, #6]
 8007556:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	88fa      	ldrh	r2, [r7, #6]
 800755c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007584:	d10f      	bne.n	80075a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007594:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b0:	2b40      	cmp	r3, #64	; 0x40
 80075b2:	d007      	beq.n	80075c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075cc:	d14b      	bne.n	8007666 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d002      	beq.n	80075dc <HAL_SPI_Transmit+0xf6>
 80075d6:	8afb      	ldrh	r3, [r7, #22]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d13e      	bne.n	800765a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e0:	881a      	ldrh	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ec:	1c9a      	adds	r2, r3, #2
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	3b01      	subs	r3, #1
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007600:	e02b      	b.n	800765a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	2b02      	cmp	r3, #2
 800760e:	d112      	bne.n	8007636 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007614:	881a      	ldrh	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007620:	1c9a      	adds	r2, r3, #2
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800762a:	b29b      	uxth	r3, r3
 800762c:	3b01      	subs	r3, #1
 800762e:	b29a      	uxth	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	86da      	strh	r2, [r3, #54]	; 0x36
 8007634:	e011      	b.n	800765a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007636:	f7fc fb8f 	bl	8003d58 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	429a      	cmp	r2, r3
 8007644:	d803      	bhi.n	800764e <HAL_SPI_Transmit+0x168>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764c:	d102      	bne.n	8007654 <HAL_SPI_Transmit+0x16e>
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d102      	bne.n	800765a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007658:	e074      	b.n	8007744 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800765e:	b29b      	uxth	r3, r3
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1ce      	bne.n	8007602 <HAL_SPI_Transmit+0x11c>
 8007664:	e04c      	b.n	8007700 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d002      	beq.n	8007674 <HAL_SPI_Transmit+0x18e>
 800766e:	8afb      	ldrh	r3, [r7, #22]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d140      	bne.n	80076f6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	330c      	adds	r3, #12
 800767e:	7812      	ldrb	r2, [r2, #0]
 8007680:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007686:	1c5a      	adds	r2, r3, #1
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007690:	b29b      	uxth	r3, r3
 8007692:	3b01      	subs	r3, #1
 8007694:	b29a      	uxth	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800769a:	e02c      	b.n	80076f6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d113      	bne.n	80076d2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	330c      	adds	r3, #12
 80076b4:	7812      	ldrb	r2, [r2, #0]
 80076b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	3b01      	subs	r3, #1
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80076d0:	e011      	b.n	80076f6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076d2:	f7fc fb41 	bl	8003d58 <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	683a      	ldr	r2, [r7, #0]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d803      	bhi.n	80076ea <HAL_SPI_Transmit+0x204>
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e8:	d102      	bne.n	80076f0 <HAL_SPI_Transmit+0x20a>
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d102      	bne.n	80076f6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076f4:	e026      	b.n	8007744 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1cd      	bne.n	800769c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007700:	69ba      	ldr	r2, [r7, #24]
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 f8b3 	bl	8007870 <SPI_EndRxTxTransaction>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d002      	beq.n	8007716 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2220      	movs	r2, #32
 8007714:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10a      	bne.n	8007734 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800771e:	2300      	movs	r3, #0
 8007720:	613b      	str	r3, [r7, #16]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	613b      	str	r3, [r7, #16]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	613b      	str	r3, [r7, #16]
 8007732:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007738:	2b00      	cmp	r3, #0
 800773a:	d002      	beq.n	8007742 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	77fb      	strb	r3, [r7, #31]
 8007740:	e000      	b.n	8007744 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007742:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007754:	7ffb      	ldrb	r3, [r7, #31]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3720      	adds	r7, #32
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
	...

08007760 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	603b      	str	r3, [r7, #0]
 800776c:	4613      	mov	r3, r2
 800776e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007770:	f7fc faf2 	bl	8003d58 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007778:	1a9b      	subs	r3, r3, r2
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	4413      	add	r3, r2
 800777e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007780:	f7fc faea 	bl	8003d58 <HAL_GetTick>
 8007784:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007786:	4b39      	ldr	r3, [pc, #228]	; (800786c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	015b      	lsls	r3, r3, #5
 800778c:	0d1b      	lsrs	r3, r3, #20
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	fb02 f303 	mul.w	r3, r2, r3
 8007794:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007796:	e054      	b.n	8007842 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779e:	d050      	beq.n	8007842 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077a0:	f7fc fada 	bl	8003d58 <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	69fa      	ldr	r2, [r7, #28]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d902      	bls.n	80077b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d13d      	bne.n	8007832 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077ce:	d111      	bne.n	80077f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077d8:	d004      	beq.n	80077e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e2:	d107      	bne.n	80077f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077fc:	d10f      	bne.n	800781e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800781c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e017      	b.n	8007862 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	3b01      	subs	r3, #1
 8007840:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689a      	ldr	r2, [r3, #8]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	4013      	ands	r3, r2
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	429a      	cmp	r2, r3
 8007850:	bf0c      	ite	eq
 8007852:	2301      	moveq	r3, #1
 8007854:	2300      	movne	r3, #0
 8007856:	b2db      	uxtb	r3, r3
 8007858:	461a      	mov	r2, r3
 800785a:	79fb      	ldrb	r3, [r7, #7]
 800785c:	429a      	cmp	r2, r3
 800785e:	d19b      	bne.n	8007798 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3720      	adds	r7, #32
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	200006e8 	.word	0x200006e8

08007870 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b088      	sub	sp, #32
 8007874:	af02      	add	r7, sp, #8
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800787c:	4b1b      	ldr	r3, [pc, #108]	; (80078ec <SPI_EndRxTxTransaction+0x7c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a1b      	ldr	r2, [pc, #108]	; (80078f0 <SPI_EndRxTxTransaction+0x80>)
 8007882:	fba2 2303 	umull	r2, r3, r2, r3
 8007886:	0d5b      	lsrs	r3, r3, #21
 8007888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800788c:	fb02 f303 	mul.w	r3, r2, r3
 8007890:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800789a:	d112      	bne.n	80078c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2200      	movs	r2, #0
 80078a4:	2180      	movs	r1, #128	; 0x80
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f7ff ff5a 	bl	8007760 <SPI_WaitFlagStateUntilTimeout>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d016      	beq.n	80078e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b6:	f043 0220 	orr.w	r2, r3, #32
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e00f      	b.n	80078e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00a      	beq.n	80078de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	3b01      	subs	r3, #1
 80078cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d8:	2b80      	cmp	r3, #128	; 0x80
 80078da:	d0f2      	beq.n	80078c2 <SPI_EndRxTxTransaction+0x52>
 80078dc:	e000      	b.n	80078e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80078de:	bf00      	nop
  }

  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	200006e8 	.word	0x200006e8
 80078f0:	165e9f81 	.word	0x165e9f81

080078f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e041      	b.n	800798a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d106      	bne.n	8007920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7fc f84e 	bl	80039bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3304      	adds	r3, #4
 8007930:	4619      	mov	r1, r3
 8007932:	4610      	mov	r0, r2
 8007934:	f000 fd54 	bl	80083e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d001      	beq.n	80079ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e03c      	b.n	8007a26 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a1e      	ldr	r2, [pc, #120]	; (8007a34 <HAL_TIM_Base_Start+0xa0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d018      	beq.n	80079f0 <HAL_TIM_Base_Start+0x5c>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079c6:	d013      	beq.n	80079f0 <HAL_TIM_Base_Start+0x5c>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a1a      	ldr	r2, [pc, #104]	; (8007a38 <HAL_TIM_Base_Start+0xa4>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d00e      	beq.n	80079f0 <HAL_TIM_Base_Start+0x5c>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a19      	ldr	r2, [pc, #100]	; (8007a3c <HAL_TIM_Base_Start+0xa8>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d009      	beq.n	80079f0 <HAL_TIM_Base_Start+0x5c>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a17      	ldr	r2, [pc, #92]	; (8007a40 <HAL_TIM_Base_Start+0xac>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d004      	beq.n	80079f0 <HAL_TIM_Base_Start+0x5c>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a16      	ldr	r2, [pc, #88]	; (8007a44 <HAL_TIM_Base_Start+0xb0>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d111      	bne.n	8007a14 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f003 0307 	and.w	r3, r3, #7
 80079fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b06      	cmp	r3, #6
 8007a00:	d010      	beq.n	8007a24 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f042 0201 	orr.w	r2, r2, #1
 8007a10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a12:	e007      	b.n	8007a24 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0201 	orr.w	r2, r2, #1
 8007a22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	40010000 	.word	0x40010000
 8007a38:	40000400 	.word	0x40000400
 8007a3c:	40000800 	.word	0x40000800
 8007a40:	40000c00 	.word	0x40000c00
 8007a44:	40014000 	.word	0x40014000

08007a48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d001      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e044      	b.n	8007aea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f042 0201 	orr.w	r2, r2, #1
 8007a76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a1e      	ldr	r2, [pc, #120]	; (8007af8 <HAL_TIM_Base_Start_IT+0xb0>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d018      	beq.n	8007ab4 <HAL_TIM_Base_Start_IT+0x6c>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a8a:	d013      	beq.n	8007ab4 <HAL_TIM_Base_Start_IT+0x6c>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a1a      	ldr	r2, [pc, #104]	; (8007afc <HAL_TIM_Base_Start_IT+0xb4>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d00e      	beq.n	8007ab4 <HAL_TIM_Base_Start_IT+0x6c>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a19      	ldr	r2, [pc, #100]	; (8007b00 <HAL_TIM_Base_Start_IT+0xb8>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d009      	beq.n	8007ab4 <HAL_TIM_Base_Start_IT+0x6c>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a17      	ldr	r2, [pc, #92]	; (8007b04 <HAL_TIM_Base_Start_IT+0xbc>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d004      	beq.n	8007ab4 <HAL_TIM_Base_Start_IT+0x6c>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a16      	ldr	r2, [pc, #88]	; (8007b08 <HAL_TIM_Base_Start_IT+0xc0>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d111      	bne.n	8007ad8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2b06      	cmp	r3, #6
 8007ac4:	d010      	beq.n	8007ae8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f042 0201 	orr.w	r2, r2, #1
 8007ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ad6:	e007      	b.n	8007ae8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f042 0201 	orr.w	r2, r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	40010000 	.word	0x40010000
 8007afc:	40000400 	.word	0x40000400
 8007b00:	40000800 	.word	0x40000800
 8007b04:	40000c00 	.word	0x40000c00
 8007b08:	40014000 	.word	0x40014000

08007b0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d101      	bne.n	8007b1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e041      	b.n	8007ba2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d106      	bne.n	8007b38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f839 	bl	8007baa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3304      	adds	r3, #4
 8007b48:	4619      	mov	r1, r3
 8007b4a:	4610      	mov	r0, r2
 8007b4c:	f000 fc48 	bl	80083e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b083      	sub	sp, #12
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007bb2:	bf00      	nop
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
	...

08007bc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d109      	bne.n	8007be4 <HAL_TIM_PWM_Start+0x24>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	bf14      	ite	ne
 8007bdc:	2301      	movne	r3, #1
 8007bde:	2300      	moveq	r3, #0
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	e022      	b.n	8007c2a <HAL_TIM_PWM_Start+0x6a>
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	d109      	bne.n	8007bfe <HAL_TIM_PWM_Start+0x3e>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	bf14      	ite	ne
 8007bf6:	2301      	movne	r3, #1
 8007bf8:	2300      	moveq	r3, #0
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	e015      	b.n	8007c2a <HAL_TIM_PWM_Start+0x6a>
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b08      	cmp	r3, #8
 8007c02:	d109      	bne.n	8007c18 <HAL_TIM_PWM_Start+0x58>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	bf14      	ite	ne
 8007c10:	2301      	movne	r3, #1
 8007c12:	2300      	moveq	r3, #0
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	e008      	b.n	8007c2a <HAL_TIM_PWM_Start+0x6a>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	bf14      	ite	ne
 8007c24:	2301      	movne	r3, #1
 8007c26:	2300      	moveq	r3, #0
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e068      	b.n	8007d04 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d104      	bne.n	8007c42 <HAL_TIM_PWM_Start+0x82>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c40:	e013      	b.n	8007c6a <HAL_TIM_PWM_Start+0xaa>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b04      	cmp	r3, #4
 8007c46:	d104      	bne.n	8007c52 <HAL_TIM_PWM_Start+0x92>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c50:	e00b      	b.n	8007c6a <HAL_TIM_PWM_Start+0xaa>
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	2b08      	cmp	r3, #8
 8007c56:	d104      	bne.n	8007c62 <HAL_TIM_PWM_Start+0xa2>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c60:	e003      	b.n	8007c6a <HAL_TIM_PWM_Start+0xaa>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2202      	movs	r2, #2
 8007c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 fe5a 	bl	800892c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a23      	ldr	r2, [pc, #140]	; (8007d0c <HAL_TIM_PWM_Start+0x14c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d107      	bne.n	8007c92 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a1d      	ldr	r2, [pc, #116]	; (8007d0c <HAL_TIM_PWM_Start+0x14c>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d018      	beq.n	8007cce <HAL_TIM_PWM_Start+0x10e>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ca4:	d013      	beq.n	8007cce <HAL_TIM_PWM_Start+0x10e>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a19      	ldr	r2, [pc, #100]	; (8007d10 <HAL_TIM_PWM_Start+0x150>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d00e      	beq.n	8007cce <HAL_TIM_PWM_Start+0x10e>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a17      	ldr	r2, [pc, #92]	; (8007d14 <HAL_TIM_PWM_Start+0x154>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d009      	beq.n	8007cce <HAL_TIM_PWM_Start+0x10e>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a16      	ldr	r2, [pc, #88]	; (8007d18 <HAL_TIM_PWM_Start+0x158>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d004      	beq.n	8007cce <HAL_TIM_PWM_Start+0x10e>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a14      	ldr	r2, [pc, #80]	; (8007d1c <HAL_TIM_PWM_Start+0x15c>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d111      	bne.n	8007cf2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	f003 0307 	and.w	r3, r3, #7
 8007cd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2b06      	cmp	r3, #6
 8007cde:	d010      	beq.n	8007d02 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f042 0201 	orr.w	r2, r2, #1
 8007cee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cf0:	e007      	b.n	8007d02 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f042 0201 	orr.w	r2, r2, #1
 8007d00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	40010000 	.word	0x40010000
 8007d10:	40000400 	.word	0x40000400
 8007d14:	40000800 	.word	0x40000800
 8007d18:	40000c00 	.word	0x40000c00
 8007d1c:	40014000 	.word	0x40014000

08007d20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d101      	bne.n	8007d34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e097      	b.n	8007e64 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d106      	bne.n	8007d4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7fb fdbb 	bl	80038c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2202      	movs	r2, #2
 8007d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	6812      	ldr	r2, [r2, #0]
 8007d60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d64:	f023 0307 	bic.w	r3, r3, #7
 8007d68:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	3304      	adds	r3, #4
 8007d72:	4619      	mov	r1, r3
 8007d74:	4610      	mov	r0, r2
 8007d76:	f000 fb33 	bl	80083e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007da2:	f023 0303 	bic.w	r3, r3, #3
 8007da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	689a      	ldr	r2, [r3, #8]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	021b      	lsls	r3, r3, #8
 8007db2:	4313      	orrs	r3, r2
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007dc0:	f023 030c 	bic.w	r3, r3, #12
 8007dc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	68da      	ldr	r2, [r3, #12]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	021b      	lsls	r3, r3, #8
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	011a      	lsls	r2, r3, #4
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	031b      	lsls	r3, r3, #12
 8007df0:	4313      	orrs	r3, r2
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007dfe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007e06:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	011b      	lsls	r3, r3, #4
 8007e12:	4313      	orrs	r3, r2
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	697a      	ldr	r2, [r7, #20]
 8007e20:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3718      	adds	r7, #24
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	f003 0302 	and.w	r3, r3, #2
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d122      	bne.n	8007ec8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d11b      	bne.n	8007ec8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f06f 0202 	mvn.w	r2, #2
 8007e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	f003 0303 	and.w	r3, r3, #3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fa77 	bl	80083a2 <HAL_TIM_IC_CaptureCallback>
 8007eb4:	e005      	b.n	8007ec2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fa69 	bl	800838e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fa7a 	bl	80083b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f003 0304 	and.w	r3, r3, #4
 8007ed2:	2b04      	cmp	r3, #4
 8007ed4:	d122      	bne.n	8007f1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f003 0304 	and.w	r3, r3, #4
 8007ee0:	2b04      	cmp	r3, #4
 8007ee2:	d11b      	bne.n	8007f1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f06f 0204 	mvn.w	r2, #4
 8007eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa4d 	bl	80083a2 <HAL_TIM_IC_CaptureCallback>
 8007f08:	e005      	b.n	8007f16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fa3f 	bl	800838e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fa50 	bl	80083b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	f003 0308 	and.w	r3, r3, #8
 8007f26:	2b08      	cmp	r3, #8
 8007f28:	d122      	bne.n	8007f70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	f003 0308 	and.w	r3, r3, #8
 8007f34:	2b08      	cmp	r3, #8
 8007f36:	d11b      	bne.n	8007f70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f06f 0208 	mvn.w	r2, #8
 8007f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2204      	movs	r2, #4
 8007f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	69db      	ldr	r3, [r3, #28]
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d003      	beq.n	8007f5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fa23 	bl	80083a2 <HAL_TIM_IC_CaptureCallback>
 8007f5c:	e005      	b.n	8007f6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fa15 	bl	800838e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fa26 	bl	80083b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	f003 0310 	and.w	r3, r3, #16
 8007f7a:	2b10      	cmp	r3, #16
 8007f7c:	d122      	bne.n	8007fc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	f003 0310 	and.w	r3, r3, #16
 8007f88:	2b10      	cmp	r3, #16
 8007f8a:	d11b      	bne.n	8007fc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f06f 0210 	mvn.w	r2, #16
 8007f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2208      	movs	r2, #8
 8007f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f9f9 	bl	80083a2 <HAL_TIM_IC_CaptureCallback>
 8007fb0:	e005      	b.n	8007fbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f9eb 	bl	800838e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f9fc 	bl	80083b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d10e      	bne.n	8007ff0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	f003 0301 	and.w	r3, r3, #1
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d107      	bne.n	8007ff0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f06f 0201 	mvn.w	r2, #1
 8007fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f7f8 fe82 	bl	8000cf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ffa:	2b80      	cmp	r3, #128	; 0x80
 8007ffc:	d10e      	bne.n	800801c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008008:	2b80      	cmp	r3, #128	; 0x80
 800800a:	d107      	bne.n	800801c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fd26 	bl	8008a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008026:	2b40      	cmp	r3, #64	; 0x40
 8008028:	d10e      	bne.n	8008048 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008034:	2b40      	cmp	r3, #64	; 0x40
 8008036:	d107      	bne.n	8008048 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f9c1 	bl	80083ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	f003 0320 	and.w	r3, r3, #32
 8008052:	2b20      	cmp	r3, #32
 8008054:	d10e      	bne.n	8008074 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	f003 0320 	and.w	r3, r3, #32
 8008060:	2b20      	cmp	r3, #32
 8008062:	d107      	bne.n	8008074 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f06f 0220 	mvn.w	r2, #32
 800806c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fcf0 	bl	8008a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008074:	bf00      	nop
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008092:	2b01      	cmp	r3, #1
 8008094:	d101      	bne.n	800809a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008096:	2302      	movs	r3, #2
 8008098:	e0ae      	b.n	80081f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b0c      	cmp	r3, #12
 80080a6:	f200 809f 	bhi.w	80081e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80080aa:	a201      	add	r2, pc, #4	; (adr r2, 80080b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80080ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b0:	080080e5 	.word	0x080080e5
 80080b4:	080081e9 	.word	0x080081e9
 80080b8:	080081e9 	.word	0x080081e9
 80080bc:	080081e9 	.word	0x080081e9
 80080c0:	08008125 	.word	0x08008125
 80080c4:	080081e9 	.word	0x080081e9
 80080c8:	080081e9 	.word	0x080081e9
 80080cc:	080081e9 	.word	0x080081e9
 80080d0:	08008167 	.word	0x08008167
 80080d4:	080081e9 	.word	0x080081e9
 80080d8:	080081e9 	.word	0x080081e9
 80080dc:	080081e9 	.word	0x080081e9
 80080e0:	080081a7 	.word	0x080081a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68b9      	ldr	r1, [r7, #8]
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 f9f8 	bl	80084e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	699a      	ldr	r2, [r3, #24]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f042 0208 	orr.w	r2, r2, #8
 80080fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	699a      	ldr	r2, [r3, #24]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f022 0204 	bic.w	r2, r2, #4
 800810e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6999      	ldr	r1, [r3, #24]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	691a      	ldr	r2, [r3, #16]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	619a      	str	r2, [r3, #24]
      break;
 8008122:	e064      	b.n	80081ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68b9      	ldr	r1, [r7, #8]
 800812a:	4618      	mov	r0, r3
 800812c:	f000 fa3e 	bl	80085ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	699a      	ldr	r2, [r3, #24]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800813e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	699a      	ldr	r2, [r3, #24]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800814e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6999      	ldr	r1, [r3, #24]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	021a      	lsls	r2, r3, #8
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	619a      	str	r2, [r3, #24]
      break;
 8008164:	e043      	b.n	80081ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68b9      	ldr	r1, [r7, #8]
 800816c:	4618      	mov	r0, r3
 800816e:	f000 fa89 	bl	8008684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	69da      	ldr	r2, [r3, #28]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f042 0208 	orr.w	r2, r2, #8
 8008180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	69da      	ldr	r2, [r3, #28]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f022 0204 	bic.w	r2, r2, #4
 8008190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	69d9      	ldr	r1, [r3, #28]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	691a      	ldr	r2, [r3, #16]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	430a      	orrs	r2, r1
 80081a2:	61da      	str	r2, [r3, #28]
      break;
 80081a4:	e023      	b.n	80081ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68b9      	ldr	r1, [r7, #8]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f000 fad3 	bl	8008758 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	69da      	ldr	r2, [r3, #28]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	69da      	ldr	r2, [r3, #28]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	69d9      	ldr	r1, [r3, #28]
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	021a      	lsls	r2, r3, #8
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	430a      	orrs	r2, r1
 80081e4:	61da      	str	r2, [r3, #28]
      break;
 80081e6:	e002      	b.n	80081ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	75fb      	strb	r3, [r7, #23]
      break;
 80081ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3718      	adds	r7, #24
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008214:	2b01      	cmp	r3, #1
 8008216:	d101      	bne.n	800821c <HAL_TIM_ConfigClockSource+0x1c>
 8008218:	2302      	movs	r3, #2
 800821a:	e0b4      	b.n	8008386 <HAL_TIM_ConfigClockSource+0x186>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2202      	movs	r2, #2
 8008228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800823a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008242:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008254:	d03e      	beq.n	80082d4 <HAL_TIM_ConfigClockSource+0xd4>
 8008256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800825a:	f200 8087 	bhi.w	800836c <HAL_TIM_ConfigClockSource+0x16c>
 800825e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008262:	f000 8086 	beq.w	8008372 <HAL_TIM_ConfigClockSource+0x172>
 8008266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800826a:	d87f      	bhi.n	800836c <HAL_TIM_ConfigClockSource+0x16c>
 800826c:	2b70      	cmp	r3, #112	; 0x70
 800826e:	d01a      	beq.n	80082a6 <HAL_TIM_ConfigClockSource+0xa6>
 8008270:	2b70      	cmp	r3, #112	; 0x70
 8008272:	d87b      	bhi.n	800836c <HAL_TIM_ConfigClockSource+0x16c>
 8008274:	2b60      	cmp	r3, #96	; 0x60
 8008276:	d050      	beq.n	800831a <HAL_TIM_ConfigClockSource+0x11a>
 8008278:	2b60      	cmp	r3, #96	; 0x60
 800827a:	d877      	bhi.n	800836c <HAL_TIM_ConfigClockSource+0x16c>
 800827c:	2b50      	cmp	r3, #80	; 0x50
 800827e:	d03c      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0xfa>
 8008280:	2b50      	cmp	r3, #80	; 0x50
 8008282:	d873      	bhi.n	800836c <HAL_TIM_ConfigClockSource+0x16c>
 8008284:	2b40      	cmp	r3, #64	; 0x40
 8008286:	d058      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x13a>
 8008288:	2b40      	cmp	r3, #64	; 0x40
 800828a:	d86f      	bhi.n	800836c <HAL_TIM_ConfigClockSource+0x16c>
 800828c:	2b30      	cmp	r3, #48	; 0x30
 800828e:	d064      	beq.n	800835a <HAL_TIM_ConfigClockSource+0x15a>
 8008290:	2b30      	cmp	r3, #48	; 0x30
 8008292:	d86b      	bhi.n	800836c <HAL_TIM_ConfigClockSource+0x16c>
 8008294:	2b20      	cmp	r3, #32
 8008296:	d060      	beq.n	800835a <HAL_TIM_ConfigClockSource+0x15a>
 8008298:	2b20      	cmp	r3, #32
 800829a:	d867      	bhi.n	800836c <HAL_TIM_ConfigClockSource+0x16c>
 800829c:	2b00      	cmp	r3, #0
 800829e:	d05c      	beq.n	800835a <HAL_TIM_ConfigClockSource+0x15a>
 80082a0:	2b10      	cmp	r3, #16
 80082a2:	d05a      	beq.n	800835a <HAL_TIM_ConfigClockSource+0x15a>
 80082a4:	e062      	b.n	800836c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6818      	ldr	r0, [r3, #0]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	6899      	ldr	r1, [r3, #8]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	f000 fb19 	bl	80088ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80082c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	609a      	str	r2, [r3, #8]
      break;
 80082d2:	e04f      	b.n	8008374 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6818      	ldr	r0, [r3, #0]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	6899      	ldr	r1, [r3, #8]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f000 fb02 	bl	80088ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689a      	ldr	r2, [r3, #8]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082f6:	609a      	str	r2, [r3, #8]
      break;
 80082f8:	e03c      	b.n	8008374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6818      	ldr	r0, [r3, #0]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	6859      	ldr	r1, [r3, #4]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	461a      	mov	r2, r3
 8008308:	f000 fa76 	bl	80087f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2150      	movs	r1, #80	; 0x50
 8008312:	4618      	mov	r0, r3
 8008314:	f000 facf 	bl	80088b6 <TIM_ITRx_SetConfig>
      break;
 8008318:	e02c      	b.n	8008374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6818      	ldr	r0, [r3, #0]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	6859      	ldr	r1, [r3, #4]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	461a      	mov	r2, r3
 8008328:	f000 fa95 	bl	8008856 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2160      	movs	r1, #96	; 0x60
 8008332:	4618      	mov	r0, r3
 8008334:	f000 fabf 	bl	80088b6 <TIM_ITRx_SetConfig>
      break;
 8008338:	e01c      	b.n	8008374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6818      	ldr	r0, [r3, #0]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	6859      	ldr	r1, [r3, #4]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	461a      	mov	r2, r3
 8008348:	f000 fa56 	bl	80087f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2140      	movs	r1, #64	; 0x40
 8008352:	4618      	mov	r0, r3
 8008354:	f000 faaf 	bl	80088b6 <TIM_ITRx_SetConfig>
      break;
 8008358:	e00c      	b.n	8008374 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4619      	mov	r1, r3
 8008364:	4610      	mov	r0, r2
 8008366:	f000 faa6 	bl	80088b6 <TIM_ITRx_SetConfig>
      break;
 800836a:	e003      	b.n	8008374 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	73fb      	strb	r3, [r7, #15]
      break;
 8008370:	e000      	b.n	8008374 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008372:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008384:	7bfb      	ldrb	r3, [r7, #15]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800838e:	b480      	push	{r7}
 8008390:	b083      	sub	sp, #12
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008396:	bf00      	nop
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b083      	sub	sp, #12
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083aa:	bf00      	nop
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b083      	sub	sp, #12
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083be:	bf00      	nop
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b083      	sub	sp, #12
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083d2:	bf00      	nop
 80083d4:	370c      	adds	r7, #12
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
	...

080083e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a34      	ldr	r2, [pc, #208]	; (80084c4 <TIM_Base_SetConfig+0xe4>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d00f      	beq.n	8008418 <TIM_Base_SetConfig+0x38>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083fe:	d00b      	beq.n	8008418 <TIM_Base_SetConfig+0x38>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a31      	ldr	r2, [pc, #196]	; (80084c8 <TIM_Base_SetConfig+0xe8>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d007      	beq.n	8008418 <TIM_Base_SetConfig+0x38>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a30      	ldr	r2, [pc, #192]	; (80084cc <TIM_Base_SetConfig+0xec>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d003      	beq.n	8008418 <TIM_Base_SetConfig+0x38>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a2f      	ldr	r2, [pc, #188]	; (80084d0 <TIM_Base_SetConfig+0xf0>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d108      	bne.n	800842a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800841e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	4313      	orrs	r3, r2
 8008428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a25      	ldr	r2, [pc, #148]	; (80084c4 <TIM_Base_SetConfig+0xe4>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d01b      	beq.n	800846a <TIM_Base_SetConfig+0x8a>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008438:	d017      	beq.n	800846a <TIM_Base_SetConfig+0x8a>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a22      	ldr	r2, [pc, #136]	; (80084c8 <TIM_Base_SetConfig+0xe8>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d013      	beq.n	800846a <TIM_Base_SetConfig+0x8a>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a21      	ldr	r2, [pc, #132]	; (80084cc <TIM_Base_SetConfig+0xec>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d00f      	beq.n	800846a <TIM_Base_SetConfig+0x8a>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a20      	ldr	r2, [pc, #128]	; (80084d0 <TIM_Base_SetConfig+0xf0>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d00b      	beq.n	800846a <TIM_Base_SetConfig+0x8a>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a1f      	ldr	r2, [pc, #124]	; (80084d4 <TIM_Base_SetConfig+0xf4>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d007      	beq.n	800846a <TIM_Base_SetConfig+0x8a>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a1e      	ldr	r2, [pc, #120]	; (80084d8 <TIM_Base_SetConfig+0xf8>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d003      	beq.n	800846a <TIM_Base_SetConfig+0x8a>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a1d      	ldr	r2, [pc, #116]	; (80084dc <TIM_Base_SetConfig+0xfc>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d108      	bne.n	800847c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	4313      	orrs	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	4313      	orrs	r3, r2
 8008488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	689a      	ldr	r2, [r3, #8]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a08      	ldr	r2, [pc, #32]	; (80084c4 <TIM_Base_SetConfig+0xe4>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d103      	bne.n	80084b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	691a      	ldr	r2, [r3, #16]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	615a      	str	r2, [r3, #20]
}
 80084b6:	bf00      	nop
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	40010000 	.word	0x40010000
 80084c8:	40000400 	.word	0x40000400
 80084cc:	40000800 	.word	0x40000800
 80084d0:	40000c00 	.word	0x40000c00
 80084d4:	40014000 	.word	0x40014000
 80084d8:	40014400 	.word	0x40014400
 80084dc:	40014800 	.word	0x40014800

080084e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	f023 0201 	bic.w	r2, r3, #1
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800850e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f023 0303 	bic.w	r3, r3, #3
 8008516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	4313      	orrs	r3, r2
 8008520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f023 0302 	bic.w	r3, r3, #2
 8008528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	4313      	orrs	r3, r2
 8008532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a1c      	ldr	r2, [pc, #112]	; (80085a8 <TIM_OC1_SetConfig+0xc8>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d10c      	bne.n	8008556 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	f023 0308 	bic.w	r3, r3, #8
 8008542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	4313      	orrs	r3, r2
 800854c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f023 0304 	bic.w	r3, r3, #4
 8008554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a13      	ldr	r2, [pc, #76]	; (80085a8 <TIM_OC1_SetConfig+0xc8>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d111      	bne.n	8008582 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800856c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	4313      	orrs	r3, r2
 8008576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	4313      	orrs	r3, r2
 8008580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	621a      	str	r2, [r3, #32]
}
 800859c:	bf00      	nop
 800859e:	371c      	adds	r7, #28
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	40010000 	.word	0x40010000

080085ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b087      	sub	sp, #28
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	f023 0210 	bic.w	r2, r3, #16
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	021b      	lsls	r3, r3, #8
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	f023 0320 	bic.w	r3, r3, #32
 80085f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	011b      	lsls	r3, r3, #4
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	4313      	orrs	r3, r2
 8008602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a1e      	ldr	r2, [pc, #120]	; (8008680 <TIM_OC2_SetConfig+0xd4>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d10d      	bne.n	8008628 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	011b      	lsls	r3, r3, #4
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	4313      	orrs	r3, r2
 800861e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008626:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a15      	ldr	r2, [pc, #84]	; (8008680 <TIM_OC2_SetConfig+0xd4>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d113      	bne.n	8008658 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008636:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800863e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	695b      	ldr	r3, [r3, #20]
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	4313      	orrs	r3, r2
 800864a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	4313      	orrs	r3, r2
 8008656:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	685a      	ldr	r2, [r3, #4]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	621a      	str	r2, [r3, #32]
}
 8008672:	bf00      	nop
 8008674:	371c      	adds	r7, #28
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	40010000 	.word	0x40010000

08008684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a1b      	ldr	r3, [r3, #32]
 8008692:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	69db      	ldr	r3, [r3, #28]
 80086aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f023 0303 	bic.w	r3, r3, #3
 80086ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	021b      	lsls	r3, r3, #8
 80086d4:	697a      	ldr	r2, [r7, #20]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a1d      	ldr	r2, [pc, #116]	; (8008754 <TIM_OC3_SetConfig+0xd0>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d10d      	bne.n	80086fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	021b      	lsls	r3, r3, #8
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a14      	ldr	r2, [pc, #80]	; (8008754 <TIM_OC3_SetConfig+0xd0>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d113      	bne.n	800872e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800870c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	695b      	ldr	r3, [r3, #20]
 800871a:	011b      	lsls	r3, r3, #4
 800871c:	693a      	ldr	r2, [r7, #16]
 800871e:	4313      	orrs	r3, r2
 8008720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	011b      	lsls	r3, r3, #4
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	4313      	orrs	r3, r2
 800872c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	693a      	ldr	r2, [r7, #16]
 8008732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	685a      	ldr	r2, [r3, #4]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	621a      	str	r2, [r3, #32]
}
 8008748:	bf00      	nop
 800874a:	371c      	adds	r7, #28
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr
 8008754:	40010000 	.word	0x40010000

08008758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800878e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	021b      	lsls	r3, r3, #8
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	4313      	orrs	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	031b      	lsls	r3, r3, #12
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a10      	ldr	r2, [pc, #64]	; (80087f4 <TIM_OC4_SetConfig+0x9c>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d109      	bne.n	80087cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	019b      	lsls	r3, r3, #6
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	693a      	ldr	r2, [r7, #16]
 80087e4:	621a      	str	r2, [r3, #32]
}
 80087e6:	bf00      	nop
 80087e8:	371c      	adds	r7, #28
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	40010000 	.word	0x40010000

080087f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	f023 0201 	bic.w	r2, r3, #1
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	011b      	lsls	r3, r3, #4
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	4313      	orrs	r3, r2
 800882c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	f023 030a 	bic.w	r3, r3, #10
 8008834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	4313      	orrs	r3, r2
 800883c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	621a      	str	r2, [r3, #32]
}
 800884a:	bf00      	nop
 800884c:	371c      	adds	r7, #28
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008856:	b480      	push	{r7}
 8008858:	b087      	sub	sp, #28
 800885a:	af00      	add	r7, sp, #0
 800885c:	60f8      	str	r0, [r7, #12]
 800885e:	60b9      	str	r1, [r7, #8]
 8008860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	f023 0210 	bic.w	r2, r3, #16
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6a1b      	ldr	r3, [r3, #32]
 8008878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008880:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	031b      	lsls	r3, r3, #12
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	4313      	orrs	r3, r2
 800888a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008892:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	011b      	lsls	r3, r3, #4
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	4313      	orrs	r3, r2
 800889c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	621a      	str	r2, [r3, #32]
}
 80088aa:	bf00      	nop
 80088ac:	371c      	adds	r7, #28
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b085      	sub	sp, #20
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	f043 0307 	orr.w	r3, r3, #7
 80088d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	609a      	str	r2, [r3, #8]
}
 80088e0:	bf00      	nop
 80088e2:	3714      	adds	r7, #20
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b087      	sub	sp, #28
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
 80088f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	021a      	lsls	r2, r3, #8
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	431a      	orrs	r2, r3
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	4313      	orrs	r3, r2
 8008914:	697a      	ldr	r2, [r7, #20]
 8008916:	4313      	orrs	r3, r2
 8008918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	609a      	str	r2, [r3, #8]
}
 8008920:	bf00      	nop
 8008922:	371c      	adds	r7, #28
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800892c:	b480      	push	{r7}
 800892e:	b087      	sub	sp, #28
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	f003 031f 	and.w	r3, r3, #31
 800893e:	2201      	movs	r2, #1
 8008940:	fa02 f303 	lsl.w	r3, r2, r3
 8008944:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6a1a      	ldr	r2, [r3, #32]
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	43db      	mvns	r3, r3
 800894e:	401a      	ands	r2, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6a1a      	ldr	r2, [r3, #32]
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	f003 031f 	and.w	r3, r3, #31
 800895e:	6879      	ldr	r1, [r7, #4]
 8008960:	fa01 f303 	lsl.w	r3, r1, r3
 8008964:	431a      	orrs	r2, r3
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	621a      	str	r2, [r3, #32]
}
 800896a:	bf00      	nop
 800896c:	371c      	adds	r7, #28
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
	...

08008978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008988:	2b01      	cmp	r3, #1
 800898a:	d101      	bne.n	8008990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800898c:	2302      	movs	r3, #2
 800898e:	e050      	b.n	8008a32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2202      	movs	r2, #2
 800899c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	4313      	orrs	r3, r2
 80089c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a1c      	ldr	r2, [pc, #112]	; (8008a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d018      	beq.n	8008a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089dc:	d013      	beq.n	8008a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a18      	ldr	r2, [pc, #96]	; (8008a44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d00e      	beq.n	8008a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a16      	ldr	r2, [pc, #88]	; (8008a48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d009      	beq.n	8008a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a15      	ldr	r2, [pc, #84]	; (8008a4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d004      	beq.n	8008a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a13      	ldr	r2, [pc, #76]	; (8008a50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d10c      	bne.n	8008a20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	40010000 	.word	0x40010000
 8008a44:	40000400 	.word	0x40000400
 8008a48:	40000800 	.word	0x40000800
 8008a4c:	40000c00 	.word	0x40000c00
 8008a50:	40014000 	.word	0x40014000

08008a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <arm_sin_f32>:
 8008a7c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8008af8 <arm_sin_f32+0x7c>
 8008a80:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008a84:	ee20 7a07 	vmul.f32	s14, s0, s14
 8008a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a8c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8008a90:	d42c      	bmi.n	8008aec <arm_sin_f32+0x70>
 8008a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a96:	eddf 6a19 	vldr	s13, [pc, #100]	; 8008afc <arm_sin_f32+0x80>
 8008a9a:	4a19      	ldr	r2, [pc, #100]	; (8008b00 <arm_sin_f32+0x84>)
 8008a9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008aa0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008aa4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008aa8:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ab0:	bfa8      	it	ge
 8008ab2:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 8008ab6:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8008aba:	ee17 3a10 	vmov	r3, s14
 8008abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac2:	ee07 3a10 	vmov	s14, r3
 8008ac6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008aca:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008ace:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ad2:	edd1 6a01 	vldr	s13, [r1, #4]
 8008ad6:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008ada:	ed91 0a00 	vldr	s0, [r1]
 8008ade:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008ae2:	ee27 0a00 	vmul.f32	s0, s14, s0
 8008ae6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008aea:	4770      	bx	lr
 8008aec:	ee17 3a90 	vmov	r3, s15
 8008af0:	3b01      	subs	r3, #1
 8008af2:	ee07 3a90 	vmov	s15, r3
 8008af6:	e7cc      	b.n	8008a92 <arm_sin_f32+0x16>
 8008af8:	3e22f983 	.word	0x3e22f983
 8008afc:	44000000 	.word	0x44000000
 8008b00:	0800a7c0 	.word	0x0800a7c0

08008b04 <__errno>:
 8008b04:	4b01      	ldr	r3, [pc, #4]	; (8008b0c <__errno+0x8>)
 8008b06:	6818      	ldr	r0, [r3, #0]
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	200006f4 	.word	0x200006f4

08008b10 <__libc_init_array>:
 8008b10:	b570      	push	{r4, r5, r6, lr}
 8008b12:	4d0d      	ldr	r5, [pc, #52]	; (8008b48 <__libc_init_array+0x38>)
 8008b14:	4c0d      	ldr	r4, [pc, #52]	; (8008b4c <__libc_init_array+0x3c>)
 8008b16:	1b64      	subs	r4, r4, r5
 8008b18:	10a4      	asrs	r4, r4, #2
 8008b1a:	2600      	movs	r6, #0
 8008b1c:	42a6      	cmp	r6, r4
 8008b1e:	d109      	bne.n	8008b34 <__libc_init_array+0x24>
 8008b20:	4d0b      	ldr	r5, [pc, #44]	; (8008b50 <__libc_init_array+0x40>)
 8008b22:	4c0c      	ldr	r4, [pc, #48]	; (8008b54 <__libc_init_array+0x44>)
 8008b24:	f000 ffae 	bl	8009a84 <_init>
 8008b28:	1b64      	subs	r4, r4, r5
 8008b2a:	10a4      	asrs	r4, r4, #2
 8008b2c:	2600      	movs	r6, #0
 8008b2e:	42a6      	cmp	r6, r4
 8008b30:	d105      	bne.n	8008b3e <__libc_init_array+0x2e>
 8008b32:	bd70      	pop	{r4, r5, r6, pc}
 8008b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b38:	4798      	blx	r3
 8008b3a:	3601      	adds	r6, #1
 8008b3c:	e7ee      	b.n	8008b1c <__libc_init_array+0xc>
 8008b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b42:	4798      	blx	r3
 8008b44:	3601      	adds	r6, #1
 8008b46:	e7f2      	b.n	8008b2e <__libc_init_array+0x1e>
 8008b48:	0800b064 	.word	0x0800b064
 8008b4c:	0800b064 	.word	0x0800b064
 8008b50:	0800b064 	.word	0x0800b064
 8008b54:	0800b068 	.word	0x0800b068

08008b58 <memset>:
 8008b58:	4402      	add	r2, r0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d100      	bne.n	8008b62 <memset+0xa>
 8008b60:	4770      	bx	lr
 8008b62:	f803 1b01 	strb.w	r1, [r3], #1
 8008b66:	e7f9      	b.n	8008b5c <memset+0x4>

08008b68 <iprintf>:
 8008b68:	b40f      	push	{r0, r1, r2, r3}
 8008b6a:	4b0a      	ldr	r3, [pc, #40]	; (8008b94 <iprintf+0x2c>)
 8008b6c:	b513      	push	{r0, r1, r4, lr}
 8008b6e:	681c      	ldr	r4, [r3, #0]
 8008b70:	b124      	cbz	r4, 8008b7c <iprintf+0x14>
 8008b72:	69a3      	ldr	r3, [r4, #24]
 8008b74:	b913      	cbnz	r3, 8008b7c <iprintf+0x14>
 8008b76:	4620      	mov	r0, r4
 8008b78:	f000 f866 	bl	8008c48 <__sinit>
 8008b7c:	ab05      	add	r3, sp, #20
 8008b7e:	9a04      	ldr	r2, [sp, #16]
 8008b80:	68a1      	ldr	r1, [r4, #8]
 8008b82:	9301      	str	r3, [sp, #4]
 8008b84:	4620      	mov	r0, r4
 8008b86:	f000 f9bd 	bl	8008f04 <_vfiprintf_r>
 8008b8a:	b002      	add	sp, #8
 8008b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b90:	b004      	add	sp, #16
 8008b92:	4770      	bx	lr
 8008b94:	200006f4 	.word	0x200006f4

08008b98 <std>:
 8008b98:	2300      	movs	r3, #0
 8008b9a:	b510      	push	{r4, lr}
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8008ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ba6:	6083      	str	r3, [r0, #8]
 8008ba8:	8181      	strh	r1, [r0, #12]
 8008baa:	6643      	str	r3, [r0, #100]	; 0x64
 8008bac:	81c2      	strh	r2, [r0, #14]
 8008bae:	6183      	str	r3, [r0, #24]
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	2208      	movs	r2, #8
 8008bb4:	305c      	adds	r0, #92	; 0x5c
 8008bb6:	f7ff ffcf 	bl	8008b58 <memset>
 8008bba:	4b05      	ldr	r3, [pc, #20]	; (8008bd0 <std+0x38>)
 8008bbc:	6263      	str	r3, [r4, #36]	; 0x24
 8008bbe:	4b05      	ldr	r3, [pc, #20]	; (8008bd4 <std+0x3c>)
 8008bc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bc2:	4b05      	ldr	r3, [pc, #20]	; (8008bd8 <std+0x40>)
 8008bc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008bc6:	4b05      	ldr	r3, [pc, #20]	; (8008bdc <std+0x44>)
 8008bc8:	6224      	str	r4, [r4, #32]
 8008bca:	6323      	str	r3, [r4, #48]	; 0x30
 8008bcc:	bd10      	pop	{r4, pc}
 8008bce:	bf00      	nop
 8008bd0:	080094ad 	.word	0x080094ad
 8008bd4:	080094cf 	.word	0x080094cf
 8008bd8:	08009507 	.word	0x08009507
 8008bdc:	0800952b 	.word	0x0800952b

08008be0 <_cleanup_r>:
 8008be0:	4901      	ldr	r1, [pc, #4]	; (8008be8 <_cleanup_r+0x8>)
 8008be2:	f000 b8af 	b.w	8008d44 <_fwalk_reent>
 8008be6:	bf00      	nop
 8008be8:	08009805 	.word	0x08009805

08008bec <__sfmoreglue>:
 8008bec:	b570      	push	{r4, r5, r6, lr}
 8008bee:	2268      	movs	r2, #104	; 0x68
 8008bf0:	1e4d      	subs	r5, r1, #1
 8008bf2:	4355      	muls	r5, r2
 8008bf4:	460e      	mov	r6, r1
 8008bf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008bfa:	f000 f8e5 	bl	8008dc8 <_malloc_r>
 8008bfe:	4604      	mov	r4, r0
 8008c00:	b140      	cbz	r0, 8008c14 <__sfmoreglue+0x28>
 8008c02:	2100      	movs	r1, #0
 8008c04:	e9c0 1600 	strd	r1, r6, [r0]
 8008c08:	300c      	adds	r0, #12
 8008c0a:	60a0      	str	r0, [r4, #8]
 8008c0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c10:	f7ff ffa2 	bl	8008b58 <memset>
 8008c14:	4620      	mov	r0, r4
 8008c16:	bd70      	pop	{r4, r5, r6, pc}

08008c18 <__sfp_lock_acquire>:
 8008c18:	4801      	ldr	r0, [pc, #4]	; (8008c20 <__sfp_lock_acquire+0x8>)
 8008c1a:	f000 b8b3 	b.w	8008d84 <__retarget_lock_acquire_recursive>
 8008c1e:	bf00      	nop
 8008c20:	20002c35 	.word	0x20002c35

08008c24 <__sfp_lock_release>:
 8008c24:	4801      	ldr	r0, [pc, #4]	; (8008c2c <__sfp_lock_release+0x8>)
 8008c26:	f000 b8ae 	b.w	8008d86 <__retarget_lock_release_recursive>
 8008c2a:	bf00      	nop
 8008c2c:	20002c35 	.word	0x20002c35

08008c30 <__sinit_lock_acquire>:
 8008c30:	4801      	ldr	r0, [pc, #4]	; (8008c38 <__sinit_lock_acquire+0x8>)
 8008c32:	f000 b8a7 	b.w	8008d84 <__retarget_lock_acquire_recursive>
 8008c36:	bf00      	nop
 8008c38:	20002c36 	.word	0x20002c36

08008c3c <__sinit_lock_release>:
 8008c3c:	4801      	ldr	r0, [pc, #4]	; (8008c44 <__sinit_lock_release+0x8>)
 8008c3e:	f000 b8a2 	b.w	8008d86 <__retarget_lock_release_recursive>
 8008c42:	bf00      	nop
 8008c44:	20002c36 	.word	0x20002c36

08008c48 <__sinit>:
 8008c48:	b510      	push	{r4, lr}
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	f7ff fff0 	bl	8008c30 <__sinit_lock_acquire>
 8008c50:	69a3      	ldr	r3, [r4, #24]
 8008c52:	b11b      	cbz	r3, 8008c5c <__sinit+0x14>
 8008c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c58:	f7ff bff0 	b.w	8008c3c <__sinit_lock_release>
 8008c5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c60:	6523      	str	r3, [r4, #80]	; 0x50
 8008c62:	4b13      	ldr	r3, [pc, #76]	; (8008cb0 <__sinit+0x68>)
 8008c64:	4a13      	ldr	r2, [pc, #76]	; (8008cb4 <__sinit+0x6c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c6a:	42a3      	cmp	r3, r4
 8008c6c:	bf04      	itt	eq
 8008c6e:	2301      	moveq	r3, #1
 8008c70:	61a3      	streq	r3, [r4, #24]
 8008c72:	4620      	mov	r0, r4
 8008c74:	f000 f820 	bl	8008cb8 <__sfp>
 8008c78:	6060      	str	r0, [r4, #4]
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f000 f81c 	bl	8008cb8 <__sfp>
 8008c80:	60a0      	str	r0, [r4, #8]
 8008c82:	4620      	mov	r0, r4
 8008c84:	f000 f818 	bl	8008cb8 <__sfp>
 8008c88:	2200      	movs	r2, #0
 8008c8a:	60e0      	str	r0, [r4, #12]
 8008c8c:	2104      	movs	r1, #4
 8008c8e:	6860      	ldr	r0, [r4, #4]
 8008c90:	f7ff ff82 	bl	8008b98 <std>
 8008c94:	68a0      	ldr	r0, [r4, #8]
 8008c96:	2201      	movs	r2, #1
 8008c98:	2109      	movs	r1, #9
 8008c9a:	f7ff ff7d 	bl	8008b98 <std>
 8008c9e:	68e0      	ldr	r0, [r4, #12]
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	2112      	movs	r1, #18
 8008ca4:	f7ff ff78 	bl	8008b98 <std>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	61a3      	str	r3, [r4, #24]
 8008cac:	e7d2      	b.n	8008c54 <__sinit+0xc>
 8008cae:	bf00      	nop
 8008cb0:	0800afc4 	.word	0x0800afc4
 8008cb4:	08008be1 	.word	0x08008be1

08008cb8 <__sfp>:
 8008cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cba:	4607      	mov	r7, r0
 8008cbc:	f7ff ffac 	bl	8008c18 <__sfp_lock_acquire>
 8008cc0:	4b1e      	ldr	r3, [pc, #120]	; (8008d3c <__sfp+0x84>)
 8008cc2:	681e      	ldr	r6, [r3, #0]
 8008cc4:	69b3      	ldr	r3, [r6, #24]
 8008cc6:	b913      	cbnz	r3, 8008cce <__sfp+0x16>
 8008cc8:	4630      	mov	r0, r6
 8008cca:	f7ff ffbd 	bl	8008c48 <__sinit>
 8008cce:	3648      	adds	r6, #72	; 0x48
 8008cd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	d503      	bpl.n	8008ce0 <__sfp+0x28>
 8008cd8:	6833      	ldr	r3, [r6, #0]
 8008cda:	b30b      	cbz	r3, 8008d20 <__sfp+0x68>
 8008cdc:	6836      	ldr	r6, [r6, #0]
 8008cde:	e7f7      	b.n	8008cd0 <__sfp+0x18>
 8008ce0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ce4:	b9d5      	cbnz	r5, 8008d1c <__sfp+0x64>
 8008ce6:	4b16      	ldr	r3, [pc, #88]	; (8008d40 <__sfp+0x88>)
 8008ce8:	60e3      	str	r3, [r4, #12]
 8008cea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cee:	6665      	str	r5, [r4, #100]	; 0x64
 8008cf0:	f000 f847 	bl	8008d82 <__retarget_lock_init_recursive>
 8008cf4:	f7ff ff96 	bl	8008c24 <__sfp_lock_release>
 8008cf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008cfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d00:	6025      	str	r5, [r4, #0]
 8008d02:	61a5      	str	r5, [r4, #24]
 8008d04:	2208      	movs	r2, #8
 8008d06:	4629      	mov	r1, r5
 8008d08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d0c:	f7ff ff24 	bl	8008b58 <memset>
 8008d10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d18:	4620      	mov	r0, r4
 8008d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d1c:	3468      	adds	r4, #104	; 0x68
 8008d1e:	e7d9      	b.n	8008cd4 <__sfp+0x1c>
 8008d20:	2104      	movs	r1, #4
 8008d22:	4638      	mov	r0, r7
 8008d24:	f7ff ff62 	bl	8008bec <__sfmoreglue>
 8008d28:	4604      	mov	r4, r0
 8008d2a:	6030      	str	r0, [r6, #0]
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	d1d5      	bne.n	8008cdc <__sfp+0x24>
 8008d30:	f7ff ff78 	bl	8008c24 <__sfp_lock_release>
 8008d34:	230c      	movs	r3, #12
 8008d36:	603b      	str	r3, [r7, #0]
 8008d38:	e7ee      	b.n	8008d18 <__sfp+0x60>
 8008d3a:	bf00      	nop
 8008d3c:	0800afc4 	.word	0x0800afc4
 8008d40:	ffff0001 	.word	0xffff0001

08008d44 <_fwalk_reent>:
 8008d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d48:	4606      	mov	r6, r0
 8008d4a:	4688      	mov	r8, r1
 8008d4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d50:	2700      	movs	r7, #0
 8008d52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d56:	f1b9 0901 	subs.w	r9, r9, #1
 8008d5a:	d505      	bpl.n	8008d68 <_fwalk_reent+0x24>
 8008d5c:	6824      	ldr	r4, [r4, #0]
 8008d5e:	2c00      	cmp	r4, #0
 8008d60:	d1f7      	bne.n	8008d52 <_fwalk_reent+0xe>
 8008d62:	4638      	mov	r0, r7
 8008d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d68:	89ab      	ldrh	r3, [r5, #12]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d907      	bls.n	8008d7e <_fwalk_reent+0x3a>
 8008d6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d72:	3301      	adds	r3, #1
 8008d74:	d003      	beq.n	8008d7e <_fwalk_reent+0x3a>
 8008d76:	4629      	mov	r1, r5
 8008d78:	4630      	mov	r0, r6
 8008d7a:	47c0      	blx	r8
 8008d7c:	4307      	orrs	r7, r0
 8008d7e:	3568      	adds	r5, #104	; 0x68
 8008d80:	e7e9      	b.n	8008d56 <_fwalk_reent+0x12>

08008d82 <__retarget_lock_init_recursive>:
 8008d82:	4770      	bx	lr

08008d84 <__retarget_lock_acquire_recursive>:
 8008d84:	4770      	bx	lr

08008d86 <__retarget_lock_release_recursive>:
 8008d86:	4770      	bx	lr

08008d88 <sbrk_aligned>:
 8008d88:	b570      	push	{r4, r5, r6, lr}
 8008d8a:	4e0e      	ldr	r6, [pc, #56]	; (8008dc4 <sbrk_aligned+0x3c>)
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	6831      	ldr	r1, [r6, #0]
 8008d90:	4605      	mov	r5, r0
 8008d92:	b911      	cbnz	r1, 8008d9a <sbrk_aligned+0x12>
 8008d94:	f000 fb7a 	bl	800948c <_sbrk_r>
 8008d98:	6030      	str	r0, [r6, #0]
 8008d9a:	4621      	mov	r1, r4
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	f000 fb75 	bl	800948c <_sbrk_r>
 8008da2:	1c43      	adds	r3, r0, #1
 8008da4:	d00a      	beq.n	8008dbc <sbrk_aligned+0x34>
 8008da6:	1cc4      	adds	r4, r0, #3
 8008da8:	f024 0403 	bic.w	r4, r4, #3
 8008dac:	42a0      	cmp	r0, r4
 8008dae:	d007      	beq.n	8008dc0 <sbrk_aligned+0x38>
 8008db0:	1a21      	subs	r1, r4, r0
 8008db2:	4628      	mov	r0, r5
 8008db4:	f000 fb6a 	bl	800948c <_sbrk_r>
 8008db8:	3001      	adds	r0, #1
 8008dba:	d101      	bne.n	8008dc0 <sbrk_aligned+0x38>
 8008dbc:	f04f 34ff 	mov.w	r4, #4294967295
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
 8008dc4:	20002c3c 	.word	0x20002c3c

08008dc8 <_malloc_r>:
 8008dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dcc:	1ccd      	adds	r5, r1, #3
 8008dce:	f025 0503 	bic.w	r5, r5, #3
 8008dd2:	3508      	adds	r5, #8
 8008dd4:	2d0c      	cmp	r5, #12
 8008dd6:	bf38      	it	cc
 8008dd8:	250c      	movcc	r5, #12
 8008dda:	2d00      	cmp	r5, #0
 8008ddc:	4607      	mov	r7, r0
 8008dde:	db01      	blt.n	8008de4 <_malloc_r+0x1c>
 8008de0:	42a9      	cmp	r1, r5
 8008de2:	d905      	bls.n	8008df0 <_malloc_r+0x28>
 8008de4:	230c      	movs	r3, #12
 8008de6:	603b      	str	r3, [r7, #0]
 8008de8:	2600      	movs	r6, #0
 8008dea:	4630      	mov	r0, r6
 8008dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008df0:	4e2e      	ldr	r6, [pc, #184]	; (8008eac <_malloc_r+0xe4>)
 8008df2:	f000 fdbb 	bl	800996c <__malloc_lock>
 8008df6:	6833      	ldr	r3, [r6, #0]
 8008df8:	461c      	mov	r4, r3
 8008dfa:	bb34      	cbnz	r4, 8008e4a <_malloc_r+0x82>
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	4638      	mov	r0, r7
 8008e00:	f7ff ffc2 	bl	8008d88 <sbrk_aligned>
 8008e04:	1c43      	adds	r3, r0, #1
 8008e06:	4604      	mov	r4, r0
 8008e08:	d14d      	bne.n	8008ea6 <_malloc_r+0xde>
 8008e0a:	6834      	ldr	r4, [r6, #0]
 8008e0c:	4626      	mov	r6, r4
 8008e0e:	2e00      	cmp	r6, #0
 8008e10:	d140      	bne.n	8008e94 <_malloc_r+0xcc>
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	4631      	mov	r1, r6
 8008e16:	4638      	mov	r0, r7
 8008e18:	eb04 0803 	add.w	r8, r4, r3
 8008e1c:	f000 fb36 	bl	800948c <_sbrk_r>
 8008e20:	4580      	cmp	r8, r0
 8008e22:	d13a      	bne.n	8008e9a <_malloc_r+0xd2>
 8008e24:	6821      	ldr	r1, [r4, #0]
 8008e26:	3503      	adds	r5, #3
 8008e28:	1a6d      	subs	r5, r5, r1
 8008e2a:	f025 0503 	bic.w	r5, r5, #3
 8008e2e:	3508      	adds	r5, #8
 8008e30:	2d0c      	cmp	r5, #12
 8008e32:	bf38      	it	cc
 8008e34:	250c      	movcc	r5, #12
 8008e36:	4629      	mov	r1, r5
 8008e38:	4638      	mov	r0, r7
 8008e3a:	f7ff ffa5 	bl	8008d88 <sbrk_aligned>
 8008e3e:	3001      	adds	r0, #1
 8008e40:	d02b      	beq.n	8008e9a <_malloc_r+0xd2>
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	442b      	add	r3, r5
 8008e46:	6023      	str	r3, [r4, #0]
 8008e48:	e00e      	b.n	8008e68 <_malloc_r+0xa0>
 8008e4a:	6822      	ldr	r2, [r4, #0]
 8008e4c:	1b52      	subs	r2, r2, r5
 8008e4e:	d41e      	bmi.n	8008e8e <_malloc_r+0xc6>
 8008e50:	2a0b      	cmp	r2, #11
 8008e52:	d916      	bls.n	8008e82 <_malloc_r+0xba>
 8008e54:	1961      	adds	r1, r4, r5
 8008e56:	42a3      	cmp	r3, r4
 8008e58:	6025      	str	r5, [r4, #0]
 8008e5a:	bf18      	it	ne
 8008e5c:	6059      	strne	r1, [r3, #4]
 8008e5e:	6863      	ldr	r3, [r4, #4]
 8008e60:	bf08      	it	eq
 8008e62:	6031      	streq	r1, [r6, #0]
 8008e64:	5162      	str	r2, [r4, r5]
 8008e66:	604b      	str	r3, [r1, #4]
 8008e68:	4638      	mov	r0, r7
 8008e6a:	f104 060b 	add.w	r6, r4, #11
 8008e6e:	f000 fd83 	bl	8009978 <__malloc_unlock>
 8008e72:	f026 0607 	bic.w	r6, r6, #7
 8008e76:	1d23      	adds	r3, r4, #4
 8008e78:	1af2      	subs	r2, r6, r3
 8008e7a:	d0b6      	beq.n	8008dea <_malloc_r+0x22>
 8008e7c:	1b9b      	subs	r3, r3, r6
 8008e7e:	50a3      	str	r3, [r4, r2]
 8008e80:	e7b3      	b.n	8008dea <_malloc_r+0x22>
 8008e82:	6862      	ldr	r2, [r4, #4]
 8008e84:	42a3      	cmp	r3, r4
 8008e86:	bf0c      	ite	eq
 8008e88:	6032      	streq	r2, [r6, #0]
 8008e8a:	605a      	strne	r2, [r3, #4]
 8008e8c:	e7ec      	b.n	8008e68 <_malloc_r+0xa0>
 8008e8e:	4623      	mov	r3, r4
 8008e90:	6864      	ldr	r4, [r4, #4]
 8008e92:	e7b2      	b.n	8008dfa <_malloc_r+0x32>
 8008e94:	4634      	mov	r4, r6
 8008e96:	6876      	ldr	r6, [r6, #4]
 8008e98:	e7b9      	b.n	8008e0e <_malloc_r+0x46>
 8008e9a:	230c      	movs	r3, #12
 8008e9c:	603b      	str	r3, [r7, #0]
 8008e9e:	4638      	mov	r0, r7
 8008ea0:	f000 fd6a 	bl	8009978 <__malloc_unlock>
 8008ea4:	e7a1      	b.n	8008dea <_malloc_r+0x22>
 8008ea6:	6025      	str	r5, [r4, #0]
 8008ea8:	e7de      	b.n	8008e68 <_malloc_r+0xa0>
 8008eaa:	bf00      	nop
 8008eac:	20002c38 	.word	0x20002c38

08008eb0 <__sfputc_r>:
 8008eb0:	6893      	ldr	r3, [r2, #8]
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	b410      	push	{r4}
 8008eb8:	6093      	str	r3, [r2, #8]
 8008eba:	da08      	bge.n	8008ece <__sfputc_r+0x1e>
 8008ebc:	6994      	ldr	r4, [r2, #24]
 8008ebe:	42a3      	cmp	r3, r4
 8008ec0:	db01      	blt.n	8008ec6 <__sfputc_r+0x16>
 8008ec2:	290a      	cmp	r1, #10
 8008ec4:	d103      	bne.n	8008ece <__sfputc_r+0x1e>
 8008ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eca:	f000 bb33 	b.w	8009534 <__swbuf_r>
 8008ece:	6813      	ldr	r3, [r2, #0]
 8008ed0:	1c58      	adds	r0, r3, #1
 8008ed2:	6010      	str	r0, [r2, #0]
 8008ed4:	7019      	strb	r1, [r3, #0]
 8008ed6:	4608      	mov	r0, r1
 8008ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008edc:	4770      	bx	lr

08008ede <__sfputs_r>:
 8008ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee0:	4606      	mov	r6, r0
 8008ee2:	460f      	mov	r7, r1
 8008ee4:	4614      	mov	r4, r2
 8008ee6:	18d5      	adds	r5, r2, r3
 8008ee8:	42ac      	cmp	r4, r5
 8008eea:	d101      	bne.n	8008ef0 <__sfputs_r+0x12>
 8008eec:	2000      	movs	r0, #0
 8008eee:	e007      	b.n	8008f00 <__sfputs_r+0x22>
 8008ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef4:	463a      	mov	r2, r7
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	f7ff ffda 	bl	8008eb0 <__sfputc_r>
 8008efc:	1c43      	adds	r3, r0, #1
 8008efe:	d1f3      	bne.n	8008ee8 <__sfputs_r+0xa>
 8008f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f04 <_vfiprintf_r>:
 8008f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f08:	460d      	mov	r5, r1
 8008f0a:	b09d      	sub	sp, #116	; 0x74
 8008f0c:	4614      	mov	r4, r2
 8008f0e:	4698      	mov	r8, r3
 8008f10:	4606      	mov	r6, r0
 8008f12:	b118      	cbz	r0, 8008f1c <_vfiprintf_r+0x18>
 8008f14:	6983      	ldr	r3, [r0, #24]
 8008f16:	b90b      	cbnz	r3, 8008f1c <_vfiprintf_r+0x18>
 8008f18:	f7ff fe96 	bl	8008c48 <__sinit>
 8008f1c:	4b89      	ldr	r3, [pc, #548]	; (8009144 <_vfiprintf_r+0x240>)
 8008f1e:	429d      	cmp	r5, r3
 8008f20:	d11b      	bne.n	8008f5a <_vfiprintf_r+0x56>
 8008f22:	6875      	ldr	r5, [r6, #4]
 8008f24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f26:	07d9      	lsls	r1, r3, #31
 8008f28:	d405      	bmi.n	8008f36 <_vfiprintf_r+0x32>
 8008f2a:	89ab      	ldrh	r3, [r5, #12]
 8008f2c:	059a      	lsls	r2, r3, #22
 8008f2e:	d402      	bmi.n	8008f36 <_vfiprintf_r+0x32>
 8008f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f32:	f7ff ff27 	bl	8008d84 <__retarget_lock_acquire_recursive>
 8008f36:	89ab      	ldrh	r3, [r5, #12]
 8008f38:	071b      	lsls	r3, r3, #28
 8008f3a:	d501      	bpl.n	8008f40 <_vfiprintf_r+0x3c>
 8008f3c:	692b      	ldr	r3, [r5, #16]
 8008f3e:	b9eb      	cbnz	r3, 8008f7c <_vfiprintf_r+0x78>
 8008f40:	4629      	mov	r1, r5
 8008f42:	4630      	mov	r0, r6
 8008f44:	f000 fb5a 	bl	80095fc <__swsetup_r>
 8008f48:	b1c0      	cbz	r0, 8008f7c <_vfiprintf_r+0x78>
 8008f4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f4c:	07dc      	lsls	r4, r3, #31
 8008f4e:	d50e      	bpl.n	8008f6e <_vfiprintf_r+0x6a>
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295
 8008f54:	b01d      	add	sp, #116	; 0x74
 8008f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5a:	4b7b      	ldr	r3, [pc, #492]	; (8009148 <_vfiprintf_r+0x244>)
 8008f5c:	429d      	cmp	r5, r3
 8008f5e:	d101      	bne.n	8008f64 <_vfiprintf_r+0x60>
 8008f60:	68b5      	ldr	r5, [r6, #8]
 8008f62:	e7df      	b.n	8008f24 <_vfiprintf_r+0x20>
 8008f64:	4b79      	ldr	r3, [pc, #484]	; (800914c <_vfiprintf_r+0x248>)
 8008f66:	429d      	cmp	r5, r3
 8008f68:	bf08      	it	eq
 8008f6a:	68f5      	ldreq	r5, [r6, #12]
 8008f6c:	e7da      	b.n	8008f24 <_vfiprintf_r+0x20>
 8008f6e:	89ab      	ldrh	r3, [r5, #12]
 8008f70:	0598      	lsls	r0, r3, #22
 8008f72:	d4ed      	bmi.n	8008f50 <_vfiprintf_r+0x4c>
 8008f74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f76:	f7ff ff06 	bl	8008d86 <__retarget_lock_release_recursive>
 8008f7a:	e7e9      	b.n	8008f50 <_vfiprintf_r+0x4c>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f80:	2320      	movs	r3, #32
 8008f82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f86:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f8a:	2330      	movs	r3, #48	; 0x30
 8008f8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009150 <_vfiprintf_r+0x24c>
 8008f90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f94:	f04f 0901 	mov.w	r9, #1
 8008f98:	4623      	mov	r3, r4
 8008f9a:	469a      	mov	sl, r3
 8008f9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fa0:	b10a      	cbz	r2, 8008fa6 <_vfiprintf_r+0xa2>
 8008fa2:	2a25      	cmp	r2, #37	; 0x25
 8008fa4:	d1f9      	bne.n	8008f9a <_vfiprintf_r+0x96>
 8008fa6:	ebba 0b04 	subs.w	fp, sl, r4
 8008faa:	d00b      	beq.n	8008fc4 <_vfiprintf_r+0xc0>
 8008fac:	465b      	mov	r3, fp
 8008fae:	4622      	mov	r2, r4
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	f7ff ff93 	bl	8008ede <__sfputs_r>
 8008fb8:	3001      	adds	r0, #1
 8008fba:	f000 80aa 	beq.w	8009112 <_vfiprintf_r+0x20e>
 8008fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fc0:	445a      	add	r2, fp
 8008fc2:	9209      	str	r2, [sp, #36]	; 0x24
 8008fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 80a2 	beq.w	8009112 <_vfiprintf_r+0x20e>
 8008fce:	2300      	movs	r3, #0
 8008fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fd8:	f10a 0a01 	add.w	sl, sl, #1
 8008fdc:	9304      	str	r3, [sp, #16]
 8008fde:	9307      	str	r3, [sp, #28]
 8008fe0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fe4:	931a      	str	r3, [sp, #104]	; 0x68
 8008fe6:	4654      	mov	r4, sl
 8008fe8:	2205      	movs	r2, #5
 8008fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fee:	4858      	ldr	r0, [pc, #352]	; (8009150 <_vfiprintf_r+0x24c>)
 8008ff0:	f7f7 f8f6 	bl	80001e0 <memchr>
 8008ff4:	9a04      	ldr	r2, [sp, #16]
 8008ff6:	b9d8      	cbnz	r0, 8009030 <_vfiprintf_r+0x12c>
 8008ff8:	06d1      	lsls	r1, r2, #27
 8008ffa:	bf44      	itt	mi
 8008ffc:	2320      	movmi	r3, #32
 8008ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009002:	0713      	lsls	r3, r2, #28
 8009004:	bf44      	itt	mi
 8009006:	232b      	movmi	r3, #43	; 0x2b
 8009008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800900c:	f89a 3000 	ldrb.w	r3, [sl]
 8009010:	2b2a      	cmp	r3, #42	; 0x2a
 8009012:	d015      	beq.n	8009040 <_vfiprintf_r+0x13c>
 8009014:	9a07      	ldr	r2, [sp, #28]
 8009016:	4654      	mov	r4, sl
 8009018:	2000      	movs	r0, #0
 800901a:	f04f 0c0a 	mov.w	ip, #10
 800901e:	4621      	mov	r1, r4
 8009020:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009024:	3b30      	subs	r3, #48	; 0x30
 8009026:	2b09      	cmp	r3, #9
 8009028:	d94e      	bls.n	80090c8 <_vfiprintf_r+0x1c4>
 800902a:	b1b0      	cbz	r0, 800905a <_vfiprintf_r+0x156>
 800902c:	9207      	str	r2, [sp, #28]
 800902e:	e014      	b.n	800905a <_vfiprintf_r+0x156>
 8009030:	eba0 0308 	sub.w	r3, r0, r8
 8009034:	fa09 f303 	lsl.w	r3, r9, r3
 8009038:	4313      	orrs	r3, r2
 800903a:	9304      	str	r3, [sp, #16]
 800903c:	46a2      	mov	sl, r4
 800903e:	e7d2      	b.n	8008fe6 <_vfiprintf_r+0xe2>
 8009040:	9b03      	ldr	r3, [sp, #12]
 8009042:	1d19      	adds	r1, r3, #4
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	9103      	str	r1, [sp, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	bfbb      	ittet	lt
 800904c:	425b      	neglt	r3, r3
 800904e:	f042 0202 	orrlt.w	r2, r2, #2
 8009052:	9307      	strge	r3, [sp, #28]
 8009054:	9307      	strlt	r3, [sp, #28]
 8009056:	bfb8      	it	lt
 8009058:	9204      	strlt	r2, [sp, #16]
 800905a:	7823      	ldrb	r3, [r4, #0]
 800905c:	2b2e      	cmp	r3, #46	; 0x2e
 800905e:	d10c      	bne.n	800907a <_vfiprintf_r+0x176>
 8009060:	7863      	ldrb	r3, [r4, #1]
 8009062:	2b2a      	cmp	r3, #42	; 0x2a
 8009064:	d135      	bne.n	80090d2 <_vfiprintf_r+0x1ce>
 8009066:	9b03      	ldr	r3, [sp, #12]
 8009068:	1d1a      	adds	r2, r3, #4
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	9203      	str	r2, [sp, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	bfb8      	it	lt
 8009072:	f04f 33ff 	movlt.w	r3, #4294967295
 8009076:	3402      	adds	r4, #2
 8009078:	9305      	str	r3, [sp, #20]
 800907a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009160 <_vfiprintf_r+0x25c>
 800907e:	7821      	ldrb	r1, [r4, #0]
 8009080:	2203      	movs	r2, #3
 8009082:	4650      	mov	r0, sl
 8009084:	f7f7 f8ac 	bl	80001e0 <memchr>
 8009088:	b140      	cbz	r0, 800909c <_vfiprintf_r+0x198>
 800908a:	2340      	movs	r3, #64	; 0x40
 800908c:	eba0 000a 	sub.w	r0, r0, sl
 8009090:	fa03 f000 	lsl.w	r0, r3, r0
 8009094:	9b04      	ldr	r3, [sp, #16]
 8009096:	4303      	orrs	r3, r0
 8009098:	3401      	adds	r4, #1
 800909a:	9304      	str	r3, [sp, #16]
 800909c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090a0:	482c      	ldr	r0, [pc, #176]	; (8009154 <_vfiprintf_r+0x250>)
 80090a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090a6:	2206      	movs	r2, #6
 80090a8:	f7f7 f89a 	bl	80001e0 <memchr>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d03f      	beq.n	8009130 <_vfiprintf_r+0x22c>
 80090b0:	4b29      	ldr	r3, [pc, #164]	; (8009158 <_vfiprintf_r+0x254>)
 80090b2:	bb1b      	cbnz	r3, 80090fc <_vfiprintf_r+0x1f8>
 80090b4:	9b03      	ldr	r3, [sp, #12]
 80090b6:	3307      	adds	r3, #7
 80090b8:	f023 0307 	bic.w	r3, r3, #7
 80090bc:	3308      	adds	r3, #8
 80090be:	9303      	str	r3, [sp, #12]
 80090c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c2:	443b      	add	r3, r7
 80090c4:	9309      	str	r3, [sp, #36]	; 0x24
 80090c6:	e767      	b.n	8008f98 <_vfiprintf_r+0x94>
 80090c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80090cc:	460c      	mov	r4, r1
 80090ce:	2001      	movs	r0, #1
 80090d0:	e7a5      	b.n	800901e <_vfiprintf_r+0x11a>
 80090d2:	2300      	movs	r3, #0
 80090d4:	3401      	adds	r4, #1
 80090d6:	9305      	str	r3, [sp, #20]
 80090d8:	4619      	mov	r1, r3
 80090da:	f04f 0c0a 	mov.w	ip, #10
 80090de:	4620      	mov	r0, r4
 80090e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090e4:	3a30      	subs	r2, #48	; 0x30
 80090e6:	2a09      	cmp	r2, #9
 80090e8:	d903      	bls.n	80090f2 <_vfiprintf_r+0x1ee>
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0c5      	beq.n	800907a <_vfiprintf_r+0x176>
 80090ee:	9105      	str	r1, [sp, #20]
 80090f0:	e7c3      	b.n	800907a <_vfiprintf_r+0x176>
 80090f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80090f6:	4604      	mov	r4, r0
 80090f8:	2301      	movs	r3, #1
 80090fa:	e7f0      	b.n	80090de <_vfiprintf_r+0x1da>
 80090fc:	ab03      	add	r3, sp, #12
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	462a      	mov	r2, r5
 8009102:	4b16      	ldr	r3, [pc, #88]	; (800915c <_vfiprintf_r+0x258>)
 8009104:	a904      	add	r1, sp, #16
 8009106:	4630      	mov	r0, r6
 8009108:	f3af 8000 	nop.w
 800910c:	4607      	mov	r7, r0
 800910e:	1c78      	adds	r0, r7, #1
 8009110:	d1d6      	bne.n	80090c0 <_vfiprintf_r+0x1bc>
 8009112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009114:	07d9      	lsls	r1, r3, #31
 8009116:	d405      	bmi.n	8009124 <_vfiprintf_r+0x220>
 8009118:	89ab      	ldrh	r3, [r5, #12]
 800911a:	059a      	lsls	r2, r3, #22
 800911c:	d402      	bmi.n	8009124 <_vfiprintf_r+0x220>
 800911e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009120:	f7ff fe31 	bl	8008d86 <__retarget_lock_release_recursive>
 8009124:	89ab      	ldrh	r3, [r5, #12]
 8009126:	065b      	lsls	r3, r3, #25
 8009128:	f53f af12 	bmi.w	8008f50 <_vfiprintf_r+0x4c>
 800912c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800912e:	e711      	b.n	8008f54 <_vfiprintf_r+0x50>
 8009130:	ab03      	add	r3, sp, #12
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	462a      	mov	r2, r5
 8009136:	4b09      	ldr	r3, [pc, #36]	; (800915c <_vfiprintf_r+0x258>)
 8009138:	a904      	add	r1, sp, #16
 800913a:	4630      	mov	r0, r6
 800913c:	f000 f880 	bl	8009240 <_printf_i>
 8009140:	e7e4      	b.n	800910c <_vfiprintf_r+0x208>
 8009142:	bf00      	nop
 8009144:	0800afe8 	.word	0x0800afe8
 8009148:	0800b008 	.word	0x0800b008
 800914c:	0800afc8 	.word	0x0800afc8
 8009150:	0800b028 	.word	0x0800b028
 8009154:	0800b032 	.word	0x0800b032
 8009158:	00000000 	.word	0x00000000
 800915c:	08008edf 	.word	0x08008edf
 8009160:	0800b02e 	.word	0x0800b02e

08009164 <_printf_common>:
 8009164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009168:	4616      	mov	r6, r2
 800916a:	4699      	mov	r9, r3
 800916c:	688a      	ldr	r2, [r1, #8]
 800916e:	690b      	ldr	r3, [r1, #16]
 8009170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009174:	4293      	cmp	r3, r2
 8009176:	bfb8      	it	lt
 8009178:	4613      	movlt	r3, r2
 800917a:	6033      	str	r3, [r6, #0]
 800917c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009180:	4607      	mov	r7, r0
 8009182:	460c      	mov	r4, r1
 8009184:	b10a      	cbz	r2, 800918a <_printf_common+0x26>
 8009186:	3301      	adds	r3, #1
 8009188:	6033      	str	r3, [r6, #0]
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	0699      	lsls	r1, r3, #26
 800918e:	bf42      	ittt	mi
 8009190:	6833      	ldrmi	r3, [r6, #0]
 8009192:	3302      	addmi	r3, #2
 8009194:	6033      	strmi	r3, [r6, #0]
 8009196:	6825      	ldr	r5, [r4, #0]
 8009198:	f015 0506 	ands.w	r5, r5, #6
 800919c:	d106      	bne.n	80091ac <_printf_common+0x48>
 800919e:	f104 0a19 	add.w	sl, r4, #25
 80091a2:	68e3      	ldr	r3, [r4, #12]
 80091a4:	6832      	ldr	r2, [r6, #0]
 80091a6:	1a9b      	subs	r3, r3, r2
 80091a8:	42ab      	cmp	r3, r5
 80091aa:	dc26      	bgt.n	80091fa <_printf_common+0x96>
 80091ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091b0:	1e13      	subs	r3, r2, #0
 80091b2:	6822      	ldr	r2, [r4, #0]
 80091b4:	bf18      	it	ne
 80091b6:	2301      	movne	r3, #1
 80091b8:	0692      	lsls	r2, r2, #26
 80091ba:	d42b      	bmi.n	8009214 <_printf_common+0xb0>
 80091bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091c0:	4649      	mov	r1, r9
 80091c2:	4638      	mov	r0, r7
 80091c4:	47c0      	blx	r8
 80091c6:	3001      	adds	r0, #1
 80091c8:	d01e      	beq.n	8009208 <_printf_common+0xa4>
 80091ca:	6823      	ldr	r3, [r4, #0]
 80091cc:	68e5      	ldr	r5, [r4, #12]
 80091ce:	6832      	ldr	r2, [r6, #0]
 80091d0:	f003 0306 	and.w	r3, r3, #6
 80091d4:	2b04      	cmp	r3, #4
 80091d6:	bf08      	it	eq
 80091d8:	1aad      	subeq	r5, r5, r2
 80091da:	68a3      	ldr	r3, [r4, #8]
 80091dc:	6922      	ldr	r2, [r4, #16]
 80091de:	bf0c      	ite	eq
 80091e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091e4:	2500      	movne	r5, #0
 80091e6:	4293      	cmp	r3, r2
 80091e8:	bfc4      	itt	gt
 80091ea:	1a9b      	subgt	r3, r3, r2
 80091ec:	18ed      	addgt	r5, r5, r3
 80091ee:	2600      	movs	r6, #0
 80091f0:	341a      	adds	r4, #26
 80091f2:	42b5      	cmp	r5, r6
 80091f4:	d11a      	bne.n	800922c <_printf_common+0xc8>
 80091f6:	2000      	movs	r0, #0
 80091f8:	e008      	b.n	800920c <_printf_common+0xa8>
 80091fa:	2301      	movs	r3, #1
 80091fc:	4652      	mov	r2, sl
 80091fe:	4649      	mov	r1, r9
 8009200:	4638      	mov	r0, r7
 8009202:	47c0      	blx	r8
 8009204:	3001      	adds	r0, #1
 8009206:	d103      	bne.n	8009210 <_printf_common+0xac>
 8009208:	f04f 30ff 	mov.w	r0, #4294967295
 800920c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009210:	3501      	adds	r5, #1
 8009212:	e7c6      	b.n	80091a2 <_printf_common+0x3e>
 8009214:	18e1      	adds	r1, r4, r3
 8009216:	1c5a      	adds	r2, r3, #1
 8009218:	2030      	movs	r0, #48	; 0x30
 800921a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800921e:	4422      	add	r2, r4
 8009220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009228:	3302      	adds	r3, #2
 800922a:	e7c7      	b.n	80091bc <_printf_common+0x58>
 800922c:	2301      	movs	r3, #1
 800922e:	4622      	mov	r2, r4
 8009230:	4649      	mov	r1, r9
 8009232:	4638      	mov	r0, r7
 8009234:	47c0      	blx	r8
 8009236:	3001      	adds	r0, #1
 8009238:	d0e6      	beq.n	8009208 <_printf_common+0xa4>
 800923a:	3601      	adds	r6, #1
 800923c:	e7d9      	b.n	80091f2 <_printf_common+0x8e>
	...

08009240 <_printf_i>:
 8009240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009244:	7e0f      	ldrb	r7, [r1, #24]
 8009246:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009248:	2f78      	cmp	r7, #120	; 0x78
 800924a:	4691      	mov	r9, r2
 800924c:	4680      	mov	r8, r0
 800924e:	460c      	mov	r4, r1
 8009250:	469a      	mov	sl, r3
 8009252:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009256:	d807      	bhi.n	8009268 <_printf_i+0x28>
 8009258:	2f62      	cmp	r7, #98	; 0x62
 800925a:	d80a      	bhi.n	8009272 <_printf_i+0x32>
 800925c:	2f00      	cmp	r7, #0
 800925e:	f000 80d8 	beq.w	8009412 <_printf_i+0x1d2>
 8009262:	2f58      	cmp	r7, #88	; 0x58
 8009264:	f000 80a3 	beq.w	80093ae <_printf_i+0x16e>
 8009268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800926c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009270:	e03a      	b.n	80092e8 <_printf_i+0xa8>
 8009272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009276:	2b15      	cmp	r3, #21
 8009278:	d8f6      	bhi.n	8009268 <_printf_i+0x28>
 800927a:	a101      	add	r1, pc, #4	; (adr r1, 8009280 <_printf_i+0x40>)
 800927c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009280:	080092d9 	.word	0x080092d9
 8009284:	080092ed 	.word	0x080092ed
 8009288:	08009269 	.word	0x08009269
 800928c:	08009269 	.word	0x08009269
 8009290:	08009269 	.word	0x08009269
 8009294:	08009269 	.word	0x08009269
 8009298:	080092ed 	.word	0x080092ed
 800929c:	08009269 	.word	0x08009269
 80092a0:	08009269 	.word	0x08009269
 80092a4:	08009269 	.word	0x08009269
 80092a8:	08009269 	.word	0x08009269
 80092ac:	080093f9 	.word	0x080093f9
 80092b0:	0800931d 	.word	0x0800931d
 80092b4:	080093db 	.word	0x080093db
 80092b8:	08009269 	.word	0x08009269
 80092bc:	08009269 	.word	0x08009269
 80092c0:	0800941b 	.word	0x0800941b
 80092c4:	08009269 	.word	0x08009269
 80092c8:	0800931d 	.word	0x0800931d
 80092cc:	08009269 	.word	0x08009269
 80092d0:	08009269 	.word	0x08009269
 80092d4:	080093e3 	.word	0x080093e3
 80092d8:	682b      	ldr	r3, [r5, #0]
 80092da:	1d1a      	adds	r2, r3, #4
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	602a      	str	r2, [r5, #0]
 80092e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092e8:	2301      	movs	r3, #1
 80092ea:	e0a3      	b.n	8009434 <_printf_i+0x1f4>
 80092ec:	6820      	ldr	r0, [r4, #0]
 80092ee:	6829      	ldr	r1, [r5, #0]
 80092f0:	0606      	lsls	r6, r0, #24
 80092f2:	f101 0304 	add.w	r3, r1, #4
 80092f6:	d50a      	bpl.n	800930e <_printf_i+0xce>
 80092f8:	680e      	ldr	r6, [r1, #0]
 80092fa:	602b      	str	r3, [r5, #0]
 80092fc:	2e00      	cmp	r6, #0
 80092fe:	da03      	bge.n	8009308 <_printf_i+0xc8>
 8009300:	232d      	movs	r3, #45	; 0x2d
 8009302:	4276      	negs	r6, r6
 8009304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009308:	485e      	ldr	r0, [pc, #376]	; (8009484 <_printf_i+0x244>)
 800930a:	230a      	movs	r3, #10
 800930c:	e019      	b.n	8009342 <_printf_i+0x102>
 800930e:	680e      	ldr	r6, [r1, #0]
 8009310:	602b      	str	r3, [r5, #0]
 8009312:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009316:	bf18      	it	ne
 8009318:	b236      	sxthne	r6, r6
 800931a:	e7ef      	b.n	80092fc <_printf_i+0xbc>
 800931c:	682b      	ldr	r3, [r5, #0]
 800931e:	6820      	ldr	r0, [r4, #0]
 8009320:	1d19      	adds	r1, r3, #4
 8009322:	6029      	str	r1, [r5, #0]
 8009324:	0601      	lsls	r1, r0, #24
 8009326:	d501      	bpl.n	800932c <_printf_i+0xec>
 8009328:	681e      	ldr	r6, [r3, #0]
 800932a:	e002      	b.n	8009332 <_printf_i+0xf2>
 800932c:	0646      	lsls	r6, r0, #25
 800932e:	d5fb      	bpl.n	8009328 <_printf_i+0xe8>
 8009330:	881e      	ldrh	r6, [r3, #0]
 8009332:	4854      	ldr	r0, [pc, #336]	; (8009484 <_printf_i+0x244>)
 8009334:	2f6f      	cmp	r7, #111	; 0x6f
 8009336:	bf0c      	ite	eq
 8009338:	2308      	moveq	r3, #8
 800933a:	230a      	movne	r3, #10
 800933c:	2100      	movs	r1, #0
 800933e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009342:	6865      	ldr	r5, [r4, #4]
 8009344:	60a5      	str	r5, [r4, #8]
 8009346:	2d00      	cmp	r5, #0
 8009348:	bfa2      	ittt	ge
 800934a:	6821      	ldrge	r1, [r4, #0]
 800934c:	f021 0104 	bicge.w	r1, r1, #4
 8009350:	6021      	strge	r1, [r4, #0]
 8009352:	b90e      	cbnz	r6, 8009358 <_printf_i+0x118>
 8009354:	2d00      	cmp	r5, #0
 8009356:	d04d      	beq.n	80093f4 <_printf_i+0x1b4>
 8009358:	4615      	mov	r5, r2
 800935a:	fbb6 f1f3 	udiv	r1, r6, r3
 800935e:	fb03 6711 	mls	r7, r3, r1, r6
 8009362:	5dc7      	ldrb	r7, [r0, r7]
 8009364:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009368:	4637      	mov	r7, r6
 800936a:	42bb      	cmp	r3, r7
 800936c:	460e      	mov	r6, r1
 800936e:	d9f4      	bls.n	800935a <_printf_i+0x11a>
 8009370:	2b08      	cmp	r3, #8
 8009372:	d10b      	bne.n	800938c <_printf_i+0x14c>
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	07de      	lsls	r6, r3, #31
 8009378:	d508      	bpl.n	800938c <_printf_i+0x14c>
 800937a:	6923      	ldr	r3, [r4, #16]
 800937c:	6861      	ldr	r1, [r4, #4]
 800937e:	4299      	cmp	r1, r3
 8009380:	bfde      	ittt	le
 8009382:	2330      	movle	r3, #48	; 0x30
 8009384:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009388:	f105 35ff 	addle.w	r5, r5, #4294967295
 800938c:	1b52      	subs	r2, r2, r5
 800938e:	6122      	str	r2, [r4, #16]
 8009390:	f8cd a000 	str.w	sl, [sp]
 8009394:	464b      	mov	r3, r9
 8009396:	aa03      	add	r2, sp, #12
 8009398:	4621      	mov	r1, r4
 800939a:	4640      	mov	r0, r8
 800939c:	f7ff fee2 	bl	8009164 <_printf_common>
 80093a0:	3001      	adds	r0, #1
 80093a2:	d14c      	bne.n	800943e <_printf_i+0x1fe>
 80093a4:	f04f 30ff 	mov.w	r0, #4294967295
 80093a8:	b004      	add	sp, #16
 80093aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ae:	4835      	ldr	r0, [pc, #212]	; (8009484 <_printf_i+0x244>)
 80093b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80093b4:	6829      	ldr	r1, [r5, #0]
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80093bc:	6029      	str	r1, [r5, #0]
 80093be:	061d      	lsls	r5, r3, #24
 80093c0:	d514      	bpl.n	80093ec <_printf_i+0x1ac>
 80093c2:	07df      	lsls	r7, r3, #31
 80093c4:	bf44      	itt	mi
 80093c6:	f043 0320 	orrmi.w	r3, r3, #32
 80093ca:	6023      	strmi	r3, [r4, #0]
 80093cc:	b91e      	cbnz	r6, 80093d6 <_printf_i+0x196>
 80093ce:	6823      	ldr	r3, [r4, #0]
 80093d0:	f023 0320 	bic.w	r3, r3, #32
 80093d4:	6023      	str	r3, [r4, #0]
 80093d6:	2310      	movs	r3, #16
 80093d8:	e7b0      	b.n	800933c <_printf_i+0xfc>
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	f043 0320 	orr.w	r3, r3, #32
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	2378      	movs	r3, #120	; 0x78
 80093e4:	4828      	ldr	r0, [pc, #160]	; (8009488 <_printf_i+0x248>)
 80093e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093ea:	e7e3      	b.n	80093b4 <_printf_i+0x174>
 80093ec:	0659      	lsls	r1, r3, #25
 80093ee:	bf48      	it	mi
 80093f0:	b2b6      	uxthmi	r6, r6
 80093f2:	e7e6      	b.n	80093c2 <_printf_i+0x182>
 80093f4:	4615      	mov	r5, r2
 80093f6:	e7bb      	b.n	8009370 <_printf_i+0x130>
 80093f8:	682b      	ldr	r3, [r5, #0]
 80093fa:	6826      	ldr	r6, [r4, #0]
 80093fc:	6961      	ldr	r1, [r4, #20]
 80093fe:	1d18      	adds	r0, r3, #4
 8009400:	6028      	str	r0, [r5, #0]
 8009402:	0635      	lsls	r5, r6, #24
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	d501      	bpl.n	800940c <_printf_i+0x1cc>
 8009408:	6019      	str	r1, [r3, #0]
 800940a:	e002      	b.n	8009412 <_printf_i+0x1d2>
 800940c:	0670      	lsls	r0, r6, #25
 800940e:	d5fb      	bpl.n	8009408 <_printf_i+0x1c8>
 8009410:	8019      	strh	r1, [r3, #0]
 8009412:	2300      	movs	r3, #0
 8009414:	6123      	str	r3, [r4, #16]
 8009416:	4615      	mov	r5, r2
 8009418:	e7ba      	b.n	8009390 <_printf_i+0x150>
 800941a:	682b      	ldr	r3, [r5, #0]
 800941c:	1d1a      	adds	r2, r3, #4
 800941e:	602a      	str	r2, [r5, #0]
 8009420:	681d      	ldr	r5, [r3, #0]
 8009422:	6862      	ldr	r2, [r4, #4]
 8009424:	2100      	movs	r1, #0
 8009426:	4628      	mov	r0, r5
 8009428:	f7f6 feda 	bl	80001e0 <memchr>
 800942c:	b108      	cbz	r0, 8009432 <_printf_i+0x1f2>
 800942e:	1b40      	subs	r0, r0, r5
 8009430:	6060      	str	r0, [r4, #4]
 8009432:	6863      	ldr	r3, [r4, #4]
 8009434:	6123      	str	r3, [r4, #16]
 8009436:	2300      	movs	r3, #0
 8009438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800943c:	e7a8      	b.n	8009390 <_printf_i+0x150>
 800943e:	6923      	ldr	r3, [r4, #16]
 8009440:	462a      	mov	r2, r5
 8009442:	4649      	mov	r1, r9
 8009444:	4640      	mov	r0, r8
 8009446:	47d0      	blx	sl
 8009448:	3001      	adds	r0, #1
 800944a:	d0ab      	beq.n	80093a4 <_printf_i+0x164>
 800944c:	6823      	ldr	r3, [r4, #0]
 800944e:	079b      	lsls	r3, r3, #30
 8009450:	d413      	bmi.n	800947a <_printf_i+0x23a>
 8009452:	68e0      	ldr	r0, [r4, #12]
 8009454:	9b03      	ldr	r3, [sp, #12]
 8009456:	4298      	cmp	r0, r3
 8009458:	bfb8      	it	lt
 800945a:	4618      	movlt	r0, r3
 800945c:	e7a4      	b.n	80093a8 <_printf_i+0x168>
 800945e:	2301      	movs	r3, #1
 8009460:	4632      	mov	r2, r6
 8009462:	4649      	mov	r1, r9
 8009464:	4640      	mov	r0, r8
 8009466:	47d0      	blx	sl
 8009468:	3001      	adds	r0, #1
 800946a:	d09b      	beq.n	80093a4 <_printf_i+0x164>
 800946c:	3501      	adds	r5, #1
 800946e:	68e3      	ldr	r3, [r4, #12]
 8009470:	9903      	ldr	r1, [sp, #12]
 8009472:	1a5b      	subs	r3, r3, r1
 8009474:	42ab      	cmp	r3, r5
 8009476:	dcf2      	bgt.n	800945e <_printf_i+0x21e>
 8009478:	e7eb      	b.n	8009452 <_printf_i+0x212>
 800947a:	2500      	movs	r5, #0
 800947c:	f104 0619 	add.w	r6, r4, #25
 8009480:	e7f5      	b.n	800946e <_printf_i+0x22e>
 8009482:	bf00      	nop
 8009484:	0800b039 	.word	0x0800b039
 8009488:	0800b04a 	.word	0x0800b04a

0800948c <_sbrk_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4d06      	ldr	r5, [pc, #24]	; (80094a8 <_sbrk_r+0x1c>)
 8009490:	2300      	movs	r3, #0
 8009492:	4604      	mov	r4, r0
 8009494:	4608      	mov	r0, r1
 8009496:	602b      	str	r3, [r5, #0]
 8009498:	f7fa fb82 	bl	8003ba0 <_sbrk>
 800949c:	1c43      	adds	r3, r0, #1
 800949e:	d102      	bne.n	80094a6 <_sbrk_r+0x1a>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	b103      	cbz	r3, 80094a6 <_sbrk_r+0x1a>
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	bd38      	pop	{r3, r4, r5, pc}
 80094a8:	20002c40 	.word	0x20002c40

080094ac <__sread>:
 80094ac:	b510      	push	{r4, lr}
 80094ae:	460c      	mov	r4, r1
 80094b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b4:	f000 fab2 	bl	8009a1c <_read_r>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	bfab      	itete	ge
 80094bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094be:	89a3      	ldrhlt	r3, [r4, #12]
 80094c0:	181b      	addge	r3, r3, r0
 80094c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094c6:	bfac      	ite	ge
 80094c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80094ca:	81a3      	strhlt	r3, [r4, #12]
 80094cc:	bd10      	pop	{r4, pc}

080094ce <__swrite>:
 80094ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d2:	461f      	mov	r7, r3
 80094d4:	898b      	ldrh	r3, [r1, #12]
 80094d6:	05db      	lsls	r3, r3, #23
 80094d8:	4605      	mov	r5, r0
 80094da:	460c      	mov	r4, r1
 80094dc:	4616      	mov	r6, r2
 80094de:	d505      	bpl.n	80094ec <__swrite+0x1e>
 80094e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e4:	2302      	movs	r3, #2
 80094e6:	2200      	movs	r2, #0
 80094e8:	f000 f9c8 	bl	800987c <_lseek_r>
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094f6:	81a3      	strh	r3, [r4, #12]
 80094f8:	4632      	mov	r2, r6
 80094fa:	463b      	mov	r3, r7
 80094fc:	4628      	mov	r0, r5
 80094fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009502:	f000 b869 	b.w	80095d8 <_write_r>

08009506 <__sseek>:
 8009506:	b510      	push	{r4, lr}
 8009508:	460c      	mov	r4, r1
 800950a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800950e:	f000 f9b5 	bl	800987c <_lseek_r>
 8009512:	1c43      	adds	r3, r0, #1
 8009514:	89a3      	ldrh	r3, [r4, #12]
 8009516:	bf15      	itete	ne
 8009518:	6560      	strne	r0, [r4, #84]	; 0x54
 800951a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800951e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009522:	81a3      	strheq	r3, [r4, #12]
 8009524:	bf18      	it	ne
 8009526:	81a3      	strhne	r3, [r4, #12]
 8009528:	bd10      	pop	{r4, pc}

0800952a <__sclose>:
 800952a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800952e:	f000 b8d3 	b.w	80096d8 <_close_r>
	...

08009534 <__swbuf_r>:
 8009534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009536:	460e      	mov	r6, r1
 8009538:	4614      	mov	r4, r2
 800953a:	4605      	mov	r5, r0
 800953c:	b118      	cbz	r0, 8009546 <__swbuf_r+0x12>
 800953e:	6983      	ldr	r3, [r0, #24]
 8009540:	b90b      	cbnz	r3, 8009546 <__swbuf_r+0x12>
 8009542:	f7ff fb81 	bl	8008c48 <__sinit>
 8009546:	4b21      	ldr	r3, [pc, #132]	; (80095cc <__swbuf_r+0x98>)
 8009548:	429c      	cmp	r4, r3
 800954a:	d12b      	bne.n	80095a4 <__swbuf_r+0x70>
 800954c:	686c      	ldr	r4, [r5, #4]
 800954e:	69a3      	ldr	r3, [r4, #24]
 8009550:	60a3      	str	r3, [r4, #8]
 8009552:	89a3      	ldrh	r3, [r4, #12]
 8009554:	071a      	lsls	r2, r3, #28
 8009556:	d52f      	bpl.n	80095b8 <__swbuf_r+0x84>
 8009558:	6923      	ldr	r3, [r4, #16]
 800955a:	b36b      	cbz	r3, 80095b8 <__swbuf_r+0x84>
 800955c:	6923      	ldr	r3, [r4, #16]
 800955e:	6820      	ldr	r0, [r4, #0]
 8009560:	1ac0      	subs	r0, r0, r3
 8009562:	6963      	ldr	r3, [r4, #20]
 8009564:	b2f6      	uxtb	r6, r6
 8009566:	4283      	cmp	r3, r0
 8009568:	4637      	mov	r7, r6
 800956a:	dc04      	bgt.n	8009576 <__swbuf_r+0x42>
 800956c:	4621      	mov	r1, r4
 800956e:	4628      	mov	r0, r5
 8009570:	f000 f948 	bl	8009804 <_fflush_r>
 8009574:	bb30      	cbnz	r0, 80095c4 <__swbuf_r+0x90>
 8009576:	68a3      	ldr	r3, [r4, #8]
 8009578:	3b01      	subs	r3, #1
 800957a:	60a3      	str	r3, [r4, #8]
 800957c:	6823      	ldr	r3, [r4, #0]
 800957e:	1c5a      	adds	r2, r3, #1
 8009580:	6022      	str	r2, [r4, #0]
 8009582:	701e      	strb	r6, [r3, #0]
 8009584:	6963      	ldr	r3, [r4, #20]
 8009586:	3001      	adds	r0, #1
 8009588:	4283      	cmp	r3, r0
 800958a:	d004      	beq.n	8009596 <__swbuf_r+0x62>
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	07db      	lsls	r3, r3, #31
 8009590:	d506      	bpl.n	80095a0 <__swbuf_r+0x6c>
 8009592:	2e0a      	cmp	r6, #10
 8009594:	d104      	bne.n	80095a0 <__swbuf_r+0x6c>
 8009596:	4621      	mov	r1, r4
 8009598:	4628      	mov	r0, r5
 800959a:	f000 f933 	bl	8009804 <_fflush_r>
 800959e:	b988      	cbnz	r0, 80095c4 <__swbuf_r+0x90>
 80095a0:	4638      	mov	r0, r7
 80095a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095a4:	4b0a      	ldr	r3, [pc, #40]	; (80095d0 <__swbuf_r+0x9c>)
 80095a6:	429c      	cmp	r4, r3
 80095a8:	d101      	bne.n	80095ae <__swbuf_r+0x7a>
 80095aa:	68ac      	ldr	r4, [r5, #8]
 80095ac:	e7cf      	b.n	800954e <__swbuf_r+0x1a>
 80095ae:	4b09      	ldr	r3, [pc, #36]	; (80095d4 <__swbuf_r+0xa0>)
 80095b0:	429c      	cmp	r4, r3
 80095b2:	bf08      	it	eq
 80095b4:	68ec      	ldreq	r4, [r5, #12]
 80095b6:	e7ca      	b.n	800954e <__swbuf_r+0x1a>
 80095b8:	4621      	mov	r1, r4
 80095ba:	4628      	mov	r0, r5
 80095bc:	f000 f81e 	bl	80095fc <__swsetup_r>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d0cb      	beq.n	800955c <__swbuf_r+0x28>
 80095c4:	f04f 37ff 	mov.w	r7, #4294967295
 80095c8:	e7ea      	b.n	80095a0 <__swbuf_r+0x6c>
 80095ca:	bf00      	nop
 80095cc:	0800afe8 	.word	0x0800afe8
 80095d0:	0800b008 	.word	0x0800b008
 80095d4:	0800afc8 	.word	0x0800afc8

080095d8 <_write_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	4d07      	ldr	r5, [pc, #28]	; (80095f8 <_write_r+0x20>)
 80095dc:	4604      	mov	r4, r0
 80095de:	4608      	mov	r0, r1
 80095e0:	4611      	mov	r1, r2
 80095e2:	2200      	movs	r2, #0
 80095e4:	602a      	str	r2, [r5, #0]
 80095e6:	461a      	mov	r2, r3
 80095e8:	f7f7 fb29 	bl	8000c3e <_write>
 80095ec:	1c43      	adds	r3, r0, #1
 80095ee:	d102      	bne.n	80095f6 <_write_r+0x1e>
 80095f0:	682b      	ldr	r3, [r5, #0]
 80095f2:	b103      	cbz	r3, 80095f6 <_write_r+0x1e>
 80095f4:	6023      	str	r3, [r4, #0]
 80095f6:	bd38      	pop	{r3, r4, r5, pc}
 80095f8:	20002c40 	.word	0x20002c40

080095fc <__swsetup_r>:
 80095fc:	4b32      	ldr	r3, [pc, #200]	; (80096c8 <__swsetup_r+0xcc>)
 80095fe:	b570      	push	{r4, r5, r6, lr}
 8009600:	681d      	ldr	r5, [r3, #0]
 8009602:	4606      	mov	r6, r0
 8009604:	460c      	mov	r4, r1
 8009606:	b125      	cbz	r5, 8009612 <__swsetup_r+0x16>
 8009608:	69ab      	ldr	r3, [r5, #24]
 800960a:	b913      	cbnz	r3, 8009612 <__swsetup_r+0x16>
 800960c:	4628      	mov	r0, r5
 800960e:	f7ff fb1b 	bl	8008c48 <__sinit>
 8009612:	4b2e      	ldr	r3, [pc, #184]	; (80096cc <__swsetup_r+0xd0>)
 8009614:	429c      	cmp	r4, r3
 8009616:	d10f      	bne.n	8009638 <__swsetup_r+0x3c>
 8009618:	686c      	ldr	r4, [r5, #4]
 800961a:	89a3      	ldrh	r3, [r4, #12]
 800961c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009620:	0719      	lsls	r1, r3, #28
 8009622:	d42c      	bmi.n	800967e <__swsetup_r+0x82>
 8009624:	06dd      	lsls	r5, r3, #27
 8009626:	d411      	bmi.n	800964c <__swsetup_r+0x50>
 8009628:	2309      	movs	r3, #9
 800962a:	6033      	str	r3, [r6, #0]
 800962c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009630:	81a3      	strh	r3, [r4, #12]
 8009632:	f04f 30ff 	mov.w	r0, #4294967295
 8009636:	e03e      	b.n	80096b6 <__swsetup_r+0xba>
 8009638:	4b25      	ldr	r3, [pc, #148]	; (80096d0 <__swsetup_r+0xd4>)
 800963a:	429c      	cmp	r4, r3
 800963c:	d101      	bne.n	8009642 <__swsetup_r+0x46>
 800963e:	68ac      	ldr	r4, [r5, #8]
 8009640:	e7eb      	b.n	800961a <__swsetup_r+0x1e>
 8009642:	4b24      	ldr	r3, [pc, #144]	; (80096d4 <__swsetup_r+0xd8>)
 8009644:	429c      	cmp	r4, r3
 8009646:	bf08      	it	eq
 8009648:	68ec      	ldreq	r4, [r5, #12]
 800964a:	e7e6      	b.n	800961a <__swsetup_r+0x1e>
 800964c:	0758      	lsls	r0, r3, #29
 800964e:	d512      	bpl.n	8009676 <__swsetup_r+0x7a>
 8009650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009652:	b141      	cbz	r1, 8009666 <__swsetup_r+0x6a>
 8009654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009658:	4299      	cmp	r1, r3
 800965a:	d002      	beq.n	8009662 <__swsetup_r+0x66>
 800965c:	4630      	mov	r0, r6
 800965e:	f000 f991 	bl	8009984 <_free_r>
 8009662:	2300      	movs	r3, #0
 8009664:	6363      	str	r3, [r4, #52]	; 0x34
 8009666:	89a3      	ldrh	r3, [r4, #12]
 8009668:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800966c:	81a3      	strh	r3, [r4, #12]
 800966e:	2300      	movs	r3, #0
 8009670:	6063      	str	r3, [r4, #4]
 8009672:	6923      	ldr	r3, [r4, #16]
 8009674:	6023      	str	r3, [r4, #0]
 8009676:	89a3      	ldrh	r3, [r4, #12]
 8009678:	f043 0308 	orr.w	r3, r3, #8
 800967c:	81a3      	strh	r3, [r4, #12]
 800967e:	6923      	ldr	r3, [r4, #16]
 8009680:	b94b      	cbnz	r3, 8009696 <__swsetup_r+0x9a>
 8009682:	89a3      	ldrh	r3, [r4, #12]
 8009684:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800968c:	d003      	beq.n	8009696 <__swsetup_r+0x9a>
 800968e:	4621      	mov	r1, r4
 8009690:	4630      	mov	r0, r6
 8009692:	f000 f92b 	bl	80098ec <__smakebuf_r>
 8009696:	89a0      	ldrh	r0, [r4, #12]
 8009698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800969c:	f010 0301 	ands.w	r3, r0, #1
 80096a0:	d00a      	beq.n	80096b8 <__swsetup_r+0xbc>
 80096a2:	2300      	movs	r3, #0
 80096a4:	60a3      	str	r3, [r4, #8]
 80096a6:	6963      	ldr	r3, [r4, #20]
 80096a8:	425b      	negs	r3, r3
 80096aa:	61a3      	str	r3, [r4, #24]
 80096ac:	6923      	ldr	r3, [r4, #16]
 80096ae:	b943      	cbnz	r3, 80096c2 <__swsetup_r+0xc6>
 80096b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096b4:	d1ba      	bne.n	800962c <__swsetup_r+0x30>
 80096b6:	bd70      	pop	{r4, r5, r6, pc}
 80096b8:	0781      	lsls	r1, r0, #30
 80096ba:	bf58      	it	pl
 80096bc:	6963      	ldrpl	r3, [r4, #20]
 80096be:	60a3      	str	r3, [r4, #8]
 80096c0:	e7f4      	b.n	80096ac <__swsetup_r+0xb0>
 80096c2:	2000      	movs	r0, #0
 80096c4:	e7f7      	b.n	80096b6 <__swsetup_r+0xba>
 80096c6:	bf00      	nop
 80096c8:	200006f4 	.word	0x200006f4
 80096cc:	0800afe8 	.word	0x0800afe8
 80096d0:	0800b008 	.word	0x0800b008
 80096d4:	0800afc8 	.word	0x0800afc8

080096d8 <_close_r>:
 80096d8:	b538      	push	{r3, r4, r5, lr}
 80096da:	4d06      	ldr	r5, [pc, #24]	; (80096f4 <_close_r+0x1c>)
 80096dc:	2300      	movs	r3, #0
 80096de:	4604      	mov	r4, r0
 80096e0:	4608      	mov	r0, r1
 80096e2:	602b      	str	r3, [r5, #0]
 80096e4:	f7fa fa27 	bl	8003b36 <_close>
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	d102      	bne.n	80096f2 <_close_r+0x1a>
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	b103      	cbz	r3, 80096f2 <_close_r+0x1a>
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	bd38      	pop	{r3, r4, r5, pc}
 80096f4:	20002c40 	.word	0x20002c40

080096f8 <__sflush_r>:
 80096f8:	898a      	ldrh	r2, [r1, #12]
 80096fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096fe:	4605      	mov	r5, r0
 8009700:	0710      	lsls	r0, r2, #28
 8009702:	460c      	mov	r4, r1
 8009704:	d458      	bmi.n	80097b8 <__sflush_r+0xc0>
 8009706:	684b      	ldr	r3, [r1, #4]
 8009708:	2b00      	cmp	r3, #0
 800970a:	dc05      	bgt.n	8009718 <__sflush_r+0x20>
 800970c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800970e:	2b00      	cmp	r3, #0
 8009710:	dc02      	bgt.n	8009718 <__sflush_r+0x20>
 8009712:	2000      	movs	r0, #0
 8009714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009718:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800971a:	2e00      	cmp	r6, #0
 800971c:	d0f9      	beq.n	8009712 <__sflush_r+0x1a>
 800971e:	2300      	movs	r3, #0
 8009720:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009724:	682f      	ldr	r7, [r5, #0]
 8009726:	602b      	str	r3, [r5, #0]
 8009728:	d032      	beq.n	8009790 <__sflush_r+0x98>
 800972a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800972c:	89a3      	ldrh	r3, [r4, #12]
 800972e:	075a      	lsls	r2, r3, #29
 8009730:	d505      	bpl.n	800973e <__sflush_r+0x46>
 8009732:	6863      	ldr	r3, [r4, #4]
 8009734:	1ac0      	subs	r0, r0, r3
 8009736:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009738:	b10b      	cbz	r3, 800973e <__sflush_r+0x46>
 800973a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800973c:	1ac0      	subs	r0, r0, r3
 800973e:	2300      	movs	r3, #0
 8009740:	4602      	mov	r2, r0
 8009742:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009744:	6a21      	ldr	r1, [r4, #32]
 8009746:	4628      	mov	r0, r5
 8009748:	47b0      	blx	r6
 800974a:	1c43      	adds	r3, r0, #1
 800974c:	89a3      	ldrh	r3, [r4, #12]
 800974e:	d106      	bne.n	800975e <__sflush_r+0x66>
 8009750:	6829      	ldr	r1, [r5, #0]
 8009752:	291d      	cmp	r1, #29
 8009754:	d82c      	bhi.n	80097b0 <__sflush_r+0xb8>
 8009756:	4a2a      	ldr	r2, [pc, #168]	; (8009800 <__sflush_r+0x108>)
 8009758:	40ca      	lsrs	r2, r1
 800975a:	07d6      	lsls	r6, r2, #31
 800975c:	d528      	bpl.n	80097b0 <__sflush_r+0xb8>
 800975e:	2200      	movs	r2, #0
 8009760:	6062      	str	r2, [r4, #4]
 8009762:	04d9      	lsls	r1, r3, #19
 8009764:	6922      	ldr	r2, [r4, #16]
 8009766:	6022      	str	r2, [r4, #0]
 8009768:	d504      	bpl.n	8009774 <__sflush_r+0x7c>
 800976a:	1c42      	adds	r2, r0, #1
 800976c:	d101      	bne.n	8009772 <__sflush_r+0x7a>
 800976e:	682b      	ldr	r3, [r5, #0]
 8009770:	b903      	cbnz	r3, 8009774 <__sflush_r+0x7c>
 8009772:	6560      	str	r0, [r4, #84]	; 0x54
 8009774:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009776:	602f      	str	r7, [r5, #0]
 8009778:	2900      	cmp	r1, #0
 800977a:	d0ca      	beq.n	8009712 <__sflush_r+0x1a>
 800977c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009780:	4299      	cmp	r1, r3
 8009782:	d002      	beq.n	800978a <__sflush_r+0x92>
 8009784:	4628      	mov	r0, r5
 8009786:	f000 f8fd 	bl	8009984 <_free_r>
 800978a:	2000      	movs	r0, #0
 800978c:	6360      	str	r0, [r4, #52]	; 0x34
 800978e:	e7c1      	b.n	8009714 <__sflush_r+0x1c>
 8009790:	6a21      	ldr	r1, [r4, #32]
 8009792:	2301      	movs	r3, #1
 8009794:	4628      	mov	r0, r5
 8009796:	47b0      	blx	r6
 8009798:	1c41      	adds	r1, r0, #1
 800979a:	d1c7      	bne.n	800972c <__sflush_r+0x34>
 800979c:	682b      	ldr	r3, [r5, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d0c4      	beq.n	800972c <__sflush_r+0x34>
 80097a2:	2b1d      	cmp	r3, #29
 80097a4:	d001      	beq.n	80097aa <__sflush_r+0xb2>
 80097a6:	2b16      	cmp	r3, #22
 80097a8:	d101      	bne.n	80097ae <__sflush_r+0xb6>
 80097aa:	602f      	str	r7, [r5, #0]
 80097ac:	e7b1      	b.n	8009712 <__sflush_r+0x1a>
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097b4:	81a3      	strh	r3, [r4, #12]
 80097b6:	e7ad      	b.n	8009714 <__sflush_r+0x1c>
 80097b8:	690f      	ldr	r7, [r1, #16]
 80097ba:	2f00      	cmp	r7, #0
 80097bc:	d0a9      	beq.n	8009712 <__sflush_r+0x1a>
 80097be:	0793      	lsls	r3, r2, #30
 80097c0:	680e      	ldr	r6, [r1, #0]
 80097c2:	bf08      	it	eq
 80097c4:	694b      	ldreq	r3, [r1, #20]
 80097c6:	600f      	str	r7, [r1, #0]
 80097c8:	bf18      	it	ne
 80097ca:	2300      	movne	r3, #0
 80097cc:	eba6 0807 	sub.w	r8, r6, r7
 80097d0:	608b      	str	r3, [r1, #8]
 80097d2:	f1b8 0f00 	cmp.w	r8, #0
 80097d6:	dd9c      	ble.n	8009712 <__sflush_r+0x1a>
 80097d8:	6a21      	ldr	r1, [r4, #32]
 80097da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097dc:	4643      	mov	r3, r8
 80097de:	463a      	mov	r2, r7
 80097e0:	4628      	mov	r0, r5
 80097e2:	47b0      	blx	r6
 80097e4:	2800      	cmp	r0, #0
 80097e6:	dc06      	bgt.n	80097f6 <__sflush_r+0xfe>
 80097e8:	89a3      	ldrh	r3, [r4, #12]
 80097ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ee:	81a3      	strh	r3, [r4, #12]
 80097f0:	f04f 30ff 	mov.w	r0, #4294967295
 80097f4:	e78e      	b.n	8009714 <__sflush_r+0x1c>
 80097f6:	4407      	add	r7, r0
 80097f8:	eba8 0800 	sub.w	r8, r8, r0
 80097fc:	e7e9      	b.n	80097d2 <__sflush_r+0xda>
 80097fe:	bf00      	nop
 8009800:	20400001 	.word	0x20400001

08009804 <_fflush_r>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	690b      	ldr	r3, [r1, #16]
 8009808:	4605      	mov	r5, r0
 800980a:	460c      	mov	r4, r1
 800980c:	b913      	cbnz	r3, 8009814 <_fflush_r+0x10>
 800980e:	2500      	movs	r5, #0
 8009810:	4628      	mov	r0, r5
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	b118      	cbz	r0, 800981e <_fflush_r+0x1a>
 8009816:	6983      	ldr	r3, [r0, #24]
 8009818:	b90b      	cbnz	r3, 800981e <_fflush_r+0x1a>
 800981a:	f7ff fa15 	bl	8008c48 <__sinit>
 800981e:	4b14      	ldr	r3, [pc, #80]	; (8009870 <_fflush_r+0x6c>)
 8009820:	429c      	cmp	r4, r3
 8009822:	d11b      	bne.n	800985c <_fflush_r+0x58>
 8009824:	686c      	ldr	r4, [r5, #4]
 8009826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d0ef      	beq.n	800980e <_fflush_r+0xa>
 800982e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009830:	07d0      	lsls	r0, r2, #31
 8009832:	d404      	bmi.n	800983e <_fflush_r+0x3a>
 8009834:	0599      	lsls	r1, r3, #22
 8009836:	d402      	bmi.n	800983e <_fflush_r+0x3a>
 8009838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800983a:	f7ff faa3 	bl	8008d84 <__retarget_lock_acquire_recursive>
 800983e:	4628      	mov	r0, r5
 8009840:	4621      	mov	r1, r4
 8009842:	f7ff ff59 	bl	80096f8 <__sflush_r>
 8009846:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009848:	07da      	lsls	r2, r3, #31
 800984a:	4605      	mov	r5, r0
 800984c:	d4e0      	bmi.n	8009810 <_fflush_r+0xc>
 800984e:	89a3      	ldrh	r3, [r4, #12]
 8009850:	059b      	lsls	r3, r3, #22
 8009852:	d4dd      	bmi.n	8009810 <_fflush_r+0xc>
 8009854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009856:	f7ff fa96 	bl	8008d86 <__retarget_lock_release_recursive>
 800985a:	e7d9      	b.n	8009810 <_fflush_r+0xc>
 800985c:	4b05      	ldr	r3, [pc, #20]	; (8009874 <_fflush_r+0x70>)
 800985e:	429c      	cmp	r4, r3
 8009860:	d101      	bne.n	8009866 <_fflush_r+0x62>
 8009862:	68ac      	ldr	r4, [r5, #8]
 8009864:	e7df      	b.n	8009826 <_fflush_r+0x22>
 8009866:	4b04      	ldr	r3, [pc, #16]	; (8009878 <_fflush_r+0x74>)
 8009868:	429c      	cmp	r4, r3
 800986a:	bf08      	it	eq
 800986c:	68ec      	ldreq	r4, [r5, #12]
 800986e:	e7da      	b.n	8009826 <_fflush_r+0x22>
 8009870:	0800afe8 	.word	0x0800afe8
 8009874:	0800b008 	.word	0x0800b008
 8009878:	0800afc8 	.word	0x0800afc8

0800987c <_lseek_r>:
 800987c:	b538      	push	{r3, r4, r5, lr}
 800987e:	4d07      	ldr	r5, [pc, #28]	; (800989c <_lseek_r+0x20>)
 8009880:	4604      	mov	r4, r0
 8009882:	4608      	mov	r0, r1
 8009884:	4611      	mov	r1, r2
 8009886:	2200      	movs	r2, #0
 8009888:	602a      	str	r2, [r5, #0]
 800988a:	461a      	mov	r2, r3
 800988c:	f7fa f97a 	bl	8003b84 <_lseek>
 8009890:	1c43      	adds	r3, r0, #1
 8009892:	d102      	bne.n	800989a <_lseek_r+0x1e>
 8009894:	682b      	ldr	r3, [r5, #0]
 8009896:	b103      	cbz	r3, 800989a <_lseek_r+0x1e>
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	bd38      	pop	{r3, r4, r5, pc}
 800989c:	20002c40 	.word	0x20002c40

080098a0 <__swhatbuf_r>:
 80098a0:	b570      	push	{r4, r5, r6, lr}
 80098a2:	460e      	mov	r6, r1
 80098a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a8:	2900      	cmp	r1, #0
 80098aa:	b096      	sub	sp, #88	; 0x58
 80098ac:	4614      	mov	r4, r2
 80098ae:	461d      	mov	r5, r3
 80098b0:	da08      	bge.n	80098c4 <__swhatbuf_r+0x24>
 80098b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	602a      	str	r2, [r5, #0]
 80098ba:	061a      	lsls	r2, r3, #24
 80098bc:	d410      	bmi.n	80098e0 <__swhatbuf_r+0x40>
 80098be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098c2:	e00e      	b.n	80098e2 <__swhatbuf_r+0x42>
 80098c4:	466a      	mov	r2, sp
 80098c6:	f000 f8bb 	bl	8009a40 <_fstat_r>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	dbf1      	blt.n	80098b2 <__swhatbuf_r+0x12>
 80098ce:	9a01      	ldr	r2, [sp, #4]
 80098d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80098d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80098d8:	425a      	negs	r2, r3
 80098da:	415a      	adcs	r2, r3
 80098dc:	602a      	str	r2, [r5, #0]
 80098de:	e7ee      	b.n	80098be <__swhatbuf_r+0x1e>
 80098e0:	2340      	movs	r3, #64	; 0x40
 80098e2:	2000      	movs	r0, #0
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	b016      	add	sp, #88	; 0x58
 80098e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080098ec <__smakebuf_r>:
 80098ec:	898b      	ldrh	r3, [r1, #12]
 80098ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098f0:	079d      	lsls	r5, r3, #30
 80098f2:	4606      	mov	r6, r0
 80098f4:	460c      	mov	r4, r1
 80098f6:	d507      	bpl.n	8009908 <__smakebuf_r+0x1c>
 80098f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098fc:	6023      	str	r3, [r4, #0]
 80098fe:	6123      	str	r3, [r4, #16]
 8009900:	2301      	movs	r3, #1
 8009902:	6163      	str	r3, [r4, #20]
 8009904:	b002      	add	sp, #8
 8009906:	bd70      	pop	{r4, r5, r6, pc}
 8009908:	ab01      	add	r3, sp, #4
 800990a:	466a      	mov	r2, sp
 800990c:	f7ff ffc8 	bl	80098a0 <__swhatbuf_r>
 8009910:	9900      	ldr	r1, [sp, #0]
 8009912:	4605      	mov	r5, r0
 8009914:	4630      	mov	r0, r6
 8009916:	f7ff fa57 	bl	8008dc8 <_malloc_r>
 800991a:	b948      	cbnz	r0, 8009930 <__smakebuf_r+0x44>
 800991c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009920:	059a      	lsls	r2, r3, #22
 8009922:	d4ef      	bmi.n	8009904 <__smakebuf_r+0x18>
 8009924:	f023 0303 	bic.w	r3, r3, #3
 8009928:	f043 0302 	orr.w	r3, r3, #2
 800992c:	81a3      	strh	r3, [r4, #12]
 800992e:	e7e3      	b.n	80098f8 <__smakebuf_r+0xc>
 8009930:	4b0d      	ldr	r3, [pc, #52]	; (8009968 <__smakebuf_r+0x7c>)
 8009932:	62b3      	str	r3, [r6, #40]	; 0x28
 8009934:	89a3      	ldrh	r3, [r4, #12]
 8009936:	6020      	str	r0, [r4, #0]
 8009938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800993c:	81a3      	strh	r3, [r4, #12]
 800993e:	9b00      	ldr	r3, [sp, #0]
 8009940:	6163      	str	r3, [r4, #20]
 8009942:	9b01      	ldr	r3, [sp, #4]
 8009944:	6120      	str	r0, [r4, #16]
 8009946:	b15b      	cbz	r3, 8009960 <__smakebuf_r+0x74>
 8009948:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800994c:	4630      	mov	r0, r6
 800994e:	f000 f889 	bl	8009a64 <_isatty_r>
 8009952:	b128      	cbz	r0, 8009960 <__smakebuf_r+0x74>
 8009954:	89a3      	ldrh	r3, [r4, #12]
 8009956:	f023 0303 	bic.w	r3, r3, #3
 800995a:	f043 0301 	orr.w	r3, r3, #1
 800995e:	81a3      	strh	r3, [r4, #12]
 8009960:	89a0      	ldrh	r0, [r4, #12]
 8009962:	4305      	orrs	r5, r0
 8009964:	81a5      	strh	r5, [r4, #12]
 8009966:	e7cd      	b.n	8009904 <__smakebuf_r+0x18>
 8009968:	08008be1 	.word	0x08008be1

0800996c <__malloc_lock>:
 800996c:	4801      	ldr	r0, [pc, #4]	; (8009974 <__malloc_lock+0x8>)
 800996e:	f7ff ba09 	b.w	8008d84 <__retarget_lock_acquire_recursive>
 8009972:	bf00      	nop
 8009974:	20002c34 	.word	0x20002c34

08009978 <__malloc_unlock>:
 8009978:	4801      	ldr	r0, [pc, #4]	; (8009980 <__malloc_unlock+0x8>)
 800997a:	f7ff ba04 	b.w	8008d86 <__retarget_lock_release_recursive>
 800997e:	bf00      	nop
 8009980:	20002c34 	.word	0x20002c34

08009984 <_free_r>:
 8009984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009986:	2900      	cmp	r1, #0
 8009988:	d044      	beq.n	8009a14 <_free_r+0x90>
 800998a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800998e:	9001      	str	r0, [sp, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	f1a1 0404 	sub.w	r4, r1, #4
 8009996:	bfb8      	it	lt
 8009998:	18e4      	addlt	r4, r4, r3
 800999a:	f7ff ffe7 	bl	800996c <__malloc_lock>
 800999e:	4a1e      	ldr	r2, [pc, #120]	; (8009a18 <_free_r+0x94>)
 80099a0:	9801      	ldr	r0, [sp, #4]
 80099a2:	6813      	ldr	r3, [r2, #0]
 80099a4:	b933      	cbnz	r3, 80099b4 <_free_r+0x30>
 80099a6:	6063      	str	r3, [r4, #4]
 80099a8:	6014      	str	r4, [r2, #0]
 80099aa:	b003      	add	sp, #12
 80099ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099b0:	f7ff bfe2 	b.w	8009978 <__malloc_unlock>
 80099b4:	42a3      	cmp	r3, r4
 80099b6:	d908      	bls.n	80099ca <_free_r+0x46>
 80099b8:	6825      	ldr	r5, [r4, #0]
 80099ba:	1961      	adds	r1, r4, r5
 80099bc:	428b      	cmp	r3, r1
 80099be:	bf01      	itttt	eq
 80099c0:	6819      	ldreq	r1, [r3, #0]
 80099c2:	685b      	ldreq	r3, [r3, #4]
 80099c4:	1949      	addeq	r1, r1, r5
 80099c6:	6021      	streq	r1, [r4, #0]
 80099c8:	e7ed      	b.n	80099a6 <_free_r+0x22>
 80099ca:	461a      	mov	r2, r3
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	b10b      	cbz	r3, 80099d4 <_free_r+0x50>
 80099d0:	42a3      	cmp	r3, r4
 80099d2:	d9fa      	bls.n	80099ca <_free_r+0x46>
 80099d4:	6811      	ldr	r1, [r2, #0]
 80099d6:	1855      	adds	r5, r2, r1
 80099d8:	42a5      	cmp	r5, r4
 80099da:	d10b      	bne.n	80099f4 <_free_r+0x70>
 80099dc:	6824      	ldr	r4, [r4, #0]
 80099de:	4421      	add	r1, r4
 80099e0:	1854      	adds	r4, r2, r1
 80099e2:	42a3      	cmp	r3, r4
 80099e4:	6011      	str	r1, [r2, #0]
 80099e6:	d1e0      	bne.n	80099aa <_free_r+0x26>
 80099e8:	681c      	ldr	r4, [r3, #0]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	6053      	str	r3, [r2, #4]
 80099ee:	4421      	add	r1, r4
 80099f0:	6011      	str	r1, [r2, #0]
 80099f2:	e7da      	b.n	80099aa <_free_r+0x26>
 80099f4:	d902      	bls.n	80099fc <_free_r+0x78>
 80099f6:	230c      	movs	r3, #12
 80099f8:	6003      	str	r3, [r0, #0]
 80099fa:	e7d6      	b.n	80099aa <_free_r+0x26>
 80099fc:	6825      	ldr	r5, [r4, #0]
 80099fe:	1961      	adds	r1, r4, r5
 8009a00:	428b      	cmp	r3, r1
 8009a02:	bf04      	itt	eq
 8009a04:	6819      	ldreq	r1, [r3, #0]
 8009a06:	685b      	ldreq	r3, [r3, #4]
 8009a08:	6063      	str	r3, [r4, #4]
 8009a0a:	bf04      	itt	eq
 8009a0c:	1949      	addeq	r1, r1, r5
 8009a0e:	6021      	streq	r1, [r4, #0]
 8009a10:	6054      	str	r4, [r2, #4]
 8009a12:	e7ca      	b.n	80099aa <_free_r+0x26>
 8009a14:	b003      	add	sp, #12
 8009a16:	bd30      	pop	{r4, r5, pc}
 8009a18:	20002c38 	.word	0x20002c38

08009a1c <_read_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	4d07      	ldr	r5, [pc, #28]	; (8009a3c <_read_r+0x20>)
 8009a20:	4604      	mov	r4, r0
 8009a22:	4608      	mov	r0, r1
 8009a24:	4611      	mov	r1, r2
 8009a26:	2200      	movs	r2, #0
 8009a28:	602a      	str	r2, [r5, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	f7fa f866 	bl	8003afc <_read>
 8009a30:	1c43      	adds	r3, r0, #1
 8009a32:	d102      	bne.n	8009a3a <_read_r+0x1e>
 8009a34:	682b      	ldr	r3, [r5, #0]
 8009a36:	b103      	cbz	r3, 8009a3a <_read_r+0x1e>
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	bd38      	pop	{r3, r4, r5, pc}
 8009a3c:	20002c40 	.word	0x20002c40

08009a40 <_fstat_r>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	4d07      	ldr	r5, [pc, #28]	; (8009a60 <_fstat_r+0x20>)
 8009a44:	2300      	movs	r3, #0
 8009a46:	4604      	mov	r4, r0
 8009a48:	4608      	mov	r0, r1
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	602b      	str	r3, [r5, #0]
 8009a4e:	f7fa f87e 	bl	8003b4e <_fstat>
 8009a52:	1c43      	adds	r3, r0, #1
 8009a54:	d102      	bne.n	8009a5c <_fstat_r+0x1c>
 8009a56:	682b      	ldr	r3, [r5, #0]
 8009a58:	b103      	cbz	r3, 8009a5c <_fstat_r+0x1c>
 8009a5a:	6023      	str	r3, [r4, #0]
 8009a5c:	bd38      	pop	{r3, r4, r5, pc}
 8009a5e:	bf00      	nop
 8009a60:	20002c40 	.word	0x20002c40

08009a64 <_isatty_r>:
 8009a64:	b538      	push	{r3, r4, r5, lr}
 8009a66:	4d06      	ldr	r5, [pc, #24]	; (8009a80 <_isatty_r+0x1c>)
 8009a68:	2300      	movs	r3, #0
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	4608      	mov	r0, r1
 8009a6e:	602b      	str	r3, [r5, #0]
 8009a70:	f7fa f87d 	bl	8003b6e <_isatty>
 8009a74:	1c43      	adds	r3, r0, #1
 8009a76:	d102      	bne.n	8009a7e <_isatty_r+0x1a>
 8009a78:	682b      	ldr	r3, [r5, #0]
 8009a7a:	b103      	cbz	r3, 8009a7e <_isatty_r+0x1a>
 8009a7c:	6023      	str	r3, [r4, #0]
 8009a7e:	bd38      	pop	{r3, r4, r5, pc}
 8009a80:	20002c40 	.word	0x20002c40

08009a84 <_init>:
 8009a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a86:	bf00      	nop
 8009a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a8a:	bc08      	pop	{r3}
 8009a8c:	469e      	mov	lr, r3
 8009a8e:	4770      	bx	lr

08009a90 <_fini>:
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	bf00      	nop
 8009a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a96:	bc08      	pop	{r3}
 8009a98:	469e      	mov	lr, r3
 8009a9a:	4770      	bx	lr
