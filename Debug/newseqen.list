
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000974c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001588  080098e4  080098e4  000198e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae6c  0800ae6c  00020800  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae6c  0800ae6c  0001ae6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae74  0800ae74  00020800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae74  0800ae74  0001ae74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae78  0800ae78  0001ae78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000800  20000000  0800ae7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000358c  20000800  0800b67c  00020800  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003d8c  0800b67c  00023d8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020800  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133b7  00000000  00000000  00020830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a9  00000000  00000000  00033be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00036090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  000371b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018813  00000000  00000000  000381c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d02  00000000  00000000  000509db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e93e  00000000  00000000  000656dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  0010401b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a4c  00000000  00000000  001040dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  00108b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000800 	.word	0x20000800
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080098cc 	.word	0x080098cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000804 	.word	0x20000804
 80001d4:	080098cc 	.word	0x080098cc

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295
 8000854:	f04f 30ff 	movne.w	r0, #4294967295
 8000858:	f000 b974 	b.w	8000b44 <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9d08      	ldr	r5, [sp, #32]
 800087a:	4604      	mov	r4, r0
 800087c:	468e      	mov	lr, r1
 800087e:	2b00      	cmp	r3, #0
 8000880:	d14d      	bne.n	800091e <__udivmoddi4+0xaa>
 8000882:	428a      	cmp	r2, r1
 8000884:	4694      	mov	ip, r2
 8000886:	d969      	bls.n	800095c <__udivmoddi4+0xe8>
 8000888:	fab2 f282 	clz	r2, r2
 800088c:	b152      	cbz	r2, 80008a4 <__udivmoddi4+0x30>
 800088e:	fa01 f302 	lsl.w	r3, r1, r2
 8000892:	f1c2 0120 	rsb	r1, r2, #32
 8000896:	fa20 f101 	lsr.w	r1, r0, r1
 800089a:	fa0c fc02 	lsl.w	ip, ip, r2
 800089e:	ea41 0e03 	orr.w	lr, r1, r3
 80008a2:	4094      	lsls	r4, r2
 80008a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a8:	0c21      	lsrs	r1, r4, #16
 80008aa:	fbbe f6f8 	udiv	r6, lr, r8
 80008ae:	fa1f f78c 	uxth.w	r7, ip
 80008b2:	fb08 e316 	mls	r3, r8, r6, lr
 80008b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ba:	fb06 f107 	mul.w	r1, r6, r7
 80008be:	4299      	cmp	r1, r3
 80008c0:	d90a      	bls.n	80008d8 <__udivmoddi4+0x64>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ca:	f080 811f 	bcs.w	8000b0c <__udivmoddi4+0x298>
 80008ce:	4299      	cmp	r1, r3
 80008d0:	f240 811c 	bls.w	8000b0c <__udivmoddi4+0x298>
 80008d4:	3e02      	subs	r6, #2
 80008d6:	4463      	add	r3, ip
 80008d8:	1a5b      	subs	r3, r3, r1
 80008da:	b2a4      	uxth	r4, r4
 80008dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008e0:	fb08 3310 	mls	r3, r8, r0, r3
 80008e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008e8:	fb00 f707 	mul.w	r7, r0, r7
 80008ec:	42a7      	cmp	r7, r4
 80008ee:	d90a      	bls.n	8000906 <__udivmoddi4+0x92>
 80008f0:	eb1c 0404 	adds.w	r4, ip, r4
 80008f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008f8:	f080 810a 	bcs.w	8000b10 <__udivmoddi4+0x29c>
 80008fc:	42a7      	cmp	r7, r4
 80008fe:	f240 8107 	bls.w	8000b10 <__udivmoddi4+0x29c>
 8000902:	4464      	add	r4, ip
 8000904:	3802      	subs	r0, #2
 8000906:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800090a:	1be4      	subs	r4, r4, r7
 800090c:	2600      	movs	r6, #0
 800090e:	b11d      	cbz	r5, 8000918 <__udivmoddi4+0xa4>
 8000910:	40d4      	lsrs	r4, r2
 8000912:	2300      	movs	r3, #0
 8000914:	e9c5 4300 	strd	r4, r3, [r5]
 8000918:	4631      	mov	r1, r6
 800091a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091e:	428b      	cmp	r3, r1
 8000920:	d909      	bls.n	8000936 <__udivmoddi4+0xc2>
 8000922:	2d00      	cmp	r5, #0
 8000924:	f000 80ef 	beq.w	8000b06 <__udivmoddi4+0x292>
 8000928:	2600      	movs	r6, #0
 800092a:	e9c5 0100 	strd	r0, r1, [r5]
 800092e:	4630      	mov	r0, r6
 8000930:	4631      	mov	r1, r6
 8000932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000936:	fab3 f683 	clz	r6, r3
 800093a:	2e00      	cmp	r6, #0
 800093c:	d14a      	bne.n	80009d4 <__udivmoddi4+0x160>
 800093e:	428b      	cmp	r3, r1
 8000940:	d302      	bcc.n	8000948 <__udivmoddi4+0xd4>
 8000942:	4282      	cmp	r2, r0
 8000944:	f200 80f9 	bhi.w	8000b3a <__udivmoddi4+0x2c6>
 8000948:	1a84      	subs	r4, r0, r2
 800094a:	eb61 0303 	sbc.w	r3, r1, r3
 800094e:	2001      	movs	r0, #1
 8000950:	469e      	mov	lr, r3
 8000952:	2d00      	cmp	r5, #0
 8000954:	d0e0      	beq.n	8000918 <__udivmoddi4+0xa4>
 8000956:	e9c5 4e00 	strd	r4, lr, [r5]
 800095a:	e7dd      	b.n	8000918 <__udivmoddi4+0xa4>
 800095c:	b902      	cbnz	r2, 8000960 <__udivmoddi4+0xec>
 800095e:	deff      	udf	#255	; 0xff
 8000960:	fab2 f282 	clz	r2, r2
 8000964:	2a00      	cmp	r2, #0
 8000966:	f040 8092 	bne.w	8000a8e <__udivmoddi4+0x21a>
 800096a:	eba1 010c 	sub.w	r1, r1, ip
 800096e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	2601      	movs	r6, #1
 8000978:	0c20      	lsrs	r0, r4, #16
 800097a:	fbb1 f3f7 	udiv	r3, r1, r7
 800097e:	fb07 1113 	mls	r1, r7, r3, r1
 8000982:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000986:	fb0e f003 	mul.w	r0, lr, r3
 800098a:	4288      	cmp	r0, r1
 800098c:	d908      	bls.n	80009a0 <__udivmoddi4+0x12c>
 800098e:	eb1c 0101 	adds.w	r1, ip, r1
 8000992:	f103 38ff 	add.w	r8, r3, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0x12a>
 8000998:	4288      	cmp	r0, r1
 800099a:	f200 80cb 	bhi.w	8000b34 <__udivmoddi4+0x2c0>
 800099e:	4643      	mov	r3, r8
 80009a0:	1a09      	subs	r1, r1, r0
 80009a2:	b2a4      	uxth	r4, r4
 80009a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009a8:	fb07 1110 	mls	r1, r7, r0, r1
 80009ac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009b0:	fb0e fe00 	mul.w	lr, lr, r0
 80009b4:	45a6      	cmp	lr, r4
 80009b6:	d908      	bls.n	80009ca <__udivmoddi4+0x156>
 80009b8:	eb1c 0404 	adds.w	r4, ip, r4
 80009bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80009c0:	d202      	bcs.n	80009c8 <__udivmoddi4+0x154>
 80009c2:	45a6      	cmp	lr, r4
 80009c4:	f200 80bb 	bhi.w	8000b3e <__udivmoddi4+0x2ca>
 80009c8:	4608      	mov	r0, r1
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009d2:	e79c      	b.n	800090e <__udivmoddi4+0x9a>
 80009d4:	f1c6 0720 	rsb	r7, r6, #32
 80009d8:	40b3      	lsls	r3, r6
 80009da:	fa22 fc07 	lsr.w	ip, r2, r7
 80009de:	ea4c 0c03 	orr.w	ip, ip, r3
 80009e2:	fa20 f407 	lsr.w	r4, r0, r7
 80009e6:	fa01 f306 	lsl.w	r3, r1, r6
 80009ea:	431c      	orrs	r4, r3
 80009ec:	40f9      	lsrs	r1, r7
 80009ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009f2:	fa00 f306 	lsl.w	r3, r0, r6
 80009f6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009fa:	0c20      	lsrs	r0, r4, #16
 80009fc:	fa1f fe8c 	uxth.w	lr, ip
 8000a00:	fb09 1118 	mls	r1, r9, r8, r1
 8000a04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a08:	fb08 f00e 	mul.w	r0, r8, lr
 8000a0c:	4288      	cmp	r0, r1
 8000a0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a12:	d90b      	bls.n	8000a2c <__udivmoddi4+0x1b8>
 8000a14:	eb1c 0101 	adds.w	r1, ip, r1
 8000a18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a1c:	f080 8088 	bcs.w	8000b30 <__udivmoddi4+0x2bc>
 8000a20:	4288      	cmp	r0, r1
 8000a22:	f240 8085 	bls.w	8000b30 <__udivmoddi4+0x2bc>
 8000a26:	f1a8 0802 	sub.w	r8, r8, #2
 8000a2a:	4461      	add	r1, ip
 8000a2c:	1a09      	subs	r1, r1, r0
 8000a2e:	b2a4      	uxth	r4, r4
 8000a30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a34:	fb09 1110 	mls	r1, r9, r0, r1
 8000a38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a40:	458e      	cmp	lr, r1
 8000a42:	d908      	bls.n	8000a56 <__udivmoddi4+0x1e2>
 8000a44:	eb1c 0101 	adds.w	r1, ip, r1
 8000a48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a4c:	d26c      	bcs.n	8000b28 <__udivmoddi4+0x2b4>
 8000a4e:	458e      	cmp	lr, r1
 8000a50:	d96a      	bls.n	8000b28 <__udivmoddi4+0x2b4>
 8000a52:	3802      	subs	r0, #2
 8000a54:	4461      	add	r1, ip
 8000a56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a5e:	eba1 010e 	sub.w	r1, r1, lr
 8000a62:	42a1      	cmp	r1, r4
 8000a64:	46c8      	mov	r8, r9
 8000a66:	46a6      	mov	lr, r4
 8000a68:	d356      	bcc.n	8000b18 <__udivmoddi4+0x2a4>
 8000a6a:	d053      	beq.n	8000b14 <__udivmoddi4+0x2a0>
 8000a6c:	b15d      	cbz	r5, 8000a86 <__udivmoddi4+0x212>
 8000a6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a72:	eb61 010e 	sbc.w	r1, r1, lr
 8000a76:	fa01 f707 	lsl.w	r7, r1, r7
 8000a7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a7e:	40f1      	lsrs	r1, r6
 8000a80:	431f      	orrs	r7, r3
 8000a82:	e9c5 7100 	strd	r7, r1, [r5]
 8000a86:	2600      	movs	r6, #0
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	f1c2 0320 	rsb	r3, r2, #32
 8000a92:	40d8      	lsrs	r0, r3
 8000a94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a98:	fa21 f303 	lsr.w	r3, r1, r3
 8000a9c:	4091      	lsls	r1, r2
 8000a9e:	4301      	orrs	r1, r0
 8000aa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000aac:	fb07 3610 	mls	r6, r7, r0, r3
 8000ab0:	0c0b      	lsrs	r3, r1, #16
 8000ab2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ab6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aba:	429e      	cmp	r6, r3
 8000abc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x260>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aca:	d22f      	bcs.n	8000b2c <__udivmoddi4+0x2b8>
 8000acc:	429e      	cmp	r6, r3
 8000ace:	d92d      	bls.n	8000b2c <__udivmoddi4+0x2b8>
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	4463      	add	r3, ip
 8000ad4:	1b9b      	subs	r3, r3, r6
 8000ad6:	b289      	uxth	r1, r1
 8000ad8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000adc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ae0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ae4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ae8:	428b      	cmp	r3, r1
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x28a>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000af4:	d216      	bcs.n	8000b24 <__udivmoddi4+0x2b0>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d914      	bls.n	8000b24 <__udivmoddi4+0x2b0>
 8000afa:	3e02      	subs	r6, #2
 8000afc:	4461      	add	r1, ip
 8000afe:	1ac9      	subs	r1, r1, r3
 8000b00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b04:	e738      	b.n	8000978 <__udivmoddi4+0x104>
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e705      	b.n	8000918 <__udivmoddi4+0xa4>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e3      	b.n	80008d8 <__udivmoddi4+0x64>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6f8      	b.n	8000906 <__udivmoddi4+0x92>
 8000b14:	454b      	cmp	r3, r9
 8000b16:	d2a9      	bcs.n	8000a6c <__udivmoddi4+0x1f8>
 8000b18:	ebb9 0802 	subs.w	r8, r9, r2
 8000b1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7a3      	b.n	8000a6c <__udivmoddi4+0x1f8>
 8000b24:	4646      	mov	r6, r8
 8000b26:	e7ea      	b.n	8000afe <__udivmoddi4+0x28a>
 8000b28:	4620      	mov	r0, r4
 8000b2a:	e794      	b.n	8000a56 <__udivmoddi4+0x1e2>
 8000b2c:	4640      	mov	r0, r8
 8000b2e:	e7d1      	b.n	8000ad4 <__udivmoddi4+0x260>
 8000b30:	46d0      	mov	r8, sl
 8000b32:	e77b      	b.n	8000a2c <__udivmoddi4+0x1b8>
 8000b34:	3b02      	subs	r3, #2
 8000b36:	4461      	add	r1, ip
 8000b38:	e732      	b.n	80009a0 <__udivmoddi4+0x12c>
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	e709      	b.n	8000952 <__udivmoddi4+0xde>
 8000b3e:	4464      	add	r4, ip
 8000b40:	3802      	subs	r0, #2
 8000b42:	e742      	b.n	80009ca <__udivmoddi4+0x156>

08000b44 <__aeabi_idiv0>:
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <menu_vars>:
void menu_vars(void){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0

	char menu_string[8];   // incoming string holder (single) , dont forget to get the
	char menu_string2[8];
	uint8_t var_index=menu_index_in;    //set var index ie  LFO[1].rate
 8000b4e:	4b9c      	ldr	r3, [pc, #624]	; (8000dc0 <menu_vars+0x278>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	74fb      	strb	r3, [r7, #19]
	//uint8_t menu_count; // point to search result for var
	uint8_t *menu_vars_var1=NULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
	menu_countr =0;
 8000b58:	4b9a      	ldr	r3, [pc, #616]	; (8000dc4 <menu_vars+0x27c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
	memcpy(menu_string, menu_vars_in, 8);    //copy 8 strings from incoing
 8000b5e:	4a9a      	ldr	r2, [pc, #616]	; (8000dc8 <menu_vars+0x280>)
 8000b60:	f107 0308 	add.w	r3, r7, #8
 8000b64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b68:	e883 0003 	stmia.w	r3, {r0, r1}


	for (i = 0; i < 27; i++) {      // find menu location
 8000b6c:	4b97      	ldr	r3, [pc, #604]	; (8000dcc <menu_vars+0x284>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	801a      	strh	r2, [r3, #0]
 8000b72:	e025      	b.n	8000bc0 <menu_vars+0x78>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000b74:	4b95      	ldr	r3, [pc, #596]	; (8000dcc <menu_vars+0x284>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b95      	ldr	r3, [pc, #596]	; (8000dd0 <menu_vars+0x288>)
 8000b7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b80:	463b      	mov	r3, r7
 8000b82:	6810      	ldr	r0, [r2, #0]
 8000b84:	6851      	ldr	r1, [r2, #4]
 8000b86:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000b88:	4639      	mov	r1, r7
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	2208      	movs	r2, #8
 8000b90:	4618      	mov	r0, r3
 8000b92:	f008 fe87 	bl	80098a4 <strncmp>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d10b      	bne.n	8000bb4 <menu_vars+0x6c>
			menu_countr = i;
 8000b9c:	4b8b      	ldr	r3, [pc, #556]	; (8000dcc <menu_vars+0x284>)
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b88      	ldr	r3, [pc, #544]	; (8000dc4 <menu_vars+0x27c>)
 8000ba4:	701a      	strb	r2, [r3, #0]
			menu_vars_menu=menu_titles_final+menu_countr; // copy pointer, ok
 8000ba6:	4b87      	ldr	r3, [pc, #540]	; (8000dc4 <menu_vars+0x27c>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4a88      	ldr	r2, [pc, #544]	; (8000dd0 <menu_vars+0x288>)
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a88      	ldr	r2, [pc, #544]	; (8000dd4 <menu_vars+0x28c>)
 8000bb2:	6013      	str	r3, [r2, #0]
	for (i = 0; i < 27; i++) {      // find menu location
 8000bb4:	4b85      	ldr	r3, [pc, #532]	; (8000dcc <menu_vars+0x284>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	4b83      	ldr	r3, [pc, #524]	; (8000dcc <menu_vars+0x284>)
 8000bbe:	801a      	strh	r2, [r3, #0]
 8000bc0:	4b82      	ldr	r3, [pc, #520]	; (8000dcc <menu_vars+0x284>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	2b1a      	cmp	r3, #26
 8000bc6:	d9d5      	bls.n	8000b74 <menu_vars+0x2c>


		}
	}
	switch(menu_countr){
 8000bc8:	4b7e      	ldr	r3, [pc, #504]	; (8000dc4 <menu_vars+0x27c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b1a      	cmp	r3, #26
 8000bce:	f200 80ed 	bhi.w	8000dac <menu_vars+0x264>
 8000bd2:	a201      	add	r2, pc, #4	; (adr r2, 8000bd8 <menu_vars+0x90>)
 8000bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd8:	08000c45 	.word	0x08000c45
 8000bdc:	08000c4b 	.word	0x08000c4b
 8000be0:	08000c5b 	.word	0x08000c5b
 8000be4:	08000c6d 	.word	0x08000c6d
 8000be8:	08000c7f 	.word	0x08000c7f
 8000bec:	08000c91 	.word	0x08000c91
 8000bf0:	08000ca3 	.word	0x08000ca3
 8000bf4:	08000ca9 	.word	0x08000ca9
 8000bf8:	08000cbb 	.word	0x08000cbb
 8000bfc:	08000ccf 	.word	0x08000ccf
 8000c00:	08000ce3 	.word	0x08000ce3
 8000c04:	08000cf7 	.word	0x08000cf7
 8000c08:	08000cfd 	.word	0x08000cfd
 8000c0c:	08000d09 	.word	0x08000d09
 8000c10:	08000d17 	.word	0x08000d17
 8000c14:	08000d25 	.word	0x08000d25
 8000c18:	08000d33 	.word	0x08000d33
 8000c1c:	08000d41 	.word	0x08000d41
 8000c20:	08000d4f 	.word	0x08000d4f
 8000c24:	08000d5d 	.word	0x08000d5d
 8000c28:	08000d6b 	.word	0x08000d6b
 8000c2c:	08000d7b 	.word	0x08000d7b
 8000c30:	08000d81 	.word	0x08000d81
 8000c34:	08000d87 	.word	0x08000d87
 8000c38:	08000d8d 	.word	0x08000d8d
 8000c3c:	08000d99 	.word	0x08000d99
 8000c40:	08000da7 	.word	0x08000da7
	case 0:     menu_vars_var1= NULL; break;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	e0b3      	b.n	8000db2 <menu_vars+0x26a>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000c4a:	7cfb      	ldrb	r3, [r7, #19]
 8000c4c:	221a      	movs	r2, #26
 8000c4e:	fb02 f303 	mul.w	r3, r2, r3
 8000c52:	4a61      	ldr	r2, [pc, #388]	; (8000dd8 <menu_vars+0x290>)
 8000c54:	4413      	add	r3, r2
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	e0ab      	b.n	8000db2 <menu_vars+0x26a>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000c5a:	7cfb      	ldrb	r3, [r7, #19]
 8000c5c:	221a      	movs	r2, #26
 8000c5e:	fb02 f303 	mul.w	r3, r2, r3
 8000c62:	4a5d      	ldr	r2, [pc, #372]	; (8000dd8 <menu_vars+0x290>)
 8000c64:	4413      	add	r3, r2
 8000c66:	3301      	adds	r3, #1
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	e0a2      	b.n	8000db2 <menu_vars+0x26a>
	case 3:     menu_vars_var1= &LFO[var_index].gain    ; break;
 8000c6c:	7cfb      	ldrb	r3, [r7, #19]
 8000c6e:	221a      	movs	r2, #26
 8000c70:	fb02 f303 	mul.w	r3, r2, r3
 8000c74:	4a58      	ldr	r2, [pc, #352]	; (8000dd8 <menu_vars+0x290>)
 8000c76:	4413      	add	r3, r2
 8000c78:	3302      	adds	r3, #2
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e099      	b.n	8000db2 <menu_vars+0x26a>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000c7e:	7cfb      	ldrb	r3, [r7, #19]
 8000c80:	221a      	movs	r2, #26
 8000c82:	fb02 f303 	mul.w	r3, r2, r3
 8000c86:	4a54      	ldr	r2, [pc, #336]	; (8000dd8 <menu_vars+0x290>)
 8000c88:	4413      	add	r3, r2
 8000c8a:	3303      	adds	r3, #3
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	e090      	b.n	8000db2 <menu_vars+0x26a>
	case 5:     menu_vars_var1= &LFO[var_index].target    ; break;
 8000c90:	7cfb      	ldrb	r3, [r7, #19]
 8000c92:	221a      	movs	r2, #26
 8000c94:	fb02 f303 	mul.w	r3, r2, r3
 8000c98:	4a4f      	ldr	r2, [pc, #316]	; (8000dd8 <menu_vars+0x290>)
 8000c9a:	4413      	add	r3, r2
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	e087      	b.n	8000db2 <menu_vars+0x26a>
	case 6:     menu_vars_var1= NULL   ; break;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	e084      	b.n	8000db2 <menu_vars+0x26a>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000ca8:	7cfb      	ldrb	r3, [r7, #19]
 8000caa:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000cae:	fb02 f303 	mul.w	r3, r2, r3
 8000cb2:	4a4a      	ldr	r2, [pc, #296]	; (8000ddc <menu_vars+0x294>)
 8000cb4:	4413      	add	r3, r2
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	e07b      	b.n	8000db2 <menu_vars+0x26a>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000cba:	7cfb      	ldrb	r3, [r7, #19]
 8000cbc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000cc0:	fb02 f303 	mul.w	r3, r2, r3
 8000cc4:	4a45      	ldr	r2, [pc, #276]	; (8000ddc <menu_vars+0x294>)
 8000cc6:	4413      	add	r3, r2
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	e071      	b.n	8000db2 <menu_vars+0x26a>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000cce:	7cfb      	ldrb	r3, [r7, #19]
 8000cd0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000cd4:	fb02 f303 	mul.w	r3, r2, r3
 8000cd8:	4a40      	ldr	r2, [pc, #256]	; (8000ddc <menu_vars+0x294>)
 8000cda:	4413      	add	r3, r2
 8000cdc:	3302      	adds	r3, #2
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	e067      	b.n	8000db2 <menu_vars+0x26a>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000ce2:	7cfb      	ldrb	r3, [r7, #19]
 8000ce4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000ce8:	fb02 f303 	mul.w	r3, r2, r3
 8000cec:	4a3b      	ldr	r2, [pc, #236]	; (8000ddc <menu_vars+0x294>)
 8000cee:	4413      	add	r3, r2
 8000cf0:	3303      	adds	r3, #3
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	e05d      	b.n	8000db2 <menu_vars+0x26a>
	case 11:     menu_vars_var1= NULL  ; break;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	e05a      	b.n	8000db2 <menu_vars+0x26a>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000cfc:	7cfb      	ldrb	r3, [r7, #19]
 8000cfe:	011b      	lsls	r3, r3, #4
 8000d00:	4a37      	ldr	r2, [pc, #220]	; (8000de0 <menu_vars+0x298>)
 8000d02:	4413      	add	r3, r2
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	e054      	b.n	8000db2 <menu_vars+0x26a>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000d08:	7cfb      	ldrb	r3, [r7, #19]
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	4a34      	ldr	r2, [pc, #208]	; (8000de0 <menu_vars+0x298>)
 8000d0e:	4413      	add	r3, r2
 8000d10:	3301      	adds	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	e04d      	b.n	8000db2 <menu_vars+0x26a>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000d16:	7cfb      	ldrb	r3, [r7, #19]
 8000d18:	011b      	lsls	r3, r3, #4
 8000d1a:	4a31      	ldr	r2, [pc, #196]	; (8000de0 <menu_vars+0x298>)
 8000d1c:	4413      	add	r3, r2
 8000d1e:	3302      	adds	r3, #2
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	e046      	b.n	8000db2 <menu_vars+0x26a>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000d24:	7cfb      	ldrb	r3, [r7, #19]
 8000d26:	011b      	lsls	r3, r3, #4
 8000d28:	4a2d      	ldr	r2, [pc, #180]	; (8000de0 <menu_vars+0x298>)
 8000d2a:	4413      	add	r3, r2
 8000d2c:	3303      	adds	r3, #3
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	e03f      	b.n	8000db2 <menu_vars+0x26a>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000d32:	7cfb      	ldrb	r3, [r7, #19]
 8000d34:	011b      	lsls	r3, r3, #4
 8000d36:	4a2a      	ldr	r2, [pc, #168]	; (8000de0 <menu_vars+0x298>)
 8000d38:	4413      	add	r3, r2
 8000d3a:	3304      	adds	r3, #4
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	e038      	b.n	8000db2 <menu_vars+0x26a>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000d40:	7cfb      	ldrb	r3, [r7, #19]
 8000d42:	011b      	lsls	r3, r3, #4
 8000d44:	4a26      	ldr	r2, [pc, #152]	; (8000de0 <menu_vars+0x298>)
 8000d46:	4413      	add	r3, r2
 8000d48:	3305      	adds	r3, #5
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	e031      	b.n	8000db2 <menu_vars+0x26a>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000d4e:	7cfb      	ldrb	r3, [r7, #19]
 8000d50:	011b      	lsls	r3, r3, #4
 8000d52:	4a23      	ldr	r2, [pc, #140]	; (8000de0 <menu_vars+0x298>)
 8000d54:	4413      	add	r3, r2
 8000d56:	3306      	adds	r3, #6
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	e02a      	b.n	8000db2 <menu_vars+0x26a>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break;
 8000d5c:	7cfb      	ldrb	r3, [r7, #19]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	3308      	adds	r3, #8
 8000d62:	4a1f      	ldr	r2, [pc, #124]	; (8000de0 <menu_vars+0x298>)
 8000d64:	4413      	add	r3, r2
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	e023      	b.n	8000db2 <menu_vars+0x26a>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000d6a:	7cfb      	ldrb	r3, [r7, #19]
 8000d6c:	011b      	lsls	r3, r3, #4
 8000d6e:	3308      	adds	r3, #8
 8000d70:	4a1b      	ldr	r2, [pc, #108]	; (8000de0 <menu_vars+0x298>)
 8000d72:	4413      	add	r3, r2
 8000d74:	3302      	adds	r3, #2
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	e01b      	b.n	8000db2 <menu_vars+0x26a>
	case 21:     menu_vars_var1= NULL   ; break;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	e018      	b.n	8000db2 <menu_vars+0x26a>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <menu_vars+0x29c>)
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	e015      	b.n	8000db2 <menu_vars+0x26a>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <menu_vars+0x2a0>)
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	e012      	b.n	8000db2 <menu_vars+0x26a>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000d8c:	7cfb      	ldrb	r3, [r7, #19]
 8000d8e:	4a15      	ldr	r2, [pc, #84]	; (8000de4 <menu_vars+0x29c>)
 8000d90:	4413      	add	r3, r2
 8000d92:	3302      	adds	r3, #2
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	e00c      	b.n	8000db2 <menu_vars+0x26a>
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000d98:	7cfb      	ldrb	r3, [r7, #19]
 8000d9a:	3310      	adds	r3, #16
 8000d9c:	4a11      	ldr	r2, [pc, #68]	; (8000de4 <menu_vars+0x29c>)
 8000d9e:	4413      	add	r3, r2
 8000da0:	3303      	adds	r3, #3
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	e005      	b.n	8000db2 <menu_vars+0x26a>
	case 26:     menu_vars_var1= &seq.loop    ; break;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <menu_vars+0x2a4>)
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	e002      	b.n	8000db2 <menu_vars+0x26a>
	default :		menu_vars_var1= NULL   ; break;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	bf00      	nop

	}

	menu_vars_var=menu_vars_var1;    // copy back ,ok
 8000db2:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <menu_vars+0x2a8>)
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	6013      	str	r3, [r2, #0]
	//menu_vars_var= menu_vars_var1;




}
 8000db8:	bf00      	nop
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20003b00 	.word	0x20003b00
 8000dc4:	20003b01 	.word	0x20003b01
 8000dc8:	20003af8 	.word	0x20003af8
 8000dcc:	20000cc4 	.word	0x20000cc4
 8000dd0:	2000024c 	.word	0x2000024c
 8000dd4:	20003af0 	.word	0x20003af0
 8000dd8:	20002e30 	.word	0x20002e30
 8000ddc:	20002f34 	.word	0x20002f34
 8000de0:	200039c0 	.word	0x200039c0
 8000de4:	20003a30 	.word	0x20003a30
 8000de8:	20003a31 	.word	0x20003a31
 8000dec:	20003a54 	.word	0x20003a54
 8000df0:	20003af4 	.word	0x20003af4

08000df4 <menu_parser>:



void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
	char menu_string[8];   // incoming string holder (single)
	char menu_string2[8];


	// strcpy(menu_string2,menu_out1[i]);
	uint8_t menu_searchsize=sizeof(default_menu)-16;   // this should fairly big always , leave gap at the end
 8000dfa:	23ab      	movs	r3, #171	; 0xab
 8000dfc:	75fb      	strb	r3, [r7, #23]


	if (string_search>menu_searchsize) string_search=0;    // check if bigger than search area
 8000dfe:	4b93      	ldr	r3, [pc, #588]	; (800104c <menu_parser+0x258>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	7dfa      	ldrb	r2, [r7, #23]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d202      	bcs.n	8000e0e <menu_parser+0x1a>
 8000e08:	4b90      	ldr	r3, [pc, #576]	; (800104c <menu_parser+0x258>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]


	if ((!string_search) && menu_counter) {string_search=0; menu_title_count=0;
 8000e0e:	4b8f      	ldr	r3, [pc, #572]	; (800104c <menu_parser+0x258>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10a      	bne.n	8000e2c <menu_parser+0x38>
 8000e16:	4b8e      	ldr	r3, [pc, #568]	; (8001050 <menu_parser+0x25c>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d006      	beq.n	8000e2c <menu_parser+0x38>
 8000e1e:	4b8b      	ldr	r3, [pc, #556]	; (800104c <menu_parser+0x258>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
 8000e24:	4b8b      	ldr	r3, [pc, #556]	; (8001054 <menu_parser+0x260>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
	return;} // hold counter until menu writing was reset ,ok
 8000e2a:	e13d      	b.n	80010a8 <menu_parser+0x2b4>

	memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings
 8000e2c:	4b87      	ldr	r3, [pc, #540]	; (800104c <menu_parser+0x258>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b89      	ldr	r3, [pc, #548]	; (8001058 <menu_parser+0x264>)
 8000e34:	441a      	add	r2, r3
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	6810      	ldr	r0, [r2, #0]
 8000e3c:	6851      	ldr	r1, [r2, #4]
 8000e3e:	c303      	stmia	r3!, {r0, r1}
	////////////////////////////
	for (i=0;i<5;i++){    	// test a single menu entry  , for now only the first record
 8000e40:	4b86      	ldr	r3, [pc, #536]	; (800105c <menu_parser+0x268>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	801a      	strh	r2, [r3, #0]
 8000e46:	e03b      	b.n	8000ec0 <menu_parser+0xcc>

		memcpy(menu_string2,menu_titles4[i],8);
 8000e48:	4b84      	ldr	r3, [pc, #528]	; (800105c <menu_parser+0x268>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b84      	ldr	r3, [pc, #528]	; (8001060 <menu_parser+0x26c>)
 8000e50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	6810      	ldr	r0, [r2, #0]
 8000e58:	6851      	ldr	r1, [r2, #4]
 8000e5a:	c303      	stmia	r3!, {r0, r1}
		if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 8000e5c:	1d39      	adds	r1, r7, #4
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	2208      	movs	r2, #8
 8000e64:	4618      	mov	r0, r3
 8000e66:	f008 fd1d 	bl	80098a4 <strncmp>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d121      	bne.n	8000eb4 <menu_parser+0xc0>
		{menu_title_lut[menu_title_count]=(string_search<<8)+menu_counter;   // string record  and disp position counter
 8000e70:	4b76      	ldr	r3, [pc, #472]	; (800104c <menu_parser+0x258>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	021b      	lsls	r3, r3, #8
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	4b75      	ldr	r3, [pc, #468]	; (8001050 <menu_parser+0x25c>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	4974      	ldr	r1, [pc, #464]	; (8001054 <menu_parser+0x260>)
 8000e82:	7809      	ldrb	r1, [r1, #0]
 8000e84:	4413      	add	r3, r2
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	4b76      	ldr	r3, [pc, #472]	; (8001064 <menu_parser+0x270>)
 8000e8a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		menu_title_count++;
 8000e8e:	4b71      	ldr	r3, [pc, #452]	; (8001054 <menu_parser+0x260>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b6f      	ldr	r3, [pc, #444]	; (8001054 <menu_parser+0x260>)
 8000e98:	701a      	strb	r2, [r3, #0]
		menu_counter++;
 8000e9a:	4b6d      	ldr	r3, [pc, #436]	; (8001050 <menu_parser+0x25c>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4b6b      	ldr	r3, [pc, #428]	; (8001050 <menu_parser+0x25c>)
 8000ea4:	701a      	strb	r2, [r3, #0]
			string_search=string_search+8;     // advance search position
 8000ea6:	4b69      	ldr	r3, [pc, #420]	; (800104c <menu_parser+0x258>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	3308      	adds	r3, #8
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b67      	ldr	r3, [pc, #412]	; (800104c <menu_parser+0x258>)
 8000eb0:	701a      	strb	r2, [r3, #0]

			//menu_var_lut[menu_title_count]=&seq;
			//memcpy(menu_var_lut[menu_title_count],&seq+i,1);


			return;}
 8000eb2:	e0f9      	b.n	80010a8 <menu_parser+0x2b4>
	for (i=0;i<5;i++){    	// test a single menu entry  , for now only the first record
 8000eb4:	4b69      	ldr	r3, [pc, #420]	; (800105c <menu_parser+0x268>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	4b67      	ldr	r3, [pc, #412]	; (800105c <menu_parser+0x268>)
 8000ebe:	801a      	strh	r2, [r3, #0]
 8000ec0:	4b66      	ldr	r3, [pc, #408]	; (800105c <menu_parser+0x268>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	2b04      	cmp	r3, #4
 8000ec6:	d9bf      	bls.n	8000e48 <menu_parser+0x54>

	}
	for (i=0;i<4;i++){    	// test a single menu entry
 8000ec8:	4b64      	ldr	r3, [pc, #400]	; (800105c <menu_parser+0x268>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	801a      	strh	r2, [r3, #0]
 8000ece:	e03b      	b.n	8000f48 <menu_parser+0x154>


		memcpy(menu_string2,menu_titles2[i],8);
 8000ed0:	4b62      	ldr	r3, [pc, #392]	; (800105c <menu_parser+0x268>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b64      	ldr	r3, [pc, #400]	; (8001068 <menu_parser+0x274>)
 8000ed8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	6810      	ldr	r0, [r2, #0]
 8000ee0:	6851      	ldr	r1, [r2, #4]
 8000ee2:	c303      	stmia	r3!, {r0, r1}
				if  ((strncmp(menu_string,menu_string2,8))==0) 									// compare and if true pass var,adsr
 8000ee4:	1d39      	adds	r1, r7, #4
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	2208      	movs	r2, #8
 8000eec:	4618      	mov	r0, r3
 8000eee:	f008 fcd9 	bl	80098a4 <strncmp>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d121      	bne.n	8000f3c <menu_parser+0x148>
		{menu_title_lut[menu_title_count]=(string_search<<8)+menu_counter;   // string record  and disp position counter
 8000ef8:	4b54      	ldr	r3, [pc, #336]	; (800104c <menu_parser+0x258>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	4b53      	ldr	r3, [pc, #332]	; (8001050 <menu_parser+0x25c>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	4952      	ldr	r1, [pc, #328]	; (8001054 <menu_parser+0x260>)
 8000f0a:	7809      	ldrb	r1, [r1, #0]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b54      	ldr	r3, [pc, #336]	; (8001064 <menu_parser+0x270>)
 8000f12:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		menu_title_count++;
 8000f16:	4b4f      	ldr	r3, [pc, #316]	; (8001054 <menu_parser+0x260>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4b4d      	ldr	r3, [pc, #308]	; (8001054 <menu_parser+0x260>)
 8000f20:	701a      	strb	r2, [r3, #0]
		menu_counter++;
 8000f22:	4b4b      	ldr	r3, [pc, #300]	; (8001050 <menu_parser+0x25c>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	3301      	adds	r3, #1
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4b49      	ldr	r3, [pc, #292]	; (8001050 <menu_parser+0x25c>)
 8000f2c:	701a      	strb	r2, [r3, #0]
		string_search=string_search+8;     // advance search position
 8000f2e:	4b47      	ldr	r3, [pc, #284]	; (800104c <menu_parser+0x258>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	3308      	adds	r3, #8
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b45      	ldr	r3, [pc, #276]	; (800104c <menu_parser+0x258>)
 8000f38:	701a      	strb	r2, [r3, #0]
		//menu_var_lut[menu_title_count]=(&ADSR+i);
		//memcpy(menu_var_lut[menu_title_count],&ADSR+i,1);

		return;}
 8000f3a:	e0b5      	b.n	80010a8 <menu_parser+0x2b4>
	for (i=0;i<4;i++){    	// test a single menu entry
 8000f3c:	4b47      	ldr	r3, [pc, #284]	; (800105c <menu_parser+0x268>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	3301      	adds	r3, #1
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	4b45      	ldr	r3, [pc, #276]	; (800105c <menu_parser+0x268>)
 8000f46:	801a      	strh	r2, [r3, #0]
 8000f48:	4b44      	ldr	r3, [pc, #272]	; (800105c <menu_parser+0x268>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	d9bf      	bls.n	8000ed0 <menu_parser+0xdc>

	}
	for (i=0;i<5;i++){    	// test a single menu entry
 8000f50:	4b42      	ldr	r3, [pc, #264]	; (800105c <menu_parser+0x268>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	801a      	strh	r2, [r3, #0]
 8000f56:	e03b      	b.n	8000fd0 <menu_parser+0x1dc>
		memcpy(menu_string2,menu_titles[i],8);
 8000f58:	4b40      	ldr	r3, [pc, #256]	; (800105c <menu_parser+0x268>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b43      	ldr	r3, [pc, #268]	; (800106c <menu_parser+0x278>)
 8000f60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	6810      	ldr	r0, [r2, #0]
 8000f68:	6851      	ldr	r1, [r2, #4]
 8000f6a:	c303      	stmia	r3!, {r0, r1}
				if  ((strncmp(menu_string,menu_string2,8))==0) 									// compare and if true pass var,lfo
 8000f6c:	1d39      	adds	r1, r7, #4
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	2208      	movs	r2, #8
 8000f74:	4618      	mov	r0, r3
 8000f76:	f008 fc95 	bl	80098a4 <strncmp>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d121      	bne.n	8000fc4 <menu_parser+0x1d0>
		{menu_title_lut[menu_title_count]=(string_search<<8)+menu_counter;   // string record  and disp position counter
 8000f80:	4b32      	ldr	r3, [pc, #200]	; (800104c <menu_parser+0x258>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	4b31      	ldr	r3, [pc, #196]	; (8001050 <menu_parser+0x25c>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	4930      	ldr	r1, [pc, #192]	; (8001054 <menu_parser+0x260>)
 8000f92:	7809      	ldrb	r1, [r1, #0]
 8000f94:	4413      	add	r3, r2
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	4b32      	ldr	r3, [pc, #200]	; (8001064 <menu_parser+0x270>)
 8000f9a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		menu_counter++;
 8000f9e:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <menu_parser+0x25c>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <menu_parser+0x25c>)
 8000fa8:	701a      	strb	r2, [r3, #0]
		menu_title_count++;
 8000faa:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <menu_parser+0x260>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b28      	ldr	r3, [pc, #160]	; (8001054 <menu_parser+0x260>)
 8000fb4:	701a      	strb	r2, [r3, #0]
					string_search=string_search+8;     // advance search position
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <menu_parser+0x258>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	3308      	adds	r3, #8
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b23      	ldr	r3, [pc, #140]	; (800104c <menu_parser+0x258>)
 8000fc0:	701a      	strb	r2, [r3, #0]
					//menu_var_lut[menu_title_count]=(&LFO+i);
					//memcpy(menu_var_lut[menu_title_count],&LFO+i,1);

					return;}
 8000fc2:	e071      	b.n	80010a8 <menu_parser+0x2b4>
	for (i=0;i<5;i++){    	// test a single menu entry
 8000fc4:	4b25      	ldr	r3, [pc, #148]	; (800105c <menu_parser+0x268>)
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	4b23      	ldr	r3, [pc, #140]	; (800105c <menu_parser+0x268>)
 8000fce:	801a      	strh	r2, [r3, #0]
 8000fd0:	4b22      	ldr	r3, [pc, #136]	; (800105c <menu_parser+0x268>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	d9bf      	bls.n	8000f58 <menu_parser+0x164>

	}
	for (i=0;i<5;i++){    	// test a single menu entry
 8000fd8:	4b20      	ldr	r3, [pc, #128]	; (800105c <menu_parser+0x268>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	801a      	strh	r2, [r3, #0]
 8000fde:	e04f      	b.n	8001080 <menu_parser+0x28c>
		memcpy(menu_string2,menu_titles3[i],8);
 8000fe0:	4b1e      	ldr	r3, [pc, #120]	; (800105c <menu_parser+0x268>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b22      	ldr	r3, [pc, #136]	; (8001070 <menu_parser+0x27c>)
 8000fe8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	6810      	ldr	r0, [r2, #0]
 8000ff0:	6851      	ldr	r1, [r2, #4]
 8000ff2:	c303      	stmia	r3!, {r0, r1}
				if  ((strncmp(menu_string,menu_string2,8))==0) 										// compare and if true pass var, note
 8000ff4:	1d39      	adds	r1, r7, #4
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f008 fc51 	bl	80098a4 <strncmp>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d135      	bne.n	8001074 <menu_parser+0x280>
		{menu_title_lut[menu_title_count]=(string_search<<8)+menu_counter;   // string record  and disp position counter
 8001008:	4b10      	ldr	r3, [pc, #64]	; (800104c <menu_parser+0x258>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b29b      	uxth	r3, r3
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b29a      	uxth	r2, r3
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <menu_parser+0x25c>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b29b      	uxth	r3, r3
 8001018:	490e      	ldr	r1, [pc, #56]	; (8001054 <menu_parser+0x260>)
 800101a:	7809      	ldrb	r1, [r1, #0]
 800101c:	4413      	add	r3, r2
 800101e:	b29a      	uxth	r2, r3
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <menu_parser+0x270>)
 8001022:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		//menu_var_lut[menu_title_count]=&note+i;
		//memcpy(menu_var_lut[menu_title_count],&note+i,1);

		menu_counter++;
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <menu_parser+0x25c>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	3301      	adds	r3, #1
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <menu_parser+0x25c>)
 8001030:	701a      	strb	r2, [r3, #0]
		menu_title_count++;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <menu_parser+0x260>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <menu_parser+0x260>)
 800103c:	701a      	strb	r2, [r3, #0]
					string_search=string_search+8;     // advance search position
 800103e:	4b03      	ldr	r3, [pc, #12]	; (800104c <menu_parser+0x258>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	3308      	adds	r3, #8
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4b01      	ldr	r3, [pc, #4]	; (800104c <menu_parser+0x258>)
 8001048:	701a      	strb	r2, [r3, #0]
					return; }
 800104a:	e02d      	b.n	80010a8 <menu_parser+0x2b4>
 800104c:	20003a65 	.word	0x20003a65
 8001050:	20003a68 	.word	0x20003a68
 8001054:	20003aec 	.word	0x20003aec
 8001058:	200002b8 	.word	0x200002b8
 800105c:	20000cc4 	.word	0x20000cc4
 8001060:	20000234 	.word	0x20000234
 8001064:	20003a6c 	.word	0x20003a6c
 8001068:	200001f8 	.word	0x200001f8
 800106c:	200001e0 	.word	0x200001e0
 8001070:	2000020c 	.word	0x2000020c
	for (i=0;i<5;i++){    	// test a single menu entry
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <menu_parser+0x2bc>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	b29a      	uxth	r2, r3
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <menu_parser+0x2bc>)
 800107e:	801a      	strh	r2, [r3, #0]
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <menu_parser+0x2bc>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	2b04      	cmp	r3, #4
 8001086:	d9ab      	bls.n	8000fe0 <menu_parser+0x1ec>

	}
	string_value=255;    // no result use 255 for now
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <menu_parser+0x2c0>)
 800108a:	22ff      	movs	r2, #255	; 0xff
 800108c:	801a      	strh	r2, [r3, #0]
	//menu_title_lut[menu_title_count]=255;   // record for feedback line
			//menu_title_count++;

	menu_counter++;  // count empty spaces or fill characters
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <menu_parser+0x2c4>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <menu_parser+0x2c4>)
 8001098:	701a      	strb	r2, [r3, #0]
	string_search++;
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <menu_parser+0x2c8>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	3301      	adds	r3, #1
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <menu_parser+0x2c8>)
 80010a4:	701a      	strb	r2, [r3, #0]
	return;
 80010a6:	bf00      	nop




}
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000cc4 	.word	0x20000cc4
 80010b4:	20003a66 	.word	0x20003a66
 80010b8:	20003a68 	.word	0x20003a68
 80010bc:	20003a65 	.word	0x20003a65

080010c0 <SPI_command>:





void SPI_command(void){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <SPI_command+0x68>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d128      	bne.n	8001120 <SPI_command+0x60>
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <SPI_command+0x6c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d124      	bne.n	8001120 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <SPI_command+0x70>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	b29b      	uxth	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <SPI_command+0x2a>
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <SPI_command+0x74>)
 80010e4:	22f8      	movs	r2, #248	; 0xf8
 80010e6:	701a      	strb	r2, [r3, #0]
 80010e8:	e002      	b.n	80010f0 <SPI_command+0x30>
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <SPI_command+0x74>)
 80010ec:	22fa      	movs	r2, #250	; 0xfa
 80010ee:	701a      	strb	r2, [r3, #0]
/*		bsrr_long=spi_byte<<16; // top byte for command 24-16, then 2 bytes of data 16-0
		spi_hold=(spi_hold&255);
		bsrr_long=bsrr_long+((spi_hold>>4)<<12); // 4 bits to top
		bsrr_long=bsrr_long+((spi_hold&15)<<4);	// 4 bits to top
*/
	spi_store[0]=spi_byte&255;
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <SPI_command+0x74>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <SPI_command+0x70>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	b2db      	uxtb	r3, r3
 8001102:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <SPI_command+0x70>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	011b      	lsls	r3, r3, #4
 800110a:	b2db      	uxtb	r3, r3
 800110c:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
		HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 5);  // working good
 800110e:	4639      	mov	r1, r7
 8001110:	2305      	movs	r3, #5
 8001112:	2203      	movs	r2, #3
 8001114:	4808      	ldr	r0, [pc, #32]	; (8001138 <SPI_command+0x78>)
 8001116:	f006 fd64 	bl	8007be2 <HAL_SPI_Transmit>


//HAL_Delay(10);
	spi_enable=1; }
 800111a:	4b03      	ldr	r3, [pc, #12]	; (8001128 <SPI_command+0x68>)
 800111c:	2201      	movs	r2, #1
 800111e:	801a      	strh	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2000211e 	.word	0x2000211e
 800112c:	20002124 	.word	0x20002124
 8001130:	20002122 	.word	0x20002122
 8001134:	20002120 	.word	0x20002120
 8001138:	20003c58 	.word	0x20003c58

0800113c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	time_proc++;
 8001144:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	b29a      	uxth	r2, r3
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800114e:	801a      	strh	r2, [r3, #0]
	//if (((sample_point==511) || (sample_point==1022)) && (bank_write)  ) error_count++;

	if (sample_point==511) {bank_write=1; sample_pointD=0;  }
 8001150:	4b22      	ldr	r3, [pc, #136]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	b29b      	uxth	r3, r3
 8001156:	f240 12ff 	movw	r2, #511	; 0x1ff
 800115a:	4293      	cmp	r3, r2
 800115c:	d105      	bne.n	800116a <HAL_TIM_PeriodElapsedCallback+0x2e>
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001160:	2201      	movs	r2, #1
 8001162:	801a      	strh	r2, [r3, #0]
 8001164:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001166:	2200      	movs	r2, #0
 8001168:	801a      	strh	r2, [r3, #0]
	if (sample_point==1022) {bank_write=1; sample_pointD=512; }
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	b29b      	uxth	r3, r3
 8001170:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001174:	4293      	cmp	r3, r2
 8001176:	d106      	bne.n	8001186 <HAL_TIM_PeriodElapsedCallback+0x4a>
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800117a:	2201      	movs	r2, #1
 800117c:	801a      	strh	r2, [r3, #0]
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001184:	801a      	strh	r2, [r3, #0]
	sample_point=sample_point & 1023;// this is 1
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001190:	b29a      	uxth	r2, r3
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001194:	801a      	strh	r2, [r3, #0]
	play_hold=play_sample[sample_point]; // this is 2
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80011a0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80011a6:	801a      	strh	r2, [r3, #0]





	if(TIM3==htim->Instance)			// nothing here is consistent
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d10b      	bne.n	80011ca <HAL_TIM_PeriodElapsedCallback+0x8e>
{


TIM3->CCR3=play_hold ;  // keep readin sample storage
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80011ba:	63da      	str	r2, [r3, #60]	; 0x3c


//if (bs_count==255
	//	)  { bs_count=0; menu_store=(menuSelect>>2); } else bs_count++; // menu select, higher count just spills over  159 chamge to 128 2*64
//}
sample_point++; //this needs to be here or too fast and wrong sample rate
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	3301      	adds	r3, #1
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80011c8:	801a      	strh	r2, [r3, #0]

}

}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20002e2c 	.word	0x20002e2c
 80011dc:	200014ca 	.word	0x200014ca
 80011e0:	200001b2 	.word	0x200001b2
 80011e4:	200014ce 	.word	0x200014ce
 80011e8:	20000cc8 	.word	0x20000cc8
 80011ec:	200014cc 	.word	0x200014cc
 80011f0:	40000400 	.word	0x40000400

080011f4 <analoginputloopb>:
						}  // get value this this on e is blank
		//HAL_ADC_Stop(&hadc1);
//for (i=0;i<3;i++){ adc_values[i]= (adc_values[i]>>8) &15; } // reduce value to 4 bit
}
*/
void analoginputloopb(void){  //works fine still
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0


	//menuSelect = (7 - (adc_values[0] >>2))<<1;		//x *16  main menu select
	//menuSelect = (15 - (adc_values[0] >>1));		//x *7  main menu select
	//menuSelectX=(31 - adc_values[1])>>1;  // Y select inside page
	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 80011f8:	4b6d      	ldr	r3, [pc, #436]	; (80013b0 <analoginputloopb+0x1bc>)
 80011fa:	889b      	ldrh	r3, [r3, #4]
 80011fc:	091b      	lsrs	r3, r3, #4
 80011fe:	b29b      	uxth	r3, r3
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b6c      	ldr	r3, [pc, #432]	; (80013b4 <analoginputloopb+0x1c0>)
 8001204:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 8001206:	4b6a      	ldr	r3, [pc, #424]	; (80013b0 <analoginputloopb+0x1bc>)
 8001208:	889b      	ldrh	r3, [r3, #4]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f003 030f 	and.w	r3, r3, #15
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b69      	ldr	r3, [pc, #420]	; (80013b8 <analoginputloopb+0x1c4>)
 8001214:	701a      	strb	r2, [r3, #0]
//	else menu_holder=disp_lut [(menuSelect)	] [15-adc_values[1]];  // grab disp lut value for pointer if valid then write for now

		//menu_holder=disp_lut [(menuSelect)	] [(15-adc_values[1])];   // value from disp lut
		//menu_holder=disp_lut [menuSelect] [menuSelectX];   // value from disp lut

		cursor_menu[1]=0;
 8001216:	4b66      	ldr	r3, [pc, #408]	; (80013b0 <analoginputloopb+0x1bc>)
 8001218:	2200      	movs	r2, #0
 800121a:	805a      	strh	r2, [r3, #2]
		//cursor_menu[2]=cursor_lookup[enc2_dir];
		// cursor_menu[2]=cursor_lookup[enc2_dir]; //needed for correct line sequence ,obsolete
		cursor_menu[2]=enc2_dir;
 800121c:	4b67      	ldr	r3, [pc, #412]	; (80013bc <analoginputloopb+0x1c8>)
 800121e:	881a      	ldrh	r2, [r3, #0]
 8001220:	4b63      	ldr	r3, [pc, #396]	; (80013b0 <analoginputloopb+0x1bc>)
 8001222:	809a      	strh	r2, [r3, #4]

		//if (menu_holder>127)	counterVarB=menu_holder-128; //  points to actual potvalues location from dsip_lut when value is higher than 127 , works ok problem with menu display
		//if (menu_holder>511)	counterVarB=menu_holder-384;		// text pointer , max potvalue address is 142 , fix second page issue later


		enc_dir=potSource[counterVarB];
 8001224:	4b66      	ldr	r3, [pc, #408]	; (80013c0 <analoginputloopb+0x1cc>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b66      	ldr	r3, [pc, #408]	; (80013c4 <analoginputloopb+0x1d0>)
 800122c:	5c9b      	ldrb	r3, [r3, r2]
 800122e:	b21a      	sxth	r2, r3
 8001230:	4b65      	ldr	r3, [pc, #404]	; (80013c8 <analoginputloopb+0x1d4>)
 8001232:	801a      	strh	r2, [r3, #0]


	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 8001234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	085b      	lsrs	r3, r3, #1
 800123c:	b29a      	uxth	r2, r3
 800123e:	4b63      	ldr	r3, [pc, #396]	; (80013cc <analoginputloopb+0x1d8>)
 8001240:	801a      	strh	r2, [r3, #0]
	enc2_temp=(TIM4->CNT)>>1;  // read counter tim4
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <analoginputloopb+0x1dc>)
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	085b      	lsrs	r3, r3, #1
 8001248:	b29a      	uxth	r2, r3
 800124a:	4b62      	ldr	r3, [pc, #392]	; (80013d4 <analoginputloopb+0x1e0>)
 800124c:	801a      	strh	r2, [r3, #0]
	enc2_temp=enc2_temp&127; // fix overflow ? , dont need a lot because of skip
 800124e:	4b61      	ldr	r3, [pc, #388]	; (80013d4 <analoginputloopb+0x1e0>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001256:	b29a      	uxth	r2, r3
 8001258:	4b5e      	ldr	r3, [pc, #376]	; (80013d4 <analoginputloopb+0x1e0>)
 800125a:	801a      	strh	r2, [r3, #0]

	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite
 800125c:	4b5b      	ldr	r3, [pc, #364]	; (80013cc <analoginputloopb+0x1d8>)
 800125e:	881a      	ldrh	r2, [r3, #0]
 8001260:	4b5d      	ldr	r3, [pc, #372]	; (80013d8 <analoginputloopb+0x1e4>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	d910      	bls.n	800128a <analoginputloopb+0x96>
 8001268:	4b57      	ldr	r3, [pc, #348]	; (80013c8 <analoginputloopb+0x1d4>)
 800126a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b52      	ldr	r3, [pc, #328]	; (80013bc <analoginputloopb+0x1c8>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	b29b      	uxth	r3, r3
 8001278:	4619      	mov	r1, r3
 800127a:	4b58      	ldr	r3, [pc, #352]	; (80013dc <analoginputloopb+0x1e8>)
 800127c:	5c5b      	ldrb	r3, [r3, r1]
 800127e:	b29b      	uxth	r3, r3
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	b29b      	uxth	r3, r3
 8001284:	b21a      	sxth	r2, r3
 8001286:	4b50      	ldr	r3, [pc, #320]	; (80013c8 <analoginputloopb+0x1d4>)
 8001288:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite , step multiplier
 800128a:	4b50      	ldr	r3, [pc, #320]	; (80013cc <analoginputloopb+0x1d8>)
 800128c:	881a      	ldrh	r2, [r3, #0]
 800128e:	4b52      	ldr	r3, [pc, #328]	; (80013d8 <analoginputloopb+0x1e4>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	429a      	cmp	r2, r3
 8001294:	d210      	bcs.n	80012b8 <analoginputloopb+0xc4>
 8001296:	4b49      	ldr	r3, [pc, #292]	; (80013bc <analoginputloopb+0x1c8>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	091b      	lsrs	r3, r3, #4
 800129c:	b29b      	uxth	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	4b4e      	ldr	r3, [pc, #312]	; (80013dc <analoginputloopb+0x1e8>)
 80012a2:	5c9b      	ldrb	r3, [r3, r2]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	4b48      	ldr	r3, [pc, #288]	; (80013c8 <analoginputloopb+0x1d4>)
 80012a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	4413      	add	r3, r2
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	4b44      	ldr	r3, [pc, #272]	; (80013c8 <analoginputloopb+0x1d4>)
 80012b6:	801a      	strh	r2, [r3, #0]

 // enc2_temp=enc2_lut[enc2_temp];  // force alternative values for skip  , seems to work ok , disable temporarily



  if (enc2_temp>383) enc2_temp=383;  //mem overflow somewhere
 80012b8:	4b46      	ldr	r3, [pc, #280]	; (80013d4 <analoginputloopb+0x1e0>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80012c0:	d303      	bcc.n	80012ca <analoginputloopb+0xd6>
 80012c2:	4b44      	ldr	r3, [pc, #272]	; (80013d4 <analoginputloopb+0x1e0>)
 80012c4:	f240 127f 	movw	r2, #383	; 0x17f
 80012c8:	801a      	strh	r2, [r3, #0]
	if (enc_dir>160) enc_dir=160;
 80012ca:	4b3f      	ldr	r3, [pc, #252]	; (80013c8 <analoginputloopb+0x1d4>)
 80012cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d0:	2ba0      	cmp	r3, #160	; 0xa0
 80012d2:	dd02      	ble.n	80012da <analoginputloopb+0xe6>
 80012d4:	4b3c      	ldr	r3, [pc, #240]	; (80013c8 <analoginputloopb+0x1d4>)
 80012d6:	22a0      	movs	r2, #160	; 0xa0
 80012d8:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 80012da:	4b3b      	ldr	r3, [pc, #236]	; (80013c8 <analoginputloopb+0x1d4>)
 80012dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	da02      	bge.n	80012ea <analoginputloopb+0xf6>
 80012e4:	4b38      	ldr	r3, [pc, #224]	; (80013c8 <analoginputloopb+0x1d4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	801a      	strh	r2, [r3, #0]
			//if (enc2_temp<16) enc_dir=(enc_dir<<2) & 127; // faster for notes on first row

			potSource[counterVarB]=enc_dir;       // enter data into potsource
 80012ea:	4b37      	ldr	r3, [pc, #220]	; (80013c8 <analoginputloopb+0x1d4>)
 80012ec:	f9b3 1000 	ldrsh.w	r1, [r3]
 80012f0:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <analoginputloopb+0x1cc>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	b2c9      	uxtb	r1, r1
 80012f8:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <analoginputloopb+0x1d0>)
 80012fa:	5499      	strb	r1, [r3, r2]
					enc_dir=0;
 80012fc:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <analoginputloopb+0x1d4>)
 80012fe:	2200      	movs	r2, #0
 8001300:	801a      	strh	r2, [r3, #0]
			enc_tempB=enc_temp;
 8001302:	4b32      	ldr	r3, [pc, #200]	; (80013cc <analoginputloopb+0x1d8>)
 8001304:	881a      	ldrh	r2, [r3, #0]
 8001306:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <analoginputloopb+0x1e4>)
 8001308:	801a      	strh	r2, [r3, #0]
			//if (enc2_dir>383) enc2_dir=383;

			//if  (enc2_temp>enc2_tempB)	 enc2_dir++;   // start settle timer , will do 2 times per turn always
			//if (enc2_temp<enc2_tempB)	 enc2_dir--;
			enc2_dir=enc2_temp; //temp to try source data
 800130a:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <analoginputloopb+0x1e0>)
 800130c:	881a      	ldrh	r2, [r3, #0]
 800130e:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <analoginputloopb+0x1c8>)
 8001310:	801a      	strh	r2, [r3, #0]
		//	if (enc2_dir>127) menu_page[1]=127; else if (enc2_dir>255)   menu_page[1]=255;				else menu_page[1]=0;
		//	menu_page[1]= (enc2_dir >>7) <<7;

			menu_page[1]=enc2_dir&384;  // single  for now
 8001312:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <analoginputloopb+0x1c8>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800131a:	b29a      	uxth	r2, r3
 800131c:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <analoginputloopb+0x1ec>)
 800131e:	805a      	strh	r2, [r3, #2]
			menu_page[1]=0; // force a single page for now
 8001320:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <analoginputloopb+0x1ec>)
 8001322:	2200      	movs	r2, #0
 8001324:	805a      	strh	r2, [r3, #2]

			//if (enc2_dir>255) {menu_page[1]=0;display_fill();}

					if ((enc2_temp>127) && (enc2_tempB<=127)) display_fill();    // need to optimize
 8001326:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <analoginputloopb+0x1e0>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	2b7f      	cmp	r3, #127	; 0x7f
 800132c:	d905      	bls.n	800133a <analoginputloopb+0x146>
 800132e:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <analoginputloopb+0x1f0>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	2b7f      	cmp	r3, #127	; 0x7f
 8001334:	d801      	bhi.n	800133a <analoginputloopb+0x146>
 8001336:	f000 fa01 	bl	800173c <display_fill>
					if ((enc2_temp<=127) && (enc2_tempB>127)) display_fill();
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <analoginputloopb+0x1e0>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	2b7f      	cmp	r3, #127	; 0x7f
 8001340:	d805      	bhi.n	800134e <analoginputloopb+0x15a>
 8001342:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <analoginputloopb+0x1f0>)
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	2b7f      	cmp	r3, #127	; 0x7f
 8001348:	d901      	bls.n	800134e <analoginputloopb+0x15a>
 800134a:	f000 f9f7 	bl	800173c <display_fill>
					if ((enc2_temp>255) && (enc2_tempB<=255)) display_fill();
 800134e:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <analoginputloopb+0x1e0>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	2bff      	cmp	r3, #255	; 0xff
 8001354:	d905      	bls.n	8001362 <analoginputloopb+0x16e>
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <analoginputloopb+0x1f0>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	2bff      	cmp	r3, #255	; 0xff
 800135c:	d801      	bhi.n	8001362 <analoginputloopb+0x16e>
 800135e:	f000 f9ed 	bl	800173c <display_fill>
					if ((enc2_temp<=255) && (enc2_tempB>255)) display_fill();
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <analoginputloopb+0x1e0>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	2bff      	cmp	r3, #255	; 0xff
 8001368:	d805      	bhi.n	8001376 <analoginputloopb+0x182>
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <analoginputloopb+0x1f0>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	2bff      	cmp	r3, #255	; 0xff
 8001370:	d901      	bls.n	8001376 <analoginputloopb+0x182>
 8001372:	f000 f9e3 	bl	800173c <display_fill>
					if ((enc2_temp>383) && (enc2_tempB<=383)) display_fill();
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <analoginputloopb+0x1e0>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800137e:	d306      	bcc.n	800138e <analoginputloopb+0x19a>
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <analoginputloopb+0x1f0>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001388:	d201      	bcs.n	800138e <analoginputloopb+0x19a>
 800138a:	f000 f9d7 	bl	800173c <display_fill>
					//if ((enc2_temp<=383) && (enc2_tempB>383)) display_fill();
					//if ((enc2_temp<127) && (enc2_tempB>384)) display_fill();
					//if ((enc2_temp<=511) && (enc2_tempB<127)) display_fill();


					enc2_tempB=enc2_temp; // to effective as counter not getting reset
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <analoginputloopb+0x1e0>)
 8001390:	881a      	ldrh	r2, [r3, #0]
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <analoginputloopb+0x1f0>)
 8001394:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <analoginputloopb+0x1cc>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <analoginputloopb+0x1d0>)
 800139e:	5c9b      	ldrb	r3, [r3, r2]
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <analoginputloopb+0x1cc>)
 80013a2:	8812      	ldrh	r2, [r2, #0]
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	b2d9      	uxtb	r1, r3
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <analoginputloopb+0x1f4>)
 80013aa:	5499      	strb	r1, [r3, r2]

//potValues[counterVarB]=potSource[counterVarB] & 15 ;  // reduce values for now ,use original for others



}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20002128 	.word	0x20002128
 80013b4:	20000c92 	.word	0x20000c92
 80013b8:	20000c93 	.word	0x20000c93
 80013bc:	20002116 	.word	0x20002116
 80013c0:	20000c98 	.word	0x20000c98
 80013c4:	20000b08 	.word	0x20000b08
 80013c8:	20002118 	.word	0x20002118
 80013cc:	2000210e 	.word	0x2000210e
 80013d0:	40000800 	.word	0x40000800
 80013d4:	20002112 	.word	0x20002112
 80013d8:	20002110 	.word	0x20002110
 80013dc:	200001b8 	.word	0x200001b8
 80013e0:	20002138 	.word	0x20002138
 80013e4:	20002114 	.word	0x20002114
 80013e8:	20000988 	.word	0x20000988

080013ec <display_init>:
void display_init(void){
 80013ec:	b5b0      	push	{r4, r5, r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);


		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd
 80013f2:	4b64      	ldr	r3, [pc, #400]	; (8001584 <display_init+0x198>)
 80013f4:	1d3c      	adds	r4, r7, #4
 80013f6:	461d      	mov	r5, r3
 80013f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001400:	682b      	ldr	r3, [r5, #0]
 8001402:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8001404:	4b60      	ldr	r3, [pc, #384]	; (8001588 <display_init+0x19c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	f040 80b6 	bne.w	800157a <display_init+0x18e>

/*if ((enc2_dir>63) && (menu_page[2]==0))  {init=4;menu_page[2]=1;}  //restart page draw for second page , might need home pos init
if  ((init==76) && (menu_page[2]==1)) menu_page[2]=2; //after drawing second page and finish
if ((enc2_dir<63) && (menu_page[2]==2))  {init=4;menu_page[2]=0;}
*/
switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded
 800140e:	4b5f      	ldr	r3, [pc, #380]	; (800158c <display_init+0x1a0>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	3b4d      	subs	r3, #77	; 0x4d
 8001414:	2b07      	cmp	r3, #7
 8001416:	d879      	bhi.n	800150c <display_init+0x120>
 8001418:	a201      	add	r2, pc, #4	; (adr r2, 8001420 <display_init+0x34>)
 800141a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141e:	bf00      	nop
 8001420:	08001441 	.word	0x08001441
 8001424:	08001471 	.word	0x08001471
 8001428:	08001479 	.word	0x08001479
 800142c:	08001495 	.word	0x08001495
 8001430:	080014a9 	.word	0x080014a9
 8001434:	080014b7 	.word	0x080014b7
 8001438:	080014cb 	.word	0x080014cb
 800143c:	080014df 	.word	0x080014df

case 77: spi_hold=384+(init_b>>1);init=init+((init_b&1)*2);break; // no delay ,jump to either blink sets
 8001440:	4b53      	ldr	r3, [pc, #332]	; (8001590 <display_init+0x1a4>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	085b      	lsrs	r3, r3, #1
 8001446:	b29b      	uxth	r3, r3
 8001448:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800144c:	b29a      	uxth	r2, r3
 800144e:	4b51      	ldr	r3, [pc, #324]	; (8001594 <display_init+0x1a8>)
 8001450:	801a      	strh	r2, [r3, #0]
 8001452:	4b4f      	ldr	r3, [pc, #316]	; (8001590 <display_init+0x1a4>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	b2db      	uxtb	r3, r3
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4b4a      	ldr	r3, [pc, #296]	; (800158c <display_init+0x1a0>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4b48      	ldr	r3, [pc, #288]	; (800158c <display_init+0x1a0>)
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	e05f      	b.n	8001530 <display_init+0x144>

case 78: spi_hold=10;break; //write one set then jump
 8001470:	4b48      	ldr	r3, [pc, #288]	; (8001594 <display_init+0x1a8>)
 8001472:	220a      	movs	r2, #10
 8001474:	801a      	strh	r2, [r3, #0]
 8001476:	e05b      	b.n	8001530 <display_init+0x144>
case 79: spi_hold=spell[(init_b&62)+1];init=81;break;
 8001478:	4b45      	ldr	r3, [pc, #276]	; (8001590 <display_init+0x1a4>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001480:	3301      	adds	r3, #1
 8001482:	4a45      	ldr	r2, [pc, #276]	; (8001598 <display_init+0x1ac>)
 8001484:	5cd3      	ldrb	r3, [r2, r3]
 8001486:	b29a      	uxth	r2, r3
 8001488:	4b42      	ldr	r3, [pc, #264]	; (8001594 <display_init+0x1a8>)
 800148a:	801a      	strh	r2, [r3, #0]
 800148c:	4b3f      	ldr	r3, [pc, #252]	; (800158c <display_init+0x1a0>)
 800148e:	2251      	movs	r2, #81	; 0x51
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	e04d      	b.n	8001530 <display_init+0x144>
case 80: spi_hold=spell[init_b&62];break; // or write other set then jump
 8001494:	4b3e      	ldr	r3, [pc, #248]	; (8001590 <display_init+0x1a4>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800149c:	4a3e      	ldr	r2, [pc, #248]	; (8001598 <display_init+0x1ac>)
 800149e:	5cd3      	ldrb	r3, [r2, r3]
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	4b3c      	ldr	r3, [pc, #240]	; (8001594 <display_init+0x1a8>)
 80014a4:	801a      	strh	r2, [r3, #0]
 80014a6:	e043      	b.n	8001530 <display_init+0x144>
case 81: spi_hold=10;init=81;break;
 80014a8:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <display_init+0x1a8>)
 80014aa:	220a      	movs	r2, #10
 80014ac:	801a      	strh	r2, [r3, #0]
 80014ae:	4b37      	ldr	r3, [pc, #220]	; (800158c <display_init+0x1a0>)
 80014b0:	2251      	movs	r2, #81	; 0x51
 80014b2:	701a      	strb	r2, [r3, #0]
 80014b4:	e03c      	b.n	8001530 <display_init+0x144>


case 82: spi_hold=384+(init_b>>1);break;  // finish writes
 80014b6:	4b36      	ldr	r3, [pc, #216]	; (8001590 <display_init+0x1a4>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	085b      	lsrs	r3, r3, #1
 80014bc:	b29b      	uxth	r3, r3
 80014be:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	4b33      	ldr	r3, [pc, #204]	; (8001594 <display_init+0x1a8>)
 80014c6:	801a      	strh	r2, [r3, #0]
 80014c8:	e032      	b.n	8001530 <display_init+0x144>
case 83: spi_hold=spell[init_b&62];break;
 80014ca:	4b31      	ldr	r3, [pc, #196]	; (8001590 <display_init+0x1a4>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80014d2:	4a31      	ldr	r2, [pc, #196]	; (8001598 <display_init+0x1ac>)
 80014d4:	5cd3      	ldrb	r3, [r2, r3]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b2e      	ldr	r3, [pc, #184]	; (8001594 <display_init+0x1a8>)
 80014da:	801a      	strh	r2, [r3, #0]
 80014dc:	e028      	b.n	8001530 <display_init+0x144>
case 84 : spi_hold=spell[(init_b&62)+1];init_b=cursor_menu[2]&63;displayBuffer2 ();init=76; break; //update cursor and displaybuffer
 80014de:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <display_init+0x1a4>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80014e6:	3301      	adds	r3, #1
 80014e8:	4a2b      	ldr	r2, [pc, #172]	; (8001598 <display_init+0x1ac>)
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b29      	ldr	r3, [pc, #164]	; (8001594 <display_init+0x1a8>)
 80014f0:	801a      	strh	r2, [r3, #0]
 80014f2:	4b2a      	ldr	r3, [pc, #168]	; (800159c <display_init+0x1b0>)
 80014f4:	889b      	ldrh	r3, [r3, #4]
 80014f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	4b24      	ldr	r3, [pc, #144]	; (8001590 <display_init+0x1a4>)
 80014fe:	801a      	strh	r2, [r3, #0]
 8001500:	f000 f948 	bl	8001794 <displayBuffer2>
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <display_init+0x1a0>)
 8001506:	224c      	movs	r2, #76	; 0x4c
 8001508:	701a      	strb	r2, [r3, #0]
 800150a:	e011      	b.n	8001530 <display_init+0x144>
default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <display_init+0x1a0>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b29b      	uxth	r3, r3
 8001512:	3b06      	subs	r3, #6
 8001514:	b29a      	uxth	r2, r3
 8001516:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <display_init+0x1a4>)
 8001518:	801a      	strh	r2, [r3, #0]
 800151a:	f000 f93b 	bl	8001794 <displayBuffer2>
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <display_init+0x1a4>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <display_init+0x1ac>)
 8001526:	5c9b      	ldrb	r3, [r3, r2]
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <display_init+0x1a8>)
 800152c:	801a      	strh	r2, [r3, #0]
 800152e:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init] ;  init_b=cursor_menu[2]; } //delay needs to go
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <display_init+0x1a0>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b05      	cmp	r3, #5
 8001536:	d80f      	bhi.n	8001558 <display_init+0x16c>
 8001538:	2003      	movs	r0, #3
 800153a:	f002 ff97 	bl	800446c <HAL_Delay>
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <display_init+0x1a0>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	3328      	adds	r3, #40	; 0x28
 8001546:	443b      	add	r3, r7
 8001548:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <display_init+0x1a8>)
 800154e:	801a      	strh	r2, [r3, #0]
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <display_init+0x1b0>)
 8001552:	889a      	ldrh	r2, [r3, #4]
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <display_init+0x1a4>)
 8001556:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <display_init+0x1a0>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	3301      	adds	r3, #1
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <display_init+0x1a0>)
 8001562:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <display_init+0x19c>)
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
 800156a:	f7ff fda9 	bl	80010c0 <SPI_command>
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <display_init+0x19c>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <display_init+0x1b4>)
 8001576:	2200      	movs	r2, #0
 8001578:	801a      	strh	r2, [r3, #0]
		  //if ((bsrr_counter==49) && (spi_send==2)) {bsrr_counter=0; spi_send=0;}
		  if (bsrr_counter==49)  {bsrr_counter=0; spi_send=0;}
		 }
*/

}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	; 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bdb0      	pop	{r4, r5, r7, pc}
 8001582:	bf00      	nop
 8001584:	08009cc0 	.word	0x08009cc0
 8001588:	20002124 	.word	0x20002124
 800158c:	20002125 	.word	0x20002125
 8001590:	20002126 	.word	0x20002126
 8001594:	20002122 	.word	0x20002122
 8001598:	20000000 	.word	0x20000000
 800159c:	20002128 	.word	0x20002128
 80015a0:	2000211e 	.word	0x2000211e

080015a4 <display_update>:



}

void display_update(void){				//spi display updater code , all gfx , works pretty ok n doesn't need to be running always 18x 128 ,constant scanning
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0

	uint8_t spi_store[5];

switch (gfx_skip) { // 1-17  one row
 80015aa:	4b5d      	ldr	r3, [pc, #372]	; (8001720 <display_update+0x17c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d035      	beq.n	800161e <display_update+0x7a>
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	dc3d      	bgt.n	8001632 <display_update+0x8e>
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d002      	beq.n	80015c0 <display_update+0x1c>
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d020      	beq.n	8001600 <display_update+0x5c>
 80015be:	e038      	b.n	8001632 <display_update+0x8e>


case 1 : {spi_hold=((gfx_counter[0])&31)+384;gfx_counter[4]=(gfx_counter[0]>>5);  gfx_counter[0]=(gfx_counter[0]+1)&63 ;gfx_skip++;break ;}  // count up positions
 80015c0:	4b58      	ldr	r3, [pc, #352]	; (8001724 <display_update+0x180>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	f003 031f 	and.w	r3, r3, #31
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b55      	ldr	r3, [pc, #340]	; (8001728 <display_update+0x184>)
 80015d2:	801a      	strh	r2, [r3, #0]
 80015d4:	4b53      	ldr	r3, [pc, #332]	; (8001724 <display_update+0x180>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	095b      	lsrs	r3, r3, #5
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b51      	ldr	r3, [pc, #324]	; (8001724 <display_update+0x180>)
 80015de:	811a      	strh	r2, [r3, #8]
 80015e0:	4b50      	ldr	r3, [pc, #320]	; (8001724 <display_update+0x180>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	4b4d      	ldr	r3, [pc, #308]	; (8001724 <display_update+0x180>)
 80015f0:	801a      	strh	r2, [r3, #0]
 80015f2:	4b4b      	ldr	r3, [pc, #300]	; (8001720 <display_update+0x17c>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b49      	ldr	r3, [pc, #292]	; (8001720 <display_update+0x17c>)
 80015fc:	701a      	strb	r2, [r3, #0]
 80015fe:	e028      	b.n	8001652 <display_update+0xae>
case 2  : {	spi_hold=384+(gfx_counter[4]*8);gfx_skip++;break ;  }
 8001600:	4b48      	ldr	r3, [pc, #288]	; (8001724 <display_update+0x180>)
 8001602:	891b      	ldrh	r3, [r3, #8]
 8001604:	3330      	adds	r3, #48	; 0x30
 8001606:	b29b      	uxth	r3, r3
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	b29a      	uxth	r2, r3
 800160c:	4b46      	ldr	r3, [pc, #280]	; (8001728 <display_update+0x184>)
 800160e:	801a      	strh	r2, [r3, #0]
 8001610:	4b43      	ldr	r3, [pc, #268]	; (8001720 <display_update+0x17c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	3301      	adds	r3, #1
 8001616:	b2da      	uxtb	r2, r3
 8001618:	4b41      	ldr	r3, [pc, #260]	; (8001720 <display_update+0x17c>)
 800161a:	701a      	strb	r2, [r3, #0]
 800161c:	e019      	b.n	8001652 <display_update+0xae>
case 3   : gfx_counter[3]=0; gfx_skip++;break;
 800161e:	4b41      	ldr	r3, [pc, #260]	; (8001724 <display_update+0x180>)
 8001620:	2200      	movs	r2, #0
 8001622:	80da      	strh	r2, [r3, #6]
 8001624:	4b3e      	ldr	r3, [pc, #248]	; (8001720 <display_update+0x17c>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	3301      	adds	r3, #1
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b3c      	ldr	r3, [pc, #240]	; (8001720 <display_update+0x17c>)
 800162e:	701a      	strb	r2, [r3, #0]
 8001630:	e00f      	b.n	8001652 <display_update+0xae>
//case 18 : gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;break;  //not ideal
default :  gfx_counter[3]=(gfx_counter[3]+1)&15;gfx_skip++;break;
 8001632:	4b3c      	ldr	r3, [pc, #240]	; (8001724 <display_update+0x180>)
 8001634:	88db      	ldrh	r3, [r3, #6]
 8001636:	3301      	adds	r3, #1
 8001638:	b29b      	uxth	r3, r3
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b38      	ldr	r3, [pc, #224]	; (8001724 <display_update+0x180>)
 8001642:	80da      	strh	r2, [r3, #6]
 8001644:	4b36      	ldr	r3, [pc, #216]	; (8001720 <display_update+0x17c>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4b34      	ldr	r3, [pc, #208]	; (8001720 <display_update+0x17c>)
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	bf00      	nop

}


if ((gfx_skip==2) || (gfx_skip==3) || (gfx_skip==1)) spi_hold=spi_hold; else spi_hold=gfx_ram[gfx_counter[2]] [gfx_counter[3]] ; // write command or data
 8001652:	4b33      	ldr	r3, [pc, #204]	; (8001720 <display_update+0x17c>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d007      	beq.n	800166a <display_update+0xc6>
 800165a:	4b31      	ldr	r3, [pc, #196]	; (8001720 <display_update+0x17c>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d003      	beq.n	800166a <display_update+0xc6>
 8001662:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <display_update+0x17c>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d104      	bne.n	8001674 <display_update+0xd0>
 800166a:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <display_update+0x184>)
 800166c:	881a      	ldrh	r2, [r3, #0]
 800166e:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <display_update+0x184>)
 8001670:	801a      	strh	r2, [r3, #0]
 8001672:	e00d      	b.n	8001690 <display_update+0xec>
 8001674:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <display_update+0x180>)
 8001676:	889b      	ldrh	r3, [r3, #4]
 8001678:	4618      	mov	r0, r3
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <display_update+0x180>)
 800167c:	88db      	ldrh	r3, [r3, #6]
 800167e:	4619      	mov	r1, r3
 8001680:	4a2a      	ldr	r2, [pc, #168]	; (800172c <display_update+0x188>)
 8001682:	0103      	lsls	r3, r0, #4
 8001684:	4413      	add	r3, r2
 8001686:	440b      	add	r3, r1
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b29a      	uxth	r2, r3
 800168c:	4b26      	ldr	r3, [pc, #152]	; (8001728 <display_update+0x184>)
 800168e:	801a      	strh	r2, [r3, #0]

if (gfx_skip==19)  {gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;}   // fixed last doubled char
 8001690:	4b23      	ldr	r3, [pc, #140]	; (8001720 <display_update+0x17c>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b13      	cmp	r3, #19
 8001696:	d10e      	bne.n	80016b6 <display_update+0x112>
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <display_update+0x180>)
 800169a:	889b      	ldrh	r3, [r3, #4]
 800169c:	3301      	adds	r3, #1
 800169e:	b29b      	uxth	r3, r3
 80016a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <display_update+0x180>)
 80016a8:	809a      	strh	r2, [r3, #4]
 80016aa:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <display_update+0x180>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	80da      	strh	r2, [r3, #6]
 80016b0:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <display_update+0x17c>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]

		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <display_update+0x184>)
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	b29b      	uxth	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <display_update+0x126>
 80016c2:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <display_update+0x18c>)
 80016c4:	22f8      	movs	r2, #248	; 0xf8
 80016c6:	701a      	strb	r2, [r3, #0]
 80016c8:	e002      	b.n	80016d0 <display_update+0x12c>
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <display_update+0x18c>)
 80016cc:	22fa      	movs	r2, #250	; 0xfa
 80016ce:	701a      	strb	r2, [r3, #0]

		spi_store[0]=spi_byte&255;
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <display_update+0x18c>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	703b      	strb	r3, [r7, #0]
		spi_store[1]=((spi_hold>>4)<<4)&255;
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <display_update+0x184>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	b29b      	uxth	r3, r3
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	707b      	strb	r3, [r7, #1]
		spi_store[2]=((spi_hold&15)<<4)&255;
 80016e4:	4b10      	ldr	r3, [pc, #64]	; (8001728 <display_update+0x184>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	70bb      	strb	r3, [r7, #2]

	// send this to spi for now
			HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 3);  // working good ,blocking , never set time too high  or figure other option maybe DMA
 80016ee:	4639      	mov	r1, r7
 80016f0:	2303      	movs	r3, #3
 80016f2:	2203      	movs	r2, #3
 80016f4:	480f      	ldr	r0, [pc, #60]	; (8001734 <display_update+0x190>)
 80016f6:	f006 fa74 	bl	8007be2 <HAL_SPI_Transmit>


disp_end=gfx_skip+gfx_counter[2]+gfx_counter[3];			// vsynch for displaybuffer
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <display_update+0x180>)
 80016fc:	889b      	ldrh	r3, [r3, #4]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <display_update+0x17c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4413      	add	r3, r2
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <display_update+0x180>)
 800170a:	88db      	ldrh	r3, [r3, #6]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	4413      	add	r3, r2
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <display_update+0x194>)
 8001714:	701a      	strb	r2, [r3, #0]


}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200001b4 	.word	0x200001b4
 8001724:	20002a00 	.word	0x20002a00
 8001728:	20002122 	.word	0x20002122
 800172c:	200025d0 	.word	0x200025d0
 8001730:	20002120 	.word	0x20002120
 8001734:	20003c58 	.word	0x20003c58
 8001738:	20002a0e 	.word	0x20002a0e

0800173c <display_fill>:
void display_fill(void)  {     // full update of gfx memory
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
loop_counter3=1;
 8001740:	4b10      	ldr	r3, [pc, #64]	; (8001784 <display_fill+0x48>)
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
for (n=0;n<2048;n++)	{ //fills up gfx ram or not
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <display_fill+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	801a      	strh	r2, [r3, #0]
 800174c:	e011      	b.n	8001772 <display_fill+0x36>

enc2_dir=(n>>4)+menu_page[1]; 												// 0-128         +      0,127,255,
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <display_fill+0x4c>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	091b      	lsrs	r3, r3, #4
 8001754:	b29a      	uxth	r2, r3
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <display_fill+0x50>)
 8001758:	885b      	ldrh	r3, [r3, #2]
 800175a:	4413      	add	r3, r2
 800175c:	b29a      	uxth	r2, r3
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <display_fill+0x54>)
 8001760:	801a      	strh	r2, [r3, #0]

displayBuffer2();
 8001762:	f000 f817 	bl	8001794 <displayBuffer2>
for (n=0;n<2048;n++)	{ //fills up gfx ram or not
 8001766:	4b08      	ldr	r3, [pc, #32]	; (8001788 <display_fill+0x4c>)
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	b29a      	uxth	r2, r3
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <display_fill+0x4c>)
 8001770:	801a      	strh	r2, [r3, #0]
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <display_fill+0x4c>)
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800177a:	d3e8      	bcc.n	800174e <display_fill+0x12>
}
//enc2_dir=menu_page[1];  // end clean
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20002a0f 	.word	0x20002a0f
 8001788:	20000ca2 	.word	0x20000ca2
 800178c:	20002138 	.word	0x20002138
 8001790:	20002116 	.word	0x20002116

08001794 <displayBuffer2>:





void displayBuffer2 (void){
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0

	if (disp_stepper==0) init_b= menu_title_lut[enc2_dir&31]&127;  					else init_b=111+disp_stepper;  // fetch values for last line or cursor
 800179a:	4b6d      	ldr	r3, [pc, #436]	; (8001950 <displayBuffer2+0x1bc>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10c      	bne.n	80017bc <displayBuffer2+0x28>
 80017a2:	4b6c      	ldr	r3, [pc, #432]	; (8001954 <displayBuffer2+0x1c0>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	f003 031f 	and.w	r3, r3, #31
 80017aa:	4a6b      	ldr	r2, [pc, #428]	; (8001958 <displayBuffer2+0x1c4>)
 80017ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	4b69      	ldr	r3, [pc, #420]	; (800195c <displayBuffer2+0x1c8>)
 80017b8:	801a      	strh	r2, [r3, #0]
 80017ba:	e006      	b.n	80017ca <displayBuffer2+0x36>
 80017bc:	4b64      	ldr	r3, [pc, #400]	; (8001950 <displayBuffer2+0x1bc>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	336f      	adds	r3, #111	; 0x6f
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	4b65      	ldr	r3, [pc, #404]	; (800195c <displayBuffer2+0x1c8>)
 80017c8:	801a      	strh	r2, [r3, #0]

	if (disp_stepper==0)  memcpy(default_menu3+112, default_menu+(menu_title_lut[enc2_dir&63]>>8),8);   // copy feedback data for reading
 80017ca:	4b61      	ldr	r3, [pc, #388]	; (8001950 <displayBuffer2+0x1bc>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d110      	bne.n	80017f4 <displayBuffer2+0x60>
 80017d2:	4863      	ldr	r0, [pc, #396]	; (8001960 <displayBuffer2+0x1cc>)
 80017d4:	4b5f      	ldr	r3, [pc, #380]	; (8001954 <displayBuffer2+0x1c0>)
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017dc:	4a5e      	ldr	r2, [pc, #376]	; (8001958 <displayBuffer2+0x1c4>)
 80017de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017e2:	0a1b      	lsrs	r3, r3, #8
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	4b5e      	ldr	r3, [pc, #376]	; (8001964 <displayBuffer2+0x1d0>)
 80017ea:	4413      	add	r3, r2
 80017ec:	2208      	movs	r2, #8
 80017ee:	4619      	mov	r1, r3
 80017f0:	f008 f842 	bl	8009878 <memcpy>

		if (disp_stepper==0) memcpy(menu_vars_in,default_menu3+112,8);	// ok
 80017f4:	4b56      	ldr	r3, [pc, #344]	; (8001950 <displayBuffer2+0x1bc>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d104      	bne.n	8001806 <displayBuffer2+0x72>
 80017fc:	4a58      	ldr	r2, [pc, #352]	; (8001960 <displayBuffer2+0x1cc>)
 80017fe:	4b5a      	ldr	r3, [pc, #360]	; (8001968 <displayBuffer2+0x1d4>)
 8001800:	6810      	ldr	r0, [r2, #0]
 8001802:	6851      	ldr	r1, [r2, #4]
 8001804:	c303      	stmia	r3!, {r0, r1}
	if (disp_stepper==0) menu_vars();			//ok
 8001806:	4b52      	ldr	r3, [pc, #328]	; (8001950 <displayBuffer2+0x1bc>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <displayBuffer2+0x7e>
 800180e:	f7ff f99b 	bl	8000b48 <menu_vars>
	if (disp_stepper==0) lcd_out3=*menu_vars_var; // grab value on ptr address , ok
 8001812:	4b4f      	ldr	r3, [pc, #316]	; (8001950 <displayBuffer2+0x1bc>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d105      	bne.n	8001826 <displayBuffer2+0x92>
 800181a:	4b54      	ldr	r3, [pc, #336]	; (800196c <displayBuffer2+0x1d8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b29a      	uxth	r2, r3
 8001822:	4b53      	ldr	r3, [pc, #332]	; (8001970 <displayBuffer2+0x1dc>)
 8001824:	801a      	strh	r2, [r3, #0]
	if (disp_stepper==1)  {default_menu3[120]=potSource[380]+48; default_menu3[121]=potSource[381]+48; default_menu3[122]=potSource[382]+48; }  // ok
 8001826:	4b4a      	ldr	r3, [pc, #296]	; (8001950 <displayBuffer2+0x1bc>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d117      	bne.n	800185e <displayBuffer2+0xca>
 800182e:	4b51      	ldr	r3, [pc, #324]	; (8001974 <displayBuffer2+0x1e0>)
 8001830:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8001834:	3330      	adds	r3, #48	; 0x30
 8001836:	b2da      	uxtb	r2, r3
 8001838:	4b4f      	ldr	r3, [pc, #316]	; (8001978 <displayBuffer2+0x1e4>)
 800183a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800183e:	4b4d      	ldr	r3, [pc, #308]	; (8001974 <displayBuffer2+0x1e0>)
 8001840:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 8001844:	3330      	adds	r3, #48	; 0x30
 8001846:	b2da      	uxtb	r2, r3
 8001848:	4b4b      	ldr	r3, [pc, #300]	; (8001978 <displayBuffer2+0x1e4>)
 800184a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800184e:	4b49      	ldr	r3, [pc, #292]	; (8001974 <displayBuffer2+0x1e0>)
 8001850:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 8001854:	3330      	adds	r3, #48	; 0x30
 8001856:	b2da      	uxtb	r2, r3
 8001858:	4b47      	ldr	r3, [pc, #284]	; (8001978 <displayBuffer2+0x1e4>)
 800185a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

	uint8_t d_count;
uint16_t init_x=((init_b>>4)<<3);    // normal x8 , try other 64 x16
 800185e:	4b3f      	ldr	r3, [pc, #252]	; (800195c <displayBuffer2+0x1c8>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	b29b      	uxth	r3, r3
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	80bb      	strh	r3, [r7, #4]
uint8_t init_x2=init_x&63;  // 0-64  character address in gfx
 800186a:	88bb      	ldrh	r3, [r7, #4]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001872:	70fb      	strb	r3, [r7, #3]
uint8_t init_y=init_b&15;
 8001874:	4b39      	ldr	r3, [pc, #228]	; (800195c <displayBuffer2+0x1c8>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	70bb      	strb	r3, [r7, #2]
uint16_t store_x;


store_c= (default_menu3[init_b]-47)&127 ;    // grab char from mem
 8001880:	4b36      	ldr	r3, [pc, #216]	; (800195c <displayBuffer2+0x1c8>)
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b3c      	ldr	r3, [pc, #240]	; (8001978 <displayBuffer2+0x1e4>)
 8001888:	5c9b      	ldrb	r3, [r3, r2]
 800188a:	b29b      	uxth	r3, r3
 800188c:	3b2f      	subs	r3, #47	; 0x2f
 800188e:	b29b      	uxth	r3, r3
 8001890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001894:	b29a      	uxth	r2, r3
 8001896:	4b39      	ldr	r3, [pc, #228]	; (800197c <displayBuffer2+0x1e8>)
 8001898:	801a      	strh	r2, [r3, #0]



//store_c= 33; // force

store_x=(store_c*8);  // i line characters , might shrink it and use extr for other  visuals , old code but keep for now
 800189a:	4b38      	ldr	r3, [pc, #224]	; (800197c <displayBuffer2+0x1e8>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	803b      	strh	r3, [r7, #0]


if (( !loop_counter3) && (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 80018a2:	4b37      	ldr	r3, [pc, #220]	; (8001980 <displayBuffer2+0x1ec>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d11f      	bne.n	80018ea <displayBuffer2+0x156>
 80018aa:	4b29      	ldr	r3, [pc, #164]	; (8001950 <displayBuffer2+0x1bc>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d11b      	bne.n	80018ea <displayBuffer2+0x156>
	for (d_count=0;d_count<7;d_count++){
 80018b2:	2300      	movs	r3, #0
 80018b4:	71fb      	strb	r3, [r7, #7]
 80018b6:	e014      	b.n	80018e2 <displayBuffer2+0x14e>
						gfx_ram[d_count+init_x2] [init_y] = gfx_char[d_count+store_x]^127; //write character to ram ,should be elsewhere , blank is correct
 80018b8:	79fa      	ldrb	r2, [r7, #7]
 80018ba:	883b      	ldrh	r3, [r7, #0]
 80018bc:	4413      	add	r3, r2
 80018be:	4a31      	ldr	r2, [pc, #196]	; (8001984 <displayBuffer2+0x1f0>)
 80018c0:	5cd1      	ldrb	r1, [r2, r3]
 80018c2:	79fa      	ldrb	r2, [r7, #7]
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	441a      	add	r2, r3
 80018c8:	78bb      	ldrb	r3, [r7, #2]
 80018ca:	f081 017f 	eor.w	r1, r1, #127	; 0x7f
 80018ce:	b2c8      	uxtb	r0, r1
 80018d0:	492d      	ldr	r1, [pc, #180]	; (8001988 <displayBuffer2+0x1f4>)
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	440a      	add	r2, r1
 80018d6:	4413      	add	r3, r2
 80018d8:	4602      	mov	r2, r0
 80018da:	701a      	strb	r2, [r3, #0]
	for (d_count=0;d_count<7;d_count++){
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	3301      	adds	r3, #1
 80018e0:	71fb      	strb	r3, [r7, #7]
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	2b06      	cmp	r3, #6
 80018e6:	d9e7      	bls.n	80018b8 <displayBuffer2+0x124>
if (( !loop_counter3) && (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 80018e8:	e017      	b.n	800191a <displayBuffer2+0x186>
	}
else for (d_count=0;d_count<7;d_count++){
 80018ea:	2300      	movs	r3, #0
 80018ec:	71fb      	strb	r3, [r7, #7]
 80018ee:	e011      	b.n	8001914 <displayBuffer2+0x180>
	gfx_ram[d_count+init_x2] [init_y] = gfx_char[d_count+store_x]; //write character to ram ,should be elsewhere , seems affected by later stufff
 80018f0:	79fa      	ldrb	r2, [r7, #7]
 80018f2:	883b      	ldrh	r3, [r7, #0]
 80018f4:	18d1      	adds	r1, r2, r3
 80018f6:	79fa      	ldrb	r2, [r7, #7]
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	441a      	add	r2, r3
 80018fc:	78bb      	ldrb	r3, [r7, #2]
 80018fe:	4821      	ldr	r0, [pc, #132]	; (8001984 <displayBuffer2+0x1f0>)
 8001900:	5c40      	ldrb	r0, [r0, r1]
 8001902:	4921      	ldr	r1, [pc, #132]	; (8001988 <displayBuffer2+0x1f4>)
 8001904:	0112      	lsls	r2, r2, #4
 8001906:	440a      	add	r2, r1
 8001908:	4413      	add	r3, r2
 800190a:	4602      	mov	r2, r0
 800190c:	701a      	strb	r2, [r3, #0]
else for (d_count=0;d_count<7;d_count++){
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	3301      	adds	r3, #1
 8001912:	71fb      	strb	r3, [r7, #7]
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	2b06      	cmp	r3, #6
 8001918:	d9ea      	bls.n	80018f0 <displayBuffer2+0x15c>
}


gfx_ram[7+init_x2] [init_y] = 0; // last line is blank between rows or whatever
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	1dda      	adds	r2, r3, #7
 800191e:	78bb      	ldrb	r3, [r7, #2]
 8001920:	4919      	ldr	r1, [pc, #100]	; (8001988 <displayBuffer2+0x1f4>)
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	440a      	add	r2, r1
 8001926:	4413      	add	r3, r2
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]

if (disp_stepper==15) disp_stepper=0; else disp_stepper++;				// count to 16
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <displayBuffer2+0x1bc>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d103      	bne.n	800193c <displayBuffer2+0x1a8>
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <displayBuffer2+0x1bc>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]


}    // displayBuffer2
 800193a:	e005      	b.n	8001948 <displayBuffer2+0x1b4>
if (disp_stepper==15) disp_stepper=0; else disp_stepper++;				// count to 16
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <displayBuffer2+0x1bc>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b02      	ldr	r3, [pc, #8]	; (8001950 <displayBuffer2+0x1bc>)
 8001946:	701a      	strb	r2, [r3, #0]
}    // displayBuffer2
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200001d9 	.word	0x200001d9
 8001954:	20002116 	.word	0x20002116
 8001958:	20003a6c 	.word	0x20003a6c
 800195c:	20002126 	.word	0x20002126
 8001960:	200003e4 	.word	0x200003e4
 8001964:	200002b8 	.word	0x200002b8
 8001968:	20003af8 	.word	0x20003af8
 800196c:	20003af4 	.word	0x20003af4
 8001970:	20002a0c 	.word	0x20002a0c
 8001974:	20000b08 	.word	0x20000b08
 8001978:	20000374 	.word	0x20000374
 800197c:	20000ca0 	.word	0x20000ca0
 8001980:	20002a0f 	.word	0x20002a0f
 8001984:	200003f4 	.word	0x200003f4
 8001988:	200025d0 	.word	0x200025d0
 800198c:	00000000 	.word	0x00000000

08001990 <sampling>:

void sampling(void){						// 18 ms of data
 8001990:	b5b0      	push	{r4, r5, r7, lr}
 8001992:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 8001996:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;


time_proc=0;
 8001998:	4b95      	ldr	r3, [pc, #596]	; (8001bf0 <sampling+0x260>)
 800199a:	2200      	movs	r2, #0
 800199c:	801a      	strh	r2, [r3, #0]


uint8_t mask_i;


bank_write=0;
 800199e:	4b95      	ldr	r3, [pc, #596]	; (8001bf4 <sampling+0x264>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	801a      	strh	r2, [r3, #0]
//time_proc=0;   //millis

//adc_read();
//uint16_t isr_tempo=isrMask; // get tempo value
sample_pointB=sample_pointD;
 80019a4:	4b94      	ldr	r3, [pc, #592]	; (8001bf8 <sampling+0x268>)
 80019a6:	881a      	ldrh	r2, [r3, #0]
 80019a8:	4b94      	ldr	r3, [pc, #592]	; (8001bfc <sampling+0x26c>)
 80019aa:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80019b2:	f102 021c 	add.w	r2, r2, #28
 80019b6:	8013      	strh	r3, [r2, #0]

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 80019b8:	4b91      	ldr	r3, [pc, #580]	; (8001c00 <sampling+0x270>)
 80019ba:	785b      	ldrb	r3, [r3, #1]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b91      	ldr	r3, [pc, #580]	; (8001c04 <sampling+0x274>)
 80019c0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80019c4:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80019c8:	f102 020c 	add.w	r2, r2, #12
 80019cc:	8013      	strh	r3, [r2, #0]

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s
float freq_temp;	// (1/(bpm/60)) /0.00045712=tempo count ie 1093.8 for 120bpm
float freq2_temp;

float tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 80019ce:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80019d2:	f103 030c 	add.w	r3, r3, #12
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	da00      	bge.n	80019de <sampling+0x4e>
 80019dc:	331f      	adds	r3, #31
 80019de:	115b      	asrs	r3, r3, #5
 80019e0:	461a      	mov	r2, r3
 80019e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80019f6:	f103 0308 	add.w	r3, r3, #8
 80019fa:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 80019fe:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001a02:	f103 0308 	add.w	r3, r3, #8
 8001a06:	ed93 7a00 	vldr	s14, [r3]
 8001a0a:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8001c08 <sampling+0x278>
 8001a0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a12:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001a16:	f103 0308 	add.w	r3, r3, #8
 8001a1a:	edc3 7a00 	vstr	s15, [r3]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 8001a1e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001a22:	f103 0318 	add.w	r3, r3, #24
 8001a26:	2244      	movs	r2, #68	; 0x44
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f007 ff32 	bl	8009894 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 8001a30:	4b76      	ldr	r3, [pc, #472]	; (8001c0c <sampling+0x27c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	801a      	strh	r2, [r3, #0]
 8001a36:	e00e      	b.n	8001a56 <sampling+0xc6>
 8001a38:	4b74      	ldr	r3, [pc, #464]	; (8001c0c <sampling+0x27c>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001a42:	443b      	add	r3, r7
 8001a44:	2200      	movs	r2, #0
 8001a46:	f843 2c68 	str.w	r2, [r3, #-104]
 8001a4a:	4b70      	ldr	r3, [pc, #448]	; (8001c0c <sampling+0x27c>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	4b6e      	ldr	r3, [pc, #440]	; (8001c0c <sampling+0x27c>)
 8001a54:	801a      	strh	r2, [r3, #0]
 8001a56:	4b6d      	ldr	r3, [pc, #436]	; (8001c0c <sampling+0x27c>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	2b0f      	cmp	r3, #15
 8001a5c:	d9ec      	bls.n	8001a38 <sampling+0xa8>

//lcd_out3=menu_page[1]; // still goes to 15

//lcd_out3=adc_values[0]+adc_values[1]+adc_values[2]; // 3 digit read out , works ok,, [2] works but thats it
//lcd_out3=lcd_out3+180;
potSource[380]=(lcd_out3/100);  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 8001a5e:	4b6c      	ldr	r3, [pc, #432]	; (8001c10 <sampling+0x280>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	4a6c      	ldr	r2, [pc, #432]	; (8001c14 <sampling+0x284>)
 8001a64:	fba2 2303 	umull	r2, r3, r2, r3
 8001a68:	095b      	lsrs	r3, r3, #5
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4b6a      	ldr	r3, [pc, #424]	; (8001c18 <sampling+0x288>)
 8001a70:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
potSource[381]=((lcd_out3 %100)/10);		 // 0-160 to 0-10
 8001a74:	4b66      	ldr	r3, [pc, #408]	; (8001c10 <sampling+0x280>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	4a66      	ldr	r2, [pc, #408]	; (8001c14 <sampling+0x284>)
 8001a7a:	fba2 1203 	umull	r1, r2, r2, r3
 8001a7e:	0952      	lsrs	r2, r2, #5
 8001a80:	2164      	movs	r1, #100	; 0x64
 8001a82:	fb01 f202 	mul.w	r2, r1, r2
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	4a64      	ldr	r2, [pc, #400]	; (8001c1c <sampling+0x28c>)
 8001a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a90:	08db      	lsrs	r3, r3, #3
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b60      	ldr	r3, [pc, #384]	; (8001c18 <sampling+0x288>)
 8001a98:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
potSource[382]=(lcd_out3%10);
 8001a9c:	4b5c      	ldr	r3, [pc, #368]	; (8001c10 <sampling+0x280>)
 8001a9e:	881a      	ldrh	r2, [r3, #0]
 8001aa0:	4b5e      	ldr	r3, [pc, #376]	; (8001c1c <sampling+0x28c>)
 8001aa2:	fba3 1302 	umull	r1, r3, r3, r2
 8001aa6:	08d9      	lsrs	r1, r3, #3
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4b58      	ldr	r3, [pc, #352]	; (8001c18 <sampling+0x288>)
 8001ab8:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e



note_holdA=0;
 8001abc:	4b58      	ldr	r3, [pc, #352]	; (8001c20 <sampling+0x290>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]

//sample_Accu2=0;
//printf (adc_values[0]," ",adc_values[1]," ",adc_values[2]," ","crap \n");
// some good phasin and delays here
uint8_t cross_fade[2];
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 8001ac2:	4b58      	ldr	r3, [pc, #352]	; (8001c24 <sampling+0x294>)
 8001ac4:	f507 5480 	add.w	r4, r7, #4096	; 0x1000
 8001ac8:	461d      	mov	r5, r3
 8001aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001acc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ace:	682b      	ldr	r3, [r5, #0]
 8001ad0:	7023      	strb	r3, [r4, #0]
adc_values[2]= 15; //force for now
 8001ad2:	4b55      	ldr	r3, [pc, #340]	; (8001c28 <sampling+0x298>)
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	809a      	strh	r2, [r3, #4]
if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader
 8001ad8:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <sampling+0x298>)
 8001ada:	889b      	ldrh	r3, [r3, #4]
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d017      	beq.n	8001b14 <sampling+0x184>
 8001ae4:	4b50      	ldr	r3, [pc, #320]	; (8001c28 <sampling+0x298>)
 8001ae6:	889b      	ldrh	r3, [r3, #4]
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001af0:	443b      	add	r3, r7
 8001af2:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8001af6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b00:	f102 0215 	add.w	r2, r2, #21
 8001b04:	7013      	strb	r3, [r2, #0]
 8001b06:	237f      	movs	r3, #127	; 0x7f
 8001b08:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b0c:	f102 0216 	add.w	r2, r2, #22
 8001b10:	7013      	strb	r3, [r2, #0]
 8001b12:	e013      	b.n	8001b3c <sampling+0x1ac>
 8001b14:	4b44      	ldr	r3, [pc, #272]	; (8001c28 <sampling+0x298>)
 8001b16:	889b      	ldrh	r3, [r3, #4]
 8001b18:	f003 030f 	and.w	r3, r3, #15
 8001b1c:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001b20:	443b      	add	r3, r7
 8001b22:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8001b26:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b2a:	f102 0216 	add.w	r2, r2, #22
 8001b2e:	7013      	strb	r3, [r2, #0]
 8001b30:	237f      	movs	r3, #127	; 0x7f
 8001b32:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b36:	f102 0215 	add.w	r2, r2, #21
 8001b3a:	7013      	strb	r3, [r2, #0]

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (ADSR[0].attack_trigger==0) {		adsr_att=(161-ADSR[0].attack ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 8001b3c:	4b3b      	ldr	r3, [pc, #236]	; (8001c2c <sampling+0x29c>)
 8001b3e:	791b      	ldrb	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d146      	bne.n	8001bd2 <sampling+0x242>
 8001b44:	4b39      	ldr	r3, [pc, #228]	; (8001c2c <sampling+0x29c>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fdbf 	bl	80006d0 <__aeabi_i2d>
 8001b52:	a323      	add	r3, pc, #140	; (adr r3, 8001be0 <sampling+0x250>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fb3e 	bl	80001d8 <__aeabi_dmul>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7fe fe1e 	bl	80007a4 <__aeabi_d2f>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4a31      	ldr	r2, [pc, #196]	; (8001c30 <sampling+0x2a0>)
 8001b6c:	6013      	str	r3, [r2, #0]
ADSR[0].sustain_data=((161-ADSR[0].decay)*0.01);  // length and level this is ok is running 1/16 ish				ADSR[0].attack_data=ADSR[0].attack_data-ADSR[0].sustain_data;
 8001b6e:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <sampling+0x29c>)
 8001b70:	785b      	ldrb	r3, [r3, #1]
 8001b72:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fdaa 	bl	80006d0 <__aeabi_i2d>
 8001b7c:	a31a      	add	r3, pc, #104	; (adr r3, 8001be8 <sampling+0x258>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f7fe fb29 	bl	80001d8 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f7fe fe09 	bl	80007a4 <__aeabi_d2f>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4a25      	ldr	r2, [pc, #148]	; (8001c2c <sampling+0x29c>)
 8001b96:	6113      	str	r3, [r2, #16]
adsr_att=adsr_att*adsr_att;
 8001b98:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <sampling+0x2a0>)
 8001b9a:	ed93 7a00 	vldr	s14, [r3]
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <sampling+0x2a0>)
 8001ba0:	edd3 7a00 	vldr	s15, [r3]
 8001ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba8:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <sampling+0x2a0>)
 8001baa:	edc3 7a00 	vstr	s15, [r3]
ADSR[0].sustain_data=ADSR[0].sustain_data*ADSR[0].sustain_data;
 8001bae:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <sampling+0x29c>)
 8001bb0:	ed93 7a04 	vldr	s14, [r3, #16]
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <sampling+0x29c>)
 8001bb6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <sampling+0x29c>)
 8001bc0:	edc3 7a04 	vstr	s15, [r3, #16]

ADSR[0].attack_trigger=1;
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <sampling+0x29c>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	711a      	strb	r2, [r3, #4]
ADSR[0].attack_data=0;
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <sampling+0x29c>)
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
}

//float ADSR[0].buffer_temp;    // adsr

for (i=0;i<256;i++) {
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <sampling+0x27c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	801a      	strh	r2, [r3, #0]
 8001bd8:	e0ec      	b.n	8001db4 <sampling+0x424>
 8001bda:	bf00      	nop
 8001bdc:	f3af 8000 	nop.w
 8001be0:	47ae147b 	.word	0x47ae147b
 8001be4:	3f947ae1 	.word	0x3f947ae1
 8001be8:	47ae147b 	.word	0x47ae147b
 8001bec:	3f847ae1 	.word	0x3f847ae1
 8001bf0:	20002e2c 	.word	0x20002e2c
 8001bf4:	200001b2 	.word	0x200001b2
 8001bf8:	200014ce 	.word	0x200014ce
 8001bfc:	20000cc2 	.word	0x20000cc2
 8001c00:	20003a30 	.word	0x20003a30
 8001c04:	2000248c 	.word	0x2000248c
 8001c08:	42a00000 	.word	0x42a00000
 8001c0c:	20000cc4 	.word	0x20000cc4
 8001c10:	20002a0c 	.word	0x20002a0c
 8001c14:	51eb851f 	.word	0x51eb851f
 8001c18:	20000b08 	.word	0x20000b08
 8001c1c:	cccccccd 	.word	0xcccccccd
 8001c20:	200020f0 	.word	0x200020f0
 8001c24:	08009ce4 	.word	0x08009ce4
 8001c28:	200001a8 	.word	0x200001a8
 8001c2c:	20002f34 	.word	0x20002f34
 8001c30:	200029fc 	.word	0x200029fc

	if     (ADSR[0].attack_data<1000)    																		{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=ADSR[0].attack_data; } //0-1000
 8001c34:	4b84      	ldr	r3, [pc, #528]	; (8001e48 <sampling+0x4b8>)
 8001c36:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c3a:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8001e4c <sampling+0x4bc>
 8001c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c46:	d50e      	bpl.n	8001c66 <sampling+0x2d6>
 8001c48:	4b7f      	ldr	r3, [pc, #508]	; (8001e48 <sampling+0x4b8>)
 8001c4a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c4e:	4b80      	ldr	r3, [pc, #512]	; (8001e50 <sampling+0x4c0>)
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c58:	4b7b      	ldr	r3, [pc, #492]	; (8001e48 <sampling+0x4b8>)
 8001c5a:	edc3 7a02 	vstr	s15, [r3, #8]
 8001c5e:	4b7a      	ldr	r3, [pc, #488]	; (8001e48 <sampling+0x4b8>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	4a79      	ldr	r2, [pc, #484]	; (8001e48 <sampling+0x4b8>)
 8001c64:	6193      	str	r3, [r2, #24]
	 if  ((ADSR[0].attack_data<1500)  && (ADSR[0].attack_data>999))  					{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=1500-(ADSR[0].attack_data-500);  }  // 1000-500
 8001c66:	4b78      	ldr	r3, [pc, #480]	; (8001e48 <sampling+0x4b8>)
 8001c68:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c6c:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001e54 <sampling+0x4c4>
 8001c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c78:	d522      	bpl.n	8001cc0 <sampling+0x330>
 8001c7a:	4b73      	ldr	r3, [pc, #460]	; (8001e48 <sampling+0x4b8>)
 8001c7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c80:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001e58 <sampling+0x4c8>
 8001c84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8c:	dd18      	ble.n	8001cc0 <sampling+0x330>
 8001c8e:	4b6e      	ldr	r3, [pc, #440]	; (8001e48 <sampling+0x4b8>)
 8001c90:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c94:	4b6e      	ldr	r3, [pc, #440]	; (8001e50 <sampling+0x4c0>)
 8001c96:	edd3 7a00 	vldr	s15, [r3]
 8001c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9e:	4b6a      	ldr	r3, [pc, #424]	; (8001e48 <sampling+0x4b8>)
 8001ca0:	edc3 7a02 	vstr	s15, [r3, #8]
 8001ca4:	4b68      	ldr	r3, [pc, #416]	; (8001e48 <sampling+0x4b8>)
 8001ca6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001caa:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001e5c <sampling+0x4cc>
 8001cae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cb2:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001e54 <sampling+0x4c4>
 8001cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cba:	4b63      	ldr	r3, [pc, #396]	; (8001e48 <sampling+0x4b8>)
 8001cbc:	edc3 7a06 	vstr	s15, [r3, #24]
	 if ((ADSR[0].attack_data>1499)   && 		(ADSR[0].attack_data<2000)) 			{		ADSR[0].buffer_temp=500; 	ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data;}
 8001cc0:	4b61      	ldr	r3, [pc, #388]	; (8001e48 <sampling+0x4b8>)
 8001cc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cc6:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001e60 <sampling+0x4d0>
 8001cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd2:	dd17      	ble.n	8001d04 <sampling+0x374>
 8001cd4:	4b5c      	ldr	r3, [pc, #368]	; (8001e48 <sampling+0x4b8>)
 8001cd6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cda:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001e64 <sampling+0x4d4>
 8001cde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce6:	d50d      	bpl.n	8001d04 <sampling+0x374>
 8001ce8:	4b57      	ldr	r3, [pc, #348]	; (8001e48 <sampling+0x4b8>)
 8001cea:	4a5f      	ldr	r2, [pc, #380]	; (8001e68 <sampling+0x4d8>)
 8001cec:	619a      	str	r2, [r3, #24]
 8001cee:	4b56      	ldr	r3, [pc, #344]	; (8001e48 <sampling+0x4b8>)
 8001cf0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cf4:	4b54      	ldr	r3, [pc, #336]	; (8001e48 <sampling+0x4b8>)
 8001cf6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfe:	4b52      	ldr	r3, [pc, #328]	; (8001e48 <sampling+0x4b8>)
 8001d00:	edc3 7a02 	vstr	s15, [r3, #8]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)					{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
 8001d04:	4b50      	ldr	r3, [pc, #320]	; (8001e48 <sampling+0x4b8>)
 8001d06:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d0a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001e6c <sampling+0x4dc>
 8001d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d16:	dd1e      	ble.n	8001d56 <sampling+0x3c6>
 8001d18:	4b4b      	ldr	r3, [pc, #300]	; (8001e48 <sampling+0x4b8>)
 8001d1a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d1e:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001e70 <sampling+0x4e0>
 8001d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2a:	d514      	bpl.n	8001d56 <sampling+0x3c6>
 8001d2c:	4b46      	ldr	r3, [pc, #280]	; (8001e48 <sampling+0x4b8>)
 8001d2e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d32:	4b45      	ldr	r3, [pc, #276]	; (8001e48 <sampling+0x4b8>)
 8001d34:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3c:	4b42      	ldr	r3, [pc, #264]	; (8001e48 <sampling+0x4b8>)
 8001d3e:	edc3 7a02 	vstr	s15, [r3, #8]
 8001d42:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <sampling+0x4b8>)
 8001d44:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d48:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001e70 <sampling+0x4e0>
 8001d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d50:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <sampling+0x4b8>)
 8001d52:	edc3 7a06 	vstr	s15, [r3, #24]
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END
 8001d56:	4b3c      	ldr	r3, [pc, #240]	; (8001e48 <sampling+0x4b8>)
 8001d58:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d5c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001e74 <sampling+0x4e4>
 8001d60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d68:	dd06      	ble.n	8001d78 <sampling+0x3e8>
 8001d6a:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <sampling+0x4b8>)
 8001d6c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d70:	619a      	str	r2, [r3, #24]
 8001d72:	4b35      	ldr	r3, [pc, #212]	; (8001e48 <sampling+0x4b8>)
 8001d74:	4a40      	ldr	r2, [pc, #256]	; (8001e78 <sampling+0x4e8>)
 8001d76:	609a      	str	r2, [r3, #8]

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
 8001d78:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <sampling+0x4b8>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fcb9 	bl	80006f4 <__aeabi_f2d>
 8001d82:	a32f      	add	r3, pc, #188	; (adr r3, 8001e40 <sampling+0x4b0>)
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	f7fe fa26 	bl	80001d8 <__aeabi_dmul>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	493a      	ldr	r1, [pc, #232]	; (8001e7c <sampling+0x4ec>)
 8001d92:	8809      	ldrh	r1, [r1, #0]
 8001d94:	460c      	mov	r4, r1
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f7fe fd03 	bl	80007a4 <__aeabi_d2f>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	4937      	ldr	r1, [pc, #220]	; (8001e80 <sampling+0x4f0>)
 8001da2:	00a3      	lsls	r3, r4, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	601a      	str	r2, [r3, #0]
for (i=0;i<256;i++) {
 8001da8:	4b34      	ldr	r3, [pc, #208]	; (8001e7c <sampling+0x4ec>)
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	4b32      	ldr	r3, [pc, #200]	; (8001e7c <sampling+0x4ec>)
 8001db2:	801a      	strh	r2, [r3, #0]
 8001db4:	4b31      	ldr	r3, [pc, #196]	; (8001e7c <sampling+0x4ec>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	2bff      	cmp	r3, #255	; 0xff
 8001dba:	f67f af3b 	bls.w	8001c34 <sampling+0x2a4>


///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8001dbe:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <sampling+0x4ec>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	801a      	strh	r2, [r3, #0]
 8001dc4:	e38e      	b.n	80024e4 <sampling+0xb54>

	i_total=i+sample_pointB;
 8001dc6:	4b2d      	ldr	r3, [pc, #180]	; (8001e7c <sampling+0x4ec>)
 8001dc8:	881a      	ldrh	r2, [r3, #0]
 8001dca:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <sampling+0x4f4>)
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001dd4:	f102 0202 	add.w	r2, r2, #2
 8001dd8:	8013      	strh	r3, [r2, #0]
	i_frac=i>>6;   //   0-8 steps
 8001dda:	4b28      	ldr	r3, [pc, #160]	; (8001e7c <sampling+0x4ec>)
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	099b      	lsrs	r3, r3, #6
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <sampling+0x4f8>)
 8001de6:	701a      	strb	r2, [r3, #0]
	note_plain=seq.notes1[seq.pos & 7 ];
 8001de8:	4b28      	ldr	r3, [pc, #160]	; (8001e8c <sampling+0x4fc>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <sampling+0x4fc>)
 8001df2:	4413      	add	r3, r2
 8001df4:	789b      	ldrb	r3, [r3, #2]
 8001df6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001dfa:	7013      	strb	r3, [r2, #0]
potValues[i&255]=potSource[i&255]>>4; //just to update values
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <sampling+0x4ec>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	4a23      	ldr	r2, [pc, #140]	; (8001e90 <sampling+0x500>)
 8001e04:	5cd2      	ldrb	r2, [r2, r3]
 8001e06:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <sampling+0x4ec>)
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	0912      	lsrs	r2, r2, #4
 8001e0e:	b2d1      	uxtb	r1, r2
 8001e10:	4a20      	ldr	r2, [pc, #128]	; (8001e94 <sampling+0x504>)
 8001e12:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 8001e14:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <sampling+0x508>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001e1c:	f102 020c 	add.w	r2, r2, #12
 8001e20:	8812      	ldrh	r2, [r2, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d83c      	bhi.n	8001ea0 <sampling+0x510>
 8001e26:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <sampling+0x50c>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <sampling+0x50c>)
 8001e36:	801a      	strh	r2, [r3, #0]
 8001e38:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <sampling+0x508>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	801a      	strh	r2, [r3, #0]
 8001e3e:	e035      	b.n	8001eac <sampling+0x51c>
 8001e40:	d2f1a9fc 	.word	0xd2f1a9fc
 8001e44:	3f50624d 	.word	0x3f50624d
 8001e48:	20002f34 	.word	0x20002f34
 8001e4c:	447a0000 	.word	0x447a0000
 8001e50:	200029fc 	.word	0x200029fc
 8001e54:	44bb8000 	.word	0x44bb8000
 8001e58:	4479c000 	.word	0x4479c000
 8001e5c:	43fa0000 	.word	0x43fa0000
 8001e60:	44bb6000 	.word	0x44bb6000
 8001e64:	44fa0000 	.word	0x44fa0000
 8001e68:	43fa0000 	.word	0x43fa0000
 8001e6c:	44f9e000 	.word	0x44f9e000
 8001e70:	451c4000 	.word	0x451c4000
 8001e74:	453b8000 	.word	0x453b8000
 8001e78:	457a0000 	.word	0x457a0000
 8001e7c:	20000cc4 	.word	0x20000cc4
 8001e80:	20001cd8 	.word	0x20001cd8
 8001e84:	20000cc2 	.word	0x20000cc2
 8001e88:	20002230 	.word	0x20002230
 8001e8c:	20003a30 	.word	0x20003a30
 8001e90:	20000b08 	.word	0x20000b08
 8001e94:	20000988 	.word	0x20000988
 8001e98:	2000211a 	.word	0x2000211a
 8001e9c:	200020ee 	.word	0x200020ee
 8001ea0:	4b9e      	ldr	r3, [pc, #632]	; (800211c <sampling+0x78c>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	4b9c      	ldr	r3, [pc, #624]	; (800211c <sampling+0x78c>)
 8001eaa:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001eb2:	f102 021c 	add.w	r2, r2, #28
 8001eb6:	8013      	strh	r3, [r2, #0]
	if ((next_isr>>4) != (seq.pos)) { 					// next note step 140ms
 8001eb8:	4b99      	ldr	r3, [pc, #612]	; (8002120 <sampling+0x790>)
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	4b98      	ldr	r3, [pc, #608]	; (8002124 <sampling+0x794>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d00c      	beq.n	8001ee4 <sampling+0x554>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8001eca:	4b95      	ldr	r3, [pc, #596]	; (8002120 <sampling+0x790>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	4b93      	ldr	r3, [pc, #588]	; (8002124 <sampling+0x794>)
 8001ed6:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001ede:	f102 021c 	add.w	r2, r2, #28
 8001ee2:	8013      	strh	r3, [r2, #0]
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos
 8001ee4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001ee8:	f103 031c 	add.w	r3, r3, #28
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 80f8 	beq.w	80020e4 <sampling+0x754>
	{
	//printf("\n");//	ITM_SendChar( 65 );   //  Send ASCII code 65 = ’A’
	//printf("%d" ,note[].pitch[10]);


		note[2].timeshift=(adc_values[0]>>2)&15; //assigned pots to start of loopers 0-16,works
 8001ef4:	4b8c      	ldr	r3, [pc, #560]	; (8002128 <sampling+0x798>)
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	089b      	lsrs	r3, r3, #2
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	4b89      	ldr	r3, [pc, #548]	; (800212c <sampling+0x79c>)
 8001f06:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		note[3].timeshift=(adc_values[1]>>2)&15;
 8001f0a:	4b87      	ldr	r3, [pc, #540]	; (8002128 <sampling+0x798>)
 8001f0c:	885b      	ldrh	r3, [r3, #2]
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4b84      	ldr	r3, [pc, #528]	; (800212c <sampling+0x79c>)
 8001f1c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36


		seq.loop[2]=((note[2].timeshift+(seq.pos&7))&15); // calc  8 note loop positions sets looping point in sequence
 8001f20:	4b82      	ldr	r3, [pc, #520]	; (800212c <sampling+0x79c>)
 8001f22:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001f26:	4b7f      	ldr	r3, [pc, #508]	; (8002124 <sampling+0x794>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	4413      	add	r3, r2
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4b7a      	ldr	r3, [pc, #488]	; (8002124 <sampling+0x794>)
 8001f3c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

		//seq.loop[3]=(note[3].timeshift+(( seq.pos&31 ) >>2)) & 15;  // quater speed
			seq.loop[3]=((note[3].timeshift+(seq.pos&15))&15); //sets looping point in sequence this is full 16 note
 8001f40:	4b7a      	ldr	r3, [pc, #488]	; (800212c <sampling+0x79c>)
 8001f42:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8001f46:	4b77      	ldr	r3, [pc, #476]	; (8002124 <sampling+0x794>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	4b73      	ldr	r3, [pc, #460]	; (8002124 <sampling+0x794>)
 8001f56:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

			seq.loop[4]=((note[2].timeshift+(seq.pos&7))&15);
 8001f5a:	4b74      	ldr	r3, [pc, #464]	; (800212c <sampling+0x79c>)
 8001f5c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001f60:	4b70      	ldr	r3, [pc, #448]	; (8002124 <sampling+0x794>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	4b6b      	ldr	r3, [pc, #428]	; (8002124 <sampling+0x794>)
 8001f76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		//seq.loop[4]=((note[2].timeshift+((seq.pos&15)>>1))&15); // half speed

		note[2].pitch=seq.notes2[seq.loop[2]]+note[2].transpose;  //loop 8 notes from pos and x times
 8001f7a:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <sampling+0x794>)
 8001f7c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001f80:	461a      	mov	r2, r3
 8001f82:	4b68      	ldr	r3, [pc, #416]	; (8002124 <sampling+0x794>)
 8001f84:	4413      	add	r3, r2
 8001f86:	7cda      	ldrb	r2, [r3, #19]
 8001f88:	4b68      	ldr	r3, [pc, #416]	; (800212c <sampling+0x79c>)
 8001f8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f8e:	4413      	add	r3, r2
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4b66      	ldr	r3, [pc, #408]	; (800212c <sampling+0x79c>)
 8001f94:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		note[3].pitch=seq.notes1[seq.loop[3]];  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8001f98:	4b62      	ldr	r3, [pc, #392]	; (8002124 <sampling+0x794>)
 8001f9a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4b60      	ldr	r3, [pc, #384]	; (8002124 <sampling+0x794>)
 8001fa2:	4413      	add	r3, r2
 8001fa4:	789a      	ldrb	r2, [r3, #2]
 8001fa6:	4b61      	ldr	r3, [pc, #388]	; (800212c <sampling+0x79c>)
 8001fa8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	if (note[3].pitch) 		{note[3].pitch=note[3].pitch+note[3].transpose;	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off
 8001fac:	4b5f      	ldr	r3, [pc, #380]	; (800212c <sampling+0x79c>)
 8001fae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01d      	beq.n	8001ff2 <sampling+0x662>
 8001fb6:	4b5d      	ldr	r3, [pc, #372]	; (800212c <sampling+0x79c>)
 8001fb8:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8001fbc:	4b5b      	ldr	r3, [pc, #364]	; (800212c <sampling+0x79c>)
 8001fbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc2:	4413      	add	r3, r2
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b59      	ldr	r3, [pc, #356]	; (800212c <sampling+0x79c>)
 8001fc8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8001fcc:	4b58      	ldr	r3, [pc, #352]	; (8002130 <sampling+0x7a0>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	80da      	strh	r2, [r3, #6]
 8001fd2:	4b58      	ldr	r3, [pc, #352]	; (8002134 <sampling+0x7a4>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	f003 031f 	and.w	r3, r3, #31
 8001fda:	2201      	movs	r2, #1
 8001fdc:	409a      	lsls	r2, r3
 8001fde:	4b55      	ldr	r3, [pc, #340]	; (8002134 <sampling+0x7a4>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001fec:	443b      	add	r3, r7
 8001fee:	f843 2c68 	str.w	r2, [r3, #-104]


	//if ((note[5].pitch) && (adsr_toggle[5]==2)) {note[5].pitch=note[5].pitch; one_shot=0;}  // grab note when on ,one shot also , also delete


	note[5].pitch=seq.notes2[seq.loop[2]]+(note[5].transpose);  //
 8001ff2:	4b4c      	ldr	r3, [pc, #304]	; (8002124 <sampling+0x794>)
 8001ff4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b4a      	ldr	r3, [pc, #296]	; (8002124 <sampling+0x794>)
 8001ffc:	4413      	add	r3, r2
 8001ffe:	7cda      	ldrb	r2, [r3, #19]
 8002000:	4b4a      	ldr	r3, [pc, #296]	; (800212c <sampling+0x79c>)
 8002002:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002006:	4413      	add	r3, r2
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4b48      	ldr	r3, [pc, #288]	; (800212c <sampling+0x79c>)
 800200c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52





	note[5].pitch=MajorNote[note[5].pitch];
 8002010:	4b46      	ldr	r3, [pc, #280]	; (800212c <sampling+0x79c>)
 8002012:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8002016:	461a      	mov	r2, r3
 8002018:	4b47      	ldr	r3, [pc, #284]	; (8002138 <sampling+0x7a8>)
 800201a:	5c9a      	ldrb	r2, [r3, r2]
 800201c:	4b43      	ldr	r3, [pc, #268]	; (800212c <sampling+0x79c>)
 800201e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	//note[5].pitch=11; // works ok with single note @24 but   fails on other
	note[5].tuned=sine_lut[note[5].pitch];	//sets freq ,1.0594  * 16536 =17518  ,
 8002022:	4b42      	ldr	r3, [pc, #264]	; (800212c <sampling+0x79c>)
 8002024:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8002028:	461a      	mov	r2, r3
 800202a:	4b44      	ldr	r3, [pc, #272]	; (800213c <sampling+0x7ac>)
 800202c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002030:	4b3e      	ldr	r3, [pc, #248]	; (800212c <sampling+0x79c>)
 8002032:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	note[5].tuned= (note[5].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
 8002036:	4b3d      	ldr	r3, [pc, #244]	; (800212c <sampling+0x79c>)
 8002038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800203c:	461a      	mov	r2, r3
 800203e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	129b      	asrs	r3, r3, #10
 8002048:	b29a      	uxth	r2, r3
 800204a:	4b38      	ldr	r3, [pc, #224]	; (800212c <sampling+0x79c>)
 800204c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		mask_result =0;
 8002050:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <sampling+0x7b0>)
 8002052:	2200      	movs	r2, #0
 8002054:	801a      	strh	r2, [r3, #0]
		sample_Accu[3]=0; // reset to 0 mani sample hold
		sample_Accu[4]=0; // reset to 0 mani sample hold
		sample_Accu[5]=0; // reset to 0 mani sample hold
*/

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002056:	2300      	movs	r3, #0
 8002058:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800205c:	f102 021f 	add.w	r2, r2, #31
 8002060:	7013      	strb	r3, [r2, #0]
 8002062:	e038      	b.n	80020d6 <sampling+0x746>

	if (note[mask_i].pitch) {tune_Accu=sample_Noteadd[MajorNote[note[mask_i].pitch]];   note[mask_i].tuned=(tune_Accu);       } // relies on note channel clear , not good , clear not channel straight after
 8002064:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002068:	f103 031f 	add.w	r3, r3, #31
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	4a2f      	ldr	r2, [pc, #188]	; (800212c <sampling+0x79c>)
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	4413      	add	r3, r2
 8002074:	3302      	adds	r3, #2
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d021      	beq.n	80020c0 <sampling+0x730>
 800207c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002080:	f103 031f 	add.w	r3, r3, #31
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	4a29      	ldr	r2, [pc, #164]	; (800212c <sampling+0x79c>)
 8002088:	011b      	lsls	r3, r3, #4
 800208a:	4413      	add	r3, r2
 800208c:	3302      	adds	r3, #2
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	4b29      	ldr	r3, [pc, #164]	; (8002138 <sampling+0x7a8>)
 8002094:	5c9b      	ldrb	r3, [r3, r2]
 8002096:	461a      	mov	r2, r3
 8002098:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <sampling+0x7b4>)
 800209a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800209e:	461a      	mov	r2, r3
 80020a0:	4b29      	ldr	r3, [pc, #164]	; (8002148 <sampling+0x7b8>)
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	4b28      	ldr	r3, [pc, #160]	; (8002148 <sampling+0x7b8>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020ac:	f103 031f 	add.w	r3, r3, #31
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	b291      	uxth	r1, r2
 80020b4:	4a1d      	ldr	r2, [pc, #116]	; (800212c <sampling+0x79c>)
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	4413      	add	r3, r2
 80020ba:	330e      	adds	r3, #14
 80020bc:	460a      	mov	r2, r1
 80020be:	801a      	strh	r2, [r3, #0]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 80020c0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020c4:	f103 031f 	add.w	r3, r3, #31
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	3301      	adds	r3, #1
 80020cc:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80020d0:	f102 021f 	add.w	r2, r2, #31
 80020d4:	7013      	strb	r3, [r2, #0]
 80020d6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020da:	f103 031f 	add.w	r3, r3, #31
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d9bf      	bls.n	8002064 <sampling+0x6d4>

  // calc freq 1/isr or 1/16 per note ,need for pitch bend and so on , change depending on decay

// lfo section

	if ((i&63)==0) {   // calculate lfo maybe 8 times for now , seems to fill up
 80020e4:	4b13      	ldr	r3, [pc, #76]	; (8002134 <sampling+0x7a4>)
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f040 81f3 	bne.w	80024d8 <sampling+0xb48>
freq_temp=0;
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80020fa:	f102 0214 	add.w	r2, r2, #20
 80020fe:	6013      	str	r3, [r2, #0]
freq2_temp=0;
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002108:	f102 021c 	add.w	r2, r2, #28
 800210c:	6013      	str	r3, [r2, #0]

//uint8_t i_frac2=(i_frac+7)&7;  //previous value can change shape  , not  bad effect

		for (l=0;l<10;l++){   //current lfo setup , messy
 800210e:	2300      	movs	r3, #0
 8002110:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002114:	f102 021b 	add.w	r2, r2, #27
 8002118:	7013      	strb	r3, [r2, #0]
 800211a:	e19b      	b.n	8002454 <sampling+0xac4>
 800211c:	2000211a 	.word	0x2000211a
 8002120:	200020ee 	.word	0x200020ee
 8002124:	20003a30 	.word	0x20003a30
 8002128:	200001a8 	.word	0x200001a8
 800212c:	200039c0 	.word	0x200039c0
 8002130:	200020d8 	.word	0x200020d8
 8002134:	20000cc4 	.word	0x20000cc4
 8002138:	08009d14 	.word	0x08009d14
 800213c:	20000144 	.word	0x20000144
 8002140:	200014d0 	.word	0x200014d0
 8002144:	08009d30 	.word	0x08009d30
 8002148:	20000c9c 	.word	0x20000c9c
			//LFO[l].rate=potSource[130+l];   //grab dat for now
			freq_temp=LFO[l].rate +1;  // rate. this needs a little log
 800214c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002150:	f103 031b 	add.w	r3, r3, #27
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	4a46      	ldr	r2, [pc, #280]	; (8002270 <sampling+0x8e0>)
 8002158:	211a      	movs	r1, #26
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	4413      	add	r3, r2
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	3301      	adds	r3, #1
 8002164:	ee07 3a90 	vmov	s15, r3
 8002168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800216c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002170:	f103 0314 	add.w	r3, r3, #20
 8002174:	edc3 7a00 	vstr	s15, [r3]
			freq2_temp=freq_temp*freq_temp;
 8002178:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800217c:	f103 0314 	add.w	r3, r3, #20
 8002180:	edd3 7a00 	vldr	s15, [r3]
 8002184:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002188:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800218c:	f103 031c 	add.w	r3, r3, #28
 8002190:	edc3 7a00 	vstr	s15, [r3]
			freq_temp=freq2_temp/64;
 8002194:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002198:	f103 031c 	add.w	r3, r3, #28
 800219c:	ed93 7a00 	vldr	s14, [r3]
 80021a0:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002274 <sampling+0x8e4>
 80021a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021a8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80021ac:	f103 0314 	add.w	r3, r3, #20
 80021b0:	edc3 7a00 	vstr	s15, [r3]
			freq2_temp=freq_temp*tempo_sync ; //correction to one note per cycle ,fixed , maybe loose this
 80021b4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80021b8:	f103 0314 	add.w	r3, r3, #20
 80021bc:	ed93 7a00 	vldr	s14, [r3]
 80021c0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80021c4:	f103 0308 	add.w	r3, r3, #8
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80021d4:	f103 031c 	add.w	r3, r3, #28
 80021d8:	edc3 7a00 	vstr	s15, [r3]

			freq_temp=lfo_accu[l][i_frac]+ freq2_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 80021dc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80021e0:	f103 031b 	add.w	r3, r3, #27
 80021e4:	781a      	ldrb	r2, [r3, #0]
 80021e6:	4b24      	ldr	r3, [pc, #144]	; (8002278 <sampling+0x8e8>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	4923      	ldr	r1, [pc, #140]	; (800227c <sampling+0x8ec>)
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4403      	add	r3, r0
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	edd3 7a00 	vldr	s15, [r3]
 8002200:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002204:	f103 031c 	add.w	r3, r3, #28
 8002208:	ed93 7a00 	vldr	s14, [r3]
 800220c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002210:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002214:	f103 0314 	add.w	r3, r3, #20
 8002218:	edc3 7a00 	vstr	s15, [r3]


//			if ((tempo_count<50) && ((next_isr&15)==15)) freq_temp=0;   // trying retrigger
		if (freq_temp>16384) lfo_accu[l][i_frac]=freq_temp-16384; else lfo_accu[l][i_frac]=freq_temp; // write back value
 800221c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002220:	f103 0314 	add.w	r3, r3, #20
 8002224:	edd3 7a00 	vldr	s15, [r3]
 8002228:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002280 <sampling+0x8f0>
 800222c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002234:	dd26      	ble.n	8002284 <sampling+0x8f4>
 8002236:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800223a:	f103 031b 	add.w	r3, r3, #27
 800223e:	781a      	ldrb	r2, [r3, #0]
 8002240:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <sampling+0x8e8>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800224a:	f103 0314 	add.w	r3, r3, #20
 800224e:	edd3 7a00 	vldr	s15, [r3]
 8002252:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002280 <sampling+0x8f0>
 8002256:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800225a:	4908      	ldr	r1, [pc, #32]	; (800227c <sampling+0x8ec>)
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	4403      	add	r3, r0
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	edc3 7a00 	vstr	s15, [r3]
 800226e:	e01f      	b.n	80022b0 <sampling+0x920>
 8002270:	20002e30 	.word	0x20002e30
 8002274:	42800000 	.word	0x42800000
 8002278:	20002230 	.word	0x20002230
 800227c:	20002234 	.word	0x20002234
 8002280:	46800000 	.word	0x46800000
 8002284:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002288:	f103 031b 	add.w	r3, r3, #27
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	4b9e      	ldr	r3, [pc, #632]	; (8002508 <sampling+0xb78>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	499d      	ldr	r1, [pc, #628]	; (800250c <sampling+0xb7c>)
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4403      	add	r3, r0
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80022a8:	f102 0214 	add.w	r2, r2, #20
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	601a      	str	r2, [r3, #0]
		freq_temp=lfo_accu[l][i_frac]; // 0-255 limit + above zero
 80022b0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80022b4:	f103 031b 	add.w	r3, r3, #27
 80022b8:	781a      	ldrb	r2, [r3, #0]
 80022ba:	4b93      	ldr	r3, [pc, #588]	; (8002508 <sampling+0xb78>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	4992      	ldr	r1, [pc, #584]	; (800250c <sampling+0xb7c>)
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4403      	add	r3, r0
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80022d6:	f102 0214 	add.w	r2, r2, #20
 80022da:	6013      	str	r3, [r2, #0]
		freq_temp=freq_temp*0.000383495;  // 0-255 , chang this for depth
 80022dc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80022e0:	f103 0314 	add.w	r3, r3, #20
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	f7fe fa05 	bl	80006f4 <__aeabi_f2d>
 80022ea:	a383      	add	r3, pc, #524	; (adr r3, 80024f8 <sampling+0xb68>)
 80022ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f0:	f7fd ff72 	bl	80001d8 <__aeabi_dmul>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	f7fe fa52 	bl	80007a4 <__aeabi_d2f>
 8002300:	4603      	mov	r3, r0
 8002302:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002306:	f102 0214 	add.w	r2, r2, #20
 800230a:	6013      	str	r3, [r2, #0]
		freq2_temp =arm_sin_f32(freq_temp); // seems ok   , cmsis is ok
 800230c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002310:	f103 0314 	add.w	r3, r3, #20
 8002314:	ed93 0a00 	vldr	s0, [r3]
 8002318:	f007 fa46 	bl	80097a8 <arm_sin_f32>
 800231c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002320:	f103 031c 	add.w	r3, r3, #28
 8002324:	ed83 0a00 	vstr	s0, [r3]
		freq_temp=freq2_temp*LFO[l].depth*51;   // depth
 8002328:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800232c:	f103 031b 	add.w	r3, r3, #27
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	4a77      	ldr	r2, [pc, #476]	; (8002510 <sampling+0xb80>)
 8002334:	211a      	movs	r1, #26
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	3301      	adds	r3, #1
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	ee07 3a90 	vmov	s15, r3
 8002344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002348:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800234c:	f103 031c 	add.w	r3, r3, #28
 8002350:	edd3 7a00 	vldr	s15, [r3]
 8002354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002358:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8002514 <sampling+0xb84>
 800235c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002360:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002364:	f103 0314 	add.w	r3, r3, #20
 8002368:	edc3 7a00 	vstr	s15, [r3]
		if (freq_temp>8195)  freq_temp=8195;
 800236c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002370:	f103 0314 	add.w	r3, r3, #20
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002518 <sampling+0xb88>
 800237c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002384:	dd05      	ble.n	8002392 <sampling+0xa02>
 8002386:	4b65      	ldr	r3, [pc, #404]	; (800251c <sampling+0xb8c>)
 8002388:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800238c:	f102 0214 	add.w	r2, r2, #20
 8002390:	6013      	str	r3, [r2, #0]
		if (freq_temp<-8195)  freq_temp=-8195;   // clip to 13bit
 8002392:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002396:	f103 0314 	add.w	r3, r3, #20
 800239a:	edd3 7a00 	vldr	s15, [r3]
 800239e:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8002520 <sampling+0xb90>
 80023a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023aa:	d505      	bpl.n	80023b8 <sampling+0xa28>
 80023ac:	4b5d      	ldr	r3, [pc, #372]	; (8002524 <sampling+0xb94>)
 80023ae:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80023b2:	f102 0214 	add.w	r2, r2, #20
 80023b6:	6013      	str	r3, [r2, #0]
		lfo_out[l] [i_frac]=freq_temp+8195; // ok now     , 8 steps per i loop , 14 bit
 80023b8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80023bc:	f103 0314 	add.w	r3, r3, #20
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002518 <sampling+0xb88>
 80023c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023cc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80023d0:	f103 031b 	add.w	r3, r3, #27
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	4b4c      	ldr	r3, [pc, #304]	; (8002508 <sampling+0xb78>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461c      	mov	r4, r3
 80023dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023e0:	ee17 3a90 	vmov	r3, s15
 80023e4:	b298      	uxth	r0, r3
 80023e6:	4950      	ldr	r1, [pc, #320]	; (8002528 <sampling+0xb98>)
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4423      	add	r3, r4
 80023f2:	4602      	mov	r2, r0
 80023f4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		LFO[l].out[i_frac]=lfo_out[l] [i_frac];  // just copy for now
 80023f8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80023fc:	f103 031b 	add.w	r3, r3, #27
 8002400:	7819      	ldrb	r1, [r3, #0]
 8002402:	4b41      	ldr	r3, [pc, #260]	; (8002508 <sampling+0xb78>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	461d      	mov	r5, r3
 8002408:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800240c:	f103 031b 	add.w	r3, r3, #27
 8002410:	781a      	ldrb	r2, [r3, #0]
 8002412:	4b3d      	ldr	r3, [pc, #244]	; (8002508 <sampling+0xb78>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	461c      	mov	r4, r3
 8002418:	4843      	ldr	r0, [pc, #268]	; (8002528 <sampling+0xb98>)
 800241a:	460b      	mov	r3, r1
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	442b      	add	r3, r5
 8002424:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8002428:	4939      	ldr	r1, [pc, #228]	; (8002510 <sampling+0xb80>)
 800242a:	4613      	mov	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	4423      	add	r3, r4
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	440b      	add	r3, r1
 800243a:	4602      	mov	r2, r0
 800243c:	80da      	strh	r2, [r3, #6]
		for (l=0;l<10;l++){   //current lfo setup , messy
 800243e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002442:	f103 031b 	add.w	r3, r3, #27
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	3301      	adds	r3, #1
 800244a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800244e:	f102 021b 	add.w	r2, r2, #27
 8002452:	7013      	strb	r3, [r2, #0]
 8002454:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002458:	f103 031b 	add.w	r3, r3, #27
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b09      	cmp	r3, #9
 8002460:	f67f ae74 	bls.w	800214c <sampling+0x7bc>
		} // lfo gen : 0=f1 , 1=tempo,2=pitch


			freq_pointer[0] [i_frac]=lfo_out [0][i_frac]*0.00006435; // problem was selecting accu instead of out , good now
 8002464:	4b28      	ldr	r3, [pc, #160]	; (8002508 <sampling+0xb78>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	4b2f      	ldr	r3, [pc, #188]	; (8002528 <sampling+0xb98>)
 800246c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe f92d 	bl	80006d0 <__aeabi_i2d>
 8002476:	a322      	add	r3, pc, #136	; (adr r3, 8002500 <sampling+0xb70>)
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	f7fd feac 	bl	80001d8 <__aeabi_dmul>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4920      	ldr	r1, [pc, #128]	; (8002508 <sampling+0xb78>)
 8002486:	7809      	ldrb	r1, [r1, #0]
 8002488:	460c      	mov	r4, r1
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f7fe f989 	bl	80007a4 <__aeabi_d2f>
 8002492:	4602      	mov	r2, r0
 8002494:	4925      	ldr	r1, [pc, #148]	; (800252c <sampling+0xb9c>)
 8002496:	00a3      	lsls	r3, r4, #2
 8002498:	440b      	add	r3, r1
 800249a:	601a      	str	r2, [r3, #0]
		freq_pointer[2] [i_frac] =lfo_out [3][i_frac]*0.00006435;; // filter lfos
 800249c:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <sampling+0xb78>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	4a21      	ldr	r2, [pc, #132]	; (8002528 <sampling+0xb98>)
 80024a2:	331e      	adds	r3, #30
 80024a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe f911 	bl	80006d0 <__aeabi_i2d>
 80024ae:	a314      	add	r3, pc, #80	; (adr r3, 8002500 <sampling+0xb70>)
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	f7fd fe90 	bl	80001d8 <__aeabi_dmul>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4912      	ldr	r1, [pc, #72]	; (8002508 <sampling+0xb78>)
 80024be:	7809      	ldrb	r1, [r1, #0]
 80024c0:	460c      	mov	r4, r1
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	f7fe f96d 	bl	80007a4 <__aeabi_d2f>
 80024ca:	4602      	mov	r2, r0
 80024cc:	4917      	ldr	r1, [pc, #92]	; (800252c <sampling+0xb9c>)
 80024ce:	f104 0312 	add.w	r3, r4, #18
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	601a      	str	r2, [r3, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <sampling+0xba0>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	3301      	adds	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <sampling+0xba0>)
 80024e2:	801a      	strh	r2, [r3, #0]
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <sampling+0xba0>)
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ec:	f4ff ac6b 	bcc.w	8001dc6 <sampling+0x436>
// filter loop
int32_t play_holder1[512];    // data banks
int32_t play_holder2[512];
uint8_t sine_zero;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 80024f0:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <sampling+0xba0>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	801a      	strh	r2, [r3, #0]
 80024f6:	e0fd      	b.n	80026f4 <sampling+0xd64>
 80024f8:	7bb1a72c 	.word	0x7bb1a72c
 80024fc:	3f3921fa 	.word	0x3f3921fa
 8002500:	94fd52a7 	.word	0x94fd52a7
 8002504:	3f10de74 	.word	0x3f10de74
 8002508:	20002230 	.word	0x20002230
 800250c:	20002234 	.word	0x20002234
 8002510:	20002e30 	.word	0x20002e30
 8002514:	424c0000 	.word	0x424c0000
 8002518:	46000c00 	.word	0x46000c00
 800251c:	46000c00 	.word	0x46000c00
 8002520:	c6000c00 	.word	0xc6000c00
 8002524:	c6000c00 	.word	0xc6000c00
 8002528:	200023c4 	.word	0x200023c4
 800252c:	200021a0 	.word	0x200021a0
 8002530:	20000cc4 	.word	0x20000cc4
	i_total=i+sample_pointB;
 8002534:	4b7f      	ldr	r3, [pc, #508]	; (8002734 <sampling+0xda4>)
 8002536:	881a      	ldrh	r2, [r3, #0]
 8002538:	4b7f      	ldr	r3, [pc, #508]	; (8002738 <sampling+0xda8>)
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	4413      	add	r3, r2
 800253e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002542:	f102 0202 	add.w	r2, r2, #2
 8002546:	8013      	strh	r3, [r2, #0]
	i_frac=(i>>6);
 8002548:	4b7a      	ldr	r3, [pc, #488]	; (8002734 <sampling+0xda4>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	099b      	lsrs	r3, r3, #6
 800254e:	b29b      	uxth	r3, r3
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4b7a      	ldr	r3, [pc, #488]	; (800273c <sampling+0xdac>)
 8002554:	701a      	strb	r2, [r3, #0]
// every step   1,110,928   >>20  ,per note
// New oscillators , sync, trigger input , waveshape ,zero cross
	sample_accus[0] = sample_accus[0] + note[0].tuned; //careful with signed bit shift,better compare
 8002556:	4b7a      	ldr	r3, [pc, #488]	; (8002740 <sampling+0xdb0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a7a      	ldr	r2, [pc, #488]	; (8002744 <sampling+0xdb4>)
 800255c:	89d2      	ldrh	r2, [r2, #14]
 800255e:	4413      	add	r3, r2
 8002560:	4a77      	ldr	r2, [pc, #476]	; (8002740 <sampling+0xdb0>)
 8002562:	6013      	str	r3, [r2, #0]

	if (sample_accus[0]>524287) sample_accus[0] =-sample_accus[0] ; // faster >  than &  ,strange
 8002564:	4b76      	ldr	r3, [pc, #472]	; (8002740 <sampling+0xdb0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800256c:	db04      	blt.n	8002578 <sampling+0xbe8>
 800256e:	4b74      	ldr	r3, [pc, #464]	; (8002740 <sampling+0xdb0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	425b      	negs	r3, r3
 8002574:	4a72      	ldr	r2, [pc, #456]	; (8002740 <sampling+0xdb0>)
 8002576:	6013      	str	r3, [r2, #0]



	sample_accus[1] = sample_accus[1] + note[1].tuned;  // normal adder full volume
 8002578:	4b71      	ldr	r3, [pc, #452]	; (8002740 <sampling+0xdb0>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	4a71      	ldr	r2, [pc, #452]	; (8002744 <sampling+0xdb4>)
 800257e:	8bd2      	ldrh	r2, [r2, #30]
 8002580:	4413      	add	r3, r2
 8002582:	4a6f      	ldr	r2, [pc, #444]	; (8002740 <sampling+0xdb0>)
 8002584:	6053      	str	r3, [r2, #4]
		//	if (!(note[].pitch[0]))   sample_accus[1] =0;  // turn off with vel now , maybe use mask
			if (sample_accus[1]>524287) sample_accus[1] =-sample_accus[1] ; // faster >  than &  ,strange
 8002586:	4b6e      	ldr	r3, [pc, #440]	; (8002740 <sampling+0xdb0>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800258e:	db04      	blt.n	800259a <sampling+0xc0a>
 8002590:	4b6b      	ldr	r3, [pc, #428]	; (8002740 <sampling+0xdb0>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	425b      	negs	r3, r3
 8002596:	4a6a      	ldr	r2, [pc, #424]	; (8002740 <sampling+0xdb0>)
 8002598:	6053      	str	r3, [r2, #4]

			sample_accus[2] = sample_accus[2] + note[2].tuned;
 800259a:	4b69      	ldr	r3, [pc, #420]	; (8002740 <sampling+0xdb0>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	4a69      	ldr	r2, [pc, #420]	; (8002744 <sampling+0xdb4>)
 80025a0:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80025a2:	4413      	add	r3, r2
 80025a4:	4a66      	ldr	r2, [pc, #408]	; (8002740 <sampling+0xdb0>)
 80025a6:	6093      	str	r3, [r2, #8]
			//		if (!(note[].pitch[0]))   sample_accus[2] =0;  // turn off with vel now , maybe use mask
					if (sample_accus[2]>524287) sample_accus[2] =-sample_accus[2] ; // faster >  than &  ,strange
 80025a8:	4b65      	ldr	r3, [pc, #404]	; (8002740 <sampling+0xdb0>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025b0:	db04      	blt.n	80025bc <sampling+0xc2c>
 80025b2:	4b63      	ldr	r3, [pc, #396]	; (8002740 <sampling+0xdb0>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	425b      	negs	r3, r3
 80025b8:	4a61      	ldr	r2, [pc, #388]	; (8002740 <sampling+0xdb0>)
 80025ba:	6093      	str	r3, [r2, #8]

					sample_accus[3] = sample_accus[3] + note[3].tuned; // bouncing somewhere
 80025bc:	4b60      	ldr	r3, [pc, #384]	; (8002740 <sampling+0xdb0>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	4a60      	ldr	r2, [pc, #384]	; (8002744 <sampling+0xdb4>)
 80025c2:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 80025c4:	4413      	add	r3, r2
 80025c6:	4a5e      	ldr	r2, [pc, #376]	; (8002740 <sampling+0xdb0>)
 80025c8:	60d3      	str	r3, [r2, #12]
					//sample_accus[3] = sample_accus[3] +4000;
					//	if (!(note[].pitch[0]))   sample_accus[3] =0;  // turn off with vel now , maybe use mask
							if (sample_accus[3]>524287) sample_accus[3] =-sample_accus[3] ; // faster >  than &  ,strange
 80025ca:	4b5d      	ldr	r3, [pc, #372]	; (8002740 <sampling+0xdb0>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025d2:	db04      	blt.n	80025de <sampling+0xc4e>
 80025d4:	4b5a      	ldr	r3, [pc, #360]	; (8002740 <sampling+0xdb0>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	425b      	negs	r3, r3
 80025da:	4a59      	ldr	r2, [pc, #356]	; (8002740 <sampling+0xdb0>)
 80025dc:	60d3      	str	r3, [r2, #12]

							sample_accus[4] = sample_accus[4] + note[4].tuned;
 80025de:	4b58      	ldr	r3, [pc, #352]	; (8002740 <sampling+0xdb0>)
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	4a58      	ldr	r2, [pc, #352]	; (8002744 <sampling+0xdb4>)
 80025e4:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
 80025e8:	4413      	add	r3, r2
 80025ea:	4a55      	ldr	r2, [pc, #340]	; (8002740 <sampling+0xdb0>)
 80025ec:	6113      	str	r3, [r2, #16]
								//	if (!(note[].pitch[4]))   sample_accus[4] =0;  // turn off with vel now , maybe use mask
									if (sample_accus[4]>524287) sample_accus[4] =-sample_accus[4] ; // faster >  than &  ,strange
 80025ee:	4b54      	ldr	r3, [pc, #336]	; (8002740 <sampling+0xdb0>)
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025f6:	db04      	blt.n	8002602 <sampling+0xc72>
 80025f8:	4b51      	ldr	r3, [pc, #324]	; (8002740 <sampling+0xdb0>)
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	425b      	negs	r3, r3
 80025fe:	4a50      	ldr	r2, [pc, #320]	; (8002740 <sampling+0xdb0>)
 8002600:	6113      	str	r3, [r2, #16]

									sample_Accu[2] = 0;sample_Accu[0] =0;sample_Accu[3] =0; //all zeroed
 8002602:	4b51      	ldr	r3, [pc, #324]	; (8002748 <sampling+0xdb8>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	4b4f      	ldr	r3, [pc, #316]	; (8002748 <sampling+0xdb8>)
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	4b4e      	ldr	r3, [pc, #312]	; (8002748 <sampling+0xdb8>)
 8002610:	2200      	movs	r2, #0
 8002612:	60da      	str	r2, [r3, #12]
									//if (sample_accus[2]<0) sample_Accu[2]=+sample_accus[2]; else sample_Accu[2]=sample_accus[2]; // convert to triangle ?
									sample_Accu[0]=sample_accus[2]>>7; // needs cut a bit
 8002614:	4b4a      	ldr	r3, [pc, #296]	; (8002740 <sampling+0xdb0>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	11db      	asrs	r3, r3, #7
 800261a:	4a4b      	ldr	r2, [pc, #300]	; (8002748 <sampling+0xdb8>)
 800261c:	6013      	str	r3, [r2, #0]

							sample_Accu[0] = ((sine_out+sample_Accu[0])*cross_fade[1]);   // sine input plus other
 800261e:	4b4a      	ldr	r3, [pc, #296]	; (8002748 <sampling+0xdb8>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4b4a      	ldr	r3, [pc, #296]	; (800274c <sampling+0xdbc>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4413      	add	r3, r2
 8002628:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800262c:	f102 0215 	add.w	r2, r2, #21
 8002630:	7812      	ldrb	r2, [r2, #0]
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	4a44      	ldr	r2, [pc, #272]	; (8002748 <sampling+0xdb8>)
 8002638:	6013      	str	r3, [r2, #0]
							//sample_Accu[0] = (sine_out*cross_fade[1]);  // sine out only
									//if (sample_accus[3]<0) sample_Accu[3]=+sample_accus[3]; else sample_Accu[3]=sample_accus[3]; // convert to triangle
									sample_Accu[3]=sample_accus[3];
 800263a:	4b41      	ldr	r3, [pc, #260]	; (8002740 <sampling+0xdb0>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	4a42      	ldr	r2, [pc, #264]	; (8002748 <sampling+0xdb8>)
 8002640:	60d3      	str	r3, [r2, #12]
									sample_Accu[2] = (sample_Accu[3]*cross_fade[2]);			//27b, 2 out f2  might do a crossfade here using pot 3
 8002642:	4b41      	ldr	r3, [pc, #260]	; (8002748 <sampling+0xdb8>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800264a:	f102 0216 	add.w	r2, r2, #22
 800264e:	7812      	ldrb	r2, [r2, #0]
 8002650:	fb02 f303 	mul.w	r3, r2, r3
 8002654:	4a3c      	ldr	r2, [pc, #240]	; (8002748 <sampling+0xdb8>)
 8002656:	6093      	str	r3, [r2, #8]
									//	sample_Accu[5] = sample_Accu[4]+ (sample_accus[4]*4);			// drum and envelope

	//	sample_Accu=sample_Accu-(1<<21);


if (sine_counterB==0) 	sine_temp2=note[5].tuned;
 8002658:	4b3d      	ldr	r3, [pc, #244]	; (8002750 <sampling+0xdc0>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d104      	bne.n	800266a <sampling+0xcda>
 8002660:	4b38      	ldr	r3, [pc, #224]	; (8002744 <sampling+0xdb4>)
 8002662:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8002666:	4b3b      	ldr	r3, [pc, #236]	; (8002754 <sampling+0xdc4>)
 8002668:	801a      	strh	r2, [r3, #0]

	sine_counterB=sine_counterB+sine_temp2 ;  // sine up counter per cycle , however sine adder needs to wait
 800266a:	4b39      	ldr	r3, [pc, #228]	; (8002750 <sampling+0xdc0>)
 800266c:	881a      	ldrh	r2, [r3, #0]
 800266e:	4b39      	ldr	r3, [pc, #228]	; (8002754 <sampling+0xdc4>)
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	4413      	add	r3, r2
 8002674:	b29a      	uxth	r2, r3
 8002676:	4b36      	ldr	r3, [pc, #216]	; (8002750 <sampling+0xdc0>)
 8002678:	801a      	strh	r2, [r3, #0]
	if (sine_counterB>>7) sine_zero=0; else sine_zero=1;
 800267a:	4b35      	ldr	r3, [pc, #212]	; (8002750 <sampling+0xdc0>)
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	09db      	lsrs	r3, r3, #7
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d006      	beq.n	8002694 <sampling+0xd04>
 8002686:	2300      	movs	r3, #0
 8002688:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800268c:	f102 0201 	add.w	r2, r2, #1
 8002690:	7013      	strb	r3, [r2, #0]
 8002692:	e005      	b.n	80026a0 <sampling+0xd10>
 8002694:	2301      	movs	r3, #1
 8002696:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800269a:	f102 0201 	add.w	r2, r2, #1
 800269e:	7013      	strb	r3, [r2, #0]

if (sine_counterB>(sine_length<<5)) sine_counterB=0; //fixed for now
 80026a0:	4b2b      	ldr	r3, [pc, #172]	; (8002750 <sampling+0xdc0>)
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <sampling+0xdc8>)
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	015b      	lsls	r3, r3, #5
 80026ac:	429a      	cmp	r2, r3
 80026ae:	dd02      	ble.n	80026b6 <sampling+0xd26>
 80026b0:	4b27      	ldr	r3, [pc, #156]	; (8002750 <sampling+0xdc0>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	801a      	strh	r2, [r3, #0]
sine_count(); // calc sine   distortion out when hcagning note
 80026b6:	f000 faf9 	bl	8002cac <sine_count>
play_holder1[i]=sample_Accu[0];  // write to bank
 80026ba:	4b1e      	ldr	r3, [pc, #120]	; (8002734 <sampling+0xda4>)
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	4619      	mov	r1, r3
 80026c0:	4b21      	ldr	r3, [pc, #132]	; (8002748 <sampling+0xdb8>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80026c8:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 80026cc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
play_holder2[i]=sample_Accu[2];
 80026d0:	4b18      	ldr	r3, [pc, #96]	; (8002734 <sampling+0xda4>)
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <sampling+0xdb8>)
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80026de:	4619      	mov	r1, r3
 80026e0:	0083      	lsls	r3, r0, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	f843 2c80 	str.w	r2, [r3, #-128]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <sampling+0xda4>)
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	3301      	adds	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	4b10      	ldr	r3, [pc, #64]	; (8002734 <sampling+0xda4>)
 80026f2:	801a      	strh	r2, [r3, #0]
 80026f4:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <sampling+0xda4>)
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026fc:	f4ff af1a 	bcc.w	8002534 <sampling+0xba4>



//uint16_t* click=&input_holder[0];

uint16_t crap_hold=2000;
 8002700:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002704:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002708:	f102 0206 	add.w	r2, r2, #6
 800270c:	8013      	strh	r3, [r2, #0]

				uint16_t crap_hold1=2000;
 800270e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002712:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002716:	f102 020e 	add.w	r2, r2, #14
 800271a:	8013      	strh	r3, [r2, #0]
				uint16_t crap_hold2=2000;
 800271c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002720:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002724:	f102 0204 	add.w	r2, r2, #4
 8002728:	8013      	strh	r3, [r2, #0]




for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 800272a:	4b02      	ldr	r3, [pc, #8]	; (8002734 <sampling+0xda4>)
 800272c:	2200      	movs	r2, #0
 800272e:	801a      	strh	r2, [r3, #0]
 8002730:	e05a      	b.n	80027e8 <sampling+0xe58>
 8002732:	bf00      	nop
 8002734:	20000cc4 	.word	0x20000cc4
 8002738:	20000cc2 	.word	0x20000cc2
 800273c:	20002230 	.word	0x20002230
 8002740:	200020f4 	.word	0x200020f4
 8002744:	200039c0 	.word	0x200039c0
 8002748:	20000ca4 	.word	0x20000ca4
 800274c:	20000c8c 	.word	0x20000c8c
 8002750:	20000c8a 	.word	0x20000c8a
 8002754:	20000c90 	.word	0x20000c90
 8002758:	20000142 	.word	0x20000142
			{




				crap_hold=((input_holder[i]*7)+crap_hold2)>>3;
 800275c:	4b61      	ldr	r3, [pc, #388]	; (80028e4 <sampling+0xf54>)
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	4b61      	ldr	r3, [pc, #388]	; (80028e8 <sampling+0xf58>)
 8002764:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002768:	461a      	mov	r2, r3
 800276a:	4613      	mov	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	1a9a      	subs	r2, r3, r2
 8002770:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002774:	f103 0304 	add.w	r3, r3, #4
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	4413      	add	r3, r2
 800277c:	10db      	asrs	r3, r3, #3
 800277e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002782:	f102 0206 	add.w	r2, r2, #6
 8002786:	8013      	strh	r3, [r2, #0]
					crap_hold1=((crap_hold*7)+crap_hold1)>>3;
 8002788:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800278c:	f103 0306 	add.w	r3, r3, #6
 8002790:	881a      	ldrh	r2, [r3, #0]
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	1a9a      	subs	r2, r3, r2
 8002798:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800279c:	f103 030e 	add.w	r3, r3, #14
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	10db      	asrs	r3, r3, #3
 80027a6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80027aa:	f102 020e 	add.w	r2, r2, #14
 80027ae:	8013      	strh	r3, [r2, #0]
					input_holder[i] =((crap_hold1*7)+crap_hold2)>>3;
 80027b0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80027b4:	f103 030e 	add.w	r3, r3, #14
 80027b8:	881a      	ldrh	r2, [r3, #0]
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	1a9a      	subs	r2, r3, r2
 80027c0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80027c4:	f103 0304 	add.w	r3, r3, #4
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	10d9      	asrs	r1, r3, #3
 80027ce:	4b45      	ldr	r3, [pc, #276]	; (80028e4 <sampling+0xf54>)
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	b289      	uxth	r1, r1
 80027d6:	4b44      	ldr	r3, [pc, #272]	; (80028e8 <sampling+0xf58>)
 80027d8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 80027dc:	4b41      	ldr	r3, [pc, #260]	; (80028e4 <sampling+0xf54>)
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	3301      	adds	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	4b3f      	ldr	r3, [pc, #252]	; (80028e4 <sampling+0xf54>)
 80027e6:	801a      	strh	r2, [r3, #0]
 80027e8:	4b3e      	ldr	r3, [pc, #248]	; (80028e4 <sampling+0xf54>)
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027f0:	d3b4      	bcc.n	800275c <sampling+0xdcc>
}
*/



for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 80027f2:	4b3c      	ldr	r3, [pc, #240]	; (80028e4 <sampling+0xf54>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	801a      	strh	r2, [r3, #0]
 80027f8:	e228      	b.n	8002c4c <sampling+0x12bc>
	i_total=i+sample_pointB;
 80027fa:	4b3a      	ldr	r3, [pc, #232]	; (80028e4 <sampling+0xf54>)
 80027fc:	881a      	ldrh	r2, [r3, #0]
 80027fe:	4b3b      	ldr	r3, [pc, #236]	; (80028ec <sampling+0xf5c>)
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	4413      	add	r3, r2
 8002804:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002808:	f102 0202 	add.w	r2, r2, #2
 800280c:	8013      	strh	r3, [r2, #0]
i_frac=(i>>6);
 800280e:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <sampling+0xf54>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	099b      	lsrs	r3, r3, #6
 8002814:	b29b      	uxth	r3, r3
 8002816:	b2da      	uxtb	r2, r3
 8002818:	4b35      	ldr	r3, [pc, #212]	; (80028f0 <sampling+0xf60>)
 800281a:	701a      	strb	r2, [r3, #0]

// filter 1
if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 800281c:	4b31      	ldr	r3, [pc, #196]	; (80028e4 <sampling+0xf54>)
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	b29b      	uxth	r3, r3
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800282a:	443b      	add	r3, r7
 800282c:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8002830:	4a2c      	ldr	r2, [pc, #176]	; (80028e4 <sampling+0xf54>)
 8002832:	8812      	ldrh	r2, [r2, #0]
 8002834:	f002 021f 	and.w	r2, r2, #31
 8002838:	2101      	movs	r1, #1
 800283a:	fa01 f202 	lsl.w	r2, r1, r2
 800283e:	4293      	cmp	r3, r2
 8002840:	d10f      	bne.n	8002862 <sampling+0xed2>
 8002842:	4b2c      	ldr	r3, [pc, #176]	; (80028f4 <sampling+0xf64>)
 8002844:	2200      	movs	r2, #0
 8002846:	711a      	strb	r2, [r3, #4]
 8002848:	4b2b      	ldr	r3, [pc, #172]	; (80028f8 <sampling+0xf68>)
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	3301      	adds	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	4b29      	ldr	r3, [pc, #164]	; (80028f8 <sampling+0xf68>)
 8002852:	801a      	strh	r2, [r3, #0]
 8002854:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <sampling+0xf68>)
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800285c:	b29a      	uxth	r2, r3
 800285e:	4b26      	ldr	r3, [pc, #152]	; (80028f8 <sampling+0xf68>)
 8002860:	801a      	strh	r2, [r3, #0]
//sample_Accu[1]=(sample_Accu[1]-2020)<<14; // shift to correct level



//sample_Accu[1]=sample_Accu[1]-60000;
sample_Accu[1]=play_holder1[i];  // sine input
 8002862:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <sampling+0xf54>)
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800286c:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 8002870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002874:	4a21      	ldr	r2, [pc, #132]	; (80028fc <sampling+0xf6c>)
 8002876:	6053      	str	r3, [r2, #4]
sample_Accu[3]=play_holder2[i] >>5; // sine
 8002878:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <sampling+0xf54>)
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8002888:	115b      	asrs	r3, r3, #5
 800288a:	4a1c      	ldr	r2, [pc, #112]	; (80028fc <sampling+0xf6c>)
 800288c:	60d3      	str	r3, [r2, #12]

// this section is about 100 tmr cycles

freq_point[0]=freq_pointer[0] [i_frac];; // load up coeffs
 800288e:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <sampling+0xf60>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	4a1b      	ldr	r2, [pc, #108]	; (8002900 <sampling+0xf70>)
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a1a      	ldr	r2, [pc, #104]	; (8002904 <sampling+0xf74>)
 800289c:	6013      	str	r3, [r2, #0]
//freq_point[1]=freq_pointer[1] [i_frac];
freq_point[2]=freq_pointer[2] [i_frac];  // ok , array was too short
 800289e:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <sampling+0xf60>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	4a17      	ldr	r2, [pc, #92]	; (8002900 <sampling+0xf70>)
 80028a4:	3312      	adds	r3, #18
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a15      	ldr	r2, [pc, #84]	; (8002904 <sampling+0xf74>)
 80028ae:	6093      	str	r3, [r2, #8]
//freq_point[3]=freq_pointer[3] [i_frac];
//freq_point[0]=0.5;  //was ok with this
	//	freq_point[2]=0.5;


adsr_level[3] = adsr_lut	[i>>1];
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <sampling+0xf54>)
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	085b      	lsrs	r3, r3, #1
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	4a13      	ldr	r2, [pc, #76]	; (8002908 <sampling+0xf78>)
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a12      	ldr	r2, [pc, #72]	; (800290c <sampling+0xf7c>)
 80028c2:	60d3      	str	r3, [r2, #12]


if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <sampling+0xf74>)
 80028c6:	edd3 7a00 	vldr	s15, [r3]
 80028ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d6:	dd1b      	ble.n	8002910 <sampling+0xf80>
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <sampling+0xf74>)
 80028da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e022      	b.n	8002928 <sampling+0xf98>
 80028e2:	bf00      	nop
 80028e4:	20000cc4 	.word	0x20000cc4
 80028e8:	20002a14 	.word	0x20002a14
 80028ec:	20000cc2 	.word	0x20000cc2
 80028f0:	20002230 	.word	0x20002230
 80028f4:	20002f34 	.word	0x20002f34
 80028f8:	20002232 	.word	0x20002232
 80028fc:	20000ca4 	.word	0x20000ca4
 8002900:	200021a0 	.word	0x200021a0
 8002904:	20002190 	.word	0x20002190
 8002908:	20001cd8 	.word	0x20001cd8
 800290c:	200029d0 	.word	0x200029d0
 8002910:	4bb3      	ldr	r3, [pc, #716]	; (8002be0 <sampling+0x1250>)
 8002912:	edd3 7a00 	vldr	s15, [r3]
 8002916:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800291a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291e:	d503      	bpl.n	8002928 <sampling+0xf98>
 8002920:	4baf      	ldr	r3, [pc, #700]	; (8002be0 <sampling+0x1250>)
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
		//freq_point[0]=0.50;
		freq_point[1]=1-freq_point[0];
 8002928:	4bad      	ldr	r3, [pc, #692]	; (8002be0 <sampling+0x1250>)
 800292a:	edd3 7a00 	vldr	s15, [r3]
 800292e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002936:	4baa      	ldr	r3, [pc, #680]	; (8002be0 <sampling+0x1250>)
 8002938:	edc3 7a01 	vstr	s15, [r3, #4]
		sample_Accu[1] = sample_Accu[1]>>13;
 800293c:	4ba9      	ldr	r3, [pc, #676]	; (8002be4 <sampling+0x1254>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	135b      	asrs	r3, r3, #13
 8002942:	4aa8      	ldr	r2, [pc, #672]	; (8002be4 <sampling+0x1254>)
 8002944:	6053      	str	r3, [r2, #4]

		//int16_t  ADSR[0].buffer_temp2=lfo_out [1] [i>>6];

		//ADSR[0].buffer_temp2=ADSR[0].buffer_temp2-8195;
		//sample_Accu[1] = sample_Accu[1] *lfo_out [0] [i>>6];     // vol lfo
		sample_Accu[1] = sample_Accu[1] *LFO[0].out[i>>6];
 8002946:	4ba7      	ldr	r3, [pc, #668]	; (8002be4 <sampling+0x1254>)
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	4ba7      	ldr	r3, [pc, #668]	; (8002be8 <sampling+0x1258>)
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	099b      	lsrs	r3, r3, #6
 8002950:	b29b      	uxth	r3, r3
 8002952:	49a6      	ldr	r1, [pc, #664]	; (8002bec <sampling+0x125c>)
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	440b      	add	r3, r1
 8002958:	88db      	ldrh	r3, [r3, #6]
 800295a:	fb02 f303 	mul.w	r3, r2, r3
 800295e:	4aa1      	ldr	r2, [pc, #644]	; (8002be4 <sampling+0x1254>)
 8002960:	6053      	str	r3, [r2, #4]



		//	filter_accus[1]=sample_Accu[1]+((filter_hold[0])*0.5); // saw
	//	filter_accus[1]=	filter_accus[1]*adsr_level[3][i_frac];
		filter_accus[1]=	filter_accus[1]*adsr_level[3];
 8002962:	4ba3      	ldr	r3, [pc, #652]	; (8002bf0 <sampling+0x1260>)
 8002964:	ed93 7a01 	vldr	s14, [r3, #4]
 8002968:	4ba2      	ldr	r3, [pc, #648]	; (8002bf4 <sampling+0x1264>)
 800296a:	edd3 7a03 	vldr	s15, [r3, #12]
 800296e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002972:	4b9f      	ldr	r3, [pc, #636]	; (8002bf0 <sampling+0x1260>)
 8002974:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);					// maybe allow bandpass insted of lpf
 8002978:	4b9d      	ldr	r3, [pc, #628]	; (8002bf0 <sampling+0x1260>)
 800297a:	ed93 7a01 	vldr	s14, [r3, #4]
 800297e:	4b98      	ldr	r3, [pc, #608]	; (8002be0 <sampling+0x1250>)
 8002980:	edd3 7a00 	vldr	s15, [r3]
 8002984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002988:	4b99      	ldr	r3, [pc, #612]	; (8002bf0 <sampling+0x1260>)
 800298a:	edd3 6a02 	vldr	s13, [r3, #8]
 800298e:	4b94      	ldr	r3, [pc, #592]	; (8002be0 <sampling+0x1250>)
 8002990:	edd3 7a01 	vldr	s15, [r3, #4]
 8002994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800299c:	4b94      	ldr	r3, [pc, #592]	; (8002bf0 <sampling+0x1260>)
 800299e:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);
 80029a2:	4b93      	ldr	r3, [pc, #588]	; (8002bf0 <sampling+0x1260>)
 80029a4:	ed93 7a02 	vldr	s14, [r3, #8]
 80029a8:	4b8d      	ldr	r3, [pc, #564]	; (8002be0 <sampling+0x1250>)
 80029aa:	edd3 7a00 	vldr	s15, [r3]
 80029ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b2:	4b8f      	ldr	r3, [pc, #572]	; (8002bf0 <sampling+0x1260>)
 80029b4:	edd3 6a03 	vldr	s13, [r3, #12]
 80029b8:	4b89      	ldr	r3, [pc, #548]	; (8002be0 <sampling+0x1250>)
 80029ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80029be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c6:	4b8a      	ldr	r3, [pc, #552]	; (8002bf0 <sampling+0x1260>)
 80029c8:	edc3 7a03 	vstr	s15, [r3, #12]
		filter_accus[4]=(filter_accus[3]*freq_point[0])+(filter_accus[4]*freq_point[1]);
 80029cc:	4b88      	ldr	r3, [pc, #544]	; (8002bf0 <sampling+0x1260>)
 80029ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80029d2:	4b83      	ldr	r3, [pc, #524]	; (8002be0 <sampling+0x1250>)
 80029d4:	edd3 7a00 	vldr	s15, [r3]
 80029d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029dc:	4b84      	ldr	r3, [pc, #528]	; (8002bf0 <sampling+0x1260>)
 80029de:	edd3 6a04 	vldr	s13, [r3, #16]
 80029e2:	4b7f      	ldr	r3, [pc, #508]	; (8002be0 <sampling+0x1250>)
 80029e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80029e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f0:	4b7f      	ldr	r3, [pc, #508]	; (8002bf0 <sampling+0x1260>)
 80029f2:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[0])+(filter_accus[5]*freq_point[1]);
 80029f6:	4b7e      	ldr	r3, [pc, #504]	; (8002bf0 <sampling+0x1260>)
 80029f8:	ed93 7a04 	vldr	s14, [r3, #16]
 80029fc:	4b78      	ldr	r3, [pc, #480]	; (8002be0 <sampling+0x1250>)
 80029fe:	edd3 7a00 	vldr	s15, [r3]
 8002a02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a06:	4b7a      	ldr	r3, [pc, #488]	; (8002bf0 <sampling+0x1260>)
 8002a08:	edd3 6a05 	vldr	s13, [r3, #20]
 8002a0c:	4b74      	ldr	r3, [pc, #464]	; (8002be0 <sampling+0x1250>)
 8002a0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a1a:	4b75      	ldr	r3, [pc, #468]	; (8002bf0 <sampling+0x1260>)
 8002a1c:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_hold[0]=(filter_accus[5]+filter_accus[11])*0.5; //half sample , nice
 8002a20:	4b73      	ldr	r3, [pc, #460]	; (8002bf0 <sampling+0x1260>)
 8002a22:	ed93 7a05 	vldr	s14, [r3, #20]
 8002a26:	4b72      	ldr	r3, [pc, #456]	; (8002bf0 <sampling+0x1260>)
 8002a28:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a38:	4b6f      	ldr	r3, [pc, #444]	; (8002bf8 <sampling+0x1268>)
 8002a3a:	edc3 7a00 	vstr	s15, [r3]
		sample_Accu[0] =filter_accus[5]; // out
 8002a3e:	4b6c      	ldr	r3, [pc, #432]	; (8002bf0 <sampling+0x1260>)
 8002a40:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a48:	ee17 2a90 	vmov	r2, s15
 8002a4c:	4b65      	ldr	r3, [pc, #404]	; (8002be4 <sampling+0x1254>)
 8002a4e:	601a      	str	r2, [r3, #0]
		filter_accus[11]=filter_accus[5]; //write back new value
 8002a50:	4b67      	ldr	r3, [pc, #412]	; (8002bf0 <sampling+0x1260>)
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	4a66      	ldr	r2, [pc, #408]	; (8002bf0 <sampling+0x1260>)
 8002a56:	62d3      	str	r3, [r2, #44]	; 0x2c
		//sample_Accu[0] =sample_Accu[1];

		//filter 2
		sample_Accu[3]=play_holder2[i] >>5; // sine
 8002a58:	4b63      	ldr	r3, [pc, #396]	; (8002be8 <sampling+0x1258>)
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8002a68:	115b      	asrs	r3, r3, #5
 8002a6a:	4a5e      	ldr	r2, [pc, #376]	; (8002be4 <sampling+0x1254>)
 8002a6c:	60d3      	str	r3, [r2, #12]


				if (freq_point[2]>1) freq_point[2]=1;
 8002a6e:	4b5c      	ldr	r3, [pc, #368]	; (8002be0 <sampling+0x1250>)
 8002a70:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a80:	dd03      	ble.n	8002a8a <sampling+0x10fa>
 8002a82:	4b57      	ldr	r3, [pc, #348]	; (8002be0 <sampling+0x1250>)
 8002a84:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a88:	609a      	str	r2, [r3, #8]

				freq_point[3]=1-freq_point[2];
 8002a8a:	4b55      	ldr	r3, [pc, #340]	; (8002be0 <sampling+0x1250>)
 8002a8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a98:	4b51      	ldr	r3, [pc, #324]	; (8002be0 <sampling+0x1250>)
 8002a9a:	edc3 7a03 	vstr	s15, [r3, #12]
				filter_accus[6]=sample_Accu[3];
 8002a9e:	4b51      	ldr	r3, [pc, #324]	; (8002be4 <sampling+0x1254>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	ee07 3a90 	vmov	s15, r3
 8002aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aaa:	4b51      	ldr	r3, [pc, #324]	; (8002bf0 <sampling+0x1260>)
 8002aac:	edc3 7a06 	vstr	s15, [r3, #24]
			//	filter_accus[6]= filter_accus[6]*adsr_level[3]; // add adsr envelope

				filter_accus[7]=(filter_accus[6]*freq_point[2])+(filter_accus[7]*freq_point[3]);
 8002ab0:	4b4f      	ldr	r3, [pc, #316]	; (8002bf0 <sampling+0x1260>)
 8002ab2:	ed93 7a06 	vldr	s14, [r3, #24]
 8002ab6:	4b4a      	ldr	r3, [pc, #296]	; (8002be0 <sampling+0x1250>)
 8002ab8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002abc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ac0:	4b4b      	ldr	r3, [pc, #300]	; (8002bf0 <sampling+0x1260>)
 8002ac2:	edd3 6a07 	vldr	s13, [r3, #28]
 8002ac6:	4b46      	ldr	r3, [pc, #280]	; (8002be0 <sampling+0x1250>)
 8002ac8:	edd3 7a03 	vldr	s15, [r3, #12]
 8002acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad4:	4b46      	ldr	r3, [pc, #280]	; (8002bf0 <sampling+0x1260>)
 8002ad6:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[2])+(filter_accus[8]*freq_point[3]);
 8002ada:	4b45      	ldr	r3, [pc, #276]	; (8002bf0 <sampling+0x1260>)
 8002adc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ae0:	4b3f      	ldr	r3, [pc, #252]	; (8002be0 <sampling+0x1250>)
 8002ae2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ae6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aea:	4b41      	ldr	r3, [pc, #260]	; (8002bf0 <sampling+0x1260>)
 8002aec:	edd3 6a08 	vldr	s13, [r3, #32]
 8002af0:	4b3b      	ldr	r3, [pc, #236]	; (8002be0 <sampling+0x1250>)
 8002af2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002af6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002afa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002afe:	4b3c      	ldr	r3, [pc, #240]	; (8002bf0 <sampling+0x1260>)
 8002b00:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[2])+(filter_accus[9]*freq_point[3]);
 8002b04:	4b3a      	ldr	r3, [pc, #232]	; (8002bf0 <sampling+0x1260>)
 8002b06:	ed93 7a08 	vldr	s14, [r3, #32]
 8002b0a:	4b35      	ldr	r3, [pc, #212]	; (8002be0 <sampling+0x1250>)
 8002b0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b14:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <sampling+0x1260>)
 8002b16:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002b1a:	4b31      	ldr	r3, [pc, #196]	; (8002be0 <sampling+0x1250>)
 8002b1c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b28:	4b31      	ldr	r3, [pc, #196]	; (8002bf0 <sampling+0x1260>)
 8002b2a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				filter_accus[10]=(filter_accus[9]*freq_point[2])+(filter_accus[10]*freq_point[3]);
 8002b2e:	4b30      	ldr	r3, [pc, #192]	; (8002bf0 <sampling+0x1260>)
 8002b30:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002b34:	4b2a      	ldr	r3, [pc, #168]	; (8002be0 <sampling+0x1250>)
 8002b36:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b3e:	4b2c      	ldr	r3, [pc, #176]	; (8002bf0 <sampling+0x1260>)
 8002b40:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002b44:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <sampling+0x1250>)
 8002b46:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b52:	4b27      	ldr	r3, [pc, #156]	; (8002bf0 <sampling+0x1260>)
 8002b54:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_hold[1]=(filter_accus[10]+filter_accus[12])*0.5; //half sample
 8002b58:	4b25      	ldr	r3, [pc, #148]	; (8002bf0 <sampling+0x1260>)
 8002b5a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002b5e:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <sampling+0x1260>)
 8002b60:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b68:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b70:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <sampling+0x1268>)
 8002b72:	edc3 7a01 	vstr	s15, [r3, #4]
				sample_Accu[2] =filter_accus[10]; //out
 8002b76:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <sampling+0x1260>)
 8002b78:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002b7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b80:	ee17 2a90 	vmov	r2, s15
 8002b84:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <sampling+0x1254>)
 8002b86:	609a      	str	r2, [r3, #8]
				filter_accus[12]=filter_accus[10]; //write back new value
 8002b88:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <sampling+0x1260>)
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	4a18      	ldr	r2, [pc, #96]	; (8002bf0 <sampling+0x1260>)
 8002b8e:	6313      	str	r3, [r2, #48]	; 0x30


filter_Accu=0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002b96:	f102 0210 	add.w	r2, r2, #16
 8002b9a:	6013      	str	r3, [r2, #0]
//filter_Accu=(sample_Accu[0]+sample_Accu[2])>>8; //filter + drum out


//filter_Accu=(sample_Accu[1]+sample_Accu[3])>>8; //filter + drum out ,clean out
 filter_Accu=sample_Accu[1]>>7;
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <sampling+0x1254>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	11db      	asrs	r3, r3, #7
 8002ba2:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002ba6:	f102 0210 	add.w	r2, r2, #16
 8002baa:	6013      	str	r3, [r2, #0]

// filter_Accu=sample_Accu[2]>>11;
//filter_Accu=(sample_Accu[1]>>7)+(sample_Accu[3]>>8); //filter + drum out
 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8002bac:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <sampling+0x126c>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2bc7      	cmp	r3, #199	; 0xc7
 8002bb2:	d005      	beq.n	8002bc0 <sampling+0x1230>
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <sampling+0x126c>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <sampling+0x126c>)
 8002bbe:	701a      	strb	r2, [r3, #0]

 if (filter_Accu>0xFFFF) filter_Accu=0xFFFF; else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 8002bc0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002bc4:	f103 0310 	add.w	r3, r3, #16
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bce:	db17      	blt.n	8002c00 <sampling+0x1270>
 8002bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bd4:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002bd8:	f102 0210 	add.w	r2, r2, #16
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	e01d      	b.n	8002c1c <sampling+0x128c>
 8002be0:	20002190 	.word	0x20002190
 8002be4:	20000ca4 	.word	0x20000ca4
 8002be8:	20000cc4 	.word	0x20000cc4
 8002bec:	20002e30 	.word	0x20002e30
 8002bf0:	20002140 	.word	0x20002140
 8002bf4:	200029d0 	.word	0x200029d0
 8002bf8:	2000217c 	.word	0x2000217c
 8002bfc:	2000210c 	.word	0x2000210c
 8002c00:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002c04:	f103 0310 	add.w	r3, r3, #16
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c0e:	dc05      	bgt.n	8002c1c <sampling+0x128c>
 8002c10:	4b1f      	ldr	r3, [pc, #124]	; (8002c90 <sampling+0x1300>)
 8002c12:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002c16:	f102 0210 	add.w	r2, r2, #16
 8002c1a:	6013      	str	r3, [r2, #0]


 play_sample[i_total]=(filter_Accu>>6)+1024;   // final output disable for now 2544
 8002c1c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002c20:	f103 0310 	add.w	r3, r3, #16
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	119b      	asrs	r3, r3, #6
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002c2e:	f103 0302 	add.w	r3, r3, #2
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c38:	b291      	uxth	r1, r2
 8002c3a:	4a16      	ldr	r2, [pc, #88]	; (8002c94 <sampling+0x1304>)
 8002c3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 8002c40:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <sampling+0x1308>)
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	3301      	adds	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <sampling+0x1308>)
 8002c4a:	801a      	strh	r2, [r3, #0]
 8002c4c:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <sampling+0x1308>)
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c54:	f4ff add1 	bcc.w	80027fa <sampling+0xe6a>
} // end of filer


//time_final=time_proc;   // in samples

if (bank_write) {time_final[1]=time_proc; error_count++;};  // tick timer in samples ,normal max 20 but some 230
 8002c58:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <sampling+0x130c>)
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d009      	beq.n	8002c74 <sampling+0x12e4>
 8002c60:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <sampling+0x1310>)
 8002c62:	881a      	ldrh	r2, [r3, #0]
 8002c64:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <sampling+0x1314>)
 8002c66:	805a      	strh	r2, [r3, #2]
 8002c68:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <sampling+0x1318>)
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <sampling+0x1318>)
 8002c72:	801a      	strh	r2, [r3, #0]
if (time_proc>100)  	time_final[0]=time_proc;
 8002c74:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <sampling+0x1310>)
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	2b64      	cmp	r3, #100	; 0x64
 8002c7a:	d903      	bls.n	8002c84 <sampling+0x12f4>
 8002c7c:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <sampling+0x1310>)
 8002c7e:	881a      	ldrh	r2, [r3, #0]
 8002c80:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <sampling+0x1314>)
 8002c82:	801a      	strh	r2, [r3, #0]


//bank_write=0;   /// total 320 sample time (39khz)
}
 8002c84:	bf00      	nop
 8002c86:	f507 5784 	add.w	r7, r7, #4224	; 0x1080
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	ffff0001 	.word	0xffff0001
 8002c94:	20000cc8 	.word	0x20000cc8
 8002c98:	20000cc4 	.word	0x20000cc4
 8002c9c:	200001b2 	.word	0x200001b2
 8002ca0:	20002e2c 	.word	0x20002e2c
 8002ca4:	20002e28 	.word	0x20002e28
 8002ca8:	20002e2e 	.word	0x20002e2e

08002cac <sine_count>:
mask_result=mask_tempB &1;


}

void sine_count(void) {         // sine_out is the output 9  bit  , works
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
int32_t sine_tempA;
int32_t sine_tempB;
int8_t sine_frac;


sine_counter=(sine_counterB>>5);  // up countr controlled by counter
 8002cb2:	4b2f      	ldr	r3, [pc, #188]	; (8002d70 <sine_count+0xc4>)
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	4b2e      	ldr	r3, [pc, #184]	; (8002d74 <sine_count+0xc8>)
 8002cbc:	801a      	strh	r2, [r3, #0]
sine_frac=sine_counterB & 31;  // grab last 5 bits, actual position for linear interpol,fractional
 8002cbe:	4b2c      	ldr	r3, [pc, #176]	; (8002d70 <sine_count+0xc4>)
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	b25b      	sxtb	r3, r3
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	73fb      	strb	r3, [r7, #15]

	if (sine_counter>sine_length) sine_counter = sine_length;		// seems to be faster than using a for loop to calculate both values
 8002cca:	4b2a      	ldr	r3, [pc, #168]	; (8002d74 <sine_count+0xc8>)
 8002ccc:	881a      	ldrh	r2, [r3, #0]
 8002cce:	4b2a      	ldr	r3, [pc, #168]	; (8002d78 <sine_count+0xcc>)
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d903      	bls.n	8002cde <sine_count+0x32>
 8002cd6:	4b28      	ldr	r3, [pc, #160]	; (8002d78 <sine_count+0xcc>)
 8002cd8:	881a      	ldrh	r2, [r3, #0]
 8002cda:	4b26      	ldr	r3, [pc, #152]	; (8002d74 <sine_count+0xc8>)
 8002cdc:	801a      	strh	r2, [r3, #0]

	sine_out = sine_block[sine_counter];  // 0- 40000
 8002cde:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <sine_count+0xc8>)
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4b25      	ldr	r3, [pc, #148]	; (8002d7c <sine_count+0xd0>)
 8002ce6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002cea:	461a      	mov	r2, r3
 8002cec:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <sine_count+0xd4>)
 8002cee:	601a      	str	r2, [r3, #0]
	sine_tempA=sine_out; // grab first value , needs to be always plus
 8002cf0:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <sine_count+0xd4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60bb      	str	r3, [r7, #8]
	sine_tempA=sine_tempA-20000; //convert to signed
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002cfc:	3b20      	subs	r3, #32
 8002cfe:	60bb      	str	r3, [r7, #8]

	sine_counter++;
 8002d00:	4b1c      	ldr	r3, [pc, #112]	; (8002d74 <sine_count+0xc8>)
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	3301      	adds	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <sine_count+0xc8>)
 8002d0a:	801a      	strh	r2, [r3, #0]
	if (sine_counter>=sine_length)  sine_counter=0; // set to sample length
 8002d0c:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <sine_count+0xc8>)
 8002d0e:	881a      	ldrh	r2, [r3, #0]
 8002d10:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <sine_count+0xcc>)
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d302      	bcc.n	8002d1e <sine_count+0x72>
 8002d18:	4b16      	ldr	r3, [pc, #88]	; (8002d74 <sine_count+0xc8>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	801a      	strh	r2, [r3, #0]

			sine_out = sine_block[sine_counter];  // grab second value
 8002d1e:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <sine_count+0xc8>)
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <sine_count+0xd0>)
 8002d26:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <sine_count+0xd4>)
 8002d2e:	601a      	str	r2, [r3, #0]

		sine_tempB=sine_out; // grab first value
 8002d30:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <sine_count+0xd4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB-20000;  // convert to signed and +256 to -256
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002d3c:	3b20      	subs	r3, #32
 8002d3e:	607b      	str	r3, [r7, #4]

			sine_tempB=	sine_tempB-sine_tempA;   // calculate fraction then add
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB>>5; // div 32 or 32 upsample
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	115b      	asrs	r3, r3, #5
 8002d4c:	607b      	str	r3, [r7, #4]

			sine_tempB=sine_tempB*sine_frac; // mult by steps , can overshoot !!
 8002d4e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	fb02 f303 	mul.w	r3, r2, r3
 8002d58:	607b      	str	r3, [r7, #4]

			sine_out=(sine_tempA+sine_tempB);   // add back to start value
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4413      	add	r3, r2
 8002d60:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <sine_count+0xd4>)
 8002d62:	6013      	str	r3, [r2, #0]
			//sine_tempA=sine_tempA; //needs

			//sine_out=sine_tempA;


}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	20000c8a 	.word	0x20000c8a
 8002d74:	20000c88 	.word	0x20000c88
 8002d78:	20000142 	.word	0x20000142
 8002d7c:	0800a194 	.word	0x0800a194
 8002d80:	20000c8c 	.word	0x20000c8c
 8002d84:	00000000 	.word	0x00000000

08002d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d8a:	b0a3      	sub	sp, #140	; 0x8c
 8002d8c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d8e:	f001 fafb 	bl	8004388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d92:	f000 fcc3 	bl	800371c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d96:	f000 ff89 	bl	8003cac <MX_GPIO_Init>
  MX_DMA_Init();
 8002d9a:	f000 ff67 	bl	8003c6c <MX_DMA_Init>
  MX_ADC1_Init();
 8002d9e:	f000 fd27 	bl	80037f0 <MX_ADC1_Init>
  MX_SPI2_Init();
 8002da2:	f000 fe0f 	bl	80039c4 <MX_SPI2_Init>
  MX_TIM3_Init();
 8002da6:	f000 fe97 	bl	8003ad8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002daa:	f000 ff0b 	bl	8003bc4 <MX_TIM4_Init>
  MX_I2C2_Init();
 8002dae:	f000 fda5 	bl	80038fc <MX_I2C2_Init>
  MX_TIM2_Init();
 8002db2:	f000 fe3d 	bl	8003a30 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002db6:	f000 fdcf 	bl	8003958 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8002dba:	4bbf      	ldr	r3, [pc, #764]	; (80030b8 <main+0x330>)
 8002dbc:	66fb      	str	r3, [r7, #108]	; 0x6c



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2); // write to register hspi2
 8002dbe:	48bf      	ldr	r0, [pc, #764]	; (80030bc <main+0x334>)
 8002dc0:	f004 fe86 	bl	8007ad0 <HAL_SPI_Init>
  HAL_SPI_Init(&hspi1); // write to register hspi2
 8002dc4:	48be      	ldr	r0, [pc, #760]	; (80030c0 <main+0x338>)
 8002dc6:	f004 fe83 	bl	8007ad0 <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8002dca:	48be      	ldr	r0, [pc, #760]	; (80030c4 <main+0x33c>)
 8002dcc:	f005 fcd2 	bl	8008774 <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 8002dd0:	4bbd      	ldr	r3, [pc, #756]	; (80030c8 <main+0x340>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 8002dd6:	48bd      	ldr	r0, [pc, #756]	; (80030cc <main+0x344>)
 8002dd8:	f005 fc72 	bl	80086c0 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 8002ddc:	48bc      	ldr	r0, [pc, #752]	; (80030d0 <main+0x348>)
 8002dde:	f005 fc6f 	bl	80086c0 <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8002de2:	2108      	movs	r1, #8
 8002de4:	48b7      	ldr	r0, [pc, #732]	; (80030c4 <main+0x33c>)
 8002de6:	f005 fd81 	bl	80088ec <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 8002dea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dee:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002df2:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 8002df4:	48b7      	ldr	r0, [pc, #732]	; (80030d4 <main+0x34c>)
 8002df6:	f001 fba1 	bl	800453c <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8002dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dfe:	49b6      	ldr	r1, [pc, #728]	; (80030d8 <main+0x350>)
 8002e00:	48b4      	ldr	r0, [pc, #720]	; (80030d4 <main+0x34c>)
 8002e02:	f001 fcdb 	bl	80047bc <HAL_ADC_Start_DMA>


HAL_I2C_MspInit(&hi2c2);
 8002e06:	48b5      	ldr	r0, [pc, #724]	; (80030dc <main+0x354>)
 8002e08:	f001 f88a 	bl	8003f20 <HAL_I2C_MspInit>
uint8_t send_spi1[5]={0x90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
 8002e0c:	4ab4      	ldr	r2, [pc, #720]	; (80030e0 <main+0x358>)
 8002e0e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e16:	6018      	str	r0, [r3, #0]
 8002e18:	3304      	adds	r3, #4
 8002e1a:	7019      	strb	r1, [r3, #0]





HAL_Delay(5);
 8002e1c:	2005      	movs	r0, #5
 8002e1e:	f001 fb25 	bl	800446c <HAL_Delay>


send_spi1[0]=0x06; //enable write  , only lasts for single operation
 8002e22:	2306      	movs	r3, #6
 8002e24:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2110      	movs	r1, #16
 8002e2c:	48ad      	ldr	r0, [pc, #692]	; (80030e4 <main+0x35c>)
 8002e2e:	f003 fa31 	bl	8006294 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002e32:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	48a0      	ldr	r0, [pc, #640]	; (80030c0 <main+0x338>)
 8002e3e:	f004 fed0 	bl	8007be2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002e42:	2201      	movs	r2, #1
 8002e44:	2110      	movs	r1, #16
 8002e46:	48a7      	ldr	r0, [pc, #668]	; (80030e4 <main+0x35c>)
 8002e48:	f003 fa24 	bl	8006294 <HAL_GPIO_WritePin>
HAL_Delay(5);
 8002e4c:	2005      	movs	r0, #5
 8002e4e:	f001 fb0d 	bl	800446c <HAL_Delay>
send_spi1[0]=0x20; //sector erase
 8002e52:	2320      	movs	r3, #32
 8002e54:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
send_spi1[1]=0; //24bit address msb
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
send_spi1[2]=0; //24bit address
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
send_spi1[3]=1; //24bit address lsb
 8002e64:	2301      	movs	r3, #1
 8002e66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2110      	movs	r1, #16
 8002e6e:	489d      	ldr	r0, [pc, #628]	; (80030e4 <main+0x35c>)
 8002e70:	f003 fa10 	bl	8006294 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works
 8002e74:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002e78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	4890      	ldr	r0, [pc, #576]	; (80030c0 <main+0x338>)
 8002e80:	f004 feaf 	bl	8007be2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002e84:	2201      	movs	r2, #1
 8002e86:	2110      	movs	r1, #16
 8002e88:	4896      	ldr	r0, [pc, #600]	; (80030e4 <main+0x35c>)
 8002e8a:	f003 fa03 	bl	8006294 <HAL_GPIO_WritePin>


send_spi1[0]=0x05; //read status register  if writing
 8002e8e:	2305      	movs	r3, #5
 8002e90:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
send_spi1[1]=0; //24bit address msb
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
status_reg[1]=1; // set busy on
 8002e9a:	4b93      	ldr	r3, [pc, #588]	; (80030e8 <main+0x360>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	705a      	strb	r2, [r3, #1]

while (status_reg[1]&1){								// check if write busy
 8002ea0:	e012      	b.n	8002ec8 <main+0x140>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2110      	movs	r1, #16
 8002ea6:	488f      	ldr	r0, [pc, #572]	; (80030e4 <main+0x35c>)
 8002ea8:	f003 f9f4 	bl	8006294 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 8002eac:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002eb0:	23c8      	movs	r3, #200	; 0xc8
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	4a8c      	ldr	r2, [pc, #560]	; (80030e8 <main+0x360>)
 8002eb8:	4881      	ldr	r0, [pc, #516]	; (80030c0 <main+0x338>)
 8002eba:	f005 f8df 	bl	800807c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	2110      	movs	r1, #16
 8002ec2:	4888      	ldr	r0, [pc, #544]	; (80030e4 <main+0x35c>)
 8002ec4:	f003 f9e6 	bl	8006294 <HAL_GPIO_WritePin>
while (status_reg[1]&1){								// check if write busy
 8002ec8:	4b87      	ldr	r3, [pc, #540]	; (80030e8 <main+0x360>)
 8002eca:	785b      	ldrb	r3, [r3, #1]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e6      	bne.n	8002ea2 <main+0x11a>
}

send_spi1[0]=0x06; //enable write again
 8002ed4:	2306      	movs	r3, #6
 8002ed6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002eda:	2200      	movs	r2, #0
 8002edc:	2110      	movs	r1, #16
 8002ede:	4881      	ldr	r0, [pc, #516]	; (80030e4 <main+0x35c>)
 8002ee0:	f003 f9d8 	bl	8006294 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002ee4:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002ee8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eec:	2201      	movs	r2, #1
 8002eee:	4874      	ldr	r0, [pc, #464]	; (80030c0 <main+0x338>)
 8002ef0:	f004 fe77 	bl	8007be2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	2110      	movs	r1, #16
 8002ef8:	487a      	ldr	r0, [pc, #488]	; (80030e4 <main+0x35c>)
 8002efa:	f003 f9cb 	bl	8006294 <HAL_GPIO_WritePin>
HAL_Delay(5);
 8002efe:	2005      	movs	r0, #5
 8002f00:	f001 fab4 	bl	800446c <HAL_Delay>




//uint8_t temp_spi1[]={0x02,0,0,1,"H","E","L","L","O"," ","W","O","R","L","D",250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
uint8_t temp_spi1[]={0x02,0,0,1,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
 8002f04:	4b79      	ldr	r3, [pc, #484]	; (80030ec <main+0x364>)
 8002f06:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002f0a:	461d      	mov	r5, r3
 8002f0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f10:	682b      	ldr	r3, [r5, #0]
 8002f12:	8023      	strh	r3, [r4, #0]
memcpy  (send_spi1,temp_spi1, 14);   // copy new array over old
 8002f14:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002f18:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f1c:	220e      	movs	r2, #14
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f006 fcaa 	bl	8009878 <memcpy>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002f24:	2200      	movs	r2, #0
 8002f26:	2110      	movs	r1, #16
 8002f28:	486e      	ldr	r0, [pc, #440]	; (80030e4 <main+0x35c>)
 8002f2a:	f003 f9b3 	bl	8006294 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 14, 1000);  //address,page program
 8002f2e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f36:	220e      	movs	r2, #14
 8002f38:	4861      	ldr	r0, [pc, #388]	; (80030c0 <main+0x338>)
 8002f3a:	f004 fe52 	bl	8007be2 <HAL_SPI_Transmit>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002f3e:	2201      	movs	r2, #1
 8002f40:	2110      	movs	r1, #16
 8002f42:	4868      	ldr	r0, [pc, #416]	; (80030e4 <main+0x35c>)
 8002f44:	f003 f9a6 	bl	8006294 <HAL_GPIO_WritePin>




HAL_Delay(25);
 8002f48:	2019      	movs	r0, #25
 8002f4a:	f001 fa8f 	bl	800446c <HAL_Delay>
send_spi1[0]=0x04; //disable write
 8002f4e:	2304      	movs	r3, #4
 8002f50:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002f54:	2200      	movs	r2, #0
 8002f56:	2110      	movs	r1, #16
 8002f58:	4862      	ldr	r0, [pc, #392]	; (80030e4 <main+0x35c>)
 8002f5a:	f003 f99b 	bl	8006294 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002f5e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f66:	2201      	movs	r2, #1
 8002f68:	4855      	ldr	r0, [pc, #340]	; (80030c0 <main+0x338>)
 8002f6a:	f004 fe3a 	bl	8007be2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002f6e:	2201      	movs	r2, #1
 8002f70:	2110      	movs	r1, #16
 8002f72:	485c      	ldr	r0, [pc, #368]	; (80030e4 <main+0x35c>)
 8002f74:	f003 f98e 	bl	8006294 <HAL_GPIO_WritePin>

HAL_Delay(5);
 8002f78:	2005      	movs	r0, #5
 8002f7a:	f001 fa77 	bl	800446c <HAL_Delay>
memcpy  (send_spi1,return_spi1, 14);   // clear out
 8002f7e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f82:	220e      	movs	r2, #14
 8002f84:	495a      	ldr	r1, [pc, #360]	; (80030f0 <main+0x368>)
 8002f86:	4618      	mov	r0, r3
 8002f88:	f006 fc76 	bl	8009878 <memcpy>
send_spi1[0]=0x03; //read page 1
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
send_spi1[1]=0; //24bit address msb
 8002f92:	2300      	movs	r3, #0
 8002f94:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
send_spi1[2]=0; //24bit address
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
send_spi1[3]=1; //24bit address lsb
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2110      	movs	r1, #16
 8002fa8:	484e      	ldr	r0, [pc, #312]	; (80030e4 <main+0x35c>)
 8002faa:	f003 f973 	bl	8006294 <HAL_GPIO_WritePin>

HAL_SPI_Transmit (&hspi1, send_spi1, 4, 100);
 8002fae:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002fb2:	2364      	movs	r3, #100	; 0x64
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	4842      	ldr	r0, [pc, #264]	; (80030c0 <main+0x338>)
 8002fb8:	f004 fe13 	bl	8007be2 <HAL_SPI_Transmit>
HAL_SPI_Receive (&hspi1, return_spi1, 10, 100);   // works fine
 8002fbc:	2364      	movs	r3, #100	; 0x64
 8002fbe:	220a      	movs	r2, #10
 8002fc0:	494b      	ldr	r1, [pc, #300]	; (80030f0 <main+0x368>)
 8002fc2:	483f      	ldr	r0, [pc, #252]	; (80030c0 <main+0x338>)
 8002fc4:	f004 ff49 	bl	8007e5a <HAL_SPI_Receive>

//HAL_SPI_TransmitReceive(&hspi1, send_spi1, return_spi1,14, 100);  // better in case skip , 4 bytes is null then data , slow
//HAL_Delay(5);

//HAL_SPI_Receive(&hspi1, return_spi1, 12, 1000);  // reverse msb ?
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002fc8:	2201      	movs	r2, #1
 8002fca:	2110      	movs	r1, #16
 8002fcc:	4845      	ldr	r0, [pc, #276]	; (80030e4 <main+0x35c>)
 8002fce:	f003 f961 	bl	8006294 <HAL_GPIO_WritePin>



HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002fd2:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4838      	ldr	r0, [pc, #224]	; (80030c0 <main+0x338>)
 8002fde:	f004 fe00 	bl	8007be2 <HAL_SPI_Transmit>

uint8_t potSource2[64];



for(i=0;i<5;i++){     // 256
 8002fe2:	4b44      	ldr	r3, [pc, #272]	; (80030f4 <main+0x36c>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	801a      	strh	r2, [r3, #0]
 8002fe8:	e02f      	b.n	800304a <main+0x2c2>
HAL_I2C_Mem_Read(&hi2c2, 160, 64+(i*64), 2,&potSource2, 64,1000);		// all good readin eeprom  values
 8002fea:	4b42      	ldr	r3, [pc, #264]	; (80030f4 <main+0x36c>)
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	019b      	lsls	r3, r3, #6
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ffa:	9302      	str	r3, [sp, #8]
 8002ffc:	2340      	movs	r3, #64	; 0x40
 8002ffe:	9301      	str	r3, [sp, #4]
 8003000:	f107 0308 	add.w	r3, r7, #8
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	2302      	movs	r3, #2
 8003008:	21a0      	movs	r1, #160	; 0xa0
 800300a:	4834      	ldr	r0, [pc, #208]	; (80030dc <main+0x354>)
 800300c:	f003 fb9a 	bl	8006744 <HAL_I2C_Mem_Read>

memcpy (potSource+(i*64),potSource2,sizeof(potSource2));   //this works  ok now
 8003010:	4b38      	ldr	r3, [pc, #224]	; (80030f4 <main+0x36c>)
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	019b      	lsls	r3, r3, #6
 8003016:	461a      	mov	r2, r3
 8003018:	4b37      	ldr	r3, [pc, #220]	; (80030f8 <main+0x370>)
 800301a:	4413      	add	r3, r2
 800301c:	f107 0408 	add.w	r4, r7, #8
 8003020:	469c      	mov	ip, r3
 8003022:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8003026:	4665      	mov	r5, ip
 8003028:	4626      	mov	r6, r4
 800302a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800302c:	6028      	str	r0, [r5, #0]
 800302e:	6069      	str	r1, [r5, #4]
 8003030:	60aa      	str	r2, [r5, #8]
 8003032:	60eb      	str	r3, [r5, #12]
 8003034:	3410      	adds	r4, #16
 8003036:	f10c 0c10 	add.w	ip, ip, #16
 800303a:	4574      	cmp	r4, lr
 800303c:	d1f3      	bne.n	8003026 <main+0x29e>
for(i=0;i<5;i++){     // 256
 800303e:	4b2d      	ldr	r3, [pc, #180]	; (80030f4 <main+0x36c>)
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	3301      	adds	r3, #1
 8003044:	b29a      	uxth	r2, r3
 8003046:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <main+0x36c>)
 8003048:	801a      	strh	r2, [r3, #0]
 800304a:	4b2a      	ldr	r3, [pc, #168]	; (80030f4 <main+0x36c>)
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	2b04      	cmp	r3, #4
 8003050:	d9cb      	bls.n	8002fea <main+0x262>


}

for(i=0;i<1024;i++){
 8003052:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <main+0x36c>)
 8003054:	2200      	movs	r2, #0
 8003056:	801a      	strh	r2, [r3, #0]
 8003058:	e024      	b.n	80030a4 <main+0x31c>
//	gfx_ram[i]=gfx_char[((i>>5)&7)+((i>>8)<<3)]; // test input fill  8*128 v+h just normal characters
	gfx_ram[i&63] [i>>6]  =gfx_char[8+(i&7)+(((i>>3)*8)&63)];
 800305a:	4b26      	ldr	r3, [pc, #152]	; (80030f4 <main+0x36c>)
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	f103 0208 	add.w	r2, r3, #8
 8003066:	4b23      	ldr	r3, [pc, #140]	; (80030f4 <main+0x36c>)
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	08db      	lsrs	r3, r3, #3
 800306c:	b29b      	uxth	r3, r3
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003074:	441a      	add	r2, r3
 8003076:	4b1f      	ldr	r3, [pc, #124]	; (80030f4 <main+0x36c>)
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800307e:	491d      	ldr	r1, [pc, #116]	; (80030f4 <main+0x36c>)
 8003080:	8809      	ldrh	r1, [r1, #0]
 8003082:	0989      	lsrs	r1, r1, #6
 8003084:	b289      	uxth	r1, r1
 8003086:	4608      	mov	r0, r1
 8003088:	491c      	ldr	r1, [pc, #112]	; (80030fc <main+0x374>)
 800308a:	5c89      	ldrb	r1, [r1, r2]
 800308c:	4a1c      	ldr	r2, [pc, #112]	; (8003100 <main+0x378>)
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	4413      	add	r3, r2
 8003092:	4403      	add	r3, r0
 8003094:	460a      	mov	r2, r1
 8003096:	701a      	strb	r2, [r3, #0]
for(i=0;i<1024;i++){
 8003098:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <main+0x36c>)
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <main+0x36c>)
 80030a2:	801a      	strh	r2, [r3, #0]
 80030a4:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <main+0x36c>)
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ac:	d3d5      	bcc.n	800305a <main+0x2d2>
//gfx_ram[i&63] [i>>6]  =250;
}



for(i=0;i<260;i++){			// write potvalues ,for display
 80030ae:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <main+0x36c>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	801a      	strh	r2, [r3, #0]
 80030b4:	e037      	b.n	8003126 <main+0x39e>
 80030b6:	bf00      	nop
 80030b8:	0800d2f0 	.word	0x0800d2f0
 80030bc:	20003c58 	.word	0x20003c58
 80030c0:	20003c00 	.word	0x20003c00
 80030c4:	20003cf8 	.word	0x20003cf8
 80030c8:	40000400 	.word	0x40000400
 80030cc:	20003cb0 	.word	0x20003cb0
 80030d0:	20003d40 	.word	0x20003d40
 80030d4:	20003b04 	.word	0x20003b04
 80030d8:	200014d4 	.word	0x200014d4
 80030dc:	20003bac 	.word	0x20003bac
 80030e0:	08009cf8 	.word	0x08009cf8
 80030e4:	40020000 	.word	0x40020000
 80030e8:	200001dc 	.word	0x200001dc
 80030ec:	08009d00 	.word	0x08009d00
 80030f0:	20002e18 	.word	0x20002e18
 80030f4:	20000cc4 	.word	0x20000cc4
 80030f8:	20000b08 	.word	0x20000b08
 80030fc:	200003f4 	.word	0x200003f4
 8003100:	200025d0 	.word	0x200025d0
	potValues[i]=potSource[i]>>4;
 8003104:	4b92      	ldr	r3, [pc, #584]	; (8003350 <main+0x5c8>)
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	4b92      	ldr	r3, [pc, #584]	; (8003354 <main+0x5cc>)
 800310c:	5c9b      	ldrb	r3, [r3, r2]
 800310e:	4a90      	ldr	r2, [pc, #576]	; (8003350 <main+0x5c8>)
 8003110:	8812      	ldrh	r2, [r2, #0]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	b2d9      	uxtb	r1, r3
 8003116:	4b90      	ldr	r3, [pc, #576]	; (8003358 <main+0x5d0>)
 8003118:	5499      	strb	r1, [r3, r2]
for(i=0;i<260;i++){			// write potvalues ,for display
 800311a:	4b8d      	ldr	r3, [pc, #564]	; (8003350 <main+0x5c8>)
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	3301      	adds	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	4b8b      	ldr	r3, [pc, #556]	; (8003350 <main+0x5c8>)
 8003124:	801a      	strh	r2, [r3, #0]
 8003126:	4b8a      	ldr	r3, [pc, #552]	; (8003350 <main+0x5c8>)
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800312e:	d3e9      	bcc.n	8003104 <main+0x37c>
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////// variable fill

memcpy(&seq,potSource,46 );  // load from potSource
 8003130:	222e      	movs	r2, #46	; 0x2e
 8003132:	4988      	ldr	r1, [pc, #544]	; (8003354 <main+0x5cc>)
 8003134:	4889      	ldr	r0, [pc, #548]	; (800335c <main+0x5d4>)
 8003136:	f006 fb9f 	bl	8009878 <memcpy>


for(i=0;i<10;i++){
 800313a:	4b85      	ldr	r3, [pc, #532]	; (8003350 <main+0x5c8>)
 800313c:	2200      	movs	r2, #0
 800313e:	801a      	strh	r2, [r3, #0]
 8003140:	e047      	b.n	80031d2 <main+0x44a>
	if (i<8){    memcpy(&note[i],potSource+46+(i*14),14 );}  //grab note settings ,112 total , works ok
 8003142:	4b83      	ldr	r3, [pc, #524]	; (8003350 <main+0x5c8>)
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	2b07      	cmp	r3, #7
 8003148:	d812      	bhi.n	8003170 <main+0x3e8>
 800314a:	4b81      	ldr	r3, [pc, #516]	; (8003350 <main+0x5c8>)
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	4a83      	ldr	r2, [pc, #524]	; (8003360 <main+0x5d8>)
 8003152:	1898      	adds	r0, r3, r2
 8003154:	4b7e      	ldr	r3, [pc, #504]	; (8003350 <main+0x5c8>)
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	332e      	adds	r3, #46	; 0x2e
 8003164:	4a7b      	ldr	r2, [pc, #492]	; (8003354 <main+0x5cc>)
 8003166:	4413      	add	r3, r2
 8003168:	220e      	movs	r2, #14
 800316a:	4619      	mov	r1, r3
 800316c:	f006 fb84 	bl	8009878 <memcpy>

	memcpy(&LFO[i],potSource+158+(i*5),5 );  // + 50
 8003170:	4b77      	ldr	r3, [pc, #476]	; (8003350 <main+0x5c8>)
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	231a      	movs	r3, #26
 8003178:	fb02 f303 	mul.w	r3, r2, r3
 800317c:	4a79      	ldr	r2, [pc, #484]	; (8003364 <main+0x5dc>)
 800317e:	1898      	adds	r0, r3, r2
 8003180:	4b73      	ldr	r3, [pc, #460]	; (8003350 <main+0x5c8>)
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	4613      	mov	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	339e      	adds	r3, #158	; 0x9e
 800318e:	4a71      	ldr	r2, [pc, #452]	; (8003354 <main+0x5cc>)
 8003190:	4413      	add	r3, r2
 8003192:	2205      	movs	r2, #5
 8003194:	4619      	mov	r1, r3
 8003196:	f006 fb6f 	bl	8009878 <memcpy>
	memcpy(&ADSR[i],potSource+208+(i*5),5 );  // +50  ,
 800319a:	4b6d      	ldr	r3, [pc, #436]	; (8003350 <main+0x5c8>)
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	f44f 7307 	mov.w	r3, #540	; 0x21c
 80031a4:	fb02 f303 	mul.w	r3, r2, r3
 80031a8:	4a6f      	ldr	r2, [pc, #444]	; (8003368 <main+0x5e0>)
 80031aa:	1898      	adds	r0, r3, r2
 80031ac:	4b68      	ldr	r3, [pc, #416]	; (8003350 <main+0x5c8>)
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	33d0      	adds	r3, #208	; 0xd0
 80031ba:	4a66      	ldr	r2, [pc, #408]	; (8003354 <main+0x5cc>)
 80031bc:	4413      	add	r3, r2
 80031be:	2205      	movs	r2, #5
 80031c0:	4619      	mov	r1, r3
 80031c2:	f006 fb59 	bl	8009878 <memcpy>
for(i=0;i<10;i++){
 80031c6:	4b62      	ldr	r3, [pc, #392]	; (8003350 <main+0x5c8>)
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	3301      	adds	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	4b60      	ldr	r3, [pc, #384]	; (8003350 <main+0x5c8>)
 80031d0:	801a      	strh	r2, [r3, #0]
 80031d2:	4b5f      	ldr	r3, [pc, #380]	; (8003350 <main+0x5c8>)
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	2b09      	cmp	r3, #9
 80031d8:	d9b3      	bls.n	8003142 <main+0x3ba>




float tempo_hold;  // calculate tempo look up
for (i=0;i<161;i++) {
 80031da:	4b5d      	ldr	r3, [pc, #372]	; (8003350 <main+0x5c8>)
 80031dc:	2200      	movs	r2, #0
 80031de:	801a      	strh	r2, [r3, #0]
 80031e0:	e03d      	b.n	800325e <main+0x4d6>

tempo_hold=(i+180)*0.0166666666;
 80031e2:	4b5b      	ldr	r3, [pc, #364]	; (8003350 <main+0x5c8>)
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	33b4      	adds	r3, #180	; 0xb4
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fd fa71 	bl	80006d0 <__aeabi_i2d>
 80031ee:	a354      	add	r3, pc, #336	; (adr r3, 8003340 <main+0x5b8>)
 80031f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f4:	f7fc fff0 	bl	80001d8 <__aeabi_dmul>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4610      	mov	r0, r2
 80031fe:	4619      	mov	r1, r3
 8003200:	f7fd fad0 	bl	80007a4 <__aeabi_d2f>
 8003204:	4603      	mov	r3, r0
 8003206:	667b      	str	r3, [r7, #100]	; 0x64

tempo_hold=	1/tempo_hold;
 8003208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800320c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8003210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003214:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
//tempo_hold=	tempo_hold*2187.6*4;      // change for the sake of note length
tempo_hold=	tempo_hold*2187.6*1;      // change for the sake of note length
 8003218:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800321a:	f7fd fa6b 	bl	80006f4 <__aeabi_f2d>
 800321e:	a34a      	add	r3, pc, #296	; (adr r3, 8003348 <main+0x5c0>)
 8003220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003224:	f7fc ffd8 	bl	80001d8 <__aeabi_dmul>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4610      	mov	r0, r2
 800322e:	4619      	mov	r1, r3
 8003230:	f7fd fab8 	bl	80007a4 <__aeabi_d2f>
 8003234:	4603      	mov	r3, r0
 8003236:	667b      	str	r3, [r7, #100]	; 0x64
tempo_lut[i]=tempo_hold;
 8003238:	4b45      	ldr	r3, [pc, #276]	; (8003350 <main+0x5c8>)
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003246:	ee17 3a90 	vmov	r3, s15
 800324a:	b299      	uxth	r1, r3
 800324c:	4b47      	ldr	r3, [pc, #284]	; (800336c <main+0x5e4>)
 800324e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<161;i++) {
 8003252:	4b3f      	ldr	r3, [pc, #252]	; (8003350 <main+0x5c8>)
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	3301      	adds	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	4b3d      	ldr	r3, [pc, #244]	; (8003350 <main+0x5c8>)
 800325c:	801a      	strh	r2, [r3, #0]
 800325e:	4b3c      	ldr	r3, [pc, #240]	; (8003350 <main+0x5c8>)
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	2ba0      	cmp	r3, #160	; 0xa0
 8003264:	d9bd      	bls.n	80031e2 <main+0x45a>
}
isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount
 8003266:	4b42      	ldr	r3, [pc, #264]	; (8003370 <main+0x5e8>)
 8003268:	f240 223b 	movw	r2, #571	; 0x23b
 800326c:	801a      	strh	r2, [r3, #0]

noteTiming=24;
 800326e:	4b41      	ldr	r3, [pc, #260]	; (8003374 <main+0x5ec>)
 8003270:	2218      	movs	r2, #24
 8003272:	701a      	strb	r2, [r3, #0]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8003274:	4b36      	ldr	r3, [pc, #216]	; (8003350 <main+0x5c8>)
 8003276:	2200      	movs	r2, #0
 8003278:	801a      	strh	r2, [r3, #0]
 800327a:	e00b      	b.n	8003294 <main+0x50c>
	spell[i]=67;
 800327c:	4b34      	ldr	r3, [pc, #208]	; (8003350 <main+0x5c8>)
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	4b3d      	ldr	r3, [pc, #244]	; (8003378 <main+0x5f0>)
 8003284:	2143      	movs	r1, #67	; 0x43
 8003286:	5499      	strb	r1, [r3, r2]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8003288:	4b31      	ldr	r3, [pc, #196]	; (8003350 <main+0x5c8>)
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	3301      	adds	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	4b2f      	ldr	r3, [pc, #188]	; (8003350 <main+0x5c8>)
 8003292:	801a      	strh	r2, [r3, #0]
 8003294:	4b2e      	ldr	r3, [pc, #184]	; (8003350 <main+0x5c8>)
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800329c:	d3ee      	bcc.n	800327c <main+0x4f4>

}

display_fill();
 800329e:	f7fe fa4d 	bl	800173c <display_fill>
// build display, enc_lut2, works good

for (i=0;i<512;i++)	{gfx_char[i]=gfx_char[i];
 80032a2:	4b2b      	ldr	r3, [pc, #172]	; (8003350 <main+0x5c8>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	801a      	strh	r2, [r3, #0]
 80032a8:	e00f      	b.n	80032ca <main+0x542>
 80032aa:	4b29      	ldr	r3, [pc, #164]	; (8003350 <main+0x5c8>)
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	4619      	mov	r1, r3
 80032b0:	4b27      	ldr	r3, [pc, #156]	; (8003350 <main+0x5c8>)
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	4b31      	ldr	r3, [pc, #196]	; (800337c <main+0x5f4>)
 80032b8:	5c59      	ldrb	r1, [r3, r1]
 80032ba:	4b30      	ldr	r3, [pc, #192]	; (800337c <main+0x5f4>)
 80032bc:	5499      	strb	r1, [r3, r2]
 80032be:	4b24      	ldr	r3, [pc, #144]	; (8003350 <main+0x5c8>)
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	3301      	adds	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	4b22      	ldr	r3, [pc, #136]	; (8003350 <main+0x5c8>)
 80032c8:	801a      	strh	r2, [r3, #0]
 80032ca:	4b21      	ldr	r3, [pc, #132]	; (8003350 <main+0x5c8>)
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d2:	d3ea      	bcc.n	80032aa <main+0x522>


}    //font replace
//    Merge menu times   here    char , int8 ,int16  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
for (i=0;i<128;i++)	{   // fill up display data
 80032d4:	4b1e      	ldr	r3, [pc, #120]	; (8003350 <main+0x5c8>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	801a      	strh	r2, [r3, #0]
 80032da:	e00d      	b.n	80032f8 <main+0x570>

	menu_parser();
 80032dc:	f7fd fd8a 	bl	8000df4 <menu_parser>
	default_menu3[i]=64;
 80032e0:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <main+0x5c8>)
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	4b26      	ldr	r3, [pc, #152]	; (8003380 <main+0x5f8>)
 80032e8:	2140      	movs	r1, #64	; 0x40
 80032ea:	5499      	strb	r1, [r3, r2]
for (i=0;i<128;i++)	{   // fill up display data
 80032ec:	4b18      	ldr	r3, [pc, #96]	; (8003350 <main+0x5c8>)
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	4b16      	ldr	r3, [pc, #88]	; (8003350 <main+0x5c8>)
 80032f6:	801a      	strh	r2, [r3, #0]
 80032f8:	4b15      	ldr	r3, [pc, #84]	; (8003350 <main+0x5c8>)
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	2b7f      	cmp	r3, #127	; 0x7f
 80032fe:	d9ed      	bls.n	80032dc <main+0x554>

}


//   produce extra menu pages here /////////////////////////////////////////////////////////////////////////////////
uint16_t lut_temp2=0;
 8003300:	2300      	movs	r3, #0
 8003302:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
uint16_t lut_temp3=0;
 8003306:	2300      	movs	r3, #0
 8003308:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
for  (i=0;i<390;i++){					// get a few more pages
 800330c:	4b10      	ldr	r3, [pc, #64]	; (8003350 <main+0x5c8>)
 800330e:	2200      	movs	r2, #0
 8003310:	801a      	strh	r2, [r3, #0]
 8003312:	e04b      	b.n	80033ac <main+0x624>

	if (disp_lut [i>>4] [i&15] <95) lut_temp2=lut_temp2+1;    // skip space or characters
 8003314:	4b0e      	ldr	r3, [pc, #56]	; (8003350 <main+0x5c8>)
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	b29b      	uxth	r3, r3
 800331c:	461a      	mov	r2, r3
 800331e:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <main+0x5c8>)
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	4917      	ldr	r1, [pc, #92]	; (8003384 <main+0x5fc>)
 8003328:	0112      	lsls	r2, r2, #4
 800332a:	4413      	add	r3, r2
 800332c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003330:	2b5e      	cmp	r3, #94	; 0x5e
 8003332:	d829      	bhi.n	8003388 <main+0x600>
 8003334:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003338:	3301      	adds	r3, #1
 800333a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800333e:	e02f      	b.n	80033a0 <main+0x618>
 8003340:	0febdd13 	.word	0x0febdd13
 8003344:	3f911111 	.word	0x3f911111
 8003348:	33333333 	.word	0x33333333
 800334c:	40a11733 	.word	0x40a11733
 8003350:	20000cc4 	.word	0x20000cc4
 8003354:	20000b08 	.word	0x20000b08
 8003358:	20000988 	.word	0x20000988
 800335c:	20003a30 	.word	0x20003a30
 8003360:	200039c0 	.word	0x200039c0
 8003364:	20002e30 	.word	0x20002e30
 8003368:	20002f34 	.word	0x20002f34
 800336c:	2000248c 	.word	0x2000248c
 8003370:	20000c94 	.word	0x20000c94
 8003374:	20000984 	.word	0x20000984
 8003378:	20000000 	.word	0x20000000
 800337c:	200003f4 	.word	0x200003f4
 8003380:	20000374 	.word	0x20000374
 8003384:	08009d94 	.word	0x08009d94

	else {enc2_lut[lut_temp3] =i;  lut_temp3++;}     // goes to 511
 8003388:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800338c:	4a80      	ldr	r2, [pc, #512]	; (8003590 <main+0x808>)
 800338e:	8811      	ldrh	r1, [r2, #0]
 8003390:	4a80      	ldr	r2, [pc, #512]	; (8003594 <main+0x80c>)
 8003392:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003396:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800339a:	3301      	adds	r3, #1
 800339c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
for  (i=0;i<390;i++){					// get a few more pages
 80033a0:	4b7b      	ldr	r3, [pc, #492]	; (8003590 <main+0x808>)
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	3301      	adds	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	4b79      	ldr	r3, [pc, #484]	; (8003590 <main+0x808>)
 80033aa:	801a      	strh	r2, [r3, #0]
 80033ac:	4b78      	ldr	r3, [pc, #480]	; (8003590 <main+0x808>)
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 80033b4:	d3ae      	bcc.n	8003314 <main+0x58c>
}


menuSelect=0;
 80033b6:	4b78      	ldr	r3, [pc, #480]	; (8003598 <main+0x810>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 80033bc:	4b77      	ldr	r3, [pc, #476]	; (800359c <main+0x814>)
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 80033c2:	4b77      	ldr	r3, [pc, #476]	; (80035a0 <main+0x818>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	3301      	adds	r3, #1
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4b75      	ldr	r3, [pc, #468]	; (80035a0 <main+0x818>)
 80033cc:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;//
 80033ce:	4b75      	ldr	r3, [pc, #468]	; (80035a4 <main+0x81c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3301      	adds	r3, #1
 80033d4:	4a73      	ldr	r2, [pc, #460]	; (80035a4 <main+0x81c>)
 80033d6:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing

	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 80033d8:	4b72      	ldr	r3, [pc, #456]	; (80035a4 <main+0x81c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	2b06      	cmp	r3, #6
 80033e2:	d101      	bne.n	80033e8 <main+0x660>
 80033e4:	f7fd ff06 	bl	80011f4 <analoginputloopb>


if (loop_counter2==9096) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 80033e8:	4b6e      	ldr	r3, [pc, #440]	; (80035a4 <main+0x81c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f242 3288 	movw	r2, #9096	; 0x2388
 80033f0:	4293      	cmp	r3, r2
 80033f2:	f040 8089 	bne.w	8003508 <main+0x780>
	  if (mem_count==255) mem_count=0; else mem_count++;  // write to first this was moved for no logical reason ?
 80033f6:	4b6c      	ldr	r3, [pc, #432]	; (80035a8 <main+0x820>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2bff      	cmp	r3, #255	; 0xff
 80033fc:	d103      	bne.n	8003406 <main+0x67e>
 80033fe:	4b6a      	ldr	r3, [pc, #424]	; (80035a8 <main+0x820>)
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	e005      	b.n	8003412 <main+0x68a>
 8003406:	4b68      	ldr	r3, [pc, #416]	; (80035a8 <main+0x820>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	3301      	adds	r3, #1
 800340c:	b2da      	uxtb	r2, r3
 800340e:	4b66      	ldr	r3, [pc, #408]	; (80035a8 <main+0x820>)
 8003410:	701a      	strb	r2, [r3, #0]

	// read values from stored

memcpy(potSource,&seq,46); // about 46 bytes
 8003412:	222e      	movs	r2, #46	; 0x2e
 8003414:	4965      	ldr	r1, [pc, #404]	; (80035ac <main+0x824>)
 8003416:	4866      	ldr	r0, [pc, #408]	; (80035b0 <main+0x828>)
 8003418:	f006 fa2e 	bl	8009878 <memcpy>

for(i=0;i<10;i++){
 800341c:	4b5c      	ldr	r3, [pc, #368]	; (8003590 <main+0x808>)
 800341e:	2200      	movs	r2, #0
 8003420:	801a      	strh	r2, [r3, #0]
 8003422:	e047      	b.n	80034b4 <main+0x72c>
	if (i<8){    memcpy(potSource+46+(i*14),&note[i],14 );}  //grab note settings ,112 total , works
 8003424:	4b5a      	ldr	r3, [pc, #360]	; (8003590 <main+0x808>)
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	2b07      	cmp	r3, #7
 800342a:	d812      	bhi.n	8003452 <main+0x6ca>
 800342c:	4b58      	ldr	r3, [pc, #352]	; (8003590 <main+0x808>)
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	4613      	mov	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	332e      	adds	r3, #46	; 0x2e
 800343c:	4a5c      	ldr	r2, [pc, #368]	; (80035b0 <main+0x828>)
 800343e:	1898      	adds	r0, r3, r2
 8003440:	4b53      	ldr	r3, [pc, #332]	; (8003590 <main+0x808>)
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	4a5b      	ldr	r2, [pc, #364]	; (80035b4 <main+0x82c>)
 8003448:	4413      	add	r3, r2
 800344a:	220e      	movs	r2, #14
 800344c:	4619      	mov	r1, r3
 800344e:	f006 fa13 	bl	8009878 <memcpy>

	memcpy(potSource+158+(i*5),&LFO[i],5 );  // + 50
 8003452:	4b4f      	ldr	r3, [pc, #316]	; (8003590 <main+0x808>)
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	339e      	adds	r3, #158	; 0x9e
 8003460:	4a53      	ldr	r2, [pc, #332]	; (80035b0 <main+0x828>)
 8003462:	1898      	adds	r0, r3, r2
 8003464:	4b4a      	ldr	r3, [pc, #296]	; (8003590 <main+0x808>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	231a      	movs	r3, #26
 800346c:	fb02 f303 	mul.w	r3, r2, r3
 8003470:	4a51      	ldr	r2, [pc, #324]	; (80035b8 <main+0x830>)
 8003472:	4413      	add	r3, r2
 8003474:	2205      	movs	r2, #5
 8003476:	4619      	mov	r1, r3
 8003478:	f006 f9fe 	bl	8009878 <memcpy>
	memcpy(potSource+208+(i*5),&ADSR[i],5 );  // +50  ,
 800347c:	4b44      	ldr	r3, [pc, #272]	; (8003590 <main+0x808>)
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	461a      	mov	r2, r3
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	33d0      	adds	r3, #208	; 0xd0
 800348a:	4a49      	ldr	r2, [pc, #292]	; (80035b0 <main+0x828>)
 800348c:	1898      	adds	r0, r3, r2
 800348e:	4b40      	ldr	r3, [pc, #256]	; (8003590 <main+0x808>)
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8003498:	fb02 f303 	mul.w	r3, r2, r3
 800349c:	4a47      	ldr	r2, [pc, #284]	; (80035bc <main+0x834>)
 800349e:	4413      	add	r3, r2
 80034a0:	2205      	movs	r2, #5
 80034a2:	4619      	mov	r1, r3
 80034a4:	f006 f9e8 	bl	8009878 <memcpy>
for(i=0;i<10;i++){
 80034a8:	4b39      	ldr	r3, [pc, #228]	; (8003590 <main+0x808>)
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	3301      	adds	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	4b37      	ldr	r3, [pc, #220]	; (8003590 <main+0x808>)
 80034b2:	801a      	strh	r2, [r3, #0]
 80034b4:	4b36      	ldr	r3, [pc, #216]	; (8003590 <main+0x808>)
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	2b09      	cmp	r3, #9
 80034ba:	d9b3      	bls.n	8003424 <main+0x69c>

}	// copy vars into potSource

mem_buf=potSource[mem_count];
 80034bc:	4b3a      	ldr	r3, [pc, #232]	; (80035a8 <main+0x820>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	4b3b      	ldr	r3, [pc, #236]	; (80035b0 <main+0x828>)
 80034c4:	5c9a      	ldrb	r2, [r3, r2]
 80034c6:	4b3e      	ldr	r3, [pc, #248]	; (80035c0 <main+0x838>)
 80034c8:	701a      	strb	r2, [r3, #0]
//if (mem_buf>160) mem_buf=160;   // just in case , may be a problem

	HAL_I2C_Mem_Write(&hi2c2, 160, ((1+(mem_count>>6))<<6)+(mem_count&63), 2, &mem_buf, 1, 100);  // "&hi2c2"  actual register address
 80034ca:	4b37      	ldr	r3, [pc, #220]	; (80035a8 <main+0x820>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	099b      	lsrs	r3, r3, #6
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3301      	adds	r3, #1
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	019b      	lsls	r3, r3, #6
 80034da:	b29a      	uxth	r2, r3
 80034dc:	4b32      	ldr	r3, [pc, #200]	; (80035a8 <main+0x820>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	4413      	add	r3, r2
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	2364      	movs	r3, #100	; 0x64
 80034ee:	9302      	str	r3, [sp, #8]
 80034f0:	2301      	movs	r3, #1
 80034f2:	9301      	str	r3, [sp, #4]
 80034f4:	4b32      	ldr	r3, [pc, #200]	; (80035c0 <main+0x838>)
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	2302      	movs	r3, #2
 80034fa:	21a0      	movs	r1, #160	; 0xa0
 80034fc:	4831      	ldr	r0, [pc, #196]	; (80035c4 <main+0x83c>)
 80034fe:	f003 f827 	bl	8006550 <HAL_I2C_Mem_Write>
	//HAL_Delay(5); // this is slow , no bueno

	loop_counter2=0; //reset
 8003502:	4b28      	ldr	r3, [pc, #160]	; (80035a4 <main+0x81c>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

}


	  if (disp_end==1)	 {  // displaybuffer after each full screen update on spi  ,, no freezes here
 8003508:	4b2f      	ldr	r3, [pc, #188]	; (80035c8 <main+0x840>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d12a      	bne.n	8003566 <main+0x7de>

		  { if (loop_counter3)  enc2_tempc=enc2_dir; else enc2_dir=enc2_tempc; }    //hold enc till finished , this to clean up characters for now ,works ok
 8003510:	4b2e      	ldr	r3, [pc, #184]	; (80035cc <main+0x844>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d004      	beq.n	8003522 <main+0x79a>
 8003518:	4b2d      	ldr	r3, [pc, #180]	; (80035d0 <main+0x848>)
 800351a:	881a      	ldrh	r2, [r3, #0]
 800351c:	4b2d      	ldr	r3, [pc, #180]	; (80035d4 <main+0x84c>)
 800351e:	801a      	strh	r2, [r3, #0]
 8003520:	e003      	b.n	800352a <main+0x7a2>
 8003522:	4b2c      	ldr	r3, [pc, #176]	; (80035d4 <main+0x84c>)
 8003524:	881a      	ldrh	r2, [r3, #0]
 8003526:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <main+0x848>)
 8003528:	801a      	strh	r2, [r3, #0]
		  loop_counter3=!loop_counter3;  //blinker flips on each full page refresh
 800352a:	4b28      	ldr	r3, [pc, #160]	; (80035cc <main+0x844>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	bf0c      	ite	eq
 8003532:	2301      	moveq	r3, #1
 8003534:	2300      	movne	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	4b24      	ldr	r3, [pc, #144]	; (80035cc <main+0x844>)
 800353c:	701a      	strb	r2, [r3, #0]

		  for (i=0;i<16;i++) {   displayBuffer2();}
 800353e:	4b14      	ldr	r3, [pc, #80]	; (8003590 <main+0x808>)
 8003540:	2200      	movs	r2, #0
 8003542:	801a      	strh	r2, [r3, #0]
 8003544:	e007      	b.n	8003556 <main+0x7ce>
 8003546:	f7fe f925 	bl	8001794 <displayBuffer2>
 800354a:	4b11      	ldr	r3, [pc, #68]	; (8003590 <main+0x808>)
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	3301      	adds	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <main+0x808>)
 8003554:	801a      	strh	r2, [r3, #0]
 8003556:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <main+0x808>)
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	2b0f      	cmp	r3, #15
 800355c:	d9f3      	bls.n	8003546 <main+0x7be>
		  enc2_dir=enc2_tempc;
 800355e:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <main+0x84c>)
 8003560:	881a      	ldrh	r2, [r3, #0]
 8003562:	4b1b      	ldr	r3, [pc, #108]	; (80035d0 <main+0x848>)
 8003564:	801a      	strh	r2, [r3, #0]

	  }


	  if (init<6)				// after 6 its done for good   // no freeze here
 8003566:	4b1c      	ldr	r3, [pc, #112]	; (80035d8 <main+0x850>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b05      	cmp	r3, #5
 800356c:	d836      	bhi.n	80035dc <main+0x854>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 800356e:	4b08      	ldr	r3, [pc, #32]	; (8003590 <main+0x808>)
 8003570:	2200      	movs	r2, #0
 8003572:	801a      	strh	r2, [r3, #0]
 8003574:	e007      	b.n	8003586 <main+0x7fe>
 8003576:	f7fd ff39 	bl	80013ec <display_init>
 800357a:	4b05      	ldr	r3, [pc, #20]	; (8003590 <main+0x808>)
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	3301      	adds	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	4b03      	ldr	r3, [pc, #12]	; (8003590 <main+0x808>)
 8003584:	801a      	strh	r2, [r3, #0]
 8003586:	4b02      	ldr	r3, [pc, #8]	; (8003590 <main+0x808>)
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	2b05      	cmp	r3, #5
 800358c:	d9f3      	bls.n	8003576 <main+0x7ee>
 800358e:	e027      	b.n	80035e0 <main+0x858>
 8003590:	20000cc4 	.word	0x20000cc4
 8003594:	2000081c 	.word	0x2000081c
 8003598:	20000c92 	.word	0x20000c92
 800359c:	20000c96 	.word	0x20000c96
 80035a0:	20000cc0 	.word	0x20000cc0
 80035a4:	20002130 	.word	0x20002130
 80035a8:	2000212e 	.word	0x2000212e
 80035ac:	20003a30 	.word	0x20003a30
 80035b0:	20000b08 	.word	0x20000b08
 80035b4:	200039c0 	.word	0x200039c0
 80035b8:	20002e30 	.word	0x20002e30
 80035bc:	20002f34 	.word	0x20002f34
 80035c0:	20002134 	.word	0x20002134
 80035c4:	20003bac 	.word	0x20003bac
 80035c8:	20002a0e 	.word	0x20002a0e
 80035cc:	20002a0f 	.word	0x20002a0f
 80035d0:	20002116 	.word	0x20002116
 80035d4:	20002a10 	.word	0x20002a10
 80035d8:	20002125 	.word	0x20002125
} else {display_update(); }  // send spi line data every loop cycle , self contained, single 8pixel line 18*256steps
 80035dc:	f7fd ffe2 	bl	80015a4 <display_update>


	  ///////////////////////////////////////////////////////////////////////////////

	  if (loop_counter == 255)	{ // grab adc readings + 3ms , 32 step  // no freeze
 80035e0:	4b43      	ldr	r3, [pc, #268]	; (80036f0 <main+0x968>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2bff      	cmp	r3, #255	; 0xff
 80035e6:	d128      	bne.n	800363a <main+0x8b2>



		  //HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

		  HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 80035e8:	4842      	ldr	r0, [pc, #264]	; (80036f4 <main+0x96c>)
 80035ea:	f001 fcf5 	bl	8004fd8 <HAL_ADCEx_InjectedStart>
		  uint16_t adc_temp1[4]={0,0,0,0};
 80035ee:	463b      	mov	r3, r7
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	605a      	str	r2, [r3, #4]

		  HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 80035f6:	2101      	movs	r1, #1
 80035f8:	483e      	ldr	r0, [pc, #248]	; (80036f4 <main+0x96c>)
 80035fa:	f001 f853 	bl	80046a4 <HAL_ADC_PollForConversion>

		  adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80035fe:	2101      	movs	r1, #1
 8003600:	483c      	ldr	r0, [pc, #240]	; (80036f4 <main+0x96c>)
 8003602:	f001 fdff 	bl	8005204 <HAL_ADCEx_InjectedGetValue>
 8003606:	4603      	mov	r3, r0
 8003608:	b29b      	uxth	r3, r3
 800360a:	803b      	strh	r3, [r7, #0]
		  adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 800360c:	2102      	movs	r1, #2
 800360e:	4839      	ldr	r0, [pc, #228]	; (80036f4 <main+0x96c>)
 8003610:	f001 fdf8 	bl	8005204 <HAL_ADCEx_InjectedGetValue>
 8003614:	4603      	mov	r3, r0
 8003616:	b29b      	uxth	r3, r3
 8003618:	807b      	strh	r3, [r7, #2]
		//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
		  adc_values[0]=	  adc_temp1[0]>>7;
 800361a:	883b      	ldrh	r3, [r7, #0]
 800361c:	09db      	lsrs	r3, r3, #7
 800361e:	b29a      	uxth	r2, r3
 8003620:	4b35      	ldr	r3, [pc, #212]	; (80036f8 <main+0x970>)
 8003622:	801a      	strh	r2, [r3, #0]
		  adc_values[1]=	  adc_temp1[1]>>7;
 8003624:	887b      	ldrh	r3, [r7, #2]
 8003626:	09db      	lsrs	r3, r3, #7
 8003628:	b29a      	uxth	r2, r3
 800362a:	4b33      	ldr	r3, [pc, #204]	; (80036f8 <main+0x970>)
 800362c:	805a      	strh	r2, [r3, #2]
		//  adc_values[2]=	  adc_temp1[2]>>7;
		  HAL_ADCEx_InjectedStop(&hadc1) ;
 800362e:	4831      	ldr	r0, [pc, #196]	; (80036f4 <main+0x96c>)
 8003630:	f001 fd9c 	bl	800516c <HAL_ADCEx_InjectedStop>


		  //HAL_ADC_Start_DMA(&hadc1, adc_source, 512);


	  	loop_counter=0;
 8003634:	4b2e      	ldr	r3, [pc, #184]	; (80036f0 <main+0x968>)
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 800363a:	4b30      	ldr	r3, [pc, #192]	; (80036fc <main+0x974>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b07      	cmp	r3, #7
 8003640:	d106      	bne.n	8003650 <main+0x8c8>
 8003642:	4b2f      	ldr	r3, [pc, #188]	; (8003700 <main+0x978>)
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d102      	bne.n	8003650 <main+0x8c8>
 800364a:	4b2d      	ldr	r3, [pc, #180]	; (8003700 <main+0x978>)
 800364c:	2201      	movs	r2, #1
 800364e:	801a      	strh	r2, [r3, #0]
	   if (promValue<64) promValue=promValue+1 ; else promValue=0;  // fetch eeprom   nogo
	  	  if ((promValues[promValue] ) !=(potValues[promValue]))  EEPROM.write(promValue,(potValues[promValue]));   //  not too happy can totally kill speed  will have to put elsewhere
	  	  promValues[promValue] =potValues[promValue];
	  	   */

	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 8003650:	4b2a      	ldr	r3, [pc, #168]	; (80036fc <main+0x974>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	b2db      	uxtb	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003660:	4828      	ldr	r0, [pc, #160]	; (8003704 <main+0x97c>)
 8003662:	f002 fe17 	bl	8006294 <HAL_GPIO_WritePin>


	//  if (sample_pointB!=sample_pointD) bank_write=1; // set start of buffer ,grab , works ok

	  	//	adc_flag=0;
	  		if (adc_flag) {
 8003666:	4b28      	ldr	r3, [pc, #160]	; (8003708 <main+0x980>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d03a      	beq.n	80036e4 <main+0x95c>
	  		HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go
 800366e:	4821      	ldr	r0, [pc, #132]	; (80036f4 <main+0x96c>)
 8003670:	f001 f994 	bl	800499c <HAL_ADC_Stop_DMA>
	  		HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time
 8003674:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003678:	4924      	ldr	r1, [pc, #144]	; (800370c <main+0x984>)
 800367a:	481e      	ldr	r0, [pc, #120]	; (80036f4 <main+0x96c>)
 800367c:	f001 f89e 	bl	80047bc <HAL_ADC_Start_DMA>

	  			uint16_t* click=&adc_source[0];
 8003680:	4b22      	ldr	r3, [pc, #136]	; (800370c <main+0x984>)
 8003682:	673b      	str	r3, [r7, #112]	; 0x70

	  			for (i=0;i<512;i++)
 8003684:	4b22      	ldr	r3, [pc, #136]	; (8003710 <main+0x988>)
 8003686:	2200      	movs	r2, #0
 8003688:	801a      	strh	r2, [r3, #0]
 800368a:	e023      	b.n	80036d4 <main+0x94c>
	  			{

	  				uint16_t crap_hold=*click;
 800368c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	  			uint16_t crap_hold1=*(++click);
 8003694:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003696:	3302      	adds	r3, #2
 8003698:	673b      	str	r3, [r7, #112]	; 0x70
 800369a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	  		click++;
 80036a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036a4:	3302      	adds	r3, #2
 80036a6:	673b      	str	r3, [r7, #112]	; 0x70

	  	//			uint16_t crap_hold=adc_source[i*2];

	  				 // 				uint16_t crap_hold1=adc_source[(i*2)+1];

	  				input_holder[i] = (crap_hold+crap_hold1 )>>1;
 80036a8:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80036ac:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80036b0:	4413      	add	r3, r2
 80036b2:	1059      	asrs	r1, r3, #1
 80036b4:	4b16      	ldr	r3, [pc, #88]	; (8003710 <main+0x988>)
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	461a      	mov	r2, r3
 80036ba:	b289      	uxth	r1, r1
 80036bc:	4b15      	ldr	r3, [pc, #84]	; (8003714 <main+0x98c>)
 80036be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  				adc_flag=0;
 80036c2:	4b11      	ldr	r3, [pc, #68]	; (8003708 <main+0x980>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	701a      	strb	r2, [r3, #0]
	  			for (i=0;i<512;i++)
 80036c8:	4b11      	ldr	r3, [pc, #68]	; (8003710 <main+0x988>)
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	3301      	adds	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <main+0x988>)
 80036d2:	801a      	strh	r2, [r3, #0]
 80036d4:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <main+0x988>)
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036dc:	d3d6      	bcc.n	800368c <main+0x904>
	  			}
	  		}

	while  (bank_write)                         {							// wait for adc , priority
 80036de:	e001      	b.n	80036e4 <main+0x95c>



		  //HAL_Delay(4);
	  		//sample_point=sample_point&768 ;
	  		sampling();
 80036e0:	f7fe f956 	bl	8001990 <sampling>
	while  (bank_write)                         {							// wait for adc , priority
 80036e4:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <main+0x990>)
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f9      	bne.n	80036e0 <main+0x958>
	  loop_counter++ ;
 80036ec:	e669      	b.n	80033c2 <main+0x63a>
 80036ee:	bf00      	nop
 80036f0:	20000cc0 	.word	0x20000cc0
 80036f4:	20003b04 	.word	0x20003b04
 80036f8:	200001a8 	.word	0x200001a8
 80036fc:	20003a30 	.word	0x20003a30
 8003700:	2000211c 	.word	0x2000211c
 8003704:	40020800 	.word	0x40020800
 8003708:	20002e14 	.word	0x20002e14
 800370c:	200014d4 	.word	0x200014d4
 8003710:	20000cc4 	.word	0x20000cc4
 8003714:	20002a14 	.word	0x20002a14
 8003718:	200001b2 	.word	0x200001b2

0800371c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b094      	sub	sp, #80	; 0x50
 8003720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003722:	f107 0320 	add.w	r3, r7, #32
 8003726:	2230      	movs	r2, #48	; 0x30
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f006 f8b2 	bl	8009894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003730:	f107 030c 	add.w	r3, r7, #12
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003740:	2300      	movs	r3, #0
 8003742:	60bb      	str	r3, [r7, #8]
 8003744:	4b28      	ldr	r3, [pc, #160]	; (80037e8 <SystemClock_Config+0xcc>)
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	4a27      	ldr	r2, [pc, #156]	; (80037e8 <SystemClock_Config+0xcc>)
 800374a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374e:	6413      	str	r3, [r2, #64]	; 0x40
 8003750:	4b25      	ldr	r3, [pc, #148]	; (80037e8 <SystemClock_Config+0xcc>)
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800375c:	2300      	movs	r3, #0
 800375e:	607b      	str	r3, [r7, #4]
 8003760:	4b22      	ldr	r3, [pc, #136]	; (80037ec <SystemClock_Config+0xd0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a21      	ldr	r2, [pc, #132]	; (80037ec <SystemClock_Config+0xd0>)
 8003766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	4b1f      	ldr	r3, [pc, #124]	; (80037ec <SystemClock_Config+0xd0>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003774:	607b      	str	r3, [r7, #4]
 8003776:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003778:	2302      	movs	r3, #2
 800377a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800377c:	2301      	movs	r3, #1
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003780:	2310      	movs	r3, #16
 8003782:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003784:	2302      	movs	r3, #2
 8003786:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003788:	2300      	movs	r3, #0
 800378a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800378c:	2308      	movs	r3, #8
 800378e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003790:	2364      	movs	r3, #100	; 0x64
 8003792:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003794:	2302      	movs	r3, #2
 8003796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003798:	2304      	movs	r3, #4
 800379a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800379c:	f107 0320 	add.w	r3, r7, #32
 80037a0:	4618      	mov	r0, r3
 80037a2:	f003 fd51 	bl	8007248 <HAL_RCC_OscConfig>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80037ac:	f000 faf6 	bl	8003d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037b0:	230f      	movs	r3, #15
 80037b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037b4:	2302      	movs	r3, #2
 80037b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80037c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80037c8:	f107 030c 	add.w	r3, r7, #12
 80037cc:	2103      	movs	r1, #3
 80037ce:	4618      	mov	r0, r3
 80037d0:	f003 ffb2 	bl	8007738 <HAL_RCC_ClockConfig>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80037da:	f000 fadf 	bl	8003d9c <Error_Handler>
  }
}
 80037de:	bf00      	nop
 80037e0:	3750      	adds	r7, #80	; 0x50
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800
 80037ec:	40007000 	.word	0x40007000

080037f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08c      	sub	sp, #48	; 0x30
 80037f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037f6:	f107 0320 	add.w	r3, r7, #32
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	605a      	str	r2, [r3, #4]
 8003800:	609a      	str	r2, [r3, #8]
 8003802:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003804:	463b      	mov	r3, r7
 8003806:	2220      	movs	r2, #32
 8003808:	2100      	movs	r1, #0
 800380a:	4618      	mov	r0, r3
 800380c:	f006 f842 	bl	8009894 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003810:	4b36      	ldr	r3, [pc, #216]	; (80038ec <MX_ADC1_Init+0xfc>)
 8003812:	4a37      	ldr	r2, [pc, #220]	; (80038f0 <MX_ADC1_Init+0x100>)
 8003814:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003816:	4b35      	ldr	r3, [pc, #212]	; (80038ec <MX_ADC1_Init+0xfc>)
 8003818:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800381c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800381e:	4b33      	ldr	r3, [pc, #204]	; (80038ec <MX_ADC1_Init+0xfc>)
 8003820:	2200      	movs	r2, #0
 8003822:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003824:	4b31      	ldr	r3, [pc, #196]	; (80038ec <MX_ADC1_Init+0xfc>)
 8003826:	2201      	movs	r2, #1
 8003828:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800382a:	4b30      	ldr	r3, [pc, #192]	; (80038ec <MX_ADC1_Init+0xfc>)
 800382c:	2201      	movs	r2, #1
 800382e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003830:	4b2e      	ldr	r3, [pc, #184]	; (80038ec <MX_ADC1_Init+0xfc>)
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003838:	4b2c      	ldr	r3, [pc, #176]	; (80038ec <MX_ADC1_Init+0xfc>)
 800383a:	2200      	movs	r2, #0
 800383c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800383e:	4b2b      	ldr	r3, [pc, #172]	; (80038ec <MX_ADC1_Init+0xfc>)
 8003840:	4a2c      	ldr	r2, [pc, #176]	; (80038f4 <MX_ADC1_Init+0x104>)
 8003842:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003844:	4b29      	ldr	r3, [pc, #164]	; (80038ec <MX_ADC1_Init+0xfc>)
 8003846:	2200      	movs	r2, #0
 8003848:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800384a:	4b28      	ldr	r3, [pc, #160]	; (80038ec <MX_ADC1_Init+0xfc>)
 800384c:	2201      	movs	r2, #1
 800384e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003850:	4b26      	ldr	r3, [pc, #152]	; (80038ec <MX_ADC1_Init+0xfc>)
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003858:	4b24      	ldr	r3, [pc, #144]	; (80038ec <MX_ADC1_Init+0xfc>)
 800385a:	2200      	movs	r2, #0
 800385c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800385e:	4823      	ldr	r0, [pc, #140]	; (80038ec <MX_ADC1_Init+0xfc>)
 8003860:	f000 fe28 	bl	80044b4 <HAL_ADC_Init>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 800386a:	f000 fa97 	bl	8003d9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800386e:	2309      	movs	r3, #9
 8003870:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8003872:	2301      	movs	r3, #1
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003876:	2306      	movs	r3, #6
 8003878:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800387a:	f107 0320 	add.w	r3, r7, #32
 800387e:	4619      	mov	r1, r3
 8003880:	481a      	ldr	r0, [pc, #104]	; (80038ec <MX_ADC1_Init+0xfc>)
 8003882:	f001 f8f9 	bl	8004a78 <HAL_ADC_ConfigChannel>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800388c:	f000 fa86 	bl	8003d9c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8003890:	2300      	movs	r3, #0
 8003892:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8003894:	2301      	movs	r3, #1
 8003896:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8003898:	2302      	movs	r3, #2
 800389a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 800389c:	2303      	movs	r3, #3
 800389e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80038a4:	4b14      	ldr	r3, [pc, #80]	; (80038f8 <MX_ADC1_Init+0x108>)
 80038a6:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80038a8:	2300      	movs	r3, #0
 80038aa:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80038ac:	2300      	movs	r3, #0
 80038ae:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80038b4:	463b      	mov	r3, r7
 80038b6:	4619      	mov	r1, r3
 80038b8:	480c      	ldr	r0, [pc, #48]	; (80038ec <MX_ADC1_Init+0xfc>)
 80038ba:	f001 fcdb 	bl	8005274 <HAL_ADCEx_InjectedConfigChannel>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80038c4:	f000 fa6a 	bl	8003d9c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80038c8:	2302      	movs	r3, #2
 80038ca:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80038cc:	2302      	movs	r3, #2
 80038ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80038d0:	463b      	mov	r3, r7
 80038d2:	4619      	mov	r1, r3
 80038d4:	4805      	ldr	r0, [pc, #20]	; (80038ec <MX_ADC1_Init+0xfc>)
 80038d6:	f001 fccd 	bl	8005274 <HAL_ADCEx_InjectedConfigChannel>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80038e0:	f000 fa5c 	bl	8003d9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80038e4:	bf00      	nop
 80038e6:	3730      	adds	r7, #48	; 0x30
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	20003b04 	.word	0x20003b04
 80038f0:	40012000 	.word	0x40012000
 80038f4:	0f000001 	.word	0x0f000001
 80038f8:	000f0001 	.word	0x000f0001

080038fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003900:	4b12      	ldr	r3, [pc, #72]	; (800394c <MX_I2C2_Init+0x50>)
 8003902:	4a13      	ldr	r2, [pc, #76]	; (8003950 <MX_I2C2_Init+0x54>)
 8003904:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003906:	4b11      	ldr	r3, [pc, #68]	; (800394c <MX_I2C2_Init+0x50>)
 8003908:	4a12      	ldr	r2, [pc, #72]	; (8003954 <MX_I2C2_Init+0x58>)
 800390a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800390c:	4b0f      	ldr	r3, [pc, #60]	; (800394c <MX_I2C2_Init+0x50>)
 800390e:	2200      	movs	r2, #0
 8003910:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003912:	4b0e      	ldr	r3, [pc, #56]	; (800394c <MX_I2C2_Init+0x50>)
 8003914:	2200      	movs	r2, #0
 8003916:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <MX_I2C2_Init+0x50>)
 800391a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800391e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003920:	4b0a      	ldr	r3, [pc, #40]	; (800394c <MX_I2C2_Init+0x50>)
 8003922:	2200      	movs	r2, #0
 8003924:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <MX_I2C2_Init+0x50>)
 8003928:	2200      	movs	r2, #0
 800392a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800392c:	4b07      	ldr	r3, [pc, #28]	; (800394c <MX_I2C2_Init+0x50>)
 800392e:	2200      	movs	r2, #0
 8003930:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <MX_I2C2_Init+0x50>)
 8003934:	2200      	movs	r2, #0
 8003936:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003938:	4804      	ldr	r0, [pc, #16]	; (800394c <MX_I2C2_Init+0x50>)
 800393a:	f002 fcc5 	bl	80062c8 <HAL_I2C_Init>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003944:	f000 fa2a 	bl	8003d9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003948:	bf00      	nop
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20003bac 	.word	0x20003bac
 8003950:	40005800 	.word	0x40005800
 8003954:	00061a80 	.word	0x00061a80

08003958 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800395c:	4b17      	ldr	r3, [pc, #92]	; (80039bc <MX_SPI1_Init+0x64>)
 800395e:	4a18      	ldr	r2, [pc, #96]	; (80039c0 <MX_SPI1_Init+0x68>)
 8003960:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003962:	4b16      	ldr	r3, [pc, #88]	; (80039bc <MX_SPI1_Init+0x64>)
 8003964:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003968:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800396a:	4b14      	ldr	r3, [pc, #80]	; (80039bc <MX_SPI1_Init+0x64>)
 800396c:	2200      	movs	r2, #0
 800396e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003970:	4b12      	ldr	r3, [pc, #72]	; (80039bc <MX_SPI1_Init+0x64>)
 8003972:	2200      	movs	r2, #0
 8003974:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <MX_SPI1_Init+0x64>)
 8003978:	2200      	movs	r2, #0
 800397a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800397c:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <MX_SPI1_Init+0x64>)
 800397e:	2200      	movs	r2, #0
 8003980:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003982:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <MX_SPI1_Init+0x64>)
 8003984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003988:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800398a:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <MX_SPI1_Init+0x64>)
 800398c:	2208      	movs	r2, #8
 800398e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003990:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <MX_SPI1_Init+0x64>)
 8003992:	2200      	movs	r2, #0
 8003994:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003996:	4b09      	ldr	r3, [pc, #36]	; (80039bc <MX_SPI1_Init+0x64>)
 8003998:	2200      	movs	r2, #0
 800399a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800399c:	4b07      	ldr	r3, [pc, #28]	; (80039bc <MX_SPI1_Init+0x64>)
 800399e:	2200      	movs	r2, #0
 80039a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80039a2:	4b06      	ldr	r3, [pc, #24]	; (80039bc <MX_SPI1_Init+0x64>)
 80039a4:	220a      	movs	r2, #10
 80039a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039a8:	4804      	ldr	r0, [pc, #16]	; (80039bc <MX_SPI1_Init+0x64>)
 80039aa:	f004 f891 	bl	8007ad0 <HAL_SPI_Init>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80039b4:	f000 f9f2 	bl	8003d9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039b8:	bf00      	nop
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20003c00 	.word	0x20003c00
 80039c0:	40013000 	.word	0x40013000

080039c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80039c8:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <MX_SPI2_Init+0x64>)
 80039ca:	4a18      	ldr	r2, [pc, #96]	; (8003a2c <MX_SPI2_Init+0x68>)
 80039cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80039ce:	4b16      	ldr	r3, [pc, #88]	; (8003a28 <MX_SPI2_Init+0x64>)
 80039d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80039d6:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <MX_SPI2_Init+0x64>)
 80039d8:	2200      	movs	r2, #0
 80039da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80039dc:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <MX_SPI2_Init+0x64>)
 80039de:	2200      	movs	r2, #0
 80039e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039e2:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <MX_SPI2_Init+0x64>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039e8:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <MX_SPI2_Init+0x64>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80039ee:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <MX_SPI2_Init+0x64>)
 80039f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80039f6:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <MX_SPI2_Init+0x64>)
 80039f8:	2230      	movs	r2, #48	; 0x30
 80039fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039fc:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <MX_SPI2_Init+0x64>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a02:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <MX_SPI2_Init+0x64>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a08:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <MX_SPI2_Init+0x64>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003a0e:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <MX_SPI2_Init+0x64>)
 8003a10:	220a      	movs	r2, #10
 8003a12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003a14:	4804      	ldr	r0, [pc, #16]	; (8003a28 <MX_SPI2_Init+0x64>)
 8003a16:	f004 f85b 	bl	8007ad0 <HAL_SPI_Init>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003a20:	f000 f9bc 	bl	8003d9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003a24:	bf00      	nop
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	20003c58 	.word	0x20003c58
 8003a2c:	40003800 	.word	0x40003800

08003a30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08c      	sub	sp, #48	; 0x30
 8003a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a36:	f107 030c 	add.w	r3, r7, #12
 8003a3a:	2224      	movs	r2, #36	; 0x24
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f005 ff28 	bl	8009894 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a44:	1d3b      	adds	r3, r7, #4
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a4c:	4b21      	ldr	r3, [pc, #132]	; (8003ad4 <MX_TIM2_Init+0xa4>)
 8003a4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003a54:	4b1f      	ldr	r3, [pc, #124]	; (8003ad4 <MX_TIM2_Init+0xa4>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a5a:	4b1e      	ldr	r3, [pc, #120]	; (8003ad4 <MX_TIM2_Init+0xa4>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003a60:	4b1c      	ldr	r3, [pc, #112]	; (8003ad4 <MX_TIM2_Init+0xa4>)
 8003a62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003a68:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <MX_TIM2_Init+0xa4>)
 8003a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a70:	4b18      	ldr	r3, [pc, #96]	; (8003ad4 <MX_TIM2_Init+0xa4>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003a76:	2301      	movs	r3, #1
 8003a78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8003a86:	2302      	movs	r3, #2
 8003a88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003a92:	2300      	movs	r3, #0
 8003a94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8003a96:	2302      	movs	r3, #2
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003a9a:	f107 030c 	add.w	r3, r7, #12
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	480c      	ldr	r0, [pc, #48]	; (8003ad4 <MX_TIM2_Init+0xa4>)
 8003aa2:	f004 ffd3 	bl	8008a4c <HAL_TIM_Encoder_Init>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003aac:	f000 f976 	bl	8003d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ab8:	1d3b      	adds	r3, r7, #4
 8003aba:	4619      	mov	r1, r3
 8003abc:	4805      	ldr	r0, [pc, #20]	; (8003ad4 <MX_TIM2_Init+0xa4>)
 8003abe:	f005 fdf1 	bl	80096a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003ac8:	f000 f968 	bl	8003d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003acc:	bf00      	nop
 8003ace:	3730      	adds	r7, #48	; 0x30
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20003cb0 	.word	0x20003cb0

08003ad8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08e      	sub	sp, #56	; 0x38
 8003adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	605a      	str	r2, [r3, #4]
 8003ae8:	609a      	str	r2, [r3, #8]
 8003aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aec:	f107 0320 	add.w	r3, r7, #32
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003af6:	1d3b      	adds	r3, r7, #4
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	605a      	str	r2, [r3, #4]
 8003afe:	609a      	str	r2, [r3, #8]
 8003b00:	60da      	str	r2, [r3, #12]
 8003b02:	611a      	str	r2, [r3, #16]
 8003b04:	615a      	str	r2, [r3, #20]
 8003b06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003b08:	4b2c      	ldr	r3, [pc, #176]	; (8003bbc <MX_TIM3_Init+0xe4>)
 8003b0a:	4a2d      	ldr	r2, [pc, #180]	; (8003bc0 <MX_TIM3_Init+0xe8>)
 8003b0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003b0e:	4b2b      	ldr	r3, [pc, #172]	; (8003bbc <MX_TIM3_Init+0xe4>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b14:	4b29      	ldr	r3, [pc, #164]	; (8003bbc <MX_TIM3_Init+0xe4>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2544;
 8003b1a:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <MX_TIM3_Init+0xe4>)
 8003b1c:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 8003b20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b22:	4b26      	ldr	r3, [pc, #152]	; (8003bbc <MX_TIM3_Init+0xe4>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b28:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <MX_TIM3_Init+0xe4>)
 8003b2a:	2280      	movs	r2, #128	; 0x80
 8003b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003b2e:	4823      	ldr	r0, [pc, #140]	; (8003bbc <MX_TIM3_Init+0xe4>)
 8003b30:	f004 fd76 	bl	8008620 <HAL_TIM_Base_Init>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003b3a:	f000 f92f 	bl	8003d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b48:	4619      	mov	r1, r3
 8003b4a:	481c      	ldr	r0, [pc, #112]	; (8003bbc <MX_TIM3_Init+0xe4>)
 8003b4c:	f005 f9ee 	bl	8008f2c <HAL_TIM_ConfigClockSource>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003b56:	f000 f921 	bl	8003d9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003b5a:	4818      	ldr	r0, [pc, #96]	; (8003bbc <MX_TIM3_Init+0xe4>)
 8003b5c:	f004 fe6c 	bl	8008838 <HAL_TIM_PWM_Init>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003b66:	f000 f919 	bl	8003d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b72:	f107 0320 	add.w	r3, r7, #32
 8003b76:	4619      	mov	r1, r3
 8003b78:	4810      	ldr	r0, [pc, #64]	; (8003bbc <MX_TIM3_Init+0xe4>)
 8003b7a:	f005 fd93 	bl	80096a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003b84:	f000 f90a 	bl	8003d9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003b88:	2370      	movs	r3, #112	; 0x70
 8003b8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b98:	1d3b      	adds	r3, r7, #4
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4807      	ldr	r0, [pc, #28]	; (8003bbc <MX_TIM3_Init+0xe4>)
 8003ba0:	f005 f902 	bl	8008da8 <HAL_TIM_PWM_ConfigChannel>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003baa:	f000 f8f7 	bl	8003d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003bae:	4803      	ldr	r0, [pc, #12]	; (8003bbc <MX_TIM3_Init+0xe4>)
 8003bb0:	f000 fb32 	bl	8004218 <HAL_TIM_MspPostInit>

}
 8003bb4:	bf00      	nop
 8003bb6:	3738      	adds	r7, #56	; 0x38
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20003cf8 	.word	0x20003cf8
 8003bc0:	40000400 	.word	0x40000400

08003bc4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08c      	sub	sp, #48	; 0x30
 8003bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003bca:	f107 030c 	add.w	r3, r7, #12
 8003bce:	2224      	movs	r2, #36	; 0x24
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f005 fe5e 	bl	8009894 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bd8:	1d3b      	adds	r3, r7, #4
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003be0:	4b20      	ldr	r3, [pc, #128]	; (8003c64 <MX_TIM4_Init+0xa0>)
 8003be2:	4a21      	ldr	r2, [pc, #132]	; (8003c68 <MX_TIM4_Init+0xa4>)
 8003be4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003be6:	4b1f      	ldr	r3, [pc, #124]	; (8003c64 <MX_TIM4_Init+0xa0>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bec:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <MX_TIM4_Init+0xa0>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003bf2:	4b1c      	ldr	r3, [pc, #112]	; (8003c64 <MX_TIM4_Init+0xa0>)
 8003bf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bf8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bfa:	4b1a      	ldr	r3, [pc, #104]	; (8003c64 <MX_TIM4_Init+0xa0>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c00:	4b18      	ldr	r3, [pc, #96]	; (8003c64 <MX_TIM4_Init+0xa0>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003c06:	2301      	movs	r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8003c16:	2302      	movs	r3, #2
 8003c18:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c22:	2300      	movs	r3, #0
 8003c24:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8003c26:	2302      	movs	r3, #2
 8003c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003c2a:	f107 030c 	add.w	r3, r7, #12
 8003c2e:	4619      	mov	r1, r3
 8003c30:	480c      	ldr	r0, [pc, #48]	; (8003c64 <MX_TIM4_Init+0xa0>)
 8003c32:	f004 ff0b 	bl	8008a4c <HAL_TIM_Encoder_Init>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003c3c:	f000 f8ae 	bl	8003d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c40:	2300      	movs	r3, #0
 8003c42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003c48:	1d3b      	adds	r3, r7, #4
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4805      	ldr	r0, [pc, #20]	; (8003c64 <MX_TIM4_Init+0xa0>)
 8003c4e:	f005 fd29 	bl	80096a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003c58:	f000 f8a0 	bl	8003d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003c5c:	bf00      	nop
 8003c5e:	3730      	adds	r7, #48	; 0x30
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20003d40 	.word	0x20003d40
 8003c68:	40000800 	.word	0x40000800

08003c6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	607b      	str	r3, [r7, #4]
 8003c76:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <MX_DMA_Init+0x3c>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	4a0b      	ldr	r2, [pc, #44]	; (8003ca8 <MX_DMA_Init+0x3c>)
 8003c7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c80:	6313      	str	r3, [r2, #48]	; 0x30
 8003c82:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <MX_DMA_Init+0x3c>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8a:	607b      	str	r3, [r7, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2100      	movs	r1, #0
 8003c92:	203c      	movs	r0, #60	; 0x3c
 8003c94:	f001 fd63 	bl	800575e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8003c98:	203c      	movs	r0, #60	; 0x3c
 8003c9a:	f001 fd7c 	bl	8005796 <HAL_NVIC_EnableIRQ>

}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40023800 	.word	0x40023800

08003cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb2:	f107 030c 	add.w	r3, r7, #12
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	605a      	str	r2, [r3, #4]
 8003cbc:	609a      	str	r2, [r3, #8]
 8003cbe:	60da      	str	r2, [r3, #12]
 8003cc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	4b2a      	ldr	r3, [pc, #168]	; (8003d70 <MX_GPIO_Init+0xc4>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	4a29      	ldr	r2, [pc, #164]	; (8003d70 <MX_GPIO_Init+0xc4>)
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd2:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <MX_GPIO_Init+0xc4>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	60bb      	str	r3, [r7, #8]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	607b      	str	r3, [r7, #4]
 8003ce2:	4b23      	ldr	r3, [pc, #140]	; (8003d70 <MX_GPIO_Init+0xc4>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	4a22      	ldr	r2, [pc, #136]	; (8003d70 <MX_GPIO_Init+0xc4>)
 8003ce8:	f043 0302 	orr.w	r3, r3, #2
 8003cec:	6313      	str	r3, [r2, #48]	; 0x30
 8003cee:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <MX_GPIO_Init+0xc4>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	607b      	str	r3, [r7, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	603b      	str	r3, [r7, #0]
 8003cfe:	4b1c      	ldr	r3, [pc, #112]	; (8003d70 <MX_GPIO_Init+0xc4>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	4a1b      	ldr	r2, [pc, #108]	; (8003d70 <MX_GPIO_Init+0xc4>)
 8003d04:	f043 0304 	orr.w	r3, r3, #4
 8003d08:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0a:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <MX_GPIO_Init+0xc4>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003d16:	2200      	movs	r2, #0
 8003d18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d1c:	4815      	ldr	r0, [pc, #84]	; (8003d74 <MX_GPIO_Init+0xc8>)
 8003d1e:	f002 fab9 	bl	8006294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8003d22:	2201      	movs	r2, #1
 8003d24:	2110      	movs	r1, #16
 8003d26:	4814      	ldr	r0, [pc, #80]	; (8003d78 <MX_GPIO_Init+0xcc>)
 8003d28:	f002 fab4 	bl	8006294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003d2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d32:	2301      	movs	r3, #1
 8003d34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003d3e:	f107 030c 	add.w	r3, r7, #12
 8003d42:	4619      	mov	r1, r3
 8003d44:	480b      	ldr	r0, [pc, #44]	; (8003d74 <MX_GPIO_Init+0xc8>)
 8003d46:	f002 f921 	bl	8005f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 8003d4a:	2310      	movs	r3, #16
 8003d4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d56:	2303      	movs	r3, #3
 8003d58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 8003d5a:	f107 030c 	add.w	r3, r7, #12
 8003d5e:	4619      	mov	r1, r3
 8003d60:	4805      	ldr	r0, [pc, #20]	; (8003d78 <MX_GPIO_Init+0xcc>)
 8003d62:	f002 f913 	bl	8005f8c <HAL_GPIO_Init>

}
 8003d66:	bf00      	nop
 8003d68:	3720      	adds	r7, #32
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	40023800 	.word	0x40023800
 8003d74:	40020800 	.word	0x40020800
 8003d78:	40020000 	.word	0x40020000

08003d7c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
adc_flag=1;
 8003d84:	4b04      	ldr	r3, [pc, #16]	; (8003d98 <HAL_ADC_ConvCpltCallback+0x1c>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	701a      	strb	r2, [r3, #0]


}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20002e14 	.word	0x20002e14

08003d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003da0:	b672      	cpsid	i
}
 8003da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003da4:	e7fe      	b.n	8003da4 <Error_Handler+0x8>
	...

08003da8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <HAL_MspInit+0x4c>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	4a0f      	ldr	r2, [pc, #60]	; (8003df4 <HAL_MspInit+0x4c>)
 8003db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <HAL_MspInit+0x4c>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc6:	607b      	str	r3, [r7, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <HAL_MspInit+0x4c>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	4a08      	ldr	r2, [pc, #32]	; (8003df4 <HAL_MspInit+0x4c>)
 8003dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <HAL_MspInit+0x4c>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de2:	603b      	str	r3, [r7, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40023800 	.word	0x40023800

08003df8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08a      	sub	sp, #40	; 0x28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e00:	f107 0314 	add.w	r3, r7, #20
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a3c      	ldr	r2, [pc, #240]	; (8003f08 <HAL_ADC_MspInit+0x110>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d171      	bne.n	8003efe <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	4b3b      	ldr	r3, [pc, #236]	; (8003f0c <HAL_ADC_MspInit+0x114>)
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	4a3a      	ldr	r2, [pc, #232]	; (8003f0c <HAL_ADC_MspInit+0x114>)
 8003e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e28:	6453      	str	r3, [r2, #68]	; 0x44
 8003e2a:	4b38      	ldr	r3, [pc, #224]	; (8003f0c <HAL_ADC_MspInit+0x114>)
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	4b34      	ldr	r3, [pc, #208]	; (8003f0c <HAL_ADC_MspInit+0x114>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	4a33      	ldr	r2, [pc, #204]	; (8003f0c <HAL_ADC_MspInit+0x114>)
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	6313      	str	r3, [r2, #48]	; 0x30
 8003e46:	4b31      	ldr	r3, [pc, #196]	; (8003f0c <HAL_ADC_MspInit+0x114>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	4b2d      	ldr	r3, [pc, #180]	; (8003f0c <HAL_ADC_MspInit+0x114>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	4a2c      	ldr	r2, [pc, #176]	; (8003f0c <HAL_ADC_MspInit+0x114>)
 8003e5c:	f043 0302 	orr.w	r3, r3, #2
 8003e60:	6313      	str	r3, [r2, #48]	; 0x30
 8003e62:	4b2a      	ldr	r3, [pc, #168]	; (8003f0c <HAL_ADC_MspInit+0x114>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	60bb      	str	r3, [r7, #8]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 8003e6e:	2305      	movs	r3, #5
 8003e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e72:	2303      	movs	r3, #3
 8003e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e7a:	f107 0314 	add.w	r3, r7, #20
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4823      	ldr	r0, [pc, #140]	; (8003f10 <HAL_ADC_MspInit+0x118>)
 8003e82:	f002 f883 	bl	8005f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e86:	2302      	movs	r3, #2
 8003e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e92:	f107 0314 	add.w	r3, r7, #20
 8003e96:	4619      	mov	r1, r3
 8003e98:	481e      	ldr	r0, [pc, #120]	; (8003f14 <HAL_ADC_MspInit+0x11c>)
 8003e9a:	f002 f877 	bl	8005f8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8003e9e:	4b1e      	ldr	r3, [pc, #120]	; (8003f18 <HAL_ADC_MspInit+0x120>)
 8003ea0:	4a1e      	ldr	r2, [pc, #120]	; (8003f1c <HAL_ADC_MspInit+0x124>)
 8003ea2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003ea4:	4b1c      	ldr	r3, [pc, #112]	; (8003f18 <HAL_ADC_MspInit+0x120>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003eaa:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <HAL_ADC_MspInit+0x120>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eb0:	4b19      	ldr	r3, [pc, #100]	; (8003f18 <HAL_ADC_MspInit+0x120>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003eb6:	4b18      	ldr	r3, [pc, #96]	; (8003f18 <HAL_ADC_MspInit+0x120>)
 8003eb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ebc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ebe:	4b16      	ldr	r3, [pc, #88]	; (8003f18 <HAL_ADC_MspInit+0x120>)
 8003ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ec4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ec6:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <HAL_ADC_MspInit+0x120>)
 8003ec8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ecc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003ece:	4b12      	ldr	r3, [pc, #72]	; (8003f18 <HAL_ADC_MspInit+0x120>)
 8003ed0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ed4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003ed6:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <HAL_ADC_MspInit+0x120>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003edc:	4b0e      	ldr	r3, [pc, #56]	; (8003f18 <HAL_ADC_MspInit+0x120>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003ee2:	480d      	ldr	r0, [pc, #52]	; (8003f18 <HAL_ADC_MspInit+0x120>)
 8003ee4:	f001 fc72 	bl	80057cc <HAL_DMA_Init>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003eee:	f7ff ff55 	bl	8003d9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a08      	ldr	r2, [pc, #32]	; (8003f18 <HAL_ADC_MspInit+0x120>)
 8003ef6:	639a      	str	r2, [r3, #56]	; 0x38
 8003ef8:	4a07      	ldr	r2, [pc, #28]	; (8003f18 <HAL_ADC_MspInit+0x120>)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003efe:	bf00      	nop
 8003f00:	3728      	adds	r7, #40	; 0x28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40012000 	.word	0x40012000
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	40020000 	.word	0x40020000
 8003f14:	40020400 	.word	0x40020400
 8003f18:	20003b4c 	.word	0x20003b4c
 8003f1c:	40026470 	.word	0x40026470

08003f20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08a      	sub	sp, #40	; 0x28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f28:	f107 0314 	add.w	r3, r7, #20
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	605a      	str	r2, [r3, #4]
 8003f32:	609a      	str	r2, [r3, #8]
 8003f34:	60da      	str	r2, [r3, #12]
 8003f36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a22      	ldr	r2, [pc, #136]	; (8003fc8 <HAL_I2C_MspInit+0xa8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d13d      	bne.n	8003fbe <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f42:	2300      	movs	r3, #0
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	4b21      	ldr	r3, [pc, #132]	; (8003fcc <HAL_I2C_MspInit+0xac>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	4a20      	ldr	r2, [pc, #128]	; (8003fcc <HAL_I2C_MspInit+0xac>)
 8003f4c:	f043 0302 	orr.w	r3, r3, #2
 8003f50:	6313      	str	r3, [r2, #48]	; 0x30
 8003f52:	4b1e      	ldr	r3, [pc, #120]	; (8003fcc <HAL_I2C_MspInit+0xac>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f64:	2312      	movs	r3, #18
 8003f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003f70:	2309      	movs	r3, #9
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f74:	f107 0314 	add.w	r3, r7, #20
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4815      	ldr	r0, [pc, #84]	; (8003fd0 <HAL_I2C_MspInit+0xb0>)
 8003f7c:	f002 f806 	bl	8005f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f86:	2312      	movs	r3, #18
 8003f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003f92:	2304      	movs	r3, #4
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f96:	f107 0314 	add.w	r3, r7, #20
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	480c      	ldr	r0, [pc, #48]	; (8003fd0 <HAL_I2C_MspInit+0xb0>)
 8003f9e:	f001 fff5 	bl	8005f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <HAL_I2C_MspInit+0xac>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	4a08      	ldr	r2, [pc, #32]	; (8003fcc <HAL_I2C_MspInit+0xac>)
 8003fac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb2:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <HAL_I2C_MspInit+0xac>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003fbe:	bf00      	nop
 8003fc0:	3728      	adds	r7, #40	; 0x28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40005800 	.word	0x40005800
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	40020400 	.word	0x40020400

08003fd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08c      	sub	sp, #48	; 0x30
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fdc:	f107 031c 	add.w	r3, r7, #28
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	605a      	str	r2, [r3, #4]
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a32      	ldr	r2, [pc, #200]	; (80040bc <HAL_SPI_MspInit+0xe8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d12c      	bne.n	8004050 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <HAL_SPI_MspInit+0xec>)
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	4a30      	ldr	r2, [pc, #192]	; (80040c0 <HAL_SPI_MspInit+0xec>)
 8004000:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004004:	6453      	str	r3, [r2, #68]	; 0x44
 8004006:	4b2e      	ldr	r3, [pc, #184]	; (80040c0 <HAL_SPI_MspInit+0xec>)
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	4b2a      	ldr	r3, [pc, #168]	; (80040c0 <HAL_SPI_MspInit+0xec>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	4a29      	ldr	r2, [pc, #164]	; (80040c0 <HAL_SPI_MspInit+0xec>)
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	6313      	str	r3, [r2, #48]	; 0x30
 8004022:	4b27      	ldr	r3, [pc, #156]	; (80040c0 <HAL_SPI_MspInit+0xec>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 800402e:	23e0      	movs	r3, #224	; 0xe0
 8004030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004032:	2302      	movs	r3, #2
 8004034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004036:	2300      	movs	r3, #0
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800403a:	2303      	movs	r3, #3
 800403c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800403e:	2305      	movs	r3, #5
 8004040:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004042:	f107 031c 	add.w	r3, r7, #28
 8004046:	4619      	mov	r1, r3
 8004048:	481e      	ldr	r0, [pc, #120]	; (80040c4 <HAL_SPI_MspInit+0xf0>)
 800404a:	f001 ff9f 	bl	8005f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800404e:	e031      	b.n	80040b4 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1c      	ldr	r2, [pc, #112]	; (80040c8 <HAL_SPI_MspInit+0xf4>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d12c      	bne.n	80040b4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800405a:	2300      	movs	r3, #0
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <HAL_SPI_MspInit+0xec>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	4a17      	ldr	r2, [pc, #92]	; (80040c0 <HAL_SPI_MspInit+0xec>)
 8004064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004068:	6413      	str	r3, [r2, #64]	; 0x40
 800406a:	4b15      	ldr	r3, [pc, #84]	; (80040c0 <HAL_SPI_MspInit+0xec>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <HAL_SPI_MspInit+0xec>)
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	4a10      	ldr	r2, [pc, #64]	; (80040c0 <HAL_SPI_MspInit+0xec>)
 8004080:	f043 0302 	orr.w	r3, r3, #2
 8004084:	6313      	str	r3, [r2, #48]	; 0x30
 8004086:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <HAL_SPI_MspInit+0xec>)
 8004088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8004092:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004098:	2302      	movs	r3, #2
 800409a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409c:	2300      	movs	r3, #0
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a0:	2303      	movs	r3, #3
 80040a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80040a4:	2305      	movs	r3, #5
 80040a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040a8:	f107 031c 	add.w	r3, r7, #28
 80040ac:	4619      	mov	r1, r3
 80040ae:	4807      	ldr	r0, [pc, #28]	; (80040cc <HAL_SPI_MspInit+0xf8>)
 80040b0:	f001 ff6c 	bl	8005f8c <HAL_GPIO_Init>
}
 80040b4:	bf00      	nop
 80040b6:	3730      	adds	r7, #48	; 0x30
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40013000 	.word	0x40013000
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40020000 	.word	0x40020000
 80040c8:	40003800 	.word	0x40003800
 80040cc:	40020400 	.word	0x40020400

080040d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08c      	sub	sp, #48	; 0x30
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d8:	f107 031c 	add.w	r3, r7, #28
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	605a      	str	r2, [r3, #4]
 80040e2:	609a      	str	r2, [r3, #8]
 80040e4:	60da      	str	r2, [r3, #12]
 80040e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f0:	d12d      	bne.n	800414e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040f2:	2300      	movs	r3, #0
 80040f4:	61bb      	str	r3, [r7, #24]
 80040f6:	4b30      	ldr	r3, [pc, #192]	; (80041b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	4a2f      	ldr	r2, [pc, #188]	; (80041b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	6413      	str	r3, [r2, #64]	; 0x40
 8004102:	4b2d      	ldr	r3, [pc, #180]	; (80041b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	61bb      	str	r3, [r7, #24]
 800410c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	4b29      	ldr	r3, [pc, #164]	; (80041b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	4a28      	ldr	r2, [pc, #160]	; (80041b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004118:	f043 0301 	orr.w	r3, r3, #1
 800411c:	6313      	str	r3, [r2, #48]	; 0x30
 800411e:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 800412a:	f248 0302 	movw	r3, #32770	; 0x8002
 800412e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004130:	2302      	movs	r3, #2
 8004132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004134:	2301      	movs	r3, #1
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004138:	2300      	movs	r3, #0
 800413a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800413c:	2301      	movs	r3, #1
 800413e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004140:	f107 031c 	add.w	r3, r7, #28
 8004144:	4619      	mov	r1, r3
 8004146:	481d      	ldr	r0, [pc, #116]	; (80041bc <HAL_TIM_Encoder_MspInit+0xec>)
 8004148:	f001 ff20 	bl	8005f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800414c:	e030      	b.n	80041b0 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1b      	ldr	r2, [pc, #108]	; (80041c0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d12b      	bne.n	80041b0 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004158:	2300      	movs	r3, #0
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	4b16      	ldr	r3, [pc, #88]	; (80041b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004162:	f043 0304 	orr.w	r3, r3, #4
 8004166:	6413      	str	r3, [r2, #64]	; 0x40
 8004168:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800417a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417c:	4a0e      	ldr	r2, [pc, #56]	; (80041b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800417e:	f043 0302 	orr.w	r3, r3, #2
 8004182:	6313      	str	r3, [r2, #48]	; 0x30
 8004184:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004190:	23c0      	movs	r3, #192	; 0xc0
 8004192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004194:	2302      	movs	r3, #2
 8004196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004198:	2301      	movs	r3, #1
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800419c:	2300      	movs	r3, #0
 800419e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80041a0:	2302      	movs	r3, #2
 80041a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041a4:	f107 031c 	add.w	r3, r7, #28
 80041a8:	4619      	mov	r1, r3
 80041aa:	4806      	ldr	r0, [pc, #24]	; (80041c4 <HAL_TIM_Encoder_MspInit+0xf4>)
 80041ac:	f001 feee 	bl	8005f8c <HAL_GPIO_Init>
}
 80041b0:	bf00      	nop
 80041b2:	3730      	adds	r7, #48	; 0x30
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40020000 	.word	0x40020000
 80041c0:	40000800 	.word	0x40000800
 80041c4:	40020400 	.word	0x40020400

080041c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a0e      	ldr	r2, [pc, #56]	; (8004210 <HAL_TIM_Base_MspInit+0x48>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d115      	bne.n	8004206 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <HAL_TIM_Base_MspInit+0x4c>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	4a0c      	ldr	r2, [pc, #48]	; (8004214 <HAL_TIM_Base_MspInit+0x4c>)
 80041e4:	f043 0302 	orr.w	r3, r3, #2
 80041e8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ea:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <HAL_TIM_Base_MspInit+0x4c>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80041f6:	2200      	movs	r2, #0
 80041f8:	2100      	movs	r1, #0
 80041fa:	201d      	movs	r0, #29
 80041fc:	f001 faaf 	bl	800575e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004200:	201d      	movs	r0, #29
 8004202:	f001 fac8 	bl	8005796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40000400 	.word	0x40000400
 8004214:	40023800 	.word	0x40023800

08004218 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004220:	f107 030c 	add.w	r3, r7, #12
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	60da      	str	r2, [r3, #12]
 800422e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a12      	ldr	r2, [pc, #72]	; (8004280 <HAL_TIM_MspPostInit+0x68>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d11d      	bne.n	8004276 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800423a:	2300      	movs	r3, #0
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	4b11      	ldr	r3, [pc, #68]	; (8004284 <HAL_TIM_MspPostInit+0x6c>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	4a10      	ldr	r2, [pc, #64]	; (8004284 <HAL_TIM_MspPostInit+0x6c>)
 8004244:	f043 0302 	orr.w	r3, r3, #2
 8004248:	6313      	str	r3, [r2, #48]	; 0x30
 800424a:	4b0e      	ldr	r3, [pc, #56]	; (8004284 <HAL_TIM_MspPostInit+0x6c>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004256:	2301      	movs	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800425a:	2302      	movs	r3, #2
 800425c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004262:	2300      	movs	r3, #0
 8004264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004266:	2302      	movs	r3, #2
 8004268:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800426a:	f107 030c 	add.w	r3, r7, #12
 800426e:	4619      	mov	r1, r3
 8004270:	4805      	ldr	r0, [pc, #20]	; (8004288 <HAL_TIM_MspPostInit+0x70>)
 8004272:	f001 fe8b 	bl	8005f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004276:	bf00      	nop
 8004278:	3720      	adds	r7, #32
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40000400 	.word	0x40000400
 8004284:	40023800 	.word	0x40023800
 8004288:	40020400 	.word	0x40020400

0800428c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004290:	e7fe      	b.n	8004290 <NMI_Handler+0x4>

08004292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004292:	b480      	push	{r7}
 8004294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004296:	e7fe      	b.n	8004296 <HardFault_Handler+0x4>

08004298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800429c:	e7fe      	b.n	800429c <MemManage_Handler+0x4>

0800429e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800429e:	b480      	push	{r7}
 80042a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042a2:	e7fe      	b.n	80042a2 <BusFault_Handler+0x4>

080042a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042a8:	e7fe      	b.n	80042a8 <UsageFault_Handler+0x4>

080042aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042aa:	b480      	push	{r7}
 80042ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042ae:	bf00      	nop
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042bc:	bf00      	nop
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042c6:	b480      	push	{r7}
 80042c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042ca:	bf00      	nop
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042d8:	f000 f8a8 	bl	800442c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042dc:	bf00      	nop
 80042de:	bd80      	pop	{r7, pc}

080042e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80042e4:	4802      	ldr	r0, [pc, #8]	; (80042f0 <TIM3_IRQHandler+0x10>)
 80042e6:	f004 fc57 	bl	8008b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80042ea:	bf00      	nop
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20003cf8 	.word	0x20003cf8

080042f4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042f8:	4802      	ldr	r0, [pc, #8]	; (8004304 <DMA2_Stream4_IRQHandler+0x10>)
 80042fa:	f001 fbdd 	bl	8005ab8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80042fe:	bf00      	nop
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20003b4c 	.word	0x20003b4c

08004308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800430c:	4b08      	ldr	r3, [pc, #32]	; (8004330 <SystemInit+0x28>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004312:	4a07      	ldr	r2, [pc, #28]	; (8004330 <SystemInit+0x28>)
 8004314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800431c:	4b04      	ldr	r3, [pc, #16]	; (8004330 <SystemInit+0x28>)
 800431e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004322:	609a      	str	r2, [r3, #8]
#endif
}
 8004324:	bf00      	nop
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	e000ed00 	.word	0xe000ed00

08004334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004334:	f8df d034 	ldr.w	sp, [pc, #52]	; 800436c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004338:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800433a:	e003      	b.n	8004344 <LoopCopyDataInit>

0800433c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800433e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004340:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004342:	3104      	adds	r1, #4

08004344 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004344:	480b      	ldr	r0, [pc, #44]	; (8004374 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004346:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004348:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800434a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800434c:	d3f6      	bcc.n	800433c <CopyDataInit>
  ldr  r2, =_sbss
 800434e:	4a0b      	ldr	r2, [pc, #44]	; (800437c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004350:	e002      	b.n	8004358 <LoopFillZerobss>

08004352 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004352:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004354:	f842 3b04 	str.w	r3, [r2], #4

08004358 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004358:	4b09      	ldr	r3, [pc, #36]	; (8004380 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800435a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800435c:	d3f9      	bcc.n	8004352 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800435e:	f7ff ffd3 	bl	8004308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004362:	f005 fa65 	bl	8009830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004366:	f7fe fd0f 	bl	8002d88 <main>
  bx  lr    
 800436a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800436c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004370:	0800ae7c 	.word	0x0800ae7c
  ldr  r0, =_sdata
 8004374:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004378:	20000800 	.word	0x20000800
  ldr  r2, =_sbss
 800437c:	20000800 	.word	0x20000800
  ldr  r3, = _ebss
 8004380:	20003d8c 	.word	0x20003d8c

08004384 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004384:	e7fe      	b.n	8004384 <ADC_IRQHandler>
	...

08004388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800438c:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <HAL_Init+0x40>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a0d      	ldr	r2, [pc, #52]	; (80043c8 <HAL_Init+0x40>)
 8004392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004396:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <HAL_Init+0x40>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a0a      	ldr	r2, [pc, #40]	; (80043c8 <HAL_Init+0x40>)
 800439e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043a4:	4b08      	ldr	r3, [pc, #32]	; (80043c8 <HAL_Init+0x40>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a07      	ldr	r2, [pc, #28]	; (80043c8 <HAL_Init+0x40>)
 80043aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043b0:	2003      	movs	r0, #3
 80043b2:	f001 f9c9 	bl	8005748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043b6:	2000      	movs	r0, #0
 80043b8:	f000 f808 	bl	80043cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043bc:	f7ff fcf4 	bl	8003da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40023c00 	.word	0x40023c00

080043cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043d4:	4b12      	ldr	r3, [pc, #72]	; (8004420 <HAL_InitTick+0x54>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b12      	ldr	r3, [pc, #72]	; (8004424 <HAL_InitTick+0x58>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	4619      	mov	r1, r3
 80043de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80043e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ea:	4618      	mov	r0, r3
 80043ec:	f001 f9e1 	bl	80057b2 <HAL_SYSTICK_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e00e      	b.n	8004418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b0f      	cmp	r3, #15
 80043fe:	d80a      	bhi.n	8004416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004400:	2200      	movs	r2, #0
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	f04f 30ff 	mov.w	r0, #4294967295
 8004408:	f001 f9a9 	bl	800575e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800440c:	4a06      	ldr	r2, [pc, #24]	; (8004428 <HAL_InitTick+0x5c>)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	e000      	b.n	8004418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
}
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	200007f4 	.word	0x200007f4
 8004424:	200007fc 	.word	0x200007fc
 8004428:	200007f8 	.word	0x200007f8

0800442c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004430:	4b06      	ldr	r3, [pc, #24]	; (800444c <HAL_IncTick+0x20>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <HAL_IncTick+0x24>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4413      	add	r3, r2
 800443c:	4a04      	ldr	r2, [pc, #16]	; (8004450 <HAL_IncTick+0x24>)
 800443e:	6013      	str	r3, [r2, #0]
}
 8004440:	bf00      	nop
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	200007fc 	.word	0x200007fc
 8004450:	20003d88 	.word	0x20003d88

08004454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return uwTick;
 8004458:	4b03      	ldr	r3, [pc, #12]	; (8004468 <HAL_GetTick+0x14>)
 800445a:	681b      	ldr	r3, [r3, #0]
}
 800445c:	4618      	mov	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	20003d88 	.word	0x20003d88

0800446c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004474:	f7ff ffee 	bl	8004454 <HAL_GetTick>
 8004478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004484:	d005      	beq.n	8004492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004486:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <HAL_Delay+0x44>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004492:	bf00      	nop
 8004494:	f7ff ffde 	bl	8004454 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d8f7      	bhi.n	8004494 <HAL_Delay+0x28>
  {
  }
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	200007fc 	.word	0x200007fc

080044b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e033      	b.n	8004532 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff fc90 	bl	8003df8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d118      	bne.n	8004524 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80044fa:	f023 0302 	bic.w	r3, r3, #2
 80044fe:	f043 0202 	orr.w	r2, r3, #2
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fbe8 	bl	8004cdc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f023 0303 	bic.w	r3, r3, #3
 800451a:	f043 0201 	orr.w	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	641a      	str	r2, [r3, #64]	; 0x40
 8004522:	e001      	b.n	8004528 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004530:	7bfb      	ldrb	r3, [r7, #15]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800454e:	2b01      	cmp	r3, #1
 8004550:	d101      	bne.n	8004556 <HAL_ADC_Start+0x1a>
 8004552:	2302      	movs	r3, #2
 8004554:	e097      	b.n	8004686 <HAL_ADC_Start+0x14a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b01      	cmp	r3, #1
 800456a:	d018      	beq.n	800459e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800457c:	4b45      	ldr	r3, [pc, #276]	; (8004694 <HAL_ADC_Start+0x158>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a45      	ldr	r2, [pc, #276]	; (8004698 <HAL_ADC_Start+0x15c>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	0c9a      	lsrs	r2, r3, #18
 8004588:	4613      	mov	r3, r2
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	4413      	add	r3, r2
 800458e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004590:	e002      	b.n	8004598 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	3b01      	subs	r3, #1
 8004596:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f9      	bne.n	8004592 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d15f      	bne.n	800466c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80045b4:	f023 0301 	bic.w	r3, r3, #1
 80045b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80045d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ea:	d106      	bne.n	80045fa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f0:	f023 0206 	bic.w	r2, r3, #6
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	645a      	str	r2, [r3, #68]	; 0x44
 80045f8:	e002      	b.n	8004600 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004608:	4b24      	ldr	r3, [pc, #144]	; (800469c <HAL_ADC_Start+0x160>)
 800460a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004614:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10f      	bne.n	8004642 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d129      	bne.n	8004684 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800463e:	609a      	str	r2, [r3, #8]
 8004640:	e020      	b.n	8004684 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a16      	ldr	r2, [pc, #88]	; (80046a0 <HAL_ADC_Start+0x164>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d11b      	bne.n	8004684 <HAL_ADC_Start+0x148>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d114      	bne.n	8004684 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004668:	609a      	str	r2, [r3, #8]
 800466a:	e00b      	b.n	8004684 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	f043 0210 	orr.w	r2, r3, #16
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467c:	f043 0201 	orr.w	r2, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	200007f4 	.word	0x200007f4
 8004698:	431bde83 	.word	0x431bde83
 800469c:	40012300 	.word	0x40012300
 80046a0:	40012000 	.word	0x40012000

080046a4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c0:	d113      	bne.n	80046ea <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80046cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d0:	d10b      	bne.n	80046ea <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f043 0220 	orr.w	r2, r3, #32
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e063      	b.n	80047b2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80046ea:	f7ff feb3 	bl	8004454 <HAL_GetTick>
 80046ee:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80046f0:	e021      	b.n	8004736 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d01d      	beq.n	8004736 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <HAL_ADC_PollForConversion+0x6c>
 8004700:	f7ff fea8 	bl	8004454 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d212      	bcs.n	8004736 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b02      	cmp	r3, #2
 800471c:	d00b      	beq.n	8004736 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	f043 0204 	orr.w	r2, r3, #4
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e03d      	b.n	80047b2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b02      	cmp	r3, #2
 8004742:	d1d6      	bne.n	80046f2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f06f 0212 	mvn.w	r2, #18
 800474c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d123      	bne.n	80047b0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800476c:	2b00      	cmp	r3, #0
 800476e:	d11f      	bne.n	80047b0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800477a:	2b00      	cmp	r3, #0
 800477c:	d006      	beq.n	800478c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004788:	2b00      	cmp	r3, #0
 800478a:	d111      	bne.n	80047b0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d105      	bne.n	80047b0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	f043 0201 	orr.w	r2, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_ADC_Start_DMA+0x1e>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e0ce      	b.n	8004978 <HAL_ADC_Start_DMA+0x1bc>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d018      	beq.n	8004822 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004800:	4b5f      	ldr	r3, [pc, #380]	; (8004980 <HAL_ADC_Start_DMA+0x1c4>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a5f      	ldr	r2, [pc, #380]	; (8004984 <HAL_ADC_Start_DMA+0x1c8>)
 8004806:	fba2 2303 	umull	r2, r3, r2, r3
 800480a:	0c9a      	lsrs	r2, r3, #18
 800480c:	4613      	mov	r3, r2
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	4413      	add	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004814:	e002      	b.n	800481c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	3b01      	subs	r3, #1
 800481a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f9      	bne.n	8004816 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004830:	d107      	bne.n	8004842 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004840:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b01      	cmp	r3, #1
 800484e:	f040 8086 	bne.w	800495e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800485a:	f023 0301 	bic.w	r3, r3, #1
 800485e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004870:	2b00      	cmp	r3, #0
 8004872:	d007      	beq.n	8004884 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800487c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800488c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004890:	d106      	bne.n	80048a0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004896:	f023 0206 	bic.w	r2, r3, #6
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	645a      	str	r2, [r3, #68]	; 0x44
 800489e:	e002      	b.n	80048a6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048ae:	4b36      	ldr	r3, [pc, #216]	; (8004988 <HAL_ADC_Start_DMA+0x1cc>)
 80048b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b6:	4a35      	ldr	r2, [pc, #212]	; (800498c <HAL_ADC_Start_DMA+0x1d0>)
 80048b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	4a34      	ldr	r2, [pc, #208]	; (8004990 <HAL_ADC_Start_DMA+0x1d4>)
 80048c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c6:	4a33      	ldr	r2, [pc, #204]	; (8004994 <HAL_ADC_Start_DMA+0x1d8>)
 80048c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80048d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80048e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	334c      	adds	r3, #76	; 0x4c
 80048fe:	4619      	mov	r1, r3
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f001 f810 	bl	8005928 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 031f 	and.w	r3, r3, #31
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10f      	bne.n	8004934 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d129      	bne.n	8004976 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004930:	609a      	str	r2, [r3, #8]
 8004932:	e020      	b.n	8004976 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a17      	ldr	r2, [pc, #92]	; (8004998 <HAL_ADC_Start_DMA+0x1dc>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d11b      	bne.n	8004976 <HAL_ADC_Start_DMA+0x1ba>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d114      	bne.n	8004976 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800495a:	609a      	str	r2, [r3, #8]
 800495c:	e00b      	b.n	8004976 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f043 0210 	orr.w	r2, r3, #16
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496e:	f043 0201 	orr.w	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	200007f4 	.word	0x200007f4
 8004984:	431bde83 	.word	0x431bde83
 8004988:	40012300 	.word	0x40012300
 800498c:	08004ed5 	.word	0x08004ed5
 8004990:	08004f8f 	.word	0x08004f8f
 8004994:	08004fab 	.word	0x08004fab
 8004998:	40012000 	.word	0x40012000

0800499c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <HAL_ADC_Stop_DMA+0x1a>
 80049b2:	2302      	movs	r3, #2
 80049b4:	e048      	b.n	8004a48 <HAL_ADC_Stop_DMA+0xac>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0201 	bic.w	r2, r2, #1
 80049cc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d130      	bne.n	8004a3e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049ea:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d10f      	bne.n	8004a1a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 ffea 	bl	80059d8 <HAL_DMA_Abort>
 8004a04:	4603      	mov	r3, r0
 8004a06:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004a28:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a32:	f023 0301 	bic.w	r3, r3, #1
 8004a36:	f043 0201 	orr.w	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x1c>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e113      	b.n	8004cbc <HAL_ADC_ConfigChannel+0x244>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b09      	cmp	r3, #9
 8004aa2:	d925      	bls.n	8004af0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68d9      	ldr	r1, [r3, #12]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	4413      	add	r3, r2
 8004ab8:	3b1e      	subs	r3, #30
 8004aba:	2207      	movs	r2, #7
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	43da      	mvns	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	400a      	ands	r2, r1
 8004ac8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68d9      	ldr	r1, [r3, #12]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	4618      	mov	r0, r3
 8004adc:	4603      	mov	r3, r0
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	4403      	add	r3, r0
 8004ae2:	3b1e      	subs	r3, #30
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	60da      	str	r2, [r3, #12]
 8004aee:	e022      	b.n	8004b36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6919      	ldr	r1, [r3, #16]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	461a      	mov	r2, r3
 8004afe:	4613      	mov	r3, r2
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	4413      	add	r3, r2
 8004b04:	2207      	movs	r2, #7
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	43da      	mvns	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	400a      	ands	r2, r1
 8004b12:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6919      	ldr	r1, [r3, #16]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	689a      	ldr	r2, [r3, #8]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	4618      	mov	r0, r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	4403      	add	r3, r0
 8004b2c:	409a      	lsls	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b06      	cmp	r3, #6
 8004b3c:	d824      	bhi.n	8004b88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	3b05      	subs	r3, #5
 8004b50:	221f      	movs	r2, #31
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	43da      	mvns	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	400a      	ands	r2, r1
 8004b5e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	4613      	mov	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	3b05      	subs	r3, #5
 8004b7a:	fa00 f203 	lsl.w	r2, r0, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	635a      	str	r2, [r3, #52]	; 0x34
 8004b86:	e04c      	b.n	8004c22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b0c      	cmp	r3, #12
 8004b8e:	d824      	bhi.n	8004bda <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	3b23      	subs	r3, #35	; 0x23
 8004ba2:	221f      	movs	r2, #31
 8004ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba8:	43da      	mvns	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	400a      	ands	r2, r1
 8004bb0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	3b23      	subs	r3, #35	; 0x23
 8004bcc:	fa00 f203 	lsl.w	r2, r0, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8004bd8:	e023      	b.n	8004c22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	4613      	mov	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	3b41      	subs	r3, #65	; 0x41
 8004bec:	221f      	movs	r2, #31
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf2:	43da      	mvns	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	400a      	ands	r2, r1
 8004bfa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	4618      	mov	r0, r3
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	3b41      	subs	r3, #65	; 0x41
 8004c16:	fa00 f203 	lsl.w	r2, r0, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c22:	4b29      	ldr	r3, [pc, #164]	; (8004cc8 <HAL_ADC_ConfigChannel+0x250>)
 8004c24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a28      	ldr	r2, [pc, #160]	; (8004ccc <HAL_ADC_ConfigChannel+0x254>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d10f      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x1d8>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b12      	cmp	r3, #18
 8004c36:	d10b      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1d      	ldr	r2, [pc, #116]	; (8004ccc <HAL_ADC_ConfigChannel+0x254>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d12b      	bne.n	8004cb2 <HAL_ADC_ConfigChannel+0x23a>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1c      	ldr	r2, [pc, #112]	; (8004cd0 <HAL_ADC_ConfigChannel+0x258>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d003      	beq.n	8004c6c <HAL_ADC_ConfigChannel+0x1f4>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b11      	cmp	r3, #17
 8004c6a:	d122      	bne.n	8004cb2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a11      	ldr	r2, [pc, #68]	; (8004cd0 <HAL_ADC_ConfigChannel+0x258>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d111      	bne.n	8004cb2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c8e:	4b11      	ldr	r3, [pc, #68]	; (8004cd4 <HAL_ADC_ConfigChannel+0x25c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a11      	ldr	r2, [pc, #68]	; (8004cd8 <HAL_ADC_ConfigChannel+0x260>)
 8004c94:	fba2 2303 	umull	r2, r3, r2, r3
 8004c98:	0c9a      	lsrs	r2, r3, #18
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ca4:	e002      	b.n	8004cac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f9      	bne.n	8004ca6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	40012300 	.word	0x40012300
 8004ccc:	40012000 	.word	0x40012000
 8004cd0:	10000012 	.word	0x10000012
 8004cd4:	200007f4 	.word	0x200007f4
 8004cd8:	431bde83 	.word	0x431bde83

08004cdc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ce4:	4b79      	ldr	r3, [pc, #484]	; (8004ecc <ADC_Init+0x1f0>)
 8004ce6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6859      	ldr	r1, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	021a      	lsls	r2, r3, #8
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004d34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6859      	ldr	r1, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6899      	ldr	r1, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6e:	4a58      	ldr	r2, [pc, #352]	; (8004ed0 <ADC_Init+0x1f4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d022      	beq.n	8004dba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6899      	ldr	r1, [r3, #8]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004da4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6899      	ldr	r1, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	609a      	str	r2, [r3, #8]
 8004db8:	e00f      	b.n	8004dda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004dc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004dd8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0202 	bic.w	r2, r2, #2
 8004de8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6899      	ldr	r1, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	7e1b      	ldrb	r3, [r3, #24]
 8004df4:	005a      	lsls	r2, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01b      	beq.n	8004e40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004e26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6859      	ldr	r1, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	3b01      	subs	r3, #1
 8004e34:	035a      	lsls	r2, r3, #13
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	605a      	str	r2, [r3, #4]
 8004e3e:	e007      	b.n	8004e50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	051a      	lsls	r2, r3, #20
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6899      	ldr	r1, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e92:	025a      	lsls	r2, r3, #9
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6899      	ldr	r1, [r3, #8]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	029a      	lsls	r2, r3, #10
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	609a      	str	r2, [r3, #8]
}
 8004ec0:	bf00      	nop
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	40012300 	.word	0x40012300
 8004ed0:	0f000001 	.word	0x0f000001

08004ed4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d13c      	bne.n	8004f68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d12b      	bne.n	8004f60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d127      	bne.n	8004f60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d006      	beq.n	8004f2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d119      	bne.n	8004f60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0220 	bic.w	r2, r2, #32
 8004f3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d105      	bne.n	8004f60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	f043 0201 	orr.w	r2, r3, #1
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f7fe ff0b 	bl	8003d7c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f66:	e00e      	b.n	8004f86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f7ff fd75 	bl	8004a64 <HAL_ADC_ErrorCallback>
}
 8004f7a:	e004      	b.n	8004f86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	4798      	blx	r3
}
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f7ff fd57 	bl	8004a50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fa2:	bf00      	nop
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2240      	movs	r2, #64	; 0x40
 8004fbc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	f043 0204 	orr.w	r2, r3, #4
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f7ff fd4a 	bl	8004a64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fd0:	bf00      	nop
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	2300      	movs	r3, #0
 8004fea:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_ADCEx_InjectedStart+0x22>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e0aa      	b.n	8005150 <HAL_ADCEx_InjectedStart+0x178>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b01      	cmp	r3, #1
 800500e:	d018      	beq.n	8005042 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005020:	4b4e      	ldr	r3, [pc, #312]	; (800515c <HAL_ADCEx_InjectedStart+0x184>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a4e      	ldr	r2, [pc, #312]	; (8005160 <HAL_ADCEx_InjectedStart+0x188>)
 8005026:	fba2 2303 	umull	r2, r3, r2, r3
 800502a:	0c9a      	lsrs	r2, r3, #18
 800502c:	4613      	mov	r3, r2
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	4413      	add	r3, r2
 8005032:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005034:	e002      	b.n	800503c <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	3b01      	subs	r3, #1
 800503a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f9      	bne.n	8005036 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b01      	cmp	r3, #1
 800504e:	d172      	bne.n	8005136 <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005054:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005058:	f023 0301 	bic.w	r3, r3, #1
 800505c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506c:	2b00      	cmp	r3, #0
 800506e:	d102      	bne.n	8005076 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f06f 0204 	mvn.w	r2, #4
 8005086:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005088:	4b36      	ldr	r3, [pc, #216]	; (8005164 <HAL_ADCEx_InjectedStart+0x18c>)
 800508a:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f003 031f 	and.w	r3, r3, #31
 8005094:	2b00      	cmp	r3, #0
 8005096:	d124      	bne.n	80050e2 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	bf0c      	ite	eq
 80050a6:	2301      	moveq	r3, #1
 80050a8:	2300      	movne	r3, #0
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	bf0c      	ite	eq
 80050bc:	2301      	moveq	r3, #1
 80050be:	2300      	movne	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d041      	beq.n	800514e <HAL_ADCEx_InjectedStart+0x176>
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d03e      	beq.n	800514e <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80050de:	609a      	str	r2, [r3, #8]
 80050e0:	e035      	b.n	800514e <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bf0c      	ite	eq
 80050f0:	2301      	moveq	r3, #1
 80050f2:	2300      	movne	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005102:	2b00      	cmp	r3, #0
 8005104:	bf0c      	ite	eq
 8005106:	2301      	moveq	r3, #1
 8005108:	2300      	movne	r3, #0
 800510a:	b2db      	uxtb	r3, r3
 800510c:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a15      	ldr	r2, [pc, #84]	; (8005168 <HAL_ADCEx_InjectedStart+0x190>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d11a      	bne.n	800514e <HAL_ADCEx_InjectedStart+0x176>
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d017      	beq.n	800514e <HAL_ADCEx_InjectedStart+0x176>
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d014      	beq.n	800514e <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005132:	609a      	str	r2, [r3, #8]
 8005134:	e00b      	b.n	800514e <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	f043 0210 	orr.w	r2, r3, #16
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005146:	f043 0201 	orr.w	r2, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	371c      	adds	r7, #28
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	200007f4 	.word	0x200007f4
 8005160:	431bde83 	.word	0x431bde83
 8005164:	40012300 	.word	0x40012300
 8005168:	40012000 	.word	0x40012000

0800516c <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_ADCEx_InjectedStop+0x1a>
 8005182:	2302      	movs	r3, #2
 8005184:	e037      	b.n	80051f6 <HAL_ADCEx_InjectedStop+0x8a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005196:	2b00      	cmp	r3, #0
 8005198:	d120      	bne.n	80051dc <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d119      	bne.n	80051dc <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0201 	bic.w	r2, r2, #1
 80051b6:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d112      	bne.n	80051ec <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80051ce:	f023 0301 	bic.w	r3, r3, #1
 80051d2:	f043 0201 	orr.w	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80051da:	e007      	b.n	80051ec <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	f043 0220 	orr.w	r2, r3, #32
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
	...

08005204 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f06f 0204 	mvn.w	r2, #4
 800521a:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	3b01      	subs	r3, #1
 8005220:	2b03      	cmp	r3, #3
 8005222:	d81f      	bhi.n	8005264 <HAL_ADCEx_InjectedGetValue+0x60>
 8005224:	a201      	add	r2, pc, #4	; (adr r2, 800522c <HAL_ADCEx_InjectedGetValue+0x28>)
 8005226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522a:	bf00      	nop
 800522c:	0800525b 	.word	0x0800525b
 8005230:	08005251 	.word	0x08005251
 8005234:	08005247 	.word	0x08005247
 8005238:	0800523d 	.word	0x0800523d
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005242:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8005244:	e00f      	b.n	8005266 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524c:	60fb      	str	r3, [r7, #12]
    }  
    break;
 800524e:	e00a      	b.n	8005266 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	60fb      	str	r3, [r7, #12]
    }
    break;
 8005258:	e005      	b.n	8005266 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005260:	60fb      	str	r3, [r7, #12]
    }
    break;
 8005262:	e000      	b.n	8005266 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8005264:	bf00      	nop
  }
  return tmp;
 8005266:	68fb      	ldr	r3, [r7, #12]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_ADCEx_InjectedConfigChannel+0x18>
 8005288:	2302      	movs	r3, #2
 800528a:	e17e      	b.n	800558a <HAL_ADCEx_InjectedConfigChannel+0x316>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b09      	cmp	r3, #9
 800529a:	d925      	bls.n	80052e8 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68d9      	ldr	r1, [r3, #12]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	461a      	mov	r2, r3
 80052aa:	4613      	mov	r3, r2
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	4413      	add	r3, r2
 80052b0:	3b1e      	subs	r3, #30
 80052b2:	2207      	movs	r2, #7
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	43da      	mvns	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	400a      	ands	r2, r1
 80052c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68d9      	ldr	r1, [r3, #12]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	4618      	mov	r0, r3
 80052d4:	4603      	mov	r3, r0
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	4403      	add	r3, r0
 80052da:	3b1e      	subs	r3, #30
 80052dc:	409a      	lsls	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	60da      	str	r2, [r3, #12]
 80052e6:	e022      	b.n	800532e <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6919      	ldr	r1, [r3, #16]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	461a      	mov	r2, r3
 80052f6:	4613      	mov	r3, r2
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	4413      	add	r3, r2
 80052fc:	2207      	movs	r2, #7
 80052fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005302:	43da      	mvns	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	400a      	ands	r2, r1
 800530a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6919      	ldr	r1, [r3, #16]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	b29b      	uxth	r3, r3
 800531c:	4618      	mov	r0, r3
 800531e:	4603      	mov	r3, r0
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	4403      	add	r3, r0
 8005324:	409a      	lsls	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800533c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	3b01      	subs	r3, #1
 800534a:	051a      	lsls	r2, r3, #20
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	b2da      	uxtb	r2, r3
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	b2db      	uxtb	r3, r3
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	b2db      	uxtb	r3, r3
 800536a:	3303      	adds	r3, #3
 800536c:	b2db      	uxtb	r3, r3
 800536e:	461a      	mov	r2, r3
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	221f      	movs	r2, #31
 8005378:	fa02 f303 	lsl.w	r3, r2, r3
 800537c:	43da      	mvns	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	400a      	ands	r2, r1
 8005384:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	b29b      	uxth	r3, r3
 8005392:	4618      	mov	r0, r3
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	b2da      	uxtb	r2, r3
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	3303      	adds	r3, #3
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	461a      	mov	r2, r3
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	fa00 f203 	lsl.w	r2, r0, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	4a75      	ldr	r2, [pc, #468]	; (8005598 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d022      	beq.n	800540c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80053d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6899      	ldr	r1, [r3, #8]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	699a      	ldr	r2, [r3, #24]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80053f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6899      	ldr	r1, [r3, #8]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	69da      	ldr	r2, [r3, #28]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	609a      	str	r2, [r3, #8]
 800540a:	e00f      	b.n	800542c <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800541a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800542a:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	7d5b      	ldrb	r3, [r3, #21]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d008      	beq.n	8005446 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005442:	605a      	str	r2, [r3, #4]
 8005444:	e007      	b.n	8005456 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005454:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	7d1b      	ldrb	r3, [r3, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d008      	beq.n	8005470 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800546c:	605a      	str	r2, [r3, #4]
 800546e:	e007      	b.n	8005480 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800547e:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2b03      	cmp	r3, #3
 8005486:	d02e      	beq.n	80054e6 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8005488:	2b03      	cmp	r3, #3
 800548a:	d840      	bhi.n	800550e <HAL_ADCEx_InjectedConfigChannel+0x29a>
 800548c:	2b01      	cmp	r3, #1
 800548e:	d002      	beq.n	8005496 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8005490:	2b02      	cmp	r3, #2
 8005492:	d014      	beq.n	80054be <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8005494:	e03b      	b.n	800550e <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6812      	ldr	r2, [r2, #0]
 80054a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80054a4:	f023 030f 	bic.w	r3, r3, #15
 80054a8:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6959      	ldr	r1, [r3, #20]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	615a      	str	r2, [r3, #20]
      break;
 80054bc:	e03b      	b.n	8005536 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6812      	ldr	r2, [r2, #0]
 80054c8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80054cc:	f023 030f 	bic.w	r3, r3, #15
 80054d0:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6999      	ldr	r1, [r3, #24]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	619a      	str	r2, [r3, #24]
      break;
 80054e4:	e027      	b.n	8005536 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6812      	ldr	r2, [r2, #0]
 80054f0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80054f4:	f023 030f 	bic.w	r3, r3, #15
 80054f8:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69d9      	ldr	r1, [r3, #28]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	61da      	str	r2, [r3, #28]
      break;
 800550c:	e013      	b.n	8005536 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6812      	ldr	r2, [r2, #0]
 8005518:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800551c:	f023 030f 	bic.w	r3, r3, #15
 8005520:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6a19      	ldr	r1, [r3, #32]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	621a      	str	r2, [r3, #32]
      break;
 8005534:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005536:	4b19      	ldr	r3, [pc, #100]	; (800559c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8005538:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a18      	ldr	r2, [pc, #96]	; (80055a0 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d109      	bne.n	8005558 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b12      	cmp	r3, #18
 800554a:	d105      	bne.n	8005558 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a10      	ldr	r2, [pc, #64]	; (80055a0 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d10e      	bne.n	8005580 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a0f      	ldr	r2, [pc, #60]	; (80055a4 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d003      	beq.n	8005574 <HAL_ADCEx_InjectedConfigChannel+0x300>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b11      	cmp	r3, #17
 8005572:	d105      	bne.n	8005580 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	000f0001 	.word	0x000f0001
 800559c:	40012300 	.word	0x40012300
 80055a0:	40012000 	.word	0x40012000
 80055a4:	10000012 	.word	0x10000012

080055a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055b8:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <__NVIC_SetPriorityGrouping+0x44>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055c4:	4013      	ands	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055da:	4a04      	ldr	r2, [pc, #16]	; (80055ec <__NVIC_SetPriorityGrouping+0x44>)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	60d3      	str	r3, [r2, #12]
}
 80055e0:	bf00      	nop
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	e000ed00 	.word	0xe000ed00

080055f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055f4:	4b04      	ldr	r3, [pc, #16]	; (8005608 <__NVIC_GetPriorityGrouping+0x18>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	0a1b      	lsrs	r3, r3, #8
 80055fa:	f003 0307 	and.w	r3, r3, #7
}
 80055fe:	4618      	mov	r0, r3
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	e000ed00 	.word	0xe000ed00

0800560c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	4603      	mov	r3, r0
 8005614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800561a:	2b00      	cmp	r3, #0
 800561c:	db0b      	blt.n	8005636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800561e:	79fb      	ldrb	r3, [r7, #7]
 8005620:	f003 021f 	and.w	r2, r3, #31
 8005624:	4907      	ldr	r1, [pc, #28]	; (8005644 <__NVIC_EnableIRQ+0x38>)
 8005626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562a:	095b      	lsrs	r3, r3, #5
 800562c:	2001      	movs	r0, #1
 800562e:	fa00 f202 	lsl.w	r2, r0, r2
 8005632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	e000e100 	.word	0xe000e100

08005648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	6039      	str	r1, [r7, #0]
 8005652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005658:	2b00      	cmp	r3, #0
 800565a:	db0a      	blt.n	8005672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	b2da      	uxtb	r2, r3
 8005660:	490c      	ldr	r1, [pc, #48]	; (8005694 <__NVIC_SetPriority+0x4c>)
 8005662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005666:	0112      	lsls	r2, r2, #4
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	440b      	add	r3, r1
 800566c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005670:	e00a      	b.n	8005688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	b2da      	uxtb	r2, r3
 8005676:	4908      	ldr	r1, [pc, #32]	; (8005698 <__NVIC_SetPriority+0x50>)
 8005678:	79fb      	ldrb	r3, [r7, #7]
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	3b04      	subs	r3, #4
 8005680:	0112      	lsls	r2, r2, #4
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	440b      	add	r3, r1
 8005686:	761a      	strb	r2, [r3, #24]
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	e000e100 	.word	0xe000e100
 8005698:	e000ed00 	.word	0xe000ed00

0800569c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800569c:	b480      	push	{r7}
 800569e:	b089      	sub	sp, #36	; 0x24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	f1c3 0307 	rsb	r3, r3, #7
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	bf28      	it	cs
 80056ba:	2304      	movcs	r3, #4
 80056bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	3304      	adds	r3, #4
 80056c2:	2b06      	cmp	r3, #6
 80056c4:	d902      	bls.n	80056cc <NVIC_EncodePriority+0x30>
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	3b03      	subs	r3, #3
 80056ca:	e000      	b.n	80056ce <NVIC_EncodePriority+0x32>
 80056cc:	2300      	movs	r3, #0
 80056ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056d0:	f04f 32ff 	mov.w	r2, #4294967295
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	43da      	mvns	r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	401a      	ands	r2, r3
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056e4:	f04f 31ff 	mov.w	r1, #4294967295
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	fa01 f303 	lsl.w	r3, r1, r3
 80056ee:	43d9      	mvns	r1, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056f4:	4313      	orrs	r3, r2
         );
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3724      	adds	r7, #36	; 0x24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
	...

08005704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3b01      	subs	r3, #1
 8005710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005714:	d301      	bcc.n	800571a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005716:	2301      	movs	r3, #1
 8005718:	e00f      	b.n	800573a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800571a:	4a0a      	ldr	r2, [pc, #40]	; (8005744 <SysTick_Config+0x40>)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3b01      	subs	r3, #1
 8005720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005722:	210f      	movs	r1, #15
 8005724:	f04f 30ff 	mov.w	r0, #4294967295
 8005728:	f7ff ff8e 	bl	8005648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <SysTick_Config+0x40>)
 800572e:	2200      	movs	r2, #0
 8005730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005732:	4b04      	ldr	r3, [pc, #16]	; (8005744 <SysTick_Config+0x40>)
 8005734:	2207      	movs	r2, #7
 8005736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	e000e010 	.word	0xe000e010

08005748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff ff29 	bl	80055a8 <__NVIC_SetPriorityGrouping>
}
 8005756:	bf00      	nop
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800575e:	b580      	push	{r7, lr}
 8005760:	b086      	sub	sp, #24
 8005762:	af00      	add	r7, sp, #0
 8005764:	4603      	mov	r3, r0
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	607a      	str	r2, [r7, #4]
 800576a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005770:	f7ff ff3e 	bl	80055f0 <__NVIC_GetPriorityGrouping>
 8005774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	6978      	ldr	r0, [r7, #20]
 800577c:	f7ff ff8e 	bl	800569c <NVIC_EncodePriority>
 8005780:	4602      	mov	r2, r0
 8005782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005786:	4611      	mov	r1, r2
 8005788:	4618      	mov	r0, r3
 800578a:	f7ff ff5d 	bl	8005648 <__NVIC_SetPriority>
}
 800578e:	bf00      	nop
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b082      	sub	sp, #8
 800579a:	af00      	add	r7, sp, #0
 800579c:	4603      	mov	r3, r0
 800579e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff ff31 	bl	800560c <__NVIC_EnableIRQ>
}
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b082      	sub	sp, #8
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7ff ffa2 	bl	8005704 <SysTick_Config>
 80057c0:	4603      	mov	r3, r0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80057d8:	f7fe fe3c 	bl	8004454 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e099      	b.n	800591c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0201 	bic.w	r2, r2, #1
 8005806:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005808:	e00f      	b.n	800582a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800580a:	f7fe fe23 	bl	8004454 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b05      	cmp	r3, #5
 8005816:	d908      	bls.n	800582a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2203      	movs	r2, #3
 8005822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e078      	b.n	800591c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e8      	bne.n	800580a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	4b38      	ldr	r3, [pc, #224]	; (8005924 <HAL_DMA_Init+0x158>)
 8005844:	4013      	ands	r3, r2
 8005846:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005856:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005862:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800586e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	2b04      	cmp	r3, #4
 8005882:	d107      	bne.n	8005894 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588c:	4313      	orrs	r3, r2
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f023 0307 	bic.w	r3, r3, #7
 80058aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d117      	bne.n	80058ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00e      	beq.n	80058ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fadf 	bl	8005e94 <DMA_CheckFifoParam>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d008      	beq.n	80058ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2240      	movs	r2, #64	; 0x40
 80058e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80058ea:	2301      	movs	r3, #1
 80058ec:	e016      	b.n	800591c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fa96 	bl	8005e28 <DMA_CalcBaseAndBitshift>
 80058fc:	4603      	mov	r3, r0
 80058fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005904:	223f      	movs	r2, #63	; 0x3f
 8005906:	409a      	lsls	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3718      	adds	r7, #24
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	f010803f 	.word	0xf010803f

08005928 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005936:	2300      	movs	r3, #0
 8005938:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_DMA_Start_IT+0x26>
 800594a:	2302      	movs	r3, #2
 800594c:	e040      	b.n	80059d0 <HAL_DMA_Start_IT+0xa8>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b01      	cmp	r3, #1
 8005960:	d12f      	bne.n	80059c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2202      	movs	r2, #2
 8005966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	68b9      	ldr	r1, [r7, #8]
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 fa28 	bl	8005dcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005980:	223f      	movs	r2, #63	; 0x3f
 8005982:	409a      	lsls	r2, r3
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0216 	orr.w	r2, r2, #22
 8005996:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599c:	2b00      	cmp	r3, #0
 800599e:	d007      	beq.n	80059b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0208 	orr.w	r2, r2, #8
 80059ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	e005      	b.n	80059ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80059ca:	2302      	movs	r3, #2
 80059cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80059ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80059e6:	f7fe fd35 	bl	8004454 <HAL_GetTick>
 80059ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d008      	beq.n	8005a0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2280      	movs	r2, #128	; 0x80
 80059fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e052      	b.n	8005ab0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0216 	bic.w	r2, r2, #22
 8005a18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	695a      	ldr	r2, [r3, #20]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d103      	bne.n	8005a3a <HAL_DMA_Abort+0x62>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d007      	beq.n	8005a4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0208 	bic.w	r2, r2, #8
 8005a48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0201 	bic.w	r2, r2, #1
 8005a58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a5a:	e013      	b.n	8005a84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a5c:	f7fe fcfa 	bl	8004454 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b05      	cmp	r3, #5
 8005a68:	d90c      	bls.n	8005a84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2203      	movs	r2, #3
 8005a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e015      	b.n	8005ab0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e4      	bne.n	8005a5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a96:	223f      	movs	r2, #63	; 0x3f
 8005a98:	409a      	lsls	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ac4:	4b8e      	ldr	r3, [pc, #568]	; (8005d00 <HAL_DMA_IRQHandler+0x248>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a8e      	ldr	r2, [pc, #568]	; (8005d04 <HAL_DMA_IRQHandler+0x24c>)
 8005aca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ace:	0a9b      	lsrs	r3, r3, #10
 8005ad0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae2:	2208      	movs	r2, #8
 8005ae4:	409a      	lsls	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d01a      	beq.n	8005b24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d013      	beq.n	8005b24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0204 	bic.w	r2, r2, #4
 8005b0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b10:	2208      	movs	r2, #8
 8005b12:	409a      	lsls	r2, r3
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1c:	f043 0201 	orr.w	r2, r3, #1
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b28:	2201      	movs	r2, #1
 8005b2a:	409a      	lsls	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d012      	beq.n	8005b5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00b      	beq.n	8005b5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b46:	2201      	movs	r2, #1
 8005b48:	409a      	lsls	r2, r3
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b52:	f043 0202 	orr.w	r2, r3, #2
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b5e:	2204      	movs	r2, #4
 8005b60:	409a      	lsls	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4013      	ands	r3, r2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d012      	beq.n	8005b90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00b      	beq.n	8005b90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b7c:	2204      	movs	r2, #4
 8005b7e:	409a      	lsls	r2, r3
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b88:	f043 0204 	orr.w	r2, r3, #4
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b94:	2210      	movs	r2, #16
 8005b96:	409a      	lsls	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d043      	beq.n	8005c28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0308 	and.w	r3, r3, #8
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d03c      	beq.n	8005c28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb2:	2210      	movs	r2, #16
 8005bb4:	409a      	lsls	r2, r3
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d018      	beq.n	8005bfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d108      	bne.n	8005be8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d024      	beq.n	8005c28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	4798      	blx	r3
 8005be6:	e01f      	b.n	8005c28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01b      	beq.n	8005c28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	4798      	blx	r3
 8005bf8:	e016      	b.n	8005c28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d107      	bne.n	8005c18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0208 	bic.w	r2, r2, #8
 8005c16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	409a      	lsls	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4013      	ands	r3, r2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 808f 	beq.w	8005d58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0310 	and.w	r3, r3, #16
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 8087 	beq.w	8005d58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c4e:	2220      	movs	r2, #32
 8005c50:	409a      	lsls	r2, r3
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b05      	cmp	r3, #5
 8005c60:	d136      	bne.n	8005cd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0216 	bic.w	r2, r2, #22
 8005c70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695a      	ldr	r2, [r3, #20]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d103      	bne.n	8005c92 <HAL_DMA_IRQHandler+0x1da>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d007      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0208 	bic.w	r2, r2, #8
 8005ca0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca6:	223f      	movs	r2, #63	; 0x3f
 8005ca8:	409a      	lsls	r2, r3
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d07e      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	4798      	blx	r3
        }
        return;
 8005cce:	e079      	b.n	8005dc4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d01d      	beq.n	8005d1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10d      	bne.n	8005d08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d031      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	4798      	blx	r3
 8005cfc:	e02c      	b.n	8005d58 <HAL_DMA_IRQHandler+0x2a0>
 8005cfe:	bf00      	nop
 8005d00:	200007f4 	.word	0x200007f4
 8005d04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d023      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	4798      	blx	r3
 8005d18:	e01e      	b.n	8005d58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10f      	bne.n	8005d48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0210 	bic.w	r2, r2, #16
 8005d36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d032      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d022      	beq.n	8005db2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2205      	movs	r2, #5
 8005d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0201 	bic.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	3301      	adds	r3, #1
 8005d88:	60bb      	str	r3, [r7, #8]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d307      	bcc.n	8005da0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f2      	bne.n	8005d84 <HAL_DMA_IRQHandler+0x2cc>
 8005d9e:	e000      	b.n	8005da2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005da0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d005      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	4798      	blx	r3
 8005dc2:	e000      	b.n	8005dc6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005dc4:	bf00      	nop
    }
  }
}
 8005dc6:	3718      	adds	r7, #24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
 8005dd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005de8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	2b40      	cmp	r3, #64	; 0x40
 8005df8:	d108      	bne.n	8005e0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005e0a:	e007      	b.n	8005e1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	60da      	str	r2, [r3, #12]
}
 8005e1c:	bf00      	nop
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	3b10      	subs	r3, #16
 8005e38:	4a14      	ldr	r2, [pc, #80]	; (8005e8c <DMA_CalcBaseAndBitshift+0x64>)
 8005e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3e:	091b      	lsrs	r3, r3, #4
 8005e40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005e42:	4a13      	ldr	r2, [pc, #76]	; (8005e90 <DMA_CalcBaseAndBitshift+0x68>)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4413      	add	r3, r2
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d909      	bls.n	8005e6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e5e:	f023 0303 	bic.w	r3, r3, #3
 8005e62:	1d1a      	adds	r2, r3, #4
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	659a      	str	r2, [r3, #88]	; 0x58
 8005e68:	e007      	b.n	8005e7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e72:	f023 0303 	bic.w	r3, r3, #3
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	aaaaaaab 	.word	0xaaaaaaab
 8005e90:	0800a660 	.word	0x0800a660

08005e94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d11f      	bne.n	8005eee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d856      	bhi.n	8005f62 <DMA_CheckFifoParam+0xce>
 8005eb4:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <DMA_CheckFifoParam+0x28>)
 8005eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eba:	bf00      	nop
 8005ebc:	08005ecd 	.word	0x08005ecd
 8005ec0:	08005edf 	.word	0x08005edf
 8005ec4:	08005ecd 	.word	0x08005ecd
 8005ec8:	08005f63 	.word	0x08005f63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d046      	beq.n	8005f66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005edc:	e043      	b.n	8005f66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ee6:	d140      	bne.n	8005f6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eec:	e03d      	b.n	8005f6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef6:	d121      	bne.n	8005f3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d837      	bhi.n	8005f6e <DMA_CheckFifoParam+0xda>
 8005efe:	a201      	add	r2, pc, #4	; (adr r2, 8005f04 <DMA_CheckFifoParam+0x70>)
 8005f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f04:	08005f15 	.word	0x08005f15
 8005f08:	08005f1b 	.word	0x08005f1b
 8005f0c:	08005f15 	.word	0x08005f15
 8005f10:	08005f2d 	.word	0x08005f2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	73fb      	strb	r3, [r7, #15]
      break;
 8005f18:	e030      	b.n	8005f7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d025      	beq.n	8005f72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f2a:	e022      	b.n	8005f72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f34:	d11f      	bne.n	8005f76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005f3a:	e01c      	b.n	8005f76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d903      	bls.n	8005f4a <DMA_CheckFifoParam+0xb6>
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	d003      	beq.n	8005f50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005f48:	e018      	b.n	8005f7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f4e:	e015      	b.n	8005f7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00e      	beq.n	8005f7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f60:	e00b      	b.n	8005f7a <DMA_CheckFifoParam+0xe6>
      break;
 8005f62:	bf00      	nop
 8005f64:	e00a      	b.n	8005f7c <DMA_CheckFifoParam+0xe8>
      break;
 8005f66:	bf00      	nop
 8005f68:	e008      	b.n	8005f7c <DMA_CheckFifoParam+0xe8>
      break;
 8005f6a:	bf00      	nop
 8005f6c:	e006      	b.n	8005f7c <DMA_CheckFifoParam+0xe8>
      break;
 8005f6e:	bf00      	nop
 8005f70:	e004      	b.n	8005f7c <DMA_CheckFifoParam+0xe8>
      break;
 8005f72:	bf00      	nop
 8005f74:	e002      	b.n	8005f7c <DMA_CheckFifoParam+0xe8>
      break;   
 8005f76:	bf00      	nop
 8005f78:	e000      	b.n	8005f7c <DMA_CheckFifoParam+0xe8>
      break;
 8005f7a:	bf00      	nop
    }
  } 
  
  return status; 
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop

08005f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b089      	sub	sp, #36	; 0x24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61fb      	str	r3, [r7, #28]
 8005fa6:	e159      	b.n	800625c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005fa8:	2201      	movs	r2, #1
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	f040 8148 	bne.w	8006256 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d005      	beq.n	8005fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d130      	bne.n	8006040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	2203      	movs	r2, #3
 8005fea:	fa02 f303 	lsl.w	r3, r2, r3
 8005fee:	43db      	mvns	r3, r3
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	4313      	orrs	r3, r2
 8006006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006014:	2201      	movs	r2, #1
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	fa02 f303 	lsl.w	r3, r2, r3
 800601c:	43db      	mvns	r3, r3
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	4013      	ands	r3, r2
 8006022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	091b      	lsrs	r3, r3, #4
 800602a:	f003 0201 	and.w	r2, r3, #1
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	fa02 f303 	lsl.w	r3, r2, r3
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	4313      	orrs	r3, r2
 8006038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f003 0303 	and.w	r3, r3, #3
 8006048:	2b03      	cmp	r3, #3
 800604a:	d017      	beq.n	800607c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	2203      	movs	r2, #3
 8006058:	fa02 f303 	lsl.w	r3, r2, r3
 800605c:	43db      	mvns	r3, r3
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	4013      	ands	r3, r2
 8006062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	689a      	ldr	r2, [r3, #8]
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	fa02 f303 	lsl.w	r3, r2, r3
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	4313      	orrs	r3, r2
 8006074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f003 0303 	and.w	r3, r3, #3
 8006084:	2b02      	cmp	r3, #2
 8006086:	d123      	bne.n	80060d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	08da      	lsrs	r2, r3, #3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	3208      	adds	r2, #8
 8006090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	220f      	movs	r2, #15
 80060a0:	fa02 f303 	lsl.w	r3, r2, r3
 80060a4:	43db      	mvns	r3, r3
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	4013      	ands	r3, r2
 80060aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	691a      	ldr	r2, [r3, #16]
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	f003 0307 	and.w	r3, r3, #7
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	4313      	orrs	r3, r2
 80060c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	08da      	lsrs	r2, r3, #3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3208      	adds	r2, #8
 80060ca:	69b9      	ldr	r1, [r7, #24]
 80060cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	2203      	movs	r2, #3
 80060dc:	fa02 f303 	lsl.w	r3, r2, r3
 80060e0:	43db      	mvns	r3, r3
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	4013      	ands	r3, r2
 80060e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f003 0203 	and.w	r2, r3, #3
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	fa02 f303 	lsl.w	r3, r2, r3
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 80a2 	beq.w	8006256 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
 8006116:	4b57      	ldr	r3, [pc, #348]	; (8006274 <HAL_GPIO_Init+0x2e8>)
 8006118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611a:	4a56      	ldr	r2, [pc, #344]	; (8006274 <HAL_GPIO_Init+0x2e8>)
 800611c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006120:	6453      	str	r3, [r2, #68]	; 0x44
 8006122:	4b54      	ldr	r3, [pc, #336]	; (8006274 <HAL_GPIO_Init+0x2e8>)
 8006124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800612e:	4a52      	ldr	r2, [pc, #328]	; (8006278 <HAL_GPIO_Init+0x2ec>)
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	089b      	lsrs	r3, r3, #2
 8006134:	3302      	adds	r3, #2
 8006136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800613a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	220f      	movs	r2, #15
 8006146:	fa02 f303 	lsl.w	r3, r2, r3
 800614a:	43db      	mvns	r3, r3
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	4013      	ands	r3, r2
 8006150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a49      	ldr	r2, [pc, #292]	; (800627c <HAL_GPIO_Init+0x2f0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d019      	beq.n	800618e <HAL_GPIO_Init+0x202>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a48      	ldr	r2, [pc, #288]	; (8006280 <HAL_GPIO_Init+0x2f4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d013      	beq.n	800618a <HAL_GPIO_Init+0x1fe>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a47      	ldr	r2, [pc, #284]	; (8006284 <HAL_GPIO_Init+0x2f8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d00d      	beq.n	8006186 <HAL_GPIO_Init+0x1fa>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a46      	ldr	r2, [pc, #280]	; (8006288 <HAL_GPIO_Init+0x2fc>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d007      	beq.n	8006182 <HAL_GPIO_Init+0x1f6>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a45      	ldr	r2, [pc, #276]	; (800628c <HAL_GPIO_Init+0x300>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d101      	bne.n	800617e <HAL_GPIO_Init+0x1f2>
 800617a:	2304      	movs	r3, #4
 800617c:	e008      	b.n	8006190 <HAL_GPIO_Init+0x204>
 800617e:	2307      	movs	r3, #7
 8006180:	e006      	b.n	8006190 <HAL_GPIO_Init+0x204>
 8006182:	2303      	movs	r3, #3
 8006184:	e004      	b.n	8006190 <HAL_GPIO_Init+0x204>
 8006186:	2302      	movs	r3, #2
 8006188:	e002      	b.n	8006190 <HAL_GPIO_Init+0x204>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <HAL_GPIO_Init+0x204>
 800618e:	2300      	movs	r3, #0
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	f002 0203 	and.w	r2, r2, #3
 8006196:	0092      	lsls	r2, r2, #2
 8006198:	4093      	lsls	r3, r2
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	4313      	orrs	r3, r2
 800619e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061a0:	4935      	ldr	r1, [pc, #212]	; (8006278 <HAL_GPIO_Init+0x2ec>)
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	089b      	lsrs	r3, r3, #2
 80061a6:	3302      	adds	r3, #2
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80061ae:	4b38      	ldr	r3, [pc, #224]	; (8006290 <HAL_GPIO_Init+0x304>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	43db      	mvns	r3, r3
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	4013      	ands	r3, r2
 80061bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80061d2:	4a2f      	ldr	r2, [pc, #188]	; (8006290 <HAL_GPIO_Init+0x304>)
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80061d8:	4b2d      	ldr	r3, [pc, #180]	; (8006290 <HAL_GPIO_Init+0x304>)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	43db      	mvns	r3, r3
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	4013      	ands	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061fc:	4a24      	ldr	r2, [pc, #144]	; (8006290 <HAL_GPIO_Init+0x304>)
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006202:	4b23      	ldr	r3, [pc, #140]	; (8006290 <HAL_GPIO_Init+0x304>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	43db      	mvns	r3, r3
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	4013      	ands	r3, r2
 8006210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	4313      	orrs	r3, r2
 8006224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006226:	4a1a      	ldr	r2, [pc, #104]	; (8006290 <HAL_GPIO_Init+0x304>)
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800622c:	4b18      	ldr	r3, [pc, #96]	; (8006290 <HAL_GPIO_Init+0x304>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	43db      	mvns	r3, r3
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	4013      	ands	r3, r2
 800623a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006250:	4a0f      	ldr	r2, [pc, #60]	; (8006290 <HAL_GPIO_Init+0x304>)
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	3301      	adds	r3, #1
 800625a:	61fb      	str	r3, [r7, #28]
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	2b0f      	cmp	r3, #15
 8006260:	f67f aea2 	bls.w	8005fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop
 8006268:	3724      	adds	r7, #36	; 0x24
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40023800 	.word	0x40023800
 8006278:	40013800 	.word	0x40013800
 800627c:	40020000 	.word	0x40020000
 8006280:	40020400 	.word	0x40020400
 8006284:	40020800 	.word	0x40020800
 8006288:	40020c00 	.word	0x40020c00
 800628c:	40021000 	.word	0x40021000
 8006290:	40013c00 	.word	0x40013c00

08006294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	460b      	mov	r3, r1
 800629e:	807b      	strh	r3, [r7, #2]
 80062a0:	4613      	mov	r3, r2
 80062a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062a4:	787b      	ldrb	r3, [r7, #1]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062aa:	887a      	ldrh	r2, [r7, #2]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80062b0:	e003      	b.n	80062ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80062b2:	887b      	ldrh	r3, [r7, #2]
 80062b4:	041a      	lsls	r2, r3, #16
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	619a      	str	r2, [r3, #24]
}
 80062ba:	bf00      	nop
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
	...

080062c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e12b      	b.n	8006532 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d106      	bne.n	80062f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fd fe16 	bl	8003f20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2224      	movs	r2, #36	; 0x24
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0201 	bic.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800631a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800632a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800632c:	f001 fbbc 	bl	8007aa8 <HAL_RCC_GetPCLK1Freq>
 8006330:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	4a81      	ldr	r2, [pc, #516]	; (800653c <HAL_I2C_Init+0x274>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d807      	bhi.n	800634c <HAL_I2C_Init+0x84>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4a80      	ldr	r2, [pc, #512]	; (8006540 <HAL_I2C_Init+0x278>)
 8006340:	4293      	cmp	r3, r2
 8006342:	bf94      	ite	ls
 8006344:	2301      	movls	r3, #1
 8006346:	2300      	movhi	r3, #0
 8006348:	b2db      	uxtb	r3, r3
 800634a:	e006      	b.n	800635a <HAL_I2C_Init+0x92>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4a7d      	ldr	r2, [pc, #500]	; (8006544 <HAL_I2C_Init+0x27c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	bf94      	ite	ls
 8006354:	2301      	movls	r3, #1
 8006356:	2300      	movhi	r3, #0
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e0e7      	b.n	8006532 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4a78      	ldr	r2, [pc, #480]	; (8006548 <HAL_I2C_Init+0x280>)
 8006366:	fba2 2303 	umull	r2, r3, r2, r3
 800636a:	0c9b      	lsrs	r3, r3, #18
 800636c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	4a6a      	ldr	r2, [pc, #424]	; (800653c <HAL_I2C_Init+0x274>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d802      	bhi.n	800639c <HAL_I2C_Init+0xd4>
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	3301      	adds	r3, #1
 800639a:	e009      	b.n	80063b0 <HAL_I2C_Init+0xe8>
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80063a2:	fb02 f303 	mul.w	r3, r2, r3
 80063a6:	4a69      	ldr	r2, [pc, #420]	; (800654c <HAL_I2C_Init+0x284>)
 80063a8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ac:	099b      	lsrs	r3, r3, #6
 80063ae:	3301      	adds	r3, #1
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6812      	ldr	r2, [r2, #0]
 80063b4:	430b      	orrs	r3, r1
 80063b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80063c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	495c      	ldr	r1, [pc, #368]	; (800653c <HAL_I2C_Init+0x274>)
 80063cc:	428b      	cmp	r3, r1
 80063ce:	d819      	bhi.n	8006404 <HAL_I2C_Init+0x13c>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	1e59      	subs	r1, r3, #1
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	fbb1 f3f3 	udiv	r3, r1, r3
 80063de:	1c59      	adds	r1, r3, #1
 80063e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80063e4:	400b      	ands	r3, r1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <HAL_I2C_Init+0x138>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	1e59      	subs	r1, r3, #1
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80063f8:	3301      	adds	r3, #1
 80063fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063fe:	e051      	b.n	80064a4 <HAL_I2C_Init+0x1dc>
 8006400:	2304      	movs	r3, #4
 8006402:	e04f      	b.n	80064a4 <HAL_I2C_Init+0x1dc>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d111      	bne.n	8006430 <HAL_I2C_Init+0x168>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	1e58      	subs	r0, r3, #1
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6859      	ldr	r1, [r3, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	440b      	add	r3, r1
 800641a:	fbb0 f3f3 	udiv	r3, r0, r3
 800641e:	3301      	adds	r3, #1
 8006420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006424:	2b00      	cmp	r3, #0
 8006426:	bf0c      	ite	eq
 8006428:	2301      	moveq	r3, #1
 800642a:	2300      	movne	r3, #0
 800642c:	b2db      	uxtb	r3, r3
 800642e:	e012      	b.n	8006456 <HAL_I2C_Init+0x18e>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	1e58      	subs	r0, r3, #1
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6859      	ldr	r1, [r3, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	440b      	add	r3, r1
 800643e:	0099      	lsls	r1, r3, #2
 8006440:	440b      	add	r3, r1
 8006442:	fbb0 f3f3 	udiv	r3, r0, r3
 8006446:	3301      	adds	r3, #1
 8006448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800644c:	2b00      	cmp	r3, #0
 800644e:	bf0c      	ite	eq
 8006450:	2301      	moveq	r3, #1
 8006452:	2300      	movne	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_I2C_Init+0x196>
 800645a:	2301      	movs	r3, #1
 800645c:	e022      	b.n	80064a4 <HAL_I2C_Init+0x1dc>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10e      	bne.n	8006484 <HAL_I2C_Init+0x1bc>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	1e58      	subs	r0, r3, #1
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6859      	ldr	r1, [r3, #4]
 800646e:	460b      	mov	r3, r1
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	440b      	add	r3, r1
 8006474:	fbb0 f3f3 	udiv	r3, r0, r3
 8006478:	3301      	adds	r3, #1
 800647a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800647e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006482:	e00f      	b.n	80064a4 <HAL_I2C_Init+0x1dc>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	1e58      	subs	r0, r3, #1
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6859      	ldr	r1, [r3, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	440b      	add	r3, r1
 8006492:	0099      	lsls	r1, r3, #2
 8006494:	440b      	add	r3, r1
 8006496:	fbb0 f3f3 	udiv	r3, r0, r3
 800649a:	3301      	adds	r3, #1
 800649c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	6809      	ldr	r1, [r1, #0]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	69da      	ldr	r2, [r3, #28]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80064d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	6911      	ldr	r1, [r2, #16]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	68d2      	ldr	r2, [r2, #12]
 80064de:	4311      	orrs	r1, r2
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6812      	ldr	r2, [r2, #0]
 80064e4:	430b      	orrs	r3, r1
 80064e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	695a      	ldr	r2, [r3, #20]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0201 	orr.w	r2, r2, #1
 8006512:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	000186a0 	.word	0x000186a0
 8006540:	001e847f 	.word	0x001e847f
 8006544:	003d08ff 	.word	0x003d08ff
 8006548:	431bde83 	.word	0x431bde83
 800654c:	10624dd3 	.word	0x10624dd3

08006550 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b088      	sub	sp, #32
 8006554:	af02      	add	r7, sp, #8
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	4608      	mov	r0, r1
 800655a:	4611      	mov	r1, r2
 800655c:	461a      	mov	r2, r3
 800655e:	4603      	mov	r3, r0
 8006560:	817b      	strh	r3, [r7, #10]
 8006562:	460b      	mov	r3, r1
 8006564:	813b      	strh	r3, [r7, #8]
 8006566:	4613      	mov	r3, r2
 8006568:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800656a:	f7fd ff73 	bl	8004454 <HAL_GetTick>
 800656e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b20      	cmp	r3, #32
 800657a:	f040 80d9 	bne.w	8006730 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	2319      	movs	r3, #25
 8006584:	2201      	movs	r2, #1
 8006586:	496d      	ldr	r1, [pc, #436]	; (800673c <HAL_I2C_Mem_Write+0x1ec>)
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 fc7f 	bl	8006e8c <I2C_WaitOnFlagUntilTimeout>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006594:	2302      	movs	r3, #2
 8006596:	e0cc      	b.n	8006732 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d101      	bne.n	80065a6 <HAL_I2C_Mem_Write+0x56>
 80065a2:	2302      	movs	r3, #2
 80065a4:	e0c5      	b.n	8006732 <HAL_I2C_Mem_Write+0x1e2>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d007      	beq.n	80065cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2221      	movs	r2, #33	; 0x21
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2240      	movs	r2, #64	; 0x40
 80065e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a3a      	ldr	r2, [r7, #32]
 80065f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4a4d      	ldr	r2, [pc, #308]	; (8006740 <HAL_I2C_Mem_Write+0x1f0>)
 800660c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800660e:	88f8      	ldrh	r0, [r7, #6]
 8006610:	893a      	ldrh	r2, [r7, #8]
 8006612:	8979      	ldrh	r1, [r7, #10]
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	9301      	str	r3, [sp, #4]
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	4603      	mov	r3, r0
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 fab6 	bl	8006b90 <I2C_RequestMemoryWrite>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d052      	beq.n	80066d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e081      	b.n	8006732 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 fd00 	bl	8007038 <I2C_WaitOnTXEFlagUntilTimeout>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00d      	beq.n	800665a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	2b04      	cmp	r3, #4
 8006644:	d107      	bne.n	8006656 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006654:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e06b      	b.n	8006732 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	781a      	ldrb	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006674:	3b01      	subs	r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006680:	b29b      	uxth	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b04      	cmp	r3, #4
 8006696:	d11b      	bne.n	80066d0 <HAL_I2C_Mem_Write+0x180>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800669c:	2b00      	cmp	r3, #0
 800669e:	d017      	beq.n	80066d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	781a      	ldrb	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	3b01      	subs	r3, #1
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1aa      	bne.n	800662e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 fcec 	bl	80070ba <I2C_WaitOnBTFFlagUntilTimeout>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00d      	beq.n	8006704 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d107      	bne.n	8006700 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e016      	b.n	8006732 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2220      	movs	r2, #32
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800672c:	2300      	movs	r3, #0
 800672e:	e000      	b.n	8006732 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006730:	2302      	movs	r3, #2
  }
}
 8006732:	4618      	mov	r0, r3
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	00100002 	.word	0x00100002
 8006740:	ffff0000 	.word	0xffff0000

08006744 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08c      	sub	sp, #48	; 0x30
 8006748:	af02      	add	r7, sp, #8
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	4608      	mov	r0, r1
 800674e:	4611      	mov	r1, r2
 8006750:	461a      	mov	r2, r3
 8006752:	4603      	mov	r3, r0
 8006754:	817b      	strh	r3, [r7, #10]
 8006756:	460b      	mov	r3, r1
 8006758:	813b      	strh	r3, [r7, #8]
 800675a:	4613      	mov	r3, r2
 800675c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800675e:	f7fd fe79 	bl	8004454 <HAL_GetTick>
 8006762:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b20      	cmp	r3, #32
 800676e:	f040 8208 	bne.w	8006b82 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	2319      	movs	r3, #25
 8006778:	2201      	movs	r2, #1
 800677a:	497b      	ldr	r1, [pc, #492]	; (8006968 <HAL_I2C_Mem_Read+0x224>)
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 fb85 	bl	8006e8c <I2C_WaitOnFlagUntilTimeout>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006788:	2302      	movs	r3, #2
 800678a:	e1fb      	b.n	8006b84 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <HAL_I2C_Mem_Read+0x56>
 8006796:	2302      	movs	r3, #2
 8006798:	e1f4      	b.n	8006b84 <HAL_I2C_Mem_Read+0x440>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d007      	beq.n	80067c0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f042 0201 	orr.w	r2, r2, #1
 80067be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2222      	movs	r2, #34	; 0x22
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2240      	movs	r2, #64	; 0x40
 80067dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80067f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4a5b      	ldr	r2, [pc, #364]	; (800696c <HAL_I2C_Mem_Read+0x228>)
 8006800:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006802:	88f8      	ldrh	r0, [r7, #6]
 8006804:	893a      	ldrh	r2, [r7, #8]
 8006806:	8979      	ldrh	r1, [r7, #10]
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	9301      	str	r3, [sp, #4]
 800680c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	4603      	mov	r3, r0
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 fa52 	bl	8006cbc <I2C_RequestMemoryRead>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e1b0      	b.n	8006b84 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006826:	2b00      	cmp	r3, #0
 8006828:	d113      	bne.n	8006852 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800682a:	2300      	movs	r3, #0
 800682c:	623b      	str	r3, [r7, #32]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	623b      	str	r3, [r7, #32]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	623b      	str	r3, [r7, #32]
 800683e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	e184      	b.n	8006b5c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006856:	2b01      	cmp	r3, #1
 8006858:	d11b      	bne.n	8006892 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006868:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800686a:	2300      	movs	r3, #0
 800686c:	61fb      	str	r3, [r7, #28]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	61fb      	str	r3, [r7, #28]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	61fb      	str	r3, [r7, #28]
 800687e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	e164      	b.n	8006b5c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006896:	2b02      	cmp	r3, #2
 8006898:	d11b      	bne.n	80068d2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ba:	2300      	movs	r3, #0
 80068bc:	61bb      	str	r3, [r7, #24]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	61bb      	str	r3, [r7, #24]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	61bb      	str	r3, [r7, #24]
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	e144      	b.n	8006b5c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068d2:	2300      	movs	r3, #0
 80068d4:	617b      	str	r3, [r7, #20]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	617b      	str	r3, [r7, #20]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	617b      	str	r3, [r7, #20]
 80068e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80068e8:	e138      	b.n	8006b5c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	f200 80f1 	bhi.w	8006ad6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d123      	bne.n	8006944 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 fc1b 	bl	800713c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e139      	b.n	8006b84 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	691a      	ldr	r2, [r3, #16]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006938:	b29b      	uxth	r3, r3
 800693a:	3b01      	subs	r3, #1
 800693c:	b29a      	uxth	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006942:	e10b      	b.n	8006b5c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006948:	2b02      	cmp	r3, #2
 800694a:	d14e      	bne.n	80069ea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006952:	2200      	movs	r2, #0
 8006954:	4906      	ldr	r1, [pc, #24]	; (8006970 <HAL_I2C_Mem_Read+0x22c>)
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 fa98 	bl	8006e8c <I2C_WaitOnFlagUntilTimeout>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d008      	beq.n	8006974 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e10e      	b.n	8006b84 <HAL_I2C_Mem_Read+0x440>
 8006966:	bf00      	nop
 8006968:	00100002 	.word	0x00100002
 800696c:	ffff0000 	.word	0xffff0000
 8006970:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006982:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	691a      	ldr	r2, [r3, #16]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	b2d2      	uxtb	r2, r2
 8006990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	1c5a      	adds	r2, r3, #1
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	691a      	ldr	r2, [r3, #16]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d2:	3b01      	subs	r3, #1
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069de:	b29b      	uxth	r3, r3
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069e8:	e0b8      	b.n	8006b5c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f0:	2200      	movs	r2, #0
 80069f2:	4966      	ldr	r1, [pc, #408]	; (8006b8c <HAL_I2C_Mem_Read+0x448>)
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 fa49 	bl	8006e8c <I2C_WaitOnFlagUntilTimeout>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e0bf      	b.n	8006b84 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	691a      	ldr	r2, [r3, #16]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	494f      	ldr	r1, [pc, #316]	; (8006b8c <HAL_I2C_Mem_Read+0x448>)
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 fa1b 	bl	8006e8c <I2C_WaitOnFlagUntilTimeout>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e091      	b.n	8006b84 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	691a      	ldr	r2, [r3, #16]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	691a      	ldr	r2, [r3, #16]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aac:	b2d2      	uxtb	r2, r2
 8006aae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	3b01      	subs	r3, #1
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ad4:	e042      	b.n	8006b5c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 fb2e 	bl	800713c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e04c      	b.n	8006b84 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	691a      	ldr	r2, [r3, #16]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b06:	3b01      	subs	r3, #1
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d118      	bne.n	8006b5c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	691a      	ldr	r2, [r3, #16]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	b2d2      	uxtb	r2, r2
 8006b36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b46:	3b01      	subs	r3, #1
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	3b01      	subs	r3, #1
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f47f aec2 	bne.w	80068ea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	e000      	b.n	8006b84 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006b82:	2302      	movs	r3, #2
  }
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3728      	adds	r7, #40	; 0x28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	00010004 	.word	0x00010004

08006b90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af02      	add	r7, sp, #8
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	4608      	mov	r0, r1
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	817b      	strh	r3, [r7, #10]
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	813b      	strh	r3, [r7, #8]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 f960 	bl	8006e8c <I2C_WaitOnFlagUntilTimeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00d      	beq.n	8006bee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006be0:	d103      	bne.n	8006bea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006be8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e05f      	b.n	8006cae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bee:	897b      	ldrh	r3, [r7, #10]
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bfc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	6a3a      	ldr	r2, [r7, #32]
 8006c02:	492d      	ldr	r1, [pc, #180]	; (8006cb8 <I2C_RequestMemoryWrite+0x128>)
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 f998 	bl	8006f3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e04c      	b.n	8006cae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c14:	2300      	movs	r3, #0
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	617b      	str	r3, [r7, #20]
 8006c28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c2c:	6a39      	ldr	r1, [r7, #32]
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 fa02 	bl	8007038 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00d      	beq.n	8006c56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d107      	bne.n	8006c52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e02b      	b.n	8006cae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d105      	bne.n	8006c68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c5c:	893b      	ldrh	r3, [r7, #8]
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	611a      	str	r2, [r3, #16]
 8006c66:	e021      	b.n	8006cac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c68:	893b      	ldrh	r3, [r7, #8]
 8006c6a:	0a1b      	lsrs	r3, r3, #8
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c78:	6a39      	ldr	r1, [r7, #32]
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 f9dc 	bl	8007038 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00d      	beq.n	8006ca2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	2b04      	cmp	r3, #4
 8006c8c:	d107      	bne.n	8006c9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e005      	b.n	8006cae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ca2:	893b      	ldrh	r3, [r7, #8]
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	00010002 	.word	0x00010002

08006cbc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af02      	add	r7, sp, #8
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	4608      	mov	r0, r1
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	461a      	mov	r2, r3
 8006cca:	4603      	mov	r3, r0
 8006ccc:	817b      	strh	r3, [r7, #10]
 8006cce:	460b      	mov	r3, r1
 8006cd0:	813b      	strh	r3, [r7, #8]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ce4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 f8c2 	bl	8006e8c <I2C_WaitOnFlagUntilTimeout>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00d      	beq.n	8006d2a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d1c:	d103      	bne.n	8006d26 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e0aa      	b.n	8006e80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d2a:	897b      	ldrh	r3, [r7, #10]
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	461a      	mov	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	6a3a      	ldr	r2, [r7, #32]
 8006d3e:	4952      	ldr	r1, [pc, #328]	; (8006e88 <I2C_RequestMemoryRead+0x1cc>)
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 f8fa 	bl	8006f3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e097      	b.n	8006e80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d50:	2300      	movs	r3, #0
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	617b      	str	r3, [r7, #20]
 8006d64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d68:	6a39      	ldr	r1, [r7, #32]
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 f964 	bl	8007038 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00d      	beq.n	8006d92 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	d107      	bne.n	8006d8e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e076      	b.n	8006e80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d92:	88fb      	ldrh	r3, [r7, #6]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d105      	bne.n	8006da4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d98:	893b      	ldrh	r3, [r7, #8]
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	611a      	str	r2, [r3, #16]
 8006da2:	e021      	b.n	8006de8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006da4:	893b      	ldrh	r3, [r7, #8]
 8006da6:	0a1b      	lsrs	r3, r3, #8
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006db4:	6a39      	ldr	r1, [r7, #32]
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 f93e 	bl	8007038 <I2C_WaitOnTXEFlagUntilTimeout>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00d      	beq.n	8006dde <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d107      	bne.n	8006dda <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e050      	b.n	8006e80 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006dde:	893b      	ldrh	r3, [r7, #8]
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dea:	6a39      	ldr	r1, [r7, #32]
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 f923 	bl	8007038 <I2C_WaitOnTXEFlagUntilTimeout>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00d      	beq.n	8006e14 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	d107      	bne.n	8006e10 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e035      	b.n	8006e80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 f82b 	bl	8006e8c <I2C_WaitOnFlagUntilTimeout>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00d      	beq.n	8006e58 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e4a:	d103      	bne.n	8006e54 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e013      	b.n	8006e80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006e58:	897b      	ldrh	r3, [r7, #10]
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f043 0301 	orr.w	r3, r3, #1
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	6a3a      	ldr	r2, [r7, #32]
 8006e6c:	4906      	ldr	r1, [pc, #24]	; (8006e88 <I2C_RequestMemoryRead+0x1cc>)
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 f863 	bl	8006f3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e000      	b.n	8006e80 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	00010002 	.word	0x00010002

08006e8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	603b      	str	r3, [r7, #0]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e9c:	e025      	b.n	8006eea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea4:	d021      	beq.n	8006eea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea6:	f7fd fad5 	bl	8004454 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d302      	bcc.n	8006ebc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d116      	bne.n	8006eea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	f043 0220 	orr.w	r2, r3, #32
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e023      	b.n	8006f32 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	0c1b      	lsrs	r3, r3, #16
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d10d      	bne.n	8006f10 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	43da      	mvns	r2, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	4013      	ands	r3, r2
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	bf0c      	ite	eq
 8006f06:	2301      	moveq	r3, #1
 8006f08:	2300      	movne	r3, #0
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	e00c      	b.n	8006f2a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	43da      	mvns	r2, r3
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	bf0c      	ite	eq
 8006f22:	2301      	moveq	r3, #1
 8006f24:	2300      	movne	r3, #0
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	79fb      	ldrb	r3, [r7, #7]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d0b6      	beq.n	8006e9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	60f8      	str	r0, [r7, #12]
 8006f42:	60b9      	str	r1, [r7, #8]
 8006f44:	607a      	str	r2, [r7, #4]
 8006f46:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f48:	e051      	b.n	8006fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f58:	d123      	bne.n	8006fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f68:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f72:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	f043 0204 	orr.w	r2, r3, #4
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e046      	b.n	8007030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa8:	d021      	beq.n	8006fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006faa:	f7fd fa53 	bl	8004454 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d302      	bcc.n	8006fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d116      	bne.n	8006fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	f043 0220 	orr.w	r2, r3, #32
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e020      	b.n	8007030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	0c1b      	lsrs	r3, r3, #16
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d10c      	bne.n	8007012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	43da      	mvns	r2, r3
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	4013      	ands	r3, r2
 8007004:	b29b      	uxth	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	bf14      	ite	ne
 800700a:	2301      	movne	r3, #1
 800700c:	2300      	moveq	r3, #0
 800700e:	b2db      	uxtb	r3, r3
 8007010:	e00b      	b.n	800702a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	43da      	mvns	r2, r3
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	4013      	ands	r3, r2
 800701e:	b29b      	uxth	r3, r3
 8007020:	2b00      	cmp	r3, #0
 8007022:	bf14      	ite	ne
 8007024:	2301      	movne	r3, #1
 8007026:	2300      	moveq	r3, #0
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d18d      	bne.n	8006f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007044:	e02d      	b.n	80070a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 f8ce 	bl	80071e8 <I2C_IsAcknowledgeFailed>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e02d      	b.n	80070b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705c:	d021      	beq.n	80070a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800705e:	f7fd f9f9 	bl	8004454 <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	429a      	cmp	r2, r3
 800706c:	d302      	bcc.n	8007074 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d116      	bne.n	80070a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2220      	movs	r2, #32
 800707e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708e:	f043 0220 	orr.w	r2, r3, #32
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e007      	b.n	80070b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ac:	2b80      	cmp	r3, #128	; 0x80
 80070ae:	d1ca      	bne.n	8007046 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	60f8      	str	r0, [r7, #12]
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070c6:	e02d      	b.n	8007124 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 f88d 	bl	80071e8 <I2C_IsAcknowledgeFailed>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e02d      	b.n	8007134 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070de:	d021      	beq.n	8007124 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070e0:	f7fd f9b8 	bl	8004454 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d302      	bcc.n	80070f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d116      	bne.n	8007124 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007110:	f043 0220 	orr.w	r2, r3, #32
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e007      	b.n	8007134 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	f003 0304 	and.w	r3, r3, #4
 800712e:	2b04      	cmp	r3, #4
 8007130:	d1ca      	bne.n	80070c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007148:	e042      	b.n	80071d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	f003 0310 	and.w	r3, r3, #16
 8007154:	2b10      	cmp	r3, #16
 8007156:	d119      	bne.n	800718c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f06f 0210 	mvn.w	r2, #16
 8007160:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2220      	movs	r2, #32
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e029      	b.n	80071e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800718c:	f7fd f962 	bl	8004454 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	429a      	cmp	r2, r3
 800719a:	d302      	bcc.n	80071a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d116      	bne.n	80071d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071bc:	f043 0220 	orr.w	r2, r3, #32
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e007      	b.n	80071e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071da:	2b40      	cmp	r3, #64	; 0x40
 80071dc:	d1b5      	bne.n	800714a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071fe:	d11b      	bne.n	8007238 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007208:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007224:	f043 0204 	orr.w	r2, r3, #4
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e000      	b.n	800723a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
	...

08007248 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e267      	b.n	800772a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b00      	cmp	r3, #0
 8007264:	d075      	beq.n	8007352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007266:	4b88      	ldr	r3, [pc, #544]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f003 030c 	and.w	r3, r3, #12
 800726e:	2b04      	cmp	r3, #4
 8007270:	d00c      	beq.n	800728c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007272:	4b85      	ldr	r3, [pc, #532]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800727a:	2b08      	cmp	r3, #8
 800727c:	d112      	bne.n	80072a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800727e:	4b82      	ldr	r3, [pc, #520]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800728a:	d10b      	bne.n	80072a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800728c:	4b7e      	ldr	r3, [pc, #504]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d05b      	beq.n	8007350 <HAL_RCC_OscConfig+0x108>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d157      	bne.n	8007350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e242      	b.n	800772a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ac:	d106      	bne.n	80072bc <HAL_RCC_OscConfig+0x74>
 80072ae:	4b76      	ldr	r3, [pc, #472]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a75      	ldr	r2, [pc, #468]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 80072b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072b8:	6013      	str	r3, [r2, #0]
 80072ba:	e01d      	b.n	80072f8 <HAL_RCC_OscConfig+0xb0>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072c4:	d10c      	bne.n	80072e0 <HAL_RCC_OscConfig+0x98>
 80072c6:	4b70      	ldr	r3, [pc, #448]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a6f      	ldr	r2, [pc, #444]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 80072cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	4b6d      	ldr	r3, [pc, #436]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a6c      	ldr	r2, [pc, #432]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 80072d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	e00b      	b.n	80072f8 <HAL_RCC_OscConfig+0xb0>
 80072e0:	4b69      	ldr	r3, [pc, #420]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a68      	ldr	r2, [pc, #416]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 80072e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072ea:	6013      	str	r3, [r2, #0]
 80072ec:	4b66      	ldr	r3, [pc, #408]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a65      	ldr	r2, [pc, #404]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 80072f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d013      	beq.n	8007328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007300:	f7fd f8a8 	bl	8004454 <HAL_GetTick>
 8007304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007306:	e008      	b.n	800731a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007308:	f7fd f8a4 	bl	8004454 <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	2b64      	cmp	r3, #100	; 0x64
 8007314:	d901      	bls.n	800731a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e207      	b.n	800772a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800731a:	4b5b      	ldr	r3, [pc, #364]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d0f0      	beq.n	8007308 <HAL_RCC_OscConfig+0xc0>
 8007326:	e014      	b.n	8007352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007328:	f7fd f894 	bl	8004454 <HAL_GetTick>
 800732c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800732e:	e008      	b.n	8007342 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007330:	f7fd f890 	bl	8004454 <HAL_GetTick>
 8007334:	4602      	mov	r2, r0
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	2b64      	cmp	r3, #100	; 0x64
 800733c:	d901      	bls.n	8007342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e1f3      	b.n	800772a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007342:	4b51      	ldr	r3, [pc, #324]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1f0      	bne.n	8007330 <HAL_RCC_OscConfig+0xe8>
 800734e:	e000      	b.n	8007352 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d063      	beq.n	8007426 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800735e:	4b4a      	ldr	r3, [pc, #296]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f003 030c 	and.w	r3, r3, #12
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00b      	beq.n	8007382 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800736a:	4b47      	ldr	r3, [pc, #284]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007372:	2b08      	cmp	r3, #8
 8007374:	d11c      	bne.n	80073b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007376:	4b44      	ldr	r3, [pc, #272]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d116      	bne.n	80073b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007382:	4b41      	ldr	r3, [pc, #260]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b00      	cmp	r3, #0
 800738c:	d005      	beq.n	800739a <HAL_RCC_OscConfig+0x152>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d001      	beq.n	800739a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e1c7      	b.n	800772a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800739a:	4b3b      	ldr	r3, [pc, #236]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	4937      	ldr	r1, [pc, #220]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073ae:	e03a      	b.n	8007426 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d020      	beq.n	80073fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073b8:	4b34      	ldr	r3, [pc, #208]	; (800748c <HAL_RCC_OscConfig+0x244>)
 80073ba:	2201      	movs	r2, #1
 80073bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073be:	f7fd f849 	bl	8004454 <HAL_GetTick>
 80073c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073c4:	e008      	b.n	80073d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073c6:	f7fd f845 	bl	8004454 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d901      	bls.n	80073d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e1a8      	b.n	800772a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073d8:	4b2b      	ldr	r3, [pc, #172]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0f0      	beq.n	80073c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073e4:	4b28      	ldr	r3, [pc, #160]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	00db      	lsls	r3, r3, #3
 80073f2:	4925      	ldr	r1, [pc, #148]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	600b      	str	r3, [r1, #0]
 80073f8:	e015      	b.n	8007426 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073fa:	4b24      	ldr	r3, [pc, #144]	; (800748c <HAL_RCC_OscConfig+0x244>)
 80073fc:	2200      	movs	r2, #0
 80073fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007400:	f7fd f828 	bl	8004454 <HAL_GetTick>
 8007404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007406:	e008      	b.n	800741a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007408:	f7fd f824 	bl	8004454 <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	2b02      	cmp	r3, #2
 8007414:	d901      	bls.n	800741a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e187      	b.n	800772a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800741a:	4b1b      	ldr	r3, [pc, #108]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1f0      	bne.n	8007408 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0308 	and.w	r3, r3, #8
 800742e:	2b00      	cmp	r3, #0
 8007430:	d036      	beq.n	80074a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d016      	beq.n	8007468 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800743a:	4b15      	ldr	r3, [pc, #84]	; (8007490 <HAL_RCC_OscConfig+0x248>)
 800743c:	2201      	movs	r2, #1
 800743e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007440:	f7fd f808 	bl	8004454 <HAL_GetTick>
 8007444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007446:	e008      	b.n	800745a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007448:	f7fd f804 	bl	8004454 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b02      	cmp	r3, #2
 8007454:	d901      	bls.n	800745a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e167      	b.n	800772a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800745a:	4b0b      	ldr	r3, [pc, #44]	; (8007488 <HAL_RCC_OscConfig+0x240>)
 800745c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800745e:	f003 0302 	and.w	r3, r3, #2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d0f0      	beq.n	8007448 <HAL_RCC_OscConfig+0x200>
 8007466:	e01b      	b.n	80074a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007468:	4b09      	ldr	r3, [pc, #36]	; (8007490 <HAL_RCC_OscConfig+0x248>)
 800746a:	2200      	movs	r2, #0
 800746c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800746e:	f7fc fff1 	bl	8004454 <HAL_GetTick>
 8007472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007474:	e00e      	b.n	8007494 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007476:	f7fc ffed 	bl	8004454 <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	2b02      	cmp	r3, #2
 8007482:	d907      	bls.n	8007494 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e150      	b.n	800772a <HAL_RCC_OscConfig+0x4e2>
 8007488:	40023800 	.word	0x40023800
 800748c:	42470000 	.word	0x42470000
 8007490:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007494:	4b88      	ldr	r3, [pc, #544]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 8007496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007498:	f003 0302 	and.w	r3, r3, #2
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1ea      	bne.n	8007476 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 8097 	beq.w	80075dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074ae:	2300      	movs	r3, #0
 80074b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074b2:	4b81      	ldr	r3, [pc, #516]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 80074b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10f      	bne.n	80074de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074be:	2300      	movs	r3, #0
 80074c0:	60bb      	str	r3, [r7, #8]
 80074c2:	4b7d      	ldr	r3, [pc, #500]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	4a7c      	ldr	r2, [pc, #496]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 80074c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074cc:	6413      	str	r3, [r2, #64]	; 0x40
 80074ce:	4b7a      	ldr	r3, [pc, #488]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074d6:	60bb      	str	r3, [r7, #8]
 80074d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074da:	2301      	movs	r3, #1
 80074dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074de:	4b77      	ldr	r3, [pc, #476]	; (80076bc <HAL_RCC_OscConfig+0x474>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d118      	bne.n	800751c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074ea:	4b74      	ldr	r3, [pc, #464]	; (80076bc <HAL_RCC_OscConfig+0x474>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a73      	ldr	r2, [pc, #460]	; (80076bc <HAL_RCC_OscConfig+0x474>)
 80074f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074f6:	f7fc ffad 	bl	8004454 <HAL_GetTick>
 80074fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074fc:	e008      	b.n	8007510 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074fe:	f7fc ffa9 	bl	8004454 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b02      	cmp	r3, #2
 800750a:	d901      	bls.n	8007510 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e10c      	b.n	800772a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007510:	4b6a      	ldr	r3, [pc, #424]	; (80076bc <HAL_RCC_OscConfig+0x474>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007518:	2b00      	cmp	r3, #0
 800751a:	d0f0      	beq.n	80074fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d106      	bne.n	8007532 <HAL_RCC_OscConfig+0x2ea>
 8007524:	4b64      	ldr	r3, [pc, #400]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 8007526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007528:	4a63      	ldr	r2, [pc, #396]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 800752a:	f043 0301 	orr.w	r3, r3, #1
 800752e:	6713      	str	r3, [r2, #112]	; 0x70
 8007530:	e01c      	b.n	800756c <HAL_RCC_OscConfig+0x324>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	2b05      	cmp	r3, #5
 8007538:	d10c      	bne.n	8007554 <HAL_RCC_OscConfig+0x30c>
 800753a:	4b5f      	ldr	r3, [pc, #380]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 800753c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753e:	4a5e      	ldr	r2, [pc, #376]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 8007540:	f043 0304 	orr.w	r3, r3, #4
 8007544:	6713      	str	r3, [r2, #112]	; 0x70
 8007546:	4b5c      	ldr	r3, [pc, #368]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 8007548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800754a:	4a5b      	ldr	r2, [pc, #364]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 800754c:	f043 0301 	orr.w	r3, r3, #1
 8007550:	6713      	str	r3, [r2, #112]	; 0x70
 8007552:	e00b      	b.n	800756c <HAL_RCC_OscConfig+0x324>
 8007554:	4b58      	ldr	r3, [pc, #352]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 8007556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007558:	4a57      	ldr	r2, [pc, #348]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 800755a:	f023 0301 	bic.w	r3, r3, #1
 800755e:	6713      	str	r3, [r2, #112]	; 0x70
 8007560:	4b55      	ldr	r3, [pc, #340]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 8007562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007564:	4a54      	ldr	r2, [pc, #336]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 8007566:	f023 0304 	bic.w	r3, r3, #4
 800756a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d015      	beq.n	80075a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007574:	f7fc ff6e 	bl	8004454 <HAL_GetTick>
 8007578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800757a:	e00a      	b.n	8007592 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800757c:	f7fc ff6a 	bl	8004454 <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	f241 3288 	movw	r2, #5000	; 0x1388
 800758a:	4293      	cmp	r3, r2
 800758c:	d901      	bls.n	8007592 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e0cb      	b.n	800772a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007592:	4b49      	ldr	r3, [pc, #292]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 8007594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d0ee      	beq.n	800757c <HAL_RCC_OscConfig+0x334>
 800759e:	e014      	b.n	80075ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075a0:	f7fc ff58 	bl	8004454 <HAL_GetTick>
 80075a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075a6:	e00a      	b.n	80075be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075a8:	f7fc ff54 	bl	8004454 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d901      	bls.n	80075be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e0b5      	b.n	800772a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075be:	4b3e      	ldr	r3, [pc, #248]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 80075c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1ee      	bne.n	80075a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075ca:	7dfb      	ldrb	r3, [r7, #23]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d105      	bne.n	80075dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075d0:	4b39      	ldr	r3, [pc, #228]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 80075d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d4:	4a38      	ldr	r2, [pc, #224]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 80075d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 80a1 	beq.w	8007728 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80075e6:	4b34      	ldr	r3, [pc, #208]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f003 030c 	and.w	r3, r3, #12
 80075ee:	2b08      	cmp	r3, #8
 80075f0:	d05c      	beq.n	80076ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d141      	bne.n	800767e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075fa:	4b31      	ldr	r3, [pc, #196]	; (80076c0 <HAL_RCC_OscConfig+0x478>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007600:	f7fc ff28 	bl	8004454 <HAL_GetTick>
 8007604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007606:	e008      	b.n	800761a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007608:	f7fc ff24 	bl	8004454 <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	2b02      	cmp	r3, #2
 8007614:	d901      	bls.n	800761a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e087      	b.n	800772a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800761a:	4b27      	ldr	r3, [pc, #156]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1f0      	bne.n	8007608 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	69da      	ldr	r2, [r3, #28]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	431a      	orrs	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	019b      	lsls	r3, r3, #6
 8007636:	431a      	orrs	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763c:	085b      	lsrs	r3, r3, #1
 800763e:	3b01      	subs	r3, #1
 8007640:	041b      	lsls	r3, r3, #16
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007648:	061b      	lsls	r3, r3, #24
 800764a:	491b      	ldr	r1, [pc, #108]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 800764c:	4313      	orrs	r3, r2
 800764e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007650:	4b1b      	ldr	r3, [pc, #108]	; (80076c0 <HAL_RCC_OscConfig+0x478>)
 8007652:	2201      	movs	r2, #1
 8007654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007656:	f7fc fefd 	bl	8004454 <HAL_GetTick>
 800765a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800765c:	e008      	b.n	8007670 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800765e:	f7fc fef9 	bl	8004454 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	2b02      	cmp	r3, #2
 800766a:	d901      	bls.n	8007670 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e05c      	b.n	800772a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007670:	4b11      	ldr	r3, [pc, #68]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0f0      	beq.n	800765e <HAL_RCC_OscConfig+0x416>
 800767c:	e054      	b.n	8007728 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800767e:	4b10      	ldr	r3, [pc, #64]	; (80076c0 <HAL_RCC_OscConfig+0x478>)
 8007680:	2200      	movs	r2, #0
 8007682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007684:	f7fc fee6 	bl	8004454 <HAL_GetTick>
 8007688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800768a:	e008      	b.n	800769e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800768c:	f7fc fee2 	bl	8004454 <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b02      	cmp	r3, #2
 8007698:	d901      	bls.n	800769e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e045      	b.n	800772a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800769e:	4b06      	ldr	r3, [pc, #24]	; (80076b8 <HAL_RCC_OscConfig+0x470>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1f0      	bne.n	800768c <HAL_RCC_OscConfig+0x444>
 80076aa:	e03d      	b.n	8007728 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d107      	bne.n	80076c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e038      	b.n	800772a <HAL_RCC_OscConfig+0x4e2>
 80076b8:	40023800 	.word	0x40023800
 80076bc:	40007000 	.word	0x40007000
 80076c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80076c4:	4b1b      	ldr	r3, [pc, #108]	; (8007734 <HAL_RCC_OscConfig+0x4ec>)
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d028      	beq.n	8007724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076dc:	429a      	cmp	r2, r3
 80076de:	d121      	bne.n	8007724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d11a      	bne.n	8007724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076f4:	4013      	ands	r3, r2
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80076fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d111      	bne.n	8007724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770a:	085b      	lsrs	r3, r3, #1
 800770c:	3b01      	subs	r3, #1
 800770e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007710:	429a      	cmp	r2, r3
 8007712:	d107      	bne.n	8007724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007720:	429a      	cmp	r2, r3
 8007722:	d001      	beq.n	8007728 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e000      	b.n	800772a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3718      	adds	r7, #24
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	40023800 	.word	0x40023800

08007738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d101      	bne.n	800774c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e0cc      	b.n	80078e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800774c:	4b68      	ldr	r3, [pc, #416]	; (80078f0 <HAL_RCC_ClockConfig+0x1b8>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0307 	and.w	r3, r3, #7
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	429a      	cmp	r2, r3
 8007758:	d90c      	bls.n	8007774 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800775a:	4b65      	ldr	r3, [pc, #404]	; (80078f0 <HAL_RCC_ClockConfig+0x1b8>)
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	b2d2      	uxtb	r2, r2
 8007760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007762:	4b63      	ldr	r3, [pc, #396]	; (80078f0 <HAL_RCC_ClockConfig+0x1b8>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0307 	and.w	r3, r3, #7
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	429a      	cmp	r2, r3
 800776e:	d001      	beq.n	8007774 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e0b8      	b.n	80078e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d020      	beq.n	80077c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0304 	and.w	r3, r3, #4
 8007788:	2b00      	cmp	r3, #0
 800778a:	d005      	beq.n	8007798 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800778c:	4b59      	ldr	r3, [pc, #356]	; (80078f4 <HAL_RCC_ClockConfig+0x1bc>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	4a58      	ldr	r2, [pc, #352]	; (80078f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007792:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007796:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0308 	and.w	r3, r3, #8
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d005      	beq.n	80077b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80077a4:	4b53      	ldr	r3, [pc, #332]	; (80078f4 <HAL_RCC_ClockConfig+0x1bc>)
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	4a52      	ldr	r2, [pc, #328]	; (80078f4 <HAL_RCC_ClockConfig+0x1bc>)
 80077aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80077ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077b0:	4b50      	ldr	r3, [pc, #320]	; (80078f4 <HAL_RCC_ClockConfig+0x1bc>)
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	494d      	ldr	r1, [pc, #308]	; (80078f4 <HAL_RCC_ClockConfig+0x1bc>)
 80077be:	4313      	orrs	r3, r2
 80077c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d044      	beq.n	8007858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d107      	bne.n	80077e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077d6:	4b47      	ldr	r3, [pc, #284]	; (80078f4 <HAL_RCC_ClockConfig+0x1bc>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d119      	bne.n	8007816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e07f      	b.n	80078e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d003      	beq.n	80077f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	d107      	bne.n	8007806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077f6:	4b3f      	ldr	r3, [pc, #252]	; (80078f4 <HAL_RCC_ClockConfig+0x1bc>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d109      	bne.n	8007816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e06f      	b.n	80078e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007806:	4b3b      	ldr	r3, [pc, #236]	; (80078f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0302 	and.w	r3, r3, #2
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e067      	b.n	80078e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007816:	4b37      	ldr	r3, [pc, #220]	; (80078f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f023 0203 	bic.w	r2, r3, #3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	4934      	ldr	r1, [pc, #208]	; (80078f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007824:	4313      	orrs	r3, r2
 8007826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007828:	f7fc fe14 	bl	8004454 <HAL_GetTick>
 800782c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800782e:	e00a      	b.n	8007846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007830:	f7fc fe10 	bl	8004454 <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	f241 3288 	movw	r2, #5000	; 0x1388
 800783e:	4293      	cmp	r3, r2
 8007840:	d901      	bls.n	8007846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e04f      	b.n	80078e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007846:	4b2b      	ldr	r3, [pc, #172]	; (80078f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f003 020c 	and.w	r2, r3, #12
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	429a      	cmp	r2, r3
 8007856:	d1eb      	bne.n	8007830 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007858:	4b25      	ldr	r3, [pc, #148]	; (80078f0 <HAL_RCC_ClockConfig+0x1b8>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0307 	and.w	r3, r3, #7
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	429a      	cmp	r2, r3
 8007864:	d20c      	bcs.n	8007880 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007866:	4b22      	ldr	r3, [pc, #136]	; (80078f0 <HAL_RCC_ClockConfig+0x1b8>)
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	b2d2      	uxtb	r2, r2
 800786c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800786e:	4b20      	ldr	r3, [pc, #128]	; (80078f0 <HAL_RCC_ClockConfig+0x1b8>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0307 	and.w	r3, r3, #7
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	429a      	cmp	r2, r3
 800787a:	d001      	beq.n	8007880 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e032      	b.n	80078e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0304 	and.w	r3, r3, #4
 8007888:	2b00      	cmp	r3, #0
 800788a:	d008      	beq.n	800789e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800788c:	4b19      	ldr	r3, [pc, #100]	; (80078f4 <HAL_RCC_ClockConfig+0x1bc>)
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	4916      	ldr	r1, [pc, #88]	; (80078f4 <HAL_RCC_ClockConfig+0x1bc>)
 800789a:	4313      	orrs	r3, r2
 800789c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0308 	and.w	r3, r3, #8
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d009      	beq.n	80078be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078aa:	4b12      	ldr	r3, [pc, #72]	; (80078f4 <HAL_RCC_ClockConfig+0x1bc>)
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	00db      	lsls	r3, r3, #3
 80078b8:	490e      	ldr	r1, [pc, #56]	; (80078f4 <HAL_RCC_ClockConfig+0x1bc>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80078be:	f000 f821 	bl	8007904 <HAL_RCC_GetSysClockFreq>
 80078c2:	4602      	mov	r2, r0
 80078c4:	4b0b      	ldr	r3, [pc, #44]	; (80078f4 <HAL_RCC_ClockConfig+0x1bc>)
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	091b      	lsrs	r3, r3, #4
 80078ca:	f003 030f 	and.w	r3, r3, #15
 80078ce:	490a      	ldr	r1, [pc, #40]	; (80078f8 <HAL_RCC_ClockConfig+0x1c0>)
 80078d0:	5ccb      	ldrb	r3, [r1, r3]
 80078d2:	fa22 f303 	lsr.w	r3, r2, r3
 80078d6:	4a09      	ldr	r2, [pc, #36]	; (80078fc <HAL_RCC_ClockConfig+0x1c4>)
 80078d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80078da:	4b09      	ldr	r3, [pc, #36]	; (8007900 <HAL_RCC_ClockConfig+0x1c8>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fc fd74 	bl	80043cc <HAL_InitTick>

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	40023c00 	.word	0x40023c00
 80078f4:	40023800 	.word	0x40023800
 80078f8:	0800a648 	.word	0x0800a648
 80078fc:	200007f4 	.word	0x200007f4
 8007900:	200007f8 	.word	0x200007f8

08007904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007908:	b090      	sub	sp, #64	; 0x40
 800790a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	637b      	str	r3, [r7, #52]	; 0x34
 8007910:	2300      	movs	r3, #0
 8007912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007914:	2300      	movs	r3, #0
 8007916:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800791c:	4b59      	ldr	r3, [pc, #356]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x180>)
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f003 030c 	and.w	r3, r3, #12
 8007924:	2b08      	cmp	r3, #8
 8007926:	d00d      	beq.n	8007944 <HAL_RCC_GetSysClockFreq+0x40>
 8007928:	2b08      	cmp	r3, #8
 800792a:	f200 80a1 	bhi.w	8007a70 <HAL_RCC_GetSysClockFreq+0x16c>
 800792e:	2b00      	cmp	r3, #0
 8007930:	d002      	beq.n	8007938 <HAL_RCC_GetSysClockFreq+0x34>
 8007932:	2b04      	cmp	r3, #4
 8007934:	d003      	beq.n	800793e <HAL_RCC_GetSysClockFreq+0x3a>
 8007936:	e09b      	b.n	8007a70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007938:	4b53      	ldr	r3, [pc, #332]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x184>)
 800793a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800793c:	e09b      	b.n	8007a76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800793e:	4b53      	ldr	r3, [pc, #332]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x188>)
 8007940:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007942:	e098      	b.n	8007a76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007944:	4b4f      	ldr	r3, [pc, #316]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800794c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800794e:	4b4d      	ldr	r3, [pc, #308]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d028      	beq.n	80079ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800795a:	4b4a      	ldr	r3, [pc, #296]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x180>)
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	099b      	lsrs	r3, r3, #6
 8007960:	2200      	movs	r2, #0
 8007962:	623b      	str	r3, [r7, #32]
 8007964:	627a      	str	r2, [r7, #36]	; 0x24
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800796c:	2100      	movs	r1, #0
 800796e:	4b47      	ldr	r3, [pc, #284]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x188>)
 8007970:	fb03 f201 	mul.w	r2, r3, r1
 8007974:	2300      	movs	r3, #0
 8007976:	fb00 f303 	mul.w	r3, r0, r3
 800797a:	4413      	add	r3, r2
 800797c:	4a43      	ldr	r2, [pc, #268]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x188>)
 800797e:	fba0 1202 	umull	r1, r2, r0, r2
 8007982:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007984:	460a      	mov	r2, r1
 8007986:	62ba      	str	r2, [r7, #40]	; 0x28
 8007988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800798a:	4413      	add	r3, r2
 800798c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800798e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007990:	2200      	movs	r2, #0
 8007992:	61bb      	str	r3, [r7, #24]
 8007994:	61fa      	str	r2, [r7, #28]
 8007996:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800799a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800799e:	f7f8 ff51 	bl	8000844 <__aeabi_uldivmod>
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	4613      	mov	r3, r2
 80079a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079aa:	e053      	b.n	8007a54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079ac:	4b35      	ldr	r3, [pc, #212]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x180>)
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	099b      	lsrs	r3, r3, #6
 80079b2:	2200      	movs	r2, #0
 80079b4:	613b      	str	r3, [r7, #16]
 80079b6:	617a      	str	r2, [r7, #20]
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80079be:	f04f 0b00 	mov.w	fp, #0
 80079c2:	4652      	mov	r2, sl
 80079c4:	465b      	mov	r3, fp
 80079c6:	f04f 0000 	mov.w	r0, #0
 80079ca:	f04f 0100 	mov.w	r1, #0
 80079ce:	0159      	lsls	r1, r3, #5
 80079d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079d4:	0150      	lsls	r0, r2, #5
 80079d6:	4602      	mov	r2, r0
 80079d8:	460b      	mov	r3, r1
 80079da:	ebb2 080a 	subs.w	r8, r2, sl
 80079de:	eb63 090b 	sbc.w	r9, r3, fp
 80079e2:	f04f 0200 	mov.w	r2, #0
 80079e6:	f04f 0300 	mov.w	r3, #0
 80079ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80079ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80079f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80079f6:	ebb2 0408 	subs.w	r4, r2, r8
 80079fa:	eb63 0509 	sbc.w	r5, r3, r9
 80079fe:	f04f 0200 	mov.w	r2, #0
 8007a02:	f04f 0300 	mov.w	r3, #0
 8007a06:	00eb      	lsls	r3, r5, #3
 8007a08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a0c:	00e2      	lsls	r2, r4, #3
 8007a0e:	4614      	mov	r4, r2
 8007a10:	461d      	mov	r5, r3
 8007a12:	eb14 030a 	adds.w	r3, r4, sl
 8007a16:	603b      	str	r3, [r7, #0]
 8007a18:	eb45 030b 	adc.w	r3, r5, fp
 8007a1c:	607b      	str	r3, [r7, #4]
 8007a1e:	f04f 0200 	mov.w	r2, #0
 8007a22:	f04f 0300 	mov.w	r3, #0
 8007a26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	028b      	lsls	r3, r1, #10
 8007a2e:	4621      	mov	r1, r4
 8007a30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a34:	4621      	mov	r1, r4
 8007a36:	028a      	lsls	r2, r1, #10
 8007a38:	4610      	mov	r0, r2
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3e:	2200      	movs	r2, #0
 8007a40:	60bb      	str	r3, [r7, #8]
 8007a42:	60fa      	str	r2, [r7, #12]
 8007a44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a48:	f7f8 fefc 	bl	8000844 <__aeabi_uldivmod>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4613      	mov	r3, r2
 8007a52:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a54:	4b0b      	ldr	r3, [pc, #44]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	0c1b      	lsrs	r3, r3, #16
 8007a5a:	f003 0303 	and.w	r3, r3, #3
 8007a5e:	3301      	adds	r3, #1
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007a64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007a6e:	e002      	b.n	8007a76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a70:	4b05      	ldr	r3, [pc, #20]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x184>)
 8007a72:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3740      	adds	r7, #64	; 0x40
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a82:	bf00      	nop
 8007a84:	40023800 	.word	0x40023800
 8007a88:	00f42400 	.word	0x00f42400
 8007a8c:	017d7840 	.word	0x017d7840

08007a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a94:	4b03      	ldr	r3, [pc, #12]	; (8007aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a96:	681b      	ldr	r3, [r3, #0]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	200007f4 	.word	0x200007f4

08007aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007aac:	f7ff fff0 	bl	8007a90 <HAL_RCC_GetHCLKFreq>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	4b05      	ldr	r3, [pc, #20]	; (8007ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	0a9b      	lsrs	r3, r3, #10
 8007ab8:	f003 0307 	and.w	r3, r3, #7
 8007abc:	4903      	ldr	r1, [pc, #12]	; (8007acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007abe:	5ccb      	ldrb	r3, [r1, r3]
 8007ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	40023800 	.word	0x40023800
 8007acc:	0800a658 	.word	0x0800a658

08007ad0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e07b      	b.n	8007bda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d108      	bne.n	8007afc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007af2:	d009      	beq.n	8007b08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	61da      	str	r2, [r3, #28]
 8007afa:	e005      	b.n	8007b08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d106      	bne.n	8007b28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7fc fa56 	bl	8003fd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007b50:	431a      	orrs	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	431a      	orrs	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	69db      	ldr	r3, [r3, #28]
 8007b7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b8c:	ea42 0103 	orr.w	r1, r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	0c1b      	lsrs	r3, r3, #16
 8007ba6:	f003 0104 	and.w	r1, r3, #4
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	f003 0210 	and.w	r2, r3, #16
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	69da      	ldr	r2, [r3, #28]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b088      	sub	sp, #32
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	60f8      	str	r0, [r7, #12]
 8007bea:	60b9      	str	r1, [r7, #8]
 8007bec:	603b      	str	r3, [r7, #0]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d101      	bne.n	8007c04 <HAL_SPI_Transmit+0x22>
 8007c00:	2302      	movs	r3, #2
 8007c02:	e126      	b.n	8007e52 <HAL_SPI_Transmit+0x270>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c0c:	f7fc fc22 	bl	8004454 <HAL_GetTick>
 8007c10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007c12:	88fb      	ldrh	r3, [r7, #6]
 8007c14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d002      	beq.n	8007c28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007c22:	2302      	movs	r3, #2
 8007c24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c26:	e10b      	b.n	8007e40 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d002      	beq.n	8007c34 <HAL_SPI_Transmit+0x52>
 8007c2e:	88fb      	ldrh	r3, [r7, #6]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d102      	bne.n	8007c3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c38:	e102      	b.n	8007e40 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2203      	movs	r2, #3
 8007c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	88fa      	ldrh	r2, [r7, #6]
 8007c52:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	88fa      	ldrh	r2, [r7, #6]
 8007c58:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c80:	d10f      	bne.n	8007ca2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ca0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cac:	2b40      	cmp	r3, #64	; 0x40
 8007cae:	d007      	beq.n	8007cc0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cc8:	d14b      	bne.n	8007d62 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <HAL_SPI_Transmit+0xf6>
 8007cd2:	8afb      	ldrh	r3, [r7, #22]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d13e      	bne.n	8007d56 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cdc:	881a      	ldrh	r2, [r3, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce8:	1c9a      	adds	r2, r3, #2
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007cfc:	e02b      	b.n	8007d56 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f003 0302 	and.w	r3, r3, #2
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d112      	bne.n	8007d32 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d10:	881a      	ldrh	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1c:	1c9a      	adds	r2, r3, #2
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007d30:	e011      	b.n	8007d56 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d32:	f7fc fb8f 	bl	8004454 <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d803      	bhi.n	8007d4a <HAL_SPI_Transmit+0x168>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d48:	d102      	bne.n	8007d50 <HAL_SPI_Transmit+0x16e>
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d102      	bne.n	8007d56 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d54:	e074      	b.n	8007e40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1ce      	bne.n	8007cfe <HAL_SPI_Transmit+0x11c>
 8007d60:	e04c      	b.n	8007dfc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <HAL_SPI_Transmit+0x18e>
 8007d6a:	8afb      	ldrh	r3, [r7, #22]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d140      	bne.n	8007df2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	330c      	adds	r3, #12
 8007d7a:	7812      	ldrb	r2, [r2, #0]
 8007d7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007d96:	e02c      	b.n	8007df2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d113      	bne.n	8007dce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	330c      	adds	r3, #12
 8007db0:	7812      	ldrb	r2, [r2, #0]
 8007db2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db8:	1c5a      	adds	r2, r3, #1
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	86da      	strh	r2, [r3, #54]	; 0x36
 8007dcc:	e011      	b.n	8007df2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dce:	f7fc fb41 	bl	8004454 <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d803      	bhi.n	8007de6 <HAL_SPI_Transmit+0x204>
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de4:	d102      	bne.n	8007dec <HAL_SPI_Transmit+0x20a>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d102      	bne.n	8007df2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007df0:	e026      	b.n	8007e40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1cd      	bne.n	8007d98 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 fbcb 	bl	800859c <SPI_EndRxTxTransaction>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2220      	movs	r2, #32
 8007e10:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10a      	bne.n	8007e30 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	613b      	str	r3, [r7, #16]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	613b      	str	r3, [r7, #16]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	613b      	str	r3, [r7, #16]
 8007e2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	77fb      	strb	r3, [r7, #31]
 8007e3c:	e000      	b.n	8007e40 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007e3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007e50:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3720      	adds	r7, #32
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b088      	sub	sp, #32
 8007e5e:	af02      	add	r7, sp, #8
 8007e60:	60f8      	str	r0, [r7, #12]
 8007e62:	60b9      	str	r1, [r7, #8]
 8007e64:	603b      	str	r3, [r7, #0]
 8007e66:	4613      	mov	r3, r2
 8007e68:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e76:	d112      	bne.n	8007e9e <HAL_SPI_Receive+0x44>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10e      	bne.n	8007e9e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2204      	movs	r2, #4
 8007e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007e88:	88fa      	ldrh	r2, [r7, #6]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	68b9      	ldr	r1, [r7, #8]
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 f8f1 	bl	800807c <HAL_SPI_TransmitReceive>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	e0ea      	b.n	8008074 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d101      	bne.n	8007eac <HAL_SPI_Receive+0x52>
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	e0e3      	b.n	8008074 <HAL_SPI_Receive+0x21a>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007eb4:	f7fc face 	bl	8004454 <HAL_GetTick>
 8007eb8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d002      	beq.n	8007ecc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007ec6:	2302      	movs	r3, #2
 8007ec8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007eca:	e0ca      	b.n	8008062 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d002      	beq.n	8007ed8 <HAL_SPI_Receive+0x7e>
 8007ed2:	88fb      	ldrh	r3, [r7, #6]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d102      	bne.n	8007ede <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007edc:	e0c1      	b.n	8008062 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2204      	movs	r2, #4
 8007ee2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	88fa      	ldrh	r2, [r7, #6]
 8007ef6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	88fa      	ldrh	r2, [r7, #6]
 8007efc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f24:	d10f      	bne.n	8007f46 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007f44:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f50:	2b40      	cmp	r3, #64	; 0x40
 8007f52:	d007      	beq.n	8007f64 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f62:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d162      	bne.n	8008032 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007f6c:	e02e      	b.n	8007fcc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	f003 0301 	and.w	r3, r3, #1
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d115      	bne.n	8007fa8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f103 020c 	add.w	r2, r3, #12
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f88:	7812      	ldrb	r2, [r2, #0]
 8007f8a:	b2d2      	uxtb	r2, r2
 8007f8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f92:	1c5a      	adds	r2, r3, #1
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007fa6:	e011      	b.n	8007fcc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fa8:	f7fc fa54 	bl	8004454 <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d803      	bhi.n	8007fc0 <HAL_SPI_Receive+0x166>
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fbe:	d102      	bne.n	8007fc6 <HAL_SPI_Receive+0x16c>
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d102      	bne.n	8007fcc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007fca:	e04a      	b.n	8008062 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1cb      	bne.n	8007f6e <HAL_SPI_Receive+0x114>
 8007fd6:	e031      	b.n	800803c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d113      	bne.n	800800e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68da      	ldr	r2, [r3, #12]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff0:	b292      	uxth	r2, r2
 8007ff2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff8:	1c9a      	adds	r2, r3, #2
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008002:	b29b      	uxth	r3, r3
 8008004:	3b01      	subs	r3, #1
 8008006:	b29a      	uxth	r2, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800800c:	e011      	b.n	8008032 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800800e:	f7fc fa21 	bl	8004454 <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	683a      	ldr	r2, [r7, #0]
 800801a:	429a      	cmp	r2, r3
 800801c:	d803      	bhi.n	8008026 <HAL_SPI_Receive+0x1cc>
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008024:	d102      	bne.n	800802c <HAL_SPI_Receive+0x1d2>
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d102      	bne.n	8008032 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008030:	e017      	b.n	8008062 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008036:	b29b      	uxth	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1cd      	bne.n	8007fd8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800803c:	693a      	ldr	r2, [r7, #16]
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f000 fa45 	bl	80084d0 <SPI_EndRxTransaction>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d002      	beq.n	8008052 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2220      	movs	r2, #32
 8008050:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008056:	2b00      	cmp	r3, #0
 8008058:	d002      	beq.n	8008060 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	75fb      	strb	r3, [r7, #23]
 800805e:	e000      	b.n	8008062 <HAL_SPI_Receive+0x208>
  }

error :
 8008060:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008072:	7dfb      	ldrb	r3, [r7, #23]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3718      	adds	r7, #24
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b08c      	sub	sp, #48	; 0x30
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
 8008088:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800808a:	2301      	movs	r3, #1
 800808c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800809a:	2b01      	cmp	r3, #1
 800809c:	d101      	bne.n	80080a2 <HAL_SPI_TransmitReceive+0x26>
 800809e:	2302      	movs	r3, #2
 80080a0:	e18a      	b.n	80083b8 <HAL_SPI_TransmitReceive+0x33c>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080aa:	f7fc f9d3 	bl	8004454 <HAL_GetTick>
 80080ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80080c0:	887b      	ldrh	r3, [r7, #2]
 80080c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80080c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d00f      	beq.n	80080ec <HAL_SPI_TransmitReceive+0x70>
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080d2:	d107      	bne.n	80080e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d103      	bne.n	80080e4 <HAL_SPI_TransmitReceive+0x68>
 80080dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080e0:	2b04      	cmp	r3, #4
 80080e2:	d003      	beq.n	80080ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80080e4:	2302      	movs	r3, #2
 80080e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80080ea:	e15b      	b.n	80083a4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d005      	beq.n	80080fe <HAL_SPI_TransmitReceive+0x82>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d002      	beq.n	80080fe <HAL_SPI_TransmitReceive+0x82>
 80080f8:	887b      	ldrh	r3, [r7, #2]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d103      	bne.n	8008106 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008104:	e14e      	b.n	80083a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b04      	cmp	r3, #4
 8008110:	d003      	beq.n	800811a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2205      	movs	r2, #5
 8008116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	887a      	ldrh	r2, [r7, #2]
 800812a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	887a      	ldrh	r2, [r7, #2]
 8008130:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	887a      	ldrh	r2, [r7, #2]
 800813c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	887a      	ldrh	r2, [r7, #2]
 8008142:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815a:	2b40      	cmp	r3, #64	; 0x40
 800815c:	d007      	beq.n	800816e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800816c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008176:	d178      	bne.n	800826a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <HAL_SPI_TransmitReceive+0x10a>
 8008180:	8b7b      	ldrh	r3, [r7, #26]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d166      	bne.n	8008254 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818a:	881a      	ldrh	r2, [r3, #0]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008196:	1c9a      	adds	r2, r3, #2
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081aa:	e053      	b.n	8008254 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f003 0302 	and.w	r3, r3, #2
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d11b      	bne.n	80081f2 <HAL_SPI_TransmitReceive+0x176>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081be:	b29b      	uxth	r3, r3
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d016      	beq.n	80081f2 <HAL_SPI_TransmitReceive+0x176>
 80081c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d113      	bne.n	80081f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ce:	881a      	ldrh	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081da:	1c9a      	adds	r2, r3, #2
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	3b01      	subs	r3, #1
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d119      	bne.n	8008234 <HAL_SPI_TransmitReceive+0x1b8>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008204:	b29b      	uxth	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d014      	beq.n	8008234 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68da      	ldr	r2, [r3, #12]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008214:	b292      	uxth	r2, r2
 8008216:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821c:	1c9a      	adds	r2, r3, #2
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008226:	b29b      	uxth	r3, r3
 8008228:	3b01      	subs	r3, #1
 800822a:	b29a      	uxth	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008230:	2301      	movs	r3, #1
 8008232:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008234:	f7fc f90e 	bl	8004454 <HAL_GetTick>
 8008238:	4602      	mov	r2, r0
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008240:	429a      	cmp	r2, r3
 8008242:	d807      	bhi.n	8008254 <HAL_SPI_TransmitReceive+0x1d8>
 8008244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824a:	d003      	beq.n	8008254 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008252:	e0a7      	b.n	80083a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008258:	b29b      	uxth	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1a6      	bne.n	80081ac <HAL_SPI_TransmitReceive+0x130>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008262:	b29b      	uxth	r3, r3
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1a1      	bne.n	80081ac <HAL_SPI_TransmitReceive+0x130>
 8008268:	e07c      	b.n	8008364 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <HAL_SPI_TransmitReceive+0x1fc>
 8008272:	8b7b      	ldrh	r3, [r7, #26]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d16b      	bne.n	8008350 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	330c      	adds	r3, #12
 8008282:	7812      	ldrb	r2, [r2, #0]
 8008284:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828a:	1c5a      	adds	r2, r3, #1
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008294:	b29b      	uxth	r3, r3
 8008296:	3b01      	subs	r3, #1
 8008298:	b29a      	uxth	r2, r3
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800829e:	e057      	b.n	8008350 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f003 0302 	and.w	r3, r3, #2
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d11c      	bne.n	80082e8 <HAL_SPI_TransmitReceive+0x26c>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d017      	beq.n	80082e8 <HAL_SPI_TransmitReceive+0x26c>
 80082b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d114      	bne.n	80082e8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	330c      	adds	r3, #12
 80082c8:	7812      	ldrb	r2, [r2, #0]
 80082ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d0:	1c5a      	adds	r2, r3, #1
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082da:	b29b      	uxth	r3, r3
 80082dc:	3b01      	subs	r3, #1
 80082de:	b29a      	uxth	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082e4:	2300      	movs	r3, #0
 80082e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d119      	bne.n	800832a <HAL_SPI_TransmitReceive+0x2ae>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d014      	beq.n	800832a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68da      	ldr	r2, [r3, #12]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830a:	b2d2      	uxtb	r2, r2
 800830c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800831c:	b29b      	uxth	r3, r3
 800831e:	3b01      	subs	r3, #1
 8008320:	b29a      	uxth	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008326:	2301      	movs	r3, #1
 8008328:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800832a:	f7fc f893 	bl	8004454 <HAL_GetTick>
 800832e:	4602      	mov	r2, r0
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008336:	429a      	cmp	r2, r3
 8008338:	d803      	bhi.n	8008342 <HAL_SPI_TransmitReceive+0x2c6>
 800833a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008340:	d102      	bne.n	8008348 <HAL_SPI_TransmitReceive+0x2cc>
 8008342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008344:	2b00      	cmp	r3, #0
 8008346:	d103      	bne.n	8008350 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800834e:	e029      	b.n	80083a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008354:	b29b      	uxth	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1a2      	bne.n	80082a0 <HAL_SPI_TransmitReceive+0x224>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800835e:	b29b      	uxth	r3, r3
 8008360:	2b00      	cmp	r3, #0
 8008362:	d19d      	bne.n	80082a0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 f917 	bl	800859c <SPI_EndRxTxTransaction>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d006      	beq.n	8008382 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2220      	movs	r2, #32
 800837e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008380:	e010      	b.n	80083a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10b      	bne.n	80083a2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800838a:	2300      	movs	r3, #0
 800838c:	617b      	str	r3, [r7, #20]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	617b      	str	r3, [r7, #20]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	617b      	str	r3, [r7, #20]
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	e000      	b.n	80083a4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80083a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80083b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3730      	adds	r7, #48	; 0x30
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b088      	sub	sp, #32
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	603b      	str	r3, [r7, #0]
 80083cc:	4613      	mov	r3, r2
 80083ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80083d0:	f7fc f840 	bl	8004454 <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d8:	1a9b      	subs	r3, r3, r2
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	4413      	add	r3, r2
 80083de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80083e0:	f7fc f838 	bl	8004454 <HAL_GetTick>
 80083e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80083e6:	4b39      	ldr	r3, [pc, #228]	; (80084cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	015b      	lsls	r3, r3, #5
 80083ec:	0d1b      	lsrs	r3, r3, #20
 80083ee:	69fa      	ldr	r2, [r7, #28]
 80083f0:	fb02 f303 	mul.w	r3, r2, r3
 80083f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083f6:	e054      	b.n	80084a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fe:	d050      	beq.n	80084a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008400:	f7fc f828 	bl	8004454 <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	69fa      	ldr	r2, [r7, #28]
 800840c:	429a      	cmp	r2, r3
 800840e:	d902      	bls.n	8008416 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d13d      	bne.n	8008492 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008424:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800842e:	d111      	bne.n	8008454 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008438:	d004      	beq.n	8008444 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008442:	d107      	bne.n	8008454 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008452:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800845c:	d10f      	bne.n	800847e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800847c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e017      	b.n	80084c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008498:	2300      	movs	r3, #0
 800849a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	3b01      	subs	r3, #1
 80084a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	4013      	ands	r3, r2
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	bf0c      	ite	eq
 80084b2:	2301      	moveq	r3, #1
 80084b4:	2300      	movne	r3, #0
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	461a      	mov	r2, r3
 80084ba:	79fb      	ldrb	r3, [r7, #7]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d19b      	bne.n	80083f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3720      	adds	r7, #32
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	200007f4 	.word	0x200007f4

080084d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af02      	add	r7, sp, #8
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084e4:	d111      	bne.n	800850a <SPI_EndRxTransaction+0x3a>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ee:	d004      	beq.n	80084fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084f8:	d107      	bne.n	800850a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008508:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008512:	d12a      	bne.n	800856a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800851c:	d012      	beq.n	8008544 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2200      	movs	r2, #0
 8008526:	2180      	movs	r1, #128	; 0x80
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f7ff ff49 	bl	80083c0 <SPI_WaitFlagStateUntilTimeout>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d02d      	beq.n	8008590 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008538:	f043 0220 	orr.w	r2, r3, #32
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008540:	2303      	movs	r3, #3
 8008542:	e026      	b.n	8008592 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2200      	movs	r2, #0
 800854c:	2101      	movs	r1, #1
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f7ff ff36 	bl	80083c0 <SPI_WaitFlagStateUntilTimeout>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d01a      	beq.n	8008590 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800855e:	f043 0220 	orr.w	r2, r3, #32
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e013      	b.n	8008592 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	2200      	movs	r2, #0
 8008572:	2101      	movs	r1, #1
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f7ff ff23 	bl	80083c0 <SPI_WaitFlagStateUntilTimeout>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d007      	beq.n	8008590 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008584:	f043 0220 	orr.w	r2, r3, #32
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e000      	b.n	8008592 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
	...

0800859c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b088      	sub	sp, #32
 80085a0:	af02      	add	r7, sp, #8
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80085a8:	4b1b      	ldr	r3, [pc, #108]	; (8008618 <SPI_EndRxTxTransaction+0x7c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a1b      	ldr	r2, [pc, #108]	; (800861c <SPI_EndRxTxTransaction+0x80>)
 80085ae:	fba2 2303 	umull	r2, r3, r2, r3
 80085b2:	0d5b      	lsrs	r3, r3, #21
 80085b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80085b8:	fb02 f303 	mul.w	r3, r2, r3
 80085bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085c6:	d112      	bne.n	80085ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	2200      	movs	r2, #0
 80085d0:	2180      	movs	r1, #128	; 0x80
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f7ff fef4 	bl	80083c0 <SPI_WaitFlagStateUntilTimeout>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d016      	beq.n	800860c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e2:	f043 0220 	orr.w	r2, r3, #32
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e00f      	b.n	800860e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00a      	beq.n	800860a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	3b01      	subs	r3, #1
 80085f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008604:	2b80      	cmp	r3, #128	; 0x80
 8008606:	d0f2      	beq.n	80085ee <SPI_EndRxTxTransaction+0x52>
 8008608:	e000      	b.n	800860c <SPI_EndRxTxTransaction+0x70>
        break;
 800860a:	bf00      	nop
  }

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	200007f4 	.word	0x200007f4
 800861c:	165e9f81 	.word	0x165e9f81

08008620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e041      	b.n	80086b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d106      	bne.n	800864c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7fb fdbe 	bl	80041c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2202      	movs	r2, #2
 8008650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3304      	adds	r3, #4
 800865c:	4619      	mov	r1, r3
 800865e:	4610      	mov	r0, r2
 8008660:	f000 fd54 	bl	800910c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
	...

080086c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d001      	beq.n	80086d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e03c      	b.n	8008752 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2202      	movs	r2, #2
 80086dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a1e      	ldr	r2, [pc, #120]	; (8008760 <HAL_TIM_Base_Start+0xa0>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d018      	beq.n	800871c <HAL_TIM_Base_Start+0x5c>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f2:	d013      	beq.n	800871c <HAL_TIM_Base_Start+0x5c>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a1a      	ldr	r2, [pc, #104]	; (8008764 <HAL_TIM_Base_Start+0xa4>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d00e      	beq.n	800871c <HAL_TIM_Base_Start+0x5c>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a19      	ldr	r2, [pc, #100]	; (8008768 <HAL_TIM_Base_Start+0xa8>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d009      	beq.n	800871c <HAL_TIM_Base_Start+0x5c>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a17      	ldr	r2, [pc, #92]	; (800876c <HAL_TIM_Base_Start+0xac>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d004      	beq.n	800871c <HAL_TIM_Base_Start+0x5c>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a16      	ldr	r2, [pc, #88]	; (8008770 <HAL_TIM_Base_Start+0xb0>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d111      	bne.n	8008740 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f003 0307 	and.w	r3, r3, #7
 8008726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2b06      	cmp	r3, #6
 800872c:	d010      	beq.n	8008750 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f042 0201 	orr.w	r2, r2, #1
 800873c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800873e:	e007      	b.n	8008750 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f042 0201 	orr.w	r2, r2, #1
 800874e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	40010000 	.word	0x40010000
 8008764:	40000400 	.word	0x40000400
 8008768:	40000800 	.word	0x40000800
 800876c:	40000c00 	.word	0x40000c00
 8008770:	40014000 	.word	0x40014000

08008774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b01      	cmp	r3, #1
 8008786:	d001      	beq.n	800878c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e044      	b.n	8008816 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2202      	movs	r2, #2
 8008790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68da      	ldr	r2, [r3, #12]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 0201 	orr.w	r2, r2, #1
 80087a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a1e      	ldr	r2, [pc, #120]	; (8008824 <HAL_TIM_Base_Start_IT+0xb0>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d018      	beq.n	80087e0 <HAL_TIM_Base_Start_IT+0x6c>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087b6:	d013      	beq.n	80087e0 <HAL_TIM_Base_Start_IT+0x6c>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a1a      	ldr	r2, [pc, #104]	; (8008828 <HAL_TIM_Base_Start_IT+0xb4>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d00e      	beq.n	80087e0 <HAL_TIM_Base_Start_IT+0x6c>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a19      	ldr	r2, [pc, #100]	; (800882c <HAL_TIM_Base_Start_IT+0xb8>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d009      	beq.n	80087e0 <HAL_TIM_Base_Start_IT+0x6c>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a17      	ldr	r2, [pc, #92]	; (8008830 <HAL_TIM_Base_Start_IT+0xbc>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d004      	beq.n	80087e0 <HAL_TIM_Base_Start_IT+0x6c>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a16      	ldr	r2, [pc, #88]	; (8008834 <HAL_TIM_Base_Start_IT+0xc0>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d111      	bne.n	8008804 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f003 0307 	and.w	r3, r3, #7
 80087ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2b06      	cmp	r3, #6
 80087f0:	d010      	beq.n	8008814 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f042 0201 	orr.w	r2, r2, #1
 8008800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008802:	e007      	b.n	8008814 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f042 0201 	orr.w	r2, r2, #1
 8008812:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	40010000 	.word	0x40010000
 8008828:	40000400 	.word	0x40000400
 800882c:	40000800 	.word	0x40000800
 8008830:	40000c00 	.word	0x40000c00
 8008834:	40014000 	.word	0x40014000

08008838 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e041      	b.n	80088ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	d106      	bne.n	8008864 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f839 	bl	80088d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2202      	movs	r2, #2
 8008868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	3304      	adds	r3, #4
 8008874:	4619      	mov	r1, r3
 8008876:	4610      	mov	r0, r2
 8008878:	f000 fc48 	bl	800910c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b083      	sub	sp, #12
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80088de:	bf00      	nop
 80088e0:	370c      	adds	r7, #12
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
	...

080088ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d109      	bne.n	8008910 <HAL_TIM_PWM_Start+0x24>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b01      	cmp	r3, #1
 8008906:	bf14      	ite	ne
 8008908:	2301      	movne	r3, #1
 800890a:	2300      	moveq	r3, #0
 800890c:	b2db      	uxtb	r3, r3
 800890e:	e022      	b.n	8008956 <HAL_TIM_PWM_Start+0x6a>
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	2b04      	cmp	r3, #4
 8008914:	d109      	bne.n	800892a <HAL_TIM_PWM_Start+0x3e>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b01      	cmp	r3, #1
 8008920:	bf14      	ite	ne
 8008922:	2301      	movne	r3, #1
 8008924:	2300      	moveq	r3, #0
 8008926:	b2db      	uxtb	r3, r3
 8008928:	e015      	b.n	8008956 <HAL_TIM_PWM_Start+0x6a>
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	2b08      	cmp	r3, #8
 800892e:	d109      	bne.n	8008944 <HAL_TIM_PWM_Start+0x58>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008936:	b2db      	uxtb	r3, r3
 8008938:	2b01      	cmp	r3, #1
 800893a:	bf14      	ite	ne
 800893c:	2301      	movne	r3, #1
 800893e:	2300      	moveq	r3, #0
 8008940:	b2db      	uxtb	r3, r3
 8008942:	e008      	b.n	8008956 <HAL_TIM_PWM_Start+0x6a>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b01      	cmp	r3, #1
 800894e:	bf14      	ite	ne
 8008950:	2301      	movne	r3, #1
 8008952:	2300      	moveq	r3, #0
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b00      	cmp	r3, #0
 8008958:	d001      	beq.n	800895e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e068      	b.n	8008a30 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d104      	bne.n	800896e <HAL_TIM_PWM_Start+0x82>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2202      	movs	r2, #2
 8008968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800896c:	e013      	b.n	8008996 <HAL_TIM_PWM_Start+0xaa>
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	2b04      	cmp	r3, #4
 8008972:	d104      	bne.n	800897e <HAL_TIM_PWM_Start+0x92>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800897c:	e00b      	b.n	8008996 <HAL_TIM_PWM_Start+0xaa>
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b08      	cmp	r3, #8
 8008982:	d104      	bne.n	800898e <HAL_TIM_PWM_Start+0xa2>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2202      	movs	r2, #2
 8008988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800898c:	e003      	b.n	8008996 <HAL_TIM_PWM_Start+0xaa>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2202      	movs	r2, #2
 8008992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2201      	movs	r2, #1
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	4618      	mov	r0, r3
 80089a0:	f000 fe5a 	bl	8009658 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a23      	ldr	r2, [pc, #140]	; (8008a38 <HAL_TIM_PWM_Start+0x14c>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d107      	bne.n	80089be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a1d      	ldr	r2, [pc, #116]	; (8008a38 <HAL_TIM_PWM_Start+0x14c>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d018      	beq.n	80089fa <HAL_TIM_PWM_Start+0x10e>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d0:	d013      	beq.n	80089fa <HAL_TIM_PWM_Start+0x10e>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a19      	ldr	r2, [pc, #100]	; (8008a3c <HAL_TIM_PWM_Start+0x150>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d00e      	beq.n	80089fa <HAL_TIM_PWM_Start+0x10e>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a17      	ldr	r2, [pc, #92]	; (8008a40 <HAL_TIM_PWM_Start+0x154>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d009      	beq.n	80089fa <HAL_TIM_PWM_Start+0x10e>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a16      	ldr	r2, [pc, #88]	; (8008a44 <HAL_TIM_PWM_Start+0x158>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d004      	beq.n	80089fa <HAL_TIM_PWM_Start+0x10e>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a14      	ldr	r2, [pc, #80]	; (8008a48 <HAL_TIM_PWM_Start+0x15c>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d111      	bne.n	8008a1e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f003 0307 	and.w	r3, r3, #7
 8008a04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2b06      	cmp	r3, #6
 8008a0a:	d010      	beq.n	8008a2e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f042 0201 	orr.w	r2, r2, #1
 8008a1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a1c:	e007      	b.n	8008a2e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f042 0201 	orr.w	r2, r2, #1
 8008a2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3710      	adds	r7, #16
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	40010000 	.word	0x40010000
 8008a3c:	40000400 	.word	0x40000400
 8008a40:	40000800 	.word	0x40000800
 8008a44:	40000c00 	.word	0x40000c00
 8008a48:	40014000 	.word	0x40014000

08008a4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d101      	bne.n	8008a60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e097      	b.n	8008b90 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d106      	bne.n	8008a7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f7fb fb2b 	bl	80040d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2202      	movs	r2, #2
 8008a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	6812      	ldr	r2, [r2, #0]
 8008a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a90:	f023 0307 	bic.w	r3, r3, #7
 8008a94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	f000 fb33 	bl	800910c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	6a1b      	ldr	r3, [r3, #32]
 8008abc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ace:	f023 0303 	bic.w	r3, r3, #3
 8008ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	689a      	ldr	r2, [r3, #8]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	021b      	lsls	r3, r3, #8
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008aec:	f023 030c 	bic.w	r3, r3, #12
 8008af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008af8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	68da      	ldr	r2, [r3, #12]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	69db      	ldr	r3, [r3, #28]
 8008b06:	021b      	lsls	r3, r3, #8
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	011a      	lsls	r2, r3, #4
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	6a1b      	ldr	r3, [r3, #32]
 8008b1a:	031b      	lsls	r3, r3, #12
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008b2a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008b32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	685a      	ldr	r2, [r3, #4]
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	695b      	ldr	r3, [r3, #20]
 8008b3c:	011b      	lsls	r3, r3, #4
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	697a      	ldr	r2, [r7, #20]
 8008b4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	693a      	ldr	r2, [r7, #16]
 8008b54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3718      	adds	r7, #24
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	f003 0302 	and.w	r3, r3, #2
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d122      	bne.n	8008bf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	f003 0302 	and.w	r3, r3, #2
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d11b      	bne.n	8008bf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f06f 0202 	mvn.w	r2, #2
 8008bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	f003 0303 	and.w	r3, r3, #3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d003      	beq.n	8008be2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fa77 	bl	80090ce <HAL_TIM_IC_CaptureCallback>
 8008be0:	e005      	b.n	8008bee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fa69 	bl	80090ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fa7a 	bl	80090e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	f003 0304 	and.w	r3, r3, #4
 8008bfe:	2b04      	cmp	r3, #4
 8008c00:	d122      	bne.n	8008c48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	f003 0304 	and.w	r3, r3, #4
 8008c0c:	2b04      	cmp	r3, #4
 8008c0e:	d11b      	bne.n	8008c48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f06f 0204 	mvn.w	r2, #4
 8008c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d003      	beq.n	8008c36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fa4d 	bl	80090ce <HAL_TIM_IC_CaptureCallback>
 8008c34:	e005      	b.n	8008c42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fa3f 	bl	80090ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fa50 	bl	80090e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	f003 0308 	and.w	r3, r3, #8
 8008c52:	2b08      	cmp	r3, #8
 8008c54:	d122      	bne.n	8008c9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	f003 0308 	and.w	r3, r3, #8
 8008c60:	2b08      	cmp	r3, #8
 8008c62:	d11b      	bne.n	8008c9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f06f 0208 	mvn.w	r2, #8
 8008c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2204      	movs	r2, #4
 8008c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	f003 0303 	and.w	r3, r3, #3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d003      	beq.n	8008c8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fa23 	bl	80090ce <HAL_TIM_IC_CaptureCallback>
 8008c88:	e005      	b.n	8008c96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fa15 	bl	80090ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fa26 	bl	80090e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	f003 0310 	and.w	r3, r3, #16
 8008ca6:	2b10      	cmp	r3, #16
 8008ca8:	d122      	bne.n	8008cf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	f003 0310 	and.w	r3, r3, #16
 8008cb4:	2b10      	cmp	r3, #16
 8008cb6:	d11b      	bne.n	8008cf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f06f 0210 	mvn.w	r2, #16
 8008cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2208      	movs	r2, #8
 8008cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	69db      	ldr	r3, [r3, #28]
 8008cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d003      	beq.n	8008cde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f9f9 	bl	80090ce <HAL_TIM_IC_CaptureCallback>
 8008cdc:	e005      	b.n	8008cea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f9eb 	bl	80090ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f9fc 	bl	80090e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d10e      	bne.n	8008d1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d107      	bne.n	8008d1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f06f 0201 	mvn.w	r2, #1
 8008d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7f8 fa10 	bl	800113c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d26:	2b80      	cmp	r3, #128	; 0x80
 8008d28:	d10e      	bne.n	8008d48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d34:	2b80      	cmp	r3, #128	; 0x80
 8008d36:	d107      	bne.n	8008d48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 fd26 	bl	8009794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d52:	2b40      	cmp	r3, #64	; 0x40
 8008d54:	d10e      	bne.n	8008d74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d60:	2b40      	cmp	r3, #64	; 0x40
 8008d62:	d107      	bne.n	8008d74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f9c1 	bl	80090f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	f003 0320 	and.w	r3, r3, #32
 8008d7e:	2b20      	cmp	r3, #32
 8008d80:	d10e      	bne.n	8008da0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	f003 0320 	and.w	r3, r3, #32
 8008d8c:	2b20      	cmp	r3, #32
 8008d8e:	d107      	bne.n	8008da0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f06f 0220 	mvn.w	r2, #32
 8008d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fcf0 	bl	8009780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008da0:	bf00      	nop
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d101      	bne.n	8008dc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	e0ae      	b.n	8008f24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2b0c      	cmp	r3, #12
 8008dd2:	f200 809f 	bhi.w	8008f14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008dd6:	a201      	add	r2, pc, #4	; (adr r2, 8008ddc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ddc:	08008e11 	.word	0x08008e11
 8008de0:	08008f15 	.word	0x08008f15
 8008de4:	08008f15 	.word	0x08008f15
 8008de8:	08008f15 	.word	0x08008f15
 8008dec:	08008e51 	.word	0x08008e51
 8008df0:	08008f15 	.word	0x08008f15
 8008df4:	08008f15 	.word	0x08008f15
 8008df8:	08008f15 	.word	0x08008f15
 8008dfc:	08008e93 	.word	0x08008e93
 8008e00:	08008f15 	.word	0x08008f15
 8008e04:	08008f15 	.word	0x08008f15
 8008e08:	08008f15 	.word	0x08008f15
 8008e0c:	08008ed3 	.word	0x08008ed3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68b9      	ldr	r1, [r7, #8]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 f9f8 	bl	800920c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	699a      	ldr	r2, [r3, #24]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f042 0208 	orr.w	r2, r2, #8
 8008e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	699a      	ldr	r2, [r3, #24]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f022 0204 	bic.w	r2, r2, #4
 8008e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6999      	ldr	r1, [r3, #24]
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	691a      	ldr	r2, [r3, #16]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	430a      	orrs	r2, r1
 8008e4c:	619a      	str	r2, [r3, #24]
      break;
 8008e4e:	e064      	b.n	8008f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68b9      	ldr	r1, [r7, #8]
 8008e56:	4618      	mov	r0, r3
 8008e58:	f000 fa3e 	bl	80092d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	699a      	ldr	r2, [r3, #24]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	699a      	ldr	r2, [r3, #24]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	6999      	ldr	r1, [r3, #24]
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	021a      	lsls	r2, r3, #8
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	430a      	orrs	r2, r1
 8008e8e:	619a      	str	r2, [r3, #24]
      break;
 8008e90:	e043      	b.n	8008f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68b9      	ldr	r1, [r7, #8]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f000 fa89 	bl	80093b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	69da      	ldr	r2, [r3, #28]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f042 0208 	orr.w	r2, r2, #8
 8008eac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	69da      	ldr	r2, [r3, #28]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f022 0204 	bic.w	r2, r2, #4
 8008ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	69d9      	ldr	r1, [r3, #28]
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	691a      	ldr	r2, [r3, #16]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	61da      	str	r2, [r3, #28]
      break;
 8008ed0:	e023      	b.n	8008f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68b9      	ldr	r1, [r7, #8]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 fad3 	bl	8009484 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	69da      	ldr	r2, [r3, #28]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	69da      	ldr	r2, [r3, #28]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	69d9      	ldr	r1, [r3, #28]
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	021a      	lsls	r2, r3, #8
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	430a      	orrs	r2, r1
 8008f10:	61da      	str	r2, [r3, #28]
      break;
 8008f12:	e002      	b.n	8008f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	75fb      	strb	r3, [r7, #23]
      break;
 8008f18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3718      	adds	r7, #24
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d101      	bne.n	8008f48 <HAL_TIM_ConfigClockSource+0x1c>
 8008f44:	2302      	movs	r3, #2
 8008f46:	e0b4      	b.n	80090b2 <HAL_TIM_ConfigClockSource+0x186>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2202      	movs	r2, #2
 8008f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f80:	d03e      	beq.n	8009000 <HAL_TIM_ConfigClockSource+0xd4>
 8008f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f86:	f200 8087 	bhi.w	8009098 <HAL_TIM_ConfigClockSource+0x16c>
 8008f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f8e:	f000 8086 	beq.w	800909e <HAL_TIM_ConfigClockSource+0x172>
 8008f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f96:	d87f      	bhi.n	8009098 <HAL_TIM_ConfigClockSource+0x16c>
 8008f98:	2b70      	cmp	r3, #112	; 0x70
 8008f9a:	d01a      	beq.n	8008fd2 <HAL_TIM_ConfigClockSource+0xa6>
 8008f9c:	2b70      	cmp	r3, #112	; 0x70
 8008f9e:	d87b      	bhi.n	8009098 <HAL_TIM_ConfigClockSource+0x16c>
 8008fa0:	2b60      	cmp	r3, #96	; 0x60
 8008fa2:	d050      	beq.n	8009046 <HAL_TIM_ConfigClockSource+0x11a>
 8008fa4:	2b60      	cmp	r3, #96	; 0x60
 8008fa6:	d877      	bhi.n	8009098 <HAL_TIM_ConfigClockSource+0x16c>
 8008fa8:	2b50      	cmp	r3, #80	; 0x50
 8008faa:	d03c      	beq.n	8009026 <HAL_TIM_ConfigClockSource+0xfa>
 8008fac:	2b50      	cmp	r3, #80	; 0x50
 8008fae:	d873      	bhi.n	8009098 <HAL_TIM_ConfigClockSource+0x16c>
 8008fb0:	2b40      	cmp	r3, #64	; 0x40
 8008fb2:	d058      	beq.n	8009066 <HAL_TIM_ConfigClockSource+0x13a>
 8008fb4:	2b40      	cmp	r3, #64	; 0x40
 8008fb6:	d86f      	bhi.n	8009098 <HAL_TIM_ConfigClockSource+0x16c>
 8008fb8:	2b30      	cmp	r3, #48	; 0x30
 8008fba:	d064      	beq.n	8009086 <HAL_TIM_ConfigClockSource+0x15a>
 8008fbc:	2b30      	cmp	r3, #48	; 0x30
 8008fbe:	d86b      	bhi.n	8009098 <HAL_TIM_ConfigClockSource+0x16c>
 8008fc0:	2b20      	cmp	r3, #32
 8008fc2:	d060      	beq.n	8009086 <HAL_TIM_ConfigClockSource+0x15a>
 8008fc4:	2b20      	cmp	r3, #32
 8008fc6:	d867      	bhi.n	8009098 <HAL_TIM_ConfigClockSource+0x16c>
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d05c      	beq.n	8009086 <HAL_TIM_ConfigClockSource+0x15a>
 8008fcc:	2b10      	cmp	r3, #16
 8008fce:	d05a      	beq.n	8009086 <HAL_TIM_ConfigClockSource+0x15a>
 8008fd0:	e062      	b.n	8009098 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6818      	ldr	r0, [r3, #0]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	6899      	ldr	r1, [r3, #8]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	685a      	ldr	r2, [r3, #4]
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	f000 fb19 	bl	8009618 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ff4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	609a      	str	r2, [r3, #8]
      break;
 8008ffe:	e04f      	b.n	80090a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6818      	ldr	r0, [r3, #0]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	6899      	ldr	r1, [r3, #8]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	f000 fb02 	bl	8009618 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689a      	ldr	r2, [r3, #8]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009022:	609a      	str	r2, [r3, #8]
      break;
 8009024:	e03c      	b.n	80090a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6818      	ldr	r0, [r3, #0]
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	6859      	ldr	r1, [r3, #4]
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	461a      	mov	r2, r3
 8009034:	f000 fa76 	bl	8009524 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2150      	movs	r1, #80	; 0x50
 800903e:	4618      	mov	r0, r3
 8009040:	f000 facf 	bl	80095e2 <TIM_ITRx_SetConfig>
      break;
 8009044:	e02c      	b.n	80090a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6818      	ldr	r0, [r3, #0]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	6859      	ldr	r1, [r3, #4]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	461a      	mov	r2, r3
 8009054:	f000 fa95 	bl	8009582 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2160      	movs	r1, #96	; 0x60
 800905e:	4618      	mov	r0, r3
 8009060:	f000 fabf 	bl	80095e2 <TIM_ITRx_SetConfig>
      break;
 8009064:	e01c      	b.n	80090a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6818      	ldr	r0, [r3, #0]
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	6859      	ldr	r1, [r3, #4]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	461a      	mov	r2, r3
 8009074:	f000 fa56 	bl	8009524 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2140      	movs	r1, #64	; 0x40
 800907e:	4618      	mov	r0, r3
 8009080:	f000 faaf 	bl	80095e2 <TIM_ITRx_SetConfig>
      break;
 8009084:	e00c      	b.n	80090a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4619      	mov	r1, r3
 8009090:	4610      	mov	r0, r2
 8009092:	f000 faa6 	bl	80095e2 <TIM_ITRx_SetConfig>
      break;
 8009096:	e003      	b.n	80090a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	73fb      	strb	r3, [r7, #15]
      break;
 800909c:	e000      	b.n	80090a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800909e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b083      	sub	sp, #12
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090c2:	bf00      	nop
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090ce:	b480      	push	{r7}
 80090d0:	b083      	sub	sp, #12
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090d6:	bf00      	nop
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b083      	sub	sp, #12
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090ea:	bf00      	nop
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b083      	sub	sp, #12
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80090fe:	bf00      	nop
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
	...

0800910c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a34      	ldr	r2, [pc, #208]	; (80091f0 <TIM_Base_SetConfig+0xe4>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d00f      	beq.n	8009144 <TIM_Base_SetConfig+0x38>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800912a:	d00b      	beq.n	8009144 <TIM_Base_SetConfig+0x38>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a31      	ldr	r2, [pc, #196]	; (80091f4 <TIM_Base_SetConfig+0xe8>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d007      	beq.n	8009144 <TIM_Base_SetConfig+0x38>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a30      	ldr	r2, [pc, #192]	; (80091f8 <TIM_Base_SetConfig+0xec>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d003      	beq.n	8009144 <TIM_Base_SetConfig+0x38>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a2f      	ldr	r2, [pc, #188]	; (80091fc <TIM_Base_SetConfig+0xf0>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d108      	bne.n	8009156 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800914a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	4313      	orrs	r3, r2
 8009154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a25      	ldr	r2, [pc, #148]	; (80091f0 <TIM_Base_SetConfig+0xe4>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d01b      	beq.n	8009196 <TIM_Base_SetConfig+0x8a>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009164:	d017      	beq.n	8009196 <TIM_Base_SetConfig+0x8a>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a22      	ldr	r2, [pc, #136]	; (80091f4 <TIM_Base_SetConfig+0xe8>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d013      	beq.n	8009196 <TIM_Base_SetConfig+0x8a>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a21      	ldr	r2, [pc, #132]	; (80091f8 <TIM_Base_SetConfig+0xec>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d00f      	beq.n	8009196 <TIM_Base_SetConfig+0x8a>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a20      	ldr	r2, [pc, #128]	; (80091fc <TIM_Base_SetConfig+0xf0>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d00b      	beq.n	8009196 <TIM_Base_SetConfig+0x8a>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a1f      	ldr	r2, [pc, #124]	; (8009200 <TIM_Base_SetConfig+0xf4>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d007      	beq.n	8009196 <TIM_Base_SetConfig+0x8a>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a1e      	ldr	r2, [pc, #120]	; (8009204 <TIM_Base_SetConfig+0xf8>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d003      	beq.n	8009196 <TIM_Base_SetConfig+0x8a>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a1d      	ldr	r2, [pc, #116]	; (8009208 <TIM_Base_SetConfig+0xfc>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d108      	bne.n	80091a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800919c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	695b      	ldr	r3, [r3, #20]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	689a      	ldr	r2, [r3, #8]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a08      	ldr	r2, [pc, #32]	; (80091f0 <TIM_Base_SetConfig+0xe4>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d103      	bne.n	80091dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	691a      	ldr	r2, [r3, #16]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	615a      	str	r2, [r3, #20]
}
 80091e2:	bf00      	nop
 80091e4:	3714      	adds	r7, #20
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	40010000 	.word	0x40010000
 80091f4:	40000400 	.word	0x40000400
 80091f8:	40000800 	.word	0x40000800
 80091fc:	40000c00 	.word	0x40000c00
 8009200:	40014000 	.word	0x40014000
 8009204:	40014400 	.word	0x40014400
 8009208:	40014800 	.word	0x40014800

0800920c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800920c:	b480      	push	{r7}
 800920e:	b087      	sub	sp, #28
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	f023 0201 	bic.w	r2, r3, #1
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800923a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f023 0303 	bic.w	r3, r3, #3
 8009242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	4313      	orrs	r3, r2
 800924c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	f023 0302 	bic.w	r3, r3, #2
 8009254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	4313      	orrs	r3, r2
 800925e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a1c      	ldr	r2, [pc, #112]	; (80092d4 <TIM_OC1_SetConfig+0xc8>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d10c      	bne.n	8009282 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	f023 0308 	bic.w	r3, r3, #8
 800926e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	4313      	orrs	r3, r2
 8009278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	f023 0304 	bic.w	r3, r3, #4
 8009280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a13      	ldr	r2, [pc, #76]	; (80092d4 <TIM_OC1_SetConfig+0xc8>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d111      	bne.n	80092ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	693a      	ldr	r2, [r7, #16]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	697a      	ldr	r2, [r7, #20]
 80092c6:	621a      	str	r2, [r3, #32]
}
 80092c8:	bf00      	nop
 80092ca:	371c      	adds	r7, #28
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	40010000 	.word	0x40010000

080092d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092d8:	b480      	push	{r7}
 80092da:	b087      	sub	sp, #28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	f023 0210 	bic.w	r2, r3, #16
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800930e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	021b      	lsls	r3, r3, #8
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	4313      	orrs	r3, r2
 800931a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	f023 0320 	bic.w	r3, r3, #32
 8009322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	011b      	lsls	r3, r3, #4
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	4313      	orrs	r3, r2
 800932e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a1e      	ldr	r2, [pc, #120]	; (80093ac <TIM_OC2_SetConfig+0xd4>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d10d      	bne.n	8009354 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800933e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	011b      	lsls	r3, r3, #4
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	4313      	orrs	r3, r2
 800934a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009352:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a15      	ldr	r2, [pc, #84]	; (80093ac <TIM_OC2_SetConfig+0xd4>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d113      	bne.n	8009384 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009362:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800936a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	695b      	ldr	r3, [r3, #20]
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	693a      	ldr	r2, [r7, #16]
 8009374:	4313      	orrs	r3, r2
 8009376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	4313      	orrs	r3, r2
 8009382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	685a      	ldr	r2, [r3, #4]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	621a      	str	r2, [r3, #32]
}
 800939e:	bf00      	nop
 80093a0:	371c      	adds	r7, #28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	40010000 	.word	0x40010000

080093b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b087      	sub	sp, #28
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a1b      	ldr	r3, [r3, #32]
 80093be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a1b      	ldr	r3, [r3, #32]
 80093ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	69db      	ldr	r3, [r3, #28]
 80093d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f023 0303 	bic.w	r3, r3, #3
 80093e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	021b      	lsls	r3, r3, #8
 8009400:	697a      	ldr	r2, [r7, #20]
 8009402:	4313      	orrs	r3, r2
 8009404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a1d      	ldr	r2, [pc, #116]	; (8009480 <TIM_OC3_SetConfig+0xd0>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d10d      	bne.n	800942a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	021b      	lsls	r3, r3, #8
 800941c:	697a      	ldr	r2, [r7, #20]
 800941e:	4313      	orrs	r3, r2
 8009420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a14      	ldr	r2, [pc, #80]	; (8009480 <TIM_OC3_SetConfig+0xd0>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d113      	bne.n	800945a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	695b      	ldr	r3, [r3, #20]
 8009446:	011b      	lsls	r3, r3, #4
 8009448:	693a      	ldr	r2, [r7, #16]
 800944a:	4313      	orrs	r3, r2
 800944c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	699b      	ldr	r3, [r3, #24]
 8009452:	011b      	lsls	r3, r3, #4
 8009454:	693a      	ldr	r2, [r7, #16]
 8009456:	4313      	orrs	r3, r2
 8009458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	693a      	ldr	r2, [r7, #16]
 800945e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	68fa      	ldr	r2, [r7, #12]
 8009464:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	685a      	ldr	r2, [r3, #4]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	697a      	ldr	r2, [r7, #20]
 8009472:	621a      	str	r2, [r3, #32]
}
 8009474:	bf00      	nop
 8009476:	371c      	adds	r7, #28
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr
 8009480:	40010000 	.word	0x40010000

08009484 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009484:	b480      	push	{r7}
 8009486:	b087      	sub	sp, #28
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a1b      	ldr	r3, [r3, #32]
 8009492:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a1b      	ldr	r3, [r3, #32]
 800949e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	021b      	lsls	r3, r3, #8
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	031b      	lsls	r3, r3, #12
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	4313      	orrs	r3, r2
 80094da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a10      	ldr	r2, [pc, #64]	; (8009520 <TIM_OC4_SetConfig+0x9c>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d109      	bne.n	80094f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	695b      	ldr	r3, [r3, #20]
 80094f0:	019b      	lsls	r3, r3, #6
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	697a      	ldr	r2, [r7, #20]
 80094fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	685a      	ldr	r2, [r3, #4]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	621a      	str	r2, [r3, #32]
}
 8009512:	bf00      	nop
 8009514:	371c      	adds	r7, #28
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	40010000 	.word	0x40010000

08009524 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009524:	b480      	push	{r7}
 8009526:	b087      	sub	sp, #28
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6a1b      	ldr	r3, [r3, #32]
 8009534:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	f023 0201 	bic.w	r2, r3, #1
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800954e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	011b      	lsls	r3, r3, #4
 8009554:	693a      	ldr	r2, [r7, #16]
 8009556:	4313      	orrs	r3, r2
 8009558:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	f023 030a 	bic.w	r3, r3, #10
 8009560:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	4313      	orrs	r3, r2
 8009568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	621a      	str	r2, [r3, #32]
}
 8009576:	bf00      	nop
 8009578:	371c      	adds	r7, #28
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009582:	b480      	push	{r7}
 8009584:	b087      	sub	sp, #28
 8009586:	af00      	add	r7, sp, #0
 8009588:	60f8      	str	r0, [r7, #12]
 800958a:	60b9      	str	r1, [r7, #8]
 800958c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6a1b      	ldr	r3, [r3, #32]
 8009592:	f023 0210 	bic.w	r2, r3, #16
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6a1b      	ldr	r3, [r3, #32]
 80095a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80095ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	031b      	lsls	r3, r3, #12
 80095b2:	697a      	ldr	r2, [r7, #20]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80095be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	011b      	lsls	r3, r3, #4
 80095c4:	693a      	ldr	r2, [r7, #16]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	693a      	ldr	r2, [r7, #16]
 80095d4:	621a      	str	r2, [r3, #32]
}
 80095d6:	bf00      	nop
 80095d8:	371c      	adds	r7, #28
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095e2:	b480      	push	{r7}
 80095e4:	b085      	sub	sp, #20
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	4313      	orrs	r3, r2
 8009600:	f043 0307 	orr.w	r3, r3, #7
 8009604:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	609a      	str	r2, [r3, #8]
}
 800960c:	bf00      	nop
 800960e:	3714      	adds	r7, #20
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009618:	b480      	push	{r7}
 800961a:	b087      	sub	sp, #28
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
 8009624:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009632:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	021a      	lsls	r2, r3, #8
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	431a      	orrs	r2, r3
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	4313      	orrs	r3, r2
 8009640:	697a      	ldr	r2, [r7, #20]
 8009642:	4313      	orrs	r3, r2
 8009644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	697a      	ldr	r2, [r7, #20]
 800964a:	609a      	str	r2, [r3, #8]
}
 800964c:	bf00      	nop
 800964e:	371c      	adds	r7, #28
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009658:	b480      	push	{r7}
 800965a:	b087      	sub	sp, #28
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	f003 031f 	and.w	r3, r3, #31
 800966a:	2201      	movs	r2, #1
 800966c:	fa02 f303 	lsl.w	r3, r2, r3
 8009670:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6a1a      	ldr	r2, [r3, #32]
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	43db      	mvns	r3, r3
 800967a:	401a      	ands	r2, r3
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6a1a      	ldr	r2, [r3, #32]
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	f003 031f 	and.w	r3, r3, #31
 800968a:	6879      	ldr	r1, [r7, #4]
 800968c:	fa01 f303 	lsl.w	r3, r1, r3
 8009690:	431a      	orrs	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	621a      	str	r2, [r3, #32]
}
 8009696:	bf00      	nop
 8009698:	371c      	adds	r7, #28
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
	...

080096a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d101      	bne.n	80096bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80096b8:	2302      	movs	r3, #2
 80096ba:	e050      	b.n	800975e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2202      	movs	r2, #2
 80096c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a1c      	ldr	r2, [pc, #112]	; (800976c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d018      	beq.n	8009732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009708:	d013      	beq.n	8009732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a18      	ldr	r2, [pc, #96]	; (8009770 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d00e      	beq.n	8009732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a16      	ldr	r2, [pc, #88]	; (8009774 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d009      	beq.n	8009732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a15      	ldr	r2, [pc, #84]	; (8009778 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d004      	beq.n	8009732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a13      	ldr	r2, [pc, #76]	; (800977c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d10c      	bne.n	800974c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	4313      	orrs	r3, r2
 8009742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68ba      	ldr	r2, [r7, #8]
 800974a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3714      	adds	r7, #20
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	40010000 	.word	0x40010000
 8009770:	40000400 	.word	0x40000400
 8009774:	40000800 	.word	0x40000800
 8009778:	40000c00 	.word	0x40000c00
 800977c:	40014000 	.word	0x40014000

08009780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <arm_sin_f32>:
 80097a8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8009824 <arm_sin_f32+0x7c>
 80097ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80097b0:	ee20 7a07 	vmul.f32	s14, s0, s14
 80097b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097b8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80097bc:	d42c      	bmi.n	8009818 <arm_sin_f32+0x70>
 80097be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097c2:	eddf 6a19 	vldr	s13, [pc, #100]	; 8009828 <arm_sin_f32+0x80>
 80097c6:	4a19      	ldr	r2, [pc, #100]	; (800982c <arm_sin_f32+0x84>)
 80097c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80097d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80097d4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80097d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097dc:	bfa8      	it	ge
 80097de:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 80097e2:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80097e6:	ee17 3a10 	vmov	r3, s14
 80097ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ee:	ee07 3a10 	vmov	s14, r3
 80097f2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80097f6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80097fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80097fe:	edd1 6a01 	vldr	s13, [r1, #4]
 8009802:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009806:	ed91 0a00 	vldr	s0, [r1]
 800980a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800980e:	ee27 0a00 	vmul.f32	s0, s14, s0
 8009812:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009816:	4770      	bx	lr
 8009818:	ee17 3a90 	vmov	r3, s15
 800981c:	3b01      	subs	r3, #1
 800981e:	ee07 3a90 	vmov	s15, r3
 8009822:	e7cc      	b.n	80097be <arm_sin_f32+0x16>
 8009824:	3e22f983 	.word	0x3e22f983
 8009828:	44000000 	.word	0x44000000
 800982c:	0800a668 	.word	0x0800a668

08009830 <__libc_init_array>:
 8009830:	b570      	push	{r4, r5, r6, lr}
 8009832:	4d0d      	ldr	r5, [pc, #52]	; (8009868 <__libc_init_array+0x38>)
 8009834:	4c0d      	ldr	r4, [pc, #52]	; (800986c <__libc_init_array+0x3c>)
 8009836:	1b64      	subs	r4, r4, r5
 8009838:	10a4      	asrs	r4, r4, #2
 800983a:	2600      	movs	r6, #0
 800983c:	42a6      	cmp	r6, r4
 800983e:	d109      	bne.n	8009854 <__libc_init_array+0x24>
 8009840:	4d0b      	ldr	r5, [pc, #44]	; (8009870 <__libc_init_array+0x40>)
 8009842:	4c0c      	ldr	r4, [pc, #48]	; (8009874 <__libc_init_array+0x44>)
 8009844:	f000 f842 	bl	80098cc <_init>
 8009848:	1b64      	subs	r4, r4, r5
 800984a:	10a4      	asrs	r4, r4, #2
 800984c:	2600      	movs	r6, #0
 800984e:	42a6      	cmp	r6, r4
 8009850:	d105      	bne.n	800985e <__libc_init_array+0x2e>
 8009852:	bd70      	pop	{r4, r5, r6, pc}
 8009854:	f855 3b04 	ldr.w	r3, [r5], #4
 8009858:	4798      	blx	r3
 800985a:	3601      	adds	r6, #1
 800985c:	e7ee      	b.n	800983c <__libc_init_array+0xc>
 800985e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009862:	4798      	blx	r3
 8009864:	3601      	adds	r6, #1
 8009866:	e7f2      	b.n	800984e <__libc_init_array+0x1e>
 8009868:	0800ae74 	.word	0x0800ae74
 800986c:	0800ae74 	.word	0x0800ae74
 8009870:	0800ae74 	.word	0x0800ae74
 8009874:	0800ae78 	.word	0x0800ae78

08009878 <memcpy>:
 8009878:	440a      	add	r2, r1
 800987a:	4291      	cmp	r1, r2
 800987c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009880:	d100      	bne.n	8009884 <memcpy+0xc>
 8009882:	4770      	bx	lr
 8009884:	b510      	push	{r4, lr}
 8009886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800988a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800988e:	4291      	cmp	r1, r2
 8009890:	d1f9      	bne.n	8009886 <memcpy+0xe>
 8009892:	bd10      	pop	{r4, pc}

08009894 <memset>:
 8009894:	4402      	add	r2, r0
 8009896:	4603      	mov	r3, r0
 8009898:	4293      	cmp	r3, r2
 800989a:	d100      	bne.n	800989e <memset+0xa>
 800989c:	4770      	bx	lr
 800989e:	f803 1b01 	strb.w	r1, [r3], #1
 80098a2:	e7f9      	b.n	8009898 <memset+0x4>

080098a4 <strncmp>:
 80098a4:	b510      	push	{r4, lr}
 80098a6:	b17a      	cbz	r2, 80098c8 <strncmp+0x24>
 80098a8:	4603      	mov	r3, r0
 80098aa:	3901      	subs	r1, #1
 80098ac:	1884      	adds	r4, r0, r2
 80098ae:	f813 0b01 	ldrb.w	r0, [r3], #1
 80098b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80098b6:	4290      	cmp	r0, r2
 80098b8:	d101      	bne.n	80098be <strncmp+0x1a>
 80098ba:	42a3      	cmp	r3, r4
 80098bc:	d101      	bne.n	80098c2 <strncmp+0x1e>
 80098be:	1a80      	subs	r0, r0, r2
 80098c0:	bd10      	pop	{r4, pc}
 80098c2:	2800      	cmp	r0, #0
 80098c4:	d1f3      	bne.n	80098ae <strncmp+0xa>
 80098c6:	e7fa      	b.n	80098be <strncmp+0x1a>
 80098c8:	4610      	mov	r0, r2
 80098ca:	e7f9      	b.n	80098c0 <strncmp+0x1c>

080098cc <_init>:
 80098cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ce:	bf00      	nop
 80098d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098d2:	bc08      	pop	{r3}
 80098d4:	469e      	mov	lr, r3
 80098d6:	4770      	bx	lr

080098d8 <_fini>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	bf00      	nop
 80098dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098de:	bc08      	pop	{r3}
 80098e0:	469e      	mov	lr, r3
 80098e2:	4770      	bx	lr
