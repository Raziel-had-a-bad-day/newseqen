
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000838c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002668  08008524  08008524  00018524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab8c  0800ab8c  00028ff8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab8c  0800ab8c  0001ab8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab94  0800ab94  00028ff8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab94  0800ab94  0001ab94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab98  0800ab98  0001ab98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00008ff8  20000000  0800ab9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b748  20008ff8  08013b94  00028ff8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014740  08013b94  00034740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00028ff8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021203  00000000  00000000  00029028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d9  00000000  00000000  0004a22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001aea7  00000000  00000000  0004d704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  000685b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002840  00000000  00000000  00069610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018df0  00000000  00000000  0006be50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024cac  00000000  00000000  00084c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a211f  00000000  00000000  000a98ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c0  00000000  00000000  0014ba0b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003dfc  00000000  00000000  0014bacc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20008ff8 	.word	0x20008ff8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800850c 	.word	0x0800850c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20008ffc 	.word	0x20008ffc
 80001d4:	0800850c 	.word	0x0800850c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2uiz>:
 80007b4:	004a      	lsls	r2, r1, #1
 80007b6:	d211      	bcs.n	80007dc <__aeabi_d2uiz+0x28>
 80007b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007bc:	d211      	bcs.n	80007e2 <__aeabi_d2uiz+0x2e>
 80007be:	d50d      	bpl.n	80007dc <__aeabi_d2uiz+0x28>
 80007c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c8:	d40e      	bmi.n	80007e8 <__aeabi_d2uiz+0x34>
 80007ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007d6:	fa23 f002 	lsr.w	r0, r3, r2
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007e6:	d102      	bne.n	80007ee <__aeabi_d2uiz+0x3a>
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	4770      	bx	lr
 80007ee:	f04f 0000 	mov.w	r0, #0
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_d2f>:
 80007f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007fc:	bf24      	itt	cs
 80007fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000802:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000806:	d90d      	bls.n	8000824 <__aeabi_d2f+0x30>
 8000808:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800080c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000810:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000814:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000818:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000828:	d121      	bne.n	800086e <__aeabi_d2f+0x7a>
 800082a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800082e:	bfbc      	itt	lt
 8000830:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000834:	4770      	bxlt	lr
 8000836:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800083a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800083e:	f1c2 0218 	rsb	r2, r2, #24
 8000842:	f1c2 0c20 	rsb	ip, r2, #32
 8000846:	fa10 f30c 	lsls.w	r3, r0, ip
 800084a:	fa20 f002 	lsr.w	r0, r0, r2
 800084e:	bf18      	it	ne
 8000850:	f040 0001 	orrne.w	r0, r0, #1
 8000854:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000858:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800085c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000860:	ea40 000c 	orr.w	r0, r0, ip
 8000864:	fa23 f302 	lsr.w	r3, r3, r2
 8000868:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800086c:	e7cc      	b.n	8000808 <__aeabi_d2f+0x14>
 800086e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000872:	d107      	bne.n	8000884 <__aeabi_d2f+0x90>
 8000874:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000878:	bf1e      	ittt	ne
 800087a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800087e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000882:	4770      	bxne	lr
 8000884:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000888:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800088c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <__aeabi_uldivmod>:
 8000894:	b953      	cbnz	r3, 80008ac <__aeabi_uldivmod+0x18>
 8000896:	b94a      	cbnz	r2, 80008ac <__aeabi_uldivmod+0x18>
 8000898:	2900      	cmp	r1, #0
 800089a:	bf08      	it	eq
 800089c:	2800      	cmpeq	r0, #0
 800089e:	bf1c      	itt	ne
 80008a0:	f04f 31ff 	movne.w	r1, #4294967295
 80008a4:	f04f 30ff 	movne.w	r0, #4294967295
 80008a8:	f000 b974 	b.w	8000b94 <__aeabi_idiv0>
 80008ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b4:	f000 f806 	bl	80008c4 <__udivmoddi4>
 80008b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c0:	b004      	add	sp, #16
 80008c2:	4770      	bx	lr

080008c4 <__udivmoddi4>:
 80008c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c8:	9d08      	ldr	r5, [sp, #32]
 80008ca:	4604      	mov	r4, r0
 80008cc:	468e      	mov	lr, r1
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d14d      	bne.n	800096e <__udivmoddi4+0xaa>
 80008d2:	428a      	cmp	r2, r1
 80008d4:	4694      	mov	ip, r2
 80008d6:	d969      	bls.n	80009ac <__udivmoddi4+0xe8>
 80008d8:	fab2 f282 	clz	r2, r2
 80008dc:	b152      	cbz	r2, 80008f4 <__udivmoddi4+0x30>
 80008de:	fa01 f302 	lsl.w	r3, r1, r2
 80008e2:	f1c2 0120 	rsb	r1, r2, #32
 80008e6:	fa20 f101 	lsr.w	r1, r0, r1
 80008ea:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ee:	ea41 0e03 	orr.w	lr, r1, r3
 80008f2:	4094      	lsls	r4, r2
 80008f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f8:	0c21      	lsrs	r1, r4, #16
 80008fa:	fbbe f6f8 	udiv	r6, lr, r8
 80008fe:	fa1f f78c 	uxth.w	r7, ip
 8000902:	fb08 e316 	mls	r3, r8, r6, lr
 8000906:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800090a:	fb06 f107 	mul.w	r1, r6, r7
 800090e:	4299      	cmp	r1, r3
 8000910:	d90a      	bls.n	8000928 <__udivmoddi4+0x64>
 8000912:	eb1c 0303 	adds.w	r3, ip, r3
 8000916:	f106 30ff 	add.w	r0, r6, #4294967295
 800091a:	f080 811f 	bcs.w	8000b5c <__udivmoddi4+0x298>
 800091e:	4299      	cmp	r1, r3
 8000920:	f240 811c 	bls.w	8000b5c <__udivmoddi4+0x298>
 8000924:	3e02      	subs	r6, #2
 8000926:	4463      	add	r3, ip
 8000928:	1a5b      	subs	r3, r3, r1
 800092a:	b2a4      	uxth	r4, r4
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3310 	mls	r3, r8, r0, r3
 8000934:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000938:	fb00 f707 	mul.w	r7, r0, r7
 800093c:	42a7      	cmp	r7, r4
 800093e:	d90a      	bls.n	8000956 <__udivmoddi4+0x92>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f100 33ff 	add.w	r3, r0, #4294967295
 8000948:	f080 810a 	bcs.w	8000b60 <__udivmoddi4+0x29c>
 800094c:	42a7      	cmp	r7, r4
 800094e:	f240 8107 	bls.w	8000b60 <__udivmoddi4+0x29c>
 8000952:	4464      	add	r4, ip
 8000954:	3802      	subs	r0, #2
 8000956:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800095a:	1be4      	subs	r4, r4, r7
 800095c:	2600      	movs	r6, #0
 800095e:	b11d      	cbz	r5, 8000968 <__udivmoddi4+0xa4>
 8000960:	40d4      	lsrs	r4, r2
 8000962:	2300      	movs	r3, #0
 8000964:	e9c5 4300 	strd	r4, r3, [r5]
 8000968:	4631      	mov	r1, r6
 800096a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096e:	428b      	cmp	r3, r1
 8000970:	d909      	bls.n	8000986 <__udivmoddi4+0xc2>
 8000972:	2d00      	cmp	r5, #0
 8000974:	f000 80ef 	beq.w	8000b56 <__udivmoddi4+0x292>
 8000978:	2600      	movs	r6, #0
 800097a:	e9c5 0100 	strd	r0, r1, [r5]
 800097e:	4630      	mov	r0, r6
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	fab3 f683 	clz	r6, r3
 800098a:	2e00      	cmp	r6, #0
 800098c:	d14a      	bne.n	8000a24 <__udivmoddi4+0x160>
 800098e:	428b      	cmp	r3, r1
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xd4>
 8000992:	4282      	cmp	r2, r0
 8000994:	f200 80f9 	bhi.w	8000b8a <__udivmoddi4+0x2c6>
 8000998:	1a84      	subs	r4, r0, r2
 800099a:	eb61 0303 	sbc.w	r3, r1, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	469e      	mov	lr, r3
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d0e0      	beq.n	8000968 <__udivmoddi4+0xa4>
 80009a6:	e9c5 4e00 	strd	r4, lr, [r5]
 80009aa:	e7dd      	b.n	8000968 <__udivmoddi4+0xa4>
 80009ac:	b902      	cbnz	r2, 80009b0 <__udivmoddi4+0xec>
 80009ae:	deff      	udf	#255	; 0xff
 80009b0:	fab2 f282 	clz	r2, r2
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	f040 8092 	bne.w	8000ade <__udivmoddi4+0x21a>
 80009ba:	eba1 010c 	sub.w	r1, r1, ip
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2601      	movs	r6, #1
 80009c8:	0c20      	lsrs	r0, r4, #16
 80009ca:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ce:	fb07 1113 	mls	r1, r7, r3, r1
 80009d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009d6:	fb0e f003 	mul.w	r0, lr, r3
 80009da:	4288      	cmp	r0, r1
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x12c>
 80009de:	eb1c 0101 	adds.w	r1, ip, r1
 80009e2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x12a>
 80009e8:	4288      	cmp	r0, r1
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2c0>
 80009ee:	4643      	mov	r3, r8
 80009f0:	1a09      	subs	r1, r1, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1110 	mls	r1, r7, r0, r1
 80009fc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x156>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x154>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2ca>
 8000a18:	4608      	mov	r0, r1
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	e79c      	b.n	800095e <__udivmoddi4+0x9a>
 8000a24:	f1c6 0720 	rsb	r7, r6, #32
 8000a28:	40b3      	lsls	r3, r6
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa20 f407 	lsr.w	r4, r0, r7
 8000a36:	fa01 f306 	lsl.w	r3, r1, r6
 8000a3a:	431c      	orrs	r4, r3
 8000a3c:	40f9      	lsrs	r1, r7
 8000a3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a42:	fa00 f306 	lsl.w	r3, r0, r6
 8000a46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a4a:	0c20      	lsrs	r0, r4, #16
 8000a4c:	fa1f fe8c 	uxth.w	lr, ip
 8000a50:	fb09 1118 	mls	r1, r9, r8, r1
 8000a54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a58:	fb08 f00e 	mul.w	r0, r8, lr
 8000a5c:	4288      	cmp	r0, r1
 8000a5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b8>
 8000a64:	eb1c 0101 	adds.w	r1, ip, r1
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2bc>
 8000a70:	4288      	cmp	r0, r1
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2bc>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4461      	add	r1, ip
 8000a7c:	1a09      	subs	r1, r1, r0
 8000a7e:	b2a4      	uxth	r4, r4
 8000a80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a84:	fb09 1110 	mls	r1, r9, r0, r1
 8000a88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a90:	458e      	cmp	lr, r1
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1e2>
 8000a94:	eb1c 0101 	adds.w	r1, ip, r1
 8000a98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2b4>
 8000a9e:	458e      	cmp	lr, r1
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2b4>
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	4461      	add	r1, ip
 8000aa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aaa:	fba0 9402 	umull	r9, r4, r0, r2
 8000aae:	eba1 010e 	sub.w	r1, r1, lr
 8000ab2:	42a1      	cmp	r1, r4
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46a6      	mov	lr, r4
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x2a4>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x2a0>
 8000abc:	b15d      	cbz	r5, 8000ad6 <__udivmoddi4+0x212>
 8000abe:	ebb3 0208 	subs.w	r2, r3, r8
 8000ac2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ac6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aca:	fa22 f306 	lsr.w	r3, r2, r6
 8000ace:	40f1      	lsrs	r1, r6
 8000ad0:	431f      	orrs	r7, r3
 8000ad2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	40d8      	lsrs	r0, r3
 8000ae4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aec:	4091      	lsls	r1, r2
 8000aee:	4301      	orrs	r1, r0
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000afc:	fb07 3610 	mls	r6, r7, r0, r3
 8000b00:	0c0b      	lsrs	r3, r1, #16
 8000b02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b06:	fb00 f60e 	mul.w	r6, r0, lr
 8000b0a:	429e      	cmp	r6, r3
 8000b0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x260>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b8>
 8000b1c:	429e      	cmp	r6, r3
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b8>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4463      	add	r3, ip
 8000b24:	1b9b      	subs	r3, r3, r6
 8000b26:	b289      	uxth	r1, r1
 8000b28:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b2c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b34:	fb06 f30e 	mul.w	r3, r6, lr
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x28a>
 8000b3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b40:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2b0>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2b0>
 8000b4a:	3e02      	subs	r6, #2
 8000b4c:	4461      	add	r1, ip
 8000b4e:	1ac9      	subs	r1, r1, r3
 8000b50:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0x104>
 8000b56:	462e      	mov	r6, r5
 8000b58:	4628      	mov	r0, r5
 8000b5a:	e705      	b.n	8000968 <__udivmoddi4+0xa4>
 8000b5c:	4606      	mov	r6, r0
 8000b5e:	e6e3      	b.n	8000928 <__udivmoddi4+0x64>
 8000b60:	4618      	mov	r0, r3
 8000b62:	e6f8      	b.n	8000956 <__udivmoddi4+0x92>
 8000b64:	454b      	cmp	r3, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f8>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b70:	3801      	subs	r0, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f8>
 8000b74:	4646      	mov	r6, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x28a>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1e2>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x260>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b8>
 8000b84:	3b02      	subs	r3, #2
 8000b86:	4461      	add	r1, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x12c>
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	e709      	b.n	80009a2 <__udivmoddi4+0xde>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x156>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b98:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b9a:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <MX_SPI1_Init+0x38>)
 8000b9c:	4c0d      	ldr	r4, [pc, #52]	; (8000bd4 <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b9e:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba2:	2300      	movs	r3, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ba4:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ba8:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 8000bac:	220a      	movs	r2, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bae:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bb6:	e9c0 1306 	strd	r1, r3, [r0, #24]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bba:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCPolynomial = 10;
 8000bbe:	e9c0 320a 	strd	r3, r2, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bc2:	f006 f953 	bl	8006e6c <HAL_SPI_Init>
 8000bc6:	b108      	cbz	r0, 8000bcc <MX_SPI1_Init+0x34>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bca:	e7fe      	b.n	8000bca <MX_SPI1_Init+0x32>
}
 8000bcc:	bd10      	pop	{r4, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000d550 	.word	0x2000d550
 8000bd4:	40013000 	.word	0x40013000

08000bd8 <sampler_ram_clear_test.part.0>:
	//   Everything  with  managing sample data

	uint8_t  sampler_ram_clear_test(uint16_t sample_number){    // returns 15   if location is clear    or ok , else  0  , sample number is  0-511 (slow version)
 8000bd8:	b510      	push	{r4, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	4604      	mov	r4, r0



	//  HAL_SPI_Init(&hspi1); // write to register hspi2
	if (sample_number>509) return 0;
	MX_SPI1_Init();
 8000bde:	f7ff ffdb 	bl	8000b98 <MX_SPI1_Init>

	uint8_t spi_test[4];
	uint8_t test_counter=0;
	uint8_t test_return[24]={0};
 8000be2:	2200      	movs	r2, #0

	test_return[0]=0x03; //read page 1
 8000be4:	2303      	movs	r3, #3
	uint8_t test_return[24]={0};
 8000be6:	9202      	str	r2, [sp, #8]
	////	test_return[2]=1; //
	//	test_return[3]=0;



	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8000be8:	4812      	ldr	r0, [pc, #72]	; (8000c34 <sampler_ram_clear_test.part.0+0x5c>)
	test_return[0]=0x03; //read page 1
 8000bea:	f88d 3008 	strb.w	r3, [sp, #8]
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8000bee:	2110      	movs	r1, #16
	test_return[1]=sample_number>>1; //24bit address msb
 8000bf0:	0863      	lsrs	r3, r4, #1
	test_return[2]=(sample_number&1)<<7; //24bit address
 8000bf2:	01e4      	lsls	r4, r4, #7
	uint8_t test_return[24]={0};
 8000bf4:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8000bf8:	e9cd 2205 	strd	r2, r2, [sp, #20]
 8000bfc:	9207      	str	r2, [sp, #28]
	test_return[1]=sample_number>>1; //24bit address msb
 8000bfe:	f88d 3009 	strb.w	r3, [sp, #9]
	test_return[2]=(sample_number&1)<<7; //24bit address
 8000c02:	f88d 400a 	strb.w	r4, [sp, #10]
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8000c06:	f005 f889 	bl	8005d1c <HAL_GPIO_WritePin>
	//HAL_SPI_ (&hspi1,test_return, 20, 1000);   // works fine
	HAL_SPI_TransmitReceive (&hspi1, test_return,test_return,  24, 100); // request data
 8000c0a:	aa02      	add	r2, sp, #8
 8000c0c:	2064      	movs	r0, #100	; 0x64
 8000c0e:	2318      	movs	r3, #24
 8000c10:	4611      	mov	r1, r2
 8000c12:	9000      	str	r0, [sp, #0]
 8000c14:	4808      	ldr	r0, [pc, #32]	; (8000c38 <sampler_ram_clear_test.part.0+0x60>)
 8000c16:	f006 fa55 	bl	80070c4 <HAL_SPI_TransmitReceive>


	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // high end
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <sampler_ram_clear_test.part.0+0x5c>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2110      	movs	r1, #16
 8000c20:	f005 f87c 	bl	8005d1c <HAL_GPIO_WritePin>

	//HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
	for (test_counter=0;test_counter<20;test_counter++){
	    if (test_return[test_counter+20]!=255) return 0;  else return 15;
 8000c24:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8000c28:	2bff      	cmp	r3, #255	; 0xff

	}
	return 15;
    }
 8000c2a:	bf0c      	ite	eq
 8000c2c:	200f      	moveq	r0, #15
 8000c2e:	2000      	movne	r0, #0
 8000c30:	b008      	add	sp, #32
 8000c32:	bd10      	pop	{r4, pc}
 8000c34:	40020000 	.word	0x40020000
 8000c38:	2000d550 	.word	0x2000d550

08000c3c <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char menu_string2[8];
	//var_index=var_index&15;    //set var index ie  LFO[1].rate ,false
	uint8_t menu_countr=0; //  menu vars
	uint8_t *menu_vars_var1=NULL;

	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000c40:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 8000f3c <menu_vars+0x300>
 8000c44:	4da0      	ldr	r5, [pc, #640]	; (8000ec8 <menu_vars+0x28c>)
 8000c46:	2600      	movs	r6, #0
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000c48:	b082      	sub	sp, #8
 8000c4a:	4607      	mov	r7, r0
 8000c4c:	468a      	mov	sl, r1
	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000c4e:	f8a8 6000 	strh.w	r6, [r8]
 8000c52:	f505 798e 	add.w	r9, r5, #284	; 0x11c
 8000c56:	4634      	mov	r4, r6

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000c58:	f855 2f04 	ldr.w	r2, [r5, #4]!
 8000c5c:	6810      	ldr	r0, [r2, #0]
 8000c5e:	6851      	ldr	r1, [r2, #4]
 8000c60:	466b      	mov	r3, sp
 8000c62:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000c64:	2208      	movs	r2, #8
 8000c66:	4669      	mov	r1, sp
 8000c68:	4638      	mov	r0, r7
 8000c6a:	f007 fbaf 	bl	80083cc <strncmp>
	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000c6e:	1c63      	adds	r3, r4, #1
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000c70:	b900      	cbnz	r0, 8000c74 <menu_vars+0x38>
 8000c72:	b2e6      	uxtb	r6, r4
	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000c74:	b29c      	uxth	r4, r3
 8000c76:	454d      	cmp	r5, r9
 8000c78:	f8a8 4000 	strh.w	r4, [r8]
 8000c7c:	d1ec      	bne.n	8000c58 <menu_vars+0x1c>
			menu_countr = i;

		}
	}
	menu_vars_ref=menu_countr ;
	if (var_index>menu_vars_index_limit[menu_countr]) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000c7e:	4b93      	ldr	r3, [pc, #588]	; (8000ecc <menu_vars+0x290>)
	menu_vars_ref=menu_countr ;
 8000c80:	4a93      	ldr	r2, [pc, #588]	; (8000ed0 <menu_vars+0x294>)
 8000c82:	5d98      	ldrb	r0, [r3, r6]
 8000c84:	7016      	strb	r6, [r2, #0]
	if (var_index>menu_vars_index_limit[menu_countr]) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000c86:	4550      	cmp	r0, sl

	switch(menu_countr){
 8000c88:	f106 33ff 	add.w	r3, r6, #4294967295
 8000c8c:	bf28      	it	cs
 8000c8e:	4650      	movcs	r0, sl
 8000c90:	2b44      	cmp	r3, #68	; 0x44
 8000c92:	d846      	bhi.n	8000d22 <menu_vars+0xe6>
 8000c94:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000c98:	01a501ab 	.word	0x01a501ab
 8000c9c:	0199019f 	.word	0x0199019f
 8000ca0:	00450193 	.word	0x00450193
 8000ca4:	0187018d 	.word	0x0187018d
 8000ca8:	017b0181 	.word	0x017b0181
 8000cac:	01770045 	.word	0x01770045
 8000cb0:	016d0172 	.word	0x016d0172
 8000cb4:	01630168 	.word	0x01630168
 8000cb8:	0159015e 	.word	0x0159015e
 8000cbc:	01130154 	.word	0x01130154
 8000cc0:	01b10045 	.word	0x01b10045
 8000cc4:	010e0111 	.word	0x010e0111
 8000cc8:	0108010b 	.word	0x0108010b
 8000ccc:	00ff0104 	.word	0x00ff0104
 8000cd0:	00f500fa 	.word	0x00f500fa
 8000cd4:	00eb00f0 	.word	0x00eb00f0
 8000cd8:	00e100e6 	.word	0x00e100e6
 8000cdc:	00d300db 	.word	0x00d300db
 8000ce0:	00c700cd 	.word	0x00c700cd
 8000ce4:	00bb00c1 	.word	0x00bb00c1
 8000ce8:	00af00b5 	.word	0x00af00b5
 8000cec:	00a600a9 	.word	0x00a600a9
 8000cf0:	00a200a4 	.word	0x00a200a4
 8000cf4:	009d00a0 	.word	0x009d00a0
 8000cf8:	00910097 	.word	0x00910097
 8000cfc:	0085008b 	.word	0x0085008b
 8000d00:	00800082 	.word	0x00800082
 8000d04:	007c007e 	.word	0x007c007e
 8000d08:	0078007a 	.word	0x0078007a
 8000d0c:	00730075 	.word	0x00730075
 8000d10:	006c0071 	.word	0x006c0071
 8000d14:	00660069 	.word	0x00660069
 8000d18:	005b0061 	.word	0x005b0061
 8000d1c:	004f0055 	.word	0x004f0055
 8000d20:	0049      	.short	0x0049
	case 0:     menu_vars_var1= NULL; break;
 8000d22:	2000      	movs	r0, #0
	}
    // copy back address  ,ok
	// return the result number for later reference
	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
}
 8000d24:	b002      	add	sp, #8
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	case 69:     menu_vars_var1= &delay[var_index].mod_depth   ; break;
 8000d2a:	4b6a      	ldr	r3, [pc, #424]	; (8000ed4 <menu_vars+0x298>)
 8000d2c:	2205      	movs	r2, #5
 8000d2e:	fb02 3000 	mla	r0, r2, r0, r3
 8000d32:	3004      	adds	r0, #4
 8000d34:	e7f6      	b.n	8000d24 <menu_vars+0xe8>
	case 68:     menu_vars_var1= &delay[var_index].mod_speed   ; break;
 8000d36:	4b67      	ldr	r3, [pc, #412]	; (8000ed4 <menu_vars+0x298>)
 8000d38:	2205      	movs	r2, #5
 8000d3a:	fb02 3000 	mla	r0, r2, r0, r3
 8000d3e:	3003      	adds	r0, #3
 8000d40:	e7f0      	b.n	8000d24 <menu_vars+0xe8>
	case 67:     menu_vars_var1= &delay[var_index].feedback    ; break;
 8000d42:	4b64      	ldr	r3, [pc, #400]	; (8000ed4 <menu_vars+0x298>)
 8000d44:	2205      	movs	r2, #5
 8000d46:	fb02 3000 	mla	r0, r2, r0, r3
 8000d4a:	3002      	adds	r0, #2
 8000d4c:	e7ea      	b.n	8000d24 <menu_vars+0xe8>
	case 66:     menu_vars_var1= &delay[var_index].mix    ; break;
 8000d4e:	4b61      	ldr	r3, [pc, #388]	; (8000ed4 <menu_vars+0x298>)
 8000d50:	2205      	movs	r2, #5
 8000d52:	fb02 3000 	mla	r0, r2, r0, r3
 8000d56:	3001      	adds	r0, #1
 8000d58:	e7e4      	b.n	8000d24 <menu_vars+0xe8>
	case 65:     menu_vars_var1= &delay[var_index].time    ; break;
 8000d5a:	4b5e      	ldr	r3, [pc, #376]	; (8000ed4 <menu_vars+0x298>)
 8000d5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000d60:	4418      	add	r0, r3
 8000d62:	e7df      	b.n	8000d24 <menu_vars+0xe8>
	case 64: 	menu_vars_var1=&sampler.Snotes2[var_index]  ;break;
 8000d64:	4b5c      	ldr	r3, [pc, #368]	; (8000ed8 <menu_vars+0x29c>)
 8000d66:	4418      	add	r0, r3
 8000d68:	e7dc      	b.n	8000d24 <menu_vars+0xe8>
	case 63: 	menu_vars_var1=&sampler.Snotes1[var_index]  ;break;
 8000d6a:	4b5c      	ldr	r3, [pc, #368]	; (8000edc <menu_vars+0x2a0>)
 8000d6c:	4418      	add	r0, r3
 8000d6e:	e7d9      	b.n	8000d24 <menu_vars+0xe8>
	case 62:     menu_vars_var1= &note[var_index].slide_length    ; break;
 8000d70:	4b5b      	ldr	r3, [pc, #364]	; (8000ee0 <menu_vars+0x2a4>)
 8000d72:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8000d76:	3009      	adds	r0, #9
 8000d78:	e7d4      	b.n	8000d24 <menu_vars+0xe8>
	case 61: 	menu_vars_var1=&sampler.sample_save_enable  ;break;
 8000d7a:	485a      	ldr	r0, [pc, #360]	; (8000ee4 <menu_vars+0x2a8>)
 8000d7c:	e7d2      	b.n	8000d24 <menu_vars+0xe8>
	case 60: 	menu_vars_var1=&sampler.sample_save  ;break;
 8000d7e:	485a      	ldr	r0, [pc, #360]	; (8000ee8 <menu_vars+0x2ac>)
 8000d80:	e7d0      	b.n	8000d24 <menu_vars+0xe8>
	case 59: 	menu_vars_var1=&sampler.sample_select[var_index]  ;break;
 8000d82:	4b5a      	ldr	r3, [pc, #360]	; (8000eec <menu_vars+0x2b0>)
 8000d84:	4418      	add	r0, r3
 8000d86:	e7cd      	b.n	8000d24 <menu_vars+0xe8>
	case 58: 	menu_vars_var1=&sampler.repeat  ;break;
 8000d88:	4859      	ldr	r0, [pc, #356]	; (8000ef0 <menu_vars+0x2b4>)
 8000d8a:	e7cb      	b.n	8000d24 <menu_vars+0xe8>
	case 57: 	menu_vars_var1=&sampler.trigger_4 ;break;
 8000d8c:	4859      	ldr	r0, [pc, #356]	; (8000ef4 <menu_vars+0x2b8>)
 8000d8e:	e7c9      	b.n	8000d24 <menu_vars+0xe8>
	case 56: 	menu_vars_var1=&sampler.trigger_3 ;break;
 8000d90:	4859      	ldr	r0, [pc, #356]	; (8000ef8 <menu_vars+0x2bc>)
 8000d92:	e7c7      	b.n	8000d24 <menu_vars+0xe8>
	case 55: 	menu_vars_var1=&sampler.trigger_2 ;break;
 8000d94:	4859      	ldr	r0, [pc, #356]	; (8000efc <menu_vars+0x2c0>)
 8000d96:	e7c5      	b.n	8000d24 <menu_vars+0xe8>
	case 54: 	menu_vars_var1=&sampler.trigger_1 ;break;
 8000d98:	4859      	ldr	r0, [pc, #356]	; (8000f00 <menu_vars+0x2c4>)
 8000d9a:	e7c3      	b.n	8000d24 <menu_vars+0xe8>
	case 53:     menu_vars_var1= &LCD_Info[var_index]    ; break; // send as char
 8000d9c:	4b59      	ldr	r3, [pc, #356]	; (8000f04 <menu_vars+0x2c8>)
 8000d9e:	4418      	add	r0, r3
 8000da0:	e7c0      	b.n	8000d24 <menu_vars+0xe8>
	case 52:     menu_vars_var1= &LFO_square[var_index].delay    ; break;
 8000da2:	4b59      	ldr	r3, [pc, #356]	; (8000f08 <menu_vars+0x2cc>)
 8000da4:	2214      	movs	r2, #20
 8000da6:	fb02 3000 	mla	r0, r2, r0, r3
 8000daa:	3003      	adds	r0, #3
 8000dac:	e7ba      	b.n	8000d24 <menu_vars+0xe8>
	case 51:     menu_vars_var1= &LFO_square[var_index].offset    ; break;
 8000dae:	4b56      	ldr	r3, [pc, #344]	; (8000f08 <menu_vars+0x2cc>)
 8000db0:	2214      	movs	r2, #20
 8000db2:	fb02 3000 	mla	r0, r2, r0, r3
 8000db6:	3002      	adds	r0, #2
 8000db8:	e7b4      	b.n	8000d24 <menu_vars+0xe8>
	case 50:     menu_vars_var1= &LFO_square[var_index].depth    ; break;
 8000dba:	4b53      	ldr	r3, [pc, #332]	; (8000f08 <menu_vars+0x2cc>)
 8000dbc:	2214      	movs	r2, #20
 8000dbe:	fb02 3000 	mla	r0, r2, r0, r3
 8000dc2:	3001      	adds	r0, #1
 8000dc4:	e7ae      	b.n	8000d24 <menu_vars+0xe8>
	case 49:     menu_vars_var1= &LFO_square[var_index].rate   ; break;
 8000dc6:	4b50      	ldr	r3, [pc, #320]	; (8000f08 <menu_vars+0x2cc>)
 8000dc8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000dcc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000dd0:	e7a8      	b.n	8000d24 <menu_vars+0xe8>
	case 48: 	menu_vars_var1=&sampler.offset[var_index] ;break;
 8000dd2:	4b4e      	ldr	r3, [pc, #312]	; (8000f0c <menu_vars+0x2d0>)
 8000dd4:	4418      	add	r0, r3
 8000dd6:	e7a5      	b.n	8000d24 <menu_vars+0xe8>
	case 47: 	menu_vars_var1=&sampler.end_LSB ;break;
 8000dd8:	484d      	ldr	r0, [pc, #308]	; (8000f10 <menu_vars+0x2d4>)
 8000dda:	e7a3      	b.n	8000d24 <menu_vars+0xe8>
	case 46: 	menu_vars_var1=&sampler.end_MSB ;break;
 8000ddc:	484d      	ldr	r0, [pc, #308]	; (8000f14 <menu_vars+0x2d8>)
 8000dde:	e7a1      	b.n	8000d24 <menu_vars+0xe8>
	case 45: 	menu_vars_var1=&sampler.RAM_offset ;break;
 8000de0:	484d      	ldr	r0, [pc, #308]	; (8000f18 <menu_vars+0x2dc>)
 8000de2:	e79f      	b.n	8000d24 <menu_vars+0xe8>
	case 44: 	menu_vars_var1=&sampler.offset2[var_index] ;break;
 8000de4:	4b4d      	ldr	r3, [pc, #308]	; (8000f1c <menu_vars+0x2e0>)
 8000de6:	4418      	add	r0, r3
 8000de8:	e79c      	b.n	8000d24 <menu_vars+0xe8>
	case 43:     menu_vars_var1= &LFO_slave1[var_index].offset    ; break;
 8000dea:	4b4d      	ldr	r3, [pc, #308]	; (8000f20 <menu_vars+0x2e4>)
 8000dec:	2206      	movs	r2, #6
 8000dee:	fb02 3000 	mla	r0, r2, r0, r3
 8000df2:	3003      	adds	r0, #3
 8000df4:	e796      	b.n	8000d24 <menu_vars+0xe8>
	case 42:     menu_vars_var1= &LFO_slave1[var_index].delay    ; break;
 8000df6:	4b4a      	ldr	r3, [pc, #296]	; (8000f20 <menu_vars+0x2e4>)
 8000df8:	2206      	movs	r2, #6
 8000dfa:	fb02 3000 	mla	r0, r2, r0, r3
 8000dfe:	3004      	adds	r0, #4
 8000e00:	e790      	b.n	8000d24 <menu_vars+0xe8>
	case 41:     menu_vars_var1= &LFO_slave1[var_index].depth    ; break;
 8000e02:	4b47      	ldr	r3, [pc, #284]	; (8000f20 <menu_vars+0x2e4>)
 8000e04:	2206      	movs	r2, #6
 8000e06:	fb02 3000 	mla	r0, r2, r0, r3
 8000e0a:	3001      	adds	r0, #1
 8000e0c:	e78a      	b.n	8000d24 <menu_vars+0xe8>
	case 40:     menu_vars_var1= &LFO_slave1[var_index].rate   ; break;
 8000e0e:	4b44      	ldr	r3, [pc, #272]	; (8000f20 <menu_vars+0x2e4>)
 8000e10:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000e14:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8000e18:	e784      	b.n	8000d24 <menu_vars+0xe8>
	case 39: 	menu_vars_var1=&patch[var_index].in_offset ;break;
 8000e1a:	4b42      	ldr	r3, [pc, #264]	; (8000f24 <menu_vars+0x2e8>)
 8000e1c:	222c      	movs	r2, #44	; 0x2c
 8000e1e:	fb02 3000 	mla	r0, r2, r0, r3
 8000e22:	3005      	adds	r0, #5
 8000e24:	e77e      	b.n	8000d24 <menu_vars+0xe8>
	case 38: 	menu_vars_var1=&patch[var_index].in_mix ;break;
 8000e26:	4b3f      	ldr	r3, [pc, #252]	; (8000f24 <menu_vars+0x2e8>)
 8000e28:	222c      	movs	r2, #44	; 0x2c
 8000e2a:	fb02 3000 	mla	r0, r2, r0, r3
 8000e2e:	3004      	adds	r0, #4
 8000e30:	e778      	b.n	8000d24 <menu_vars+0xe8>
	case 37: 	menu_vars_var1=&patch[var_index].input2 ;break;
 8000e32:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <menu_vars+0x2e8>)
 8000e34:	222c      	movs	r2, #44	; 0x2c
 8000e36:	fb02 3000 	mla	r0, r2, r0, r3
 8000e3a:	3003      	adds	r0, #3
 8000e3c:	e772      	b.n	8000d24 <menu_vars+0xe8>
	case 36: 	menu_vars_var1=&patch[var_index].input1 ;break;
 8000e3e:	4a39      	ldr	r2, [pc, #228]	; (8000f24 <menu_vars+0x2e8>)
 8000e40:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8000e44:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000e48:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8000e4c:	e76a      	b.n	8000d24 <menu_vars+0xe8>
	case 35:     menu_vars_var1= &patch[var_index].target_index    ; break;     // select note
 8000e4e:	4b35      	ldr	r3, [pc, #212]	; (8000f24 <menu_vars+0x2e8>)
 8000e50:	222c      	movs	r2, #44	; 0x2c
 8000e52:	fb02 3000 	mla	r0, r2, r0, r3
 8000e56:	3002      	adds	r0, #2
 8000e58:	e764      	b.n	8000d24 <menu_vars+0xe8>
	case 34: 	menu_vars_var1=&filter[var_index].poles ;break;
 8000e5a:	4b33      	ldr	r3, [pc, #204]	; (8000f28 <menu_vars+0x2ec>)
 8000e5c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e60:	3005      	adds	r0, #5
 8000e62:	e75f      	b.n	8000d24 <menu_vars+0xe8>
	case 33: 	menu_vars_var1=&filter[var_index].out_mix ;break;
 8000e64:	4b30      	ldr	r3, [pc, #192]	; (8000f28 <menu_vars+0x2ec>)
 8000e66:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e6a:	3006      	adds	r0, #6
 8000e6c:	e75a      	b.n	8000d24 <menu_vars+0xe8>
	case 32: 	menu_vars_var1=&filter[var_index].feedback ;break;
 8000e6e:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <menu_vars+0x2ec>)
 8000e70:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e74:	3007      	adds	r0, #7
 8000e76:	e755      	b.n	8000d24 <menu_vars+0xe8>
	case 31: 	menu_vars_var1=&filter[var_index].level;break;
 8000e78:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <menu_vars+0x2ec>)
 8000e7a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e7e:	3004      	adds	r0, #4
 8000e80:	e750      	b.n	8000d24 <menu_vars+0xe8>
	case 30: 	menu_vars_var1=&filter[var_index].q_level  ;break;
 8000e82:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <menu_vars+0x2ec>)
 8000e84:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e88:	3003      	adds	r0, #3
 8000e8a:	e74b      	b.n	8000d24 <menu_vars+0xe8>
	case 29: 	menu_vars_var1=&filter[var_index].resonance ;break;
 8000e8c:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <menu_vars+0x2ec>)
 8000e8e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e92:	3002      	adds	r0, #2
 8000e94:	e746      	b.n	8000d24 <menu_vars+0xe8>
	case 28: 	menu_vars_var1=&filter[var_index].cutoff_2 ;break;  // fine tune
 8000e96:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <menu_vars+0x2ec>)
 8000e98:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e9c:	3001      	adds	r0, #1
 8000e9e:	e741      	b.n	8000d24 <menu_vars+0xe8>
	case 27: 	menu_vars_var1=&filter[var_index].cutoff_1 ;break;
 8000ea0:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <menu_vars+0x2ec>)
 8000ea2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000ea6:	e73d      	b.n	8000d24 <menu_vars+0xe8>
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 8000ea8:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <menu_vars+0x2f0>)
 8000eaa:	4418      	add	r0, r3
 8000eac:	e73a      	b.n	8000d24 <menu_vars+0xe8>
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000eae:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <menu_vars+0x2f4>)
 8000eb0:	4418      	add	r0, r3
 8000eb2:	e737      	b.n	8000d24 <menu_vars+0xe8>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000eb4:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <menu_vars+0x2f8>)
 8000eb6:	4418      	add	r0, r3
 8000eb8:	e734      	b.n	8000d24 <menu_vars+0xe8>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000eba:	481f      	ldr	r0, [pc, #124]	; (8000f38 <menu_vars+0x2fc>)
 8000ebc:	e732      	b.n	8000d24 <menu_vars+0xe8>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <menu_vars+0x2a4>)
 8000ec0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8000ec4:	3008      	adds	r0, #8
 8000ec6:	e72d      	b.n	8000d24 <menu_vars+0xe8>
 8000ec8:	20008b40 	.word	0x20008b40
 8000ecc:	0800a124 	.word	0x0800a124
 8000ed0:	2000e9bc 	.word	0x2000e9bc
 8000ed4:	2000b130 	.word	0x2000b130
 8000ed8:	20008e16 	.word	0x20008e16
 8000edc:	20008e06 	.word	0x20008e06
 8000ee0:	20008c60 	.word	0x20008c60
 8000ee4:	20008df8 	.word	0x20008df8
 8000ee8:	20008df2 	.word	0x20008df2
 8000eec:	20008db8 	.word	0x20008db8
 8000ef0:	20008dec 	.word	0x20008dec
 8000ef4:	20008deb 	.word	0x20008deb
 8000ef8:	20008dea 	.word	0x20008dea
 8000efc:	20008de9 	.word	0x20008de9
 8000f00:	20008de8 	.word	0x20008de8
 8000f04:	200090ac 	.word	0x200090ac
 8000f08:	20009400 	.word	0x20009400
 8000f0c:	20008db0 	.word	0x20008db0
 8000f10:	20008df1 	.word	0x20008df1
 8000f14:	20008df0 	.word	0x20008df0
 8000f18:	20008ded 	.word	0x20008ded
 8000f1c:	20008dc0 	.word	0x20008dc0
 8000f20:	200093b8 	.word	0x200093b8
 8000f24:	2000ee20 	.word	0x2000ee20
 8000f28:	20008b20 	.word	0x20008b20
 8000f2c:	200132f4 	.word	0x200132f4
 8000f30:	200132e3 	.word	0x200132e3
 8000f34:	200132d2 	.word	0x200132d2
 8000f38:	200132d1 	.word	0x200132d1
 8000f3c:	2000d764 	.word	0x2000d764
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 8000f40:	4b2f      	ldr	r3, [pc, #188]	; (8001000 <menu_vars+0x3c4>)
 8000f42:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8000f46:	3007      	adds	r0, #7
 8000f48:	e6ec      	b.n	8000d24 <menu_vars+0xe8>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <menu_vars+0x3c4>)
 8000f4c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8000f50:	3006      	adds	r0, #6
 8000f52:	e6e7      	b.n	8000d24 <menu_vars+0xe8>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000f54:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <menu_vars+0x3c4>)
 8000f56:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8000f5a:	3005      	adds	r0, #5
 8000f5c:	e6e2      	b.n	8000d24 <menu_vars+0xe8>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000f5e:	4b28      	ldr	r3, [pc, #160]	; (8001000 <menu_vars+0x3c4>)
 8000f60:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8000f64:	3004      	adds	r0, #4
 8000f66:	e6dd      	b.n	8000d24 <menu_vars+0xe8>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000f68:	4b25      	ldr	r3, [pc, #148]	; (8001000 <menu_vars+0x3c4>)
 8000f6a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8000f6e:	3003      	adds	r0, #3
 8000f70:	e6d8      	b.n	8000d24 <menu_vars+0xe8>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000f72:	4b23      	ldr	r3, [pc, #140]	; (8001000 <menu_vars+0x3c4>)
 8000f74:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8000f78:	3002      	adds	r0, #2
 8000f7a:	e6d3      	b.n	8000d24 <menu_vars+0xe8>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000f7c:	4b20      	ldr	r3, [pc, #128]	; (8001000 <menu_vars+0x3c4>)
 8000f7e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8000f82:	3001      	adds	r0, #1
 8000f84:	e6ce      	b.n	8000d24 <menu_vars+0xe8>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000f86:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <menu_vars+0x3c4>)
 8000f88:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8000f8c:	e6ca      	b.n	8000d24 <menu_vars+0xe8>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <menu_vars+0x3c8>)
 8000f90:	221e      	movs	r2, #30
 8000f92:	fb02 3000 	mla	r0, r2, r0, r3
 8000f96:	3003      	adds	r0, #3
 8000f98:	e6c4      	b.n	8000d24 <menu_vars+0xe8>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <menu_vars+0x3c8>)
 8000f9c:	221e      	movs	r2, #30
 8000f9e:	fb02 3000 	mla	r0, r2, r0, r3
 8000fa2:	3002      	adds	r0, #2
 8000fa4:	e6be      	b.n	8000d24 <menu_vars+0xe8>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <menu_vars+0x3c8>)
 8000fa8:	221e      	movs	r2, #30
 8000faa:	fb02 3000 	mla	r0, r2, r0, r3
 8000fae:	3001      	adds	r0, #1
 8000fb0:	e6b8      	b.n	8000d24 <menu_vars+0xe8>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <menu_vars+0x3c8>)
 8000fb4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8000fb8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8000fbc:	e6b2      	b.n	8000d24 <menu_vars+0xe8>
	case 5:     menu_vars_var1= &patch[var_index].target    ; break;  // velocity etc
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <menu_vars+0x3cc>)
 8000fc0:	222c      	movs	r2, #44	; 0x2c
 8000fc2:	fb02 3000 	mla	r0, r2, r0, r3
 8000fc6:	3001      	adds	r0, #1
 8000fc8:	e6ac      	b.n	8000d24 <menu_vars+0xe8>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <menu_vars+0x3d0>)
 8000fcc:	2244      	movs	r2, #68	; 0x44
 8000fce:	fb02 3000 	mla	r0, r2, r0, r3
 8000fd2:	3003      	adds	r0, #3
 8000fd4:	e6a6      	b.n	8000d24 <menu_vars+0xe8>
	case 3:     menu_vars_var1= &LFO[var_index].delay    ; break;
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <menu_vars+0x3d0>)
 8000fd8:	2244      	movs	r2, #68	; 0x44
 8000fda:	fb02 3000 	mla	r0, r2, r0, r3
 8000fde:	3004      	adds	r0, #4
 8000fe0:	e6a0      	b.n	8000d24 <menu_vars+0xe8>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <menu_vars+0x3d0>)
 8000fe4:	2244      	movs	r2, #68	; 0x44
 8000fe6:	fb02 3000 	mla	r0, r2, r0, r3
 8000fea:	3001      	adds	r0, #1
 8000fec:	e69a      	b.n	8000d24 <menu_vars+0xe8>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <menu_vars+0x3d0>)
 8000ff0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8000ff4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000ff8:	e694      	b.n	8000d24 <menu_vars+0xe8>
	switch(menu_countr){
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <menu_vars+0x3d4>)
 8000ffc:	e692      	b.n	8000d24 <menu_vars+0xe8>
 8000ffe:	bf00      	nop
 8001000:	20008c60 	.word	0x20008c60
 8001004:	20009014 	.word	0x20009014
 8001008:	2000ee20 	.word	0x2000ee20
 800100c:	20009110 	.word	0x20009110
 8001010:	200132d0 	.word	0x200132d0

08001014 <menu_parser>:





void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 8001014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	    char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
	    char menu_string2[8]="hhhhhhhh";
 8001018:	4b3c      	ldr	r3, [pc, #240]	; (800110c <menu_parser+0xf8>)
	    uint8_t string_counter=0;
    	    uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480

	    if (string_search>menu_searchsize) {                    //this is ok
 800101a:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8001128 <menu_parser+0x114>
	    char menu_string2[8]="hhhhhhhh";
 800101e:	e893 0003 	ldmia.w	r3, {r0, r1}
	    if (string_search>menu_searchsize) {                    //this is ok
 8001022:	f8b8 7000 	ldrh.w	r7, [r8]
void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 8001026:	b085      	sub	sp, #20
	    if (string_search>menu_searchsize) {                    //this is ok
 8001028:	f640 7383 	movw	r3, #3971	; 0xf83
	    char menu_string2[8]="hhhhhhhh";
 800102c:	ad02      	add	r5, sp, #8
	    if (string_search>menu_searchsize) {                    //this is ok
 800102e:	429f      	cmp	r7, r3
	    char menu_string2[8]="hhhhhhhh";
 8001030:	e885 0003 	stmia.w	r5, {r0, r1}
	    if (string_search>menu_searchsize) {                    //this is ok
 8001034:	d846      	bhi.n	80010c4 <menu_parser+0xb0>
		    return;    }    // check if bigger than search area
	    //if (menu_counter>240)  return;
	    memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 8001036:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 800112c <menu_parser+0x118>
 800103a:	4e35      	ldr	r6, [pc, #212]	; (8001110 <menu_parser+0xfc>)
 800103c:	f859 0007 	ldr.w	r0, [r9, r7]
 8001040:	eb09 0307 	add.w	r3, r9, r7
 8001044:	2400      	movs	r4, #0
 8001046:	6859      	ldr	r1, [r3, #4]
 8001048:	466b      	mov	r3, sp
 800104a:	c303      	stmia	r3!, {r0, r1}
	    ////////////////////////////
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 800104c:	e002      	b.n	8001054 <menu_parser+0x40>
 800104e:	3401      	adds	r4, #1
 8001050:	2c47      	cmp	r4, #71	; 0x47
 8001052:	d04a      	beq.n	80010ea <menu_parser+0xd6>

		    memcpy(menu_string2,menu_titles_final[string_counter],8);
 8001054:	f856 2b04 	ldr.w	r2, [r6], #4
 8001058:	6810      	ldr	r0, [r2, #0]
 800105a:	6851      	ldr	r1, [r2, #4]
 800105c:	462b      	mov	r3, r5
 800105e:	c303      	stmia	r3!, {r0, r1}
		    if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 8001060:	2208      	movs	r2, #8
 8001062:	4629      	mov	r1, r5
 8001064:	4668      	mov	r0, sp
 8001066:	f007 f9b1 	bl	80083cc <strncmp>
 800106a:	2800      	cmp	r0, #0
 800106c:	d1ef      	bne.n	800104e <menu_parser+0x3a>
		    {

			    if ((menu_counter>111 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 800106e:	4929      	ldr	r1, [pc, #164]	; (8001114 <menu_parser+0x100>)
 8001070:	880b      	ldrh	r3, [r1, #0]
 8001072:	f1a3 0270 	sub.w	r2, r3, #112	; 0x70
 8001076:	2a0f      	cmp	r2, #15
 8001078:	d927      	bls.n	80010ca <menu_parser+0xb6>
			    if((menu_counter>239)&&(menu_counter<256 )) menu_counter=menu_counter+16; // skip
 800107a:	f1a3 02f0 	sub.w	r2, r3, #240	; 0xf0
 800107e:	2a0f      	cmp	r2, #15
 8001080:	d825      	bhi.n	80010ce <menu_parser+0xba>
 8001082:	3310      	adds	r3, #16
 8001084:	b29b      	uxth	r3, r3
			    if((menu_counter>367)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
			    if((menu_counter>495)&&(menu_counter<512 )) menu_counter=menu_counter+16; // skip
 8001086:	f5a3 72f8 	sub.w	r2, r3, #496	; 0x1f0
 800108a:	2a0f      	cmp	r2, #15
 800108c:	d825      	bhi.n	80010da <menu_parser+0xc6>
 800108e:	3310      	adds	r3, #16
 8001090:	b29b      	uxth	r3, r3
			    if((menu_counter>623)&&(menu_counter<640 )) menu_counter=menu_counter+16; // skip
 8001092:	f3c3 0209 	ubfx	r2, r3, #0, #10

			    menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
    			    memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
        			    menu_title_count++;
			    menu_counter++;
 8001096:	3301      	adds	r3, #1
 8001098:	800b      	strh	r3, [r1, #0]
			    menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 800109a:	eb02 4404 	add.w	r4, r2, r4, lsl #16
    			    memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 800109e:	1ebb      	subs	r3, r7, #2
			    menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 80010a0:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <menu_parser+0x104>)
    			    memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 80010a2:	f839 5003 	ldrh.w	r5, [r9, r3]
			    menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 80010a6:	481d      	ldr	r0, [pc, #116]	; (800111c <menu_parser+0x108>)
 80010a8:	8813      	ldrh	r3, [r2, #0]
			    space_check=0;
 80010aa:	491d      	ldr	r1, [pc, #116]	; (8001120 <menu_parser+0x10c>)
			    menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 80010ac:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    			    memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 80010b0:	481c      	ldr	r0, [pc, #112]	; (8001124 <menu_parser+0x110>)
			    string_search=string_search+8;     // advance search position
 80010b2:	3708      	adds	r7, #8
    			    memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 80010b4:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
        			    menu_title_count++;
 80010b8:	3301      	adds	r3, #1
			    space_check=0;
 80010ba:	2000      	movs	r0, #0
			    string_search=string_search+8;     // advance search position
 80010bc:	f8a8 7000 	strh.w	r7, [r8]
        			    menu_title_count++;
 80010c0:	8013      	strh	r3, [r2, #0]
			    space_check=0;
 80010c2:	7008      	strb	r0, [r1, #0]
        if (space_check>1)  menu_counter++;   //this is ok
	    space_check++;  // count empty spaces or fill characters
	    string_search++;
	    return;

    }
 80010c4:	b005      	add	sp, #20
 80010c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			    if ((menu_counter>111 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 80010ca:	3310      	adds	r3, #16
 80010cc:	b29b      	uxth	r3, r3
			    if((menu_counter>367)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
 80010ce:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 80010d2:	2a0f      	cmp	r2, #15
 80010d4:	d8d7      	bhi.n	8001086 <menu_parser+0x72>
 80010d6:	3310      	adds	r3, #16
 80010d8:	b29b      	uxth	r3, r3
			    if((menu_counter>623)&&(menu_counter<640 )) menu_counter=menu_counter+16; // skip
 80010da:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 80010de:	2a0f      	cmp	r2, #15
 80010e0:	d8d7      	bhi.n	8001092 <menu_parser+0x7e>
 80010e2:	3310      	adds	r3, #16
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	461a      	mov	r2, r3
 80010e8:	e7d5      	b.n	8001096 <menu_parser+0x82>
        if (space_check>1)  menu_counter++;   //this is ok
 80010ea:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <menu_parser+0x10c>)
 80010ec:	7813      	ldrb	r3, [r2, #0]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d903      	bls.n	80010fa <menu_parser+0xe6>
 80010f2:	4808      	ldr	r0, [pc, #32]	; (8001114 <menu_parser+0x100>)
 80010f4:	8801      	ldrh	r1, [r0, #0]
 80010f6:	3101      	adds	r1, #1
 80010f8:	8001      	strh	r1, [r0, #0]
	    space_check++;  // count empty spaces or fill characters
 80010fa:	3301      	adds	r3, #1
	    string_search++;
 80010fc:	3701      	adds	r7, #1
	    space_check++;  // count empty spaces or fill characters
 80010fe:	7013      	strb	r3, [r2, #0]
	    string_search++;
 8001100:	f8a8 7000 	strh.w	r7, [r8]
    }
 8001104:	b005      	add	sp, #20
 8001106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800110a:	bf00      	nop
 800110c:	0800879c 	.word	0x0800879c
 8001110:	20008b44 	.word	0x20008b44
 8001114:	2000ddac 	.word	0x2000ddac
 8001118:	2000e1b0 	.word	0x2000e1b0
 800111c:	2000e1b4 	.word	0x2000e1b4
 8001120:	20013506 	.word	0x20013506
 8001124:	2000ddb0 	.word	0x2000ddb0
 8001128:	20014526 	.word	0x20014526
 800112c:	08008d54 	.word	0x08008d54

08001130 <patch_target_parse>:

void patch_target_parse(void){    // records ptr for target options , works ok
 8001130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001134:	4c54      	ldr	r4, [pc, #336]	; (8001288 <patch_target_parse+0x158>)

			switch(input_hold&3){     // lfo now , can add adsr later

						case 0:   output_hold=&LFO[input_hold>>2].out[0];break;
						case 1:   output_hold=&LFO[input_hold>>2].out_saw[0];break;
						case 2:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 8001136:	4e55      	ldr	r6, [pc, #340]	; (800128c <patch_target_parse+0x15c>)
 8001138:	f504 785c 	add.w	r8, r4, #880	; 0x370
			if (patch[counter].input1>=(menu_lookup_count))    patch[counter].input1=0;    // limit
 800113c:	2700      	movs	r7, #0
 800113e:	e015      	b.n	800116c <patch_target_parse+0x3c>
			//case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
			case 3:   output_hold2=&LFO_square[input_hold2>>2].out[0];break;
			}

			if (patch[counter].input1==41) output_hold=&adc_values[1];   // same format as lfo
			if (patch[counter].input1==42) output_hold=&adc_values[2]; // do this for other single values
 8001140:	2a2a      	cmp	r2, #42	; 0x2a
 8001142:	d07c      	beq.n	800123e <patch_target_parse+0x10e>
			if (patch[counter].input1==43) output_hold=&adc_values[0];
 8001144:	4d52      	ldr	r5, [pc, #328]	; (8001290 <patch_target_parse+0x160>)
 8001146:	2a2b      	cmp	r2, #43	; 0x2b
 8001148:	bf08      	it	eq
 800114a:	4629      	moveq	r1, r5
			if (patch[counter].input2==41) output_hold2=&adc_values[1];   // waiting on 8 values
 800114c:	2829      	cmp	r0, #41	; 0x29
 800114e:	d03c      	beq.n	80011ca <patch_target_parse+0x9a>
			if (patch[counter].input2==42) output_hold2=&adc_values[2]; // do this for other single values
 8001150:	282a      	cmp	r0, #42	; 0x2a
 8001152:	d072      	beq.n	800123a <patch_target_parse+0x10a>
			if (patch[counter].input2==43) output_hold2=&adc_values[0];
 8001154:	4a4e      	ldr	r2, [pc, #312]	; (8001290 <patch_target_parse+0x160>)
 8001156:	282b      	cmp	r0, #43	; 0x2b
 8001158:	bf08      	it	eq
 800115a:	4613      	moveq	r3, r2

			patch[counter].in1_ptr=output_hold;   // sets input pointer to first sample , default is lfo[0].out [0]
			patch[counter].in2_ptr=output_hold2;


			if (patch[counter].target) {  // test if above zero
 800115c:	7865      	ldrb	r5, [r4, #1]
			patch[counter].in2_ptr=output_hold2;
 800115e:	e9c4 1308 	strd	r1, r3, [r4, #32]
			if (patch[counter].target) {  // test if above zero
 8001162:	2d00      	cmp	r5, #0
 8001164:	d137      	bne.n	80011d6 <patch_target_parse+0xa6>
for (counter=0;counter<20;counter++){
 8001166:	342c      	adds	r4, #44	; 0x2c
 8001168:	4544      	cmp	r4, r8
 800116a:	d064      	beq.n	8001236 <patch_target_parse+0x106>
			uint8_t input_hold=patch[counter].input1;
 800116c:	7822      	ldrb	r2, [r4, #0]
			uint8_t input_hold2=patch[counter].input2;
 800116e:	78e5      	ldrb	r5, [r4, #3]
			uint8_t input_hold=patch[counter].input1;
 8001170:	4610      	mov	r0, r2
			if (patch[counter].input1>=(menu_lookup_count))    patch[counter].input1=0;    // limit
 8001172:	2a46      	cmp	r2, #70	; 0x46
			switch(input_hold&3){     // lfo now , can add adsr later
 8001174:	f000 0303 	and.w	r3, r0, #3
			if (patch[counter].input1>=(menu_lookup_count))    patch[counter].input1=0;    // limit
 8001178:	bf84      	itt	hi
 800117a:	7027      	strbhi	r7, [r4, #0]
 800117c:	2200      	movhi	r2, #0
			switch(input_hold&3){     // lfo now , can add adsr later
 800117e:	2b02      	cmp	r3, #2
 8001180:	d076      	beq.n	8001270 <patch_target_parse+0x140>
 8001182:	2b03      	cmp	r3, #3
 8001184:	d06d      	beq.n	8001262 <patch_target_parse+0x132>
						case 0:   output_hold=&LFO[input_hold>>2].out[0];break;
 8001186:	0881      	lsrs	r1, r0, #2
 8001188:	2044      	movs	r0, #68	; 0x44
 800118a:	fb00 6101 	mla	r1, r0, r1, r6
			switch(input_hold&3){     // lfo now , can add adsr later
 800118e:	2b01      	cmp	r3, #1
						case 0:   output_hold=&LFO[input_hold>>2].out[0];break;
 8001190:	bf14      	ite	ne
 8001192:	3106      	addne	r1, #6
						case 1:   output_hold=&LFO[input_hold>>2].out_saw[0];break;
 8001194:	311a      	addeq	r1, #26
			if (patch[counter].input2>=(menu_lookup_count))    patch[counter].input2=0;    // limit
 8001196:	2d46      	cmp	r5, #70	; 0x46
			switch(input_hold2&3){     // lfo now , can add adsr later
 8001198:	f005 0303 	and.w	r3, r5, #3
			if (patch[counter].input2>=(menu_lookup_count))    patch[counter].input2=0;    // limit
 800119c:	bf86      	itte	hi
 800119e:	70e7      	strbhi	r7, [r4, #3]
 80011a0:	2000      	movhi	r0, #0
 80011a2:	4628      	movls	r0, r5
			switch(input_hold2&3){     // lfo now , can add adsr later
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d056      	beq.n	8001256 <patch_target_parse+0x126>
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d04c      	beq.n	8001246 <patch_target_parse+0x116>
 80011ac:	2b01      	cmp	r3, #1
			case 0:   output_hold2=&LFO[input_hold2>>2].out[0];break;
 80011ae:	ea4f 0395 	mov.w	r3, r5, lsr #2
 80011b2:	f04f 0544 	mov.w	r5, #68	; 0x44
 80011b6:	fb05 6303 	mla	r3, r5, r3, r6
 80011ba:	bf14      	ite	ne
 80011bc:	3306      	addne	r3, #6
			case 1:   output_hold2=&LFO[input_hold2>>2].out_saw[0];break;
 80011be:	331a      	addeq	r3, #26
			if (patch[counter].input1==41) output_hold=&adc_values[1];   // same format as lfo
 80011c0:	2a29      	cmp	r2, #41	; 0x29
 80011c2:	d1bd      	bne.n	8001140 <patch_target_parse+0x10>
			if (patch[counter].input2==41) output_hold2=&adc_values[1];   // waiting on 8 values
 80011c4:	2829      	cmp	r0, #41	; 0x29
			if (patch[counter].input1==41) output_hold=&adc_values[1];   // same format as lfo
 80011c6:	4933      	ldr	r1, [pc, #204]	; (8001294 <patch_target_parse+0x164>)
			if (patch[counter].input2==41) output_hold2=&adc_values[1];   // waiting on 8 values
 80011c8:	d1c2      	bne.n	8001150 <patch_target_parse+0x20>
 80011ca:	4b32      	ldr	r3, [pc, #200]	; (8001294 <patch_target_parse+0x164>)
			if (patch[counter].target) {  // test if above zero
 80011cc:	7865      	ldrb	r5, [r4, #1]
			patch[counter].in2_ptr=output_hold2;
 80011ce:	e9c4 1308 	strd	r1, r3, [r4, #32]
			if (patch[counter].target) {  // test if above zero
 80011d2:	2d00      	cmp	r5, #0
 80011d4:	d0c7      	beq.n	8001166 <patch_target_parse+0x36>
				uint8_t target_input=patch[counter].target; // copy to avoid messed up pointer
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 80011d6:	2d46      	cmp	r5, #70	; 0x46
 80011d8:	d852      	bhi.n	8001280 <patch_target_parse+0x150>
 80011da:	492f      	ldr	r1, [pc, #188]	; (8001298 <patch_target_parse+0x168>)
 80011dc:	462b      	mov	r3, r5
					if (patch_skip_list[target_input]==1)  target_input++;
 80011de:	5d4a      	ldrb	r2, [r1, r5]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 80011e0:	3301      	adds	r3, #1
					if (patch_skip_list[target_input]==1)  target_input++;
 80011e2:	2a01      	cmp	r2, #1
 80011e4:	bf08      	it	eq
 80011e6:	3501      	addeq	r5, #1
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 80011e8:	b2db      	uxtb	r3, r3
					if (patch_skip_list[target_input]==1)  target_input++;
 80011ea:	bf08      	it	eq
 80011ec:	b2ed      	uxtbeq	r5, r5
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 80011ee:	2b47      	cmp	r3, #71	; 0x47
 80011f0:	d1f5      	bne.n	80011de <patch_target_parse+0xae>
				}  // test against list and skip option if on 1
				if (target_input>(menu_lookup_count-1)) target_input=menu_lookup_count-1;
 80011f2:	2d46      	cmp	r5, #70	; 0x46
 80011f4:	d842      	bhi.n	800127c <patch_target_parse+0x14c>
				if (target_input!=35)  {     // make target index is not selected
 80011f6:	2d23      	cmp	r5, #35	; 0x23
 80011f8:	d023      	beq.n	8001242 <patch_target_parse+0x112>
				if (target_input>(menu_lookup_count-1)) target_input=menu_lookup_count-1;
 80011fa:	462a      	mov	r2, r5
			patch[counter].target=target_input; // write back corrected value

			uint8_t target_index=patch[counter].target_index;
 80011fc:	78a3      	ldrb	r3, [r4, #2]
			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 80011fe:	4927      	ldr	r1, [pc, #156]	; (800129c <patch_target_parse+0x16c>)
			{	target_index=menu_vars_index_limit[target_index]; }
			patch[counter].target_index=target_index;
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 8001200:	4827      	ldr	r0, [pc, #156]	; (80012a0 <patch_target_parse+0x170>)
			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 8001202:	5cc9      	ldrb	r1, [r1, r3]
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 8001204:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
			patch[counter].target=target_input; // write back corrected value
 8001208:	7065      	strb	r5, [r4, #1]
			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 800120a:	4299      	cmp	r1, r3
 800120c:	bf28      	it	cs
 800120e:	4619      	movcs	r1, r3
			patch[counter].target_index=target_index;
 8001210:	70a1      	strb	r1, [r4, #2]
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 8001212:	f7ff fd13 	bl	8000c3c <menu_vars>
			if (target_out_ptr)           {patch[counter].out_ptr =target_out_ptr;     // write ptr
 8001216:	2800      	cmp	r0, #0
 8001218:	d0a5      	beq.n	8001166 <patch_target_parse+0x36>
			patch[counter].divider=LFO_vars_divider[menu_vars_ref];
 800121a:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <patch_target_parse+0x174>)
 800121c:	4a22      	ldr	r2, [pc, #136]	; (80012a8 <patch_target_parse+0x178>)
 800121e:	781b      	ldrb	r3, [r3, #0]
			patch[counter].limiter=menu_vars_limiter[menu_vars_ref]; }      // writes limiter value for particular patch , deosnt save
 8001220:	4922      	ldr	r1, [pc, #136]	; (80012ac <patch_target_parse+0x17c>)
			patch[counter].divider=LFO_vars_divider[menu_vars_ref];
 8001222:	5cd2      	ldrb	r2, [r2, r3]
			patch[counter].limiter=menu_vars_limiter[menu_vars_ref]; }      // writes limiter value for particular patch , deosnt save
 8001224:	5ccb      	ldrb	r3, [r1, r3]
			if (target_out_ptr)           {patch[counter].out_ptr =target_out_ptr;     // write ptr
 8001226:	61e0      	str	r0, [r4, #28]
			patch[counter].divider=LFO_vars_divider[menu_vars_ref];
 8001228:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
			patch[counter].limiter=menu_vars_limiter[menu_vars_ref]; }      // writes limiter value for particular patch , deosnt save
 800122c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
for (counter=0;counter<20;counter++){
 8001230:	342c      	adds	r4, #44	; 0x2c
 8001232:	4544      	cmp	r4, r8
 8001234:	d19a      	bne.n	800116c <patch_target_parse+0x3c>
				}
				else patch[counter].target=0;  // write back 0 if failed
			}
		}
	}
 8001236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (patch[counter].input2==42) output_hold2=&adc_values[2]; // do this for other single values
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <patch_target_parse+0x180>)
 800123c:	e78e      	b.n	800115c <patch_target_parse+0x2c>
			if (patch[counter].input1==42) output_hold=&adc_values[2]; // do this for other single values
 800123e:	491c      	ldr	r1, [pc, #112]	; (80012b0 <patch_target_parse+0x180>)
 8001240:	e784      	b.n	800114c <patch_target_parse+0x1c>
				else patch[counter].target=0;  // write back 0 if failed
 8001242:	7067      	strb	r7, [r4, #1]
 8001244:	e78f      	b.n	8001166 <patch_target_parse+0x36>
			case 3:   output_hold2=&LFO_square[input_hold2>>2].out[0];break;
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <patch_target_parse+0x184>)
 8001248:	08ad      	lsrs	r5, r5, #2
 800124a:	f04f 0c14 	mov.w	ip, #20
 800124e:	fb0c 3305 	mla	r3, ip, r5, r3
 8001252:	3304      	adds	r3, #4
 8001254:	e7b4      	b.n	80011c0 <patch_target_parse+0x90>
			case 2:   output_hold2=&LFO[input_hold2>>2].out_tri[0];break;
 8001256:	08ab      	lsrs	r3, r5, #2
 8001258:	2544      	movs	r5, #68	; 0x44
 800125a:	fb05 6303 	mla	r3, r5, r3, r6
 800125e:	332e      	adds	r3, #46	; 0x2e
 8001260:	e7ae      	b.n	80011c0 <patch_target_parse+0x90>
						case 3:   output_hold=&LFO_square[input_hold>>2].out[0];break;
 8001262:	4914      	ldr	r1, [pc, #80]	; (80012b4 <patch_target_parse+0x184>)
 8001264:	0880      	lsrs	r0, r0, #2
 8001266:	2314      	movs	r3, #20
 8001268:	fb03 1000 	mla	r0, r3, r0, r1
 800126c:	1d01      	adds	r1, r0, #4
 800126e:	e792      	b.n	8001196 <patch_target_parse+0x66>
						case 2:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 8001270:	0881      	lsrs	r1, r0, #2
 8001272:	2044      	movs	r0, #68	; 0x44
 8001274:	fb00 6101 	mla	r1, r0, r1, r6
 8001278:	312e      	adds	r1, #46	; 0x2e
 800127a:	e78c      	b.n	8001196 <patch_target_parse+0x66>
 800127c:	2546      	movs	r5, #70	; 0x46
 800127e:	e7bc      	b.n	80011fa <patch_target_parse+0xca>
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 8001280:	2246      	movs	r2, #70	; 0x46
				if (target_input>(menu_lookup_count-1)) target_input=menu_lookup_count-1;
 8001282:	4615      	mov	r5, r2
 8001284:	e7ba      	b.n	80011fc <patch_target_parse+0xcc>
 8001286:	bf00      	nop
 8001288:	2000ee20 	.word	0x2000ee20
 800128c:	20009110 	.word	0x20009110
 8001290:	20008b10 	.word	0x20008b10
 8001294:	20008b12 	.word	0x20008b12
 8001298:	0800a1b4 	.word	0x0800a1b4
 800129c:	0800a124 	.word	0x0800a124
 80012a0:	20008b44 	.word	0x20008b44
 80012a4:	2000e9bc 	.word	0x2000e9bc
 80012a8:	200094c8 	.word	0x200094c8
 80012ac:	0800a16c 	.word	0x0800a16c
 80012b0:	20008b14 	.word	0x20008b14
 80012b4:	20009400 	.word	0x20009400

080012b8 <patch_target_replace>:

		}
	}*/
}

	void patch_target_replace(void){					// sttaight value replace  ,ok
 80012b8:	b530      	push	{r4, r5, lr}
	    uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 80012ba:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <patch_target_replace+0x70>)
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <patch_target_replace+0x74>)
 80012be:	f892 c000 	ldrb.w	ip, [r2]

			if ((patch[counter].input1>40) ||(patch[counter].input2>40) )input_loop_position=0;  else input_loop_position=loop_position;// hack


				input_mix=patch[counter].in_mix;
				output_hold	      =*(patch[counter].in1_ptr+(input_loop_position));   //write output here
 80012c2:	f00c 0e07 	and.w	lr, ip, #7
	    uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 80012c6:	46f4      	mov	ip, lr
	    for (counter=0;counter<20;counter++){    // single phase inc half sine only !!!
 80012c8:	f503 705c 	add.w	r0, r3, #880	; 0x370
				output_hold	      =*(patch[counter].in1_ptr+(input_loop_position));   //write output here
 80012cc:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
		    if (patch[counter].target) {         // check first for enable
 80012d0:	785a      	ldrb	r2, [r3, #1]
 80012d2:	b322      	cbz	r2, 800131e <patch_target_replace+0x66>
			if ((patch[counter].input1>40) ||(patch[counter].input2>40) )input_loop_position=0;  else input_loop_position=loop_position;// hack
 80012d4:	781a      	ldrb	r2, [r3, #0]
 80012d6:	2a28      	cmp	r2, #40	; 0x28
 80012d8:	f04f 0400 	mov.w	r4, #0
 80012dc:	d803      	bhi.n	80012e6 <patch_target_replace+0x2e>
 80012de:	78da      	ldrb	r2, [r3, #3]
 80012e0:	2a29      	cmp	r2, #41	; 0x29
 80012e2:	bf38      	it	cc
 80012e4:	4674      	movcc	r4, lr
				output_hold	      =*(patch[counter].in1_ptr+(input_loop_position));   //write output here
 80012e6:	e9d3 5208 	ldrd	r5, r2, [r3, #32]
				output_hold2	      =*(patch[counter].in2_ptr+(input_loop_position));   //write output here

				output_hold	=output_hold*(16-input_mix);   // bit messy  might just pre_calc
 80012ea:	7919      	ldrb	r1, [r3, #4]
				output_hold2	      =*(patch[counter].in2_ptr+(input_loop_position));   //write output here
 80012ec:	5b12      	ldrh	r2, [r2, r4]
				output_hold	      =*(patch[counter].in1_ptr+(input_loop_position));   //write output here
 80012ee:	5b2d      	ldrh	r5, [r5, r4]
				output_hold2	=output_hold2*input_mix;
 80012f0:	fb01 f202 	mul.w	r2, r1, r2
				output_hold	=output_hold*(16-input_mix);   // bit messy  might just pre_calc
 80012f4:	f1c1 0410 	rsb	r4, r1, #16



				patch[counter].output[loop_position]	=((output_hold+output_hold2)>>4);
 80012f8:	fb05 2204 	mla	r2, r5, r4, r2
 80012fc:	1d99      	adds	r1, r3, #6
 80012fe:	f3c2 120f 	ubfx	r2, r2, #4, #16
 8001302:	f821 201c 	strh.w	r2, [r1, ip, lsl #1]

			    uint8_t  *ptr_to_modify =patch[counter].out_ptr;       // select address , not always 8 bit ,ok
			    uint16_t lfo_out_temp=  (patch[counter].output [loop_position])>>8;  // 0-256,
			    uint8_t lfo_mod1=ptr_to_modify; //ok

			    uint8_t  var_replaced =  lfo_out_temp >>patch[counter].divider;   // grab lfo out *    data to be modfied
 8001306:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29

			    if (var_replaced>patch[counter].limiter) var_replaced=patch[counter].limiter;  // limit lfo output

			    *ptr_to_modify =var_replaced;   // replace original value,ok
 800130a:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
			    uint8_t  var_replaced =  lfo_out_temp >>patch[counter].divider;   // grab lfo out *    data to be modfied
 800130e:	0a12      	lsrs	r2, r2, #8
 8001310:	4122      	asrs	r2, r4
 8001312:	b2d2      	uxtb	r2, r2
			    *ptr_to_modify =var_replaced;   // replace original value,ok
 8001314:	428a      	cmp	r2, r1
 8001316:	bf28      	it	cs
 8001318:	460a      	movcs	r2, r1
 800131a:	69d9      	ldr	r1, [r3, #28]
 800131c:	700a      	strb	r2, [r1, #0]
	    for (counter=0;counter<20;counter++){    // single phase inc half sine only !!!
 800131e:	332c      	adds	r3, #44	; 0x2c
 8001320:	4298      	cmp	r0, r3
 8001322:	d1d5      	bne.n	80012d0 <patch_target_replace+0x18>
		    }
	    }
    }
 8001324:	bd30      	pop	{r4, r5, pc}
 8001326:	bf00      	nop
 8001328:	20012ec6 	.word	0x20012ec6
 800132c:	2000ee20 	.word	0x2000ee20

08001330 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable
	{
 8001330:	b538      	push	{r3, r4, r5, lr}
		if(TIM10==htim->Instance){     // send spi to display , ok
 8001332:	4a23      	ldr	r2, [pc, #140]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001334:	6803      	ldr	r3, [r0, #0]
 8001336:	4293      	cmp	r3, r2
 8001338:	d02e      	beq.n	8001398 <HAL_TIM_PeriodElapsedCallback+0x68>
		    HAL_SPI_Transmit_DMA(&hspi2,spi_tx_block+block_counter,54);
		    			if (block_counter<3456) block_counter=block_counter+54; else block_counter=0;

		}
		if(TIM3==htim->Instance)			//
 800133a:	4a22      	ldr	r2, [pc, #136]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d000      	beq.n	8001342 <HAL_TIM_PeriodElapsedCallback+0x12>
			if (sample_point>1022)    {bank_write=2;sample_point=0;} else sample_point++;

	TIM3->CCR1=play_hold ;  // keep readin sample storage
	TIM3->CCR2=play_hold2 ;   // load up counter on ch2
	}
	}
 8001340:	bd38      	pop	{r3, r4, r5, pc}
			play_hold=play_sample[sample_point<<1]; // this is 2
 8001342:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001344:	4a21      	ldr	r2, [pc, #132]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001346:	8819      	ldrh	r1, [r3, #0]
 8001348:	4c21      	ldr	r4, [pc, #132]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
		    time_proc++;
 800134a:	4d22      	ldr	r5, [pc, #136]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
			play_hold2=play_sample[(sample_point<<1)+1];
 800134c:	4822      	ldr	r0, [pc, #136]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
			play_hold=play_sample[sample_point<<1]; // this is 2
 800134e:	b289      	uxth	r1, r1
 8001350:	f832 1021 	ldrh.w	r1, [r2, r1, lsl #2]
 8001354:	8021      	strh	r1, [r4, #0]
			play_hold2=play_sample[(sample_point<<1)+1];
 8001356:	8819      	ldrh	r1, [r3, #0]
 8001358:	b289      	uxth	r1, r1
 800135a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
		    time_proc++;
 800135e:	8829      	ldrh	r1, [r5, #0]
			play_hold2=play_sample[(sample_point<<1)+1];
 8001360:	8852      	ldrh	r2, [r2, #2]
 8001362:	8002      	strh	r2, [r0, #0]
			if (sample_point>1022)    {bank_write=2;sample_point=0;} else sample_point++;
 8001364:	881a      	ldrh	r2, [r3, #0]
		    time_proc++;
 8001366:	3101      	adds	r1, #1
			if (sample_point>1022)    {bank_write=2;sample_point=0;} else sample_point++;
 8001368:	b292      	uxth	r2, r2
		    time_proc++;
 800136a:	8029      	strh	r1, [r5, #0]
			if (sample_point>1022)    {bank_write=2;sample_point=0;} else sample_point++;
 800136c:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8001370:	428a      	cmp	r2, r1
 8001372:	d80b      	bhi.n	800138c <HAL_TIM_PeriodElapsedCallback+0x5c>
 8001374:	881a      	ldrh	r2, [r3, #0]
 8001376:	3201      	adds	r2, #1
 8001378:	b292      	uxth	r2, r2
 800137a:	801a      	strh	r2, [r3, #0]
	TIM3->CCR1=play_hold ;  // keep readin sample storage
 800137c:	8823      	ldrh	r3, [r4, #0]
 800137e:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001380:	b29b      	uxth	r3, r3
 8001382:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3->CCR2=play_hold2 ;   // load up counter on ch2
 8001384:	8803      	ldrh	r3, [r0, #0]
 8001386:	b29b      	uxth	r3, r3
 8001388:	6393      	str	r3, [r2, #56]	; 0x38
	}
 800138a:	bd38      	pop	{r3, r4, r5, pc}
			if (sample_point>1022)    {bank_write=2;sample_point=0;} else sample_point++;
 800138c:	4a13      	ldr	r2, [pc, #76]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0xac>)
 800138e:	2102      	movs	r1, #2
 8001390:	8011      	strh	r1, [r2, #0]
 8001392:	2200      	movs	r2, #0
 8001394:	801a      	strh	r2, [r3, #0]
 8001396:	e7f1      	b.n	800137c <HAL_TIM_PeriodElapsedCallback+0x4c>
		    HAL_SPI_Transmit_DMA(&hspi2,spi_tx_block+block_counter,54);
 8001398:	4d11      	ldr	r5, [pc, #68]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800139a:	4912      	ldr	r1, [pc, #72]	; (80013e4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800139c:	882b      	ldrh	r3, [r5, #0]
 800139e:	2236      	movs	r2, #54	; 0x36
 80013a0:	4604      	mov	r4, r0
 80013a2:	4419      	add	r1, r3
 80013a4:	4810      	ldr	r0, [pc, #64]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80013a6:	f005 ff87 	bl	80072b8 <HAL_SPI_Transmit_DMA>
		    			if (block_counter<3456) block_counter=block_counter+54; else block_counter=0;
 80013aa:	882b      	ldrh	r3, [r5, #0]
 80013ac:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 80013b0:	bf34      	ite	cc
 80013b2:	f103 0236 	addcc.w	r2, r3, #54	; 0x36
 80013b6:	2200      	movcs	r2, #0
		if(TIM3==htim->Instance)			//
 80013b8:	6823      	ldr	r3, [r4, #0]
		    			if (block_counter<3456) block_counter=block_counter+54; else block_counter=0;
 80013ba:	802a      	strh	r2, [r5, #0]
 80013bc:	e7bd      	b.n	800133a <HAL_TIM_PeriodElapsedCallback+0xa>
 80013be:	bf00      	nop
 80013c0:	40014400 	.word	0x40014400
 80013c4:	40000400 	.word	0x40000400
 80013c8:	20012ebc 	.word	0x20012ebc
 80013cc:	20011b98 	.word	0x20011b98
 80013d0:	2000f394 	.word	0x2000f394
 80013d4:	20014738 	.word	0x20014738
 80013d8:	2000f396 	.word	0x2000f396
 80013dc:	20008b1a 	.word	0x20008b1a
 80013e0:	2000ad18 	.word	0x2000ad18
 80013e4:	20013510 	.word	0x20013510
 80013e8:	2000d5a8 	.word	0x2000d5a8

080013ec <analoginputloopb>:


    void analoginputloopb(void){  //works ,getting obsolete


	    menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 80013ec:	4921      	ldr	r1, [pc, #132]	; (8001474 <analoginputloopb+0x88>)
 80013ee:	4822      	ldr	r0, [pc, #136]	; (8001478 <analoginputloopb+0x8c>)
 80013f0:	888b      	ldrh	r3, [r1, #4]
 80013f2:	091b      	lsrs	r3, r3, #4
    void analoginputloopb(void){  //works ,getting obsolete
 80013f4:	b430      	push	{r4, r5}
	    menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 80013f6:	7003      	strb	r3, [r0, #0]
		//    menuSelectX=cursor_menu[2]&15;  // Y select inside page
        		    cursor_menu[1]=0;
   		    cursor_menu[2]=enc2_dir;

	    enc_temp=(((TIM2->CNT)+32767)>>1)&65535		;  // read counter tim2 ,divider ok
 80013f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013fc:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	4c1e      	ldr	r4, [pc, #120]	; (800147c <analoginputloopb+0x90>)
   		    cursor_menu[2]=enc2_dir;
 8001404:	4d1e      	ldr	r5, [pc, #120]	; (8001480 <analoginputloopb+0x94>)
        		    cursor_menu[1]=0;
 8001406:	2200      	movs	r2, #0
	    enc_temp=(((TIM2->CNT)+32767)>>1)&65535		;  // read counter tim2 ,divider ok
 8001408:	4403      	add	r3, r0
        		    cursor_menu[1]=0;
 800140a:	804a      	strh	r2, [r1, #2]
	 //   enc2_store[enc2_store_count]=(((TIM4->CNT)+32767)>>1)&65535;  // read counter tim4, noisy
	    enc2_temp=(((TIM4->CNT)+32767)>>1)&65535;
 800140c:	4a1d      	ldr	r2, [pc, #116]	; (8001484 <analoginputloopb+0x98>)
	    enc_temp=(((TIM2->CNT)+32767)>>1)&65535		;  // read counter tim2 ,divider ok
 800140e:	f3c3 034f 	ubfx	r3, r3, #1, #16
	    enc2_temp=(((TIM4->CNT)+32767)>>1)&65535;
 8001412:	6a52      	ldr	r2, [r2, #36]	; 0x24
	    enc_temp=(((TIM2->CNT)+32767)>>1)&65535		;  // read counter tim2 ,divider ok
 8001414:	8023      	strh	r3, [r4, #0]
	    enc2_store3=enc2_store2>>2;
	    enc2_temp=enc2_store3;
*/


	    if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;   //menu itme value change
 8001416:	4c1c      	ldr	r4, [pc, #112]	; (8001488 <analoginputloopb+0x9c>)
	    enc2_temp=(((TIM4->CNT)+32767)>>1)&65535;
 8001418:	4402      	add	r2, r0
	    if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;   //menu itme value change
 800141a:	f8b4 c000 	ldrh.w	ip, [r4]
	    enc2_temp=(((TIM4->CNT)+32767)>>1)&65535;
 800141e:	481b      	ldr	r0, [pc, #108]	; (800148c <analoginputloopb+0xa0>)
 8001420:	f3c2 024f 	ubfx	r2, r2, #1, #16
 8001424:	8002      	strh	r2, [r0, #0]
	    if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;   //menu itme value change
 8001426:	4563      	cmp	r3, ip
   		    cursor_menu[2]=enc2_dir;
 8001428:	8828      	ldrh	r0, [r5, #0]
 800142a:	8088      	strh	r0, [r1, #4]
	    if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;   //menu itme value change
 800142c:	4818      	ldr	r0, [pc, #96]	; (8001490 <analoginputloopb+0xa4>)
 800142e:	d815      	bhi.n	800145c <analoginputloopb+0x70>
	    if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 8001430:	f9b0 1000 	ldrsh.w	r1, [r0]
 8001434:	4563      	cmp	r3, ip
 8001436:	d202      	bcs.n	800143e <analoginputloopb+0x52>
 8001438:	3101      	adds	r1, #1
 800143a:	b209      	sxth	r1, r1
 800143c:	8001      	strh	r1, [r0, #0]


   //   if (enc2_temp>511) enc2_temp=511;  //mem overflow somewhere

      enc2_dir=65535-enc2_temp; //temp to try source data
 800143e:	ea6f 0c02 	mvn.w	ip, r2
 8001442:	f8a5 c000 	strh.w	ip, [r5]


      if (enc_dir>32760) enc_dir=0;
 8001446:	f647 75f8 	movw	r5, #32760	; 0x7ff8
 800144a:	42a9      	cmp	r1, r5
 800144c:	dd0b      	ble.n	8001466 <analoginputloopb+0x7a>
 800144e:	2100      	movs	r1, #0
 8001450:	8001      	strh	r1, [r0, #0]
			    if (enc_dir<0) enc_dir=16383;

			    enc_tempB=enc_temp;

					    enc2_tempB=enc2_temp; // to effective as counter not getting reset
 8001452:	4910      	ldr	r1, [pc, #64]	; (8001494 <analoginputloopb+0xa8>)
			    enc_tempB=enc_temp;
 8001454:	8023      	strh	r3, [r4, #0]
					    enc2_tempB=enc2_temp; // to effective as counter not getting reset
 8001456:	800a      	strh	r2, [r1, #0]


 //   potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count


    }
 8001458:	bc30      	pop	{r4, r5}
 800145a:	4770      	bx	lr
	    if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;   //menu itme value change
 800145c:	8801      	ldrh	r1, [r0, #0]
 800145e:	3901      	subs	r1, #1
 8001460:	b209      	sxth	r1, r1
 8001462:	8001      	strh	r1, [r0, #0]
 8001464:	e7e6      	b.n	8001434 <analoginputloopb+0x48>
			    if (enc_dir<0) enc_dir=16383;
 8001466:	2900      	cmp	r1, #0
 8001468:	bfbc      	itt	lt
 800146a:	f643 71ff 	movwlt	r1, #16383	; 0x3fff
 800146e:	8001      	strhlt	r1, [r0, #0]
 8001470:	e7ef      	b.n	8001452 <analoginputloopb+0x66>
 8001472:	bf00      	nop
 8001474:	2000ad20 	.word	0x2000ad20
 8001478:	2000ddaa 	.word	0x2000ddaa
 800147c:	2000c168 	.word	0x2000c168
 8001480:	2000c15c 	.word	0x2000c15c
 8001484:	40000800 	.word	0x40000800
 8001488:	2000c16a 	.word	0x2000c16a
 800148c:	2000c160 	.word	0x2000c160
 8001490:	2000c164 	.word	0x2000c164
 8001494:	2000c162 	.word	0x2000c162

08001498 <note_reset>:


void note_reset (void){          // reset deafult values before modulation , in case it gets left  with no modulator

	note[0].velocity=255;note[1].velocity=255;note[2].velocity=255;note[3].velocity=255;note[4].velocity=255;note[5].velocity=255;note[6].velocity=255
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <note_reset+0x60>)
																;note[0].detune=0;note[1].detune=0;note[2].detune=0;note[3].detune=0;note[4].detune=0;
	note[5].detune=0;note[6].detune=0;
	filter[0].cutoff_1=0;filter[1].cutoff_1=0;filter[2].cutoff_1=0;filter[4].cutoff_1=0;
 800149a:	4918      	ldr	r1, [pc, #96]	; (80014fc <note_reset+0x64>)
																;note[0].detune=0;note[1].detune=0;note[2].detune=0;note[3].detune=0;note[4].detune=0;
 800149c:	2200      	movs	r2, #0
	note[0].velocity=255;note[1].velocity=255;note[2].velocity=255;note[3].velocity=255;note[4].velocity=255;note[5].velocity=255;note[6].velocity=255
 800149e:	20ff      	movs	r0, #255	; 0xff
	filter[0].resonance=0;filter[1].resonance=0;filter[2].resonance=0;filter[3].resonance=0;
	note[0].position=1;note[1].position=1;note[2].position=1;note[3].position=1;
 80014a0:	f04f 0c01 	mov.w	ip, #1
	note[0].velocity=255;note[1].velocity=255;note[2].velocity=255;note[3].velocity=255;note[4].velocity=255;note[5].velocity=255;note[6].velocity=255
 80014a4:	71d8      	strb	r0, [r3, #7]
 80014a6:	75d8      	strb	r0, [r3, #23]
 80014a8:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
 80014ac:	f883 0037 	strb.w	r0, [r3, #55]	; 0x37
 80014b0:	f883 0047 	strb.w	r0, [r3, #71]	; 0x47
 80014b4:	f883 0057 	strb.w	r0, [r3, #87]	; 0x57
 80014b8:	f883 0067 	strb.w	r0, [r3, #103]	; 0x67
																;note[0].detune=0;note[1].detune=0;note[2].detune=0;note[3].detune=0;note[4].detune=0;
 80014bc:	721a      	strb	r2, [r3, #8]
 80014be:	761a      	strb	r2, [r3, #24]
 80014c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80014c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80014c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	note[5].detune=0;note[6].detune=0;
 80014cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80014d0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	filter[0].cutoff_1=0;filter[1].cutoff_1=0;filter[2].cutoff_1=0;filter[4].cutoff_1=0;
 80014d4:	700a      	strb	r2, [r1, #0]
 80014d6:	f881 2020 	strb.w	r2, [r1, #32]
 80014da:	720a      	strb	r2, [r1, #8]
 80014dc:	740a      	strb	r2, [r1, #16]
	filter[0].resonance=0;filter[1].resonance=0;filter[2].resonance=0;filter[3].resonance=0;
 80014de:	708a      	strb	r2, [r1, #2]
 80014e0:	728a      	strb	r2, [r1, #10]
 80014e2:	748a      	strb	r2, [r1, #18]
 80014e4:	768a      	strb	r2, [r1, #26]
	note[0].position=1;note[1].position=1;note[2].position=1;note[3].position=1;
 80014e6:	f883 c004 	strb.w	ip, [r3, #4]
 80014ea:	f883 c014 	strb.w	ip, [r3, #20]
 80014ee:	f883 c024 	strb.w	ip, [r3, #36]	; 0x24
 80014f2:	f883 c034 	strb.w	ip, [r3, #52]	; 0x34
}
 80014f6:	4770      	bx	lr
 80014f8:	20008c60 	.word	0x20008c60
 80014fc:	20008b20 	.word	0x20008b20

08001500 <patch_lists>:
}

void patch_lists(void){   //   ok
    uint8_t  list_counter;
    uint8_t list_counter2=0;
    for (list_counter=0;list_counter<20;list_counter++){
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <patch_lists+0x3c>)
void patch_lists(void){   //   ok
 8001502:	b530      	push	{r4, r5, lr}

	if ((patch[list_counter].input1&3)== 3   )    { LFO_sqr_list[list_counter2]   =  (patch[list_counter].target_index&7)+48;   // only writes sqr related  to list ,others left off
 8001504:	4d0e      	ldr	r5, [pc, #56]	; (8001540 <patch_lists+0x40>)
	sqr_target_list[list_counter2] =  (patch[list_counter].target);   //just
 8001506:	4c0f      	ldr	r4, [pc, #60]	; (8001544 <patch_lists+0x44>)
 8001508:	f503 705c 	add.w	r0, r3, #880	; 0x370
    uint8_t list_counter2=0;
 800150c:	2100      	movs	r1, #0
	if ((patch[list_counter].input1&3)== 3   )    { LFO_sqr_list[list_counter2]   =  (patch[list_counter].target_index&7)+48;   // only writes sqr related  to list ,others left off
 800150e:	781a      	ldrb	r2, [r3, #0]
 8001510:	f002 0203 	and.w	r2, r2, #3
 8001514:	2a03      	cmp	r2, #3
 8001516:	d10c      	bne.n	8001532 <patch_lists+0x32>
 8001518:	789a      	ldrb	r2, [r3, #2]
	sqr_target_list[list_counter2] =  (patch[list_counter].target);   //just
 800151a:	f893 e001 	ldrb.w	lr, [r3, #1]
 800151e:	f804 e001 	strb.w	lr, [r4, r1]
	if ((patch[list_counter].input1&3)== 3   )    { LFO_sqr_list[list_counter2]   =  (patch[list_counter].target_index&7)+48;   // only writes sqr related  to list ,others left off
 8001522:	f002 0207 	and.w	r2, r2, #7
 8001526:	3230      	adds	r2, #48	; 0x30
	list_counter2++;
 8001528:	f101 0c01 	add.w	ip, r1, #1
	if ((patch[list_counter].input1&3)== 3   )    { LFO_sqr_list[list_counter2]   =  (patch[list_counter].target_index&7)+48;   // only writes sqr related  to list ,others left off
 800152c:	546a      	strb	r2, [r5, r1]
	list_counter2++;
 800152e:	fa5f f18c 	uxtb.w	r1, ip
    for (list_counter=0;list_counter<20;list_counter++){
 8001532:	332c      	adds	r3, #44	; 0x2c
 8001534:	4283      	cmp	r3, r0
 8001536:	d1ea      	bne.n	800150e <patch_lists+0xe>

    }



}
 8001538:	bd30      	pop	{r4, r5, pc}
 800153a:	bf00      	nop
 800153c:	2000ee20 	.word	0x2000ee20
 8001540:	200093f4 	.word	0x200093f4
 8001544:	20014510 	.word	0x20014510

08001548 <LFO_square_one_pulse>:
    *(return_array + 2) = sine_tuned;
    return (sine_tempA);   // add back to start value -20k-20k  or about 16bit

    }

void LFO_square_one_pulse(void){   // sends one pulse synced to seq.pos , rate= pulse width in notes , delay = start position
 8001548:	b510      	push	{r4, lr}
       // uint16_t  temp_pulse=0;
	uint8_t seqpos = seq.pos>>3 ;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <LFO_square_one_pulse+0x74>)
	    if  (pulse_low<4) 									 {seq_div=3;}
	    //pulse_high=(pulse_high*seq_div)>>3;   // this is the start


	    if (((seqpos&seq_div)<=pulse_low)  &&	((seqpos&seq_div)>=pulse_high))	LFO_square[lfo_c].out[sampling_position]=((LFO_square[lfo_c].depth))<<8;  // high
	    else LFO_square[lfo_c].out[sampling_position]=(LFO_square[lfo_c].offset)<<8;		//low
 800154c:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <LFO_square_one_pulse+0x78>)
	uint8_t seqpos = seq.pos>>3 ;
 800154e:	f893 c000 	ldrb.w	ip, [r3]
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <LFO_square_one_pulse+0x7c>)
	    else LFO_square[lfo_c].out[sampling_position]=(LFO_square[lfo_c].offset)<<8;		//low
 8001554:	7814      	ldrb	r4, [r2, #0]
	uint8_t seqpos = seq.pos>>3 ;
 8001556:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
	for (lfo_c=0;lfo_c<10;lfo_c++){
 800155a:	f103 0ec8 	add.w	lr, r3, #200	; 0xc8
	uint8_t seq_div=7;
 800155e:	2007      	movs	r0, #7
 8001560:	e015      	b.n	800158e <LFO_square_one_pulse+0x46>
	    if  (pulse_low<32) 								 {seq_div=31;}
 8001562:	2a1f      	cmp	r2, #31
 8001564:	d824      	bhi.n	80015b0 <LFO_square_one_pulse+0x68>
	    if  (pulse_low<16) 								{ seq_div=15;}
 8001566:	2a0f      	cmp	r2, #15
 8001568:	d826      	bhi.n	80015b8 <LFO_square_one_pulse+0x70>
	    if  (pulse_low<8) 									 {seq_div=7;}
 800156a:	2a07      	cmp	r2, #7
 800156c:	d822      	bhi.n	80015b4 <LFO_square_one_pulse+0x6c>
	    if  (pulse_low<4) 									 {seq_div=3;}
 800156e:	2a03      	cmp	r2, #3
 8001570:	bf8c      	ite	hi
 8001572:	2007      	movhi	r0, #7
 8001574:	2003      	movls	r0, #3
	    if (((seqpos&seq_div)<=pulse_low)  &&	((seqpos&seq_div)>=pulse_high))	LFO_square[lfo_c].out[sampling_position]=((LFO_square[lfo_c].depth))<<8;  // high
 8001576:	ea00 010c 	and.w	r1, r0, ip
 800157a:	4291      	cmp	r1, r2
 800157c:	d90c      	bls.n	8001598 <LFO_square_one_pulse+0x50>
	    else LFO_square[lfo_c].out[sampling_position]=(LFO_square[lfo_c].offset)<<8;		//low
 800157e:	7899      	ldrb	r1, [r3, #2]
 8001580:	1d1a      	adds	r2, r3, #4
	for (lfo_c=0;lfo_c<10;lfo_c++){
 8001582:	3314      	adds	r3, #20
	    else LFO_square[lfo_c].out[sampling_position]=(LFO_square[lfo_c].offset)<<8;		//low
 8001584:	0209      	lsls	r1, r1, #8
	for (lfo_c=0;lfo_c<10;lfo_c++){
 8001586:	4573      	cmp	r3, lr
	    else LFO_square[lfo_c].out[sampling_position]=(LFO_square[lfo_c].offset)<<8;		//low
 8001588:	f822 1014 	strh.w	r1, [r2, r4, lsl #1]
	for (lfo_c=0;lfo_c<10;lfo_c++){
 800158c:	d00f      	beq.n	80015ae <LFO_square_one_pulse+0x66>
	    pulse_low=LFO_square[lfo_c].rate;
 800158e:	781a      	ldrb	r2, [r3, #0]
	    if (pulse_low<64) 						 {seq_div=63;}  // This is the end
 8001590:	2a3f      	cmp	r2, #63	; 0x3f
 8001592:	d9e6      	bls.n	8001562 <LFO_square_one_pulse+0x1a>
	    if (((seqpos&seq_div)<=pulse_low)  &&	((seqpos&seq_div)>=pulse_high))	LFO_square[lfo_c].out[sampling_position]=((LFO_square[lfo_c].depth))<<8;  // high
 8001594:	ea0c 0100 	and.w	r1, ip, r0
 8001598:	78da      	ldrb	r2, [r3, #3]
 800159a:	428a      	cmp	r2, r1
 800159c:	d8ef      	bhi.n	800157e <LFO_square_one_pulse+0x36>
 800159e:	7859      	ldrb	r1, [r3, #1]
 80015a0:	1d1a      	adds	r2, r3, #4
	for (lfo_c=0;lfo_c<10;lfo_c++){
 80015a2:	3314      	adds	r3, #20
	    if (((seqpos&seq_div)<=pulse_low)  &&	((seqpos&seq_div)>=pulse_high))	LFO_square[lfo_c].out[sampling_position]=((LFO_square[lfo_c].depth))<<8;  // high
 80015a4:	0209      	lsls	r1, r1, #8
	for (lfo_c=0;lfo_c<10;lfo_c++){
 80015a6:	4573      	cmp	r3, lr
	    if (((seqpos&seq_div)<=pulse_low)  &&	((seqpos&seq_div)>=pulse_high))	LFO_square[lfo_c].out[sampling_position]=((LFO_square[lfo_c].depth))<<8;  // high
 80015a8:	f822 1014 	strh.w	r1, [r2, r4, lsl #1]
	for (lfo_c=0;lfo_c<10;lfo_c++){
 80015ac:	d1ef      	bne.n	800158e <LFO_square_one_pulse+0x46>

	}
    }
 80015ae:	bd10      	pop	{r4, pc}
	    if (pulse_low<64) 						 {seq_div=63;}  // This is the end
 80015b0:	203f      	movs	r0, #63	; 0x3f
 80015b2:	e7e0      	b.n	8001576 <LFO_square_one_pulse+0x2e>
	    if  (pulse_low<16) 								{ seq_div=15;}
 80015b4:	200f      	movs	r0, #15
 80015b6:	e7de      	b.n	8001576 <LFO_square_one_pulse+0x2e>
	    if  (pulse_low<32) 								 {seq_div=31;}
 80015b8:	201f      	movs	r0, #31
 80015ba:	e7dc      	b.n	8001576 <LFO_square_one_pulse+0x2e>
 80015bc:	200132d0 	.word	0x200132d0
 80015c0:	20012ec6 	.word	0x20012ec6
 80015c4:	20009400 	.word	0x20009400

080015c8 <LFO_source_synced>:



	}

void LFO_source_synced(void){     // lfo , ok , half phase
 80015c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015cc:	4e4e      	ldr	r6, [pc, #312]	; (8001708 <LFO_source_synced+0x140>)
 80015ce:	4f4f      	ldr	r7, [pc, #316]	; (800170c <LFO_source_synced+0x144>)
 80015d0:	ed2d 8b02 	vpush	{d8}
 80015d4:	4635      	mov	r5, r6

	 freq_temp_saw=(lfo_accu_temp+delay_value)&65535        ;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar

 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
			offset2=offset;
 		freq2_temp=(freq_temp+offset);
 80015d6:	eddf 8a4e 	vldr	s17, [pc, #312]	; 8001710 <LFO_source_synced+0x148>

		if (freq2_temp>65534)  freq2_temp=65535;
 80015da:	ed9f 8a4e 	vldr	s16, [pc, #312]	; 8001714 <LFO_source_synced+0x14c>
void LFO_source_synced(void){     // lfo , ok , half phase
 80015de:	2400      	movs	r4, #0
 80015e0:	e02f      	b.n	8001642 <LFO_source_synced+0x7a>
					//	lfo_accu_temp=lfo_accu_temp/6;
					freq_saw=((freq_temp_saw*LFO[lfo_c].depth)>>8)+offset2;   // 51 000  + offset

					if (freq_saw>65534)  freq_saw=65535;   // clip
				//	freq_saw=65535-freq_saw;
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 80015e2:	4a4d      	ldr	r2, [pc, #308]	; (8001718 <LFO_source_synced+0x150>)
 80015e4:	7812      	ldrb	r2, [r2, #0]
 80015e6:	eb04 1004 	add.w	r0, r4, r4, lsl #4
					freq_saw=((freq_temp_saw*LFO[lfo_c].depth)>>8)+offset2;   // 51 000  + offset
 80015ea:	fb0a fc01 	mul.w	ip, sl, r1
 80015ee:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 80015f2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;    // saw 16 bit
 80015f6:	45f4      	cmp	ip, lr
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 80015f8:	eb06 0b40 	add.w	fp, r6, r0, lsl #1
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;    // saw 16 bit
 80015fc:	bf28      	it	cs
 80015fe:	46f4      	movcs	ip, lr


				   if(freq_temp_saw<32768)   freq_tri=freq_temp_saw; else freq_tri=65536-freq_temp_saw;    // 0-32767
 8001600:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8001604:	46d6      	mov	lr, sl
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 8001606:	f8ab 9006 	strh.w	r9, [fp, #6]
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;    // saw 16 bit
 800160a:	f8ab c01a 	strh.w	ip, [fp, #26]
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 800160e:	ea4f 1004 	mov.w	r0, r4, lsl #4
				   if(freq_temp_saw<32768)   freq_tri=freq_temp_saw; else freq_tri=65536-freq_temp_saw;    // 0-32767
 8001612:	bf18      	it	ne
 8001614:	f5ca 3e80 	rsbne	lr, sl, #65536	; 0x10000
				   freq_tri=((freq_tri*LFO[lfo_c].depth)>>7)+offset2 ; // tri 16 bit
				//   freq_tri=((freq_tri*255)>>7)+offset2 ; // tri 16 bit
				   if (freq_tri>65534)  freq_tri=65535;   // clip
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 8001618:	4420      	add	r0, r4
				   freq_tri=((freq_tri*LFO[lfo_c].depth)>>7)+offset2 ; // tri 16 bit
 800161a:	fb0e f101 	mul.w	r1, lr, r1
 800161e:	eb03 13e1 	add.w	r3, r3, r1, asr #7
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 8001622:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8001626:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800162a:	4563      	cmp	r3, ip
 800162c:	eb06 0242 	add.w	r2, r6, r2, lsl #1
	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8001630:	f104 0401 	add.w	r4, r4, #1
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 8001634:	bfa8      	it	ge
 8001636:	4663      	movge	r3, ip
	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8001638:	2c0a      	cmp	r4, #10
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 800163a:	85d3      	strh	r3, [r2, #46]	; 0x2e
	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 800163c:	f105 0544 	add.w	r5, r5, #68	; 0x44
 8001640:	d05a      	beq.n	80016f8 <LFO_source_synced+0x130>
	lfo_accu_temp=next_isr*lfo_table[rate];   // calculate from next_isr, do a lut here  , lfo table neds to be min 16
 8001642:	782b      	ldrb	r3, [r5, #0]
 8001644:	4a35      	ldr	r2, [pc, #212]	; (800171c <LFO_source_synced+0x154>)
	 delay_value=8192*(LFO[lfo_c].delay&7);  //not ok
 8001646:	f895 8004 	ldrb.w	r8, [r5, #4]
	lfo_accu_temp=next_isr*lfo_table[rate];   // calculate from next_isr, do a lut here  , lfo table neds to be min 16
 800164a:	f832 9013 	ldrh.w	r9, [r2, r3, lsl #1]
 800164e:	883b      	ldrh	r3, [r7, #0]
 8001650:	fb03 f909 	mul.w	r9, r3, r9
	 freq_temp=lfo_accu_temp*0.0000479376;
 8001654:	4648      	mov	r0, r9
 8001656:	f7ff f833 	bl	80006c0 <__aeabi_ui2d>
 800165a:	a329      	add	r3, pc, #164	; (adr r3, 8001700 <LFO_source_synced+0x138>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7fe fdc2 	bl	80001e8 <__aeabi_dmul>
 8001664:	f7ff f8c6 	bl	80007f4 <__aeabi_d2f>
	 freq2_temp=arm_sin_f32(freq_temp);   // +10 cycles
 8001668:	ee00 0a10 	vmov	s0, r0
 800166c:	f006 fe26 	bl	80082bc <arm_sin_f32>
	freq_temp=LFO[lfo_c].depth;
 8001670:	7869      	ldrb	r1, [r5, #1]
 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
 8001672:	78eb      	ldrb	r3, [r5, #3]
	freq_temp=LFO[lfo_c].depth;
 8001674:	ee07 1a90 	vmov	s15, r1
 8001678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
 800167c:	021b      	lsls	r3, r3, #8
	 freq_temp= (freq2_temp*freq_temp)*256;
 800167e:	ee27 0a80 	vmul.f32	s0, s15, s0
 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	 delay_value=8192*(LFO[lfo_c].delay&7);  //not ok
 800168a:	f008 0807 	and.w	r8, r8, #7
 		freq2_temp=(freq_temp+offset);
 800168e:	eeb0 7a67 	vmov.f32	s14, s15
 8001692:	eea0 7a28 	vfma.f32	s14, s0, s17
	 delay_value=8192*(LFO[lfo_c].delay&7);  //not ok
 8001696:	ea4f 3848 	mov.w	r8, r8, lsl #13
	 freq_temp_saw=(lfo_accu_temp+delay_value)&65535        ;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 800169a:	44c8      	add	r8, r9
			offset2=offset;
 800169c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		if (freq2_temp>65534)  freq2_temp=65535;
 80016a0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80016a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			offset2=offset;
 80016a8:	ee17 3a90 	vmov	r3, s15
 80016ac:	f647 79ff 	movw	r9, #32767	; 0x7fff
	 freq_temp_saw=(lfo_accu_temp+delay_value)&65535        ;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 80016b0:	fa1f fa88 	uxth.w	sl, r8
		if (freq2_temp>65534)  freq2_temp=65535;
 80016b4:	dc05      	bgt.n	80016c2 <LFO_source_synced+0xfa>
						output_hold=freq2_temp;
 80016b6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 80016ba:	ee17 2a10 	vmov	r2, s14
 80016be:	fa1f f982 	uxth.w	r9, r2
				if (freq_temp_saw>65534)  freq_temp_saw=65535;
 80016c2:	f64f 7eff 	movw	lr, #65535	; 0xffff
 80016c6:	45f2      	cmp	sl, lr
 80016c8:	d18b      	bne.n	80015e2 <LFO_source_synced+0x1a>
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 80016ca:	4a13      	ldr	r2, [pc, #76]	; (8001718 <LFO_source_synced+0x150>)
					freq_saw=((freq_temp_saw*LFO[lfo_c].depth)>>8)+offset2;   // 51 000  + offset
 80016cc:	ebc1 4c01 	rsb	ip, r1, r1, lsl #16
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 80016d0:	7812      	ldrb	r2, [r2, #0]
					freq_saw=((freq_temp_saw*LFO[lfo_c].depth)>>8)+offset2;   // 51 000  + offset
 80016d2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 80016d6:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 80016da:	eb02 0040 	add.w	r0, r2, r0, lsl #1
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;    // saw 16 bit
 80016de:	45e2      	cmp	sl, ip
 80016e0:	bf28      	it	cs
 80016e2:	46e2      	movcs	sl, ip
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 80016e4:	eb06 0c40 	add.w	ip, r6, r0, lsl #1
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;    // saw 16 bit
 80016e8:	f04f 0e01 	mov.w	lr, #1
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 80016ec:	f8ac 9006 	strh.w	r9, [ip, #6]
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;    // saw 16 bit
 80016f0:	f8ac a01a 	strh.w	sl, [ip, #26]
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 80016f4:	0120      	lsls	r0, r4, #4
 80016f6:	e78f      	b.n	8001618 <LFO_source_synced+0x50>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch



	}
 80016f8:	ecbd 8b02 	vpop	{d8}
 80016fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001700:	64dc8498 	.word	0x64dc8498
 8001704:	3f092213 	.word	0x3f092213
 8001708:	20009110 	.word	0x20009110
 800170c:	2000e9ca 	.word	0x2000e9ca
 8001710:	43800000 	.word	0x43800000
 8001714:	477ffe00 	.word	0x477ffe00
 8001718:	20012ec6 	.word	0x20012ec6
 800171c:	2000db74 	.word	0x2000db74

08001720 <frq_point>:


void  frq_point(void){
 8001720:	b500      	push	{lr}

		float freq_temp;



		freq_temp=freq_pointer[0] [sampling_position]*65535;; // load up coeffs
 8001722:	4a1f      	ldr	r2, [pc, #124]	; (80017a0 <frq_point+0x80>)
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <frq_point+0x84>)
 8001726:	7812      	ldrb	r2, [r2, #0]
 8001728:	eddf 5a1f 	vldr	s11, [pc, #124]	; 80017a8 <frq_point+0x88>
 800172c:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 8001730:	ed9c 7a00 	vldr	s14, [ip]
			freq_point[0]=freq_temp;
			freq_temp=freq_pointer[1] [sampling_position]*65535;  // ok , array was too short
 8001734:	ed9c 6a09 	vldr	s12, [ip, #36]	; 0x24
			freq_point[2]=freq_temp;
			freq_temp=freq_pointer[2] [sampling_position]*65535;  // ok , array was too short
 8001738:	eddc 6a12 	vldr	s13, [ip, #72]	; 0x48
			freq_point[4]=freq_temp;
			freq_temp=freq_pointer[3] [sampling_position]*65535;  // ok , array was too short
 800173c:	eddc 7a1b 	vldr	s15, [ip, #108]	; 0x6c
			freq_point[0]=freq_temp;
 8001740:	4a1a      	ldr	r2, [pc, #104]	; (80017ac <frq_point+0x8c>)
		freq_temp=freq_pointer[0] [sampling_position]*65535;; // load up coeffs
 8001742:	ee27 7a25 	vmul.f32	s14, s14, s11
			freq_temp=freq_pointer[1] [sampling_position]*65535;  // ok , array was too short
 8001746:	ee26 6a25 	vmul.f32	s12, s12, s11
			freq_point[0]=freq_temp;
 800174a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
			freq_temp=freq_pointer[2] [sampling_position]*65535;  // ok , array was too short
 800174e:	ee66 6aa5 	vmul.f32	s13, s13, s11
			freq_temp=freq_pointer[3] [sampling_position]*65535;  // ok , array was too short
 8001752:	ee67 7aa5 	vmul.f32	s15, s15, s11
			freq_point[2]=freq_temp;
 8001756:	eebc 6ac6 	vcvt.u32.f32	s12, s12
			freq_point[0]=freq_temp;
 800175a:	ee17 3a10 	vmov	r3, s14
			freq_point[2]=freq_temp;
 800175e:	ee16 1a10 	vmov	r1, s12
			freq_point[0]=freq_temp;
 8001762:	b29b      	uxth	r3, r3
			freq_point[4]=freq_temp;
 8001764:	eefc 6ae6 	vcvt.u32.f32	s13, s13
			freq_point[6]=freq_temp;
 8001768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
			freq_point[0]=freq_temp;
 800176c:	8013      	strh	r3, [r2, #0]
	//		if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
		//	if (freq_point[4]>1) freq_point[4]=1; else if (freq_point[4]<0) freq_point[4]=0;// just in case
		//	if (freq_point[2]>1) freq_point[2]=1; else if (freq_point[2]<0) freq_point[2]=0;// just in case
		//	if (freq_point[6]>1) freq_point[6]=1; else if (freq_point[6]<0) freq_point[6]=0;// just in case

			freq_point[1]=65535-freq_point[0];
 800176e:	43db      	mvns	r3, r3
			freq_point[2]=freq_temp;
 8001770:	b288      	uxth	r0, r1
			freq_point[1]=65535-freq_point[0];
 8001772:	8053      	strh	r3, [r2, #2]
			freq_point[4]=freq_temp;
 8001774:	ee16 1a90 	vmov	r1, s13
			freq_point[6]=freq_temp;
 8001778:	ee17 3a90 	vmov	r3, s15
			freq_point[4]=freq_temp;
 800177c:	b289      	uxth	r1, r1
			freq_point[6]=freq_temp;
 800177e:	b29b      	uxth	r3, r3
			freq_point[3]=65535-freq_point[2];
 8001780:	ea6f 0e00 	mvn.w	lr, r0
		freq_point[5]=65535-freq_point[4];
 8001784:	ea6f 0c01 	mvn.w	ip, r1
			freq_point[6]=freq_temp;
 8001788:	8193      	strh	r3, [r2, #12]
			freq_point[7]=65535-freq_point[6];
 800178a:	43db      	mvns	r3, r3
			freq_point[2]=freq_temp;
 800178c:	8090      	strh	r0, [r2, #4]
			freq_point[4]=freq_temp;
 800178e:	8111      	strh	r1, [r2, #8]
			freq_point[3]=65535-freq_point[2];
 8001790:	f8a2 e006 	strh.w	lr, [r2, #6]
		freq_point[5]=65535-freq_point[4];
 8001794:	f8a2 c00a 	strh.w	ip, [r2, #10]
			freq_point[7]=65535-freq_point[6];
 8001798:	81d3      	strh	r3, [r2, #14]
		//	filter_res[0]=freq_point[0]*0.2;
		//	filter_res[1]=freq_point[1]*0.2;
		//	filter_res[2]=freq_point[2]*0.2;
		//	filter_res[3]=freq_point[3]*0.2;

}
 800179a:	f85d fb04 	ldr.w	pc, [sp], #4
 800179e:	bf00      	nop
 80017a0:	20012ec6 	.word	0x20012ec6
 80017a4:	2000ce18 	.word	0x2000ce18
 80017a8:	477fff00 	.word	0x477fff00
 80017ac:	2000ce08 	.word	0x2000ce08

080017b0 <ADSR_loop>:


	}


void ADSR_loop(void){
 80017b0:	b5f0      	push	{r4, r5, r6, r7, lr}
		uint8_t counter;
		uint8_t ok=1;
		uint8_t ADSR_out=0;
		uint8_t position=sampling_position;
 80017b2:	4b2a      	ldr	r3, [pc, #168]	; (800185c <ADSR_loop+0xac>)
 80017b4:	492a      	ldr	r1, [pc, #168]	; (8001860 <ADSR_loop+0xb0>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	482a      	ldr	r0, [pc, #168]	; (8001864 <ADSR_loop+0xb4>)
 80017ba:	460a      	mov	r2, r1
 80017bc:	f102 0e78 	add.w	lr, r2, #120	; 0x78
 80017c0:	eb01 0143 	add.w	r1, r1, r3, lsl #1
		//position=0;

		for (counter=0;counter<4;counter++){
		    ok=1;
	while(ok){	      // do one thing then exit
	    ADSR[counter].buffer[position]=0;
 80017c4:	f04f 0c00 	mov.w	ip, #0
      ADSR[counter].buffer[position]=ADSR[counter].release_data;break;
      }
      ok=0;
	}
	if ( ADSR[counter].buffer[position]<0)    ADSR[counter].buffer[position]=0;     // 0-127
	if ( ADSR[counter].buffer[position]>1023)    ADSR[counter].buffer[position]=1023;
 80017c8:	f240 35ff 	movw	r5, #1023	; 0x3ff
      if ( note[counter].position) {   ADSR[counter].attack_data=1000;     ADSR[counter].decay_data=1000;
 80017cc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	    ADSR[counter].buffer[position]=0;
 80017d0:	f8a1 c00e 	strh.w	ip, [r1, #14]
	    ADSR[counter].sustain_data=ADSR[counter].sustain<<4;
 80017d4:	7896      	ldrb	r6, [r2, #2]
      if ( note[counter].position) {   ADSR[counter].attack_data=1000;     ADSR[counter].decay_data=1000;
 80017d6:	7903      	ldrb	r3, [r0, #4]
	    ADSR[counter].sustain_data=ADSR[counter].sustain<<4;
 80017d8:	0136      	lsls	r6, r6, #4
 80017da:	8156      	strh	r6, [r2, #10]
      if ( note[counter].position) {   ADSR[counter].attack_data=1000;     ADSR[counter].decay_data=1000;
 80017dc:	b1eb      	cbz	r3, 800181a <ADSR_loop+0x6a>
 80017de:	8114      	strh	r4, [r2, #8]
      ADSR[counter].release_data= ADSR[counter].sustain_data;       note[counter].position=0; }
 80017e0:	8196      	strh	r6, [r2, #12]
 80017e2:	f880 c004 	strb.w	ip, [r0, #4]
 80017e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
      if (ADSR[counter].attack_data>0) {   ADSR[counter].attack_data=ADSR[counter].attack_data-(ADSR[counter].attack<<2);
 80017ea:	7816      	ldrb	r6, [r2, #0]
 80017ec:	eba3 0786 	sub.w	r7, r3, r6, lsl #2
    ADSR[counter].buffer[position]=1000-ADSR[counter].attack_data;break;
 80017f0:	ebc3 0386 	rsb	r3, r3, r6, lsl #2
 80017f4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80017f8:	b21b      	sxth	r3, r3
      if (ADSR[counter].attack_data>0) {   ADSR[counter].attack_data=ADSR[counter].attack_data-(ADSR[counter].attack<<2);
 80017fa:	80d7      	strh	r7, [r2, #6]
    ADSR[counter].buffer[position]=1000-ADSR[counter].attack_data;break;
 80017fc:	81cb      	strh	r3, [r1, #14]
	if ( ADSR[counter].buffer[position]<0)    ADSR[counter].buffer[position]=0;     // 0-127
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db1a      	blt.n	8001838 <ADSR_loop+0x88>
	if ( ADSR[counter].buffer[position]>1023)    ADSR[counter].buffer[position]=1023;
 8001802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001806:	bfa8      	it	ge
 8001808:	81cd      	strhge	r5, [r1, #14]
		for (counter=0;counter<4;counter++){
 800180a:	321e      	adds	r2, #30
 800180c:	4572      	cmp	r2, lr
 800180e:	f101 011e 	add.w	r1, r1, #30
 8001812:	f100 0010 	add.w	r0, r0, #16
 8001816:	d1db      	bne.n	80017d0 <ADSR_loop+0x20>
  }




}
 8001818:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (ADSR[counter].attack_data>0) {   ADSR[counter].attack_data=ADSR[counter].attack_data-(ADSR[counter].attack<<2);
 800181a:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800181e:	2b00      	cmp	r3, #0
 8001820:	dc1a      	bgt.n	8001858 <ADSR_loop+0xa8>
     if (ADSR[counter].decay_data>=ADSR[counter].sustain_data)   { ADSR[counter].decay_data=ADSR[counter].decay_data-(ADSR[counter].decay);
 8001822:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8001826:	429e      	cmp	r6, r3
 8001828:	dc09      	bgt.n	800183e <ADSR_loop+0x8e>
 800182a:	7856      	ldrb	r6, [r2, #1]
 800182c:	1b9b      	subs	r3, r3, r6
 800182e:	b21b      	sxth	r3, r3
	if ( ADSR[counter].buffer[position]<0)    ADSR[counter].buffer[position]=0;     // 0-127
 8001830:	2b00      	cmp	r3, #0
     if (ADSR[counter].decay_data>=ADSR[counter].sustain_data)   { ADSR[counter].decay_data=ADSR[counter].decay_data-(ADSR[counter].decay);
 8001832:	8113      	strh	r3, [r2, #8]
    ADSR[counter].buffer[position]=ADSR[counter].decay_data;break;
 8001834:	81cb      	strh	r3, [r1, #14]
	if ( ADSR[counter].buffer[position]<0)    ADSR[counter].buffer[position]=0;     // 0-127
 8001836:	dae4      	bge.n	8001802 <ADSR_loop+0x52>
 8001838:	f8a1 c00e 	strh.w	ip, [r1, #14]
	if ( ADSR[counter].buffer[position]>1023)    ADSR[counter].buffer[position]=1023;
 800183c:	e7e5      	b.n	800180a <ADSR_loop+0x5a>
      if (ADSR[counter].release_data>0)  {  ADSR[counter].release_data=ADSR[counter].release_data-ADSR[counter].release;
 800183e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	dd05      	ble.n	8001852 <ADSR_loop+0xa2>
 8001846:	78d6      	ldrb	r6, [r2, #3]
 8001848:	1b9b      	subs	r3, r3, r6
 800184a:	b21b      	sxth	r3, r3
 800184c:	8193      	strh	r3, [r2, #12]
      ADSR[counter].buffer[position]=ADSR[counter].release_data;break;
 800184e:	81cb      	strh	r3, [r1, #14]
 8001850:	e7d5      	b.n	80017fe <ADSR_loop+0x4e>
	if ( ADSR[counter].buffer[position]>1023)    ADSR[counter].buffer[position]=1023;
 8001852:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 8001856:	e7d4      	b.n	8001802 <ADSR_loop+0x52>
      if (ADSR[counter].attack_data>0) {   ADSR[counter].attack_data=ADSR[counter].attack_data-(ADSR[counter].attack<<2);
 8001858:	b29b      	uxth	r3, r3
 800185a:	e7c6      	b.n	80017ea <ADSR_loop+0x3a>
 800185c:	20012ec6 	.word	0x20012ec6
 8001860:	20009014 	.word	0x20009014
 8001864:	20008c60 	.word	0x20008c60

08001868 <displayBuffer2>:
}   // end o void


    void displayBuffer2 (void){       // only for feedback line now
														    //when scrolling maybe use this only until  settled
	uint16_t feedback_loc=(menu_title_lut[enc_out1]&896)+107;														// start 2*8 bit then squeeze in 20*6 bit characters
 8001868:	4b53      	ldr	r3, [pc, #332]	; (80019b8 <displayBuffer2+0x150>)
 800186a:	4a54      	ldr	r2, [pc, #336]	; (80019bc <displayBuffer2+0x154>)
 800186c:	f9b3 3000 	ldrsh.w	r3, [r3]
    void displayBuffer2 (void){       // only for feedback line now
 8001870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t feedback_loc=(menu_title_lut[enc_out1]&896)+107;														// start 2*8 bit then squeeze in 20*6 bit characters
 8001874:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]

	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8001878:	4e51      	ldr	r6, [pc, #324]	; (80019c0 <displayBuffer2+0x158>)
 800187a:	4d52      	ldr	r5, [pc, #328]	; (80019c4 <displayBuffer2+0x15c>)
 800187c:	f3c4 4707 	ubfx	r7, r4, #16, #8
    void displayBuffer2 (void){       // only for feedback line now
 8001880:	b082      	sub	sp, #8
	memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8001882:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
 8001886:	6810      	ldr	r0, [r2, #0]
 8001888:	6851      	ldr	r1, [r2, #4]
	 char temp_char[]="  ";
 800188a:	4a4f      	ldr	r2, [pc, #316]	; (80019c8 <displayBuffer2+0x160>)
 800188c:	8852      	ldrh	r2, [r2, #2]
 800188e:	f88d 2006 	strb.w	r2, [sp, #6]
	// char temp_char2[]="________";
				 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8001892:	4a4e      	ldr	r2, [pc, #312]	; (80019cc <displayBuffer2+0x164>)
	memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8001894:	c503      	stmia	r5!, {r0, r1}
				 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8001896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800189a:	f8ad 3004 	strh.w	r3, [sp, #4]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 800189e:	a801      	add	r0, sp, #4
 80018a0:	f006 fd50 	bl	8008344 <atoi>
 80018a4:	b2c1      	uxtb	r1, r0

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 80018a6:	f1a5 0008 	sub.w	r0, r5, #8
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 80018aa:	4d49      	ldr	r5, [pc, #292]	; (80019d0 <displayBuffer2+0x168>)
 80018ac:	7029      	strb	r1, [r5, #0]
	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 80018ae:	f7ff f9c5 	bl	8000c3c <menu_vars>


	     memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
	     memcpy(default_menu3+feedback_loc+17,potSource+380,3);  // lcd out
 80018b2:	4b48      	ldr	r3, [pc, #288]	; (80019d4 <displayBuffer2+0x16c>)
	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 80018b4:	4948      	ldr	r1, [pc, #288]	; (80019d8 <displayBuffer2+0x170>)
	     memcpy(default_menu3+feedback_loc+17,potSource+380,3);  // lcd out
 80018b6:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
	     memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 80018ba:	4b48      	ldr	r3, [pc, #288]	; (80019dc <displayBuffer2+0x174>)
	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 80018bc:	6008      	str	r0, [r1, #0]
	uint16_t feedback_loc=(menu_title_lut[enc_out1]&896)+107;														// start 2*8 bit then squeeze in 20*6 bit characters
 80018be:	f404 7460 	and.w	r4, r4, #896	; 0x380
	     memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 80018c2:	f104 0c73 	add.w	ip, r4, #115	; 0x73
 80018c6:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
	     memcpy(default_menu3+feedback_loc+5,temp_char,2);

	     if (menu_vars_ref==5) target_display=1;
 80018ca:	4945      	ldr	r1, [pc, #276]	; (80019e0 <displayBuffer2+0x178>)
	     memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 80018cc:	f8d7 a000 	ldr.w	sl, [r7]
	     if (menu_vars_ref==5) target_display=1;
 80018d0:	7809      	ldrb	r1, [r1, #0]
	     memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 80018d2:	687f      	ldr	r7, [r7, #4]
 80018d4:	f843 a00c 	str.w	sl, [r3, ip]
	     memcpy(default_menu3+feedback_loc+17,potSource+380,3);  // lcd out
 80018d8:	f104 0e7c 	add.w	lr, r4, #124	; 0x7c
	     memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 80018dc:	eb03 080c 	add.w	r8, r3, ip
	     memcpy(default_menu3+feedback_loc+17,potSource+380,3);  // lcd out
 80018e0:	eb03 090e 	add.w	r9, r3, lr
	     memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 80018e4:	f8c8 7004 	str.w	r7, [r8, #4]
	     memcpy(default_menu3+feedback_loc+5,temp_char,2);
 80018e8:	3470      	adds	r4, #112	; 0x70
	     memcpy(default_menu3+feedback_loc+17,potSource+380,3);  // lcd out
 80018ea:	f823 200e 	strh.w	r2, [r3, lr]
 80018ee:	0c12      	lsrs	r2, r2, #16
 80018f0:	f889 2002 	strb.w	r2, [r9, #2]
	     if (menu_vars_ref==5) target_display=1;
 80018f4:	2905      	cmp	r1, #5
	     memcpy(default_menu3+feedback_loc+5,temp_char,2);
 80018f6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80018fa:	531a      	strh	r2, [r3, r4]
	     if (menu_vars_ref==5) target_display=1;
 80018fc:	d039      	beq.n	8001972 <displayBuffer2+0x10a>
	     if ((menu_vars_ref==36)|| (menu_vars_ref==37)) target_display=2;
 80018fe:	f1a1 0224 	sub.w	r2, r1, #36	; 0x24
 8001902:	2a01      	cmp	r2, #1
 8001904:	d81c      	bhi.n	8001940 <displayBuffer2+0xd8>
 8001906:	4c37      	ldr	r4, [pc, #220]	; (80019e4 <displayBuffer2+0x17c>)
 8001908:	2202      	movs	r2, #2
 800190a:	7022      	strb	r2, [r4, #0]
	 //    if((48<menu_vars_ref)    && (menu_vars_ref<53)) memcpy(LCD_Info+3, *(menu_titles_final+(*menu_vars_var)),8);  // send target for LFO_sqr  to LCD_Info


		 if (target_display)      // write LFO.target display , might use it for other things too
	     	{
	     		uint8_t target_tmp1=*menu_vars_var ;   // this can be put anywhere now
 800190c:	7802      	ldrb	r2, [r0, #0]
	     		if (target_tmp1>=menu_lookup_count) target_tmp1=0;    // check in case
 800190e:	2a47      	cmp	r2, #71	; 0x47
 8001910:	bf28      	it	cs
 8001912:	2200      	movcs	r2, #0
	     		if (target_display==1) memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+target_tmp1),8);  // copy info for LFO
	     		if (target_display==2) memcpy(default_menu3+feedback_loc+8, *(patch_inputs+target_tmp1),8);  // Limited atm
 8001914:	4934      	ldr	r1, [pc, #208]	; (80019e8 <displayBuffer2+0x180>)
 8001916:	b212      	sxth	r2, r2
 8001918:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800191c:	6811      	ldr	r1, [r2, #0]
 800191e:	6852      	ldr	r2, [r2, #4]
 8001920:	f843 100c 	str.w	r1, [r3, ip]
 8001924:	f8c8 2004 	str.w	r2, [r8, #4]





	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8001928:	4930      	ldr	r1, [pc, #192]	; (80019ec <displayBuffer2+0x184>)
 800192a:	780a      	ldrb	r2, [r1, #0]
	     target_display=0;
 800192c:	2300      	movs	r3, #0
	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 800192e:	2a11      	cmp	r2, #17
	     target_display=0;
 8001930:	7023      	strb	r3, [r4, #0]
	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8001932:	bf1c      	itt	ne
 8001934:	1c53      	addne	r3, r2, #1
 8001936:	b2db      	uxtbne	r3, r3
 8001938:	700b      	strb	r3, [r1, #0]


    }    // displayBuffer2
 800193a:	b002      	add	sp, #8
 800193c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	     if((48<menu_vars_ref)    && (menu_vars_ref<53)) target_display=3;
 8001940:	3931      	subs	r1, #49	; 0x31
 8001942:	2903      	cmp	r1, #3
 8001944:	4c27      	ldr	r4, [pc, #156]	; (80019e4 <displayBuffer2+0x17c>)
 8001946:	d817      	bhi.n	8001978 <displayBuffer2+0x110>
 8001948:	2303      	movs	r3, #3
 800194a:	7023      	strb	r3, [r4, #0]
	     		    {    if (LFO_sqr_list[menu_index_in&7])   {memcpy(LCD_Info+3,  menu_titles_final[sqr_target_list[menu_index_in&7]],6);LCD_Info[10]=LFO_sqr_list[menu_index_in&7];
 800194c:	782b      	ldrb	r3, [r5, #0]
 800194e:	4a28      	ldr	r2, [pc, #160]	; (80019f0 <displayBuffer2+0x188>)
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	5cd2      	ldrb	r2, [r2, r3]
 8001956:	b1ea      	cbz	r2, 8001994 <displayBuffer2+0x12c>
 8001958:	4826      	ldr	r0, [pc, #152]	; (80019f4 <displayBuffer2+0x18c>)
 800195a:	4927      	ldr	r1, [pc, #156]	; (80019f8 <displayBuffer2+0x190>)
 800195c:	5cc3      	ldrb	r3, [r0, r3]
 800195e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	f8c1 0003 	str.w	r0, [r1, #3]
 8001968:	889b      	ldrh	r3, [r3, #4]
 800196a:	f8a1 3007 	strh.w	r3, [r1, #7]
 800196e:	728a      	strb	r2, [r1, #10]
 8001970:	e7da      	b.n	8001928 <displayBuffer2+0xc0>
	     if (menu_vars_ref==5) target_display=1;
 8001972:	4c1c      	ldr	r4, [pc, #112]	; (80019e4 <displayBuffer2+0x17c>)
 8001974:	2201      	movs	r2, #1
 8001976:	7022      	strb	r2, [r4, #0]
		 if (target_display)      // write LFO.target display , might use it for other things too
 8001978:	7821      	ldrb	r1, [r4, #0]
 800197a:	2900      	cmp	r1, #0
 800197c:	d0d4      	beq.n	8001928 <displayBuffer2+0xc0>
	     		uint8_t target_tmp1=*menu_vars_var ;   // this can be put anywhere now
 800197e:	7802      	ldrb	r2, [r0, #0]
	     		if (target_tmp1>=menu_lookup_count) target_tmp1=0;    // check in case
 8001980:	2a47      	cmp	r2, #71	; 0x47
 8001982:	bf28      	it	cs
 8001984:	2200      	movcs	r2, #0
	     		if (target_display==1) memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+target_tmp1),8);  // copy info for LFO
 8001986:	2901      	cmp	r1, #1
 8001988:	d00c      	beq.n	80019a4 <displayBuffer2+0x13c>
	     		if (target_display==2) memcpy(default_menu3+feedback_loc+8, *(patch_inputs+target_tmp1),8);  // Limited atm
 800198a:	2902      	cmp	r1, #2
 800198c:	d0c2      	beq.n	8001914 <displayBuffer2+0xac>
	     		if  (target_display==3)   //  patch feedback works ok
 800198e:	2903      	cmp	r1, #3
 8001990:	d1ca      	bne.n	8001928 <displayBuffer2+0xc0>
 8001992:	e7db      	b.n	800194c <displayBuffer2+0xe4>
	     		 else memcpy(LCD_Info+3,"        ",8); //11
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <displayBuffer2+0x194>)
 8001996:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <displayBuffer2+0x190>)
 8001998:	cb03      	ldmia	r3!, {r0, r1}
 800199a:	f8c2 0003 	str.w	r0, [r2, #3]
 800199e:	f8c2 1007 	str.w	r1, [r2, #7]
 80019a2:	e7c1      	b.n	8001928 <displayBuffer2+0xc0>
	     		if (target_display==1) memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+target_tmp1),8);  // copy info for LFO
 80019a4:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 80019a8:	6811      	ldr	r1, [r2, #0]
 80019aa:	6852      	ldr	r2, [r2, #4]
 80019ac:	f843 100c 	str.w	r1, [r3, ip]
 80019b0:	f8c8 2004 	str.w	r2, [r8, #4]
	     		if  (target_display==3)   //  patch feedback works ok
 80019b4:	e7b8      	b.n	8001928 <displayBuffer2+0xc0>
 80019b6:	bf00      	nop
 80019b8:	20008b1e 	.word	0x20008b1e
 80019bc:	2000e1b4 	.word	0x2000e1b4
 80019c0:	20008b44 	.word	0x20008b44
 80019c4:	2000e9b4 	.word	0x2000e9b4
 80019c8:	080087b4 	.word	0x080087b4
 80019cc:	2000ddb0 	.word	0x2000ddb0
 80019d0:	2000ddae 	.word	0x2000ddae
 80019d4:	20012b9c 	.word	0x20012b9c
 80019d8:	2000e9c0 	.word	0x2000e9c0
 80019dc:	2000ad2c 	.word	0x2000ad2c
 80019e0:	2000e9bc 	.word	0x2000e9bc
 80019e4:	20014528 	.word	0x20014528
 80019e8:	20008d00 	.word	0x20008d00
 80019ec:	20008b1c 	.word	0x20008b1c
 80019f0:	200093f4 	.word	0x200093f4
 80019f4:	20014510 	.word	0x20014510
 80019f8:	200090ac 	.word	0x200090ac
 80019fc:	080087a8 	.word	0x080087a8

08001a00 <SPI_command>:

void SPI_command(void){
 8001a00:	b530      	push	{r4, r5, lr}
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8001a02:	4c12      	ldr	r4, [pc, #72]	; (8001a4c <SPI_command+0x4c>)
 8001a04:	8823      	ldrh	r3, [r4, #0]
void SPI_command(void){
 8001a06:	b083      	sub	sp, #12
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8001a08:	b91b      	cbnz	r3, 8001a12 <SPI_command+0x12>
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <SPI_command+0x50>)
 8001a0c:	781d      	ldrb	r5, [r3, #0]
 8001a0e:	2d01      	cmp	r5, #1
 8001a10:	d001      	beq.n	8001a16 <SPI_command+0x16>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
}
 8001a12:	b003      	add	sp, #12
 8001a14:	bd30      	pop	{r4, r5, pc}
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <SPI_command+0x54>)
 8001a18:	480f      	ldr	r0, [pc, #60]	; (8001a58 <SPI_command+0x58>)
 8001a1a:	881a      	ldrh	r2, [r3, #0]
 8001a1c:	0a11      	lsrs	r1, r2, #8
 8001a1e:	bf0c      	ite	eq
 8001a20:	21fa      	moveq	r1, #250	; 0xfa
 8001a22:	21f8      	movne	r1, #248	; 0xf8
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 8001a24:	2303      	movs	r3, #3
 8001a26:	7001      	strb	r1, [r0, #0]
	spi_store[0]=spi_byte&255;
 8001a28:	f88d 1000 	strb.w	r1, [sp]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8001a2c:	f022 000f 	bic.w	r0, r2, #15
	spi_store[2]=((spi_hold&15)<<4)&255;
 8001a30:	0111      	lsls	r1, r2, #4
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8001a32:	f88d 0001 	strb.w	r0, [sp, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8001a36:	f88d 1002 	strb.w	r1, [sp, #2]
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4669      	mov	r1, sp
 8001a3e:	4807      	ldr	r0, [pc, #28]	; (8001a5c <SPI_command+0x5c>)
 8001a40:	f005 fa76 	bl	8006f30 <HAL_SPI_Transmit>
	spi_enable=1; }
 8001a44:	8025      	strh	r5, [r4, #0]
}
 8001a46:	b003      	add	sp, #12
 8001a48:	bd30      	pop	{r4, r5, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20013508 	.word	0x20013508
 8001a50:	2001350c 	.word	0x2001350c
 8001a54:	2001350a 	.word	0x2001350a
 8001a58:	20013507 	.word	0x20013507
 8001a5c:	2000d5a8 	.word	0x2000d5a8

08001a60 <display_init>:

void display_init(void){
 8001a60:	b5f0      	push	{r4, r5, r6, r7, lr}
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 8001a62:	4c1c      	ldr	r4, [pc, #112]	; (8001ad4 <display_init+0x74>)
		  if (spi_send==0){         // sets data byte
 8001a64:	4d1c      	ldr	r5, [pc, #112]	; (8001ad8 <display_init+0x78>)
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 8001a66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
void display_init(void){
 8001a68:	b08b      	sub	sp, #44	; 0x2c
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 8001a6a:	f10d 0c04 	add.w	ip, sp, #4
 8001a6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
		  if (spi_send==0){         // sets data byte
 8001a78:	782b      	ldrb	r3, [r5, #0]
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 8001a7a:	6822      	ldr	r2, [r4, #0]
 8001a7c:	f8ac 2000 	strh.w	r2, [ip]
		  if (spi_send==0){         // sets data byte
 8001a80:	b10b      	cbz	r3, 8001a86 <display_init+0x26>


		  }

		//  if (init==5) display_fill();
}
 8001a82:	b00b      	add	sp, #44	; 0x2c
 8001a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded
 8001a86:	4c15      	ldr	r4, [pc, #84]	; (8001adc <display_init+0x7c>)
default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8001a88:	4e15      	ldr	r6, [pc, #84]	; (8001ae0 <display_init+0x80>)
 8001a8a:	7823      	ldrb	r3, [r4, #0]
 8001a8c:	4f15      	ldr	r7, [pc, #84]	; (8001ae4 <display_init+0x84>)
 8001a8e:	3b06      	subs	r3, #6
 8001a90:	8033      	strh	r3, [r6, #0]
 8001a92:	f7ff fee9 	bl	8001868 <displayBuffer2>
 8001a96:	8833      	ldrh	r3, [r6, #0]
 8001a98:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <display_init+0x88>)
 8001a9a:	5cd2      	ldrb	r2, [r2, r3]
if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 8001a9c:	7823      	ldrb	r3, [r4, #0]
default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8001a9e:	803a      	strh	r2, [r7, #0]
if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 8001aa0:	2b05      	cmp	r3, #5
 8001aa2:	d90b      	bls.n	8001abc <display_init+0x5c>
init++;   // after 6 it quits the rest is not needed
 8001aa4:	3301      	adds	r3, #1
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8001aa6:	2201      	movs	r2, #1
init++;   // after 6 it quits the rest is not needed
 8001aa8:	7023      	strb	r3, [r4, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8001aaa:	702a      	strb	r2, [r5, #0]
 8001aac:	f7ff ffa8 	bl	8001a00 <SPI_command>
 8001ab0:	4a0e      	ldr	r2, [pc, #56]	; (8001aec <display_init+0x8c>)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	702b      	strb	r3, [r5, #0]
 8001ab6:	8013      	strh	r3, [r2, #0]
}
 8001ab8:	b00b      	add	sp, #44	; 0x2c
 8001aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 8001abc:	2003      	movs	r0, #3
 8001abe:	f003 f883 	bl	8004bc8 <HAL_Delay>
 8001ac2:	7823      	ldrb	r3, [r4, #0]
 8001ac4:	aa0a      	add	r2, sp, #40	; 0x28
 8001ac6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8001aca:	f832 2c24 	ldrh.w	r2, [r2, #-36]
 8001ace:	803a      	strh	r2, [r7, #0]
 8001ad0:	e7e8      	b.n	8001aa4 <display_init+0x44>
 8001ad2:	bf00      	nop
 8001ad4:	08008524 	.word	0x08008524
 8001ad8:	2001350c 	.word	0x2001350c
 8001adc:	2000d766 	.word	0x2000d766
 8001ae0:	2000d768 	.word	0x2000d768
 8001ae4:	2001350a 	.word	0x2001350a
 8001ae8:	20008e44 	.word	0x20008e44
 8001aec:	20013508 	.word	0x20013508

08001af0 <gfx_TX_block>:
			uint8_t spi_store3=0;
			uint16_t  up_counter=0;
			uint8_t line_counter=0;

			gfx_send_counter=0;
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 8001af0:	4819      	ldr	r0, [pc, #100]	; (8001b58 <gfx_TX_block+0x68>)
 8001af2:	4a1a      	ldr	r2, [pc, #104]	; (8001b5c <gfx_TX_block+0x6c>)
void gfx_TX_block(void){         // send spi to lcd from gfx ram , full page needed initially as it writes commands as well
 8001af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			uint8_t line_counter=0;
 8001af8:	2100      	movs	r1, #0
			gfx_send_counter=0;
 8001afa:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8001b64 <gfx_TX_block+0x74>
 8001afe:	f500 6590 	add.w	r5, r0, #1152	; 0x480
			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit

					spi_store[0]=spi_store2;
					spi_store[1]=((spi_store3>>4)<<4);
					spi_store[2]=((spi_store3&15)<<4);
					memcpy(spi_tx_block+up_counter,spi_store,3);
 8001b02:	27f8      	movs	r7, #248	; 0xf8
 8001b04:	26fa      	movs	r6, #250	; 0xfa
 8001b06:	e00c      	b.n	8001b22 <gfx_TX_block+0x32>
					if (line_counter==17 ) { line_counter=0;    } else line_counter++; //
 8001b08:	2911      	cmp	r1, #17
					memcpy(spi_tx_block+up_counter,spi_store,3);
 8001b0a:	7016      	strb	r6, [r2, #0]
 8001b0c:	f882 e001 	strb.w	lr, [r2, #1]
					spi_store[2]=((spi_store3&15)<<4);
 8001b10:	f882 c002 	strb.w	ip, [r2, #2]
					if (line_counter==17 ) { line_counter=0;    } else line_counter++; //
 8001b14:	d112      	bne.n	8001b3c <gfx_TX_block+0x4c>
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 8001b16:	42a8      	cmp	r0, r5
					if (line_counter==17 ) { line_counter=0;    } else line_counter++; //
 8001b18:	f04f 0100 	mov.w	r1, #0
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 8001b1c:	f102 0203 	add.w	r2, r2, #3
 8001b20:	d012      	beq.n	8001b48 <gfx_TX_block+0x58>
			    spi_store3=gfx_ram[gfx_send_counter];
 8001b22:	f810 3f01 	ldrb.w	r3, [r0, #1]!
			    if (line_counter>1) {spi_store2=250;					// 2ms delay between location commands , data is ok full speed
 8001b26:	2901      	cmp	r1, #1
					spi_store[1]=((spi_store3>>4)<<4);
 8001b28:	f003 0ef0 	and.w	lr, r3, #240	; 0xf0
					spi_store[2]=((spi_store3&15)<<4);
 8001b2c:	ea4f 1c03 	mov.w	ip, r3, lsl #4
			    if (line_counter>1) {spi_store2=250;					// 2ms delay between location commands , data is ok full speed
 8001b30:	d8ea      	bhi.n	8001b08 <gfx_TX_block+0x18>
					memcpy(spi_tx_block+up_counter,spi_store,3);
 8001b32:	7017      	strb	r7, [r2, #0]
 8001b34:	f882 e001 	strb.w	lr, [r2, #1]
					spi_store[2]=((spi_store3&15)<<4);
 8001b38:	f882 c002 	strb.w	ip, [r2, #2]
					if (line_counter==17 ) { line_counter=0;    } else line_counter++; //
 8001b3c:	3101      	adds	r1, #1
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 8001b3e:	42a8      	cmp	r0, r5
					if (line_counter==17 ) { line_counter=0;    } else line_counter++; //
 8001b40:	b2c9      	uxtb	r1, r1
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 8001b42:	f102 0203 	add.w	r2, r2, #3
 8001b46:	d1ec      	bne.n	8001b22 <gfx_TX_block+0x32>
			 gfx_send_counter++; ;

			} ;  // ok
			gfx_send_counter=0; disp_end=1;
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <gfx_TX_block+0x70>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
 8001b50:	f8a8 1000 	strh.w	r1, [r8]

}
 8001b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b58:	2000ceab 	.word	0x2000ceab
 8001b5c:	20013510 	.word	0x20013510
 8001b60:	2000c157 	.word	0x2000c157
 8001b64:	2000d32e 	.word	0x2000d32e

08001b68 <gfx_clear>:

void gfx_clear(void){     // simple gfx ram clear ,besides feedback
 8001b68:	b410      	push	{r4}
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <gfx_clear+0x40>)

	for (n=0;n<1152 ;n=n+18)    {
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f503 6190 	add.w	r1, r3, #1152	; 0x480
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
	for (n=0;n<1152 ;n=n+18)    {
 8001b7a:	3312      	adds	r3, #18
 8001b7c:	4299      	cmp	r1, r3
 8001b7e:	d1f8      	bne.n	8001b72 <gfx_clear+0xa>
 8001b80:	4c0a      	ldr	r4, [pc, #40]	; (8001bac <gfx_clear+0x44>)
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <gfx_clear+0x48>)

				}  }
	 gfx_send_swap=0;  // disable line skip
 8001b84:	480b      	ldr	r0, [pc, #44]	; (8001bb4 <gfx_clear+0x4c>)
	 gfx_send_counter=0;    //reset page
 8001b86:	490c      	ldr	r1, [pc, #48]	; (8001bb8 <gfx_clear+0x50>)
	 gfx_send_swap=0;  // disable line skip
 8001b88:	7002      	strb	r2, [r0, #0]
 8001b8a:	f04f 0c12 	mov.w	ip, #18
 8001b8e:	f8a4 c000 	strh.w	ip, [r4]
 8001b92:	f44f 6c90 	mov.w	ip, #1152	; 0x480
 8001b96:	f8a3 c000 	strh.w	ip, [r3]
	 disp_end=0;     //  should disable display process till one page
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <gfx_clear+0x54>)
	 gfx_send_counter=0;    //reset page
 8001b9c:	800a      	strh	r2, [r1, #0]
	 disp_end=0;     //  should disable display process till one page
 8001b9e:	701a      	strb	r2, [r3, #0]

}
 8001ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	2000ceae 	.word	0x2000ceae
 8001bac:	2000d764 	.word	0x2000d764
 8001bb0:	2000e9c8 	.word	0x2000e9c8
 8001bb4:	2000d330 	.word	0x2000d330
 8001bb8:	2000d32e 	.word	0x2000d32e
 8001bbc:	2000c157 	.word	0x2000c157

08001bc0 <gfx_line_fill>:



}

void gfx_line_fill (){   // fills a line to gfx_ram from default_menu3 also fills gfx_block
 8001bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		    // this now is the  emain char to disp
   // uint8_t line_selected=(loop_counter&7)+((menu_title_lut[enc_out1]>>7)*8);

    uint16_t cursor= menu_title_lut[enc_out1];
 8001bc4:	4944      	ldr	r1, [pc, #272]	; (8001cd8 <gfx_line_fill+0x118>)
    uint16_t line_selected=(loop_counter&7)+((cursor>>7)*8);    // thsi needs to be 1024/16
 8001bc6:	4b45      	ldr	r3, [pc, #276]	; (8001cdc <gfx_line_fill+0x11c>)
    uint16_t cursor= menu_title_lut[enc_out1];
 8001bc8:	4a45      	ldr	r2, [pc, #276]	; (8001ce0 <gfx_line_fill+0x120>)
 8001bca:	f9b1 1000 	ldrsh.w	r1, [r1]
    uint16_t line_selected=(loop_counter&7)+((cursor>>7)*8);    // thsi needs to be 1024/16
 8001bce:	781b      	ldrb	r3, [r3, #0]
    uint16_t cursor= menu_title_lut[enc_out1];
 8001bd0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    uint16_t start_line=(line_selected&7)*144;
     uint16_t end_line=start_line+144;
     disp_end=1;
 8001bd4:	4d43      	ldr	r5, [pc, #268]	; (8001ce4 <gfx_line_fill+0x124>)
    uint16_t line_selected=(loop_counter&7)+((cursor>>7)*8);    // thsi needs to be 1024/16
 8001bd6:	f003 0307 	and.w	r3, r3, #7
    uint16_t start_line=(line_selected&7)*144;
 8001bda:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
void gfx_line_fill (){   // fills a line to gfx_ram from default_menu3 also fills gfx_block
 8001bde:	b089      	sub	sp, #36	; 0x24
    uint16_t line_selected=(loop_counter&7)+((cursor>>7)*8);    // thsi needs to be 1024/16
 8001be0:	f3c0 11c8 	ubfx	r1, r0, #7, #9
    uint16_t start_line=(line_selected&7)*144;
 8001be4:	0112      	lsls	r2, r2, #4
     disp_end=1;
 8001be6:	2401      	movs	r4, #1
    uint16_t line_selected=(loop_counter&7)+((cursor>>7)*8);    // thsi needs to be 1024/16
 8001be8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     disp_end=1;
 8001bec:	702c      	strb	r4, [r5, #0]
     uint16_t end_line=start_line+144;
 8001bee:	f102 0190 	add.w	r1, r2, #144	; 0x90
     uint8_t spi_store3=0;
     uint8_t reverse[16]={0};



     if ((cursor>>4) == line_selected)    reverse [(cursor&15)]=1;
 8001bf2:	f3c0 150b 	ubfx	r5, r0, #4, #12
     uint16_t end_line=start_line+144;
 8001bf6:	9102      	str	r1, [sp, #8]
     if ((cursor>>4) == line_selected)    reverse [(cursor&15)]=1;
 8001bf8:	429d      	cmp	r5, r3
     uint8_t reverse[16]={0};
 8001bfa:	f04f 0100 	mov.w	r1, #0
 8001bfe:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001c02:	e9cd 1106 	strd	r1, r1, [sp, #24]
     if ((cursor>>4) == line_selected)    reverse [(cursor&15)]=1;
 8001c06:	d05d      	beq.n	8001cc4 <gfx_line_fill+0x104>
 8001c08:	468b      	mov	fp, r1

     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152

	 for (i=0;i<16;i++){
		 character=((default_menu3[i+(line_selected*16)]-47)*8)+char_skip;
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	9902      	ldr	r1, [sp, #8]
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	f102 0a12 	add.w	sl, r2, #18
 8001c14:	fa1f f38a 	uxth.w	r3, sl
 8001c18:	9303      	str	r3, [sp, #12]
 8001c1a:	4299      	cmp	r1, r3
 8001c1c:	bf34      	ite	cc
 8001c1e:	2301      	movcc	r3, #1
 8001c20:	2308      	movcs	r3, #8
 8001c22:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001c26:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8001cfc <gfx_line_fill+0x13c>
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	f04f 0900 	mov.w	r9, #0
 8001c36:	af08      	add	r7, sp, #32
		 gfx_ram[n+i+2]=spi_store3;

						    spi_store[0]=250;
						    spi_store[1]=((spi_store3>>4)<<4);
						    spi_store[2]=((spi_store3&15)<<4);
						    memcpy(spi_tx_block+(((n+i)*3)+6),spi_store,3);  // writes only data no command
 8001c38:	26fa      	movs	r6, #250	; 0xfa
	 for (i=0;i<16;i++){
 8001c3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <gfx_line_fill+0x128>)
 8001c3c:	9900      	ldr	r1, [sp, #0]
 8001c3e:	1c50      	adds	r0, r2, #1
 8001c40:	4418      	add	r0, r3
 8001c42:	4b2a      	ldr	r3, [pc, #168]	; (8001cec <gfx_line_fill+0x12c>)
 8001c44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001c48:	441a      	add	r2, r3
 8001c4a:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <gfx_line_fill+0x130>)
 8001c4c:	fa1f fe89 	uxth.w	lr, r9
 8001c50:	185c      	adds	r4, r3, r1
 8001c52:	f10d 0111 	add.w	r1, sp, #17
		 character=((default_menu3[i+(line_selected*16)]-47)*8)+char_skip;
 8001c56:	465b      	mov	r3, fp
 8001c58:	e001      	b.n	8001c5e <gfx_line_fill+0x9e>
		spi_store3=spi_store3^(reverse[i]*127);
 8001c5a:	f811 3b01 	ldrb.w	r3, [r1], #1
		 character=((default_menu3[i+(line_selected*16)]-47)*8)+char_skip;
 8001c5e:	f814 5b01 	ldrb.w	r5, [r4], #1
						    memcpy(spi_tx_block+(((n+i)*3)+6),spi_store,3);  // writes only data no command
 8001c62:	7196      	strb	r6, [r2, #6]
		 character=((default_menu3[i+(line_selected*16)]-47)*8)+char_skip;
 8001c64:	3d2f      	subs	r5, #47	; 0x2f
 8001c66:	eb0e 05c5 	add.w	r5, lr, r5, lsl #3
		 spi_store3= gfx_char[character&1023 ];     // limited characters
 8001c6a:	f3c5 0509 	ubfx	r5, r5, #0, #10
		spi_store3=spi_store3^(reverse[i]*127);
 8001c6e:	ebc3 1cc3 	rsb	ip, r3, r3, lsl #7
 8001c72:	f818 3005 	ldrb.w	r3, [r8, r5]
 8001c76:	ea83 030c 	eor.w	r3, r3, ip
 8001c7a:	b2db      	uxtb	r3, r3
	 for (i=0;i<16;i++){
 8001c7c:	3203      	adds	r2, #3
						    spi_store[1]=((spi_store3>>4)<<4);
 8001c7e:	f003 0cf0 	and.w	ip, r3, #240	; 0xf0
						    spi_store[2]=((spi_store3&15)<<4);
 8001c82:	011d      	lsls	r5, r3, #4
	 for (i=0;i<16;i++){
 8001c84:	428f      	cmp	r7, r1
		 gfx_ram[n+i+2]=spi_store3;
 8001c86:	f800 3f01 	strb.w	r3, [r0, #1]!
						    memcpy(spi_tx_block+(((n+i)*3)+6),spi_store,3);  // writes only data no command
 8001c8a:	f882 c004 	strb.w	ip, [r2, #4]
						    spi_store[2]=((spi_store3&15)<<4);
 8001c8e:	7155      	strb	r5, [r2, #5]
	 for (i=0;i<16;i++){
 8001c90:	d1e3      	bne.n	8001c5a <gfx_line_fill+0x9a>
     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 8001c92:	9b01      	ldr	r3, [sp, #4]
 8001c94:	fa1f f28a 	uxth.w	r2, sl
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	f109 0901 	add.w	r9, r9, #1
 8001c9e:	d002      	beq.n	8001ca6 <gfx_line_fill+0xe6>
 8001ca0:	f102 0a12 	add.w	sl, r2, #18
 8001ca4:	e7c9      	b.n	8001c3a <gfx_line_fill+0x7a>
 8001ca6:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8001caa:	4912      	ldr	r1, [pc, #72]	; (8001cf4 <gfx_line_fill+0x134>)
 8001cac:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <gfx_line_fill+0x138>)
 8001cae:	42a3      	cmp	r3, r4
 8001cb0:	bf2c      	ite	cs
 8001cb2:	237e      	movcs	r3, #126	; 0x7e
 8001cb4:	2300      	movcc	r3, #0
 8001cb6:	2010      	movs	r0, #16
 8001cb8:	4423      	add	r3, r4
 8001cba:	8008      	strh	r0, [r1, #0]
 8001cbc:	8013      	strh	r3, [r2, #0]
		     }
	char_skip++;
    }
    }
 8001cbe:	b009      	add	sp, #36	; 0x24
 8001cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     if ((cursor>>4) == line_selected)    reverse [(cursor&15)]=1;
 8001cc4:	f000 010f 	and.w	r1, r0, #15
 8001cc8:	3120      	adds	r1, #32
 8001cca:	4469      	add	r1, sp
 8001ccc:	f801 4c10 	strb.w	r4, [r1, #-16]
		spi_store3=spi_store3^(reverse[i]*127);
 8001cd0:	f89d b010 	ldrb.w	fp, [sp, #16]
 8001cd4:	e799      	b.n	8001c0a <gfx_line_fill+0x4a>
 8001cd6:	bf00      	nop
 8001cd8:	20008b1e 	.word	0x20008b1e
 8001cdc:	2000dd9c 	.word	0x2000dd9c
 8001ce0:	2000e1b4 	.word	0x2000e1b4
 8001ce4:	2000c157 	.word	0x2000c157
 8001ce8:	2000ceac 	.word	0x2000ceac
 8001cec:	20013510 	.word	0x20013510
 8001cf0:	2000ad2c 	.word	0x2000ad2c
 8001cf4:	2000d764 	.word	0x2000d764
 8001cf8:	2000e9c8 	.word	0x2000e9c8
 8001cfc:	08009ce0 	.word	0x08009ce0

08001d00 <encoder2>:


void encoder2(void){  // encoder pos and data input
 8001d00:	b530      	push	{r4, r5, lr}


	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 8001d02:	4d3b      	ldr	r5, [pc, #236]	; (8001df0 <encoder2+0xf0>)
 8001d04:	4b3b      	ldr	r3, [pc, #236]	; (8001df4 <encoder2+0xf4>)
 8001d06:	f9b5 2000 	ldrsh.w	r2, [r5]

	    memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8001d0a:	493b      	ldr	r1, [pc, #236]	; (8001df8 <encoder2+0xf8>)
	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 8001d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	    memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8001d10:	4c3a      	ldr	r4, [pc, #232]	; (8001dfc <encoder2+0xfc>)
 8001d12:	f3c3 4307 	ubfx	r3, r3, #16, #8
void encoder2(void){  // encoder pos and data input
 8001d16:	b083      	sub	sp, #12
	    memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8001d18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
	     char temp_char[]="  ";
 8001d1c:	4938      	ldr	r1, [pc, #224]	; (8001e00 <encoder2+0x100>)
	    memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8001d1e:	6818      	ldr	r0, [r3, #0]
	     char temp_char[]="  ";
 8001d20:	f8b1 c002 	ldrh.w	ip, [r1, #2]
	    memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8001d24:	6859      	ldr	r1, [r3, #4]
				     memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8001d26:	4b37      	ldr	r3, [pc, #220]	; (8001e04 <encoder2+0x104>)
	     char temp_char[]="  ";
 8001d28:	f88d c006 	strb.w	ip, [sp, #6]
	    memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8001d2c:	c403      	stmia	r4!, {r0, r1}
				     memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8001d2e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001d32:	f8ad 3004 	strh.w	r3, [sp, #4]
				     menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8001d36:	a801      	add	r0, sp, #4
 8001d38:	f006 fb04 	bl	8008344 <atoi>
 8001d3c:	4b32      	ldr	r3, [pc, #200]	; (8001e08 <encoder2+0x108>)
 8001d3e:	b2c1      	uxtb	r1, r0
	    menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8001d40:	f1a4 0008 	sub.w	r0, r4, #8
				     menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8001d44:	7019      	strb	r1, [r3, #0]
	    menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8001d46:	f7fe ff79 	bl	8000c3c <menu_vars>
		if ((*menu_vars_var)>menu_vars_limiter[menu_vars_ref])     *menu_vars_var=menu_vars_limiter[menu_vars_ref];   // limit value sher too
 8001d4a:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <encoder2+0x10c>)
	    menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8001d4c:	4c30      	ldr	r4, [pc, #192]	; (8001e10 <encoder2+0x110>)
		if ((*menu_vars_var)>menu_vars_limiter[menu_vars_ref])     *menu_vars_var=menu_vars_limiter[menu_vars_ref];   // limit value sher too
 8001d4e:	4a31      	ldr	r2, [pc, #196]	; (8001e14 <encoder2+0x114>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
	    menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8001d52:	6020      	str	r0, [r4, #0]
		if ((*menu_vars_var)>menu_vars_limiter[menu_vars_ref])     *menu_vars_var=menu_vars_limiter[menu_vars_ref];   // limit value sher too
 8001d54:	5cd3      	ldrb	r3, [r2, r3]
 8001d56:	7802      	ldrb	r2, [r0, #0]

	    // input encode ------------------------
	    if ((enc_dir!=enc_mem_dir)  )    ///write back value if encoder changed ;
 8001d58:	492f      	ldr	r1, [pc, #188]	; (8001e18 <encoder2+0x118>)
		if ((*menu_vars_var)>menu_vars_limiter[menu_vars_ref])     *menu_vars_var=menu_vars_limiter[menu_vars_ref];   // limit value sher too
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	bf88      	it	hi
 8001d5e:	7003      	strbhi	r3, [r0, #0]
	    if ((enc_dir!=enc_mem_dir)  )    ///write back value if encoder changed ;
 8001d60:	482e      	ldr	r0, [pc, #184]	; (8001e1c <encoder2+0x11c>)
 8001d62:	880a      	ldrh	r2, [r1, #0]
 8001d64:	f9b0 3000 	ldrsh.w	r3, [r0]
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d009      	beq.n	8001d80 <encoder2+0x80>
	    {
		if (enc_dir>enc_mem_dir) 							*menu_vars_var=((*menu_vars_var)+1)&255;
 8001d6c:	dd06      	ble.n	8001d7c <encoder2+0x7c>
 8001d6e:	6822      	ldr	r2, [r4, #0]
 8001d70:	7813      	ldrb	r3, [r2, #0]
 8001d72:	3301      	adds	r3, #1
 8001d74:	7013      	strb	r3, [r2, #0]
	    if ((enc_dir<enc_mem_dir)&&(*menu_vars_var))		 *menu_vars_var=((*menu_vars_var)-1)&255;
 8001d76:	f9b0 3000 	ldrsh.w	r3, [r0]
 8001d7a:	880a      	ldrh	r2, [r1, #0]
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	db27      	blt.n	8001dd0 <encoder2+0xd0>
	    }
	    enc_mem_dir=enc_dir;

	    // location encode ------------------------

	    if ((enc2_dir!=enc2_mem_dir)  )    ///write back value if encoder changed ;
 8001d80:	4a27      	ldr	r2, [pc, #156]	; (8001e20 <encoder2+0x120>)
 8001d82:	4828      	ldr	r0, [pc, #160]	; (8001e24 <encoder2+0x124>)
 8001d84:	8812      	ldrh	r2, [r2, #0]
	    enc_mem_dir=enc_dir;
 8001d86:	800b      	strh	r3, [r1, #0]
	    if ((enc2_dir!=enc2_mem_dir)  )    ///write back value if encoder changed ;
 8001d88:	8801      	ldrh	r1, [r0, #0]
 8001d8a:	428a      	cmp	r2, r1
 8001d8c:	d02d      	beq.n	8001dea <encoder2+0xea>
	   	    {
	   		if (enc2_dir>enc2_mem_dir) 							enc_out1++;
 8001d8e:	d81a      	bhi.n	8001dc6 <encoder2+0xc6>
	   	    if ((enc2_dir<enc2_mem_dir))		enc_out1--;
 8001d90:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001d94:	428a      	cmp	r2, r1
 8001d96:	d202      	bcs.n	8001d9e <encoder2+0x9e>
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b21b      	sxth	r3, r3
 8001d9c:	802b      	strh	r3, [r5, #0]

	   	    }

	    if (page_skip)  {enc_out1=enc_out1+20; page_skip=0; }
 8001d9e:	4922      	ldr	r1, [pc, #136]	; (8001e28 <encoder2+0x128>)
 8001da0:	780c      	ldrb	r4, [r1, #0]
 8001da2:	b124      	cbz	r4, 8001dae <encoder2+0xae>
 8001da4:	3314      	adds	r3, #20
 8001da6:	b21b      	sxth	r3, r3
 8001da8:	2400      	movs	r4, #0
 8001daa:	802b      	strh	r3, [r5, #0]
 8001dac:	700c      	strb	r4, [r1, #0]
	    if (enc_out1>menu_title_count) enc_out1=0;
 8001dae:	491f      	ldr	r1, [pc, #124]	; (8001e2c <encoder2+0x12c>)
 8001db0:	8809      	ldrh	r1, [r1, #0]
 8001db2:	428b      	cmp	r3, r1
 8001db4:	dd15      	ble.n	8001de2 <encoder2+0xe2>
 8001db6:	2300      	movs	r3, #0
 8001db8:	802b      	strh	r3, [r5, #0]
	   	 if (enc_out1<0) enc_out1=menu_title_count;

	    enc2_mem_dir=enc2_dir;
	   //-------------------

		    enc2_add=0;
 8001dba:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <encoder2+0x130>)
	    enc2_mem_dir=enc2_dir;
 8001dbc:	8002      	strh	r2, [r0, #0]
		    enc2_add=0;
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	7019      	strb	r1, [r3, #0]

    }
 8001dc2:	b003      	add	sp, #12
 8001dc4:	bd30      	pop	{r4, r5, pc}
	   		if (enc2_dir>enc2_mem_dir) 							enc_out1++;
 8001dc6:	882b      	ldrh	r3, [r5, #0]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	b21b      	sxth	r3, r3
 8001dcc:	802b      	strh	r3, [r5, #0]
 8001dce:	e7e1      	b.n	8001d94 <encoder2+0x94>
	    if ((enc_dir<enc_mem_dir)&&(*menu_vars_var))		 *menu_vars_var=((*menu_vars_var)-1)&255;
 8001dd0:	6824      	ldr	r4, [r4, #0]
 8001dd2:	7822      	ldrb	r2, [r4, #0]
 8001dd4:	2a00      	cmp	r2, #0
 8001dd6:	d0d3      	beq.n	8001d80 <encoder2+0x80>
 8001dd8:	3a01      	subs	r2, #1
 8001dda:	7022      	strb	r2, [r4, #0]
	    enc_mem_dir=enc_dir;
 8001ddc:	f9b0 3000 	ldrsh.w	r3, [r0]
 8001de0:	e7ce      	b.n	8001d80 <encoder2+0x80>
	   	 if (enc_out1<0) enc_out1=menu_title_count;
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	bfb8      	it	lt
 8001de6:	8029      	strhlt	r1, [r5, #0]
 8001de8:	e7e7      	b.n	8001dba <encoder2+0xba>
	    if (page_skip)  {enc_out1=enc_out1+20; page_skip=0; }
 8001dea:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001dee:	e7d6      	b.n	8001d9e <encoder2+0x9e>
 8001df0:	20008b1e 	.word	0x20008b1e
 8001df4:	2000e1b4 	.word	0x2000e1b4
 8001df8:	20008b44 	.word	0x20008b44
 8001dfc:	2000e9b4 	.word	0x2000e9b4
 8001e00:	080087b4 	.word	0x080087b4
 8001e04:	2000ddb0 	.word	0x2000ddb0
 8001e08:	2000ddae 	.word	0x2000ddae
 8001e0c:	2000e9bc 	.word	0x2000e9bc
 8001e10:	2000e9c0 	.word	0x2000e9c0
 8001e14:	0800a16c 	.word	0x0800a16c
 8001e18:	2000c166 	.word	0x2000c166
 8001e1c:	2000c164 	.word	0x2000c164
 8001e20:	2000c15c 	.word	0x2000c15c
 8001e24:	2000c15e 	.word	0x2000c15e
 8001e28:	2000ee1c 	.word	0x2000ee1c
 8001e2c:	2000e1b0 	.word	0x2000e1b0
 8001e30:	2000c15b 	.word	0x2000c15b

08001e34 <menu3_fill>:


    void menu3_fill(void){   // looping write into default_menu3
 8001e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t   enc_up=disp_up_counter;
 8001e38:	4e2f      	ldr	r6, [pc, #188]	; (8001ef8 <menu3_fill+0xc4>)

	if(enc_up>menu_title_count) {enc_up=0; disp_up_counter=0;}
 8001e3a:	4f30      	ldr	r7, [pc, #192]	; (8001efc <menu3_fill+0xc8>)
	uint16_t   enc_up=disp_up_counter;
 8001e3c:	8834      	ldrh	r4, [r6, #0]
	if(enc_up>menu_title_count) {enc_up=0; disp_up_counter=0;}
 8001e3e:	883b      	ldrh	r3, [r7, #0]
 8001e40:	42a3      	cmp	r3, r4
    void menu3_fill(void){   // looping write into default_menu3
 8001e42:	b082      	sub	sp, #8
	if(enc_up>menu_title_count) {enc_up=0; disp_up_counter=0;}
 8001e44:	d353      	bcc.n	8001eee <menu3_fill+0xba>

	uint8_t crap_hold10=(menu_title_lut[enc_up]>>16)&255;   // look up up menu_titles_final

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold10),8);	// send back for menu vars ok
	 char temp_char[]="  ";
				 memcpy(temp_char,menu_index_list+((enc_up*2)),2);   // copy char to char,ok
 8001e46:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <menu3_fill+0xcc>)
 8001e48:	eb03 0344 	add.w	r3, r3, r4, lsl #1
	uint8_t crap_hold10=(menu_title_lut[enc_up]>>16)&255;   // look up up menu_titles_final
 8001e4c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8001f34 <menu3_fill+0x100>
				 memcpy(temp_char,menu_index_list+((enc_up*2)),2);   // copy char to char,ok
 8001e50:	8819      	ldrh	r1, [r3, #0]
	uint8_t crap_hold10=(menu_title_lut[enc_up]>>16)&255;   // look up up menu_titles_final
 8001e52:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
	memcpy(menu_vars_in,*(menu_titles_final+crap_hold10),8);	// send back for menu vars ok
 8001e56:	4a2b      	ldr	r2, [pc, #172]	; (8001f04 <menu3_fill+0xd0>)
 8001e58:	4d2b      	ldr	r5, [pc, #172]	; (8001f08 <menu3_fill+0xd4>)
 8001e5a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	 char temp_char[]="  ";
 8001e62:	4a2a      	ldr	r2, [pc, #168]	; (8001f0c <menu3_fill+0xd8>)
	memcpy(menu_vars_in,*(menu_titles_final+crap_hold10),8);	// send back for menu vars ok
 8001e64:	6818      	ldr	r0, [r3, #0]
				 memcpy(temp_char,menu_index_list+((enc_up*2)),2);   // copy char to char,ok
 8001e66:	f8ad 1004 	strh.w	r1, [sp, #4]
	memcpy(menu_vars_in,*(menu_titles_final+crap_hold10),8);	// send back for menu vars ok
 8001e6a:	6859      	ldr	r1, [r3, #4]
	 char temp_char[]="  ";
 8001e6c:	8852      	ldrh	r2, [r2, #2]
 8001e6e:	f88d 2006 	strb.w	r2, [sp, #6]
	memcpy(menu_vars_in,*(menu_titles_final+crap_hold10),8);	// send back for menu vars ok
 8001e72:	c503      	stmia	r5!, {r0, r1}
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8001e74:	a801      	add	r0, sp, #4
 8001e76:	f006 fa65 	bl	8008344 <atoi>
 8001e7a:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <menu3_fill+0xdc>)
 8001e7c:	b2c1      	uxtb	r1, r0

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8001e7e:	f1a5 0008 	sub.w	r0, r5, #8
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8001e82:	7019      	strb	r1, [r3, #0]
	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8001e84:	f7fe feda 	bl	8000c3c <menu_vars>

			lcd_out3=*menu_vars_var;

		if (enc_out1==enc_up) 	lcd_temp=lcd_out3;  // this may be a problem
 8001e88:	4a22      	ldr	r2, [pc, #136]	; (8001f14 <menu3_fill+0xe0>)
	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8001e8a:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <menu3_fill+0xe4>)
		if (enc_out1==enc_up) 	lcd_temp=lcd_out3;  // this may be a problem
 8001e8c:	f9b2 2000 	ldrsh.w	r2, [r2]
	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8001e90:	6018      	str	r0, [r3, #0]
		if (enc_out1==enc_up) 	lcd_temp=lcd_out3;  // this may be a problem
 8001e92:	42a2      	cmp	r2, r4
			lcd_out3=*menu_vars_var;
 8001e94:	7803      	ldrb	r3, [r0, #0]
		if (enc_out1==enc_up) 	lcd_temp=lcd_out3;  // this may be a problem
 8001e96:	bf08      	it	eq
 8001e98:	4a20      	ldreq	r2, [pc, #128]	; (8001f1c <menu3_fill+0xe8>)
			lcd_out3=*menu_vars_var;
 8001e9a:	4921      	ldr	r1, [pc, #132]	; (8001f20 <menu3_fill+0xec>)
		if (enc_out1==enc_up) 	lcd_temp=lcd_out3;  // this may be a problem
 8001e9c:	bf08      	it	eq
 8001e9e:	7013      	strbeq	r3, [r2, #0]

		div_limit=lcd_out3;
			if (div_limit>9) div_limit=9;
 8001ea0:	2b09      	cmp	r3, #9
 8001ea2:	4a20      	ldr	r2, [pc, #128]	; (8001f24 <menu3_fill+0xf0>)
			lcd_out3=*menu_vars_var;
 8001ea4:	800b      	strh	r3, [r1, #0]
			if (div_limit>9) div_limit=9;
 8001ea6:	d81e      	bhi.n	8001ee6 <menu3_fill+0xb2>
		div_limit=lcd_out3;
 8001ea8:	7013      	strb	r3, [r2, #0]
				if (lcd_out3>40)							div_limit= lcd_out3>>5;*/


				uint16_t crap8=menu_title_lut[enc_up];

				default_menu3[crap8]=div_limit+48;
 8001eaa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001eae:	b2d2      	uxtb	r2, r2
				if (menu_vars_ref==53)  default_menu3[crap8]=lcd_out3;   // keep in char , ok
 8001eb0:	481d      	ldr	r0, [pc, #116]	; (8001f28 <menu3_fill+0xf4>)
				default_menu3[crap8]=div_limit+48;
 8001eb2:	f838 1024 	ldrh.w	r1, [r8, r4, lsl #2]
				if (menu_vars_ref==53)  default_menu3[crap8]=lcd_out3;   // keep in char , ok
 8001eb6:	7804      	ldrb	r4, [r0, #0]
				default_menu3[crap8]=div_limit+48;
 8001eb8:	481c      	ldr	r0, [pc, #112]	; (8001f2c <menu3_fill+0xf8>)
				if (menu_vars_ref==53)  default_menu3[crap8]=lcd_out3;   // keep in char , ok
 8001eba:	2c35      	cmp	r4, #53	; 0x35
				default_menu3[crap8]=div_limit+48;
 8001ebc:	5442      	strb	r2, [r0, r1]
				if (menu_vars_ref==53)  default_menu3[crap8]=lcd_out3;   // keep in char , ok
 8001ebe:	d005      	beq.n	8001ecc <menu3_fill+0x98>

				if ((menu_vars_ref==24))  default_menu3[crap8]=major_notes[lcd_out3&31];
 8001ec0:	2c18      	cmp	r4, #24
 8001ec2:	d104      	bne.n	8001ece <menu3_fill+0x9a>
 8001ec4:	4a1a      	ldr	r2, [pc, #104]	; (8001f30 <menu3_fill+0xfc>)
 8001ec6:	f003 031f 	and.w	r3, r3, #31
 8001eca:	5cd3      	ldrb	r3, [r2, r3]
 8001ecc:	5443      	strb	r3, [r0, r1]
				disp_up_counter++;
 8001ece:	8833      	ldrh	r3, [r6, #0]
				if(disp_up_counter>menu_title_count) disp_up_counter=0;  // just auto scans lcd_data , can be an issue
 8001ed0:	883a      	ldrh	r2, [r7, #0]
				disp_up_counter++;
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	b29b      	uxth	r3, r3
				if(disp_up_counter>menu_title_count) disp_up_counter=0;  // just auto scans lcd_data , can be an issue
 8001ed6:	429a      	cmp	r2, r3
				disp_up_counter++;
 8001ed8:	8033      	strh	r3, [r6, #0]
				if(disp_up_counter>menu_title_count) disp_up_counter=0;  // just auto scans lcd_data , can be an issue
 8001eda:	bf3c      	itt	cc
 8001edc:	2300      	movcc	r3, #0
 8001ede:	8033      	strhcc	r3, [r6, #0]

    }
 8001ee0:	b002      	add	sp, #8
 8001ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (div_limit>9) div_limit=9;
 8001ee6:	2109      	movs	r1, #9
 8001ee8:	7011      	strb	r1, [r2, #0]
 8001eea:	2239      	movs	r2, #57	; 0x39
 8001eec:	e7e0      	b.n	8001eb0 <menu3_fill+0x7c>
	if(enc_up>menu_title_count) {enc_up=0; disp_up_counter=0;}
 8001eee:	2400      	movs	r4, #0
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <menu3_fill+0xcc>)
 8001ef2:	8034      	strh	r4, [r6, #0]
 8001ef4:	e7aa      	b.n	8001e4c <menu3_fill+0x18>
 8001ef6:	bf00      	nop
 8001ef8:	2000c158 	.word	0x2000c158
 8001efc:	2000e1b0 	.word	0x2000e1b0
 8001f00:	2000ddb0 	.word	0x2000ddb0
 8001f04:	20008b44 	.word	0x20008b44
 8001f08:	2000e9b4 	.word	0x2000e9b4
 8001f0c:	080087b4 	.word	0x080087b4
 8001f10:	2000ddae 	.word	0x2000ddae
 8001f14:	20008b1e 	.word	0x20008b1e
 8001f18:	2000e9c0 	.word	0x2000e9c0
 8001f1c:	2000db72 	.word	0x2000db72
 8001f20:	2000db6e 	.word	0x2000db6e
 8001f24:	2000c15a 	.word	0x2000c15a
 8001f28:	2000e9bc 	.word	0x2000e9bc
 8001f2c:	2000ad2c 	.word	0x2000ad2c
 8001f30:	0800a0e0 	.word	0x0800a0e0
 8001f34:	2000e1b4 	.word	0x2000e1b4

08001f38 <LCD_Info_feedback>:

    void LCD_Info_feedback(void){
 8001f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  potSource[380]=(lcd_temp/100) +48;  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 8001f3c:	4b3e      	ldr	r3, [pc, #248]	; (8002038 <LCD_Info_feedback+0x100>)
 8001f3e:	4c3f      	ldr	r4, [pc, #252]	; (800203c <LCD_Info_feedback+0x104>)
 8001f40:	781f      	ldrb	r7, [r3, #0]
			    potSource[381]=((lcd_temp %100)/10)+48;		 // 0-160 to 0-10
 8001f42:	4b3f      	ldr	r3, [pc, #252]	; (8002040 <LCD_Info_feedback+0x108>)
	  potSource[380]=(lcd_temp/100) +48;  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 8001f44:	4d3f      	ldr	r5, [pc, #252]	; (8002044 <LCD_Info_feedback+0x10c>)
			    potSource[382]=(lcd_temp%10)+48;

			    LCD_Info[0]  =( seq.pos/100) +48;
 8001f46:	4e40      	ldr	r6, [pc, #256]	; (8002048 <LCD_Info_feedback+0x110>)
	  potSource[380]=(lcd_temp/100) +48;  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 8001f48:	fba4 1007 	umull	r1, r0, r4, r7
			    potSource[381]=((lcd_temp %100)/10)+48;		 // 0-160 to 0-10
 8001f4c:	2264      	movs	r2, #100	; 0x64
	  potSource[380]=(lcd_temp/100) +48;  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 8001f4e:	0940      	lsrs	r0, r0, #5
			    potSource[381]=((lcd_temp %100)/10)+48;		 // 0-160 to 0-10
 8001f50:	fb02 7110 	mls	r1, r2, r0, r7
 8001f54:	b2c9      	uxtb	r1, r1
 8001f56:	fba3 c101 	umull	ip, r1, r3, r1
	  potSource[380]=(lcd_temp/100) +48;  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 8001f5a:	3030      	adds	r0, #48	; 0x30
			    LCD_Info[11]  =( seq.pos>>6) +49;   // +1
			    LCD_Info[12]  =( (seq.pos&63)>>4) +49;
			    LCD_Info[13]  =( (((seq.pos&15)+1)%100)/10)+48 ;
			    LCD_Info[14]  =( ((seq.pos&15)+1)%10)+48 ;

			    LCD_Info[15]= ( seq.tempo/100) +48;
 8001f5c:	f896 e001 	ldrb.w	lr, [r6, #1]
	  potSource[380]=(lcd_temp/100) +48;  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 8001f60:	f885 017c 	strb.w	r0, [r5, #380]	; 0x17c
			    potSource[381]=((lcd_temp %100)/10)+48;		 // 0-160 to 0-10
 8001f64:	08c9      	lsrs	r1, r1, #3
			    LCD_Info[0]  =( seq.pos/100) +48;
 8001f66:	7830      	ldrb	r0, [r6, #0]
			    potSource[381]=((lcd_temp %100)/10)+48;		 // 0-160 to 0-10
 8001f68:	3130      	adds	r1, #48	; 0x30
 8001f6a:	f885 117d 	strb.w	r1, [r5, #381]	; 0x17d
			    LCD_Info[15]= ( seq.tempo/100) +48;
 8001f6e:	fba4 1c0e 	umull	r1, ip, r4, lr
			    LCD_Info[0]  =( seq.pos/100) +48;
 8001f72:	fba4 1600 	umull	r1, r6, r4, r0
			    potSource[382]=(lcd_temp%10)+48;
 8001f76:	fba3 8107 	umull	r8, r1, r3, r7
 8001f7a:	08c9      	lsrs	r1, r1, #3
 8001f7c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001f80:	eba7 0141 	sub.w	r1, r7, r1, lsl #1
			    LCD_Info[0]  =( seq.pos/100) +48;
 8001f84:	0976      	lsrs	r6, r6, #5
			    LCD_Info[15]= ( seq.tempo/100) +48;
 8001f86:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
			    potSource[382]=(lcd_temp%10)+48;
 8001f8a:	3130      	adds	r1, #48	; 0x30
 8001f8c:	f885 117e 	strb.w	r1, [r5, #382]	; 0x17e
			    LCD_Info[16]  =( (seq.tempo%100) /10)+48;
 8001f90:	fb02 e11c 	mls	r1, r2, ip, lr
			    LCD_Info[1]  =( (seq.pos%100) /10)+48;
 8001f94:	fb02 0516 	mls	r5, r2, r6, r0
 8001f98:	b2ed      	uxtb	r5, r5
			    LCD_Info[16]  =( (seq.tempo%100) /10)+48;
 8001f9a:	b2c9      	uxtb	r1, r1
			    LCD_Info[1]  =( (seq.pos%100) /10)+48;
 8001f9c:	fba3 2505 	umull	r2, r5, r3, r5
			    LCD_Info[16]  =( (seq.tempo%100) /10)+48;
 8001fa0:	fba3 2101 	umull	r2, r1, r3, r1
			    LCD_Info[2]  =( seq.pos%10)+48 ;
 8001fa4:	fba3 7200 	umull	r7, r2, r3, r0
			    LCD_Info[13]  =( (((seq.pos&15)+1)%100)/10)+48 ;
 8001fa8:	f000 040f 	and.w	r4, r0, #15
			    LCD_Info[2]  =( seq.pos%10)+48 ;
 8001fac:	08d2      	lsrs	r2, r2, #3
			    LCD_Info[13]  =( (((seq.pos&15)+1)%100)/10)+48 ;
 8001fae:	3401      	adds	r4, #1
			    LCD_Info[2]  =( seq.pos%10)+48 ;
 8001fb0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001fb4:	eba0 0742 	sub.w	r7, r0, r2, lsl #1
			    LCD_Info[13]  =( (((seq.pos&15)+1)%100)/10)+48 ;
 8001fb8:	fba3 8204 	umull	r8, r2, r3, r4
			    LCD_Info[17]  =( seq.tempo%10)+48 ;
 8001fbc:	fba3 830e 	umull	r8, r3, r3, lr
			    LCD_Info[13]  =( (((seq.pos&15)+1)%100)/10)+48 ;
 8001fc0:	08d2      	lsrs	r2, r2, #3
			    LCD_Info[17]  =( seq.tempo%10)+48 ;
 8001fc2:	08db      	lsrs	r3, r3, #3
			    LCD_Info[14]  =( ((seq.pos&15)+1)%10)+48 ;
 8001fc4:	eb02 0882 	add.w	r8, r2, r2, lsl #2
			    LCD_Info[17]  =( seq.tempo%10)+48 ;
 8001fc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001fcc:	ebae 0343 	sub.w	r3, lr, r3, lsl #1
			    LCD_Info[14]  =( ((seq.pos&15)+1)%10)+48 ;
 8001fd0:	eba4 0448 	sub.w	r4, r4, r8, lsl #1
if (sampler.sample_status){  if (sampler.sample_status==1) memcpy(&LCD_Info[22],"clear",5);  else  memcpy(&LCD_Info[22],"busy ",5);  }
 8001fd4:	f8df e080 	ldr.w	lr, [pc, #128]	; 8002058 <LCD_Info_feedback+0x120>
			    LCD_Info[13]  =( (((seq.pos&15)+1)%100)/10)+48 ;
 8001fd8:	f102 0830 	add.w	r8, r2, #48	; 0x30
			    LCD_Info[16]  =( (seq.tempo%100) /10)+48;
 8001fdc:	08c9      	lsrs	r1, r1, #3
			    LCD_Info[0]  =( seq.pos/100) +48;
 8001fde:	4a1b      	ldr	r2, [pc, #108]	; (800204c <LCD_Info_feedback+0x114>)
if (sampler.sample_status){  if (sampler.sample_status==1) memcpy(&LCD_Info[22],"clear",5);  else  memcpy(&LCD_Info[22],"busy ",5);  }
 8001fe0:	f89e e080 	ldrb.w	lr, [lr, #128]	; 0x80
			    LCD_Info[13]  =( (((seq.pos&15)+1)%100)/10)+48 ;
 8001fe4:	f882 800d 	strb.w	r8, [r2, #13]
			    LCD_Info[16]  =( (seq.tempo%100) /10)+48;
 8001fe8:	3130      	adds	r1, #48	; 0x30
			    LCD_Info[17]  =( seq.tempo%10)+48 ;
 8001fea:	3330      	adds	r3, #48	; 0x30
			    LCD_Info[1]  =( (seq.pos%100) /10)+48;
 8001fec:	08ed      	lsrs	r5, r5, #3
			    LCD_Info[16]  =( (seq.tempo%100) /10)+48;
 8001fee:	7411      	strb	r1, [r2, #16]
			    LCD_Info[17]  =( seq.tempo%10)+48 ;
 8001ff0:	7453      	strb	r3, [r2, #17]
			    LCD_Info[11]  =( seq.pos>>6) +49;   // +1
 8001ff2:	0981      	lsrs	r1, r0, #6
			    LCD_Info[12]  =( (seq.pos&63)>>4) +49;
 8001ff4:	f3c0 1301 	ubfx	r3, r0, #4, #2
			    LCD_Info[0]  =( seq.pos/100) +48;
 8001ff8:	3630      	adds	r6, #48	; 0x30
			    LCD_Info[1]  =( (seq.pos%100) /10)+48;
 8001ffa:	3530      	adds	r5, #48	; 0x30
			    LCD_Info[15]= ( seq.tempo/100) +48;
 8001ffc:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
			    LCD_Info[2]  =( seq.pos%10)+48 ;
 8002000:	3730      	adds	r7, #48	; 0x30
			    LCD_Info[14]  =( ((seq.pos&15)+1)%10)+48 ;
 8002002:	3430      	adds	r4, #48	; 0x30
			    LCD_Info[11]  =( seq.pos>>6) +49;   // +1
 8002004:	3131      	adds	r1, #49	; 0x31
			    LCD_Info[12]  =( (seq.pos&63)>>4) +49;
 8002006:	3331      	adds	r3, #49	; 0x31
			    LCD_Info[0]  =( seq.pos/100) +48;
 8002008:	7016      	strb	r6, [r2, #0]
			    LCD_Info[1]  =( (seq.pos%100) /10)+48;
 800200a:	7055      	strb	r5, [r2, #1]
			    LCD_Info[2]  =( seq.pos%10)+48 ;
 800200c:	7097      	strb	r7, [r2, #2]
			    LCD_Info[14]  =( ((seq.pos&15)+1)%10)+48 ;
 800200e:	7394      	strb	r4, [r2, #14]
			    LCD_Info[15]= ( seq.tempo/100) +48;
 8002010:	f882 c00f 	strb.w	ip, [r2, #15]
			    LCD_Info[11]  =( seq.pos>>6) +49;   // +1
 8002014:	72d1      	strb	r1, [r2, #11]
			    LCD_Info[12]  =( (seq.pos&63)>>4) +49;
 8002016:	7313      	strb	r3, [r2, #12]
if (sampler.sample_status){  if (sampler.sample_status==1) memcpy(&LCD_Info[22],"clear",5);  else  memcpy(&LCD_Info[22],"busy ",5);  }
 8002018:	f1be 0f00 	cmp.w	lr, #0
 800201c:	d009      	beq.n	8002032 <LCD_Info_feedback+0xfa>
 800201e:	f1be 0f01 	cmp.w	lr, #1
 8002022:	bf0c      	ite	eq
 8002024:	4b0a      	ldreq	r3, [pc, #40]	; (8002050 <LCD_Info_feedback+0x118>)
 8002026:	4b0b      	ldrne	r3, [pc, #44]	; (8002054 <LCD_Info_feedback+0x11c>)
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	791b      	ldrb	r3, [r3, #4]
 800202c:	f8c2 0016 	str.w	r0, [r2, #22]
 8002030:	7693      	strb	r3, [r2, #26]

    }
 8002032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002036:	bf00      	nop
 8002038:	2000db72 	.word	0x2000db72
 800203c:	51eb851f 	.word	0x51eb851f
 8002040:	cccccccd 	.word	0xcccccccd
 8002044:	20012b9c 	.word	0x20012b9c
 8002048:	200132d0 	.word	0x200132d0
 800204c:	200090ac 	.word	0x200090ac
 8002050:	080087b8 	.word	0x080087b8
 8002054:	080087c0 	.word	0x080087c0
 8002058:	20008db0 	.word	0x20008db0

0800205c <sample_save>:

	    }

	}

 void sample_save(uint16_t sample_number, uint8_t* sample_data,  uint16_t  sample_size ){				// writes data to flash (slow version )
 800205c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002060:	4693      	mov	fp, r2

		stop_toggle=1;  stop_start();   // halt for slow write
 8002062:	4a77      	ldr	r2, [pc, #476]	; (8002240 <sample_save+0x1e4>)
 8002064:	4614      	mov	r4, r2
 8002066:	2301      	movs	r3, #1
 void sample_save(uint16_t sample_number, uint8_t* sample_data,  uint16_t  sample_size ){				// writes data to flash (slow version )
 8002068:	b0c5      	sub	sp, #276	; 0x114
 800206a:	4606      	mov	r6, r0
    if  (stop_toggle ==1) {HAL_TIM_Base_Stop_IT(&htim3);}
 800206c:	4875      	ldr	r0, [pc, #468]	; (8002244 <sample_save+0x1e8>)
		stop_toggle=1;  stop_start();   // halt for slow write
 800206e:	7013      	strb	r3, [r2, #0]
 void sample_save(uint16_t sample_number, uint8_t* sample_data,  uint16_t  sample_size ){				// writes data to flash (slow version )
 8002070:	460d      	mov	r5, r1
 8002072:	f005 fbb1 	bl	80077d8 <HAL_TIM_Base_Stop_IT>
    if  (stop_toggle ==2) HAL_TIM_Base_Start_IT(&htim3);;
 8002076:	7823      	ldrb	r3, [r4, #0]
 8002078:	2b02      	cmp	r3, #2
 800207a:	f000 80dc 	beq.w	8002236 <sample_save+0x1da>

		uint8_t spi_test[270]={0};
 800207e:	2700      	movs	r7, #0
 8002080:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8002084:	4639      	mov	r1, r7
 8002086:	a801      	add	r0, sp, #4
 8002088:	9700      	str	r7, [sp, #0]
 800208a:	f006 f997 	bl	80083bc <memset>
		if (sample_number>509) return ;
 800208e:	f5b6 7fff 	cmp.w	r6, #510	; 0x1fe
 8002092:	d302      	bcc.n	800209a <sample_save+0x3e>
										    HAL_Delay(20);  //should be enough in theory


	 stop_toggle=2;  stop_start();  		// restart

	    }
 8002094:	b045      	add	sp, #276	; 0x114
 8002096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sampler.recorded[sample_number>>5]=sampler.recorded[sample_number>>5]^(1<<(sample_number&31));   //record to eeprom
 800209a:	0972      	lsrs	r2, r6, #5
 800209c:	486a      	ldr	r0, [pc, #424]	; (8002248 <sample_save+0x1ec>)
 800209e:	3206      	adds	r2, #6
 80020a0:	f04f 0901 	mov.w	r9, #1
 80020a4:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 80020a8:	f006 031f 	and.w	r3, r6, #31
 80020ac:	fa09 f303 	lsl.w	r3, r9, r3
 80020b0:	404b      	eors	r3, r1
			spi_test[2]=(sample_number&1)<<7; //24bit address
 80020b2:	01f4      	lsls	r4, r6, #7
		sampler.recorded[sample_number>>5]=sampler.recorded[sample_number>>5]^(1<<(sample_number&31));   //record to eeprom
 80020b4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // start
 80020b8:	2110      	movs	r1, #16
 80020ba:	4864      	ldr	r0, [pc, #400]	; (800224c <sample_save+0x1f0>)
 80020bc:	463a      	mov	r2, r7
			spi_test[2]=(sample_number&1)<<7; //24bit address
 80020be:	b2e4      	uxtb	r4, r4
			spi_test[1]=sample_number>>1; //24bit address msb
 80020c0:	f3c6 0a47 	ubfx	sl, r6, #1, #8
					spi_test[0]=0x06; //enable write  , only lasts for single operation
 80020c4:	f04f 0806 	mov.w	r8, #6
			spi_test[2]=(sample_number&1)<<7; //24bit address
 80020c8:	f88d 4002 	strb.w	r4, [sp, #2]
			spi_test[1]=sample_number>>1; //24bit address msb
 80020cc:	f88d a001 	strb.w	sl, [sp, #1]
					spi_test[0]=0x06; //enable write  , only lasts for single operation
 80020d0:	f88d 8000 	strb.w	r8, [sp]
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // start
 80020d4:	f003 fe22 	bl	8005d1c <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);       // enable write
 80020d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020dc:	4669      	mov	r1, sp
 80020de:	464a      	mov	r2, r9
 80020e0:	485b      	ldr	r0, [pc, #364]	; (8002250 <sample_save+0x1f4>)
 80020e2:	f004 ff25 	bl	8006f30 <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // end
 80020e6:	464a      	mov	r2, r9
 80020e8:	2110      	movs	r1, #16
 80020ea:	4858      	ldr	r0, [pc, #352]	; (800224c <sample_save+0x1f0>)
 80020ec:	f003 fe16 	bl	8005d1c <HAL_GPIO_WritePin>
					HAL_Delay(5);
 80020f0:	2005      	movs	r0, #5
 80020f2:	f002 fd69 	bl	8004bc8 <HAL_Delay>
					spi_test[0]=0x52; //block
 80020f6:	2352      	movs	r3, #82	; 0x52
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 80020f8:	4854      	ldr	r0, [pc, #336]	; (800224c <sample_save+0x1f0>)
					spi_test[0]=0x52; //block
 80020fa:	f88d 3000 	strb.w	r3, [sp]
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 80020fe:	463a      	mov	r2, r7
 8002100:	2110      	movs	r1, #16
 8002102:	f003 fe0b 	bl	8005d1c <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 4, 1000);   //erase sector ,works       4kbytes   (block erase=32kbytes)
 8002106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210a:	4669      	mov	r1, sp
 800210c:	2204      	movs	r2, #4
 800210e:	4850      	ldr	r0, [pc, #320]	; (8002250 <sample_save+0x1f4>)
 8002110:	f004 ff0e 	bl	8006f30 <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002114:	484d      	ldr	r0, [pc, #308]	; (800224c <sample_save+0x1f0>)
 8002116:	464a      	mov	r2, r9
 8002118:	2110      	movs	r1, #16
 800211a:	f003 fdff 	bl	8005d1c <HAL_GPIO_WritePin>
					HAL_Delay(250);  // SHOULD BE ENOUGH
 800211e:	20fa      	movs	r0, #250	; 0xfa
 8002120:	f002 fd52 	bl	8004bc8 <HAL_Delay>
	if (sample_number>509) return 0;
 8002124:	4630      	mov	r0, r6
 8002126:	f7fe fd57 	bl	8000bd8 <sampler_ram_clear_test.part.0>
					if (sampler_ram_clear_test(sample_number)==0) return;    // quit if not empty
 800212a:	2800      	cmp	r0, #0
 800212c:	d0b2      	beq.n	8002094 <sample_save+0x38>
			if (max_count>127) max_count=127;
 800212e:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002132:	4846      	ldr	r0, [pc, #280]	; (800224c <sample_save+0x1f0>)
					spi_test[0]=0x06; //enable write
 8002134:	f88d 8000 	strb.w	r8, [sp]
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002138:	463a      	mov	r2, r7
 800213a:	f04f 0110 	mov.w	r1, #16
			uint8_t max_count= sample_size>>8;
 800213e:	ea4f 281b 	mov.w	r8, fp, lsr #8
			if (max_count>127) max_count=127;
 8002142:	bf18      	it	ne
 8002144:	f04f 087f 	movne.w	r8, #127	; 0x7f
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002148:	f003 fde8 	bl	8005d1c <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 800214c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002150:	464a      	mov	r2, r9
 8002152:	4669      	mov	r1, sp
 8002154:	483e      	ldr	r0, [pc, #248]	; (8002250 <sample_save+0x1f4>)
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002156:	4e3d      	ldr	r6, [pc, #244]	; (800224c <sample_save+0x1f0>)
					HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 8002158:	f004 feea 	bl	8006f30 <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 800215c:	464a      	mov	r2, r9
 800215e:	483b      	ldr	r0, [pc, #236]	; (800224c <sample_save+0x1f0>)
					    HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 8002160:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8002250 <sample_save+0x1f4>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002164:	2110      	movs	r1, #16
 8002166:	f003 fdd9 	bl	8005d1c <HAL_GPIO_WritePin>
					HAL_Delay(5);
 800216a:	2005      	movs	r0, #5
 800216c:	f002 fd2c 	bl	8004bc8 <HAL_Delay>
					for (write_counter=0;write_counter<=max_count;write_counter++)  {
 8002170:	f505 7b80 	add.w	fp, r5, #256	; 0x100
 8002174:	eb0b 2b08 	add.w	fp, fp, r8, lsl #8
					    memcpy  (spi_test+4 ,sample_data+(write_counter*256),  256);   // copy data to write buffer  sseems to be rolling over at 256
 8002178:	4629      	mov	r1, r5
 800217a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800217e:	a801      	add	r0, sp, #4
					    spi_test[2]=write_counter+second_byte; //  0->127 or 128->255
 8002180:	f88d 4002 	strb.w	r4, [sp, #2]
					    spi_test[1]=sample_number>>1; //0-256 this stays
 8002184:	f88d a001 	strb.w	sl, [sp, #1]
					    spi_test[3]=0; //24bit address lsb
 8002188:	f88d 7003 	strb.w	r7, [sp, #3]
					    memcpy  (spi_test+4 ,sample_data+(write_counter*256),  256);   // copy data to write buffer  sseems to be rolling over at 256
 800218c:	f006 f908 	bl	80083a0 <memcpy>
					    spi_test[0]=0x06; //enable write each time
 8002190:	2306      	movs	r3, #6
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2110      	movs	r1, #16
 8002196:	4630      	mov	r0, r6
					    spi_test[0]=0x06; //enable write each time
 8002198:	f88d 3000 	strb.w	r3, [sp]
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 800219c:	f003 fdbe 	bl	8005d1c <HAL_GPIO_WritePin>
					    HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 80021a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021a4:	2201      	movs	r2, #1
 80021a6:	4669      	mov	r1, sp
 80021a8:	4648      	mov	r0, r9
 80021aa:	f004 fec1 	bl	8006f30 <HAL_SPI_Transmit>
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80021ae:	2201      	movs	r2, #1
 80021b0:	2110      	movs	r1, #16
 80021b2:	4630      	mov	r0, r6
 80021b4:	f003 fdb2 	bl	8005d1c <HAL_GPIO_WritePin>
					    spi_test[0]=0x02; //write
 80021b8:	f04f 0802 	mov.w	r8, #2
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);   // low
 80021bc:	2200      	movs	r2, #0
 80021be:	2110      	movs	r1, #16
 80021c0:	4630      	mov	r0, r6
					    spi_test[0]=0x02; //write
 80021c2:	f88d 8000 	strb.w	r8, [sp]
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);   // low
 80021c6:	f003 fda9 	bl	8005d1c <HAL_GPIO_WritePin>
					    HAL_SPI_Transmit(&hspi1, spi_test ,260, 1000);  //address,then data
 80021ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ce:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021d2:	4669      	mov	r1, sp
 80021d4:	4648      	mov	r0, r9
 80021d6:	f004 feab 	bl	8006f30 <HAL_SPI_Transmit>
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // high end
 80021da:	2201      	movs	r2, #1
 80021dc:	2110      	movs	r1, #16
 80021de:	4630      	mov	r0, r6
 80021e0:	f003 fd9c 	bl	8005d1c <HAL_GPIO_WritePin>
					for (write_counter=0;write_counter<=max_count;write_counter++)  {
 80021e4:	f505 7580 	add.w	r5, r5, #256	; 0x100
					    HAL_Delay(10);
 80021e8:	200a      	movs	r0, #10
 80021ea:	f002 fced 	bl	8004bc8 <HAL_Delay>
					for (write_counter=0;write_counter<=max_count;write_counter++)  {
 80021ee:	3401      	adds	r4, #1
 80021f0:	455d      	cmp	r5, fp
 80021f2:	b2e4      	uxtb	r4, r4
 80021f4:	d1c0      	bne.n	8002178 <sample_save+0x11c>
					spi_test[0]=0x04; //disable write
 80021f6:	2304      	movs	r3, #4
										    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // low
 80021f8:	4814      	ldr	r0, [pc, #80]	; (800224c <sample_save+0x1f0>)
					spi_test[0]=0x04; //disable write
 80021fa:	f88d 3000 	strb.w	r3, [sp]
										    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // low
 80021fe:	2200      	movs	r2, #0
 8002200:	2110      	movs	r1, #16
 8002202:	f003 fd8b 	bl	8005d1c <HAL_GPIO_WritePin>
										    HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 8002206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220a:	4669      	mov	r1, sp
 800220c:	2201      	movs	r2, #1
 800220e:	4810      	ldr	r0, [pc, #64]	; (8002250 <sample_save+0x1f4>)
 8002210:	f004 fe8e 	bl	8006f30 <HAL_SPI_Transmit>
										    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // high end
 8002214:	2201      	movs	r2, #1
 8002216:	2110      	movs	r1, #16
 8002218:	480c      	ldr	r0, [pc, #48]	; (800224c <sample_save+0x1f0>)
 800221a:	f003 fd7f 	bl	8005d1c <HAL_GPIO_WritePin>
										    HAL_Delay(20);  //should be enough in theory
 800221e:	2014      	movs	r0, #20
 8002220:	f002 fcd2 	bl	8004bc8 <HAL_Delay>
	 stop_toggle=2;  stop_start();  		// restart
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <sample_save+0x1e4>)
 8002226:	4807      	ldr	r0, [pc, #28]	; (8002244 <sample_save+0x1e8>)
 8002228:	f883 8000 	strb.w	r8, [r3]
 800222c:	f005 faa0 	bl	8007770 <HAL_TIM_Base_Start_IT>
	    }
 8002230:	b045      	add	sp, #276	; 0x114
 8002232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002236:	4803      	ldr	r0, [pc, #12]	; (8002244 <sample_save+0x1e8>)
 8002238:	f005 fa9a 	bl	8007770 <HAL_TIM_Base_Start_IT>
 800223c:	e71f      	b.n	800207e <sample_save+0x22>
 800223e:	bf00      	nop
 8002240:	20014524 	.word	0x20014524
 8002244:	2000d690 	.word	0x2000d690
 8002248:	20008db0 	.word	0x20008db0
 800224c:	40020000 	.word	0x40020000
 8002250:	2000d550 	.word	0x2000d550

08002254 <main_initial>:
void main_initial(void){
 8002254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_DMA_Init(&hdma_spi2_tx);
 8002258:	486d      	ldr	r0, [pc, #436]	; (8002410 <main_initial+0x1bc>)
	flash_read_block2[0]=0x03; //read page 1
 800225a:	4d6e      	ldr	r5, [pc, #440]	; (8002414 <main_initial+0x1c0>)
	HAL_I2C_Mem_Read (&hi2c2,160,64, 2 , potSource, EPROM_limit,1000); //ok
 800225c:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8002474 <main_initial+0x220>
 8002260:	4f6d      	ldr	r7, [pc, #436]	; (8002418 <main_initial+0x1c4>)
 8002262:	4e6e      	ldr	r6, [pc, #440]	; (800241c <main_initial+0x1c8>)
 8002264:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8002478 <main_initial+0x224>
void main_initial(void){
 8002268:	b093      	sub	sp, #76	; 0x4c
	HAL_DMA_Init(&hdma_spi2_tx);
 800226a:	f003 fa55 	bl	8005718 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi1_rx);
 800226e:	486c      	ldr	r0, [pc, #432]	; (8002420 <main_initial+0x1cc>)
 8002270:	f003 fa52 	bl	8005718 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi1_tx);
 8002274:	486b      	ldr	r0, [pc, #428]	; (8002424 <main_initial+0x1d0>)
 8002276:	f003 fa4f 	bl	8005718 <HAL_DMA_Init>
	  HAL_SPI_Init(&hspi2); // write to register hspi2
 800227a:	486b      	ldr	r0, [pc, #428]	; (8002428 <main_initial+0x1d4>)
 800227c:	f004 fdf6 	bl	8006e6c <HAL_SPI_Init>
	  HAL_SPI_Init(&hspi1); // write to register hspi2
 8002280:	486a      	ldr	r0, [pc, #424]	; (800242c <main_initial+0x1d8>)
 8002282:	f004 fdf3 	bl	8006e6c <HAL_SPI_Init>
	HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8002286:	486a      	ldr	r0, [pc, #424]	; (8002430 <main_initial+0x1dc>)
 8002288:	f005 fa72 	bl	8007770 <HAL_TIM_Base_Start_IT>
	TIM3->CCER=0;
 800228c:	4b69      	ldr	r3, [pc, #420]	; (8002434 <main_initial+0x1e0>)
	HAL_TIM_Base_Start(&htim2);
 800228e:	486a      	ldr	r0, [pc, #424]	; (8002438 <main_initial+0x1e4>)
	TIM3->CCER=0;
 8002290:	2400      	movs	r4, #0
 8002292:	621c      	str	r4, [r3, #32]
	HAL_TIM_Base_Start(&htim2);
 8002294:	f005 fa3c 	bl	8007710 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8002298:	4868      	ldr	r0, [pc, #416]	; (800243c <main_initial+0x1e8>)
 800229a:	f005 fa39 	bl	8007710 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800229e:	4621      	mov	r1, r4
 80022a0:	4863      	ldr	r0, [pc, #396]	; (8002430 <main_initial+0x1dc>)
 80022a2:	f005 fb1b 	bl	80078dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80022a6:	2104      	movs	r1, #4
 80022a8:	4861      	ldr	r0, [pc, #388]	; (8002430 <main_initial+0x1dc>)
 80022aa:	f005 fb17 	bl	80078dc <HAL_TIM_PWM_Start>
	TIM2->CNT=32000;
 80022ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022b2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80022b6:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_ADC_Start(&hadc1);
 80022b8:	4861      	ldr	r0, [pc, #388]	; (8002440 <main_initial+0x1ec>)
 80022ba:	f002 fd45 	bl	8004d48 <HAL_ADC_Start>
	HAL_ADC_Start_DMA(&hadc1, adc_source, 3072); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 80022be:	4961      	ldr	r1, [pc, #388]	; (8002444 <main_initial+0x1f0>)
 80022c0:	485f      	ldr	r0, [pc, #380]	; (8002440 <main_initial+0x1ec>)
 80022c2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80022c6:	f002 fe1b 	bl	8004f00 <HAL_ADC_Start_DMA>
	HAL_I2C_MspInit(&hi2c2);
 80022ca:	485f      	ldr	r0, [pc, #380]	; (8002448 <main_initial+0x1f4>)
 80022cc:	f002 f9b6 	bl	800463c <HAL_I2C_MspInit>
	HAL_Delay(5);
 80022d0:	2005      	movs	r0, #5
 80022d2:	f002 fc79 	bl	8004bc8 <HAL_Delay>
				sample_save(2,ram_ptr, sample_size);  // write sample no 255
 80022d6:	495d      	ldr	r1, [pc, #372]	; (800244c <main_initial+0x1f8>)
 80022d8:	f647 72a6 	movw	r2, #32678	; 0x7fa6
 80022dc:	2002      	movs	r0, #2
 80022de:	f7ff febd 	bl	800205c <sample_save>
	if (sample_number>509) return 0;
 80022e2:	2002      	movs	r0, #2
 80022e4:	f7fe fc78 	bl	8000bd8 <sampler_ram_clear_test.part.0>
	flash_read_block2[0]=0x03; //read page 1
 80022e8:	4b59      	ldr	r3, [pc, #356]	; (8002450 <main_initial+0x1fc>)
 80022ea:	602b      	str	r3, [r5, #0]
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);HAL_SPI_TransmitReceive_DMA(&hspi1,flash_read_block2,flash_read_block2,1028);HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80022ec:	4859      	ldr	r0, [pc, #356]	; (8002454 <main_initial+0x200>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	2110      	movs	r1, #16
 80022f2:	f003 fd13 	bl	8005d1c <HAL_GPIO_WritePin>
 80022f6:	f240 4304 	movw	r3, #1028	; 0x404
 80022fa:	4629      	mov	r1, r5
 80022fc:	462a      	mov	r2, r5
 80022fe:	484b      	ldr	r0, [pc, #300]	; (800242c <main_initial+0x1d8>)
 8002300:	f005 f840 	bl	8007384 <HAL_SPI_TransmitReceive_DMA>
 8002304:	4622      	mov	r2, r4
 8002306:	4853      	ldr	r0, [pc, #332]	; (8002454 <main_initial+0x200>)
		memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 8002308:	4c53      	ldr	r4, [pc, #332]	; (8002458 <main_initial+0x204>)
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);HAL_SPI_TransmitReceive_DMA(&hspi1,flash_read_block2,flash_read_block2,1028);HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 800230a:	2110      	movs	r1, #16
 800230c:	f003 fd06 	bl	8005d1c <HAL_GPIO_WritePin>
	HAL_I2C_Mem_Read (&hi2c2,160,64, 2 , potSource, EPROM_limit,1000); //ok
 8002310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002314:	f240 2166 	movw	r1, #614	; 0x266
 8002318:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800231c:	2302      	movs	r3, #2
 800231e:	2240      	movs	r2, #64	; 0x40
 8002320:	21a0      	movs	r1, #160	; 0xa0
 8002322:	f8cd 8000 	str.w	r8, [sp]
		memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 8002326:	4645      	mov	r5, r8
	HAL_I2C_Mem_Read (&hi2c2,160,64, 2 , potSource, EPROM_limit,1000); //ok
 8002328:	4847      	ldr	r0, [pc, #284]	; (8002448 <main_initial+0x1f4>)
 800232a:	f004 f889 	bl	8006440 <HAL_I2C_Mem_Read>
		memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 800232e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002336:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800233a:	c407      	stmia	r4!, {r0, r1, r2}
	    memcpy(&note,potSource+156,160 );   // this works but keep checking for fragmentation
 800233c:	f108 019c 	add.w	r1, r8, #156	; 0x9c
		memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 8002340:	8023      	strh	r3, [r4, #0]
	    memcpy(&note,potSource+156,160 );   // this works but keep checking for fragmentation
 8002342:	22a0      	movs	r2, #160	; 0xa0
 8002344:	4845      	ldr	r0, [pc, #276]	; (800245c <main_initial+0x208>)
 8002346:	4c46      	ldr	r4, [pc, #280]	; (8002460 <main_initial+0x20c>)
 8002348:	f006 f82a 	bl	80083a0 <memcpy>
	    memcpy(&sampler,potSource+476,36 );
 800234c:	4b45      	ldr	r3, [pc, #276]	; (8002464 <main_initial+0x210>)
 800234e:	f8df e12c 	ldr.w	lr, [pc, #300]	; 800247c <main_initial+0x228>
 8002352:	f508 7aee 	add.w	sl, r8, #476	; 0x1dc
 8002356:	461d      	mov	r5, r3
 8002358:	f108 036a 	add.w	r3, r8, #106	; 0x6a
 800235c:	9305      	str	r3, [sp, #20]
 800235e:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8002362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002364:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8002368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800236a:	f108 0c2e 	add.w	ip, r8, #46	; 0x2e
 800236e:	f8da 3000 	ldr.w	r3, [sl]
 8002372:	602b      	str	r3, [r5, #0]
	    memcpy(&delay,potSource+572,5 );
 8002374:	f508 78d8 	add.w	r8, r8, #432	; 0x1b0
 8002378:	f108 038c 	add.w	r3, r8, #140	; 0x8c
 800237c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002380:	4b39      	ldr	r3, [pc, #228]	; (8002468 <main_initial+0x214>)
 8002382:	9d05      	ldr	r5, [sp, #20]
 8002384:	6018      	str	r0, [r3, #0]
 8002386:	f504 7b2a 	add.w	fp, r4, #680	; 0x2a8
 800238a:	7119      	strb	r1, [r3, #4]
			memcpy(&LFO[mem_counter],potSource+46+(mem_counter*6),6 );  // + 60 ,ok here
 800238c:	f8dc 0000 	ldr.w	r0, [ip]
 8002390:	f8bc 1004 	ldrh.w	r1, [ip, #4]
			memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 8002394:	792b      	ldrb	r3, [r5, #4]
 8002396:	682a      	ldr	r2, [r5, #0]
			memcpy(&LFO[mem_counter],potSource+46+(mem_counter*6),6 );  // + 60 ,ok here
 8002398:	6020      	str	r0, [r4, #0]
 800239a:	80a1      	strh	r1, [r4, #4]
			memcpy(&patch[mem_counter],potSource+316+(mem_counter*6),6 );
 800239c:	f8dc 010e 	ldr.w	r0, [ip, #270]	; 0x10e
 80023a0:	f8bc 1112 	ldrh.w	r1, [ip, #274]	; 0x112
			memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 80023a4:	713b      	strb	r3, [r7, #4]
	    for(mem_counter=0;mem_counter<10;mem_counter++){
 80023a6:	3444      	adds	r4, #68	; 0x44
			memcpy(&LFO_slave1[mem_counter],potSource+376+(mem_counter*6),6 );  // + 60 ,ok here
 80023a8:	f8dc 314a 	ldr.w	r3, [ip, #330]	; 0x14a
			memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 80023ac:	603a      	str	r2, [r7, #0]
			memcpy(&patch[mem_counter],potSource+316+(mem_counter*6),6 );
 80023ae:	f8ce 0000 	str.w	r0, [lr]
			memcpy(&LFO_slave1[mem_counter],potSource+376+(mem_counter*6),6 );  // + 60 ,ok here
 80023b2:	f8bc 214e 	ldrh.w	r2, [ip, #334]	; 0x14e
			memcpy(&patch[mem_counter+10],potSource+512+(mem_counter*6),6 );
 80023b6:	f8dc 01d2 	ldr.w	r0, [ip, #466]	; 0x1d2
			memcpy(&patch[mem_counter],potSource+316+(mem_counter*6),6 );
 80023ba:	f8ae 1004 	strh.w	r1, [lr, #4]
			memcpy(&LFO_slave1[mem_counter],potSource+376+(mem_counter*6),6 );  // + 60 ,ok here
 80023be:	6033      	str	r3, [r6, #0]
			memcpy(&LFO_square[mem_counter],potSource+436+(mem_counter*4),4 );
 80023c0:	f858 1f04 	ldr.w	r1, [r8, #4]!
			memcpy(&patch[mem_counter+10],potSource+512+(mem_counter*6),6 );
 80023c4:	f8bc 31d6 	ldrh.w	r3, [ip, #470]	; 0x1d6
 80023c8:	f8ce 01b8 	str.w	r0, [lr, #440]	; 0x1b8
	    for(mem_counter=0;mem_counter<10;mem_counter++){
 80023cc:	45a3      	cmp	fp, r4
			memcpy(&LFO_slave1[mem_counter],potSource+376+(mem_counter*6),6 );  // + 60 ,ok here
 80023ce:	80b2      	strh	r2, [r6, #4]
			memcpy(&patch[mem_counter+10],potSource+512+(mem_counter*6),6 );
 80023d0:	f8ae 31bc 	strh.w	r3, [lr, #444]	; 0x1bc
			memcpy(&LFO_square[mem_counter],potSource+436+(mem_counter*4),4 );
 80023d4:	f849 1b14 	str.w	r1, [r9], #20
	    for(mem_counter=0;mem_counter<10;mem_counter++){
 80023d8:	f10c 0c06 	add.w	ip, ip, #6
 80023dc:	f107 071e 	add.w	r7, r7, #30
 80023e0:	f105 0505 	add.w	r5, r5, #5
 80023e4:	f10e 0e2c 	add.w	lr, lr, #44	; 0x2c
 80023e8:	f106 0606 	add.w	r6, r6, #6
 80023ec:	d1ce      	bne.n	800238c <main_initial+0x138>
	    for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 80023ee:	491f      	ldr	r1, [pc, #124]	; (800246c <main_initial+0x218>)
 80023f0:	4d1f      	ldr	r5, [pc, #124]	; (8002470 <main_initial+0x21c>)
 80023f2:	1c4e      	adds	r6, r1, #1
 80023f4:	2700      	movs	r7, #0
			if (n>1)  gfx_ram[(i*18)+n] = 255;
 80023f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
			if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 80023fa:	f3c7 104a 	ubfx	r0, r7, #5, #11
 80023fe:	3010      	adds	r0, #16
 8002400:	00c0      	lsls	r0, r0, #3
			if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 8002402:	f007 041f 	and.w	r4, r7, #31
			if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 8002406:	b2c0      	uxtb	r0, r0
 8002408:	2300      	movs	r3, #0
			if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 800240a:	3c80      	subs	r4, #128	; 0x80
 800240c:	e03d      	b.n	800248a <main_initial+0x236>
 800240e:	bf00      	nop
 8002410:	2000d49c 	.word	0x2000d49c
 8002414:	2000c604 	.word	0x2000c604
 8002418:	20009014 	.word	0x20009014
 800241c:	200093b8 	.word	0x200093b8
 8002420:	2000d3dc 	.word	0x2000d3dc
 8002424:	2000d43c 	.word	0x2000d43c
 8002428:	2000d5a8 	.word	0x2000d5a8
 800242c:	2000d550 	.word	0x2000d550
 8002430:	2000d690 	.word	0x2000d690
 8002434:	40000400 	.word	0x40000400
 8002438:	2000d648 	.word	0x2000d648
 800243c:	2000d6d8 	.word	0x2000d6d8
 8002440:	2000d334 	.word	0x2000d334
 8002444:	20009518 	.word	0x20009518
 8002448:	2000d4fc 	.word	0x2000d4fc
 800244c:	20000000 	.word	0x20000000
 8002450:	0080ff03 	.word	0x0080ff03
 8002454:	40020000 	.word	0x40020000
 8002458:	200132d0 	.word	0x200132d0
 800245c:	20008c60 	.word	0x20008c60
 8002460:	20009110 	.word	0x20009110
 8002464:	20008db0 	.word	0x20008db0
 8002468:	2000b130 	.word	0x2000b130
 800246c:	2000ceac 	.word	0x2000ceac
 8002470:	2000d764 	.word	0x2000d764
 8002474:	20012b9c 	.word	0x20012b9c
 8002478:	20009400 	.word	0x20009400
 800247c:	2000ee20 	.word	0x2000ee20
		for 	(n=0;n<18;n++){					// this is ok
 8002480:	3301      	adds	r3, #1
 8002482:	2b12      	cmp	r3, #18
			if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 8002484:	f806 4c01 	strb.w	r4, [r6, #-1]
		for 	(n=0;n<18;n++){					// this is ok
 8002488:	d00c      	beq.n	80024a4 <main_initial+0x250>
			if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 800248a:	b29a      	uxth	r2, r3
			if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f7      	beq.n	8002480 <main_initial+0x22c>
			if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 8002490:	2a01      	cmp	r2, #1
			if (n>1)  gfx_ram[(i*18)+n] = 255;
 8002492:	bf18      	it	ne
 8002494:	f801 c003 	strbne.w	ip, [r1, r3]
		for 	(n=0;n<18;n++){					// this is ok
 8002498:	f103 0301 	add.w	r3, r3, #1
			if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 800249c:	bf08      	it	eq
 800249e:	7048      	strbeq	r0, [r1, #1]
		for 	(n=0;n<18;n++){					// this is ok
 80024a0:	2b12      	cmp	r3, #18
 80024a2:	d1f2      	bne.n	800248a <main_initial+0x236>
	    for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 80024a4:	3701      	adds	r7, #1
 80024a6:	2f40      	cmp	r7, #64	; 0x40
 80024a8:	f101 0112 	add.w	r1, r1, #18
 80024ac:	f106 0612 	add.w	r6, r6, #18
 80024b0:	d1a3      	bne.n	80023fa <main_initial+0x1a6>
 80024b2:	4a56      	ldr	r2, [pc, #344]	; (800260c <main_initial+0x3b8>)
 80024b4:	4856      	ldr	r0, [pc, #344]	; (8002610 <main_initial+0x3bc>)
	seq.pos=0;
 80024b6:	2100      	movs	r1, #0
 80024b8:	f802 1c13 	strb.w	r1, [r2, #-19]
 80024bc:	4955      	ldr	r1, [pc, #340]	; (8002614 <main_initial+0x3c0>)
 80024be:	8003      	strh	r3, [r0, #0]
	for (counter=0;counter<16;counter++){     // notes for sampler
 80024c0:	f102 0410 	add.w	r4, r2, #16
	sampler.Snotes1[counter]=seq.notes2[counter]&15;
 80024c4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80024c8:	f003 000f 	and.w	r0, r3, #15
 80024cc:	f801 0b01 	strb.w	r0, [r1], #1
	sampler.Snotes2[counter]=(seq.notes2[counter]>>4)&15;
 80024d0:	091b      	lsrs	r3, r3, #4
	for (counter=0;counter<16;counter++){     // notes for sampler
 80024d2:	4294      	cmp	r4, r2
	sampler.Snotes2[counter]=(seq.notes2[counter]>>4)&15;
 80024d4:	73cb      	strb	r3, [r1, #15]
	for (counter=0;counter<16;counter++){     // notes for sampler
 80024d6:	d1f5      	bne.n	80024c4 <main_initial+0x270>
	uint16_t lfo_list[24]= {1,2,3,4,8,12,16,24,32,48,64,96,128,156,228,256,512,768,1024,2048,4096,9196,16384,32768};
 80024d8:	f8df e170 	ldr.w	lr, [pc, #368]	; 800264c <main_initial+0x3f8>
 80024dc:	4e4e      	ldr	r6, [pc, #312]	; (8002618 <main_initial+0x3c4>)
 80024de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80024e2:	f10d 0c18 	add.w	ip, sp, #24
 80024e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80024ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80024ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80024f2:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80024f6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	    for (counter=0;counter<20;counter++){
 80024fa:	f10d 073e 	add.w	r7, sp, #62	; 0x3e
 80024fe:	f10d 0416 	add.w	r4, sp, #22
		if (lfo_table[counter]<17) lfo_table[counter]=16;
 8002502:	f04f 0810 	mov.w	r8, #16
		lfo_table[counter]=lfo_list[counter]*16;
 8002506:	f834 3f02 	ldrh.w	r3, [r4, #2]!
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	b29b      	uxth	r3, r3
		if (lfo_table[counter]<17) lfo_table[counter]=16;
 800250e:	2b10      	cmp	r3, #16
		lfo_table[counter]=lfo_list[counter]*16;
 8002510:	bf8c      	ite	hi
 8002512:	8033      	strhhi	r3, [r6, #0]
		if (lfo_table[counter]<17) lfo_table[counter]=16;
 8002514:	f8a6 8000 	strhls.w	r8, [r6]
	    for (counter=0;counter<20;counter++){
 8002518:	42bc      	cmp	r4, r7
 800251a:	f106 0602 	add.w	r6, r6, #2
 800251e:	d1f2      	bne.n	8002506 <main_initial+0x2b2>
 8002520:	4b3e      	ldr	r3, [pc, #248]	; (800261c <main_initial+0x3c8>)
	  		tempo_hold=(60*seq_sample_rate)/(tempo_hold*16); //
 8002522:	4c3f      	ldr	r4, [pc, #252]	; (8002620 <main_initial+0x3cc>)
 8002524:	f503 70ff 	add.w	r0, r3, #510	; 0x1fe
	    for (counter=0;counter<20;counter++){
 8002528:	2210      	movs	r2, #16
	  		tempo_hold=(60*seq_sample_rate)/(tempo_hold*16); //
 800252a:	fbb4 f1f2 	udiv	r1, r4, r2
	  	tempo_lut[i]=tempo_hold;
 800252e:	f823 1f02 	strh.w	r1, [r3, #2]!
	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8002532:	4298      	cmp	r0, r3
 8002534:	f102 0210 	add.w	r2, r2, #16
 8002538:	d1f7      	bne.n	800252a <main_initial+0x2d6>
		noteTiming=24;
 800253a:	4b3a      	ldr	r3, [pc, #232]	; (8002624 <main_initial+0x3d0>)
			spell[i]=67;
 800253c:	483a      	ldr	r0, [pc, #232]	; (8002628 <main_initial+0x3d4>)
 800253e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002542:	2143      	movs	r1, #67	; 0x43
		noteTiming=24;
 8002544:	2418      	movs	r4, #24
 8002546:	701c      	strb	r4, [r3, #0]
			spell[i]=67;
 8002548:	f005 ff38 	bl	80083bc <memset>
 800254c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002550:	802b      	strh	r3, [r5, #0]
		gfx_clear();
 8002552:	f7ff fb09 	bl	8001b68 <gfx_clear>
 8002556:	f44f 64af 	mov.w	r4, #1400	; 0x578
	for (pars_counter=0;pars_counter<menu_parser_limit;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 800255a:	3c01      	subs	r4, #1
 800255c:	b2a4      	uxth	r4, r4
			menu_parser();  // run it closer to default_menu size ,times, if default_menu is corrupt gfx breaks pretty bad
 800255e:	f7fe fd59 	bl	8001014 <menu_parser>
	for (pars_counter=0;pars_counter<menu_parser_limit;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8002562:	2c00      	cmp	r4, #0
 8002564:	d1f9      	bne.n	800255a <main_initial+0x306>
	for (i=0;i<1024;i++) {     // change for 32khz   1-256 bpm
 8002566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800256a:	4e30      	ldr	r6, [pc, #192]	; (800262c <main_initial+0x3d8>)
 800256c:	802b      	strh	r3, [r5, #0]
		for (pars_counter=0;pars_counter<512;pars_counter++)	  default_menu3[pars_counter>>1]=64;
 800256e:	2140      	movs	r1, #64	; 0x40
	for (pars_counter=0;pars_counter<menu_parser_limit;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8002570:	4623      	mov	r3, r4
		for (pars_counter=0;pars_counter<512;pars_counter++)	  default_menu3[pars_counter>>1]=64;
 8002572:	f3c3 024e 	ubfx	r2, r3, #1, #15
 8002576:	3301      	adds	r3, #1
 8002578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800257c:	54b1      	strb	r1, [r6, r2]
 800257e:	d1f8      	bne.n	8002572 <main_initial+0x31e>
		default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 8002580:	482a      	ldr	r0, [pc, #168]	; (800262c <main_initial+0x3d8>)
 8002582:	f7fd fe29 	bl	80001d8 <strlen>
			menu_title_count--;  //count back one
 8002586:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <main_initial+0x3dc>)
		default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 8002588:	4a2a      	ldr	r2, [pc, #168]	; (8002634 <main_initial+0x3e0>)
			menu_title_count--;  //count back one
 800258a:	881c      	ldrh	r4, [r3, #0]
		default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 800258c:	8010      	strh	r0, [r2, #0]
			menu_title_count--;  //count back one
 800258e:	1e65      	subs	r5, r4, #1
 8002590:	b2ad      	uxth	r5, r5
		default_menu3[disp_counter]=47;
 8002592:	4826      	ldr	r0, [pc, #152]	; (800262c <main_initial+0x3d8>)
 8002594:	801d      	strh	r5, [r3, #0]
 8002596:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800259a:	212f      	movs	r1, #47	; 0x2f
 800259c:	f005 ff0e 	bl	80083bc <memset>
			for (pars_counter=0;pars_counter<menu_title_count;pars_counter++)	default_menu3 [menu_title_lut[pars_counter]&1023]=48;
 80025a0:	b16d      	cbz	r5, 80025be <main_initial+0x36a>
 80025a2:	4a25      	ldr	r2, [pc, #148]	; (8002638 <main_initial+0x3e4>)
 80025a4:	1ea3      	subs	r3, r4, #2
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	1d11      	adds	r1, r2, #4
 80025aa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80025ae:	2030      	movs	r0, #48	; 0x30
 80025b0:	f852 3b04 	ldr.w	r3, [r2], #4
 80025b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b8:	4291      	cmp	r1, r2
 80025ba:	54f0      	strb	r0, [r6, r3]
 80025bc:	d1f8      	bne.n	80025b0 <main_initial+0x35c>
			note_reset();
 80025be:	f7fe ff6b 	bl	8001498 <note_reset>
			   while ( var_hold >>= 1) {
 80025c2:	491e      	ldr	r1, [pc, #120]	; (800263c <main_initial+0x3e8>)
 80025c4:	481e      	ldr	r0, [pc, #120]	; (8002640 <main_initial+0x3ec>)
 80025c6:	f101 0447 	add.w	r4, r1, #71	; 0x47
			    find_set=0;
 80025ca:	2300      	movs	r3, #0
			    LFO_vars_divider[pars_counter]= 7-find_set;    // high set bit , use it to shift left from 255
 80025cc:	f1c3 0307 	rsb	r3, r3, #7
 80025d0:	f801 3f01 	strb.w	r3, [r1, #1]!
			for (pars_counter=0;pars_counter<menu_lookup_count;pars_counter++){
 80025d4:	42a1      	cmp	r1, r4
 80025d6:	d00e      	beq.n	80025f6 <main_initial+0x3a2>
			   var_hold=menu_vars_limiter[pars_counter];
 80025d8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
			   while ( var_hold >>= 1) {
 80025dc:	0852      	lsrs	r2, r2, #1
 80025de:	d012      	beq.n	8002606 <main_initial+0x3b2>
			    find_set=0;
 80025e0:	2300      	movs	r3, #0
			       find_set++;
 80025e2:	3301      	adds	r3, #1
			   while ( var_hold >>= 1) {
 80025e4:	0852      	lsrs	r2, r2, #1
			       find_set++;
 80025e6:	b2db      	uxtb	r3, r3
			   while ( var_hold >>= 1) {
 80025e8:	d1fb      	bne.n	80025e2 <main_initial+0x38e>
			    LFO_vars_divider[pars_counter]= 7-find_set;    // high set bit , use it to shift left from 255
 80025ea:	f1c3 0307 	rsb	r3, r3, #7
 80025ee:	f801 3f01 	strb.w	r3, [r1, #1]!
			for (pars_counter=0;pars_counter<menu_lookup_count;pars_counter++){
 80025f2:	42a1      	cmp	r1, r4
 80025f4:	d1f0      	bne.n	80025d8 <main_initial+0x384>
			menuSelect=0;
 80025f6:	4913      	ldr	r1, [pc, #76]	; (8002644 <main_initial+0x3f0>)
	firstbarLoop=0;
 80025f8:	4a13      	ldr	r2, [pc, #76]	; (8002648 <main_initial+0x3f4>)
			menuSelect=0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	700b      	strb	r3, [r1, #0]
	firstbarLoop=0;
 80025fe:	7013      	strb	r3, [r2, #0]
}
 8002600:	b013      	add	sp, #76	; 0x4c
 8002602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			    find_set=0;
 8002606:	4613      	mov	r3, r2
 8002608:	e7e0      	b.n	80025cc <main_initial+0x378>
 800260a:	bf00      	nop
 800260c:	200132e3 	.word	0x200132e3
 8002610:	2000e9c8 	.word	0x2000e9c8
 8002614:	20008e06 	.word	0x20008e06
 8002618:	2000db74 	.word	0x2000db74
 800261c:	2001452c 	.word	0x2001452c
 8002620:	00209d9c 	.word	0x00209d9c
 8002624:	2000e9cc 	.word	0x2000e9cc
 8002628:	20008e44 	.word	0x20008e44
 800262c:	2000ad2c 	.word	0x2000ad2c
 8002630:	2000e1b0 	.word	0x2000e1b0
 8002634:	2000b12c 	.word	0x2000b12c
 8002638:	2000e1b4 	.word	0x2000e1b4
 800263c:	200094c7 	.word	0x200094c7
 8002640:	0800a16c 	.word	0x0800a16c
 8002644:	2000ddaa 	.word	0x2000ddaa
 8002648:	2000c200 	.word	0x2000c200
 800264c:	08008764 	.word	0x08008764

08002650 <sampler_1k_load>:




	void  sampler_1k_load(uint32_t load_address){   // 24 bit load address , for audio , 1kbyte   in 512 byte  chunks, last 64k off limits
 8002650:	b538      	push	{r3, r4, r5, lr}



	    load_address=load_address& 16777215; // 24 bit
	    if (load_address >0xFEBFFF ) return;  // IMPORTANT !
 8002652:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <sampler_1k_load+0x40>)
	    load_address=load_address& 16777215; // 24 bit
 8002654:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	    if (load_address >0xFEBFFF ) return;  // IMPORTANT !
 8002658:	4298      	cmp	r0, r3
 800265a:	d900      	bls.n	800265e <sampler_1k_load+0xe>

			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);HAL_SPI_TransmitReceive_DMA(&hspi1, send_spi2,flash_read_block2,1028);
		    //HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  //  terrible Internet advice , put cs low before not after  !
		    flash_flag=0; // }

	}
 800265c:	bd38      	pop	{r3, r4, r5, pc}
	    send_spi2[0]=0x03; //read page 1
 800265e:	4c0d      	ldr	r4, [pc, #52]	; (8002694 <sampler_1k_load+0x44>)
	    send_spi2[2]=(load_address>>8)&255;    //
 8002660:	0a03      	lsrs	r3, r0, #8
	    send_spi2[3]=0;
 8002662:	2500      	movs	r5, #0
	    send_spi2[1]=load_address>>16;			// last patch for now
 8002664:	0c01      	lsrs	r1, r0, #16
	    send_spi2[0]=0x03; //read page 1
 8002666:	2003      	movs	r0, #3
			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);HAL_SPI_TransmitReceive_DMA(&hspi1, send_spi2,flash_read_block2,1028);
 8002668:	462a      	mov	r2, r5
	    send_spi2[0]=0x03; //read page 1
 800266a:	7020      	strb	r0, [r4, #0]
	    send_spi2[1]=load_address>>16;			// last patch for now
 800266c:	7061      	strb	r1, [r4, #1]
			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);HAL_SPI_TransmitReceive_DMA(&hspi1, send_spi2,flash_read_block2,1028);
 800266e:	480a      	ldr	r0, [pc, #40]	; (8002698 <sampler_1k_load+0x48>)
	    send_spi2[2]=(load_address>>8)&255;    //
 8002670:	70a3      	strb	r3, [r4, #2]
			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);HAL_SPI_TransmitReceive_DMA(&hspi1, send_spi2,flash_read_block2,1028);
 8002672:	2110      	movs	r1, #16
	    send_spi2[3]=0;
 8002674:	70e5      	strb	r5, [r4, #3]
			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);HAL_SPI_TransmitReceive_DMA(&hspi1, send_spi2,flash_read_block2,1028);
 8002676:	f003 fb51 	bl	8005d1c <HAL_GPIO_WritePin>
 800267a:	f240 4304 	movw	r3, #1028	; 0x404
 800267e:	4a07      	ldr	r2, [pc, #28]	; (800269c <sampler_1k_load+0x4c>)
 8002680:	4807      	ldr	r0, [pc, #28]	; (80026a0 <sampler_1k_load+0x50>)
 8002682:	4621      	mov	r1, r4
 8002684:	f004 fe7e 	bl	8007384 <HAL_SPI_TransmitReceive_DMA>
		    flash_flag=0; // }
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <sampler_1k_load+0x54>)
 800268a:	701d      	strb	r5, [r3, #0]
	}
 800268c:	bd38      	pop	{r3, r4, r5, pc}
 800268e:	bf00      	nop
 8002690:	00febfff 	.word	0x00febfff
 8002694:	20012ec8 	.word	0x20012ec8
 8002698:	40020000 	.word	0x40020000
 800269c:	2000c604 	.word	0x2000c604
 80026a0:	2000d550 	.word	0x2000d550
 80026a4:	20008b40 	.word	0x20008b40

080026a8 <RAM_normalise>:
	record_counter =record_counter+1024;
	if (record_counter>=32767) { record_counter=0; sampler.record_enable=0; stop_toggle=2; RAM_normalise();  stop_start(); }  // reset and stop record

	}

void RAM_normalise(void){
 80026a8:	b538      	push	{r3, r4, r5, lr}
 80026aa:	4c2f      	ldr	r4, [pc, #188]	; (8002768 <RAM_normalise+0xc0>)
 80026ac:	ed2d 8b02 	vpush	{d8}
	    uint16_t counter=0;
	    uint16_t peak=0;
 80026b0:	2200      	movs	r2, #0
 80026b2:	f504 4500 	add.w	r5, r4, #32768	; 0x8000
void RAM_normalise(void){
 80026b6:	4623      	mov	r3, r4
	    uint16_t mute=1;  // mute by default
	   int32_t incoming;
	    for (counter=0;counter<16384;counter++){

		incoming= *(ram_ptr+counter);
		if (incoming>peak ) peak=incoming;
 80026b8:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 80026bc:	428a      	cmp	r2, r1
 80026be:	bf38      	it	cc
 80026c0:	460a      	movcc	r2, r1
	    for (counter=0;counter<16384;counter++){
 80026c2:	429d      	cmp	r5, r3
 80026c4:	d1f8      	bne.n	80026b8 <RAM_normalise+0x10>
	    }
	    process1=(32767/(peak-process1))*0.8;
 80026c6:	ee07 2a90 	vmov	s15, r2
 80026ca:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800276c <RAM_normalise+0xc4>
 80026ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026d2:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80026d6:	eec8 7a27 	vdiv.f32	s15, s16, s15
 80026da:	ee17 0a90 	vmov	r0, s15
 80026de:	f7fe f811 	bl	8000704 <__aeabi_f2d>
 80026e2:	a31f      	add	r3, pc, #124	; (adr r3, 8002760 <RAM_normalise+0xb8>)
 80026e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e8:	f7fd fd7e 	bl	80001e8 <__aeabi_dmul>
 80026ec:	f7fe f882 	bl	80007f4 <__aeabi_d2f>

	    for (counter=0;counter<16384;counter++){
		incoming= (*(ram_ptr+counter))-32767;
		if (incoming<100) mute=0;  // mute till near zero
		if ((counter>16200)&& (incoming<200)) mute=1;
 80026f0:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 8002770 <RAM_normalise+0xc8>
	    process1=(32767/(peak-process1))*0.8;
 80026f4:	ee06 0a90 	vmov	s13, r0
 80026f8:	2200      	movs	r2, #0
	    uint16_t mute=1;  // mute by default
 80026fa:	2001      	movs	r0, #1
		if ((counter>16200)&& (incoming<200)) mute=1;
 80026fc:	f643 7148 	movw	r1, #16200	; 0x3f48
 8002700:	e011      	b.n	8002726 <RAM_normalise+0x7e>
 8002702:	428a      	cmp	r2, r1
 8002704:	d821      	bhi.n	800274a <RAM_normalise+0xa2>


		if (mute) incoming=0;  //silence near 0 at end til end
 8002706:	eef0 7a46 	vmov.f32	s15, s12
 800270a:	b320      	cbz	r0, 8002756 <RAM_normalise+0xae>
		incoming=(incoming*process1)+32767;
 800270c:	eeb0 7a48 	vmov.f32	s14, s16
 8002710:	eea6 7aa7 	vfma.f32	s14, s13, s15
	    for (counter=0;counter<16384;counter++){
 8002714:	42a5      	cmp	r5, r4
 8002716:	f102 0201 	add.w	r2, r2, #1
		incoming=(incoming*process1)+32767;
 800271a:	eebd 7ac7 	vcvt.s32.f32	s14, s14


		*(ram_ptr+counter)=incoming&65535;
 800271e:	ee17 3a10 	vmov	r3, s14
 8002722:	8023      	strh	r3, [r4, #0]
	    for (counter=0;counter<16384;counter++){
 8002724:	d00e      	beq.n	8002744 <RAM_normalise+0x9c>
		incoming= (*(ram_ptr+counter))-32767;
 8002726:	f834 3f02 	ldrh.w	r3, [r4, #2]!
 800272a:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800272e:	3b7f      	subs	r3, #127	; 0x7f
		if (incoming<100) mute=0;  // mute till near zero
 8002730:	2b63      	cmp	r3, #99	; 0x63
 8002732:	dce6      	bgt.n	8002702 <RAM_normalise+0x5a>
		if ((counter>16200)&& (incoming<200)) mute=1;
 8002734:	428a      	cmp	r2, r1
 8002736:	d80a      	bhi.n	800274e <RAM_normalise+0xa6>
		incoming=(incoming*process1)+32767;
 8002738:	ee07 3a90 	vmov	s15, r3
 800273c:	2000      	movs	r0, #0
 800273e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002742:	e7e3      	b.n	800270c <RAM_normalise+0x64>

	    }

	}
 8002744:	ecbd 8b02 	vpop	{d8}
 8002748:	bd38      	pop	{r3, r4, r5, pc}
		if ((counter>16200)&& (incoming<200)) mute=1;
 800274a:	2bc7      	cmp	r3, #199	; 0xc7
 800274c:	dcdb      	bgt.n	8002706 <RAM_normalise+0x5e>
 800274e:	eef0 7a46 	vmov.f32	s15, s12
 8002752:	2001      	movs	r0, #1
 8002754:	e7da      	b.n	800270c <RAM_normalise+0x64>
		incoming=(incoming*process1)+32767;
 8002756:	ee07 3a90 	vmov	s15, r3
 800275a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800275e:	e7d5      	b.n	800270c <RAM_normalise+0x64>
 8002760:	9999999a 	.word	0x9999999a
 8002764:	3fe99999 	.word	0x3fe99999
 8002768:	1ffffffe 	.word	0x1ffffffe
 800276c:	46fffe00 	.word	0x46fffe00
 8002770:	00000000 	.word	0x00000000

08002774 <sampler_ram_record>:
void sampler_ram_record(void) {
 8002774:	b538      	push	{r3, r4, r5, lr}
	  if (!record_counter) {stop_toggle=1;  stop_start();}   // halt
 8002776:	4d1d      	ldr	r5, [pc, #116]	; (80027ec <sampler_ram_record+0x78>)
 8002778:	882c      	ldrh	r4, [r5, #0]
 800277a:	b17c      	cbz	r4, 800279c <sampler_ram_record+0x28>
	    memcpy(	&RAM[record_counter], input_holder,1024);   // transfer
 800277c:	481c      	ldr	r0, [pc, #112]	; (80027f0 <sampler_ram_record+0x7c>)
 800277e:	491d      	ldr	r1, [pc, #116]	; (80027f4 <sampler_ram_record+0x80>)
 8002780:	4420      	add	r0, r4
 8002782:	f44f 6280 	mov.w	r2, #1024	; 0x400
	record_counter =record_counter+1024;
 8002786:	f504 6480 	add.w	r4, r4, #1024	; 0x400
	    memcpy(	&RAM[record_counter], input_holder,1024);   // transfer
 800278a:	f005 fe09 	bl	80083a0 <memcpy>
	record_counter =record_counter+1024;
 800278e:	b2a4      	uxth	r4, r4
	if (record_counter>=32767) { record_counter=0; sampler.record_enable=0; stop_toggle=2; RAM_normalise();  stop_start(); }  // reset and stop record
 8002790:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8002794:	429c      	cmp	r4, r3
 8002796:	d80c      	bhi.n	80027b2 <sampler_ram_record+0x3e>
	record_counter =record_counter+1024;
 8002798:	802c      	strh	r4, [r5, #0]
	}
 800279a:	bd38      	pop	{r3, r4, r5, pc}
	  if (!record_counter) {stop_toggle=1;  stop_start();}   // halt
 800279c:	4c16      	ldr	r4, [pc, #88]	; (80027f8 <sampler_ram_record+0x84>)
    if  (stop_toggle ==1) {HAL_TIM_Base_Stop_IT(&htim3);}
 800279e:	4817      	ldr	r0, [pc, #92]	; (80027fc <sampler_ram_record+0x88>)
 80027a0:	2301      	movs	r3, #1
 80027a2:	7023      	strb	r3, [r4, #0]
 80027a4:	f005 f818 	bl	80077d8 <HAL_TIM_Base_Stop_IT>
    if  (stop_toggle ==2) HAL_TIM_Base_Start_IT(&htim3);;
 80027a8:	7823      	ldrb	r3, [r4, #0]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d01a      	beq.n	80027e4 <sampler_ram_record+0x70>
	    memcpy(	&RAM[record_counter], input_holder,1024);   // transfer
 80027ae:	882c      	ldrh	r4, [r5, #0]
 80027b0:	e7e4      	b.n	800277c <sampler_ram_record+0x8>
	if (record_counter>=32767) { record_counter=0; sampler.record_enable=0; stop_toggle=2; RAM_normalise();  stop_start(); }  // reset and stop record
 80027b2:	4c11      	ldr	r4, [pc, #68]	; (80027f8 <sampler_ram_record+0x84>)
 80027b4:	4912      	ldr	r1, [pc, #72]	; (8002800 <sampler_ram_record+0x8c>)
 80027b6:	2300      	movs	r3, #0
 80027b8:	2202      	movs	r2, #2
 80027ba:	802b      	strh	r3, [r5, #0]
 80027bc:	f881 3046 	strb.w	r3, [r1, #70]	; 0x46
 80027c0:	7022      	strb	r2, [r4, #0]
 80027c2:	f7ff ff71 	bl	80026a8 <RAM_normalise>
    if  (stop_toggle ==1) {HAL_TIM_Base_Stop_IT(&htim3);}
 80027c6:	7823      	ldrb	r3, [r4, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d006      	beq.n	80027da <sampler_ram_record+0x66>
    if  (stop_toggle ==2) HAL_TIM_Base_Start_IT(&htim3);;
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d1e4      	bne.n	800279a <sampler_ram_record+0x26>
	}
 80027d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027d4:	4809      	ldr	r0, [pc, #36]	; (80027fc <sampler_ram_record+0x88>)
 80027d6:	f004 bfcb 	b.w	8007770 <HAL_TIM_Base_Start_IT>
    if  (stop_toggle ==1) {HAL_TIM_Base_Stop_IT(&htim3);}
 80027da:	4808      	ldr	r0, [pc, #32]	; (80027fc <sampler_ram_record+0x88>)
 80027dc:	f004 fffc 	bl	80077d8 <HAL_TIM_Base_Stop_IT>
    if  (stop_toggle ==2) HAL_TIM_Base_Start_IT(&htim3);;
 80027e0:	7823      	ldrb	r3, [r4, #0]
 80027e2:	e7f3      	b.n	80027cc <sampler_ram_record+0x58>
 80027e4:	4805      	ldr	r0, [pc, #20]	; (80027fc <sampler_ram_record+0x88>)
 80027e6:	f004 ffc3 	bl	8007770 <HAL_TIM_Base_Start_IT>
 80027ea:	e7e0      	b.n	80027ae <sampler_ram_record+0x3a>
 80027ec:	20012e04 	.word	0x20012e04
 80027f0:	20000000 	.word	0x20000000
 80027f4:	2000d76c 	.word	0x2000d76c
 80027f8:	20014524 	.word	0x20014524
 80027fc:	2000d690 	.word	0x2000d690
 8002800:	20008db0 	.word	0x20008db0
 8002804:	00000000 	.word	0x00000000

08002808 <sampling>:

return  output;

}

void sampling(void){						// 330 atm or 8.5ms
 8002808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800280c:	ed2d 8b02 	vpush	{d8}

//	if (time_proc>580) time_final=time_proc;

	  time_proc=0;
 8002810:	2500      	movs	r5, #0


//time_proc=0;


	seq.swing=0;
 8002812:	f8df a388 	ldr.w	sl, [pc, #904]	; 8002b9c <sampling+0x394>
	  time_proc=0;
 8002816:	4bc5      	ldr	r3, [pc, #788]	; (8002b2c <sampling+0x324>)
	seq.swing=0;
 8002818:	f88a 502e 	strb.w	r5, [sl, #46]	; 0x2e
void sampling(void){						// 330 atm or 8.5ms
 800281c:	b0bb      	sub	sp, #236	; 0xec

static	int32_t sample_accus[10] ={0,0,0,0,0,0,0,0,0,0}; // all these should be static but ok otherwise
uint8_t mask_i;
 int32_t sample_Accu[10] ={0,0,0,0,0,0,0,0,0,0};   // accu for sample output or lookup , not static !
 800281e:	4629      	mov	r1, r5
 8002820:	2228      	movs	r2, #40	; 0x28
 8002822:	a81c      	add	r0, sp, #112	; 0x70
	  time_proc=0;
 8002824:	801d      	strh	r5, [r3, #0]
//if ((sampler.record_enable==0) && (flash_flag))   {  flash_page_read ((sampler.ram_seq)<<1 ); flash_flag=0;}

if (bank_write==2)  {sample_pointD=512;}  else sample_pointD=0;

bank_write=0;
memcpy(notes_joined,seq.notes1,16);
 8002826:	4cc2      	ldr	r4, [pc, #776]	; (8002b30 <sampling+0x328>)
 int32_t sample_Accu[10] ={0,0,0,0,0,0,0,0,0,0};   // accu for sample output or lookup , not static !
 8002828:	f005 fdc8 	bl	80083bc <memset>
memcpy(notes_joined,seq.notes1,16);
 800282c:	f8da 0002 	ldr.w	r0, [sl, #2]
 8002830:	f8da 1006 	ldr.w	r1, [sl, #6]
 8002834:	f8da 200a 	ldr.w	r2, [sl, #10]
 8002838:	f8da 300e 	ldr.w	r3, [sl, #14]
int32_t ram_synced=0;   // ram synced to sampler.seq_pos
 800283c:	9517      	str	r5, [sp, #92]	; 0x5c
memcpy(notes_joined,seq.notes1,16);
 800283e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
memcpy(notes_joined+16,seq.notes1,16);  //  only use notes 1
 8002840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
if (bank_write==2)  {sample_pointD=512;}  else sample_pointD=0;
 8002842:	4abc      	ldr	r2, [pc, #752]	; (8002b34 <sampling+0x32c>)
tempo_lut[131]=1023;   // force to an even count on samples
 8002844:	4cbc      	ldr	r4, [pc, #752]	; (8002b38 <sampling+0x330>)
if (bank_write==2)  {sample_pointD=512;}  else sample_pointD=0;
 8002846:	8813      	ldrh	r3, [r2, #0]
bank_write=0;
 8002848:	8015      	strh	r5, [r2, #0]
if (bank_write==2)  {sample_pointD=512;}  else sample_pointD=0;
 800284a:	2b02      	cmp	r3, #2
 800284c:	4abb      	ldr	r2, [pc, #748]	; (8002b3c <sampling+0x334>)
 800284e:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
 8002852:	bf14      	ite	ne
 8002854:	462b      	movne	r3, r5
 8002856:	f44f 7300 	moveq.w	r3, #512	; 0x200
 800285a:	8013      	strh	r3, [r2, #0]
sample_pointB=sample_pointD;
 800285c:	4ab8      	ldr	r2, [pc, #736]	; (8002b40 <sampling+0x338>)
 800285e:	8013      	strh	r3, [r2, #0]
tempo_lut[131]=1023;   // force to an even count on samples
 8002860:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002864:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
 8002868:	4bb6      	ldr	r3, [pc, #728]	; (8002b44 <sampling+0x33c>)
int32_t ram_temp=0;
 800286a:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
int32_t sample_input=0;
 800286e:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
unsigned short tempo_start=0;  // enabled when i=isrMask;

LCD_Info_notes(seq.loop[4]);
 8002872:	4629      	mov	r1, r5
 8002874:	f000 000f 	and.w	r0, r0, #15
//  LCD_Info[36+counter]=major_notes[notes_joined[counter+note[2].timeshift]];
//  LCD_Info[44+counter]=major_notes[notes_joined[counter+note[3].timeshift]];
}
for (counter=0;counter<16;counter++){
   if  ((value &15)==counter)   LCD_Info[70+counter]=61;
   else LCD_Info[70+counter]=47;
 8002878:	252f      	movs	r5, #47	; 0x2f
   if  ((value &15)==counter)   LCD_Info[70+counter]=61;
 800287a:	263d      	movs	r6, #61	; 0x3d
 800287c:	b2ca      	uxtb	r2, r1
 800287e:	4282      	cmp	r2, r0
for (counter=0;counter<16;counter++){
 8002880:	f101 0101 	add.w	r1, r1, #1
   if  ((value &15)==counter)   LCD_Info[70+counter]=61;
 8002884:	bf0c      	ite	eq
 8002886:	701e      	strbeq	r6, [r3, #0]
   else LCD_Info[70+counter]=47;
 8002888:	701d      	strbne	r5, [r3, #0]
for (counter=0;counter<16;counter++){
 800288a:	2910      	cmp	r1, #16
 800288c:	f103 0301 	add.w	r3, r3, #1
 8002890:	d1f4      	bne.n	800287c <sampling+0x74>
 8002892:	4aad      	ldr	r2, [pc, #692]	; (8002b48 <sampling+0x340>)
 8002894:	49ad      	ldr	r1, [pc, #692]	; (8002b4c <sampling+0x344>)
 8002896:	f102 0510 	add.w	r5, r2, #16

uint8_t counter;
for (counter=0;counter<16;counter++){				// notes for sampler
seq.notes2[counter]= (sampler.Snotes1[counter]&15)+ (sampler.Snotes2[counter]<<4);
 800289a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800289e:	7bd0      	ldrb	r0, [r2, #15]
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
for (counter=0;counter<16;counter++){				// notes for sampler
 80028a8:	4295      	cmp	r5, r2
seq.notes2[counter]= (sampler.Snotes1[counter]&15)+ (sampler.Snotes2[counter]<<4);
 80028aa:	f801 3b01 	strb.w	r3, [r1], #1
for (counter=0;counter<16;counter++){				// notes for sampler
 80028ae:	d1f4      	bne.n	800289a <sampling+0x92>

}
uint8_t sound_enable[8]={0,0,0,0,0,0,0,0};  // better here

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 80028b0:	f89a 3001 	ldrb.w	r3, [sl, #1]

tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 80028b4:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8002b50 <sampling+0x348>
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 80028b8:	f834 4013 	ldrh.w	r4, [r4, r3, lsl #1]
 80028bc:	9402      	str	r4, [sp, #8]
tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 80028be:	1162      	asrs	r2, r4, #5
 80028c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80028c8:	ee07 3a90 	vmov	s15, r3
 80028cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
uint8_t sound_enable[8]={0,0,0,0,0,0,0,0};  // better here
 80028d0:	4ba0      	ldr	r3, [pc, #640]	; (8002b54 <sampling+0x34c>)
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 80028d2:	4aa1      	ldr	r2, [pc, #644]	; (8002b58 <sampling+0x350>)
 80028d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
uint8_t sound_enable[8]={0,0,0,0,0,0,0,0};  // better here
 80028d8:	e893 0003 	ldmia.w	r3, {r0, r1}

if ((tempo_mod==511 )   && (sampler.ram_seq<=256)    && (seq.pos>>4)      )   { next_isr=0; tempo_count=0; }   //  this should sync  rough
 80028dc:	f240 13ff 	movw	r3, #511	; 0x1ff
uint8_t sound_enable[8]={0,0,0,0,0,0,0,0};  // better here
 80028e0:	ae18      	add	r6, sp, #96	; 0x60
if ((tempo_mod==511 )   && (sampler.ram_seq<=256)    && (seq.pos>>4)      )   { next_isr=0; tempo_count=0; }   //  this should sync  rough
 80028e2:	429c      	cmp	r4, r3
 80028e4:	4b9d      	ldr	r3, [pc, #628]	; (8002b5c <sampling+0x354>)
 80028e6:	9303      	str	r3, [sp, #12]
uint8_t sound_enable[8]={0,0,0,0,0,0,0,0};  // better here
 80028e8:	e886 0003 	stmia.w	r6, {r0, r1}
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 80028ec:	ed82 7a00 	vstr	s14, [r2]
if ((tempo_mod==511 )   && (sampler.ram_seq<=256)    && (seq.pos>>4)      )   { next_isr=0; tempo_count=0; }   //  this should sync  rough
 80028f0:	f000 877d 	beq.w	80037ee <sampling+0xfe6>
 80028f4:	4b9a      	ldr	r3, [pc, #616]	; (8002b60 <sampling+0x358>)
 80028f6:	9304      	str	r3, [sp, #16]
 80028f8:	4b9a      	ldr	r3, [pc, #616]	; (8002b64 <sampling+0x35c>)
 80028fa:	9306      	str	r3, [sp, #24]

seqpos_i=0; //reset
 80028fc:	489a      	ldr	r0, [pc, #616]	; (8002b68 <sampling+0x360>)
	sampler.trigger_position=0;     // reset sample start here

uint8_t looper_dat[8]={1,3,7,15};
uint32_t lfo_tempo_hold;

if (tempo_mod_hold!=tempo_mod){					// lfo lut calculate only when changes tempo
 80028fe:	499b      	ldr	r1, [pc, #620]	; (8002b6c <sampling+0x364>)
seqpos_i=0; //reset
 8002900:	2300      	movs	r3, #0
 8002902:	8003      	strh	r3, [r0, #0]
	sampler.trigger_position=0;     // reset sample start here
 8002904:	9803      	ldr	r0, [sp, #12]
if (tempo_mod_hold!=tempo_mod){					// lfo lut calculate only when changes tempo
 8002906:	880a      	ldrh	r2, [r1, #0]
	sampler.trigger_position=0;     // reset sample start here
 8002908:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
if (tempo_mod_hold!=tempo_mod){					// lfo lut calculate only when changes tempo
 800290c:	9b02      	ldr	r3, [sp, #8]
 800290e:	429a      	cmp	r2, r3
 8002910:	f000 8769 	beq.w	80037e6 <sampling+0xfde>
		float lfo_tempo_calc=((1647099*4)/(tempo_mod)); // deafualt 1 note    12867  at 512
 8002914:	9a02      	ldr	r2, [sp, #8]
 8002916:	4b96      	ldr	r3, [pc, #600]	; (8002b70 <sampling+0x368>)
 8002918:	fbb3 f3f2 	udiv	r3, r3, r2
 800291c:	ee07 3a90 	vmov	s15, r3
						for (i=0;i<256;i++){								// 128 is 1 note
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/16;               //  at 64 its 12867
 8002920:	eddf 6a94 	vldr	s13, [pc, #592]	; 8002b74 <sampling+0x36c>
 8002924:	4a94      	ldr	r2, [pc, #592]	; (8002b78 <sampling+0x370>)
		float lfo_tempo_calc=((1647099*4)/(tempo_mod)); // deafualt 1 note    12867  at 512
 8002926:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800292a:	2301      	movs	r3, #1
						for (i=0;i<256;i++){								// 128 is 1 note
 800292c:	f240 1001 	movw	r0, #257	; 0x101
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/16;               //  at 64 its 12867
 8002930:	ee07 3a90 	vmov	s15, r3
 8002934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						for (i=0;i<256;i++){								// 128 is 1 note
 8002938:	3301      	adds	r3, #1
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/16;               //  at 64 its 12867
 800293a:	ee67 7a87 	vmul.f32	s15, s15, s14
						for (i=0;i<256;i++){								// 128 is 1 note
 800293e:	4283      	cmp	r3, r0
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/16;               //  at 64 its 12867
 8002940:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	lfo_tempo_lut[i]= lfo_tempo_hold;
 8002948:	ee17 4a90 	vmov	r4, s15
 800294c:	f822 4f02 	strh.w	r4, [r2, #2]!
						for (i=0;i<256;i++){								// 128 is 1 note
 8002950:	d1ee      	bne.n	8002930 <sampling+0x128>
 8002952:	4b8a      	ldr	r3, [pc, #552]	; (8002b7c <sampling+0x374>)
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	461a      	mov	r2, r3
 8002958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800295c:	8013      	strh	r3, [r2, #0]
}}
tempo_mod_hold=tempo_mod;   // for lfo
 800295e:	9b02      	ldr	r3, [sp, #8]
 for (pars_counter=0;pars_counter<5;pars_counter++)	{   // fill up pointers and reload vars


		sample_accus[pars_counter]=sample_accus_hold[pars_counter];
	 if (note[pars_counter].osc==0) {osc_pointers[pars_counter]=&sample_Accu[5];  sound_enable[pars_counter]=0;} // zero
	 if (note[4].osc==0) osc_pointers[5]=&sample_Accu[5];
 8002960:	f8df 823c 	ldr.w	r8, [pc, #572]	; 8002ba0 <sampling+0x398>
tempo_mod_hold=tempo_mod;   // for lfo
 8002964:	800b      	strh	r3, [r1, #0]
		sample_accus[pars_counter]=sample_accus_hold[pars_counter];
 8002966:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8002ba4 <sampling+0x39c>
 800296a:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8002ba8 <sampling+0x3a0>
patch_lists();
 800296e:	f7fe fdc7 	bl	8001500 <patch_lists>
		sample_accus[pars_counter]=sample_accus_hold[pars_counter];
 8002972:	4a83      	ldr	r2, [pc, #524]	; (8002b80 <sampling+0x378>)
	 if (note[4].osc==0) osc_pointers[5]=&sample_Accu[5];
 8002974:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
 8002978:	9305      	str	r3, [sp, #20]
		sample_accus[pars_counter]=sample_accus_hold[pars_counter];
 800297a:	4614      	mov	r4, r2
 800297c:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8002980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002982:	f8d9 3000 	ldr.w	r3, [r9]
 8002986:	f8db e014 	ldr.w	lr, [fp, #20]
 800298a:	9905      	ldr	r1, [sp, #20]
 800298c:	46a1      	mov	r9, r4
 800298e:	2500      	movs	r5, #0
 8002990:	f849 3910 	str.w	r3, [r9], #-16
uint8_t sound_enable[8]={0,0,0,0,0,0,0,0};  // better here
 8002994:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8002998:	af1c      	add	r7, sp, #112	; 0x70
		sample_accus[pars_counter]=sample_accus_hold[pars_counter];
 800299a:	46ac      	mov	ip, r5
 800299c:	464a      	mov	r2, r9
 800299e:	465c      	mov	r4, fp
	 if (note[pars_counter].osc==0) {osc_pointers[pars_counter]=&sample_Accu[5];  sound_enable[pars_counter]=0;} // zero
 80029a0:	f818 3025 	ldrb.w	r3, [r8, r5, lsl #2]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f040 838f 	bne.w	80030c8 <sampling+0x8c0>
	 if (note[4].osc==0) osc_pointers[5]=&sample_Accu[5];
 80029aa:	2900      	cmp	r1, #0
	 if (note[pars_counter].osc==0) {osc_pointers[pars_counter]=&sample_Accu[5];  sound_enable[pars_counter]=0;} // zero
 80029ac:	7033      	strb	r3, [r6, #0]
 80029ae:	ab21      	add	r3, sp, #132	; 0x84
 80029b0:	6023      	str	r3, [r4, #0]
	 if (note[4].osc==0) osc_pointers[5]=&sample_Accu[5];
 80029b2:	bf04      	itt	eq
 80029b4:	469e      	moveq	lr, r3
 80029b6:	f04f 0c01 	moveq.w	ip, #1
 for (pars_counter=0;pars_counter<5;pars_counter++)	{   // fill up pointers and reload vars
 80029ba:	3504      	adds	r5, #4
 80029bc:	2d14      	cmp	r5, #20
 80029be:	f104 0404 	add.w	r4, r4, #4
 80029c2:	f106 0601 	add.w	r6, r6, #1
 80029c6:	f107 0704 	add.w	r7, r7, #4
 80029ca:	f102 0204 	add.w	r2, r2, #4
 80029ce:	d1e7      	bne.n	80029a0 <sampling+0x198>
 80029d0:	f1bc 0f00 	cmp.w	ip, #0
 80029d4:	d001      	beq.n	80029da <sampling+0x1d2>
 80029d6:	f8cb e014 	str.w	lr, [fp, #20]
	 			if (note[pars_counter].osc>7) {osc_pointers[pars_counter]=&sample_Accu[5]; sound_enable[pars_counter]=0;}  // zero


 }

note_holdA=0;
 80029da:	4b6a      	ldr	r3, [pc, #424]	; (8002b84 <sampling+0x37c>)
uint8_t seq_dat=(1<<(((adc_values[0]>>3))+1))-1;
///////////////////////////////////////////////////////////////



for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 80029dc:	9d01      	ldr	r5, [sp, #4]
		    float tune_temp=sample_Noteadd[note_number];
		    if ((note[mask_i].velocity)&&(note[mask_i].osc))	    LCD_Info[15+mask_i]=major_notes[note_number]; else LCD_Info[15+mask_i]=95;
		    //note[mask_i].tuned=sample_Noteadd[MajorNote[detune_temp]];   // put unit tune here


		    if (notes_joined[seq.loop[mask_i]] )		note[mask_i].tuned=tune_temp*0.99;	// this works
 80029de:	f8cd 901c 	str.w	r9, [sp, #28]
note_holdA=0;
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
isr_change=0;
 80029e6:	4b68      	ldr	r3, [pc, #416]	; (8002b88 <sampling+0x380>)
 80029e8:	ed9f 8a68 	vldr	s16, [pc, #416]	; 8002b8c <sampling+0x384>
		    if (notes_joined[seq.loop[mask_i]] )		note[mask_i].tuned=tune_temp*0.99;	// this works
 80029ec:	f8dd 9018 	ldr.w	r9, [sp, #24]
isr_change=0;
 80029f0:	801a      	strh	r2, [r3, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 80029f2:	802a      	strh	r2, [r5, #0]
	sampling_position=i>>6;   //   0-8 steps
 80029f4:	4966      	ldr	r1, [pc, #408]	; (8002b90 <sampling+0x388>)
 80029f6:	f3c2 1387 	ubfx	r3, r2, #6, #8
 80029fa:	700b      	strb	r3, [r1, #0]
	sampling_position_b=(sampling_position+7)&7;
 80029fc:	4965      	ldr	r1, [pc, #404]	; (8002b94 <sampling+0x38c>)
 80029fe:	3307      	adds	r3, #7
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	700b      	strb	r3, [r1, #0]
if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;isr_change=next_isr+1;  }  else {tempo_count++;  }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 8002a06:	f8b9 3000 	ldrh.w	r3, [r9]
 8002a0a:	9902      	ldr	r1, [sp, #8]
 8002a0c:	428b      	cmp	r3, r1
 8002a0e:	f0c0 834b 	bcc.w	80030a8 <sampling+0x8a0>
 8002a12:	9b04      	ldr	r3, [sp, #16]
 8002a14:	485c      	ldr	r0, [pc, #368]	; (8002b88 <sampling+0x380>)
 8002a16:	8819      	ldrh	r1, [r3, #0]
 8002a18:	3101      	adds	r1, #1
 8002a1a:	f3c1 010b 	ubfx	r1, r1, #0, #12
 8002a1e:	8019      	strh	r1, [r3, #0]
 8002a20:	2300      	movs	r3, #0
 8002a22:	f8a9 3000 	strh.w	r3, [r9]
 8002a26:	1c4b      	adds	r3, r1, #1
 8002a28:	8003      	strh	r3, [r0, #0]
	if ((next_isr>>4) != (seq.pos)) { 					//     min 6400 cycles per seq.pos ,         next note step 140ms
 8002a2a:	f89a 0000 	ldrb.w	r0, [sl]
 8002a2e:	ebb0 1f11 	cmp.w	r0, r1, lsr #4
 8002a32:	ea4f 1311 	mov.w	r3, r1, lsr #4
 8002a36:	f000 831f 	beq.w	8003078 <sampling+0x870>
if (seq.tempo<60) {tempo_start=0; seq.pos=0;sampler.acurrent_sample=1;} // loop on single sample
 8002a3a:	f89a 1001 	ldrb.w	r1, [sl, #1]
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8002a3e:	b2db      	uxtb	r3, r3
if (seq.tempo<60) {tempo_start=0; seq.pos=0;sampler.acurrent_sample=1;} // loop on single sample
 8002a40:	293b      	cmp	r1, #59	; 0x3b
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8002a42:	f88a 3000 	strb.w	r3, [sl]
if (seq.tempo<60) {tempo_start=0; seq.pos=0;sampler.acurrent_sample=1;} // loop on single sample
 8002a46:	f240 831c 	bls.w	8003082 <sampling+0x87a>
		seq.loop[0]=(note[0].timeshift+(seq.pos&note[0].slide_length))&31;
 8002a4a:	f898 4009 	ldrb.w	r4, [r8, #9]
 8002a4e:	f898 6006 	ldrb.w	r6, [r8, #6]
			note[0].pitch=(notes_joined[seq.loop[0]])+(note[0].transpose);    // maybe join 1 and 2
 8002a52:	4f37      	ldr	r7, [pc, #220]	; (8002b30 <sampling+0x328>)
		seq.loop[1]=(note[1].timeshift+(seq.pos&note[1].slide_length))&31;
 8002a54:	f898 0019 	ldrb.w	r0, [r8, #25]
		seqpos_i=i+1;   //record postion
 8002a58:	4943      	ldr	r1, [pc, #268]	; (8002b68 <sampling+0x360>)
		seq.loop[0]=(note[0].timeshift+(seq.pos&note[0].slide_length))&31;
 8002a5a:	401c      	ands	r4, r3
 8002a5c:	4434      	add	r4, r6
 8002a5e:	f004 041f 	and.w	r4, r4, #31
 8002a62:	f88a 4024 	strb.w	r4, [sl, #36]	; 0x24
			note[0].pitch=(notes_joined[seq.loop[0]])+(note[0].transpose);    // maybe join 1 and 2
 8002a66:	5d3e      	ldrb	r6, [r7, r4]
		seq.loop[1]=(note[1].timeshift+(seq.pos&note[1].slide_length))&31;
 8002a68:	f898 4016 	ldrb.w	r4, [r8, #22]
 8002a6c:	4018      	ands	r0, r3
 8002a6e:	4420      	add	r0, r4
 8002a70:	f000 001f 	and.w	r0, r0, #31
		seqpos_i=i+1;   //record postion
 8002a74:	3201      	adds	r2, #1
 8002a76:	800a      	strh	r2, [r1, #0]
		seq.loop[2]=(note[2].timeshift+(seq.pos&note[2].slide_length))&31; // this is really handy with sync to notes
 8002a78:	f898 1029 	ldrb.w	r1, [r8, #41]	; 0x29
			note[1].pitch=(notes_joined[seq.loop[1]])+(note[1].transpose);  //loop 8 notes from pos and x times
 8002a7c:	5c3c      	ldrb	r4, [r7, r0]
		seq.loop[1]=(note[1].timeshift+(seq.pos&note[1].slide_length))&31;
 8002a7e:	f88a 0025 	strb.w	r0, [sl, #37]	; 0x25
		seq.loop[2]=(note[2].timeshift+(seq.pos&note[2].slide_length))&31; // this is really handy with sync to notes
 8002a82:	f898 0026 	ldrb.w	r0, [r8, #38]	; 0x26
		seq.loop[3]=(note[3].timeshift+(seq.pos&note[3].slide_length))&31;
 8002a86:	f898 2039 	ldrb.w	r2, [r8, #57]	; 0x39
		seq.loop[2]=(note[2].timeshift+(seq.pos&note[2].slide_length))&31; // this is really handy with sync to notes
 8002a8a:	4019      	ands	r1, r3
 8002a8c:	4401      	add	r1, r0
 8002a8e:	f001 011f 	and.w	r1, r1, #31
 8002a92:	f88a 1026 	strb.w	r1, [sl, #38]	; 0x26
			note[2].pitch=(notes_joined[seq.loop[2]])+(note[2].transpose);  //loop 8 notes from pos and x times
 8002a96:	5c78      	ldrb	r0, [r7, r1]
		seq.loop[3]=(note[3].timeshift+(seq.pos&note[3].slide_length))&31;
 8002a98:	f898 1036 	ldrb.w	r1, [r8, #54]	; 0x36
 8002a9c:	401a      	ands	r2, r3
 8002a9e:	440a      	add	r2, r1
 8002aa0:	f002 021f 	and.w	r2, r2, #31
 8002aa4:	f88a 2027 	strb.w	r2, [sl, #39]	; 0x27
		note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8002aa8:	5cb9      	ldrb	r1, [r7, r2]
		seq.loop[4]=(note[4].timeshift+(seq.pos&note[4].slide_length))&15;  // use this for sample
 8002aaa:	f898 2049 	ldrb.w	r2, [r8, #73]	; 0x49
 8002aae:	f898 7046 	ldrb.w	r7, [r8, #70]	; 0x46
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	443a      	add	r2, r7
		sampler.acurrent_sample=sampler.Snotes1 [seq.loop[4]]; // 0 is none
 8002ab6:	9f03      	ldr	r7, [sp, #12]
		seq.loop[4]=(note[4].timeshift+(seq.pos&note[4].slide_length))&15;  // use this for sample
 8002ab8:	f002 020f 	and.w	r2, r2, #15
 8002abc:	f88a 2028 	strb.w	r2, [sl, #40]	; 0x28
		sampler.acurrent_sample=sampler.Snotes1 [seq.loop[4]]; // 0 is none
 8002ac0:	443a      	add	r2, r7
			note[0].pitch=(notes_joined[seq.loop[0]])+(note[0].transpose);    // maybe join 1 and 2
 8002ac2:	f898 7005 	ldrb.w	r7, [r8, #5]
 8002ac6:	443e      	add	r6, r7
 8002ac8:	f888 6002 	strb.w	r6, [r8, #2]
			note[1].pitch=(notes_joined[seq.loop[1]])+(note[1].transpose);  //loop 8 notes from pos and x times
 8002acc:	f898 6015 	ldrb.w	r6, [r8, #21]
 8002ad0:	4434      	add	r4, r6
 8002ad2:	f888 4012 	strb.w	r4, [r8, #18]
			note[2].pitch=(notes_joined[seq.loop[2]])+(note[2].transpose);  //loop 8 notes from pos and x times
 8002ad6:	f898 4025 	ldrb.w	r4, [r8, #37]	; 0x25
 8002ada:	4420      	add	r0, r4
 8002adc:	f888 0022 	strb.w	r0, [r8, #34]	; 0x22
		note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8002ae0:	f898 0035 	ldrb.w	r0, [r8, #53]	; 0x35
		sampler.acurrent_sample=sampler.Snotes1 [seq.loop[4]]; // 0 is none
 8002ae4:	9c03      	ldr	r4, [sp, #12]
		note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8002ae6:	4401      	add	r1, r0
		sampler.acurrent_sample=sampler.Snotes1 [seq.loop[4]]; // 0 is none
 8002ae8:	f892 0056 	ldrb.w	r0, [r2, #86]	; 0x56
 8002aec:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
		sampler.acurrent_sample2=sampler.Snotes2 [seq.loop[4]]; // 0 is none
 8002af0:	4620      	mov	r0, r4
 8002af2:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8002af6:	f884 2082 	strb.w	r2, [r4, #130]	; 0x82
		serial_tosend=1;
 8002afa:	4c27      	ldr	r4, [pc, #156]	; (8002b98 <sampling+0x390>)
		note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8002afc:	f888 1032 	strb.w	r1, [r8, #50]	; 0x32
		if (sampler.repeat) pos_divide=15>>sampler.repeat;
 8002b00:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
		serial_tosend=1;
 8002b04:	2201      	movs	r2, #1
 8002b06:	7022      	strb	r2, [r4, #0]
		note[4].position=1;    // should trigger always
 8002b08:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
		if (sampler.repeat) pos_divide=15>>sampler.repeat;
 8002b0c:	220f      	movs	r2, #15
 8002b0e:	b109      	cbz	r1, 8002b14 <sampling+0x30c>
 8002b10:	410a      	asrs	r2, r1
 8002b12:	b2d2      	uxtb	r2, r2
		if (sampler.trigger_1==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 8002b14:	4013      	ands	r3, r2
 8002b16:	9a03      	ldr	r2, [sp, #12]
 8002b18:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d144      	bne.n	8002bac <sampling+0x3a4>
 8002b22:	9903      	ldr	r1, [sp, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f8a1 2044 	strh.w	r2, [r1, #68]	; 0x44
 8002b2a:	e03f      	b.n	8002bac <sampling+0x3a4>
 8002b2c:	20014738 	.word	0x20014738
 8002b30:	2000e9d0 	.word	0x2000e9d0
 8002b34:	20008b1a 	.word	0x20008b1a
 8002b38:	2001452c 	.word	0x2001452c
 8002b3c:	20012ec0 	.word	0x20012ec0
 8002b40:	20012ebe 	.word	0x20012ebe
 8002b44:	200090f2 	.word	0x200090f2
 8002b48:	20008e06 	.word	0x20008e06
 8002b4c:	200132e3 	.word	0x200132e3
 8002b50:	42a00000 	.word	0x42a00000
 8002b54:	08008794 	.word	0x08008794
 8002b58:	20014730 	.word	0x20014730
 8002b5c:	20008db0 	.word	0x20008db0
 8002b60:	2000e9ca 	.word	0x2000e9ca
 8002b64:	2001452a 	.word	0x2001452a
 8002b68:	20013300 	.word	0x20013300
 8002b6c:	2001472c 	.word	0x2001472c
 8002b70:	006487ec 	.word	0x006487ec
 8002b74:	3d800000 	.word	0x3d800000
 8002b78:	2000db9a 	.word	0x2000db9a
 8002b7c:	2000d764 	.word	0x2000d764
 8002b80:	20012e1c 	.word	0x20012e1c
 8002b84:	2000e9cd 	.word	0x2000e9cd
 8002b88:	2000db6c 	.word	0x2000db6c
 8002b8c:	46fe3a00 	.word	0x46fe3a00
 8002b90:	20012ec6 	.word	0x20012ec6
 8002b94:	20012ec7 	.word	0x20012ec7
 8002b98:	20013504 	.word	0x20013504
 8002b9c:	200132d0 	.word	0x200132d0
 8002ba0:	20008c60 	.word	0x20008c60
 8002ba4:	20012e44 	.word	0x20012e44
 8002ba8:	2000e9f4 	.word	0x2000e9f4
		if (sampler.trigger_2==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 8002bac:	9a03      	ldr	r2, [sp, #12]
 8002bae:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d103      	bne.n	8002bbe <sampling+0x3b6>
 8002bb6:	9903      	ldr	r1, [sp, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f8a1 2044 	strh.w	r2, [r1, #68]	; 0x44
		if (sampler.trigger_3==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 8002bbe:	9a03      	ldr	r2, [sp, #12]
 8002bc0:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d103      	bne.n	8002bd0 <sampling+0x3c8>
 8002bc8:	9903      	ldr	r1, [sp, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f8a1 2044 	strh.w	r2, [r1, #68]	; 0x44
		if (sampler.trigger_4==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 8002bd0:	9a03      	ldr	r2, [sp, #12]
 8002bd2:	f892 203b 	ldrb.w	r2, [r2, #59]	; 0x3b
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d103      	bne.n	8002be2 <sampling+0x3da>
 8002bda:	9a03      	ldr	r2, [sp, #12]
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
		patch_target_replace();
 8002be2:	f7fe fb69 	bl	80012b8 <patch_target_replace>
			if  (note[mask_i].osc<3)  { if (seq.loop[mask_i]==0)  {note[mask_i].position=0;   } else  note[mask_i].position=sampling_position+1;    }   // disables trigger ?
 8002be6:	4b76      	ldr	r3, [pc, #472]	; (8002dc0 <sampling+0x5b8>)
 8002be8:	4c76      	ldr	r4, [pc, #472]	; (8002dc4 <sampling+0x5bc>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	4f76      	ldr	r7, [pc, #472]	; (8002dc8 <sampling+0x5c0>)
 8002bee:	4e77      	ldr	r6, [pc, #476]	; (8002dcc <sampling+0x5c4>)
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	9305      	str	r3, [sp, #20]
		mask_result =0;
 8002bf6:	4b76      	ldr	r3, [pc, #472]	; (8002dd0 <sampling+0x5c8>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	801a      	strh	r2, [r3, #0]
			if  (note[mask_i].osc<3)  { if (seq.loop[mask_i]==0)  {note[mask_i].position=0;   } else  note[mask_i].position=sampling_position+1;    }   // disables trigger ?
 8002bfc:	7821      	ldrb	r1, [r4, #0]
 8002bfe:	7832      	ldrb	r2, [r6, #0]
 8002c00:	2902      	cmp	r1, #2
 8002c02:	d803      	bhi.n	8002c0c <sampling+0x404>
 8002c04:	2a00      	cmp	r2, #0
 8002c06:	f040 82c3 	bne.w	8003190 <sampling+0x988>
 8002c0a:	7122      	strb	r2, [r4, #4]
		    detune_temp=note[mask_i].pitch+note[mask_i].detune;
 8002c0c:	78a3      	ldrb	r3, [r4, #2]
 8002c0e:	7a20      	ldrb	r0, [r4, #8]
 8002c10:	4403      	add	r3, r0
 8002c12:	b2db      	uxtb	r3, r3
		    if (detune_temp>pitch_limit ) detune_temp=pitch_limit;
 8002c14:	2b3c      	cmp	r3, #60	; 0x3c
 8002c16:	f200 8261 	bhi.w	80030dc <sampling+0x8d4>
		    if (detune_temp>30 )   note_number=MinorNote[detune_temp-31];    // for now
 8002c1a:	2b1e      	cmp	r3, #30
 8002c1c:	f240 82ae 	bls.w	800317c <sampling+0x974>
 8002c20:	486c      	ldr	r0, [pc, #432]	; (8002dd4 <sampling+0x5cc>)
 8002c22:	4403      	add	r3, r0
		    float tune_temp=sample_Noteadd[note_number];
 8002c24:	f813 0c1f 	ldrb.w	r0, [r3, #-31]
 8002c28:	4b6b      	ldr	r3, [pc, #428]	; (8002dd8 <sampling+0x5d0>)
 8002c2a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8002c2e:	ee07 3a90 	vmov	s15, r3
 8002c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
		    if ((note[mask_i].velocity)&&(note[mask_i].osc))	    LCD_Info[15+mask_i]=major_notes[note_number]; else LCD_Info[15+mask_i]=95;
 8002c36:	79e3      	ldrb	r3, [r4, #7]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 823b 	beq.w	80030b4 <sampling+0x8ac>
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	f000 8238 	beq.w	80030b4 <sampling+0x8ac>
 8002c44:	4b65      	ldr	r3, [pc, #404]	; (8002ddc <sampling+0x5d4>)
 8002c46:	5c1b      	ldrb	r3, [r3, r0]
 8002c48:	703b      	strb	r3, [r7, #0]
		    if (notes_joined[seq.loop[mask_i]] )		note[mask_i].tuned=tune_temp*0.99;	// this works
 8002c4a:	4b65      	ldr	r3, [pc, #404]	; (8002de0 <sampling+0x5d8>)
 8002c4c:	5c9b      	ldrb	r3, [r3, r2]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 8238 	beq.w	80030c4 <sampling+0x8bc>
 8002c54:	ee17 0a90 	vmov	r0, s15
 8002c58:	f7fd fd54 	bl	8000704 <__aeabi_f2d>
 8002c5c:	a356      	add	r3, pc, #344	; (adr r3, 8002db8 <sampling+0x5b0>)
 8002c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c62:	f7fd fac1 	bl	80001e8 <__aeabi_dmul>
 8002c66:	f7fd fda5 	bl	80007b4 <__aeabi_d2uiz>
 8002c6a:	81e0      	strh	r0, [r4, #14]
		for (mask_i=0;mask_i<4;mask_i++)	{							// calc detune , slow ,also creates notes
 8002c6c:	4b5d      	ldr	r3, [pc, #372]	; (8002de4 <sampling+0x5dc>)
 8002c6e:	3410      	adds	r4, #16
 8002c70:	42a3      	cmp	r3, r4
 8002c72:	f107 0701 	add.w	r7, r7, #1
 8002c76:	f106 0601 	add.w	r6, r6, #1
 8002c7a:	d1bf      	bne.n	8002bfc <sampling+0x3f4>
		//note_tuned[3]=2751;
	} // end of note calcualte



	if ((i&63)==0)
 8002c7c:	882a      	ldrh	r2, [r5, #0]
 8002c7e:	0694      	lsls	r4, r2, #26
 8002c80:	f000 820a 	beq.w	8003098 <sampling+0x890>
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002c84:	3201      	adds	r2, #1
 8002c86:	b292      	uxth	r2, r2
 8002c88:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002c8c:	802a      	strh	r2, [r5, #0]
 8002c8e:	f4ff aeb1 	bcc.w	80029f4 <sampling+0x1ec>
int32_t  sample_temp4;
int32_t  sample_temp5;
int32_t  sample_temp6;


memcpy(&sample_counts_temp,sample_counts_holder,80);
 8002c92:	4c55      	ldr	r4, [pc, #340]	; (8002de8 <sampling+0x5e0>)
 8002c94:	f8dd 901c 	ldr.w	r9, [sp, #28]
	uint16_t*   ram_ptr=  &RAM	;  // pointer goes to LSB !!!!
	//uint16_t* sample_ptr= &flash_read_block;



	if(RAM_looper>=16383) RAM_looper=0;  // with 256 we have every 64 points along the sample for position
 8002c98:	f8df a174 	ldr.w	sl, [pc, #372]	; 8002e10 <sampling+0x608>
memcpy(&sample_counts_temp,sample_counts_holder,80);
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	2250      	movs	r2, #80	; 0x50
 8002ca0:	a826      	add	r0, sp, #152	; 0x98
 8002ca2:	f005 fb7d 	bl	80083a0 <memcpy>
	counter_16=counter_16+2;   // jump 512 bytes
 8002ca6:	4a51      	ldr	r2, [pc, #324]	; (8002dec <sampling+0x5e4>)
	if(RAM_looper>=16383) RAM_looper=0;  // with 256 we have every 64 points along the sample for position
 8002ca8:	f8ba 6000 	ldrh.w	r6, [sl]
	counter_16=counter_16+2;   // jump 512 bytes
 8002cac:	8813      	ldrh	r3, [r2, #0]
 8002cae:	3302      	adds	r3, #2
 8002cb0:	8013      	strh	r3, [r2, #0]
memcpy(&sample_counts_temp,sample_counts_holder,80);
 8002cb2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002cb4:	9304      	str	r3, [sp, #16]
 8002cb6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002cb8:	9305      	str	r3, [sp, #20]
 8002cba:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8002cbc:	9307      	str	r3, [sp, #28]
 8002cbe:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002cc0:	9306      	str	r3, [sp, #24]
sample_counts_temp[30]=note[0].tuned;
 8002cc2:	f8b8 300e 	ldrh.w	r3, [r8, #14]
 8002cc6:	930e      	str	r3, [sp, #56]	; 0x38
sample_counts_temp[31]=note[1].tuned;
 8002cc8:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 8002ccc:	930f      	str	r3, [sp, #60]	; 0x3c
sample_counts_temp[32]=note[2].tuned;
 8002cce:	f8b8 302e 	ldrh.w	r3, [r8, #46]	; 0x2e
 8002cd2:	9310      	str	r3, [sp, #64]	; 0x40
sample_counts_temp[33]=note[3].tuned;
 8002cd4:	f8b8 303e 	ldrh.w	r3, [r8, #62]	; 0x3e
 8002cd8:	9311      	str	r3, [sp, #68]	; 0x44
memcpy(&accu_count,sample_accu_counter,8);  // copy counters
 8002cda:	4b45      	ldr	r3, [pc, #276]	; (8002df0 <sampling+0x5e8>)
 8002cdc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ce0:	ab1a      	add	r3, sp, #104	; 0x68
 8002ce2:	e883 0003 	stmia.w	r3, {r0, r1}
memcpy(&sample_accus,sample_accus_hold,16);    // this is good
 8002ce6:	4b43      	ldr	r3, [pc, #268]	; (8002df4 <sampling+0x5ec>)
 8002ce8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
	if(RAM_looper>=16383) RAM_looper=0;  // with 256 we have every 64 points along the sample for position
 8002cea:	f643 75fe 	movw	r5, #16382	; 0x3ffe
memcpy(&sample_accus,sample_accus_hold,16);    // this is good
 8002cee:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
	if(RAM_looper>=16383) RAM_looper=0;  // with 256 we have every 64 points along the sample for position
 8002cf2:	42ae      	cmp	r6, r5
 8002cf4:	4a40      	ldr	r2, [pc, #256]	; (8002df8 <sampling+0x5f0>)

	for (i=0;i<512;i++){    // convert to signed , also use this for double buffer (no bank switch) 512 *16 is enough

	 //   flash_read_a= *(sample_ptr2+i);
	    flash_read_a= *(sample_ptr3+i) - 32767;
					if ((flash_read_a==32767)   ||  (flash_read_a==-32767))   flash_read_a=0;    // stop clicks from FF bytes
 8002cf6:	4d41      	ldr	r5, [pc, #260]	; (8002dfc <sampling+0x5f4>)
	if(RAM_looper>=16383) RAM_looper=0;  // with 256 we have every 64 points along the sample for position
 8002cf8:	bf84      	itt	hi
 8002cfa:	2300      	movhi	r3, #0
 8002cfc:	f8aa 3000 	strhhi.w	r3, [sl]
	for (i=0;i<512;i++){    // convert to signed , also use this for double buffer (no bank switch) 512 *16 is enough
 8002d00:	f502 6480 	add.w	r4, r2, #1024	; 0x400
					if ((flash_read_a==32767)   ||  (flash_read_a==-32767))   flash_read_a=0;    // stop clicks from FF bytes
 8002d04:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8002d08:	e005      	b.n	8002d16 <sampling+0x50e>
 8002d0a:	42a9      	cmp	r1, r5
 8002d0c:	bf08      	it	eq
 8002d0e:	2300      	moveq	r3, #0
	for (i=0;i<512;i++){    // convert to signed , also use this for double buffer (no bank switch) 512 *16 is enough
 8002d10:	4294      	cmp	r4, r2
					memcpy(&flash_read_block3[i*2],&flash_read_a,2);   // load second set ,hopefully
 8002d12:	8013      	strh	r3, [r2, #0]
	for (i=0;i<512;i++){    // convert to signed , also use this for double buffer (no bank switch) 512 *16 is enough
 8002d14:	d00c      	beq.n	8002d30 <sampling+0x528>
	    flash_read_a= *(sample_ptr3+i) - 32767;
 8002d16:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8002d1a:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002d1e:	3b7f      	subs	r3, #127	; 0x7f
 8002d20:	b219      	sxth	r1, r3
					if ((flash_read_a==32767)   ||  (flash_read_a==-32767))   flash_read_a=0;    // stop clicks from FF bytes
 8002d22:	4281      	cmp	r1, r0
	    flash_read_a= *(sample_ptr3+i) - 32767;
 8002d24:	b29b      	uxth	r3, r3
					if ((flash_read_a==32767)   ||  (flash_read_a==-32767))   flash_read_a=0;    // stop clicks from FF bytes
 8002d26:	d1f0      	bne.n	8002d0a <sampling+0x502>
 8002d28:	2300      	movs	r3, #0
	for (i=0;i<512;i++){    // convert to signed , also use this for double buffer (no bank switch) 512 *16 is enough
 8002d2a:	4294      	cmp	r4, r2
					memcpy(&flash_read_block3[i*2],&flash_read_a,2);   // load second set ,hopefully
 8002d2c:	8013      	strh	r3, [r2, #0]
	for (i=0;i<512;i++){    // convert to signed , also use this for double buffer (no bank switch) 512 *16 is enough
 8002d2e:	d1f2      	bne.n	8002d16 <sampling+0x50e>
 8002d30:	4a33      	ldr	r2, [pc, #204]	; (8002e00 <sampling+0x5f8>)
 8002d32:	9901      	ldr	r1, [sp, #4]

	}
	for (i=0;i<512;i++){    // convert to signed , also use this for double buffer (no bank switch) 512 *16 is enough

			    flash_read_a= *(signed_ptr+i) - 32767;
			    if ((flash_read_a==32767)   ||  (flash_read_a==-32767))   flash_read_a=0;    // stop clicks from FF bytes
 8002d34:	4d31      	ldr	r5, [pc, #196]	; (8002dfc <sampling+0x5f4>)
 8002d36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d3a:	800b      	strh	r3, [r1, #0]
 8002d3c:	f502 6480 	add.w	r4, r2, #1024	; 0x400
 8002d40:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8002d44:	e005      	b.n	8002d52 <sampling+0x54a>
 8002d46:	42a9      	cmp	r1, r5
 8002d48:	bf08      	it	eq
 8002d4a:	2300      	moveq	r3, #0
	for (i=0;i<512;i++){    // convert to signed , also use this for double buffer (no bank switch) 512 *16 is enough
 8002d4c:	42a2      	cmp	r2, r4
			    memcpy(&flash_read_block[i*2],&flash_read_a,2);   // load first set
 8002d4e:	8013      	strh	r3, [r2, #0]
	for (i=0;i<512;i++){    // convert to signed , also use this for double buffer (no bank switch) 512 *16 is enough
 8002d50:	d00c      	beq.n	8002d6c <sampling+0x564>
			    flash_read_a= *(signed_ptr+i) - 32767;
 8002d52:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8002d56:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002d5a:	3b7f      	subs	r3, #127	; 0x7f
 8002d5c:	b219      	sxth	r1, r3
			    if ((flash_read_a==32767)   ||  (flash_read_a==-32767))   flash_read_a=0;    // stop clicks from FF bytes
 8002d5e:	4281      	cmp	r1, r0
			    flash_read_a= *(signed_ptr+i) - 32767;
 8002d60:	b29b      	uxth	r3, r3
			    if ((flash_read_a==32767)   ||  (flash_read_a==-32767))   flash_read_a=0;    // stop clicks from FF bytes
 8002d62:	d1f0      	bne.n	8002d46 <sampling+0x53e>
 8002d64:	2300      	movs	r3, #0
	for (i=0;i<512;i++){    // convert to signed , also use this for double buffer (no bank switch) 512 *16 is enough
 8002d66:	42a2      	cmp	r2, r4
			    memcpy(&flash_read_block[i*2],&flash_read_a,2);   // load first set
 8002d68:	8013      	strh	r3, [r2, #0]
	for (i=0;i<512;i++){    // convert to signed , also use this for double buffer (no bank switch) 512 *16 is enough
 8002d6a:	d1f2      	bne.n	8002d52 <sampling+0x54a>


///    downsample  is a no go without playback from RAM , leave it , work on loops etc
//	sine_count_sample();   //change playback rate

	 if (LFO_square[0].out[0]>10) LCD_Info[60]=94  ;  else LCD_Info[60]=95;
 8002d6c:	4a25      	ldr	r2, [pc, #148]	; (8002e04 <sampling+0x5fc>)
 8002d6e:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <sampling+0x600>)
 8002d70:	8891      	ldrh	r1, [r2, #4]
	 if (LFO_square[2].out[0]>10) LCD_Info[60]=94  ;  else LCD_Info[62]=95;
 8002d72:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002d74:	4d25      	ldr	r5, [pc, #148]	; (8002e0c <sampling+0x604>)
	 if (LFO_square[0].out[0]>10) LCD_Info[60]=94  ;  else LCD_Info[60]=95;
 8002d76:	290a      	cmp	r1, #10
 8002d78:	bf8c      	ite	hi
 8002d7a:	215e      	movhi	r1, #94	; 0x5e
 8002d7c:	215f      	movls	r1, #95	; 0x5f
	 if (LFO_square[2].out[0]>10) LCD_Info[60]=94  ;  else LCD_Info[62]=95;
 8002d7e:	2a0a      	cmp	r2, #10
 8002d80:	bf8c      	ite	hi
 8002d82:	225e      	movhi	r2, #94	; 0x5e
 8002d84:	225f      	movls	r2, #95	; 0x5f
 8002d86:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 8002d8a:	bf94      	ite	ls
 8002d8c:	f883 203e 	strbls.w	r2, [r3, #62]	; 0x3e
 8002d90:	f883 203c 	strbhi.w	r2, [r3, #60]	; 0x3c
	 uint8_t sampler_adder_enable=1;

		// TIME FINAL IS 68 UP TO HERE ATM
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002d94:	9b01      	ldr	r3, [sp, #4]
 8002d96:	2400      	movs	r4, #0
 8002d98:	801c      	strh	r4, [r3, #0]
			if (sample_accus[1]>524287) {sample_accus[1] =-0-sample_accus[1] ;}// faster >  than &  ,conditional statement has no ' & '  in assy
			if (sample_accus[2]>524287) {sample_accus[2] =-0-sample_accus[2] ;} //
			if (sample_accus[3]>524287) {sample_accus[3] =-0-sample_accus[3] ;} //  6 cycles


			if (sound_enable[0]==2)    	{sample_Accu[0]=(abs(sample_accus[0])-262144)<<1;	}  // not much help at all
 8002d9a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8002d9e:	930a      	str	r3, [sp, #40]	; 0x28
			if (sound_enable[1]==2)		 	{	sample_Accu[1]=(abs(sample_accus[1])-262144)<<1;}
 8002da0:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
 8002da4:	930b      	str	r3, [sp, #44]	; 0x2c
			if (sound_enable[2]==2)		 	{sample_Accu[2]=(abs(sample_accus[2])-262144)<<1;}
 8002da6:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
 8002daa:	930c      	str	r3, [sp, #48]	; 0x30
			if (sound_enable[3]==2) 				{sample_Accu[3]=(abs(sample_accus[3])-262144)<<1;}
 8002dac:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
 8002db0:	930d      	str	r3, [sp, #52]	; 0x34
	 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.006)    ;
 8002db2:	9b03      	ldr	r3, [sp, #12]
 8002db4:	9302      	str	r3, [sp, #8]
 8002db6:	e127      	b.n	8003008 <sampling+0x800>
 8002db8:	7ae147ae 	.word	0x7ae147ae
 8002dbc:	3fefae14 	.word	0x3fefae14
 8002dc0:	20012ec6 	.word	0x20012ec6
 8002dc4:	20008c60 	.word	0x20008c60
 8002dc8:	200090bb 	.word	0x200090bb
 8002dcc:	200132f4 	.word	0x200132f4
 8002dd0:	2000dda4 	.word	0x2000dda4
 8002dd4:	08008d34 	.word	0x08008d34
 8002dd8:	0800a1fc 	.word	0x0800a1fc
 8002ddc:	0800a0e0 	.word	0x0800a0e0
 8002de0:	2000e9d0 	.word	0x2000e9d0
 8002de4:	20008ca0 	.word	0x20008ca0
 8002de8:	20012e5c 	.word	0x20012e5c
 8002dec:	2000ad1c 	.word	0x2000ad1c
 8002df0:	20012e0c 	.word	0x20012e0c
 8002df4:	20012e44 	.word	0x20012e44
 8002df8:	2000ca06 	.word	0x2000ca06
 8002dfc:	ffff8001 	.word	0xffff8001
 8002e00:	2000c202 	.word	0x2000c202
 8002e04:	20009400 	.word	0x20009400
 8002e08:	200090ac 	.word	0x200090ac
 8002e0c:	20009014 	.word	0x20009014
 8002e10:	20009510 	.word	0x20009510
	if (sampler.ram_seq<sampler.start_current) {sample_input=0;  ram_synced=32767;}
 8002e14:	2300      	movs	r3, #0
 8002e16:	9316      	str	r3, [sp, #88]	; 0x58
	ram_synced=(ram_synced-32767)<<4;
 8002e18:	9317      	str	r3, [sp, #92]	; 0x5c
	if (sampler.ram_seq2<sampler.start_current2)  sample_temp7=0; else
 8002e1a:	9b02      	ldr	r3, [sp, #8]
 8002e1c:	f8b3 107e 	ldrh.w	r1, [r3, #126]	; 0x7e
 8002e20:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002e24:	428b      	cmp	r3, r1
	sample_temp7=*(sample_ptr3+(sampler.ram_seq2&255));
 8002e26:	bf9b      	ittet	ls
 8002e28:	4bb5      	ldrls	r3, [pc, #724]	; (8003100 <sampling+0x8f8>)
 8002e2a:	b2c8      	uxtbls	r0, r1
	if (sampler.ram_seq2<sampler.start_current2)  sample_temp7=0; else
 8002e2c:	2300      	movhi	r3, #0
	sample_temp7=*(sample_ptr3+(sampler.ram_seq2&255));
 8002e2e:	f933 3010 	ldrshls.w	r3, [r3, r0, lsl #1]
 8002e32:	9315      	str	r3, [sp, #84]	; 0x54
	if  (sampler_mute[0])  sample_input=0;    // mute   , stops click on start
 8002e34:	4bb3      	ldr	r3, [pc, #716]	; (8003104 <sampling+0x8fc>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	b10b      	cbz	r3, 8002e3e <sampling+0x636>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9316      	str	r3, [sp, #88]	; 0x58
	if  (sampler_mute[1])  sample_temp7=0;
 8002e3e:	4bb1      	ldr	r3, [pc, #708]	; (8003104 <sampling+0x8fc>)
 8002e40:	785b      	ldrb	r3, [r3, #1]
 8002e42:	b10b      	cbz	r3, 8002e48 <sampling+0x640>
 8002e44:	2300      	movs	r3, #0
 8002e46:	9315      	str	r3, [sp, #84]	; 0x54
		if	((i&1)==1)   {  RAM_looper++;sampler.ram_seq++; sampler.ram_seq2++; }
 8002e48:	07e0      	lsls	r0, r4, #31
 8002e4a:	d50b      	bpl.n	8002e64 <sampling+0x65c>
 8002e4c:	1c53      	adds	r3, r2, #1
 8002e4e:	9a02      	ldr	r2, [sp, #8]
 8002e50:	f8a2 307c 	strh.w	r3, [r2, #124]	; 0x7c
 8002e54:	1c4b      	adds	r3, r1, #1
 8002e56:	f8a2 307e 	strh.w	r3, [r2, #126]	; 0x7e
 8002e5a:	f8ba 3000 	ldrh.w	r3, [sl]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f8aa 3000 	strh.w	r3, [sl]
	if (i==seqpos_i) {sample_counts_temp[20]=sample_counts_temp[30]; 		//delay tuned changed till correct time
 8002e64:	4ba8      	ldr	r3, [pc, #672]	; (8003108 <sampling+0x900>)
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	42a3      	cmp	r3, r4
 8002e6a:	d107      	bne.n	8002e7c <sampling+0x674>
	sample_counts_temp[23]=sample_counts_temp[33];
 8002e6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e6e:	9306      	str	r3, [sp, #24]
	sample_counts_temp[22]=sample_counts_temp[32];
 8002e70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e72:	9307      	str	r3, [sp, #28]
	sample_counts_temp[21]=sample_counts_temp[31];
 8002e74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002e76:	9305      	str	r3, [sp, #20]
	if (i==seqpos_i) {sample_counts_temp[20]=sample_counts_temp[30]; 		//delay tuned changed till correct time
 8002e78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e7a:	9304      	str	r3, [sp, #16]
	if ((i&63)==0)	{
 8002e7c:	06a2      	lsls	r2, r4, #26
 8002e7e:	f000 81be 	beq.w	80031fe <sampling+0x9f6>
	if(ADSR[0].release)       note[0].velocity=ADSR[0].buffer[sampling_position]>>2;   // disables LFO on release set to 0
 8002e82:	78eb      	ldrb	r3, [r5, #3]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f040 81af 	bne.w	80031e8 <sampling+0x9e0>


			sample_temp1=(*osc_pointers[0])*note[0].velocity;
 8002e8a:	f898 0007 	ldrb.w	r0, [r8, #7]
	if(ADSR[1].release)       note[1].velocity=ADSR[1].buffer[sampling_position]>>2;
 8002e8e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f040 817f 	bne.w	8003196 <sampling+0x98e>
	if(ADSR[2].release)       note[2].velocity=ADSR[2].buffer[sampling_position]>>2;
 8002e98:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f

			sample_temp2=(sample_temp1)>>12;

			sample_temp1=(*osc_pointers[1])*note[1].velocity; // needs cut a bit  ,default 20bit
 8002e9c:	f898 1017 	ldrb.w	r1, [r8, #23]
	if(ADSR[2].release)       note[2].velocity=ADSR[2].buffer[sampling_position]>>2;
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f040 8187 	bne.w	80031b4 <sampling+0x9ac>
	if(ADSR[3].release)       note[3].velocity=ADSR[3].buffer[sampling_position]>>2;
 8002ea6:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
			sample_temp3=sample_temp1>>12; // 20+8


			sample_temp1=(*osc_pointers[2])*note[2].velocity;      // needs some gain fine tune !
 8002eaa:	f898 2027 	ldrb.w	r2, [r8, #39]	; 0x27
	if(ADSR[3].release)       note[3].velocity=ADSR[3].buffer[sampling_position]>>2;
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f040 818f 	bne.w	80031d2 <sampling+0x9ca>
			sample_temp4 =sample_temp1>>12;    // 64 default 20+8

		//	{sample_Accu[9]=sample_input;sample_Accu[8]=sample_input;sample_Accu[7]=sample_input;sample_Accu[6]=sample_input;}
					//if (note[3].position) sample_Accu[9]=(ram_temp+sample_Accu[9])>>1; // bit hot , also  add avr

					sample_temp1=(*osc_pointers[3])*	note[3].velocity;  // sine out is 16bit, add 4 then 16+8
 8002eb4:	f898 3037 	ldrb.w	r3, [r8, #55]	; 0x37
	{	  sample_accus[0] = sample_accus[0] + sample_counts_temp[20];}  // normal adder full volume   ,11 inst
 8002eb8:	f8d9 7000 	ldr.w	r7, [r9]
 8002ebc:	9c04      	ldr	r4, [sp, #16]
	{	sample_accus[1] = sample_accus[1] + sample_counts_temp[21];}
 8002ebe:	9e05      	ldr	r6, [sp, #20]
	{	  sample_accus[0] = sample_accus[0] + sample_counts_temp[20];}  // normal adder full volume   ,11 inst
 8002ec0:	4427      	add	r7, r4
	{	sample_accus[1] = sample_accus[1] + sample_counts_temp[21];}
 8002ec2:	f8d9 4004 	ldr.w	r4, [r9, #4]
	{	  sample_accus[0] = sample_accus[0] + sample_counts_temp[20];}  // normal adder full volume   ,11 inst
 8002ec6:	f8c9 7000 	str.w	r7, [r9]
			if (sample_accus[0]>524287) {sample_accus[0] =-0-sample_accus[0] ; } // faster >  than &  ,strange,  or is even worse
 8002eca:	f5b7 2f00 	cmp.w	r7, #524288	; 0x80000
 8002ece:	bfa8      	it	ge
 8002ed0:	427f      	negge	r7, r7
	{	sample_accus[1] = sample_accus[1] + sample_counts_temp[21];}
 8002ed2:	eb06 0c04 	add.w	ip, r6, r4
	{	sample_accus[2] = sample_accus[2] + sample_counts_temp[22]; }// bouncing somewhere
 8002ed6:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8002eda:	9e07      	ldr	r6, [sp, #28]
			if (sample_accus[0]>524287) {sample_accus[0] =-0-sample_accus[0] ; } // faster >  than &  ,strange,  or is even worse
 8002edc:	bfa8      	it	ge
 8002ede:	f8c9 7000 	strge.w	r7, [r9]
			if (sample_accus[1]>524287) {sample_accus[1] =-0-sample_accus[1] ;}// faster >  than &  ,conditional statement has no ' & '  in assy
 8002ee2:	f5bc 2f00 	cmp.w	ip, #524288	; 0x80000
	{	sample_accus[2] = sample_accus[2] + sample_counts_temp[22]; }// bouncing somewhere
 8002ee6:	eb06 0e04 	add.w	lr, r6, r4
			if (sample_accus[1]>524287) {sample_accus[1] =-0-sample_accus[1] ;}// faster >  than &  ,conditional statement has no ' & '  in assy
 8002eea:	bfa8      	it	ge
 8002eec:	f1cc 0700 	rsbge	r7, ip, #0
	{	sample_accus[3] = sample_accus[3] + sample_counts_temp[23]; } // 6 cycles
 8002ef0:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8002ef4:	9e06      	ldr	r6, [sp, #24]
	{	sample_accus[1] = sample_accus[1] + sample_counts_temp[21];}
 8002ef6:	f8c9 c004 	str.w	ip, [r9, #4]
			if (sample_accus[1]>524287) {sample_accus[1] =-0-sample_accus[1] ;}// faster >  than &  ,conditional statement has no ' & '  in assy
 8002efa:	bfa8      	it	ge
 8002efc:	f8c9 7004 	strge.w	r7, [r9, #4]
			if (sample_accus[2]>524287) {sample_accus[2] =-0-sample_accus[2] ;} //
 8002f00:	f5be 2f00 	cmp.w	lr, #524288	; 0x80000
	{	sample_accus[3] = sample_accus[3] + sample_counts_temp[23]; } // 6 cycles
 8002f04:	4434      	add	r4, r6
			if (sample_accus[2]>524287) {sample_accus[2] =-0-sample_accus[2] ;} //
 8002f06:	bfa8      	it	ge
 8002f08:	f1ce 0700 	rsbge	r7, lr, #0
	{	sample_accus[2] = sample_accus[2] + sample_counts_temp[22]; }// bouncing somewhere
 8002f0c:	f8c9 e008 	str.w	lr, [r9, #8]
			if (sample_accus[2]>524287) {sample_accus[2] =-0-sample_accus[2] ;} //
 8002f10:	bfa8      	it	ge
 8002f12:	f8c9 7008 	strge.w	r7, [r9, #8]
			if (sample_accus[3]>524287) {sample_accus[3] =-0-sample_accus[3] ;} //  6 cycles
 8002f16:	f5b4 2f00 	cmp.w	r4, #524288	; 0x80000
	{	sample_accus[3] = sample_accus[3] + sample_counts_temp[23]; } // 6 cycles
 8002f1a:	f8c9 400c 	str.w	r4, [r9, #12]
			if (sample_accus[3]>524287) {sample_accus[3] =-0-sample_accus[3] ;} //  6 cycles
 8002f1e:	bfa4      	itt	ge
 8002f20:	4264      	negge	r4, r4
 8002f22:	f8c9 400c 	strge.w	r4, [r9, #12]
			if (sound_enable[0]==2)    	{sample_Accu[0]=(abs(sample_accus[0])-262144)<<1;	}  // not much help at all
 8002f26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002f28:	2c02      	cmp	r4, #2
 8002f2a:	d108      	bne.n	8002f3e <sampling+0x736>
 8002f2c:	f8d9 4000 	ldr.w	r4, [r9]
 8002f30:	2c00      	cmp	r4, #0
 8002f32:	bfb8      	it	lt
 8002f34:	4264      	neglt	r4, r4
 8002f36:	f5a4 2480 	sub.w	r4, r4, #262144	; 0x40000
 8002f3a:	0064      	lsls	r4, r4, #1
 8002f3c:	941c      	str	r4, [sp, #112]	; 0x70
			if (sound_enable[1]==2)		 	{	sample_Accu[1]=(abs(sample_accus[1])-262144)<<1;}
 8002f3e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8002f40:	2c02      	cmp	r4, #2
 8002f42:	d108      	bne.n	8002f56 <sampling+0x74e>
 8002f44:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8002f48:	2c00      	cmp	r4, #0
 8002f4a:	bfb8      	it	lt
 8002f4c:	4264      	neglt	r4, r4
 8002f4e:	f5a4 2480 	sub.w	r4, r4, #262144	; 0x40000
 8002f52:	0064      	lsls	r4, r4, #1
 8002f54:	941d      	str	r4, [sp, #116]	; 0x74
			if (sound_enable[2]==2)		 	{sample_Accu[2]=(abs(sample_accus[2])-262144)<<1;}
 8002f56:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002f58:	2c02      	cmp	r4, #2
 8002f5a:	d108      	bne.n	8002f6e <sampling+0x766>
 8002f5c:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8002f60:	2c00      	cmp	r4, #0
 8002f62:	bfb8      	it	lt
 8002f64:	4264      	neglt	r4, r4
 8002f66:	f5a4 2480 	sub.w	r4, r4, #262144	; 0x40000
 8002f6a:	0064      	lsls	r4, r4, #1
 8002f6c:	941e      	str	r4, [sp, #120]	; 0x78
			if (sound_enable[3]==2) 				{sample_Accu[3]=(abs(sample_accus[3])-262144)<<1;}
 8002f6e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002f70:	2c02      	cmp	r4, #2
 8002f72:	d108      	bne.n	8002f86 <sampling+0x77e>
 8002f74:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8002f78:	2c00      	cmp	r4, #0
 8002f7a:	bfb8      	it	lt
 8002f7c:	4264      	neglt	r4, r4
 8002f7e:	f5a4 2480 	sub.w	r4, r4, #262144	; 0x40000
 8002f82:	0064      	lsls	r4, r4, #1
 8002f84:	941f      	str	r4, [sp, #124]	; 0x7c
					sample_temp5 =sample_temp1>>13;
				//	if (soft_mute)  sample_temp6=(*osc_pointers[4])* (256-(i>>1));  else     sample_temp6=(*osc_pointers[4])*note[4].velocity;   // not heavy
					sample_temp6=((*osc_pointers[4])*note[4].velocity)+((*osc_pointers[5])*note[5].velocity);
 8002f86:	f8db 4014 	ldr.w	r4, [fp, #20]



	play_holder0[i]=sample_temp2;  // write to bank
 8002f8a:	4e60      	ldr	r6, [pc, #384]	; (800310c <sampling+0x904>)
					sample_temp6=((*osc_pointers[4])*note[4].velocity)+((*osc_pointers[5])*note[5].velocity);
 8002f8c:	6827      	ldr	r7, [r4, #0]
			sample_temp1=(*osc_pointers[1])*note[1].velocity; // needs cut a bit  ,default 20bit
 8002f8e:	f8db 4004 	ldr.w	r4, [fp, #4]
 8002f92:	6824      	ldr	r4, [r4, #0]
 8002f94:	fb04 f101 	mul.w	r1, r4, r1
			sample_temp1=(*osc_pointers[2])*note[2].velocity;      // needs some gain fine tune !
 8002f98:	f8db 4008 	ldr.w	r4, [fp, #8]
 8002f9c:	6824      	ldr	r4, [r4, #0]
 8002f9e:	fb04 f202 	mul.w	r2, r4, r2
					sample_temp1=(*osc_pointers[3])*	note[3].velocity;  // sine out is 16bit, add 4 then 16+8
 8002fa2:	f8db 400c 	ldr.w	r4, [fp, #12]
 8002fa6:	6824      	ldr	r4, [r4, #0]
 8002fa8:	fb04 f303 	mul.w	r3, r4, r3
					sample_temp6=((*osc_pointers[4])*note[4].velocity)+((*osc_pointers[5])*note[5].velocity);
 8002fac:	f8db 4010 	ldr.w	r4, [fp, #16]
 8002fb0:	f8d4 c000 	ldr.w	ip, [r4]
			sample_temp1=(*osc_pointers[0])*note[0].velocity;
 8002fb4:	f8db 4000 	ldr.w	r4, [fp]
 8002fb8:	6824      	ldr	r4, [r4, #0]
 8002fba:	fb04 f000 	mul.w	r0, r4, r0
					sample_temp6=((*osc_pointers[4])*note[4].velocity)+((*osc_pointers[5])*note[5].velocity);
 8002fbe:	f898 4057 	ldrb.w	r4, [r8, #87]	; 0x57
 8002fc2:	fb04 f707 	mul.w	r7, r4, r7
	play_holder0[i]=sample_temp2;  // write to bank
 8002fc6:	9c01      	ldr	r4, [sp, #4]
 8002fc8:	8824      	ldrh	r4, [r4, #0]
			sample_temp2=(sample_temp1)>>12;
 8002fca:	1300      	asrs	r0, r0, #12
	play_holder0[i]=sample_temp2;  // write to bank
 8002fcc:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
	play_holder1[i]=sample_temp3;
 8002fd0:	484f      	ldr	r0, [pc, #316]	; (8003110 <sampling+0x908>)
			sample_temp3=sample_temp1>>12; // 20+8
 8002fd2:	1309      	asrs	r1, r1, #12
	play_holder1[i]=sample_temp3;
 8002fd4:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
	play_holder2[i]=sample_temp4;
 8002fd8:	494e      	ldr	r1, [pc, #312]	; (8003114 <sampling+0x90c>)
			sample_temp4 =sample_temp1>>12;    // 64 default 20+8
 8002fda:	1312      	asrs	r2, r2, #12
	play_holder2[i]=sample_temp4;
 8002fdc:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
	play_holder3[i]=sample_temp5;  // easy overload
 8002fe0:	4a4d      	ldr	r2, [pc, #308]	; (8003118 <sampling+0x910>)
					sample_temp5 =sample_temp1>>13;
 8002fe2:	135b      	asrs	r3, r3, #13
	play_holder3[i]=sample_temp5;  // easy overload
 8002fe4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
					sample_temp6=((*osc_pointers[4])*note[4].velocity)+((*osc_pointers[5])*note[5].velocity);
 8002fe8:	f898 3047 	ldrb.w	r3, [r8, #71]	; 0x47
	play_holder4[i]=(sample_temp6)>>10;  // clean output , samples
 8002fec:	4a4b      	ldr	r2, [pc, #300]	; (800311c <sampling+0x914>)
					sample_temp6=((*osc_pointers[4])*note[4].velocity)+((*osc_pointers[5])*note[5].velocity);
 8002fee:	fb0c 7703 	mla	r7, ip, r3, r7
	play_holder4[i]=(sample_temp6)>>10;  // clean output , samples
 8002ff2:	12bf      	asrs	r7, r7, #10
 8002ff4:	f842 7024 	str.w	r7, [r2, r4, lsl #2]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002ff8:	3401      	adds	r4, #1
 8002ffa:	b2a4      	uxth	r4, r4
 8002ffc:	9b01      	ldr	r3, [sp, #4]
 8002ffe:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8003002:	801c      	strh	r4, [r3, #0]
 8003004:	f080 816a 	bcs.w	80032dc <sampling+0xad4>
	sampling_position=(i>>6);
 8003008:	4a45      	ldr	r2, [pc, #276]	; (8003120 <sampling+0x918>)
 800300a:	09a3      	lsrs	r3, r4, #6
 800300c:	7013      	strb	r3, [r2, #0]
	if (sound_enable[5]) 		 {
 800300e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003010:	b183      	cbz	r3, 8003034 <sampling+0x82c>
	sample_adc_temp=input_holder[((adc_playback_position++)&1023)>>1];
 8003012:	4844      	ldr	r0, [pc, #272]	; (8003124 <sampling+0x91c>)
 8003014:	4b44      	ldr	r3, [pc, #272]	; (8003128 <sampling+0x920>)
 8003016:	8802      	ldrh	r2, [r0, #0]
 8003018:	f3c2 0148 	ubfx	r1, r2, #1, #9
 800301c:	3201      	adds	r2, #1
 800301e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003022:	8002      	strh	r2, [r0, #0]
	sample_adc_temp=(sample_adc_temp-32767)<<4;
 8003024:	f5a3 42ff 	sub.w	r2, r3, #32640	; 0x7f80
	sample_adc=(sample_adc_temp+sample_adc)>>1;}
 8003028:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	sample_adc_temp=(sample_adc_temp-32767)<<4;
 800302a:	3a7f      	subs	r2, #127	; 0x7f
	sample_adc=(sample_adc_temp+sample_adc)>>1;}
 800302c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003030:	105b      	asrs	r3, r3, #1
 8003032:	9313      	str	r3, [sp, #76]	; 0x4c
	if (sound_enable[6]) 		 {
 8003034:	9b08      	ldr	r3, [sp, #32]
 8003036:	b14b      	cbz	r3, 800304c <sampling+0x844>
	ram_temp=*(ram_ptr+looper_point);    // works
 8003038:	f8ba 2000 	ldrh.w	r2, [sl]
 800303c:	4b3b      	ldr	r3, [pc, #236]	; (800312c <sampling+0x924>)
 800303e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
	ram_temp=(ram_temp-32767)<<4;
 8003042:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8003046:	3b7f      	subs	r3, #127	; 0x7f
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	9314      	str	r3, [sp, #80]	; 0x50
	if (sampler.ram_seq<sampler.start_current) {sample_input=0;  ram_synced=32767;}
 800304c:	9b02      	ldr	r3, [sp, #8]
 800304e:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 8003052:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003056:	4293      	cmp	r3, r2
 8003058:	f63f aedc 	bhi.w	8002e14 <sampling+0x60c>
	else 	{sample_input=*(signed_ptr+(sampler.ram_seq&255))<<3;ram_synced= *(ram_ptr+sampler.ram_seq);}
 800305c:	4b33      	ldr	r3, [pc, #204]	; (800312c <sampling+0x924>)
 800305e:	4934      	ldr	r1, [pc, #208]	; (8003130 <sampling+0x928>)
 8003060:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003064:	b2d0      	uxtb	r0, r2
	ram_synced=(ram_synced-32767)<<4;
 8003066:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
	else 	{sample_input=*(signed_ptr+(sampler.ram_seq&255))<<3;ram_synced= *(ram_ptr+sampler.ram_seq);}
 800306a:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
	ram_synced=(ram_synced-32767)<<4;
 800306e:	3b7f      	subs	r3, #127	; 0x7f
	else 	{sample_input=*(signed_ptr+(sampler.ram_seq&255))<<3;ram_synced= *(ram_ptr+sampler.ram_seq);}
 8003070:	00c9      	lsls	r1, r1, #3
	ram_synced=(ram_synced-32767)<<4;
 8003072:	011b      	lsls	r3, r3, #4
	else 	{sample_input=*(signed_ptr+(sampler.ram_seq&255))<<3;ram_synced= *(ram_ptr+sampler.ram_seq);}
 8003074:	9116      	str	r1, [sp, #88]	; 0x58
 8003076:	e6cf      	b.n	8002e18 <sampling+0x610>
if (seq.tempo<60) {tempo_start=0; seq.pos=0;sampler.acurrent_sample=1;} // loop on single sample
 8003078:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800307c:	2b3b      	cmp	r3, #59	; 0x3b
 800307e:	f63f adfd 	bhi.w	8002c7c <sampling+0x474>
 8003082:	9a03      	ldr	r2, [sp, #12]
 8003084:	2300      	movs	r3, #0
 8003086:	f88a 3000 	strb.w	r3, [sl]
 800308a:	2301      	movs	r3, #1
 800308c:	f882 3081 	strb.w	r3, [r2, #129]	; 0x81
	if ((i&63)==0)
 8003090:	882a      	ldrh	r2, [r5, #0]
 8003092:	0694      	lsls	r4, r2, #26
 8003094:	f47f adf6 	bne.w	8002c84 <sampling+0x47c>
	    LFO_square_one_pulse();
 8003098:	f7fe fa56 	bl	8001548 <LFO_square_one_pulse>
	    ADSR_loop();   // change to sound instead of channel  , use 4 for sample
 800309c:	f7fe fb88 	bl	80017b0 <ADSR_loop>
		LFO_source_synced();
 80030a0:	f7fe fa92 	bl	80015c8 <LFO_source_synced>
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 80030a4:	882a      	ldrh	r2, [r5, #0]
 80030a6:	e5ed      	b.n	8002c84 <sampling+0x47c>
if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;isr_change=next_isr+1;  }  else {tempo_count++;  }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 80030a8:	3301      	adds	r3, #1
 80030aa:	f8a9 3000 	strh.w	r3, [r9]
	if ((next_isr>>4) != (seq.pos)) { 					//     min 6400 cycles per seq.pos ,         next note step 140ms
 80030ae:	9b04      	ldr	r3, [sp, #16]
 80030b0:	8819      	ldrh	r1, [r3, #0]
 80030b2:	e4ba      	b.n	8002a2a <sampling+0x222>
		    if ((note[mask_i].velocity)&&(note[mask_i].osc))	    LCD_Info[15+mask_i]=major_notes[note_number]; else LCD_Info[15+mask_i]=95;
 80030b4:	f04f 035f 	mov.w	r3, #95	; 0x5f
 80030b8:	703b      	strb	r3, [r7, #0]
		    if (notes_joined[seq.loop[mask_i]] )		note[mask_i].tuned=tune_temp*0.99;	// this works
 80030ba:	4b1e      	ldr	r3, [pc, #120]	; (8003134 <sampling+0x92c>)
 80030bc:	5c9b      	ldrb	r3, [r3, r2]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f47f adc8 	bne.w	8002c54 <sampling+0x44c>
		    else note[mask_i].position=0;  // no retrigger on off note
 80030c4:	7123      	strb	r3, [r4, #4]
 80030c6:	e5d1      	b.n	8002c6c <sampling+0x464>
	 if (note[4].osc==0) osc_pointers[5]=&sample_Accu[5];
 80030c8:	b919      	cbnz	r1, 80030d2 <sampling+0x8ca>
 80030ca:	f04f 0c01 	mov.w	ip, #1
 80030ce:	f10d 0e84 	add.w	lr, sp, #132	; 0x84
	 if (note[pars_counter].osc==1) {osc_pointers[pars_counter]=&sample_accus[pars_counter];  sound_enable[pars_counter]=1;} 						// saw
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d106      	bne.n	80030e4 <sampling+0x8dc>
 80030d6:	7033      	strb	r3, [r6, #0]
 80030d8:	6022      	str	r2, [r4, #0]
	 			if (note[pars_counter].osc==4) { osc_pointers[pars_counter]=&sample_input;osc_pointers[5]=&sample_temp7;sound_enable[4]=4;}  // sampleinput
 80030da:	e46e      	b.n	80029ba <sampling+0x1b2>
 80030dc:	eef0 7a48 	vmov.f32	s15, s16
 80030e0:	2031      	movs	r0, #49	; 0x31
		    if (detune_temp>30 )   note_number=MinorNote[detune_temp-31];    // for now
 80030e2:	e5a8      	b.n	8002c36 <sampling+0x42e>
	 			if (note[pars_counter].osc==2){ osc_pointers[pars_counter]=&sample_Accu[pars_counter];sound_enable[pars_counter]=2;} 		// tri
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d102      	bne.n	80030ee <sampling+0x8e6>
 80030e8:	7033      	strb	r3, [r6, #0]
 80030ea:	6027      	str	r7, [r4, #0]
	 			if (note[pars_counter].osc==5) {osc_pointers[pars_counter]=&sample_adc;sound_enable[5]=5;}    // sine
 80030ec:	e465      	b.n	80029ba <sampling+0x1b2>
	 			if (note[pars_counter].osc==3) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];sound_enable[3]=3;}   // sample_input
 80030ee:	2b03      	cmp	r3, #3
 80030f0:	d122      	bne.n	8003138 <sampling+0x930>
 80030f2:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
 80030f6:	f107 0318 	add.w	r3, r7, #24
 80030fa:	6023      	str	r3, [r4, #0]
	 			if (note[pars_counter].osc==7) {osc_pointers[pars_counter]=&ram_synced; sound_enable[7]=7;}   // trigger 0-16
 80030fc:	e45d      	b.n	80029ba <sampling+0x1b2>
 80030fe:	bf00      	nop
 8003100:	2000ca08 	.word	0x2000ca08
 8003104:	20012ec4 	.word	0x20012ec4
 8003108:	20013300 	.word	0x20013300
 800310c:	2000f398 	.word	0x2000f398
 8003110:	2000fb98 	.word	0x2000fb98
 8003114:	20010398 	.word	0x20010398
 8003118:	20010b98 	.word	0x20010b98
 800311c:	20011398 	.word	0x20011398
 8003120:	20012ec6 	.word	0x20012ec6
 8003124:	20009514 	.word	0x20009514
 8003128:	2000d76c 	.word	0x2000d76c
 800312c:	20000000 	.word	0x20000000
 8003130:	2000c204 	.word	0x2000c204
 8003134:	2000e9d0 	.word	0x2000e9d0
	 			if (note[pars_counter].osc==4) { osc_pointers[pars_counter]=&sample_input;osc_pointers[5]=&sample_temp7;sound_enable[4]=4;}  // sampleinput
 8003138:	2b04      	cmp	r3, #4
 800313a:	d106      	bne.n	800314a <sampling+0x942>
 800313c:	ab16      	add	r3, sp, #88	; 0x58
 800313e:	6023      	str	r3, [r4, #0]
 8003140:	f04f 0c01 	mov.w	ip, #1
 8003144:	f10d 0e54 	add.w	lr, sp, #84	; 0x54
 8003148:	e437      	b.n	80029ba <sampling+0x1b2>
	 			if (note[pars_counter].osc==5) {osc_pointers[pars_counter]=&sample_adc;sound_enable[5]=5;}    // sine
 800314a:	2b05      	cmp	r3, #5
 800314c:	d103      	bne.n	8003156 <sampling+0x94e>
 800314e:	a813      	add	r0, sp, #76	; 0x4c
 8003150:	6020      	str	r0, [r4, #0]
 8003152:	9309      	str	r3, [sp, #36]	; 0x24
 8003154:	e431      	b.n	80029ba <sampling+0x1b2>
	 			if (note[pars_counter].osc==6) {osc_pointers[pars_counter]=&ram_temp ; sound_enable[6]=6;}   // non muted RAM , just loop
 8003156:	2b06      	cmp	r3, #6
 8003158:	d103      	bne.n	8003162 <sampling+0x95a>
 800315a:	a814      	add	r0, sp, #80	; 0x50
 800315c:	6020      	str	r0, [r4, #0]
 800315e:	9308      	str	r3, [sp, #32]
 8003160:	e42b      	b.n	80029ba <sampling+0x1b2>
	 			if (note[pars_counter].osc==7) {osc_pointers[pars_counter]=&ram_synced; sound_enable[7]=7;}   // trigger 0-16
 8003162:	2b07      	cmp	r3, #7
 8003164:	d102      	bne.n	800316c <sampling+0x964>
 8003166:	ab17      	add	r3, sp, #92	; 0x5c
 8003168:	6023      	str	r3, [r4, #0]
	 			if (note[pars_counter].osc>7) {osc_pointers[pars_counter]=&sample_Accu[5]; sound_enable[pars_counter]=0;}  // zero
 800316a:	e426      	b.n	80029ba <sampling+0x1b2>
 800316c:	f67f ac25 	bls.w	80029ba <sampling+0x1b2>
 8003170:	ab21      	add	r3, sp, #132	; 0x84
 8003172:	6023      	str	r3, [r4, #0]
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	7033      	strb	r3, [r6, #0]
 800317a:	e41e      	b.n	80029ba <sampling+0x1b2>
		    float tune_temp=sample_Noteadd[note_number];
 800317c:	4852      	ldr	r0, [pc, #328]	; (80032c8 <sampling+0xac0>)
 800317e:	5cc0      	ldrb	r0, [r0, r3]
 8003180:	4b52      	ldr	r3, [pc, #328]	; (80032cc <sampling+0xac4>)
 8003182:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318e:	e552      	b.n	8002c36 <sampling+0x42e>
			if  (note[mask_i].osc<3)  { if (seq.loop[mask_i]==0)  {note[mask_i].position=0;   } else  note[mask_i].position=sampling_position+1;    }   // disables trigger ?
 8003190:	9b05      	ldr	r3, [sp, #20]
 8003192:	7123      	strb	r3, [r4, #4]
 8003194:	e53a      	b.n	8002c0c <sampling+0x404>
	if(ADSR[1].release)       note[1].velocity=ADSR[1].buffer[sampling_position]>>2;
 8003196:	4b4e      	ldr	r3, [pc, #312]	; (80032d0 <sampling+0xac8>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800319e:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	; 0x2c
	if(ADSR[2].release)       note[2].velocity=ADSR[2].buffer[sampling_position]>>2;
 80031a2:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
	if(ADSR[1].release)       note[1].velocity=ADSR[1].buffer[sampling_position]>>2;
 80031a6:	f3c1 0187 	ubfx	r1, r1, #2, #8
 80031aa:	f888 1017 	strb.w	r1, [r8, #23]
	if(ADSR[2].release)       note[2].velocity=ADSR[2].buffer[sampling_position]>>2;
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f43f ae79 	beq.w	8002ea6 <sampling+0x69e>
 80031b4:	4b46      	ldr	r3, [pc, #280]	; (80032d0 <sampling+0xac8>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80031bc:	f9b3 204a 	ldrsh.w	r2, [r3, #74]	; 0x4a
	if(ADSR[3].release)       note[3].velocity=ADSR[3].buffer[sampling_position]>>2;
 80031c0:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
	if(ADSR[2].release)       note[2].velocity=ADSR[2].buffer[sampling_position]>>2;
 80031c4:	f3c2 0287 	ubfx	r2, r2, #2, #8
 80031c8:	f888 2027 	strb.w	r2, [r8, #39]	; 0x27
	if(ADSR[3].release)       note[3].velocity=ADSR[3].buffer[sampling_position]>>2;
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f43f ae71 	beq.w	8002eb4 <sampling+0x6ac>
 80031d2:	4b3f      	ldr	r3, [pc, #252]	; (80032d0 <sampling+0xac8>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80031da:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 80031de:	f3c3 0387 	ubfx	r3, r3, #2, #8
 80031e2:	f888 3037 	strb.w	r3, [r8, #55]	; 0x37
 80031e6:	e667      	b.n	8002eb8 <sampling+0x6b0>
	if(ADSR[0].release)       note[0].velocity=ADSR[0].buffer[sampling_position]>>2;   // disables LFO on release set to 0
 80031e8:	4b39      	ldr	r3, [pc, #228]	; (80032d0 <sampling+0xac8>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80031f0:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80031f4:	f3c0 0087 	ubfx	r0, r0, #2, #8
 80031f8:	f888 0007 	strb.w	r0, [r8, #7]
 80031fc:	e647      	b.n	8002e8e <sampling+0x686>
float freq_temp=arm_sin_f32(filter[0].cutoff_1*0.006159)    ;   // need this for useful filter
 80031fe:	4f35      	ldr	r7, [pc, #212]	; (80032d4 <sampling+0xacc>)
	freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 8003200:	4e33      	ldr	r6, [pc, #204]	; (80032d0 <sampling+0xac8>)
 8003202:	4c35      	ldr	r4, [pc, #212]	; (80032d8 <sampling+0xad0>)
	   patch_target_replace();    // update values , not too bad
 8003204:	f7fe f858 	bl	80012b8 <patch_target_replace>
float freq_temp=arm_sin_f32(filter[0].cutoff_1*0.006159)    ;   // need this for useful filter
 8003208:	7838      	ldrb	r0, [r7, #0]
 800320a:	f7fd fa69 	bl	80006e0 <__aeabi_i2d>
 800320e:	a32a      	add	r3, pc, #168	; (adr r3, 80032b8 <sampling+0xab0>)
 8003210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003214:	f7fc ffe8 	bl	80001e8 <__aeabi_dmul>
 8003218:	f7fd faec 	bl	80007f4 <__aeabi_d2f>
 800321c:	ee00 0a10 	vmov	s0, r0
 8003220:	f005 f84c 	bl	80082bc <arm_sin_f32>
	freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 8003224:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8003228:	7833      	ldrb	r3, [r6, #0]
	 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.006)    ;
 800322a:	7a38      	ldrb	r0, [r7, #8]
	freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 800322c:	ee38 0a40 	vsub.f32	s0, s16, s0
 8003230:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003234:	ed83 0a00 	vstr	s0, [r3]
	 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.006)    ;
 8003238:	f7fd fa52 	bl	80006e0 <__aeabi_i2d>
 800323c:	a320      	add	r3, pc, #128	; (adr r3, 80032c0 <sampling+0xab8>)
 800323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003242:	f7fc ffd1 	bl	80001e8 <__aeabi_dmul>
 8003246:	f7fd fad5 	bl	80007f4 <__aeabi_d2f>
 800324a:	ee00 0a10 	vmov	s0, r0
 800324e:	f005 f835 	bl	80082bc <arm_sin_f32>
	freq_pointer[1] [sampling_position] =1-freq_temp ; // filter lfos
 8003252:	7833      	ldrb	r3, [r6, #0]
	freq_temp=arm_sin_f32(filter[2].cutoff_1*0.006)    ;
 8003254:	7c38      	ldrb	r0, [r7, #16]
	freq_pointer[1] [sampling_position] =1-freq_temp ; // filter lfos
 8003256:	ee38 0a40 	vsub.f32	s0, s16, s0
 800325a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800325e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
	freq_temp=arm_sin_f32(filter[2].cutoff_1*0.006)    ;
 8003262:	f7fd fa3d 	bl	80006e0 <__aeabi_i2d>
 8003266:	a316      	add	r3, pc, #88	; (adr r3, 80032c0 <sampling+0xab8>)
 8003268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326c:	f7fc ffbc 	bl	80001e8 <__aeabi_dmul>
 8003270:	f7fd fac0 	bl	80007f4 <__aeabi_d2f>
 8003274:	ee00 0a10 	vmov	s0, r0
 8003278:	f005 f820 	bl	80082bc <arm_sin_f32>
	freq_pointer[2] [sampling_position] =1-freq_temp ; // filter lfos
 800327c:	7833      	ldrb	r3, [r6, #0]
	 freq_temp=arm_sin_f32(filter[3].cutoff_1*0.006)    ;
 800327e:	7e38      	ldrb	r0, [r7, #24]
	freq_pointer[2] [sampling_position] =1-freq_temp ; // filter lfos
 8003280:	ee38 0a40 	vsub.f32	s0, s16, s0
 8003284:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003288:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
	 freq_temp=arm_sin_f32(filter[3].cutoff_1*0.006)    ;
 800328c:	f7fd fa28 	bl	80006e0 <__aeabi_i2d>
 8003290:	a30b      	add	r3, pc, #44	; (adr r3, 80032c0 <sampling+0xab8>)
 8003292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003296:	f7fc ffa7 	bl	80001e8 <__aeabi_dmul>
 800329a:	f7fd faab 	bl	80007f4 <__aeabi_d2f>
 800329e:	ee00 0a10 	vmov	s0, r0
 80032a2:	f005 f80b 	bl	80082bc <arm_sin_f32>
	freq_pointer[3] [sampling_position] =1-freq_temp ; // filter lfos
 80032a6:	7833      	ldrb	r3, [r6, #0]
 80032a8:	ee38 0a40 	vsub.f32	s0, s16, s0
 80032ac:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80032b0:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c
 80032b4:	e5e5      	b.n	8002e82 <sampling+0x67a>
 80032b6:	bf00      	nop
 80032b8:	f9378ee3 	.word	0xf9378ee3
 80032bc:	3f793a2d 	.word	0x3f793a2d
 80032c0:	bc6a7efa 	.word	0xbc6a7efa
 80032c4:	3f789374 	.word	0x3f789374
 80032c8:	08008d14 	.word	0x08008d14
 80032cc:	0800a1fc 	.word	0x0800a1fc
 80032d0:	20012ec6 	.word	0x20012ec6
 80032d4:	20008b20 	.word	0x20008b20
 80032d8:	2000ce18 	.word	0x2000ce18

				//		    if(note[3].position)		sine_counter[9]=sine_counter[9]+256;  // count up when on

    memcpy(&sample_accus_hold,sample_accus,16);
    memcpy(&sample_accu_counter,accu_count,8);   // copy back
    memcpy(&sample_counts_holder,sample_counts_temp,80);
 80032dc:	9b04      	ldr	r3, [sp, #16]
 80032de:	f8ad 30c0 	strh.w	r3, [sp, #192]	; 0xc0
 80032e2:	9b05      	ldr	r3, [sp, #20]
 80032e4:	f8ad 30c2 	strh.w	r3, [sp, #194]	; 0xc2
 80032e8:	9b07      	ldr	r3, [sp, #28]
 80032ea:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
 80032ee:	9b06      	ldr	r3, [sp, #24]
 80032f0:	f8ad 30c6 	strh.w	r3, [sp, #198]	; 0xc6
 80032f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032f6:	f8ad 30d4 	strh.w	r3, [sp, #212]	; 0xd4
 80032fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80032fc:	f8ad 30d6 	strh.w	r3, [sp, #214]	; 0xd6
 8003300:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003302:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
 8003306:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003308:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
    memcpy(&sample_accus_hold,sample_accus,16);
 800330c:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 8003310:	4cbc      	ldr	r4, [pc, #752]	; (8003604 <sampling+0xdfc>)
	sample_Accu[0]= ((sample_Accu[0])+delay_accu4)>>1;
	//sample_Accu[0]=delay_accu4;
	if((i&3)==3) {delay_buffer[delay_cntr]=((delay_accu<<1)+(delay[0].feedback*delay_accu4)		)>>4;								delay_accu=0;	}


		    filter_accus[2]=((sample_Accu[0]*freq_point[0])+(filter_accus[2]*freq_point[1]))>>16;
 8003312:	f8df b360 	ldr.w	fp, [pc, #864]	; 8003674 <sampling+0xe6c>
 8003316:	f8df a360 	ldr.w	sl, [pc, #864]	; 8003678 <sampling+0xe70>
    memcpy(&sample_accus_hold,sample_accus,16);
 800331a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    memcpy(&sample_accu_counter,accu_count,8);   // copy back
 800331e:	ab1a      	add	r3, sp, #104	; 0x68
 8003320:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003324:	4bb8      	ldr	r3, [pc, #736]	; (8003608 <sampling+0xe00>)
    memcpy(&sample_counts_holder,sample_counts_temp,80);
 8003326:	2250      	movs	r2, #80	; 0x50
    memcpy(&sample_accu_counter,accu_count,8);   // copy back
 8003328:	e883 0003 	stmia.w	r3, {r0, r1}
    memcpy(&sample_counts_holder,sample_counts_temp,80);
 800332c:	48b7      	ldr	r0, [pc, #732]	; (800360c <sampling+0xe04>)
 800332e:	a926      	add	r1, sp, #152	; 0x98
 8003330:	f005 f836 	bl	80083a0 <memcpy>
			for (i=0;i<512;i++) {    //  SLOW USES UP ABOUT 140
 8003334:	9a01      	ldr	r2, [sp, #4]
		    filter_accus[5]=((sample_Accu[1]*freq_point[2])+(filter_accus[5]*freq_point[3]))>>16; // down to 12 cycles per 2 filters
		filter_accus[6]=((filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]))>>16;// 13 instructions in assy
		sample_Accu[1]=filter_accus[6];

		filter_accus[8]=((sample_Accu[2]*freq_point[4])+(filter_accus[8]*freq_point[5]))>>16;		// external loop is slower
		filter_accus[9]=((filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]))>>16;
 8003336:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
*/


		filter_accus[11]=((sample_Accu[3]*freq_point[6])+(filter_accus[11]*freq_point[7]))>>16;

		filter_accus[12]=((filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]))>>16;
 800333a:	9502      	str	r5, [sp, #8]
			for (i=0;i<512;i++) {    //  SLOW USES UP ABOUT 140
 800333c:	2300      	movs	r3, #0
 800333e:	8013      	strh	r3, [r2, #0]
		    filter_accus[2]=((sample_Accu[0]*freq_point[0])+(filter_accus[2]*freq_point[1]))>>16;
 8003340:	f8db 2008 	ldr.w	r2, [fp, #8]
 8003344:	9204      	str	r2, [sp, #16]
		    filter_accus[3]=(((filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]))>>16); //1
 8003346:	f8db 200c 	ldr.w	r2, [fp, #12]
 800334a:	9205      	str	r2, [sp, #20]
		    filter_accus[5]=((sample_Accu[1]*freq_point[2])+(filter_accus[5]*freq_point[3]))>>16; // down to 12 cycles per 2 filters
 800334c:	f8db 2014 	ldr.w	r2, [fp, #20]
 8003350:	9206      	str	r2, [sp, #24]
		filter_accus[6]=((filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]))>>16;// 13 instructions in assy
 8003352:	f8db 2018 	ldr.w	r2, [fp, #24]
 8003356:	9207      	str	r2, [sp, #28]
		filter_accus[8]=((sample_Accu[2]*freq_point[4])+(filter_accus[8]*freq_point[5]))>>16;		// external loop is slower
 8003358:	f8db 2020 	ldr.w	r2, [fp, #32]
 800335c:	9208      	str	r2, [sp, #32]
		filter_accus[11]=((sample_Accu[3]*freq_point[6])+(filter_accus[11]*freq_point[7]))>>16;
 800335e:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8003362:	9209      	str	r2, [sp, #36]	; 0x24
		filter_accus[12]=((filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]))>>16;
 8003364:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
 8003368:	920a      	str	r2, [sp, #40]	; 0x28
				i_total=i+sample_pointB;
 800336a:	4aa9      	ldr	r2, [pc, #676]	; (8003610 <sampling+0xe08>)
			sampling_position=(i>>6);
 800336c:	49a9      	ldr	r1, [pc, #676]	; (8003614 <sampling+0xe0c>)
				i_total=i+sample_pointB;
 800336e:	8810      	ldrh	r0, [r2, #0]
 8003370:	4418      	add	r0, r3
 8003372:	b282      	uxth	r2, r0
 8003374:	920c      	str	r2, [sp, #48]	; 0x30
				i_31=i&31;
 8003376:	f003 041f 	and.w	r4, r3, #31
			sampling_position=(i>>6);
 800337a:	099a      	lsrs	r2, r3, #6
			if ((i&63)==0){
 800337c:	069b      	lsls	r3, r3, #26
			sampling_position=(i>>6);
 800337e:	700a      	strb	r2, [r1, #0]
			if ((i&63)==0){
 8003380:	f000 81f2 	beq.w	8003768 <sampling+0xf60>
	if (phaser[0])	sample_Accu[0]=(sample_Accu[0]+phase_bank0[ ( i_31+phaser[0])&31	])>>1; // PHASER
 8003384:	4ba4      	ldr	r3, [pc, #656]	; (8003618 <sampling+0xe10>)
 8003386:	f893 9000 	ldrb.w	r9, [r3]
	if (phaser[1])	sample_Accu[1]=(sample_Accu[1]+phase_bank1[( i_31+phaser[1])&31	])>>1;
 800338a:	785f      	ldrb	r7, [r3, #1]
	if (phaser[2])	sample_Accu[2]=(sample_Accu[2]+phase_bank2[  ( i_31+phaser[2])&31	])>>1;
 800338c:	789e      	ldrb	r6, [r3, #2]
	if (phaser[3])	sample_Accu[3]=(sample_Accu[3]+phase_bank3[  ( i_31+phaser[3])&31	])>>1;
 800338e:	78d9      	ldrb	r1, [r3, #3]
			phase_bank0[i_31]= sample_Accu[0]=play_holder0[i];
 8003390:	9b01      	ldr	r3, [sp, #4]
 8003392:	4aa2      	ldr	r2, [pc, #648]	; (800361c <sampling+0xe14>)
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	48a2      	ldr	r0, [pc, #648]	; (8003620 <sampling+0xe18>)
			phase_bank1[i_31]=sample_Accu[1]=play_holder1[i] ; // saw
 8003398:	4da2      	ldr	r5, [pc, #648]	; (8003624 <sampling+0xe1c>)
			phase_bank0[i_31]= sample_Accu[0]=play_holder0[i];
 800339a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800339e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
			phase_bank1[i_31]=sample_Accu[1]=play_holder1[i] ; // saw
 80033a2:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80033a6:	4da0      	ldr	r5, [pc, #640]	; (8003628 <sampling+0xe20>)
 80033a8:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
			phase_bank2[i_31]=sample_Accu[2]=play_holder2[i];  // sine input
 80033ac:	4d9f      	ldr	r5, [pc, #636]	; (800362c <sampling+0xe24>)
 80033ae:	f855 c023 	ldr.w	ip, [r5, r3, lsl #2]
 80033b2:	4d9f      	ldr	r5, [pc, #636]	; (8003630 <sampling+0xe28>)
 80033b4:	f845 c024 	str.w	ip, [r5, r4, lsl #2]
			phase_bank3[i_31]=sample_Accu[3]=play_holder3[i] ;
 80033b8:	4d9e      	ldr	r5, [pc, #632]	; (8003634 <sampling+0xe2c>)
 80033ba:	f855 e023 	ldr.w	lr, [r5, r3, lsl #2]
 80033be:	4d9e      	ldr	r5, [pc, #632]	; (8003638 <sampling+0xe30>)
 80033c0:	f845 e024 	str.w	lr, [r5, r4, lsl #2]
			sample_Accu[4]=play_holder4[i];
 80033c4:	4d9d      	ldr	r5, [pc, #628]	; (800363c <sampling+0xe34>)
 80033c6:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 80033ca:	950b      	str	r5, [sp, #44]	; 0x2c
 80033cc:	9520      	str	r5, [sp, #128]	; 0x80
	if (phaser[0])	sample_Accu[0]=(sample_Accu[0]+phase_bank0[ ( i_31+phaser[0])&31	])>>1; // PHASER
 80033ce:	f1b9 0f00 	cmp.w	r9, #0
 80033d2:	f000 8195 	beq.w	8003700 <sampling+0xef8>
 80033d6:	44a1      	add	r9, r4
 80033d8:	4d91      	ldr	r5, [pc, #580]	; (8003620 <sampling+0xe18>)
 80033da:	f009 091f 	and.w	r9, r9, #31
 80033de:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 80033e2:	4491      	add	r9, r2
 80033e4:	ea4f 0969 	mov.w	r9, r9, asr #1
	if (phaser[1])	sample_Accu[1]=(sample_Accu[1]+phase_bank1[( i_31+phaser[1])&31	])>>1;
 80033e8:	b13f      	cbz	r7, 80033fa <sampling+0xbf2>
 80033ea:	4427      	add	r7, r4
 80033ec:	4d8e      	ldr	r5, [pc, #568]	; (8003628 <sampling+0xe20>)
 80033ee:	f007 071f 	and.w	r7, r7, #31
 80033f2:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 80033f6:	4438      	add	r0, r7
 80033f8:	1040      	asrs	r0, r0, #1
	if (phaser[2])	sample_Accu[2]=(sample_Accu[2]+phase_bank2[  ( i_31+phaser[2])&31	])>>1;
 80033fa:	b146      	cbz	r6, 800340e <sampling+0xc06>
 80033fc:	4426      	add	r6, r4
 80033fe:	4d8c      	ldr	r5, [pc, #560]	; (8003630 <sampling+0xe28>)
 8003400:	f006 061f 	and.w	r6, r6, #31
 8003404:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8003408:	44b4      	add	ip, r6
 800340a:	ea4f 0c6c 	mov.w	ip, ip, asr #1
	if (phaser[3])	sample_Accu[3]=(sample_Accu[3]+phase_bank3[  ( i_31+phaser[3])&31	])>>1;
 800340e:	b141      	cbz	r1, 8003422 <sampling+0xc1a>
 8003410:	4421      	add	r1, r4
 8003412:	f001 011f 	and.w	r1, r1, #31
 8003416:	4c88      	ldr	r4, [pc, #544]	; (8003638 <sampling+0xe30>)
 8003418:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800341c:	448e      	add	lr, r1
 800341e:	ea4f 0e6e 	mov.w	lr, lr, asr #1
	delay_accu=delay_accu+play_holder0[i];
 8003422:	4c87      	ldr	r4, [pc, #540]	; (8003640 <sampling+0xe38>)
 8003424:	6821      	ldr	r1, [r4, #0]
 8003426:	440a      	add	r2, r1
	if((i&3)==3)    {delay_cntr=(delay_cntr+1)&2047;
 8003428:	f003 0103 	and.w	r1, r3, #3
 800342c:	2903      	cmp	r1, #3
	delay_accu=delay_accu+play_holder0[i];
 800342e:	6022      	str	r2, [r4, #0]
	if((i&3)==3)    {delay_cntr=(delay_cntr+1)&2047;
 8003430:	f000 8168 	beq.w	8003704 <sampling+0xefc>
	delay_accu3=(delay_accu2+ delay_accu3)>>1;
 8003434:	4c83      	ldr	r4, [pc, #524]	; (8003644 <sampling+0xe3c>)
 8003436:	4a84      	ldr	r2, [pc, #528]	; (8003648 <sampling+0xe40>)
 8003438:	6821      	ldr	r1, [r4, #0]
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	440a      	add	r2, r1
	delay_accu4=(delay_accu3+ delay_accu4)>>1;
 800343e:	4983      	ldr	r1, [pc, #524]	; (800364c <sampling+0xe44>)
	delay_accu3=(delay_accu2+ delay_accu3)>>1;
 8003440:	1052      	asrs	r2, r2, #1
 8003442:	6022      	str	r2, [r4, #0]
	delay_accu4=(delay_accu3+ delay_accu4)>>1;
 8003444:	680c      	ldr	r4, [r1, #0]
 8003446:	4422      	add	r2, r4
 8003448:	1052      	asrs	r2, r2, #1
	sample_Accu[0]= ((sample_Accu[0])+delay_accu4)>>1;
 800344a:	4491      	add	r9, r2
	delay_accu4=(delay_accu3+ delay_accu4)>>1;
 800344c:	600a      	str	r2, [r1, #0]
	sample_Accu[0]= ((sample_Accu[0])+delay_accu4)>>1;
 800344e:	ea4f 0969 	mov.w	r9, r9, asr #1
		    filter_accus[2]=((sample_Accu[0]*freq_point[0])+(filter_accus[2]*freq_point[1]))>>16;
 8003452:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8003456:	9e04      	ldr	r6, [sp, #16]
 8003458:	f8ba 7000 	ldrh.w	r7, [sl]
		    filter_accus[3]=(((filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]))>>16); //1
 800345c:	9a05      	ldr	r2, [sp, #20]
		filter_accus[6]=((filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]))>>16;// 13 instructions in assy
 800345e:	9d07      	ldr	r5, [sp, #28]
		    filter_accus[5]=((sample_Accu[1]*freq_point[2])+(filter_accus[5]*freq_point[3]))>>16; // down to 12 cycles per 2 filters
 8003460:	9c06      	ldr	r4, [sp, #24]
		    filter_accus[2]=((sample_Accu[0]*freq_point[0])+(filter_accus[2]*freq_point[1]))>>16;
 8003462:	fb01 f606 	mul.w	r6, r1, r6
 8003466:	fb09 6907 	mla	r9, r9, r7, r6
 800346a:	ea4f 4629 	mov.w	r6, r9, asr #16
		    filter_accus[3]=(((filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]))>>16); //1
 800346e:	fb02 f101 	mul.w	r1, r2, r1
		    filter_accus[5]=((sample_Accu[1]*freq_point[2])+(filter_accus[5]*freq_point[3]))>>16; // down to 12 cycles per 2 filters
 8003472:	f8ba 2006 	ldrh.w	r2, [sl, #6]
		    filter_accus[2]=((sample_Accu[0]*freq_point[0])+(filter_accus[2]*freq_point[1]))>>16;
 8003476:	9604      	str	r6, [sp, #16]
		    filter_accus[3]=(((filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]))>>16); //1
 8003478:	fb06 1107 	mla	r1, r6, r7, r1
		    filter_accus[5]=((sample_Accu[1]*freq_point[2])+(filter_accus[5]*freq_point[3]))>>16; // down to 12 cycles per 2 filters
 800347c:	fb02 f404 	mul.w	r4, r2, r4
		filter_accus[6]=((filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]))>>16;// 13 instructions in assy
 8003480:	fb05 f202 	mul.w	r2, r5, r2
		    filter_accus[2]=((sample_Accu[0]*freq_point[0])+(filter_accus[2]*freq_point[1]))>>16;
 8003484:	4635      	mov	r5, r6
		    filter_accus[3]=(((filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]))>>16); //1
 8003486:	140e      	asrs	r6, r1, #16
		    filter_accus[5]=((sample_Accu[1]*freq_point[2])+(filter_accus[5]*freq_point[3]))>>16; // down to 12 cycles per 2 filters
 8003488:	f8ba 1004 	ldrh.w	r1, [sl, #4]
		    filter_accus[3]=(((filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]))>>16); //1
 800348c:	9605      	str	r6, [sp, #20]
		    filter_accus[5]=((sample_Accu[1]*freq_point[2])+(filter_accus[5]*freq_point[3]))>>16; // down to 12 cycles per 2 filters
 800348e:	fb00 4401 	mla	r4, r0, r1, r4
 8003492:	1420      	asrs	r0, r4, #16
		filter_accus[6]=((filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]))>>16;// 13 instructions in assy
 8003494:	fb00 2201 	mla	r2, r0, r1, r2
 8003498:	1414      	asrs	r4, r2, #16
		    filter_accus[3]=(((filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]))>>16); //1
 800349a:	e9cb 5602 	strd	r5, r6, [fp, #8]
		filter_accus[8]=((sample_Accu[2]*freq_point[4])+(filter_accus[8]*freq_point[5]))>>16;		// external loop is slower
 800349e:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 80034a2:	9908      	ldr	r1, [sp, #32]
		filter_accus[9]=((filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]))>>16;
 80034a4:	9d02      	ldr	r5, [sp, #8]
		    filter_accus[5]=((sample_Accu[1]*freq_point[2])+(filter_accus[5]*freq_point[3]))>>16; // down to 12 cycles per 2 filters
 80034a6:	9006      	str	r0, [sp, #24]
		filter_accus[8]=((sample_Accu[2]*freq_point[4])+(filter_accus[8]*freq_point[5]))>>16;		// external loop is slower
 80034a8:	fb02 f101 	mul.w	r1, r2, r1
		filter_accus[9]=((filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]))>>16;
 80034ac:	fb02 f505 	mul.w	r5, r2, r5
		filter_accus[8]=((sample_Accu[2]*freq_point[4])+(filter_accus[8]*freq_point[5]))>>16;		// external loop is slower
 80034b0:	f8ba 2008 	ldrh.w	r2, [sl, #8]
		    sample_Accu[0]=filter_accus[3];
 80034b4:	961c      	str	r6, [sp, #112]	; 0x70
		filter_accus[8]=((sample_Accu[2]*freq_point[4])+(filter_accus[8]*freq_point[5]))>>16;		// external loop is slower
 80034b6:	fb0c 1102 	mla	r1, ip, r2, r1
 80034ba:	1409      	asrs	r1, r1, #16
		filter_accus[9]=((filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]))>>16;
 80034bc:	fb01 5502 	mla	r5, r1, r2, r5





		  debug_value=filter_accus[9];
 80034c0:	4a63      	ldr	r2, [pc, #396]	; (8003650 <sampling+0xe48>)
		filter_accus[8]=((sample_Accu[2]*freq_point[4])+(filter_accus[8]*freq_point[5]))>>16;		// external loop is slower
 80034c2:	9108      	str	r1, [sp, #32]
		filter_accus[9]=((filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]))>>16;
 80034c4:	142d      	asrs	r5, r5, #16
		filter_accus[6]=((filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]))>>16;// 13 instructions in assy
 80034c6:	e9cb 0405 	strd	r0, r4, [fp, #20]
		filter_accus[9]=((filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]))>>16;
 80034ca:	e9cb 1508 	strd	r1, r5, [fp, #32]
		filter_accus[12]=((filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]))>>16;
 80034ce:	980a      	ldr	r0, [sp, #40]	; 0x28
		filter_accus[11]=((sample_Accu[3]*freq_point[6])+(filter_accus[11]*freq_point[7]))>>16;
 80034d0:	9909      	ldr	r1, [sp, #36]	; 0x24
		  debug_value=filter_accus[9];
 80034d2:	6015      	str	r5, [r2, #0]
		filter_accus[11]=((sample_Accu[3]*freq_point[6])+(filter_accus[11]*freq_point[7]))>>16;
 80034d4:	f8ba 200e 	ldrh.w	r2, [sl, #14]
		filter_accus[6]=((filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]))>>16;// 13 instructions in assy
 80034d8:	9407      	str	r4, [sp, #28]
		filter_accus[11]=((sample_Accu[3]*freq_point[6])+(filter_accus[11]*freq_point[7]))>>16;
 80034da:	fb02 f101 	mul.w	r1, r2, r1
		filter_accus[12]=((filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]))>>16;
 80034de:	fb00 f202 	mul.w	r2, r0, r2
		filter_accus[11]=((sample_Accu[3]*freq_point[6])+(filter_accus[11]*freq_point[7]))>>16;
 80034e2:	f8ba 000c 	ldrh.w	r0, [sl, #12]
		sample_Accu[1]=filter_accus[6];
 80034e6:	941d      	str	r4, [sp, #116]	; 0x74
		filter_accus[11]=((sample_Accu[3]*freq_point[6])+(filter_accus[11]*freq_point[7]))>>16;
 80034e8:	fb0e 1100 	mla	r1, lr, r0, r1
 80034ec:	1409      	asrs	r1, r1, #16
		filter_accus[12]=((filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]))>>16;
 80034ee:	fb01 2200 	mla	r2, r1, r0, r2
 80034f2:	1417      	asrs	r7, r2, #16
		sample_Accu[2]=filter_accus[9];
 80034f4:	951e      	str	r5, [sp, #120]	; 0x78
		filter_accus[11]=((sample_Accu[3]*freq_point[6])+(filter_accus[11]*freq_point[7]))>>16;
 80034f6:	9109      	str	r1, [sp, #36]	; 0x24
		filter_accus[12]=((filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]))>>16;
 80034f8:	970a      	str	r7, [sp, #40]	; 0x28
 80034fa:	e9cb 170b 	strd	r1, r7, [fp, #44]	; 0x2c
					 // 30 cyles for 2 poles


		filter_Accu=filter_Accu2=0;

		filter_Accu = (sample_Accu[0]+sample_Accu[1]+sample_Accu[2]+sample_Accu[3] +sample_Accu[4])>>10 ;
 80034fe:	1931      	adds	r1, r6, r4
 8003500:	186c      	adds	r4, r5, r1
 8003502:	9502      	str	r5, [sp, #8]
 8003504:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
		sample_Accu[3]=filter_accus[12];
 8003506:	971f      	str	r7, [sp, #124]	; 0x7c
		filter_Accu = (sample_Accu[0]+sample_Accu[1]+sample_Accu[2]+sample_Accu[3] +sample_Accu[4])>>10 ;
 8003508:	443c      	add	r4, r7
 800350a:	1962      	adds	r2, r4, r5
		filter_Accu =filter_Accu+32767;
 800350c:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8003510:	eb04 24a2 	add.w	r4, r4, r2, asr #10
		output_mix[(i&510)+1]=(filter_Accu>>8) &255;
		output_mix[(i&510)]=filter_Accu&255;

		filter_Accu=(sample_Accu[0]+sample_Accu[1])>>6;

		filter_Accu2=(sample_Accu[2]+sample_Accu[3]+sample_Accu[4])>>6; //filter + drum out
 8003514:	9a02      	ldr	r2, [sp, #8]
		filter_Accu=(sample_Accu[0]+sample_Accu[1])>>6;
 8003516:	1189      	asrs	r1, r1, #6
		filter_Accu2=(sample_Accu[2]+sample_Accu[3]+sample_Accu[4])>>6; //filter + drum out
 8003518:	443a      	add	r2, r7


	//	 if (one_shot!=199)   one_shot++;  //play one attack then stop

		 //if (filter_Accu>0xFFFF) {filter_Accu=0xFFFF;clipping++;} else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
		 if (filter_Accu>0x3FF) {filter_Accu=0x3FF;clipping++;} else if (filter_Accu<-1023) filter_Accu=-1023;  // limiter to 11 bits
 800351a:	f511 6f80 	cmn.w	r1, #1024	; 0x400
 800351e:	f403 70ff 	and.w	r0, r3, #510	; 0x1fe
		filter_Accu2=(sample_Accu[2]+sample_Accu[3]+sample_Accu[4])>>6; //filter + drum out
 8003522:	442a      	add	r2, r5
		 if (filter_Accu2>0x3FF) {filter_Accu2=0x3FF;clipping++;} else if (filter_Accu2<-1023) filter_Accu2=-1023;  // limiter to 11 bits



		 play_sample[(i_total<<1)]=(filter_Accu)+1023;   // final output disable for now 2544
 8003524:	bf18      	it	ne
 8003526:	f201 31ff 	addwne	r1, r1, #1023	; 0x3ff
		output_mix[(i&510)+1]=(filter_Accu>>8) &255;
 800352a:	4d4a      	ldr	r5, [pc, #296]	; (8003654 <sampling+0xe4c>)
 800352c:	f100 0601 	add.w	r6, r0, #1
		filter_Accu2=(sample_Accu[2]+sample_Accu[3]+sample_Accu[4])>>6; //filter + drum out
 8003530:	ea4f 12a2 	mov.w	r2, r2, asr #6
		output_mix[(i&510)+1]=(filter_Accu>>8) &255;
 8003534:	ea4f 2724 	mov.w	r7, r4, asr #8
		 play_sample[(i_total<<1)]=(filter_Accu)+1023;   // final output disable for now 2544
 8003538:	bf14      	ite	ne
 800353a:	b289      	uxthne	r1, r1
 800353c:	2100      	moveq	r1, #0
		 if (filter_Accu2>0x3FF) {filter_Accu2=0x3FF;clipping++;} else if (filter_Accu2<-1023) filter_Accu2=-1023;  // limiter to 11 bits
 800353e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
		output_mix[(i&510)+1]=(filter_Accu>>8) &255;
 8003542:	55af      	strb	r7, [r5, r6]
		output_mix[(i&510)]=filter_Accu&255;
 8003544:	542c      	strb	r4, [r5, r0]
		 if (filter_Accu2>0x3FF) {filter_Accu2=0x3FF;clipping++;} else if (filter_Accu2<-1023) filter_Accu2=-1023;  // limiter to 11 bits
 8003546:	f2c0 80d3 	blt.w	80036f0 <sampling+0xee8>
 800354a:	4c43      	ldr	r4, [pc, #268]	; (8003658 <sampling+0xe50>)
 800354c:	7820      	ldrb	r0, [r4, #0]
 800354e:	3001      	adds	r0, #1
 8003550:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003554:	7020      	strb	r0, [r4, #0]
		 play_sample[(i_total<<1)]=(filter_Accu)+1023;   // final output disable for now 2544
 8003556:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003558:	4c40      	ldr	r4, [pc, #256]	; (800365c <sampling+0xe54>)
 800355a:	0040      	lsls	r0, r0, #1
			for (i=0;i<512;i++) {    //  SLOW USES UP ABOUT 140
 800355c:	3301      	adds	r3, #1
		 play_sample[(i_total<<1)]=(filter_Accu)+1023;   // final output disable for now 2544
 800355e:	f824 1010 	strh.w	r1, [r4, r0, lsl #1]
		 play_sample[(i_total<<1)+1]=(filter_Accu2)+1023;
 8003562:	3001      	adds	r0, #1
			for (i=0;i<512;i++) {    //  SLOW USES UP ABOUT 140
 8003564:	b29b      	uxth	r3, r3
		 play_sample[(i_total<<1)+1]=(filter_Accu2)+1023;
 8003566:	f824 2010 	strh.w	r2, [r4, r0, lsl #1]
			for (i=0;i<512;i++) {    //  SLOW USES UP ABOUT 140
 800356a:	9a01      	ldr	r2, [sp, #4]
 800356c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003570:	8013      	strh	r3, [r2, #0]
 8003572:	f4ff aefa 	bcc.w	800336a <sampling+0xb62>

		//	  memcpy(&filter_accus_hold,filter_accus,60);

		//time_final=time_proc;   // in samples

		if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 8003576:	4b3a      	ldr	r3, [pc, #232]	; (8003660 <sampling+0xe58>)
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	b123      	cbz	r3, 8003586 <sampling+0xd7e>
 800357c:	4a39      	ldr	r2, [pc, #228]	; (8003664 <sampling+0xe5c>)
 800357e:	8813      	ldrh	r3, [r2, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	b29b      	uxth	r3, r3
 8003584:	8013      	strh	r3, [r2, #0]

		if  (record_output)  record_output_to_RAM();
 8003586:	4d38      	ldr	r5, [pc, #224]	; (8003668 <sampling+0xe60>)
 8003588:	782b      	ldrb	r3, [r5, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f040 8143 	bne.w	8003816 <sampling+0x100e>

		  ram_sync_swap=0;

		if     (sampler.acurrent_sample)  {sampler.start=(sampler.offset[sampler.acurrent_sample-1])<<10;  sampler.start_current=sampler.start;}		 // this works , start is always off by 256 from note start
 8003590:	9903      	ldr	r1, [sp, #12]
		  ram_sync_swap=0;
 8003592:	4d36      	ldr	r5, [pc, #216]	; (800366c <sampling+0xe64>)
		if     (sampler.acurrent_sample)  {sampler.start=(sampler.offset[sampler.acurrent_sample-1])<<10;  sampler.start_current=sampler.start;}		 // this works , start is always off by 256 from note start
 8003594:	f891 3081 	ldrb.w	r3, [r1, #129]	; 0x81
		  ram_sync_swap=0;
 8003598:	2200      	movs	r2, #0
 800359a:	702a      	strb	r2, [r5, #0]
		if     (sampler.acurrent_sample)  {sampler.start=(sampler.offset[sampler.acurrent_sample-1])<<10;  sampler.start_current=sampler.start;}		 // this works , start is always off by 256 from note start
 800359c:	b143      	cbz	r3, 80035b0 <sampling+0xda8>
 800359e:	18ca      	adds	r2, r1, r3
 80035a0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80035a4:	0292      	lsls	r2, r2, #10
 80035a6:	b292      	uxth	r2, r2
 80035a8:	f8a1 204c 	strh.w	r2, [r1, #76]	; 0x4c
 80035ac:	f8a1 2084 	strh.w	r2, [r1, #132]	; 0x84

		if     (sampler.acurrent_sample2)  {sampler.start2=(sampler.offset[sampler.acurrent_sample2-1])<<10;  sampler.start_current2=sampler.start2;}
 80035b0:	9803      	ldr	r0, [sp, #12]
 80035b2:	f890 2082 	ldrb.w	r2, [r0, #130]	; 0x82
 80035b6:	b142      	cbz	r2, 80035ca <sampling+0xdc2>
 80035b8:	1881      	adds	r1, r0, r2
 80035ba:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 80035be:	0289      	lsls	r1, r1, #10
 80035c0:	b289      	uxth	r1, r1
 80035c2:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
 80035c6:	f8a0 1086 	strh.w	r1, [r0, #134]	; 0x86

		    if (note[4].position) {sampler.ram_seq=sampler.start-(seq_pos>>1);sampler.ram_seq2=sampler.start2-(seq_pos>>1); note[4].position=0;	}  // start from note offset
 80035ca:	f898 1044 	ldrb.w	r1, [r8, #68]	; 0x44
 80035ce:	2900      	cmp	r1, #0
 80035d0:	f040 80ef 	bne.w	80037b2 <sampling+0xfaa>


		    if     (sampler.acurrent_sample==0)  sampler_mute[0]=1;    else sampler_mute[0]=0;
		    if     (sampler.acurrent_sample2==0)  sampler_mute[1]=1;    else sampler_mute[1]=0;
		if ((sampler.ram_seq)>=16128)     {sampler.ram_seq=sampler.start; }      // just for playback counter , maybe finishing early will cause it to stop
 80035d4:	9903      	ldr	r1, [sp, #12]
 80035d6:	f8b1 007c 	ldrh.w	r0, [r1, #124]	; 0x7c
		if ((sampler.ram_seq2)>=16128)     {sampler.ram_seq2=sampler.start2; }
 80035da:	f8b1 107e 	ldrh.w	r1, [r1, #126]	; 0x7e
		    if     (sampler.acurrent_sample==0)  sampler_mute[0]=1;    else sampler_mute[0]=0;
 80035de:	4e24      	ldr	r6, [pc, #144]	; (8003670 <sampling+0xe68>)
 80035e0:	fab3 f483 	clz	r4, r3
 80035e4:	0964      	lsrs	r4, r4, #5
 80035e6:	7034      	strb	r4, [r6, #0]
		    if     (sampler.acurrent_sample2==0)  sampler_mute[1]=1;    else sampler_mute[1]=0;
 80035e8:	fab2 f482 	clz	r4, r2
 80035ec:	0964      	lsrs	r4, r4, #5
		if ((sampler.ram_seq)>=16128)     {sampler.ram_seq=sampler.start; }      // just for playback counter , maybe finishing early will cause it to stop
 80035ee:	f5b0 5f7c 	cmp.w	r0, #16128	; 0x3f00
		    if     (sampler.acurrent_sample2==0)  sampler_mute[1]=1;    else sampler_mute[1]=0;
 80035f2:	7074      	strb	r4, [r6, #1]
		if ((sampler.ram_seq)>=16128)     {sampler.ram_seq=sampler.start; }      // just for playback counter , maybe finishing early will cause it to stop
 80035f4:	d342      	bcc.n	800367c <sampling+0xe74>
 80035f6:	9c03      	ldr	r4, [sp, #12]
 80035f8:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
 80035fc:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
 8003600:	e03c      	b.n	800367c <sampling+0xe74>
 8003602:	bf00      	nop
 8003604:	20012e44 	.word	0x20012e44
 8003608:	20012e0c 	.word	0x20012e0c
 800360c:	20012e5c 	.word	0x20012e5c
 8003610:	20012ebe 	.word	0x20012ebe
 8003614:	20012ec6 	.word	0x20012ec6
 8003618:	2000f390 	.word	0x2000f390
 800361c:	2000f398 	.word	0x2000f398
 8003620:	2000f190 	.word	0x2000f190
 8003624:	2000fb98 	.word	0x2000fb98
 8003628:	2000f210 	.word	0x2000f210
 800362c:	20010398 	.word	0x20010398
 8003630:	2000f290 	.word	0x2000f290
 8003634:	20010b98 	.word	0x20010b98
 8003638:	2000f310 	.word	0x2000f310
 800363c:	20011398 	.word	0x20011398
 8003640:	2000b144 	.word	0x2000b144
 8003644:	2000b14c 	.word	0x2000b14c
 8003648:	2000b148 	.word	0x2000b148
 800364c:	2000b150 	.word	0x2000b150
 8003650:	2000ad28 	.word	0x2000ad28
 8003654:	2000ea1c 	.word	0x2000ea1c
 8003658:	2000ad1a 	.word	0x2000ad1a
 800365c:	20011b98 	.word	0x20011b98
 8003660:	20008b1a 	.word	0x20008b1a
 8003664:	2000c16c 	.word	0x2000c16c
 8003668:	20012e08 	.word	0x20012e08
 800366c:	20012e02 	.word	0x20012e02
 8003670:	20012ec4 	.word	0x20012ec4
 8003674:	2000c170 	.word	0x2000c170
 8003678:	2000ce08 	.word	0x2000ce08
		if ((sampler.ram_seq2)>=16128)     {sampler.ram_seq2=sampler.start2; }
 800367c:	f5b1 5f7c 	cmp.w	r1, #16128	; 0x3f00
 8003680:	d304      	bcc.n	800368c <sampling+0xe84>
 8003682:	9803      	ldr	r0, [sp, #12]
 8003684:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
 8003688:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e


		//	sampler.length=sampler.end-sampler.start;
		if  ((sampler.acurrent_sample)    &&  (sampler.sample_select[sampler.acurrent_sample-1]==0)   )     ram_sync_swap=1;   // swap to RAM  from sample on 0 select  ,this should be started after last
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8089 	beq.w	80037a4 <sampling+0xf9c>
 8003692:	9903      	ldr	r1, [sp, #12]
 8003694:	440b      	add	r3, r1
 8003696:	79db      	ldrb	r3, [r3, #7]
 8003698:	b90b      	cbnz	r3, 800369e <sampling+0xe96>
 800369a:	2101      	movs	r1, #1
 800369c:	7029      	strb	r1, [r5, #0]
	//	if(sampler.trigger_position )  { sampler.ram_seq=sampler.start;note[3].position=1; }   // starts here not perfect , figure out better



		if(counter_16>127) counter_16=0;
 800369e:	496a      	ldr	r1, [pc, #424]	; (8003848 <sampling+0x1040>)
 80036a0:	8809      	ldrh	r1, [r1, #0]
 80036a2:	297f      	cmp	r1, #127	; 0x7f
 80036a4:	d902      	bls.n	80036ac <sampling+0xea4>
 80036a6:	4868      	ldr	r0, [pc, #416]	; (8003848 <sampling+0x1040>)
 80036a8:	2100      	movs	r1, #0
 80036aa:	8001      	strh	r1, [r0, #0]

//	sample_flash_address=((sampler.sample_select[sampler.acurrent_sample] *128)<<8)+((counter_16) <<8);  // change this soemthing mroe friendly , also keep last 64k for menus ,wavs maybe just before as well


			  if  (sampler.acurrent_sample)    sample_flash_address[0]=((sampler.sample_select[sampler.acurrent_sample-1] *128)<<8)+((sampler.ram_seq>>8)<<9);  //let see , limited now with a 1k jumps or 31
 80036ac:	9903      	ldr	r1, [sp, #12]
 80036ae:	f8b1 007c 	ldrh.w	r0, [r1, #124]	; 0x7c
 80036b2:	4966      	ldr	r1, [pc, #408]	; (800384c <sampling+0x1044>)
 80036b4:	03db      	lsls	r3, r3, #15
 80036b6:	0a00      	lsrs	r0, r0, #8
 80036b8:	eb03 2040 	add.w	r0, r3, r0, lsl #9
 80036bc:	6008      	str	r0, [r1, #0]
				if (sampler.acurrent_sample2)     sample_flash_address[1]=((sampler.sample_select[sampler.acurrent_sample2-1] *128)<<8)+((sampler.ram_seq2>>8)<<9);
 80036be:	b14a      	cbz	r2, 80036d4 <sampling+0xecc>
 80036c0:	9b03      	ldr	r3, [sp, #12]
 80036c2:	441a      	add	r2, r3
 80036c4:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80036c8:	79d2      	ldrb	r2, [r2, #7]
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	025b      	lsls	r3, r3, #9
 80036ce:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 80036d2:	604b      	str	r3, [r1, #4]

			  sampler_1k_load(sample_flash_address[0]);   // about 12 cycles  from send to receive  , total 25 cycles for 2 sets finished
 80036d4:	f7fe ffbc 	bl	8002650 <sampler_1k_load>
			  sample_dma_counter=1;

			  time_final[0]=time_proc;
 80036d8:	4a5d      	ldr	r2, [pc, #372]	; (8003850 <sampling+0x1048>)
			  sample_dma_counter=1;
 80036da:	495e      	ldr	r1, [pc, #376]	; (8003854 <sampling+0x104c>)
			  time_final[0]=time_proc;
 80036dc:	4b5e      	ldr	r3, [pc, #376]	; (8003858 <sampling+0x1050>)
 80036de:	8812      	ldrh	r2, [r2, #0]
 80036e0:	801a      	strh	r2, [r3, #0]
			  sample_dma_counter=1;
 80036e2:	2001      	movs	r0, #1
 80036e4:	7008      	strb	r0, [r1, #0]





		}  // TOTAL IS ABOUT 330 ATM  , 260 with no filters
 80036e6:	b03b      	add	sp, #236	; 0xec
 80036e8:	ecbd 8b02 	vpop	{d8}
 80036ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 play_sample[(i_total<<1)+1]=(filter_Accu2)+1023;
 80036f0:	485a      	ldr	r0, [pc, #360]	; (800385c <sampling+0x1054>)
 80036f2:	4282      	cmp	r2, r0
 80036f4:	bfb8      	it	lt
 80036f6:	4602      	movlt	r2, r0
 80036f8:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80036fc:	b292      	uxth	r2, r2
 80036fe:	e72a      	b.n	8003556 <sampling+0xd4e>
 8003700:	4691      	mov	r9, r2
 8003702:	e671      	b.n	80033e8 <sampling+0xbe0>
	if((i&3)==3)    {delay_cntr=(delay_cntr+1)&2047;
 8003704:	4956      	ldr	r1, [pc, #344]	; (8003860 <sampling+0x1058>)
	    delay_accu2=(delay_buffer[ (delay_cntr+(2047-(delay[0].time<<6)))&2047] * delay[0].mix)>>4;}
 8003706:	4d57      	ldr	r5, [pc, #348]	; (8003864 <sampling+0x105c>)
	if((i&3)==3)    {delay_cntr=(delay_cntr+1)&2047;
 8003708:	880c      	ldrh	r4, [r1, #0]
	if((i&3)==3) {delay_buffer[delay_cntr]=((delay_accu<<1)+(delay[0].feedback*delay_accu4)		)>>4;								delay_accu=0;	}
 800370a:	0057      	lsls	r7, r2, #1
	if((i&3)==3)    {delay_cntr=(delay_cntr+1)&2047;
 800370c:	3401      	adds	r4, #1
	    delay_accu2=(delay_buffer[ (delay_cntr+(2047-(delay[0].time<<6)))&2047] * delay[0].mix)>>4;}
 800370e:	4a56      	ldr	r2, [pc, #344]	; (8003868 <sampling+0x1060>)
	if((i&3)==3)    {delay_cntr=(delay_cntr+1)&2047;
 8003710:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8003714:	800c      	strh	r4, [r1, #0]
	    delay_accu2=(delay_buffer[ (delay_cntr+(2047-(delay[0].time<<6)))&2047] * delay[0].mix)>>4;}
 8003716:	7811      	ldrb	r1, [r2, #0]
 8003718:	7856      	ldrb	r6, [r2, #1]
 800371a:	0189      	lsls	r1, r1, #6
 800371c:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
 8003720:	3107      	adds	r1, #7
 8003722:	4421      	add	r1, r4
 8003724:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8003728:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
 800372c:	fb16 f601 	smulbb	r6, r6, r1
	if((i&3)==3) {delay_buffer[delay_cntr]=((delay_accu<<1)+(delay[0].feedback*delay_accu4)		)>>4;								delay_accu=0;	}
 8003730:	7891      	ldrb	r1, [r2, #2]
	    delay_accu2=(delay_buffer[ (delay_cntr+(2047-(delay[0].time<<6)))&2047] * delay[0].mix)>>4;}
 8003732:	4a4e      	ldr	r2, [pc, #312]	; (800386c <sampling+0x1064>)
 8003734:	1136      	asrs	r6, r6, #4
 8003736:	6016      	str	r6, [r2, #0]
	delay_accu3=(delay_accu2+ delay_accu3)>>1;
 8003738:	4a4d      	ldr	r2, [pc, #308]	; (8003870 <sampling+0x1068>)
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	4416      	add	r6, r2
 800373e:	4a4c      	ldr	r2, [pc, #304]	; (8003870 <sampling+0x1068>)
 8003740:	1076      	asrs	r6, r6, #1
 8003742:	6016      	str	r6, [r2, #0]
	delay_accu4=(delay_accu3+ delay_accu4)>>1;
 8003744:	4a4b      	ldr	r2, [pc, #300]	; (8003874 <sampling+0x106c>)
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	4432      	add	r2, r6
 800374a:	1052      	asrs	r2, r2, #1
	if((i&3)==3) {delay_buffer[delay_cntr]=((delay_accu<<1)+(delay[0].feedback*delay_accu4)		)>>4;								delay_accu=0;	}
 800374c:	fb02 7101 	mla	r1, r2, r1, r7
 8003750:	1109      	asrs	r1, r1, #4
 8003752:	f825 1014 	strh.w	r1, [r5, r4, lsl #1]
	delay_accu4=(delay_accu3+ delay_accu4)>>1;
 8003756:	4947      	ldr	r1, [pc, #284]	; (8003874 <sampling+0x106c>)
 8003758:	600a      	str	r2, [r1, #0]
	if((i&3)==3) {delay_buffer[delay_cntr]=((delay_accu<<1)+(delay[0].feedback*delay_accu4)		)>>4;								delay_accu=0;	}
 800375a:	4947      	ldr	r1, [pc, #284]	; (8003878 <sampling+0x1070>)
	sample_Accu[0]= ((sample_Accu[0])+delay_accu4)>>1;
 800375c:	4491      	add	r9, r2
	if((i&3)==3) {delay_buffer[delay_cntr]=((delay_accu<<1)+(delay[0].feedback*delay_accu4)		)>>4;								delay_accu=0;	}
 800375e:	2200      	movs	r2, #0
	sample_Accu[0]= ((sample_Accu[0])+delay_accu4)>>1;
 8003760:	ea4f 0969 	mov.w	r9, r9, asr #1
	if((i&3)==3) {delay_buffer[delay_cntr]=((delay_accu<<1)+(delay[0].feedback*delay_accu4)		)>>4;								delay_accu=0;	}
 8003764:	600a      	str	r2, [r1, #0]
 8003766:	e674      	b.n	8003452 <sampling+0xc4a>
						phaser[0]=31-(filter[0].resonance);
 8003768:	4b44      	ldr	r3, [pc, #272]	; (800387c <sampling+0x1074>)
 800376a:	4a45      	ldr	r2, [pc, #276]	; (8003880 <sampling+0x1078>)
 800376c:	f893 9002 	ldrb.w	r9, [r3, #2]
						phaser[1]=-31-(filter[1].resonance);
 8003770:	7a9f      	ldrb	r7, [r3, #10]
						phaser[2]=31-(filter[2].resonance);
 8003772:	7c9e      	ldrb	r6, [r3, #18]
						phaser[3]=31-(filter[3].resonance);
 8003774:	7e99      	ldrb	r1, [r3, #26]
						phaser[0]=31-(filter[0].resonance);
 8003776:	f1c9 091f 	rsb	r9, r9, #31
						phaser[1]=-31-(filter[1].resonance);
 800377a:	f1c7 07e1 	rsb	r7, r7, #225	; 0xe1
						phaser[2]=31-(filter[2].resonance);
 800377e:	f1c6 061f 	rsb	r6, r6, #31
						phaser[3]=31-(filter[3].resonance);
 8003782:	f1c1 011f 	rsb	r1, r1, #31
 8003786:	b2c9      	uxtb	r1, r1
						phaser[0]=31-(filter[0].resonance);
 8003788:	fa5f f989 	uxtb.w	r9, r9
						phaser[1]=-31-(filter[1].resonance);
 800378c:	b2ff      	uxtb	r7, r7
						phaser[2]=31-(filter[2].resonance);
 800378e:	b2f6      	uxtb	r6, r6
						phaser[3]=31-(filter[3].resonance);
 8003790:	70d1      	strb	r1, [r2, #3]
						phaser[0]=31-(filter[0].resonance);
 8003792:	f882 9000 	strb.w	r9, [r2]
						phaser[1]=-31-(filter[1].resonance);
 8003796:	7057      	strb	r7, [r2, #1]
						phaser[2]=31-(filter[2].resonance);
 8003798:	7096      	strb	r6, [r2, #2]
						phaser[3]=31-(filter[3].resonance);
 800379a:	910b      	str	r1, [sp, #44]	; 0x2c
						frq_point();
 800379c:	f7fd ffc0 	bl	8001720 <frq_point>
 80037a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80037a2:	e5f5      	b.n	8003390 <sampling+0xb88>
		if(counter_16>127) counter_16=0;
 80037a4:	4928      	ldr	r1, [pc, #160]	; (8003848 <sampling+0x1040>)
 80037a6:	8809      	ldrh	r1, [r1, #0]
 80037a8:	297f      	cmp	r1, #127	; 0x7f
 80037aa:	d817      	bhi.n	80037dc <sampling+0xfd4>
			  sampler_1k_load(sample_flash_address[0]);   // about 12 cycles  from send to receive  , total 25 cycles for 2 sets finished
 80037ac:	4927      	ldr	r1, [pc, #156]	; (800384c <sampling+0x1044>)
 80037ae:	6808      	ldr	r0, [r1, #0]
 80037b0:	e785      	b.n	80036be <sampling+0xeb6>
		    if (note[4].position) {sampler.ram_seq=sampler.start-(seq_pos>>1);sampler.ram_seq2=sampler.start2-(seq_pos>>1); note[4].position=0;	}  // start from note offset
 80037b2:	9e03      	ldr	r6, [sp, #12]
 80037b4:	4933      	ldr	r1, [pc, #204]	; (8003884 <sampling+0x107c>)
 80037b6:	f8b6 004c 	ldrh.w	r0, [r6, #76]	; 0x4c
 80037ba:	780c      	ldrb	r4, [r1, #0]
 80037bc:	f8b6 104e 	ldrh.w	r1, [r6, #78]	; 0x4e
 80037c0:	eba0 0054 	sub.w	r0, r0, r4, lsr #1
 80037c4:	eba1 0154 	sub.w	r1, r1, r4, lsr #1
 80037c8:	b280      	uxth	r0, r0
 80037ca:	b289      	uxth	r1, r1
 80037cc:	2400      	movs	r4, #0
 80037ce:	f8a6 007c 	strh.w	r0, [r6, #124]	; 0x7c
 80037d2:	f8a6 107e 	strh.w	r1, [r6, #126]	; 0x7e
 80037d6:	f888 4044 	strb.w	r4, [r8, #68]	; 0x44
 80037da:	e700      	b.n	80035de <sampling+0xdd6>
		if(counter_16>127) counter_16=0;
 80037dc:	491a      	ldr	r1, [pc, #104]	; (8003848 <sampling+0x1040>)
 80037de:	800b      	strh	r3, [r1, #0]
			  sampler_1k_load(sample_flash_address[0]);   // about 12 cycles  from send to receive  , total 25 cycles for 2 sets finished
 80037e0:	491a      	ldr	r1, [pc, #104]	; (800384c <sampling+0x1044>)
 80037e2:	6808      	ldr	r0, [r1, #0]
 80037e4:	e76b      	b.n	80036be <sampling+0xeb6>
 80037e6:	4b28      	ldr	r3, [pc, #160]	; (8003888 <sampling+0x1080>)
 80037e8:	9301      	str	r3, [sp, #4]
 80037ea:	f7ff b8b8 	b.w	800295e <sampling+0x156>
if ((tempo_mod==511 )   && (sampler.ram_seq<=256)    && (seq.pos>>4)      )   { next_isr=0; tempo_count=0; }   //  this should sync  rough
 80037ee:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80037f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f6:	f63f a87d 	bhi.w	80028f4 <sampling+0xec>
 80037fa:	f89a 3000 	ldrb.w	r3, [sl]
 80037fe:	091b      	lsrs	r3, r3, #4
 8003800:	f43f a878 	beq.w	80028f4 <sampling+0xec>
 8003804:	4a21      	ldr	r2, [pc, #132]	; (800388c <sampling+0x1084>)
 8003806:	4922      	ldr	r1, [pc, #136]	; (8003890 <sampling+0x1088>)
 8003808:	9204      	str	r2, [sp, #16]
 800380a:	2300      	movs	r3, #0
 800380c:	9106      	str	r1, [sp, #24]
 800380e:	8013      	strh	r3, [r2, #0]
 8003810:	800b      	strh	r3, [r1, #0]
 8003812:	f7ff b873 	b.w	80028fc <sampling+0xf4>
void record_output_to_RAM(void){
//	  if (sampler.record_enable)  { return;} // skip if recording already
    memcpy(	&RAM[record_out_counter], output_mix,512);   // transfer
 8003816:	4e1f      	ldr	r6, [pc, #124]	; (8003894 <sampling+0x108c>)
 8003818:	481f      	ldr	r0, [pc, #124]	; (8003898 <sampling+0x1090>)
 800381a:	8834      	ldrh	r4, [r6, #0]
 800381c:	491f      	ldr	r1, [pc, #124]	; (800389c <sampling+0x1094>)
 800381e:	4420      	add	r0, r4
 8003820:	f44f 7200 	mov.w	r2, #512	; 0x200
    record_out_counter =record_out_counter+512;
 8003824:	f504 7400 	add.w	r4, r4, #512	; 0x200
    memcpy(	&RAM[record_out_counter], output_mix,512);   // transfer
 8003828:	f004 fdba 	bl	80083a0 <memcpy>
    record_out_counter =record_out_counter+512;
 800382c:	b2a4      	uxth	r4, r4
if (record_out_counter>=32767) { record_out_counter=0; record_output=0;
 800382e:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8003832:	429c      	cmp	r4, r3
 8003834:	d801      	bhi.n	800383a <sampling+0x1032>
    record_out_counter =record_out_counter+512;
 8003836:	8034      	strh	r4, [r6, #0]
 8003838:	e6aa      	b.n	8003590 <sampling+0xd88>
if (record_out_counter>=32767) { record_out_counter=0; record_output=0;
 800383a:	2300      	movs	r3, #0
 800383c:	8033      	strh	r3, [r6, #0]
 800383e:	702b      	strb	r3, [r5, #0]

						RAM_normalise();   }  // reset and stop record RAM_normalise();
 8003840:	f7fe ff32 	bl	80026a8 <RAM_normalise>

		     }
 8003844:	e6a4      	b.n	8003590 <sampling+0xd88>
 8003846:	bf00      	nop
 8003848:	2000ad1c 	.word	0x2000ad1c
 800384c:	20012eb0 	.word	0x20012eb0
 8003850:	20014738 	.word	0x20014738
 8003854:	20012eac 	.word	0x20012eac
 8003858:	20014734 	.word	0x20014734
 800385c:	fffffc01 	.word	0xfffffc01
 8003860:	2000c154 	.word	0x2000c154
 8003864:	2000b154 	.word	0x2000b154
 8003868:	2000b130 	.word	0x2000b130
 800386c:	2000b148 	.word	0x2000b148
 8003870:	2000b14c 	.word	0x2000b14c
 8003874:	2000b150 	.word	0x2000b150
 8003878:	2000b144 	.word	0x2000b144
 800387c:	20008b20 	.word	0x20008b20
 8003880:	2000f390 	.word	0x2000f390
 8003884:	200132ff 	.word	0x200132ff
 8003888:	2000d764 	.word	0x2000d764
 800388c:	2000e9ca 	.word	0x2000e9ca
 8003890:	2001452a 	.word	0x2001452a
 8003894:	20012e06 	.word	0x20012e06
 8003898:	20000000 	.word	0x20000000
 800389c:	2000ea1c 	.word	0x2000ea1c

080038a0 <SystemClock_Config>:
{
 80038a0:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038a2:	2300      	movs	r3, #0
{
 80038a4:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038a6:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 80038aa:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038ae:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80038b2:	e9cd 3305 	strd	r3, r3, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038b6:	491f      	ldr	r1, [pc, #124]	; (8003934 <SystemClock_Config+0x94>)
 80038b8:	9301      	str	r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038ba:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038bc:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038be:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038c0:	4a1d      	ldr	r2, [pc, #116]	; (8003938 <SystemClock_Config+0x98>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80038c2:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80038c6:	6408      	str	r0, [r1, #64]	; 0x40
 80038c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038ca:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80038ce:	9101      	str	r1, [sp, #4]
 80038d0:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038d2:	9302      	str	r3, [sp, #8]
 80038d4:	6811      	ldr	r1, [r2, #0]
 80038d6:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80038da:	6011      	str	r1, [r2, #0]
 80038dc:	6812      	ldr	r2, [r2, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038de:	930f      	str	r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038e0:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80038e4:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038e6:	2310      	movs	r3, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038e8:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038ea:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038ec:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038f0:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038f2:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80038f4:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLN = 100;
 80038f6:	2264      	movs	r2, #100	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80038f8:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038fa:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 100;
 80038fc:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003900:	e9cd 4312 	strd	r4, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003904:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003906:	f002 ff11 	bl	800672c <HAL_RCC_OscConfig>
 800390a:	b108      	cbz	r0, 8003910 <SystemClock_Config+0x70>
 800390c:	b672      	cpsid	i
  while (1)
 800390e:	e7fe      	b.n	800390e <SystemClock_Config+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003910:	210f      	movs	r1, #15
 8003912:	4603      	mov	r3, r0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003914:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003918:	9103      	str	r1, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800391a:	a803      	add	r0, sp, #12
 800391c:	2103      	movs	r1, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800391e:	e9cd 4304 	strd	r4, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003922:	e9cd 2206 	strd	r2, r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003926:	f003 f919 	bl	8006b5c <HAL_RCC_ClockConfig>
 800392a:	b108      	cbz	r0, 8003930 <SystemClock_Config+0x90>
 800392c:	b672      	cpsid	i
  while (1)
 800392e:	e7fe      	b.n	800392e <SystemClock_Config+0x8e>
}
 8003930:	b014      	add	sp, #80	; 0x50
 8003932:	bd10      	pop	{r4, pc}
 8003934:	40023800 	.word	0x40023800
 8003938:	40007000 	.word	0x40007000

0800393c <main>:
{
 800393c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003940:	2400      	movs	r4, #0
{
 8003942:	b0af      	sub	sp, #188	; 0xbc
  HAL_Init();
 8003944:	f001 f914 	bl	8004b70 <HAL_Init>
  SystemClock_Config();
 8003948:	f7ff ffaa 	bl	80038a0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394c:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
 8003950:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003954:	4da7      	ldr	r5, [pc, #668]	; (8003bf4 <main+0x2b8>)
 8003956:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003958:	9425      	str	r4, [sp, #148]	; 0x94
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800395a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800395c:	48a6      	ldr	r0, [pc, #664]	; (8003bf8 <main+0x2bc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	632b      	str	r3, [r5, #48]	; 0x30
 8003964:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	930f      	str	r3, [sp, #60]	; 0x3c
 800396c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800396e:	9410      	str	r4, [sp, #64]	; 0x40
 8003970:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003972:	f043 0302 	orr.w	r3, r3, #2
 8003976:	632b      	str	r3, [r5, #48]	; 0x30
 8003978:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	9310      	str	r3, [sp, #64]	; 0x40
 8003980:	9b10      	ldr	r3, [sp, #64]	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003982:	9411      	str	r4, [sp, #68]	; 0x44
 8003984:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003986:	f043 0304 	orr.w	r3, r3, #4
 800398a:	632b      	str	r3, [r5, #48]	; 0x30
 800398c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800398e:	f003 0304 	and.w	r3, r3, #4
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003992:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003994:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003996:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800399a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800399c:	f002 f9be 	bl	8005d1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 80039a0:	2201      	movs	r2, #1
 80039a2:	4896      	ldr	r0, [pc, #600]	; (8003bfc <main+0x2c0>)
 80039a4:	2110      	movs	r1, #16
 80039a6:	f002 f9b9 	bl	8005d1c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039aa:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039ac:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
  GPIO_InitStruct.Pin = encoder2_Pin|encoder1_Pin;
 80039b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b4:	4891      	ldr	r0, [pc, #580]	; (8003bfc <main+0x2c0>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039b6:	9623      	str	r6, [sp, #140]	; 0x8c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b8:	a921      	add	r1, sp, #132	; 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039ba:	e9cd 3721 	strd	r3, r7, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039be:	f002 f8bb 	bl	8005b38 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_Pin;
 80039c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80039c6:	488c      	ldr	r0, [pc, #560]	; (8003bf8 <main+0x2bc>)
  GPIO_InitStruct.Pin = LED_Pin;
 80039c8:	9321      	str	r3, [sp, #132]	; 0x84
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80039ca:	a921      	add	r1, sp, #132	; 0x84
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039cc:	e9cd 6422 	strd	r6, r4, [sp, #136]	; 0x88
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d0:	9424      	str	r4, [sp, #144]	; 0x90
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80039d2:	f002 f8b1 	bl	8005b38 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = record_pin_Pin|GPIO_PIN_2;
 80039d6:	f241 0304 	movw	r3, #4100	; 0x1004
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039da:	4889      	ldr	r0, [pc, #548]	; (8003c00 <main+0x2c4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039dc:	9722      	str	r7, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039de:	a921      	add	r1, sp, #132	; 0x84
  GPIO_InitStruct.Pin = record_pin_Pin|GPIO_PIN_2;
 80039e0:	9321      	str	r3, [sp, #132]	; 0x84
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039e2:	9623      	str	r6, [sp, #140]	; 0x8c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e4:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e6:	f002 f8a7 	bl	8005b38 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS1_Pin;
 80039ea:	2310      	movs	r3, #16
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 80039ec:	4883      	ldr	r0, [pc, #524]	; (8003bfc <main+0x2c0>)
  GPIO_InitStruct.Pin = CS1_Pin;
 80039ee:	9321      	str	r3, [sp, #132]	; 0x84
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 80039f0:	a921      	add	r1, sp, #132	; 0x84
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	e9cd 6422 	strd	r6, r4, [sp, #136]	; 0x88
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f6:	9724      	str	r7, [sp, #144]	; 0x90
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 80039f8:	f002 f89e 	bl	8005b38 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 80039fc:	4622      	mov	r2, r4
 80039fe:	2104      	movs	r1, #4
 8003a00:	2028      	movs	r0, #40	; 0x28
 8003a02:	f001 fe23 	bl	800564c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003a06:	2028      	movs	r0, #40	; 0x28
 8003a08:	f001 fe5e 	bl	80056c8 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a0c:	940d      	str	r4, [sp, #52]	; 0x34
 8003a0e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003a10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a14:	632b      	str	r3, [r5, #48]	; 0x30
 8003a16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1c:	930d      	str	r3, [sp, #52]	; 0x34
 8003a1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a20:	940e      	str	r4, [sp, #56]	; 0x38
 8003a22:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003a24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a28:	632b      	str	r3, [r5, #48]	; 0x30
 8003a2a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hadc1.Instance = ADC1;
 8003a2c:	4d75      	ldr	r5, [pc, #468]	; (8003c04 <main+0x2c8>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8003a32:	4622      	mov	r2, r4
 8003a34:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a36:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8003a38:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8003a3c:	f001 fe06 	bl	800564c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003a40:	200f      	movs	r0, #15
 8003a42:	f001 fe41 	bl	80056c8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003a46:	4622      	mov	r2, r4
 8003a48:	4621      	mov	r1, r4
 8003a4a:	2038      	movs	r0, #56	; 0x38
 8003a4c:	f001 fdfe 	bl	800564c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003a50:	2038      	movs	r0, #56	; 0x38
 8003a52:	f001 fe39 	bl	80056c8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003a56:	4622      	mov	r2, r4
 8003a58:	4621      	mov	r1, r4
 8003a5a:	203a      	movs	r0, #58	; 0x3a
 8003a5c:	f001 fdf6 	bl	800564c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003a60:	203a      	movs	r0, #58	; 0x3a
 8003a62:	f001 fe31 	bl	80056c8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 8003a66:	4622      	mov	r2, r4
 8003a68:	2102      	movs	r1, #2
 8003a6a:	203c      	movs	r0, #60	; 0x3c
 8003a6c:	f001 fdee 	bl	800564c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8003a70:	203c      	movs	r0, #60	; 0x3c
 8003a72:	f001 fe29 	bl	80056c8 <HAL_NVIC_EnableIRQ>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003a76:	2220      	movs	r2, #32
 8003a78:	4621      	mov	r1, r4
 8003a7a:	a821      	add	r0, sp, #132	; 0x84
  ADC_ChannelConfTypeDef sConfig = {0};
 8003a7c:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8003a80:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003a84:	f004 fc9a 	bl	80083bc <memset>
  hadc1.Instance = ADC1;
 8003a88:	4b5f      	ldr	r3, [pc, #380]	; (8003c08 <main+0x2cc>)
 8003a8a:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003a8c:	4b5f      	ldr	r3, [pc, #380]	; (8003c0c <main+0x2d0>)
 8003a8e:	62ab      	str	r3, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003a90:	4628      	mov	r0, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8003a92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003a96:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003a98:	612e      	str	r6, [r5, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003a9a:	762e      	strb	r6, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003a9c:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003aa0:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003aa2:	60ec      	str	r4, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003aa4:	616c      	str	r4, [r5, #20]
  hadc1.Init.NbrOfConversion = 1;
 8003aa6:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003aa8:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8003aac:	606b      	str	r3, [r5, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003aae:	f001 f89d 	bl	8004bec <HAL_ADC_Init>
 8003ab2:	b108      	cbz	r0, 8003ab8 <main+0x17c>
 8003ab4:	b672      	cpsid	i
  while (1)
 8003ab6:	e7fe      	b.n	8003ab6 <main+0x17a>
  sConfig.Channel = ADC_CHANNEL_9;
 8003ab8:	2309      	movs	r3, #9
 8003aba:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003abc:	a914      	add	r1, sp, #80	; 0x50
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003abe:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ac0:	4628      	mov	r0, r5
  sConfig.Rank = 1;
 8003ac2:	9615      	str	r6, [sp, #84]	; 0x54
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003ac4:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ac6:	f001 fb47 	bl	8005158 <HAL_ADC_ConfigChannel>
 8003aca:	b108      	cbz	r0, 8003ad0 <main+0x194>
 8003acc:	b672      	cpsid	i
  while (1)
 8003ace:	e7fe      	b.n	8003ace <main+0x192>
  sConfigInjected.InjectedOffset = 0;
 8003ad0:	e9cd 7023 	strd	r7, r0, [sp, #140]	; 0x8c
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8003ad4:	4b4e      	ldr	r3, [pc, #312]	; (8003c10 <main+0x2d4>)
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8003ad6:	9028      	str	r0, [sp, #160]	; 0xa0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8003ad8:	9021      	str	r0, [sp, #132]	; 0x84
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8003ada:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003ade:	a921      	add	r1, sp, #132	; 0x84
 8003ae0:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = 1;
 8003ae2:	9622      	str	r6, [sp, #136]	; 0x88
  sConfigInjected.InjectedNbrOfConversion = 3;
 8003ae4:	9725      	str	r7, [sp, #148]	; 0x94
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8003ae6:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003ae8:	f001 fcc2 	bl	8005470 <HAL_ADCEx_InjectedConfigChannel>
 8003aec:	b108      	cbz	r0, 8003af2 <main+0x1b6>
 8003aee:	b672      	cpsid	i
  while (1)
 8003af0:	e7fe      	b.n	8003af0 <main+0x1b4>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8003af2:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003af4:	a921      	add	r1, sp, #132	; 0x84
 8003af6:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = 2;
 8003af8:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003afc:	f001 fcb8 	bl	8005470 <HAL_ADCEx_InjectedConfigChannel>
 8003b00:	4603      	mov	r3, r0
 8003b02:	b108      	cbz	r0, 8003b08 <main+0x1cc>
 8003b04:	b672      	cpsid	i
  while (1)
 8003b06:	e7fe      	b.n	8003b06 <main+0x1ca>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003b08:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003b0a:	a921      	add	r1, sp, #132	; 0x84
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8003b0c:	2308      	movs	r3, #8
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003b0e:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8003b10:	9321      	str	r3, [sp, #132]	; 0x84
  sConfigInjected.InjectedRank = 3;
 8003b12:	9722      	str	r7, [sp, #136]	; 0x88
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003b14:	f001 fcac 	bl	8005470 <HAL_ADCEx_InjectedConfigChannel>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	b108      	cbz	r0, 8003b20 <main+0x1e4>
 8003b1c:	b672      	cpsid	i
  while (1)
 8003b1e:	e7fe      	b.n	8003b1e <main+0x1e2>
  hspi2.Instance = SPI2;
 8003b20:	483c      	ldr	r0, [pc, #240]	; (8003c14 <main+0x2d8>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003b22:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8003c20 <main+0x2e4>
 8003b26:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b2a:	e9c0 a200 	strd	sl, r2, [r0]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b32:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003b34:	2230      	movs	r2, #48	; 0x30
 8003b36:	61c2      	str	r2, [r0, #28]
  hspi2.Init.CRCPolynomial = 10;
 8003b38:	220a      	movs	r2, #10
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b3a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b42:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCPolynomial = 10;
 8003b46:	e9c0 320a 	strd	r3, r2, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003b4a:	f003 f98f 	bl	8006e6c <HAL_SPI_Init>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	b108      	cbz	r0, 8003b56 <main+0x21a>
 8003b52:	b672      	cpsid	i
  while (1)
 8003b54:	e7fe      	b.n	8003b54 <main+0x218>
  htim3.Instance = TIM3;
 8003b56:	4c30      	ldr	r4, [pc, #192]	; (8003c18 <main+0x2dc>)
 8003b58:	4a30      	ldr	r2, [pc, #192]	; (8003c1c <main+0x2e0>)
 8003b5a:	6022      	str	r2, [r4, #0]
  htim3.Init.Period = 2808;
 8003b5c:	f640 22f8 	movw	r2, #2808	; 0xaf8
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b60:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
 8003b64:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b68:	e9cd 0021 	strd	r0, r0, [sp, #132]	; 0x84
 8003b6c:	e9cd 0023 	strd	r0, r0, [sp, #140]	; 0x8c
 8003b70:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b74:	e9c4 0001 	strd	r0, r0, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b78:	9012      	str	r0, [sp, #72]	; 0x48
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b7a:	9027      	str	r0, [sp, #156]	; 0x9c
  htim3.Init.Period = 2808;
 8003b7c:	60e2      	str	r2, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b7e:	6120      	str	r0, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b80:	2280      	movs	r2, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003b82:	4620      	mov	r0, r4
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b84:	61a2      	str	r2, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b86:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003b88:	f004 f864 	bl	8007c54 <HAL_TIM_Base_Init>
 8003b8c:	b108      	cbz	r0, 8003b92 <main+0x256>
 8003b8e:	b672      	cpsid	i
  while (1)
 8003b90:	e7fe      	b.n	8003b90 <main+0x254>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b96:	a914      	add	r1, sp, #80	; 0x50
 8003b98:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b9a:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b9c:	f003 fea0 	bl	80078e0 <HAL_TIM_ConfigClockSource>
 8003ba0:	b108      	cbz	r0, 8003ba6 <main+0x26a>
 8003ba2:	b672      	cpsid	i
  while (1)
 8003ba4:	e7fe      	b.n	8003ba4 <main+0x268>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f004 f8b0 	bl	8007d0c <HAL_TIM_PWM_Init>
 8003bac:	4603      	mov	r3, r0
 8003bae:	b108      	cbz	r0, 8003bb4 <main+0x278>
 8003bb0:	b672      	cpsid	i
  while (1)
 8003bb2:	e7fe      	b.n	8003bb2 <main+0x276>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003bb4:	a912      	add	r1, sp, #72	; 0x48
 8003bb6:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bb8:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003bbc:	f004 f9fc 	bl	8007fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8003bc0:	b108      	cbz	r0, 8003bc6 <main+0x28a>
 8003bc2:	b672      	cpsid	i
  while (1)
 8003bc4:	e7fe      	b.n	8003bc4 <main+0x288>
  sConfigOC.Pulse = 0;
 8003bc6:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bc8:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003bca:	2704      	movs	r7, #4
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bcc:	4812      	ldr	r0, [pc, #72]	; (8003c18 <main+0x2dc>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bce:	9223      	str	r2, [sp, #140]	; 0x8c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bd0:	a921      	add	r1, sp, #132	; 0x84
  sConfigOC.Pulse = 0;
 8003bd2:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003bd6:	9725      	str	r7, [sp, #148]	; 0x94
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bd8:	f004 f988 	bl	8007eec <HAL_TIM_PWM_ConfigChannel>
 8003bdc:	b108      	cbz	r0, 8003be2 <main+0x2a6>
 8003bde:	b672      	cpsid	i
  while (1)
 8003be0:	e7fe      	b.n	8003be0 <main+0x2a4>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003be2:	480d      	ldr	r0, [pc, #52]	; (8003c18 <main+0x2dc>)
 8003be4:	463a      	mov	r2, r7
 8003be6:	a921      	add	r1, sp, #132	; 0x84
 8003be8:	f004 f980 	bl	8007eec <HAL_TIM_PWM_ConfigChannel>
 8003bec:	4604      	mov	r4, r0
 8003bee:	b1c8      	cbz	r0, 8003c24 <main+0x2e8>
 8003bf0:	b672      	cpsid	i
  while (1)
 8003bf2:	e7fe      	b.n	8003bf2 <main+0x2b6>
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40020800 	.word	0x40020800
 8003bfc:	40020000 	.word	0x40020000
 8003c00:	40020400 	.word	0x40020400
 8003c04:	2000d334 	.word	0x2000d334
 8003c08:	40012000 	.word	0x40012000
 8003c0c:	0f000001 	.word	0x0f000001
 8003c10:	000f0001 	.word	0x000f0001
 8003c14:	2000d5a8 	.word	0x2000d5a8
 8003c18:	2000d690 	.word	0x2000d690
 8003c1c:	40000400 	.word	0x40000400
 8003c20:	40003800 	.word	0x40003800
  htim4.Instance = TIM4;
 8003c24:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8003da4 <main+0x468>
  HAL_TIM_MspPostInit(&htim3);
 8003c28:	4857      	ldr	r0, [pc, #348]	; (8003d88 <main+0x44c>)
 8003c2a:	f000 fea1 	bl	8004970 <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 8003c2e:	4b57      	ldr	r3, [pc, #348]	; (8003d8c <main+0x450>)
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c30:	9424      	str	r4, [sp, #144]	; 0x90
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c32:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c36:	e9cd 4728 	strd	r4, r7, [sp, #160]	; 0xa0
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c3a:	e9c8 4401 	strd	r4, r4, [r8, #4]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c3e:	f8c8 4018 	str.w	r4, [r8, #24]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c42:	2501      	movs	r5, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8003c44:	2402      	movs	r4, #2
  htim4.Instance = TIM4;
 8003c46:	f8c8 3000 	str.w	r3, [r8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003c4a:	f44f 7600 	mov.w	r6, #512	; 0x200
 8003c4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003c52:	a921      	add	r1, sp, #132	; 0x84
 8003c54:	4640      	mov	r0, r8
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003c56:	e9c8 3603 	strd	r3, r6, [r8, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003c5a:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
  sConfig.IC1Filter = 4;
 8003c5e:	9725      	str	r7, [sp, #148]	; 0x94
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003c60:	9426      	str	r4, [sp, #152]	; 0x98
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c62:	9523      	str	r5, [sp, #140]	; 0x8c
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c64:	9527      	str	r5, [sp, #156]	; 0x9c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003c66:	f004 f87f 	bl	8007d68 <HAL_TIM_Encoder_Init>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	b108      	cbz	r0, 8003c72 <main+0x336>
 8003c6e:	b672      	cpsid	i
  while (1)
 8003c70:	e7fe      	b.n	8003c70 <main+0x334>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003c72:	4640      	mov	r0, r8
 8003c74:	a914      	add	r1, sp, #80	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c76:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003c7a:	f004 f99d 	bl	8007fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	b108      	cbz	r0, 8003c86 <main+0x34a>
 8003c82:	b672      	cpsid	i
  while (1)
 8003c84:	e7fe      	b.n	8003c84 <main+0x348>
  hi2c2.Instance = I2C2;
 8003c86:	4842      	ldr	r0, [pc, #264]	; (8003d90 <main+0x454>)
  hi2c2.Init.ClockSpeed = 100000;
 8003c88:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8003da8 <main+0x46c>
  hi2c2.Init.OwnAddress1 = 0;
 8003c8c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c2.Init.OwnAddress2 = 0;
 8003c90:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c94:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c2.Init.ClockSpeed = 100000;
 8003c98:	4b3e      	ldr	r3, [pc, #248]	; (8003d94 <main+0x458>)
 8003c9a:	e9c0 8300 	strd	r8, r3, [r0]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ca2:	6103      	str	r3, [r0, #16]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003ca4:	f002 fa56 	bl	8006154 <HAL_I2C_Init>
 8003ca8:	4680      	mov	r8, r0
 8003caa:	b108      	cbz	r0, 8003cb0 <main+0x374>
 8003cac:	b672      	cpsid	i
  while (1)
 8003cae:	e7fe      	b.n	8003cae <main+0x372>
  MX_SPI1_Init();
 8003cb0:	f7fc ff72 	bl	8000b98 <MX_SPI1_Init>
  huart1.Instance = USART1;
 8003cb4:	4838      	ldr	r0, [pc, #224]	; (8003d98 <main+0x45c>)
  huart1.Init.BaudRate = 115200;
 8003cb6:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 8003dac <main+0x470>
  huart1.Init.Parity = UART_PARITY_NONE;
 8003cba:	f8c0 8010 	str.w	r8, [r0, #16]
  huart1.Init.BaudRate = 115200;
 8003cbe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003cc2:	e9c0 e300 	strd	lr, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX;
 8003cc6:	2308      	movs	r3, #8
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003cc8:	e9c0 8802 	strd	r8, r8, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ccc:	e9c0 8806 	strd	r8, r8, [r0, #24]
  huart1.Init.Mode = UART_MODE_TX;
 8003cd0:	6143      	str	r3, [r0, #20]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8003cd2:	f004 fa59 	bl	8008188 <HAL_HalfDuplex_Init>
 8003cd6:	b108      	cbz	r0, 8003cdc <main+0x3a0>
 8003cd8:	b672      	cpsid	i
  while (1)
 8003cda:	e7fe      	b.n	8003cda <main+0x39e>
  htim10.Instance = TIM10;
 8003cdc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003db0 <main+0x474>
 8003ce0:	4b2e      	ldr	r3, [pc, #184]	; (8003d9c <main+0x460>)
 8003ce2:	f8c8 3000 	str.w	r3, [r8]
  htim10.Init.Period = 50000;
 8003ce6:	f24c 3350 	movw	r3, #50000	; 0xc350
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cea:	e9cd 0021 	strd	r0, r0, [sp, #132]	; 0x84
 8003cee:	e9cd 0023 	strd	r0, r0, [sp, #140]	; 0x8c
 8003cf2:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cf6:	e9c8 7001 	strd	r7, r0, [r8, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cfa:	9027      	str	r0, [sp, #156]	; 0x9c
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cfc:	f8c8 0010 	str.w	r0, [r8, #16]
  htim10.Init.Period = 50000;
 8003d00:	f8c8 300c 	str.w	r3, [r8, #12]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003d04:	4640      	mov	r0, r8
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d06:	2380      	movs	r3, #128	; 0x80
 8003d08:	f8c8 3018 	str.w	r3, [r8, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003d0c:	f003 ffa2 	bl	8007c54 <HAL_TIM_Base_Init>
 8003d10:	b108      	cbz	r0, 8003d16 <main+0x3da>
 8003d12:	b672      	cpsid	i
  while (1)
 8003d14:	e7fe      	b.n	8003d14 <main+0x3d8>
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8003d16:	4640      	mov	r0, r8
 8003d18:	f003 ffca 	bl	8007cb0 <HAL_TIM_OC_Init>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	b108      	cbz	r0, 8003d24 <main+0x3e8>
 8003d20:	b672      	cpsid	i
  while (1)
 8003d22:	e7fe      	b.n	8003d22 <main+0x3e6>
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d24:	4640      	mov	r0, r8
 8003d26:	a921      	add	r1, sp, #132	; 0x84
  sConfigOC.Pulse = 0;
 8003d28:	e9cd 2221 	strd	r2, r2, [sp, #132]	; 0x84
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d2c:	9223      	str	r2, [sp, #140]	; 0x8c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d2e:	9225      	str	r2, [sp, #148]	; 0x94
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d30:	f004 f8a0 	bl	8007e74 <HAL_TIM_OC_ConfigChannel>
 8003d34:	b108      	cbz	r0, 8003d3a <main+0x3fe>
 8003d36:	b672      	cpsid	i
  while (1)
 8003d38:	e7fe      	b.n	8003d38 <main+0x3fc>
  htim2.Instance = TIM2;
 8003d3a:	4b19      	ldr	r3, [pc, #100]	; (8003da0 <main+0x464>)
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d3c:	9024      	str	r0, [sp, #144]	; 0x90
  htim2.Instance = TIM2;
 8003d3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d42:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d46:	e9c3 0001 	strd	r0, r0, [r3, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d4a:	9028      	str	r0, [sp, #160]	; 0xa0
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d4c:	6198      	str	r0, [r3, #24]
  htim2.Instance = TIM2;
 8003d4e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003d50:	a921      	add	r1, sp, #132	; 0x84
  htim2.Init.Period = 4294967295;
 8003d52:	f04f 32ff 	mov.w	r2, #4294967295
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003d56:	4618      	mov	r0, r3
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003d58:	e9cd 5421 	strd	r5, r4, [sp, #132]	; 0x84
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003d5c:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d60:	9523      	str	r5, [sp, #140]	; 0x8c
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d62:	9527      	str	r5, [sp, #156]	; 0x9c
  sConfig.IC2Filter = 2;
 8003d64:	9429      	str	r4, [sp, #164]	; 0xa4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003d66:	611e      	str	r6, [r3, #16]
  htim2.Init.Period = 4294967295;
 8003d68:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003d6a:	f003 fffd 	bl	8007d68 <HAL_TIM_Encoder_Init>
 8003d6e:	b108      	cbz	r0, 8003d74 <main+0x438>
 8003d70:	b672      	cpsid	i
  while (1)
 8003d72:	e7fe      	b.n	8003d72 <main+0x436>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d74:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d76:	480a      	ldr	r0, [pc, #40]	; (8003da0 <main+0x464>)
 8003d78:	a914      	add	r1, sp, #80	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d7a:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d7e:	f004 f91b 	bl	8007fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8003d82:	b1b8      	cbz	r0, 8003db4 <main+0x478>
 8003d84:	b672      	cpsid	i
  while (1)
 8003d86:	e7fe      	b.n	8003d86 <main+0x44a>
 8003d88:	2000d690 	.word	0x2000d690
 8003d8c:	40000800 	.word	0x40000800
 8003d90:	2000d4fc 	.word	0x2000d4fc
 8003d94:	000186a0 	.word	0x000186a0
 8003d98:	2000d720 	.word	0x2000d720
 8003d9c:	40014400 	.word	0x40014400
 8003da0:	2000d648 	.word	0x2000d648
 8003da4:	2000d6d8 	.word	0x2000d6d8
 8003da8:	40005800 	.word	0x40005800
 8003dac:	40011000 	.word	0x40011000
 8003db0:	2000d600 	.word	0x2000d600
main_initial();   // initial setup
 8003db4:	f7fe fa4e 	bl	8002254 <main_initial>
 8003db8:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 8004098 <main+0x75c>
 8003dbc:	4e9e      	ldr	r6, [pc, #632]	; (8004038 <main+0x6fc>)
	  loop_counter++ ;
 8003dbe:	4a9f      	ldr	r2, [pc, #636]	; (800403c <main+0x700>)
 8003dc0:	7813      	ldrb	r3, [r2, #0]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	7013      	strb	r3, [r2, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 8003dc6:	f8db 3000 	ldr.w	r3, [fp]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	f8cb 3000 	str.w	r3, [fp]
	  uint32_t  millis = HAL_GetTick();
 8003dd0:	f000 fef4 	bl	8004bbc <HAL_GetTick>
	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 8003dd4:	f8db 3000 	ldr.w	r3, [fp]
	  uint32_t  millis = HAL_GetTick();
 8003dd8:	9005      	str	r0, [sp, #20]
	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	2b06      	cmp	r3, #6
 8003de0:	d101      	bne.n	8003de6 <main+0x4aa>
 8003de2:	f7fd fb03 	bl	80013ec <analoginputloopb>
			  if ((seq.tempo<40)&&(stop_toggle==0))    {stop_toggle=1; stop_start();stop_toggle=3; seq.tempo=50; }
 8003de6:	4b96      	ldr	r3, [pc, #600]	; (8004040 <main+0x704>)
 8003de8:	785b      	ldrb	r3, [r3, #1]
 8003dea:	2b27      	cmp	r3, #39	; 0x27
 8003dec:	d811      	bhi.n	8003e12 <main+0x4d6>
 8003dee:	4b95      	ldr	r3, [pc, #596]	; (8004044 <main+0x708>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 818a 	beq.w	800410c <main+0x7d0>
			  if ((seq.tempo<40)&&(stop_toggle==3))    {stop_toggle=2; stop_start();  stop_toggle=0;seq.tempo=50; }
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d10a      	bne.n	8003e12 <main+0x4d6>
 8003dfc:	4c91      	ldr	r4, [pc, #580]	; (8004044 <main+0x708>)
    if  (stop_toggle ==2) HAL_TIM_Base_Start_IT(&htim3);;
 8003dfe:	4892      	ldr	r0, [pc, #584]	; (8004048 <main+0x70c>)
			  if ((seq.tempo<40)&&(stop_toggle==3))    {stop_toggle=2; stop_start();  stop_toggle=0;seq.tempo=50; }
 8003e00:	2302      	movs	r3, #2
 8003e02:	7023      	strb	r3, [r4, #0]
    if  (stop_toggle ==2) HAL_TIM_Base_Start_IT(&htim3);;
 8003e04:	f003 fcb4 	bl	8007770 <HAL_TIM_Base_Start_IT>
			  if ((seq.tempo<40)&&(stop_toggle==3))    {stop_toggle=2; stop_start();  stop_toggle=0;seq.tempo=50; }
 8003e08:	2300      	movs	r3, #0
 8003e0a:	4a8d      	ldr	r2, [pc, #564]	; (8004040 <main+0x704>)
 8003e0c:	7023      	strb	r3, [r4, #0]
 8003e0e:	2332      	movs	r3, #50	; 0x32
 8003e10:	7053      	strb	r3, [r2, #1]
	if (loop_counter2==9024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 8003e12:	f8db 3000 	ldr.w	r3, [fp]
 8003e16:	f5b3 5f0d 	cmp.w	r3, #9024	; 0x2340
 8003e1a:	f000 818b 	beq.w	8004134 <main+0x7f8>
	if (serial_tosend){    // send on seq change
 8003e1e:	4b8b      	ldr	r3, [pc, #556]	; (800404c <main+0x710>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f040 813a 	bne.w	800409c <main+0x760>
		if (disp_end==1)	  {display_generate();}      // run this after gfx draw page finish
 8003e28:	4b89      	ldr	r3, [pc, #548]	; (8004050 <main+0x714>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d106      	bne.n	8003e3e <main+0x502>
	gfx_clear_flag=0;
 8003e30:	4b88      	ldr	r3, [pc, #544]	; (8004054 <main+0x718>)
 8003e32:	2400      	movs	r4, #0
 8003e34:	701c      	strb	r4, [r3, #0]
		  displayBuffer2(); // 5 cycles max for the lot or  0.2ms
 8003e36:	f7fd fd17 	bl	8001868 <displayBuffer2>
	 disp_end=0;   ///reset till next full page
 8003e3a:	4b85      	ldr	r3, [pc, #532]	; (8004050 <main+0x714>)
 8003e3c:	701c      	strb	r4, [r3, #0]
		if (init<6)				// after 6 its done for good   // no freeze here
 8003e3e:	4b86      	ldr	r3, [pc, #536]	; (8004058 <main+0x71c>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b05      	cmp	r3, #5
 8003e44:	f240 80d9 	bls.w	8003ffa <main+0x6be>
			if (sampler.sample_save) {
 8003e48:	f896 0042 	ldrb.w	r0, [r6, #66]	; 0x42
 8003e4c:	b178      	cbz	r0, 8003e6e <main+0x532>
			if (sampler.recorded[sampler.sample_save>>5]&(1<<(sampler.sample_save&31)))
 8003e4e:	0943      	lsrs	r3, r0, #5
 8003e50:	3306      	adds	r3, #6
 8003e52:	2201      	movs	r2, #1
 8003e54:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8003e58:	f000 031f 	and.w	r3, r0, #31
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	420b      	tst	r3, r1
			{sampler.sample_status=2;}  // feedback on sample status
 8003e62:	bf1a      	itte	ne
 8003e64:	2302      	movne	r3, #2
 8003e66:	f886 3080 	strbne.w	r3, [r6, #128]	; 0x80
			else sampler.sample_status=1;
 8003e6a:	f886 2080 	strbeq.w	r2, [r6, #128]	; 0x80
			if(sampler.sample_save_enable>10){
 8003e6e:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 8003e72:	2b0a      	cmp	r3, #10
 8003e74:	d90b      	bls.n	8003e8e <main+0x552>
			    				sample_save(sampler.sample_save,ram_ptr, sample_size);  // write sample no 255
 8003e76:	4979      	ldr	r1, [pc, #484]	; (800405c <main+0x720>)
 8003e78:	f648 320e 	movw	r2, #35598	; 0x8b0e
 8003e7c:	f7fe f8ee 	bl	800205c <sample_save>
			    sampler.sample_save_enable=0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
			    sampler.sample_save=0;   // reset position jus tin case
 8003e86:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
			    sampler.RAM_free=0; //
 8003e8a:	f886 304a 	strb.w	r3, [r6, #74]	; 0x4a
			 menu3_fill();encoder2();
 8003e8e:	f7fd ffd1 	bl	8001e34 <menu3_fill>
 8003e92:	f7fd ff35 	bl	8001d00 <encoder2>
		if ((loop_counter2&1023)==0){ // grab adc readings + 3ms , 32 step  // no freeze
 8003e96:	f8db 7000 	ldr.w	r7, [fp]
 8003e9a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003e9e:	bb3f      	cbnz	r7, 8003ef0 <main+0x5b4>
			HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 8003ea0:	486f      	ldr	r0, [pc, #444]	; (8004060 <main+0x724>)
 8003ea2:	f001 fa17 	bl	80052d4 <HAL_ADCEx_InjectedStart>
			HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	486d      	ldr	r0, [pc, #436]	; (8004060 <main+0x724>)
 8003eaa:	f000 ffd1 	bl	8004e50 <HAL_ADC_PollForConversion>
			adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8003eae:	2101      	movs	r1, #1
 8003eb0:	486b      	ldr	r0, [pc, #428]	; (8004060 <main+0x724>)
 8003eb2:	f001 fabb 	bl	800542c <HAL_ADCEx_InjectedGetValue>
			adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8003eb6:	2102      	movs	r1, #2
			adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8003eb8:	4605      	mov	r5, r0
			adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8003eba:	4869      	ldr	r0, [pc, #420]	; (8004060 <main+0x724>)
 8003ebc:	f001 fab6 	bl	800542c <HAL_ADCEx_InjectedGetValue>
			adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8003ec0:	2103      	movs	r1, #3
			adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8003ec2:	4604      	mov	r4, r0
			adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8003ec4:	4866      	ldr	r0, [pc, #408]	; (8004060 <main+0x724>)
 8003ec6:	f001 fab1 	bl	800542c <HAL_ADCEx_InjectedGetValue>
 8003eca:	4680      	mov	r8, r0
			HAL_ADCEx_InjectedStop(&hadc1) ;
 8003ecc:	4864      	ldr	r0, [pc, #400]	; (8004060 <main+0x724>)
 8003ece:	f001 fa7d 	bl	80053cc <HAL_ADCEx_InjectedStop>
			loop_counter=0;
 8003ed2:	4b5a      	ldr	r3, [pc, #360]	; (800403c <main+0x700>)
			adc_values[0]=	(4095-  adc_temp1[0])<<4;  //  4095 = 0
 8003ed4:	4863      	ldr	r0, [pc, #396]	; (8004064 <main+0x728>)
			loop_counter=0;
 8003ed6:	701f      	strb	r7, [r3, #0]
			adc_values[0]=	(4095-  adc_temp1[0])<<4;  //  4095 = 0
 8003ed8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003edc:	1b59      	subs	r1, r3, r5
			adc_values[1]=	 (4095- adc_temp1[1])<<4;
 8003ede:	1b1a      	subs	r2, r3, r4
			adc_values[2]=	 (4095-adc_temp1[2])<<4;
 8003ee0:	eba3 0308 	sub.w	r3, r3, r8
			adc_values[0]=	(4095-  adc_temp1[0])<<4;  //  4095 = 0
 8003ee4:	0109      	lsls	r1, r1, #4
			adc_values[1]=	 (4095- adc_temp1[1])<<4;
 8003ee6:	0112      	lsls	r2, r2, #4
			adc_values[2]=	 (4095-adc_temp1[2])<<4;
 8003ee8:	011b      	lsls	r3, r3, #4
			adc_values[0]=	(4095-  adc_temp1[0])<<4;  //  4095 = 0
 8003eea:	8001      	strh	r1, [r0, #0]
			adc_values[1]=	 (4095- adc_temp1[1])<<4;
 8003eec:	8042      	strh	r2, [r0, #2]
			adc_values[2]=	 (4095-adc_temp1[2])<<4;
 8003eee:	8083      	strh	r3, [r0, #4]
		if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8003ef0:	4b53      	ldr	r3, [pc, #332]	; (8004040 <main+0x704>)
 8003ef2:	781a      	ldrb	r2, [r3, #0]
 8003ef4:	2a07      	cmp	r2, #7
 8003ef6:	d079      	beq.n	8003fec <main+0x6b0>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 8003ef8:	485b      	ldr	r0, [pc, #364]	; (8004068 <main+0x72c>)
 8003efa:	f002 0201 	and.w	r2, r2, #1
 8003efe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f02:	f001 ff0b 	bl	8005d1c <HAL_GPIO_WritePin>
		if (adc_flag) {     //  only for sending out  , poor quality
 8003f06:	4b59      	ldr	r3, [pc, #356]	; (800406c <main+0x730>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	b9a3      	cbnz	r3, 8003f36 <main+0x5fa>
		if ((sample_point>512)&&( sample_pointD==512)) bank_write=1;
 8003f0c:	4b58      	ldr	r3, [pc, #352]	; (8004070 <main+0x734>)
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f16:	d907      	bls.n	8003f28 <main+0x5ec>
 8003f18:	4b56      	ldr	r3, [pc, #344]	; (8004074 <main+0x738>)
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f20:	d102      	bne.n	8003f28 <main+0x5ec>
 8003f22:	4a55      	ldr	r2, [pc, #340]	; (8004078 <main+0x73c>)
 8003f24:	2301      	movs	r3, #1
 8003f26:	8013      	strh	r3, [r2, #0]
		while  (bank_write)                         {							// wait for adc , priority
 8003f28:	4b53      	ldr	r3, [pc, #332]	; (8004078 <main+0x73c>)
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d041      	beq.n	8003fb4 <main+0x678>
			sampling();
 8003f30:	f7fe fc6a 	bl	8002808 <sampling>
 8003f34:	e7f8      	b.n	8003f28 <main+0x5ec>
		    if (adc_playback_position>1020) adc_playback_position=0;  // nudge
 8003f36:	4951      	ldr	r1, [pc, #324]	; (800407c <main+0x740>)
 8003f38:	4d51      	ldr	r5, [pc, #324]	; (8004080 <main+0x744>)
 8003f3a:	880a      	ldrh	r2, [r1, #0]
 8003f3c:	f5b2 7f7f 	cmp.w	r2, #1020	; 0x3fc
 8003f40:	bf84      	itt	hi
 8003f42:	2200      	movhi	r2, #0
 8003f44:	800a      	strhhi	r2, [r1, #0]
			if		(adc_flag==2)	  	{	adc_page=1536; }
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	bf18      	it	ne
 8003f4a:	2100      	movne	r1, #0
 8003f4c:	4b4d      	ldr	r3, [pc, #308]	; (8004084 <main+0x748>)
 8003f4e:	bf08      	it	eq
 8003f50:	f44f 61c0 	moveq.w	r1, #1536	; 0x600
			for (i=0;i<512;i++){
 8003f54:	1c4c      	adds	r4, r1, #1
 8003f56:	1c88      	adds	r0, r1, #2
 8003f58:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8003f5c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8003f60:	eb03 0040 	add.w	r0, r3, r0, lsl #1
			if		(adc_flag==2)	  	{	adc_page=1536; }
 8003f64:	2200      	movs	r2, #0
				adc_convert_temp=(adc_convert_temp/3);   // dc offset nearly spot on
 8003f66:	2703      	movs	r7, #3
				adc_convert_temp=adc_source[adc_convert_count]+adc_source[adc_convert_count+1]+adc_source[adc_convert_count+2]; //  17 470 khz  ~
 8003f68:	f834 c012 	ldrh.w	ip, [r4, r2, lsl #1]
 8003f6c:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8003f70:	4463      	add	r3, ip
 8003f72:	f830 c012 	ldrh.w	ip, [r0, r2, lsl #1]
			for (i=0;i<512;i++){
 8003f76:	3203      	adds	r2, #3
				adc_convert_temp=adc_source[adc_convert_count]+adc_source[adc_convert_count+1]+adc_source[adc_convert_count+2]; //  17 470 khz  ~
 8003f78:	4463      	add	r3, ip
 8003f7a:	b29b      	uxth	r3, r3
			for (i=0;i<512;i++){
 8003f7c:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
				adc_convert_temp=(adc_convert_temp/3);   // dc offset nearly spot on
 8003f80:	fbb3 f3f7 	udiv	r3, r3, r7
				input_holder[i]=adc_convert_temp<<4;
 8003f84:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003f88:	f825 3b02 	strh.w	r3, [r5], #2
			for (i=0;i<512;i++){
 8003f8c:	d1ec      	bne.n	8003f68 <main+0x62c>
 8003f8e:	493e      	ldr	r1, [pc, #248]	; (8004088 <main+0x74c>)
			if (sampler.record_enable)  {sampler.RAM_free=1;  loop_counter2=111;   sampler_ram_record(); }  //stop loop counter2
 8003f90:	f896 3046 	ldrb.w	r3, [r6, #70]	; 0x46
 8003f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f98:	800a      	strh	r2, [r1, #0]
 8003f9a:	b13b      	cbz	r3, 8003fac <main+0x670>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f886 304a 	strb.w	r3, [r6, #74]	; 0x4a
 8003fa2:	236f      	movs	r3, #111	; 0x6f
 8003fa4:	f8cb 3000 	str.w	r3, [fp]
 8003fa8:	f7fe fbe4 	bl	8002774 <sampler_ram_record>
			adc_flag=0;
 8003fac:	4a2f      	ldr	r2, [pc, #188]	; (800406c <main+0x730>)
 8003fae:	2300      	movs	r3, #0
 8003fb0:	7013      	strb	r3, [r2, #0]
 8003fb2:	e7ab      	b.n	8003f0c <main+0x5d0>
		if((millis-millis_stored)>5) {   // run gfx_line
 8003fb4:	4b35      	ldr	r3, [pc, #212]	; (800408c <main+0x750>)
 8003fb6:	9a05      	ldr	r2, [sp, #20]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b05      	cmp	r3, #5
 8003fbe:	f67f aefe 	bls.w	8003dbe <main+0x482>
		  LCD_Info_feedback();
 8003fc2:	f7fd ffb9 	bl	8001f38 <LCD_Info_feedback>
 8003fc6:	2408      	movs	r4, #8
					while ((up_counter2<8) && (init > 5) )								{
 8003fc8:	4b23      	ldr	r3, [pc, #140]	; (8004058 <main+0x71c>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2b05      	cmp	r3, #5
 8003fce:	d909      	bls.n	8003fe4 <main+0x6a8>
					gfx_line_fill();   // just run 8 times between sampling , dont need more
 8003fd0:	f7fd fdf6 	bl	8001bc0 <gfx_line_fill>
					loop_counter++;
 8003fd4:	4a19      	ldr	r2, [pc, #100]	; (800403c <main+0x700>)
 8003fd6:	7813      	ldrb	r3, [r2, #0]
					while ((up_counter2<8) && (init > 5) )								{
 8003fd8:	3c01      	subs	r4, #1
					loop_counter++;
 8003fda:	3301      	adds	r3, #1
					while ((up_counter2<8) && (init > 5) )								{
 8003fdc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
					loop_counter++;
 8003fe0:	7013      	strb	r3, [r2, #0]
					while ((up_counter2<8) && (init > 5) )								{
 8003fe2:	d1f1      	bne.n	8003fc8 <main+0x68c>
					}   millis_stored=millis;
 8003fe4:	4b29      	ldr	r3, [pc, #164]	; (800408c <main+0x750>)
 8003fe6:	9a05      	ldr	r2, [sp, #20]
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	e6e8      	b.n	8003dbe <main+0x482>
		if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8003fec:	4928      	ldr	r1, [pc, #160]	; (8004090 <main+0x754>)
 8003fee:	880b      	ldrh	r3, [r1, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d181      	bne.n	8003ef8 <main+0x5bc>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	800b      	strh	r3, [r1, #0]
 8003ff8:	e77e      	b.n	8003ef8 <main+0x5bc>
			for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8003ffa:	4a23      	ldr	r2, [pc, #140]	; (8004088 <main+0x74c>)
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	8013      	strh	r3, [r2, #0]
 8004000:	f7fd fd2e 	bl	8001a60 <display_init>
 8004004:	4a20      	ldr	r2, [pc, #128]	; (8004088 <main+0x74c>)
 8004006:	8813      	ldrh	r3, [r2, #0]
 8004008:	3301      	adds	r3, #1
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b05      	cmp	r3, #5
 800400e:	8013      	strh	r3, [r2, #0]
 8004010:	d9f6      	bls.n	8004000 <main+0x6c4>
		if (init==6)  {HAL_TIM_Base_Start_IT(&htim10);HAL_TIM_Base_Start(&htim10);	 gfx_TX_block(); 				}
 8004012:	4b11      	ldr	r3, [pc, #68]	; (8004058 <main+0x71c>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b06      	cmp	r3, #6
 8004018:	d107      	bne.n	800402a <main+0x6ee>
 800401a:	481e      	ldr	r0, [pc, #120]	; (8004094 <main+0x758>)
 800401c:	f003 fba8 	bl	8007770 <HAL_TIM_Base_Start_IT>
 8004020:	481c      	ldr	r0, [pc, #112]	; (8004094 <main+0x758>)
 8004022:	f003 fb75 	bl	8007710 <HAL_TIM_Base_Start>
 8004026:	f7fd fd63 	bl	8001af0 <gfx_TX_block>
		if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 800402a:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <main+0x71c>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b05      	cmp	r3, #5
 8004030:	f63f af0a 	bhi.w	8003e48 <main+0x50c>
 8004034:	e72f      	b.n	8003e96 <main+0x55a>
 8004036:	bf00      	nop
 8004038:	20008db0 	.word	0x20008db0
 800403c:	2000dd9c 	.word	0x2000dd9c
 8004040:	200132d0 	.word	0x200132d0
 8004044:	20014524 	.word	0x20014524
 8004048:	2000d690 	.word	0x2000d690
 800404c:	20013504 	.word	0x20013504
 8004050:	2000c157 	.word	0x2000c157
 8004054:	2000cea8 	.word	0x2000cea8
 8004058:	2000d766 	.word	0x2000d766
 800405c:	20000000 	.word	0x20000000
 8004060:	2000d334 	.word	0x2000d334
 8004064:	20008b10 	.word	0x20008b10
 8004068:	40020800 	.word	0x40020800
 800406c:	20009512 	.word	0x20009512
 8004070:	20012ebc 	.word	0x20012ebc
 8004074:	20012ec0 	.word	0x20012ec0
 8004078:	20008b1a 	.word	0x20008b1a
 800407c:	20009514 	.word	0x20009514
 8004080:	2000d76c 	.word	0x2000d76c
 8004084:	20009518 	.word	0x20009518
 8004088:	2000d764 	.word	0x2000d764
 800408c:	2000e9c4 	.word	0x2000e9c4
 8004090:	2000db70 	.word	0x2000db70
 8004094:	2000d600 	.word	0x2000d600
 8004098:	2000dda0 	.word	0x2000dda0
		  memcpy(serial_source,&seq,36); // copy bits
 800409c:	4cb5      	ldr	r4, [pc, #724]	; (8004374 <main+0xa38>)
 800409e:	4fb6      	ldr	r7, [pc, #728]	; (8004378 <main+0xa3c>)
		  memcpy(serial_source+96,potSource+252,64 );  // 4 * 16
 80040a0:	4db6      	ldr	r5, [pc, #728]	; (800437c <main+0xa40>)
 80040a2:	f8df 8320 	ldr.w	r8, [pc, #800]	; 80043c4 <main+0xa88>
 80040a6:	f8df e2fc 	ldr.w	lr, [pc, #764]	; 80043a4 <main+0xa68>
		  memcpy(serial_source,&seq,36); // copy bits
 80040aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80040ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040b0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	463c      	mov	r4, r7
		  memcpy(serial_source+96,potSource+252,64 );  // 4 * 16
 80040b6:	f04f 0c01 	mov.w	ip, #1
		  memcpy(serial_source,&seq,36); // copy bits
 80040ba:	f844 3b40 	str.w	r3, [r4], #64
		  memcpy(serial_source+96,potSource+252,64 );  // 4 * 16
 80040be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040c0:	46a1      	mov	r9, r4
 80040c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80040d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 80040d4:	3704      	adds	r7, #4
			  if (mem_counter<4)memcpy(serial_source+96+(mem_counter*7),&note[mem_counter+6],7 );
 80040d6:	f10c 33ff 	add.w	r3, ip, #4294967295
 80040da:	2b03      	cmp	r3, #3
 80040dc:	f240 8136 	bls.w	800434c <main+0xa10>
						memcpy(serial_source+36+(mem_counter*6),&LFO_slave1[mem_counter],6 );  // insert lfo settings
 80040e0:	f8de 3000 	ldr.w	r3, [lr]
 80040e4:	603b      	str	r3, [r7, #0]
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 80040e6:	f1bc 0f0a 	cmp.w	ip, #10
						memcpy(serial_source+36+(mem_counter*6),&LFO_slave1[mem_counter],6 );  // insert lfo settings
 80040ea:	f8be 3004 	ldrh.w	r3, [lr, #4]
 80040ee:	80bb      	strh	r3, [r7, #4]
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 80040f0:	f000 811f 	beq.w	8004332 <main+0x9f6>
 80040f4:	f10c 0c01 	add.w	ip, ip, #1
 80040f8:	fa1f fc8c 	uxth.w	ip, ip
 80040fc:	f109 0907 	add.w	r9, r9, #7
 8004100:	f108 0810 	add.w	r8, r8, #16
 8004104:	3706      	adds	r7, #6
 8004106:	f10e 0e06 	add.w	lr, lr, #6
 800410a:	e7e4      	b.n	80040d6 <main+0x79a>
			  if ((seq.tempo<40)&&(stop_toggle==0))    {stop_toggle=1; stop_start();stop_toggle=3; seq.tempo=50; }
 800410c:	4a9c      	ldr	r2, [pc, #624]	; (8004380 <main+0xa44>)
    if  (stop_toggle ==1) {HAL_TIM_Base_Stop_IT(&htim3);}
 800410e:	489d      	ldr	r0, [pc, #628]	; (8004384 <main+0xa48>)
			  if ((seq.tempo<40)&&(stop_toggle==0))    {stop_toggle=1; stop_start();stop_toggle=3; seq.tempo=50; }
 8004110:	4614      	mov	r4, r2
 8004112:	2301      	movs	r3, #1
 8004114:	7013      	strb	r3, [r2, #0]
    if  (stop_toggle ==1) {HAL_TIM_Base_Stop_IT(&htim3);}
 8004116:	f003 fb5f 	bl	80077d8 <HAL_TIM_Base_Stop_IT>
    if  (stop_toggle ==2) HAL_TIM_Base_Start_IT(&htim3);;
 800411a:	7823      	ldrb	r3, [r4, #0]
 800411c:	2b02      	cmp	r3, #2
 800411e:	d102      	bne.n	8004126 <main+0x7ea>
 8004120:	4898      	ldr	r0, [pc, #608]	; (8004384 <main+0xa48>)
 8004122:	f003 fb25 	bl	8007770 <HAL_TIM_Base_Start_IT>
			  if ((seq.tempo<40)&&(stop_toggle==0))    {stop_toggle=1; stop_start();stop_toggle=3; seq.tempo=50; }
 8004126:	4a96      	ldr	r2, [pc, #600]	; (8004380 <main+0xa44>)
 8004128:	2303      	movs	r3, #3
 800412a:	7013      	strb	r3, [r2, #0]
 800412c:	4a91      	ldr	r2, [pc, #580]	; (8004374 <main+0xa38>)
 800412e:	2332      	movs	r3, #50	; 0x32
 8004130:	7053      	strb	r3, [r2, #1]
 8004132:	e66e      	b.n	8003e12 <main+0x4d6>
		    if (mem_count>(EPROM_limit-2)) mem_count=0; else mem_count++;
 8004134:	4a94      	ldr	r2, [pc, #592]	; (8004388 <main+0xa4c>)
 8004136:	8813      	ldrh	r3, [r2, #0]
 8004138:	f5b3 7f19 	cmp.w	r3, #612	; 0x264
 800413c:	f200 80f5 	bhi.w	800432a <main+0x9ee>
 8004140:	3301      	adds	r3, #1
 8004142:	b29b      	uxth	r3, r3
		    if (mem_count>(EPROM_limit-50)) mem_count=461;  // this might feedback
 8004144:	f5b3 7f0d 	cmp.w	r3, #564	; 0x234
 8004148:	8013      	strh	r3, [r2, #0]
 800414a:	bf84      	itt	hi
 800414c:	f240 13cd 	movwhi	r3, #461	; 0x1cd
 8004150:	8013      	strhhi	r3, [r2, #0]
			memcpy(potSource,&seq,46); // about 35
 8004152:	4c88      	ldr	r4, [pc, #544]	; (8004374 <main+0xa38>)
 8004154:	4f8d      	ldr	r7, [pc, #564]	; (800438c <main+0xa50>)
			memcpy(potSource+476,&sampler,36);
 8004156:	4d8e      	ldr	r5, [pc, #568]	; (8004390 <main+0xa54>)
			  patch_target_parse(); //
 8004158:	f7fc ffea 	bl	8001130 <patch_target_parse>
			memcpy(potSource,&seq,46); // about 35
 800415c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800415e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004162:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004164:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004168:	c707      	stmia	r7!, {r0, r1, r2}
 800416a:	803b      	strh	r3, [r7, #0]
			memcpy(potSource+476,&sampler,36);
 800416c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004170:	9304      	str	r3, [sp, #16]
 8004172:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8004176:	9306      	str	r3, [sp, #24]
 8004178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800417a:	f507 74d8 	add.w	r4, r7, #432	; 0x1b0
 800417e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	6023      	str	r3, [r4, #0]
			memcpy(potSource+572,&delay,5);
 8004188:	4b82      	ldr	r3, [pc, #520]	; (8004394 <main+0xa58>)
 800418a:	f8df c23c 	ldr.w	ip, [pc, #572]	; 80043c8 <main+0xa8c>
 800418e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004192:	f04f 0800 	mov.w	r8, #0
 8004196:	f107 0a02 	add.w	sl, r7, #2
 800419a:	f107 093e 	add.w	r9, r7, #62	; 0x3e
 800419e:	6420      	str	r0, [r4, #64]	; 0x40
 80041a0:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
					memcpy(potSource+156+(i*16),&note[i],16 );  //grab note settings ,112 total , works
 80041a4:	497c      	ldr	r1, [pc, #496]	; (8004398 <main+0xa5c>)
				memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 80041a6:	4c7d      	ldr	r4, [pc, #500]	; (800439c <main+0xa60>)
					memcpy(potSource+156+(i*16),&note[i],16 );  //grab note settings ,112 total , works
 80041a8:	ea4f 1208 	mov.w	r2, r8, lsl #4
				memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 80041ac:	4625      	mov	r5, r4
					memcpy(potSource+156+(i*16),&note[i],16 );  //grab note settings ,112 total , works
 80041ae:	5888      	ldr	r0, [r1, r2]
				memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 80041b0:	2244      	movs	r2, #68	; 0x44
 80041b2:	fb02 fe08 	mul.w	lr, r2, r8
 80041b6:	4474      	add	r4, lr
 80041b8:	f855 500e 	ldr.w	r5, [r5, lr]
 80041bc:	9507      	str	r5, [sp, #28]
				memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 80041be:	221e      	movs	r2, #30
 80041c0:	fb02 f708 	mul.w	r7, r2, r8
 80041c4:	4d76      	ldr	r5, [pc, #472]	; (80043a0 <main+0xa64>)
				memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 80041c6:	88a4      	ldrh	r4, [r4, #4]
 80041c8:	9408      	str	r4, [sp, #32]
				memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 80041ca:	2206      	movs	r2, #6
 80041cc:	fb02 f208 	mul.w	r2, r2, r8
				memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 80041d0:	19ec      	adds	r4, r5, r7
				memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 80041d2:	920a      	str	r2, [sp, #40]	; 0x28
				memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 80041d4:	59ef      	ldr	r7, [r5, r7]
 80041d6:	9709      	str	r7, [sp, #36]	; 0x24
				memcpy(potSource+436+(i*4),&LFO_square[i],4 );
 80041d8:	2214      	movs	r2, #20
					memcpy(potSource+156+(i*16),&note[i],16 );  //grab note settings ,112 total , works
 80041da:	eb01 1308 	add.w	r3, r1, r8, lsl #4
				memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 80041de:	4d71      	ldr	r5, [pc, #452]	; (80043a4 <main+0xa68>)
 80041e0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
				memcpy(potSource+436+(i*4),&LFO_square[i],4 );
 80041e2:	4971      	ldr	r1, [pc, #452]	; (80043a8 <main+0xa6c>)
				memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 80041e4:	f894 e004 	ldrb.w	lr, [r4, #4]
				memcpy(potSource+436+(i*4),&LFO_square[i],4 );
 80041e8:	fb02 f208 	mul.w	r2, r2, r8
				memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 80041ec:	19ec      	adds	r4, r5, r7
				memcpy(potSource+436+(i*4),&LFO_square[i],4 );
 80041ee:	588a      	ldr	r2, [r1, r2]
			for(i=0;i<10;i++){
 80041f0:	496e      	ldr	r1, [pc, #440]	; (80043ac <main+0xa70>)
				memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 80041f2:	59ef      	ldr	r7, [r5, r7]
				memcpy(potSource+436+(i*4),&LFO_square[i],4 );
 80041f4:	920b      	str	r2, [sp, #44]	; 0x2c
			for(i=0;i<10;i++){
 80041f6:	f108 0801 	add.w	r8, r8, #1
					memcpy(potSource+156+(i*16),&note[i],16 );  //grab note settings ,112 total , works
 80041fa:	689a      	ldr	r2, [r3, #8]
				memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 80041fc:	88a5      	ldrh	r5, [r4, #4]
			for(i=0;i<10;i++){
 80041fe:	f8a1 8000 	strh.w	r8, [r1]
					memcpy(potSource+156+(i*16),&note[i],16 );  //grab note settings ,112 total , works
 8004202:	9c04      	ldr	r4, [sp, #16]
 8004204:	6859      	ldr	r1, [r3, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
				memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 800420a:	9907      	ldr	r1, [sp, #28]
 800420c:	f8ca 1000 	str.w	r1, [sl]
 8004210:	9908      	ldr	r1, [sp, #32]
 8004212:	f8aa 1004 	strh.w	r1, [sl, #4]
				memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 8004216:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004218:	f8c9 1000 	str.w	r1, [r9]
 800421c:	f889 e004 	strb.w	lr, [r9, #4]
				memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 8004220:	f8ca 714a 	str.w	r7, [sl, #330]	; 0x14a
 8004224:	f8aa 514e 	strh.w	r5, [sl, #334]	; 0x14e
			for(i=0;i<10;i++){
 8004228:	9404      	str	r4, [sp, #16]
				memcpy(potSource+316+(i*6),&patch[i],6 );   // not writing ?
 800422a:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 800422e:	f8aa 3112 	strh.w	r3, [sl, #274]	; 0x112
				memcpy(potSource+436+(i*4),&LFO_square[i],4 );
 8004232:	9b06      	ldr	r3, [sp, #24]
				memcpy(potSource+316+(i*6),&patch[i],6 );   // not writing ?
 8004234:	f8dc 0000 	ldr.w	r0, [ip]
				memcpy(potSource+436+(i*4),&LFO_square[i],4 );
 8004238:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				memcpy(potSource+316+(i*6),&patch[i],6 );   // not writing ?
 800423a:	f8ca 010e 	str.w	r0, [sl, #270]	; 0x10e
				memcpy(potSource+436+(i*4),&LFO_square[i],4 );
 800423e:	f843 2f04 	str.w	r2, [r3, #4]!
 8004242:	9306      	str	r3, [sp, #24]
				memcpy(potSource+512+(i*6),&patch[i+10],6 );
 8004244:	f8dc 31b8 	ldr.w	r3, [ip, #440]	; 0x1b8
 8004248:	f8ca 31d2 	str.w	r3, [sl, #466]	; 0x1d2
			for(i=0;i<10;i++){
 800424c:	f1b8 0f0a 	cmp.w	r8, #10
				memcpy(potSource+512+(i*6),&patch[i+10],6 );
 8004250:	f8bc 31bc 	ldrh.w	r3, [ip, #444]	; 0x1bc
 8004254:	f8aa 31d6 	strh.w	r3, [sl, #470]	; 0x1d6
			for(i=0;i<10;i++){
 8004258:	f109 0905 	add.w	r9, r9, #5
 800425c:	f10c 0c2c 	add.w	ip, ip, #44	; 0x2c
 8004260:	f10a 0a06 	add.w	sl, sl, #6
 8004264:	d19e      	bne.n	80041a4 <main+0x868>
			 uint8_t mem_verify_list[50]={0};
 8004266:	2100      	movs	r1, #0
 8004268:	222e      	movs	r2, #46	; 0x2e
 800426a:	a822      	add	r0, sp, #136	; 0x88
 800426c:	9121      	str	r1, [sp, #132]	; 0x84
 800426e:	f004 f8a5 	bl	80083bc <memset>
			 memcpy(&mem_buf_list, potSource+mem_count,50);  // copy 50 from potsource
 8004272:	4b45      	ldr	r3, [pc, #276]	; (8004388 <main+0xa4c>)
 8004274:	881d      	ldrh	r5, [r3, #0]
 8004276:	4b45      	ldr	r3, [pc, #276]	; (800438c <main+0xa50>)
 8004278:	195c      	adds	r4, r3, r5
 800427a:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
 800427e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8004282:	6820      	ldr	r0, [r4, #0]
 8004284:	6861      	ldr	r1, [r4, #4]
 8004286:	68a2      	ldr	r2, [r4, #8]
 8004288:	68e3      	ldr	r3, [r4, #12]
 800428a:	4667      	mov	r7, ip
 800428c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800428e:	3410      	adds	r4, #16
 8004290:	4574      	cmp	r4, lr
 8004292:	46bc      	mov	ip, r7
 8004294:	d1f5      	bne.n	8004282 <main+0x946>
 8004296:	8823      	ldrh	r3, [r4, #0]
 8004298:	803b      	strh	r3, [r7, #0]
			 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,mem_verify_list, 50,100);    // reading is quick , 50 bytse
 800429a:	ab21      	add	r3, sp, #132	; 0x84
 800429c:	9300      	str	r3, [sp, #0]
			 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 800429e:	09ab      	lsrs	r3, r5, #6
 80042a0:	3301      	adds	r3, #1
 80042a2:	f005 023f 	and.w	r2, r5, #63	; 0x3f
 80042a6:	eb02 1283 	add.w	r2, r2, r3, lsl #6
			 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,mem_verify_list, 50,100);    // reading is quick , 50 bytse
 80042aa:	2064      	movs	r0, #100	; 0x64
 80042ac:	2332      	movs	r3, #50	; 0x32
 80042ae:	e9cd 3001 	strd	r3, r0, [sp, #4]
 80042b2:	b292      	uxth	r2, r2
 80042b4:	2302      	movs	r3, #2
 80042b6:	21a0      	movs	r1, #160	; 0xa0
 80042b8:	483d      	ldr	r0, [pc, #244]	; (80043b0 <main+0xa74>)
 80042ba:	f002 f8c1 	bl	8006440 <HAL_I2C_Mem_Read>
			 for (read_counter=0;read_counter<50;read_counter++){
 80042be:	4b32      	ldr	r3, [pc, #200]	; (8004388 <main+0xa4c>)
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042c6:	ac21      	add	r4, sp, #132	; 0x84
 80042c8:	b292      	uxth	r2, r2
 80042ca:	a814      	add	r0, sp, #80	; 0x50
			 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,mem_verify_list, 50,100);    // reading is quick , 50 bytse
 80042cc:	2100      	movs	r1, #0
			     if (mem_verify_list[read_counter]!=mem_buf_list[read_counter])  { break;}  // exit if found difference
 80042ce:	f814 cb01 	ldrb.w	ip, [r4], #1
 80042d2:	f810 7b01 	ldrb.w	r7, [r0], #1
 80042d6:	45bc      	cmp	ip, r7
			     mem_count++;
 80042d8:	f103 0501 	add.w	r5, r3, #1
			     if (mem_verify_list[read_counter]!=mem_buf_list[read_counter])  { break;}  // exit if found difference
 80042dc:	f040 8094 	bne.w	8004408 <main+0xacc>
			     mem_count++;
 80042e0:	b2ab      	uxth	r3, r5
			 for (read_counter=0;read_counter<50;read_counter++){
 80042e2:	4293      	cmp	r3, r2
 80042e4:	f04f 0101 	mov.w	r1, #1
 80042e8:	d1f1      	bne.n	80042ce <main+0x992>
 80042ea:	4a27      	ldr	r2, [pc, #156]	; (8004388 <main+0xa4c>)
 80042ec:	8013      	strh	r3, [r2, #0]
						 mem_buf=potSource[mem_count];
 80042ee:	4b26      	ldr	r3, [pc, #152]	; (8004388 <main+0xa4c>)
			if (disable_eeprom==0)	HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);   // write changed
 80042f0:	4a30      	ldr	r2, [pc, #192]	; (80043b4 <main+0xa78>)
						 mem_buf=potSource[mem_count];
 80042f2:	881b      	ldrh	r3, [r3, #0]
			if (disable_eeprom==0)	HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);   // write changed
 80042f4:	7810      	ldrb	r0, [r2, #0]
						 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 80042f6:	099a      	lsrs	r2, r3, #6
 80042f8:	1c51      	adds	r1, r2, #1
 80042fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042fe:	eb02 1281 	add.w	r2, r2, r1, lsl #6
						 mem_buf=potSource[mem_count];
 8004302:	4922      	ldr	r1, [pc, #136]	; (800438c <main+0xa50>)
 8004304:	5ccb      	ldrb	r3, [r1, r3]
 8004306:	492c      	ldr	r1, [pc, #176]	; (80043b8 <main+0xa7c>)
						 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 8004308:	b292      	uxth	r2, r2
						 mem_buf=potSource[mem_count];
 800430a:	700b      	strb	r3, [r1, #0]
			if (disable_eeprom==0)	HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);   // write changed
 800430c:	b948      	cbnz	r0, 8004322 <main+0x9e6>
 800430e:	2301      	movs	r3, #1
 8004310:	9100      	str	r1, [sp, #0]
 8004312:	2164      	movs	r1, #100	; 0x64
 8004314:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8004318:	4825      	ldr	r0, [pc, #148]	; (80043b0 <main+0xa74>)
 800431a:	2302      	movs	r3, #2
 800431c:	21a0      	movs	r1, #160	; 0xa0
 800431e:	f001 ffe1 	bl	80062e4 <HAL_I2C_Mem_Write>
		loop_counter2=0; //reset
 8004322:	2300      	movs	r3, #0
 8004324:	f8cb 3000 	str.w	r3, [fp]
 8004328:	e579      	b.n	8003e1e <main+0x4e2>
 800432a:	4a17      	ldr	r2, [pc, #92]	; (8004388 <main+0xa4c>)
 800432c:	2300      	movs	r3, #0
 800432e:	8013      	strh	r3, [r2, #0]
		    if (mem_count>(EPROM_limit-50)) mem_count=461;  // this might feedback
 8004330:	e70f      	b.n	8004152 <main+0x816>
 8004332:	4b22      	ldr	r3, [pc, #136]	; (80043bc <main+0xa80>)
 8004334:	781a      	ldrb	r2, [r3, #0]
		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 8004336:	4b10      	ldr	r3, [pc, #64]	; (8004378 <main+0xa3c>)
 8004338:	5c99      	ldrb	r1, [r3, r2]
 800433a:	4b21      	ldr	r3, [pc, #132]	; (80043c0 <main+0xa84>)
 800433c:	5c98      	ldrb	r0, [r3, r2]
 800433e:	4288      	cmp	r0, r1
 8004340:	b2d3      	uxtb	r3, r2
 8004342:	d143      	bne.n	80043cc <main+0xa90>
 8004344:	2ba0      	cmp	r3, #160	; 0xa0
 8004346:	d841      	bhi.n	80043cc <main+0xa90>
 8004348:	3201      	adds	r2, #1
 800434a:	e7f4      	b.n	8004336 <main+0x9fa>
			  if (mem_counter<4)memcpy(serial_source+96+(mem_counter*7),&note[mem_counter+6],7 );
 800434c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8004350:	f8a9 3004 	strh.w	r3, [r9, #4]
 8004354:	f8d8 0000 	ldr.w	r0, [r8]
						memcpy(serial_source+36+(mem_counter*6),&LFO_slave1[mem_counter],6 );  // insert lfo settings
 8004358:	f8de 3000 	ldr.w	r3, [lr]
			  if (mem_counter<4)memcpy(serial_source+96+(mem_counter*7),&note[mem_counter+6],7 );
 800435c:	f898 2006 	ldrb.w	r2, [r8, #6]
 8004360:	f8c9 0000 	str.w	r0, [r9]
 8004364:	f889 2006 	strb.w	r2, [r9, #6]
						memcpy(serial_source+36+(mem_counter*6),&LFO_slave1[mem_counter],6 );  // insert lfo settings
 8004368:	603b      	str	r3, [r7, #0]
 800436a:	f8be 3004 	ldrh.w	r3, [lr, #4]
 800436e:	80bb      	strh	r3, [r7, #4]
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 8004370:	e6c0      	b.n	80040f4 <main+0x7b8>
 8004372:	bf00      	nop
 8004374:	200132d0 	.word	0x200132d0
 8004378:	20013304 	.word	0x20013304
 800437c:	20012c98 	.word	0x20012c98
 8004380:	20014524 	.word	0x20014524
 8004384:	2000d690 	.word	0x2000d690
 8004388:	2000dda8 	.word	0x2000dda8
 800438c:	20012b9c 	.word	0x20012b9c
 8004390:	20008db0 	.word	0x20008db0
 8004394:	2000b130 	.word	0x2000b130
 8004398:	20008c60 	.word	0x20008c60
 800439c:	20009110 	.word	0x20009110
 80043a0:	20009014 	.word	0x20009014
 80043a4:	200093b8 	.word	0x200093b8
 80043a8:	20009400 	.word	0x20009400
 80043ac:	2000d764 	.word	0x2000d764
 80043b0:	2000d4fc 	.word	0x2000d4fc
 80043b4:	2000c156 	.word	0x2000c156
 80043b8:	2000dda6 	.word	0x2000dda6
 80043bc:	20013505 	.word	0x20013505
 80043c0:	20013404 	.word	0x20013404
 80043c4:	20008cc0 	.word	0x20008cc0
 80043c8:	2000ee20 	.word	0x2000ee20
		  serial_source_temp[serial_up]=serial_source[serial_up];
 80043cc:	4810      	ldr	r0, [pc, #64]	; (8004410 <main+0xad4>)
 80043ce:	5481      	strb	r1, [r0, r2]
		  serial_send[3]=serial_source[serial_up];
 80043d0:	4a10      	ldr	r2, [pc, #64]	; (8004414 <main+0xad8>)
		  HAL_UART_Transmit(&huart1,serial_send,8, 100);  //send serial
 80043d2:	4811      	ldr	r0, [pc, #68]	; (8004418 <main+0xadc>)
		  serial_send[2]=serial_up;
 80043d4:	7093      	strb	r3, [r2, #2]
		  serial_send[3]=serial_source[serial_up];
 80043d6:	70d1      	strb	r1, [r2, #3]
		  serial_send[2]=serial_up;
 80043d8:	4611      	mov	r1, r2
		  serial_send[7]=seq.pos;  // chase
 80043da:	4a10      	ldr	r2, [pc, #64]	; (800441c <main+0xae0>)
 80043dc:	7812      	ldrb	r2, [r2, #0]
 80043de:	71ca      	strb	r2, [r1, #7]
		  if (serial_up>161) serial_up=0; else serial_up++;
 80043e0:	2ba1      	cmp	r3, #161	; 0xa1
		  serial_send[6]=0;
 80043e2:	f04f 0200 	mov.w	r2, #0
		  if (serial_up>161) serial_up=0; else serial_up++;
 80043e6:	bf94      	ite	ls
 80043e8:	3301      	addls	r3, #1
 80043ea:	4613      	movhi	r3, r2
		  serial_send[6]=0;
 80043ec:	718a      	strb	r2, [r1, #6]
		  if (serial_up>161) serial_up=0; else serial_up++;
 80043ee:	4a0c      	ldr	r2, [pc, #48]	; (8004420 <main+0xae4>)
		  HAL_UART_Transmit(&huart1,serial_send,8, 100);  //send serial
 80043f0:	4908      	ldr	r1, [pc, #32]	; (8004414 <main+0xad8>)
		  if (serial_up>161) serial_up=0; else serial_up++;
 80043f2:	bf98      	it	ls
 80043f4:	b2db      	uxtbls	r3, r3
 80043f6:	7013      	strb	r3, [r2, #0]
		  HAL_UART_Transmit(&huart1,serial_send,8, 100);  //send serial
 80043f8:	2364      	movs	r3, #100	; 0x64
 80043fa:	2208      	movs	r2, #8
 80043fc:	f003 fef8 	bl	80081f0 <HAL_UART_Transmit>
		  serial_tosend=0;
 8004400:	4a08      	ldr	r2, [pc, #32]	; (8004424 <main+0xae8>)
 8004402:	2300      	movs	r3, #0
 8004404:	7013      	strb	r3, [r2, #0]
 8004406:	e50f      	b.n	8003e28 <main+0x4ec>
 8004408:	2900      	cmp	r1, #0
 800440a:	f47f af6e 	bne.w	80042ea <main+0x9ae>
 800440e:	e76e      	b.n	80042ee <main+0x9b2>
 8004410:	20013404 	.word	0x20013404
 8004414:	20008e3c 	.word	0x20008e3c
 8004418:	2000d720 	.word	0x2000d720
 800441c:	200132d0 	.word	0x200132d0
 8004420:	20013505 	.word	0x20013505
 8004424:	20013504 	.word	0x20013504

08004428 <HAL_ADC_ConvHalfCpltCallback>:
		adc_flag=1;
 8004428:	4b01      	ldr	r3, [pc, #4]	; (8004430 <HAL_ADC_ConvHalfCpltCallback+0x8>)
 800442a:	2201      	movs	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]
	}
 800442e:	4770      	bx	lr
 8004430:	20009512 	.word	0x20009512

08004434 <HAL_ADC_ConvCpltCallback>:
	{
 8004434:	b510      	push	{r4, lr}
	HAL_ADC_Stop_DMA(&hadc1); HAL_ADC_Start_DMA(&hadc1,& adc_source, 3072);    // try half sample rate   , its 17606  khz
 8004436:	4c07      	ldr	r4, [pc, #28]	; (8004454 <HAL_ADC_ConvCpltCallback+0x20>)
	adc_flag=2;
 8004438:	4b07      	ldr	r3, [pc, #28]	; (8004458 <HAL_ADC_ConvCpltCallback+0x24>)
 800443a:	2202      	movs	r2, #2
	HAL_ADC_Stop_DMA(&hadc1); HAL_ADC_Start_DMA(&hadc1,& adc_source, 3072);    // try half sample rate   , its 17606  khz
 800443c:	4620      	mov	r0, r4
	adc_flag=2;
 800443e:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Stop_DMA(&hadc1); HAL_ADC_Start_DMA(&hadc1,& adc_source, 3072);    // try half sample rate   , its 17606  khz
 8004440:	f000 fe02 	bl	8005048 <HAL_ADC_Stop_DMA>
 8004444:	4620      	mov	r0, r4
 8004446:	4905      	ldr	r1, [pc, #20]	; (800445c <HAL_ADC_ConvCpltCallback+0x28>)
	}
 8004448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_Stop_DMA(&hadc1); HAL_ADC_Start_DMA(&hadc1,& adc_source, 3072);    // try half sample rate   , its 17606  khz
 800444c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8004450:	f000 bd56 	b.w	8004f00 <HAL_ADC_Start_DMA>
 8004454:	2000d334 	.word	0x2000d334
 8004458:	20009512 	.word	0x20009512
 800445c:	20009518 	.word	0x20009518

08004460 <HAL_SPI_TxRxHalfCpltCallback>:
	    if (SPI1==hspi->Instance) {
 8004460:	4b04      	ldr	r3, [pc, #16]	; (8004474 <HAL_SPI_TxRxHalfCpltCallback+0x14>)
 8004462:	6802      	ldr	r2, [r0, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d000      	beq.n	800446a <HAL_SPI_TxRxHalfCpltCallback+0xa>
	}		}
 8004468:	4770      	bx	lr
						flash_flag=1;}
 800446a:	4b03      	ldr	r3, [pc, #12]	; (8004478 <HAL_SPI_TxRxHalfCpltCallback+0x18>)
 800446c:	2201      	movs	r2, #1
 800446e:	701a      	strb	r2, [r3, #0]
	}		}
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40013000 	.word	0x40013000
 8004478:	20008b40 	.word	0x20008b40

0800447c <HAL_SPI_TxRxCpltCallback>:
		   if (SPI1==hspi->Instance) {
 800447c:	4b11      	ldr	r3, [pc, #68]	; (80044c4 <HAL_SPI_TxRxCpltCallback+0x48>)
 800447e:	6802      	ldr	r2, [r0, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d000      	beq.n	8004486 <HAL_SPI_TxRxCpltCallback+0xa>
 8004484:	4770      	bx	lr
		{
 8004486:	b510      	push	{r4, lr}
		       if (sample_dma_counter==0)		{  memcpy(flash_read_block3,flash_read_block2+4,1024);   }
 8004488:	4c0f      	ldr	r4, [pc, #60]	; (80044c8 <HAL_SPI_TxRxCpltCallback+0x4c>)
		       HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  //  end
 800448a:	4810      	ldr	r0, [pc, #64]	; (80044cc <HAL_SPI_TxRxCpltCallback+0x50>)
 800448c:	2110      	movs	r1, #16
 800448e:	2201      	movs	r2, #1
 8004490:	f001 fc44 	bl	8005d1c <HAL_GPIO_WritePin>
		       if (sample_dma_counter==0)		{  memcpy(flash_read_block3,flash_read_block2+4,1024);   }
 8004494:	7823      	ldrb	r3, [r4, #0]
 8004496:	490e      	ldr	r1, [pc, #56]	; (80044d0 <HAL_SPI_TxRxCpltCallback+0x54>)
 8004498:	b173      	cbz	r3, 80044b8 <HAL_SPI_TxRxCpltCallback+0x3c>
			if (sample_dma_counter)   {memcpy(flash_read_block,flash_read_block2+4,1024); sampler_1k_load(sample_flash_address[1]); sample_dma_counter=0;}
 800449a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800449e:	480d      	ldr	r0, [pc, #52]	; (80044d4 <HAL_SPI_TxRxCpltCallback+0x58>)
 80044a0:	f003 ff7e 	bl	80083a0 <memcpy>
 80044a4:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <HAL_SPI_TxRxCpltCallback+0x5c>)
 80044a6:	6858      	ldr	r0, [r3, #4]
 80044a8:	f7fe f8d2 	bl	8002650 <sampler_1k_load>
 80044ac:	2300      	movs	r3, #0
 80044ae:	7023      	strb	r3, [r4, #0]
		       flash_flag=2;
 80044b0:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <HAL_SPI_TxRxCpltCallback+0x60>)
 80044b2:	2202      	movs	r2, #2
 80044b4:	701a      	strb	r2, [r3, #0]
		}
 80044b6:	bd10      	pop	{r4, pc}
		       if (sample_dma_counter==0)		{  memcpy(flash_read_block3,flash_read_block2+4,1024);   }
 80044b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044bc:	4808      	ldr	r0, [pc, #32]	; (80044e0 <HAL_SPI_TxRxCpltCallback+0x64>)
 80044be:	f003 ff6f 	bl	80083a0 <memcpy>
			if (sample_dma_counter)   {memcpy(flash_read_block,flash_read_block2+4,1024); sampler_1k_load(sample_flash_address[1]); sample_dma_counter=0;}
 80044c2:	e7f5      	b.n	80044b0 <HAL_SPI_TxRxCpltCallback+0x34>
 80044c4:	40013000 	.word	0x40013000
 80044c8:	20012eac 	.word	0x20012eac
 80044cc:	40020000 	.word	0x40020000
 80044d0:	2000c608 	.word	0x2000c608
 80044d4:	2000c204 	.word	0x2000c204
 80044d8:	20012eb0 	.word	0x20012eb0
 80044dc:	20008b40 	.word	0x20008b40
 80044e0:	2000ca08 	.word	0x2000ca08

080044e4 <HAL_SPI_ErrorCallback>:
	   if (SPI1==hspi->Instance) {
 80044e4:	4b05      	ldr	r3, [pc, #20]	; (80044fc <HAL_SPI_ErrorCallback+0x18>)
 80044e6:	6802      	ldr	r2, [r0, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d000      	beq.n	80044ee <HAL_SPI_ErrorCallback+0xa>
	}
 80044ec:	4770      	bx	lr
error_count++;
 80044ee:	4a04      	ldr	r2, [pc, #16]	; (8004500 <HAL_SPI_ErrorCallback+0x1c>)
 80044f0:	8813      	ldrh	r3, [r2, #0]
 80044f2:	3301      	adds	r3, #1
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	8013      	strh	r3, [r2, #0]
	}
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40013000 	.word	0x40013000
 8004500:	2000c16c 	.word	0x2000c16c

08004504 <HAL_SPI_TxCpltCallback>:
	}
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop

08004508 <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin == record_pin_Pin) {
 8004508:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800450c:	d006      	beq.n	800451c <HAL_GPIO_EXTI_Callback+0x14>
  if(GPIO_Pin == encoder1_Pin) {
 800450e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004512:	d102      	bne.n	800451a <HAL_GPIO_EXTI_Callback+0x12>
  record_output=1;
 8004514:	4b04      	ldr	r3, [pc, #16]	; (8004528 <HAL_GPIO_EXTI_Callback+0x20>)
 8004516:	2201      	movs	r2, #1
 8004518:	701a      	strb	r2, [r3, #0]
}
 800451a:	4770      	bx	lr
   sampler.record_enable=1;
 800451c:	4b03      	ldr	r3, [pc, #12]	; (800452c <HAL_GPIO_EXTI_Callback+0x24>)
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  if(GPIO_Pin == encoder1_Pin) {
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	20012e08 	.word	0x20012e08
 800452c:	20008db0 	.word	0x20008db0

08004530 <Error_Handler>:
 8004530:	b672      	cpsid	i
  while (1)
 8004532:	e7fe      	b.n	8004532 <Error_Handler+0x2>

08004534 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004534:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004536:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <HAL_MspInit+0x34>)
 8004538:	2100      	movs	r1, #0
 800453a:	9100      	str	r1, [sp, #0]
 800453c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800453e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004542:	645a      	str	r2, [r3, #68]	; 0x44
 8004544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004546:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800454a:	9200      	str	r2, [sp, #0]
 800454c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800454e:	9101      	str	r1, [sp, #4]
 8004550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004552:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004556:	641a      	str	r2, [r3, #64]	; 0x40
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455e:	9301      	str	r3, [sp, #4]
 8004560:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004562:	b002      	add	sp, #8
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40023800 	.word	0x40023800

0800456c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800456c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800456e:	4b2e      	ldr	r3, [pc, #184]	; (8004628 <HAL_ADC_MspInit+0xbc>)
 8004570:	6802      	ldr	r2, [r0, #0]
{
 8004572:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004574:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8004576:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004578:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800457c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8004580:	9407      	str	r4, [sp, #28]
  if(hadc->Instance==ADC1)
 8004582:	d001      	beq.n	8004588 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004584:	b009      	add	sp, #36	; 0x24
 8004586:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004588:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800458c:	9400      	str	r4, [sp, #0]
 800458e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream4;
 8004590:	4e26      	ldr	r6, [pc, #152]	; (800462c <HAL_ADC_MspInit+0xc0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004596:	645a      	str	r2, [r3, #68]	; 0x44
 8004598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800459a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800459e:	9200      	str	r2, [sp, #0]
 80045a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045a2:	9401      	str	r4, [sp, #4]
 80045a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30
 80045ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ae:	f002 0201 	and.w	r2, r2, #1
 80045b2:	9201      	str	r2, [sp, #4]
 80045b4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045b6:	9402      	str	r4, [sp, #8]
 80045b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ba:	f042 0202 	orr.w	r2, r2, #2
 80045be:	631a      	str	r2, [r3, #48]	; 0x30
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045c8:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ca:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 80045cc:	2305      	movs	r3, #5
 80045ce:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045d0:	4817      	ldr	r0, [pc, #92]	; (8004630 <HAL_ADC_MspInit+0xc4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 80045d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045d4:	9704      	str	r7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045d6:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045d8:	f001 faae 	bl	8005b38 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045dc:	4815      	ldr	r0, [pc, #84]	; (8004634 <HAL_ADC_MspInit+0xc8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045de:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045e0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045e2:	e9cd 7703 	strd	r7, r7, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045e6:	f001 faa7 	bl	8005b38 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 80045ea:	4a13      	ldr	r2, [pc, #76]	; (8004638 <HAL_ADC_MspInit+0xcc>)
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045ec:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80045ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80045f2:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80045f6:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80045f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004600:	e9c6 2305 	strd	r2, r3, [r6, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004604:	4630      	mov	r0, r6
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004606:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800460a:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800460e:	e9c6 3407 	strd	r3, r4, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004612:	f001 f881 	bl	8005718 <HAL_DMA_Init>
 8004616:	b918      	cbnz	r0, 8004620 <HAL_ADC_MspInit+0xb4>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004618:	63ae      	str	r6, [r5, #56]	; 0x38
 800461a:	63b5      	str	r5, [r6, #56]	; 0x38
}
 800461c:	b009      	add	sp, #36	; 0x24
 800461e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8004620:	f7ff ff86 	bl	8004530 <Error_Handler>
 8004624:	e7f8      	b.n	8004618 <HAL_ADC_MspInit+0xac>
 8004626:	bf00      	nop
 8004628:	40012000 	.word	0x40012000
 800462c:	2000d37c 	.word	0x2000d37c
 8004630:	40020000 	.word	0x40020000
 8004634:	40020400 	.word	0x40020400
 8004638:	40026470 	.word	0x40026470

0800463c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800463c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C2)
 800463e:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <HAL_I2C_MspInit+0x7c>)
 8004640:	6802      	ldr	r2, [r0, #0]
{
 8004642:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004644:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C2)
 8004646:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004648:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800464c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8004650:	9407      	str	r4, [sp, #28]
  if(hi2c->Instance==I2C2)
 8004652:	d001      	beq.n	8004658 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004654:	b009      	add	sp, #36	; 0x24
 8004656:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004658:	4d18      	ldr	r5, [pc, #96]	; (80046bc <HAL_I2C_MspInit+0x80>)
 800465a:	9401      	str	r4, [sp, #4]
 800465c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800465e:	4818      	ldr	r0, [pc, #96]	; (80046c0 <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004660:	f043 0302 	orr.w	r3, r3, #2
 8004664:	632b      	str	r3, [r5, #48]	; 0x30
 8004666:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800466e:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004672:	2712      	movs	r7, #18
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004674:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004676:	2603      	movs	r6, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004678:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800467a:	2309      	movs	r3, #9
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800467c:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800467e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004680:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004682:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004684:	f001 fa58 	bl	8005b38 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004688:	2304      	movs	r3, #4
 800468a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800468c:	480c      	ldr	r0, [pc, #48]	; (80046c0 <HAL_I2C_MspInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800468e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004690:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004694:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004696:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004698:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800469c:	f001 fa4c 	bl	8005b38 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80046a0:	9402      	str	r4, [sp, #8]
 80046a2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80046a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046a8:	642b      	str	r3, [r5, #64]	; 0x40
 80046aa:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80046ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b0:	9302      	str	r3, [sp, #8]
 80046b2:	9b02      	ldr	r3, [sp, #8]
}
 80046b4:	b009      	add	sp, #36	; 0x24
 80046b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046b8:	40005800 	.word	0x40005800
 80046bc:	40023800 	.word	0x40023800
 80046c0:	40020400 	.word	0x40020400

080046c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80046c4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 80046c6:	6803      	ldr	r3, [r0, #0]
 80046c8:	4a52      	ldr	r2, [pc, #328]	; (8004814 <HAL_SPI_MspInit+0x150>)
{
 80046ca:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046cc:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 80046ce:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d0:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80046d4:	e9cd 4407 	strd	r4, r4, [sp, #28]
{
 80046d8:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046da:	9409      	str	r4, [sp, #36]	; 0x24
  if(hspi->Instance==SPI1)
 80046dc:	d004      	beq.n	80046e8 <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 80046de:	4a4e      	ldr	r2, [pc, #312]	; (8004818 <HAL_SPI_MspInit+0x154>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d053      	beq.n	800478c <HAL_SPI_MspInit+0xc8>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80046e4:	b00a      	add	sp, #40	; 0x28
 80046e6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80046e8:	4b4c      	ldr	r3, [pc, #304]	; (800481c <HAL_SPI_MspInit+0x158>)
 80046ea:	9401      	str	r4, [sp, #4]
 80046ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80046ee:	4e4c      	ldr	r6, [pc, #304]	; (8004820 <HAL_SPI_MspInit+0x15c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80046f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046f4:	645a      	str	r2, [r3, #68]	; 0x44
 80046f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046f8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80046fc:	9201      	str	r2, [sp, #4]
 80046fe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004700:	9402      	str	r4, [sp, #8]
 8004702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004704:	f042 0201 	orr.w	r2, r2, #1
 8004708:	631a      	str	r2, [r3, #48]	; 0x30
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8004712:	22e0      	movs	r2, #224	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004714:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004716:	9802      	ldr	r0, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8004718:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800471a:	4842      	ldr	r0, [pc, #264]	; (8004824 <HAL_SPI_MspInit+0x160>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800471e:	2205      	movs	r2, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004720:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004722:	e9cd 3208 	strd	r3, r2, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004726:	f001 fa07 	bl	8005b38 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800472a:	4a3f      	ldr	r2, [pc, #252]	; (8004828 <HAL_SPI_MspInit+0x164>)
 800472c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8004730:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004734:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004736:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800473a:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800473e:	e9c6 3404 	strd	r3, r4, [r6, #16]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004742:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004746:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800474a:	f000 ffe5 	bl	8005718 <HAL_DMA_Init>
 800474e:	2800      	cmp	r0, #0
 8004750:	d159      	bne.n	8004806 <HAL_SPI_MspInit+0x142>
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8004752:	4c36      	ldr	r4, [pc, #216]	; (800482c <HAL_SPI_MspInit+0x168>)
 8004754:	4936      	ldr	r1, [pc, #216]	; (8004830 <HAL_SPI_MspInit+0x16c>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8004756:	64ee      	str	r6, [r5, #76]	; 0x4c
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8004758:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800475c:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 800475e:	e9c4 1200 	strd	r1, r2, [r4]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004762:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004764:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004766:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800476a:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800476e:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004772:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8004776:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004778:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800477a:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800477c:	f000 ffcc 	bl	8005718 <HAL_DMA_Init>
 8004780:	2800      	cmp	r0, #0
 8004782:	d13d      	bne.n	8004800 <HAL_SPI_MspInit+0x13c>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004784:	64ac      	str	r4, [r5, #72]	; 0x48
 8004786:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8004788:	b00a      	add	sp, #40	; 0x28
 800478a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800478c:	4b23      	ldr	r3, [pc, #140]	; (800481c <HAL_SPI_MspInit+0x158>)
 800478e:	9403      	str	r4, [sp, #12]
 8004790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004792:	4e28      	ldr	r6, [pc, #160]	; (8004834 <HAL_SPI_MspInit+0x170>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004794:	4828      	ldr	r0, [pc, #160]	; (8004838 <HAL_SPI_MspInit+0x174>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800479a:	641a      	str	r2, [r3, #64]	; 0x40
 800479c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800479e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80047a2:	9203      	str	r2, [sp, #12]
 80047a4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047a6:	9404      	str	r4, [sp, #16]
 80047a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047aa:	f042 0202 	orr.w	r2, r2, #2
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 80047b8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80047bc:	9305      	str	r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047be:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c0:	2302      	movs	r3, #2
 80047c2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80047c4:	f04f 0c03 	mov.w	ip, #3
 80047c8:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ca:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80047cc:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047d0:	f001 f9b2 	bl	8005b38 <HAL_GPIO_Init>
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047d4:	2340      	movs	r3, #64	; 0x40
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80047d6:	4a19      	ldr	r2, [pc, #100]	; (800483c <HAL_SPI_MspInit+0x178>)
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047d8:	60b3      	str	r3, [r6, #8]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80047da:	4630      	mov	r0, r6
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80047e0:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047e4:	e9c6 4303 	strd	r4, r3, [r6, #12]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047e8:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80047ec:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047f0:	6274      	str	r4, [r6, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80047f2:	f000 ff91 	bl	8005718 <HAL_DMA_Init>
 80047f6:	b948      	cbnz	r0, 800480c <HAL_SPI_MspInit+0x148>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80047f8:	64ae      	str	r6, [r5, #72]	; 0x48
 80047fa:	63b5      	str	r5, [r6, #56]	; 0x38
}
 80047fc:	b00a      	add	sp, #40	; 0x28
 80047fe:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8004800:	f7ff fe96 	bl	8004530 <Error_Handler>
 8004804:	e7be      	b.n	8004784 <HAL_SPI_MspInit+0xc0>
      Error_Handler();
 8004806:	f7ff fe93 	bl	8004530 <Error_Handler>
 800480a:	e7a2      	b.n	8004752 <HAL_SPI_MspInit+0x8e>
      Error_Handler();
 800480c:	f7ff fe90 	bl	8004530 <Error_Handler>
 8004810:	e7f2      	b.n	80047f8 <HAL_SPI_MspInit+0x134>
 8004812:	bf00      	nop
 8004814:	40013000 	.word	0x40013000
 8004818:	40003800 	.word	0x40003800
 800481c:	40023800 	.word	0x40023800
 8004820:	2000d3dc 	.word	0x2000d3dc
 8004824:	40020000 	.word	0x40020000
 8004828:	40026410 	.word	0x40026410
 800482c:	2000d43c 	.word	0x2000d43c
 8004830:	40026440 	.word	0x40026440
 8004834:	2000d49c 	.word	0x2000d49c
 8004838:	40020400 	.word	0x40020400
 800483c:	40026070 	.word	0x40026070

08004840 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004840:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM2)
 8004842:	6802      	ldr	r2, [r0, #0]
{
 8004844:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004846:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM2)
 8004848:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800484c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004850:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004854:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim_encoder->Instance==TIM2)
 8004856:	d004      	beq.n	8004862 <HAL_TIM_Encoder_MspInit+0x22>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_encoder->Instance==TIM4)
 8004858:	4922      	ldr	r1, [pc, #136]	; (80048e4 <HAL_TIM_Encoder_MspInit+0xa4>)
 800485a:	428a      	cmp	r2, r1
 800485c:	d021      	beq.n	80048a2 <HAL_TIM_Encoder_MspInit+0x62>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800485e:	b00a      	add	sp, #40	; 0x28
 8004860:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004862:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8004866:	9301      	str	r3, [sp, #4]
 8004868:	6c11      	ldr	r1, [r2, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800486a:	2401      	movs	r4, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 800486c:	4321      	orrs	r1, r4
 800486e:	6411      	str	r1, [r2, #64]	; 0x40
 8004870:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8004872:	4020      	ands	r0, r4
 8004874:	9001      	str	r0, [sp, #4]
 8004876:	9801      	ldr	r0, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004878:	9302      	str	r3, [sp, #8]
 800487a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800487c:	4323      	orrs	r3, r4
 800487e:	6313      	str	r3, [r2, #48]	; 0x30
 8004880:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004882:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004884:	4023      	ands	r3, r4
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8004886:	f248 0002 	movw	r0, #32770	; 0x8002
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800488a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 800488c:	9005      	str	r0, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800488e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004890:	4815      	ldr	r0, [pc, #84]	; (80048e8 <HAL_TIM_Encoder_MspInit+0xa8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004892:	9a02      	ldr	r2, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004894:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004896:	e9cd 3406 	strd	r3, r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800489a:	f001 f94d 	bl	8005b38 <HAL_GPIO_Init>
}
 800489e:	b00a      	add	sp, #40	; 0x28
 80048a0:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 80048a2:	4a12      	ldr	r2, [pc, #72]	; (80048ec <HAL_TIM_Encoder_MspInit+0xac>)
 80048a4:	9303      	str	r3, [sp, #12]
 80048a6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80048a8:	f041 0104 	orr.w	r1, r1, #4
 80048ac:	6411      	str	r1, [r2, #64]	; 0x40
 80048ae:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80048b0:	f000 0004 	and.w	r0, r0, #4
 80048b4:	9003      	str	r0, [sp, #12]
 80048b6:	9803      	ldr	r0, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048b8:	9304      	str	r3, [sp, #16]
 80048ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048bc:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048be:	4323      	orrs	r3, r4
 80048c0:	6313      	str	r3, [r2, #48]	; 0x30
 80048c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80048c4:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048c6:	4023      	ands	r3, r4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80048c8:	20c0      	movs	r0, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80048cc:	9005      	str	r0, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048ce:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048d0:	4807      	ldr	r0, [pc, #28]	; (80048f0 <HAL_TIM_Encoder_MspInit+0xb0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048d2:	9a04      	ldr	r2, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048d4:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048d6:	e9cd 4306 	strd	r4, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048da:	f001 f92d 	bl	8005b38 <HAL_GPIO_Init>
}
 80048de:	b00a      	add	sp, #40	; 0x28
 80048e0:	bd10      	pop	{r4, pc}
 80048e2:	bf00      	nop
 80048e4:	40000800 	.word	0x40000800
 80048e8:	40020000 	.word	0x40020000
 80048ec:	40023800 	.word	0x40023800
 80048f0:	40020400 	.word	0x40020400

080048f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80048f4:	b500      	push	{lr}
  if(htim_base->Instance==TIM3)
 80048f6:	4a1b      	ldr	r2, [pc, #108]	; (8004964 <HAL_TIM_Base_MspInit+0x70>)
 80048f8:	6803      	ldr	r3, [r0, #0]
 80048fa:	4293      	cmp	r3, r2
{
 80048fc:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 80048fe:	d005      	beq.n	800490c <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM10)
 8004900:	4a19      	ldr	r2, [pc, #100]	; (8004968 <HAL_TIM_Base_MspInit+0x74>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d018      	beq.n	8004938 <HAL_TIM_Base_MspInit+0x44>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8004906:	b003      	add	sp, #12
 8004908:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 800490c:	4b17      	ldr	r3, [pc, #92]	; (800496c <HAL_TIM_Base_MspInit+0x78>)
 800490e:	2200      	movs	r2, #0
 8004910:	9200      	str	r2, [sp, #0]
 8004912:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004914:	f041 0102 	orr.w	r1, r1, #2
 8004918:	6419      	str	r1, [r3, #64]	; 0x40
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8004922:	201d      	movs	r0, #29
 8004924:	2101      	movs	r1, #1
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004926:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8004928:	f000 fe90 	bl	800564c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800492c:	201d      	movs	r0, #29
}
 800492e:	b003      	add	sp, #12
 8004930:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004934:	f000 bec8 	b.w	80056c8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004938:	4b0c      	ldr	r3, [pc, #48]	; (800496c <HAL_TIM_Base_MspInit+0x78>)
 800493a:	2200      	movs	r2, #0
 800493c:	9201      	str	r2, [sp, #4]
 800493e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004940:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004944:	6459      	str	r1, [r3, #68]	; 0x44
 8004946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 800494e:	2019      	movs	r0, #25
 8004950:	2103      	movs	r1, #3
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004952:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 8004954:	f000 fe7a 	bl	800564c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004958:	2019      	movs	r0, #25
}
 800495a:	b003      	add	sp, #12
 800495c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004960:	f000 beb2 	b.w	80056c8 <HAL_NVIC_EnableIRQ>
 8004964:	40000400 	.word	0x40000400
 8004968:	40014400 	.word	0x40014400
 800496c:	40023800 	.word	0x40023800

08004970 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004970:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8004972:	4a11      	ldr	r2, [pc, #68]	; (80049b8 <HAL_TIM_MspPostInit+0x48>)
 8004974:	6801      	ldr	r1, [r0, #0]
{
 8004976:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004978:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 800497a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800497c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8004980:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8004984:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM3)
 8004986:	d001      	beq.n	800498c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004988:	b006      	add	sp, #24
 800498a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800498c:	f502 320d 	add.w	r2, r2, #144384	; 0x23400
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004994:	4809      	ldr	r0, [pc, #36]	; (80049bc <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004996:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004998:	4323      	orrs	r3, r4
 800499a:	6313      	str	r3, [r2, #48]	; 0x30
 800499c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800499e:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049a0:	4023      	ands	r3, r4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80049a2:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049a4:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049a6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049a8:	e9cd 2401 	strd	r2, r4, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049ac:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ae:	f001 f8c3 	bl	8005b38 <HAL_GPIO_Init>
}
 80049b2:	b006      	add	sp, #24
 80049b4:	bd10      	pop	{r4, pc}
 80049b6:	bf00      	nop
 80049b8:	40000400 	.word	0x40000400
 80049bc:	40020400 	.word	0x40020400

080049c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049c0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 80049c2:	4a18      	ldr	r2, [pc, #96]	; (8004a24 <HAL_UART_MspInit+0x64>)
 80049c4:	6801      	ldr	r1, [r0, #0]
{
 80049c6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c8:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 80049ca:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049cc:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80049d0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80049d4:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80049d6:	d001      	beq.n	80049dc <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80049d8:	b009      	add	sp, #36	; 0x24
 80049da:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80049dc:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80049e0:	9301      	str	r3, [sp, #4]
 80049e2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80049e4:	f041 0110 	orr.w	r1, r1, #16
 80049e8:	6451      	str	r1, [r2, #68]	; 0x44
 80049ea:	6c50      	ldr	r0, [r2, #68]	; 0x44
 80049ec:	f000 0010 	and.w	r0, r0, #16
 80049f0:	9001      	str	r0, [sp, #4]
 80049f2:	9801      	ldr	r0, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049f4:	9302      	str	r3, [sp, #8]
 80049f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049f8:	480b      	ldr	r0, [pc, #44]	; (8004a28 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004a00:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a08:	f44f 7500 	mov.w	r5, #512	; 0x200
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a0c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a0e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a10:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a12:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a14:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a16:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a18:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a1a:	f001 f88d 	bl	8005b38 <HAL_GPIO_Init>
}
 8004a1e:	b009      	add	sp, #36	; 0x24
 8004a20:	bd30      	pop	{r4, r5, pc}
 8004a22:	bf00      	nop
 8004a24:	40011000 	.word	0x40011000
 8004a28:	40020000 	.word	0x40020000

08004a2c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a2c:	e7fe      	b.n	8004a2c <NMI_Handler>
 8004a2e:	bf00      	nop

08004a30 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a30:	e7fe      	b.n	8004a30 <HardFault_Handler>
 8004a32:	bf00      	nop

08004a34 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a34:	e7fe      	b.n	8004a34 <MemManage_Handler>
 8004a36:	bf00      	nop

08004a38 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a38:	e7fe      	b.n	8004a38 <BusFault_Handler>
 8004a3a:	bf00      	nop

08004a3c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a3c:	e7fe      	b.n	8004a3c <UsageFault_Handler>
 8004a3e:	bf00      	nop

08004a40 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop

08004a44 <DebugMon_Handler>:
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop

08004a48 <PendSV_Handler>:
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop

08004a4c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a4c:	f000 b8aa 	b.w	8004ba4 <HAL_IncTick>

08004a50 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004a50:	4801      	ldr	r0, [pc, #4]	; (8004a58 <DMA1_Stream4_IRQHandler+0x8>)
 8004a52:	f000 bf81 	b.w	8005958 <HAL_DMA_IRQHandler>
 8004a56:	bf00      	nop
 8004a58:	2000d49c 	.word	0x2000d49c

08004a5c <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004a5c:	4801      	ldr	r0, [pc, #4]	; (8004a64 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8004a5e:	f002 bff7 	b.w	8007a50 <HAL_TIM_IRQHandler>
 8004a62:	bf00      	nop
 8004a64:	2000d600 	.word	0x2000d600

08004a68 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004a68:	4801      	ldr	r0, [pc, #4]	; (8004a70 <TIM3_IRQHandler+0x8>)
 8004a6a:	f002 bff1 	b.w	8007a50 <HAL_TIM_IRQHandler>
 8004a6e:	bf00      	nop
 8004a70:	2000d690 	.word	0x2000d690

08004a74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(encoder1_Pin);
 8004a76:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004a7a:	f001 f953 	bl	8005d24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(encoder2_Pin);
 8004a7e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004a82:	f001 f94f 	bl	8005d24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(record_pin_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(record_pin_Pin);
 8004a8a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004a8e:	f001 b949 	b.w	8005d24 <HAL_GPIO_EXTI_IRQHandler>
 8004a92:	bf00      	nop

08004a94 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004a94:	4801      	ldr	r0, [pc, #4]	; (8004a9c <DMA2_Stream0_IRQHandler+0x8>)
 8004a96:	f000 bf5f 	b.w	8005958 <HAL_DMA_IRQHandler>
 8004a9a:	bf00      	nop
 8004a9c:	2000d3dc 	.word	0x2000d3dc

08004aa0 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004aa0:	4801      	ldr	r0, [pc, #4]	; (8004aa8 <DMA2_Stream2_IRQHandler+0x8>)
 8004aa2:	f000 bf59 	b.w	8005958 <HAL_DMA_IRQHandler>
 8004aa6:	bf00      	nop
 8004aa8:	2000d43c 	.word	0x2000d43c

08004aac <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004aac:	4801      	ldr	r0, [pc, #4]	; (8004ab4 <DMA2_Stream4_IRQHandler+0x8>)
 8004aae:	f000 bf53 	b.w	8005958 <HAL_DMA_IRQHandler>
 8004ab2:	bf00      	nop
 8004ab4:	2000d37c 	.word	0x2000d37c

08004ab8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <SystemInit+0x18>)
 8004aba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004abe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ac2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004ac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004aca:	6099      	str	r1, [r3, #8]
#endif
}
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	e000ed00 	.word	0xe000ed00

08004ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ad8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004ada:	e003      	b.n	8004ae4 <LoopCopyDataInit>

08004adc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004adc:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004ade:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004ae0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004ae2:	3104      	adds	r1, #4

08004ae4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004ae4:	480b      	ldr	r0, [pc, #44]	; (8004b14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004ae6:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004ae8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004aea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004aec:	d3f6      	bcc.n	8004adc <CopyDataInit>
  ldr  r2, =_sbss
 8004aee:	4a0b      	ldr	r2, [pc, #44]	; (8004b1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004af0:	e002      	b.n	8004af8 <LoopFillZerobss>

08004af2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004af2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004af4:	f842 3b04 	str.w	r3, [r2], #4

08004af8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004af8:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004afa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004afc:	d3f9      	bcc.n	8004af2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004afe:	f7ff ffdb 	bl	8004ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b02:	f003 fc29 	bl	8008358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b06:	f7fe ff19 	bl	800393c <main>
  bx  lr    
 8004b0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004b0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004b10:	0800ab9c 	.word	0x0800ab9c
  ldr  r0, =_sdata
 8004b14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004b18:	20008ff8 	.word	0x20008ff8
  ldr  r2, =_sbss
 8004b1c:	20008ff8 	.word	0x20008ff8
  ldr  r3, = _ebss
 8004b20:	20014740 	.word	0x20014740

08004b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b24:	e7fe      	b.n	8004b24 <ADC_IRQHandler>
	...

08004b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b28:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b2a:	4a0e      	ldr	r2, [pc, #56]	; (8004b64 <HAL_InitTick+0x3c>)
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <HAL_InitTick+0x40>)
 8004b2e:	7812      	ldrb	r2, [r2, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
{
 8004b32:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b38:	fbb0 f0f2 	udiv	r0, r0, r2
 8004b3c:	fbb3 f0f0 	udiv	r0, r3, r0
 8004b40:	f000 fdd0 	bl	80056e4 <HAL_SYSTICK_Config>
 8004b44:	b908      	cbnz	r0, 8004b4a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b46:	2d0f      	cmp	r5, #15
 8004b48:	d901      	bls.n	8004b4e <HAL_InitTick+0x26>
    return HAL_ERROR;
 8004b4a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004b4c:	bd38      	pop	{r3, r4, r5, pc}
 8004b4e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b50:	4602      	mov	r2, r0
 8004b52:	4629      	mov	r1, r5
 8004b54:	f04f 30ff 	mov.w	r0, #4294967295
 8004b58:	f000 fd78 	bl	800564c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b5c:	4b03      	ldr	r3, [pc, #12]	; (8004b6c <HAL_InitTick+0x44>)
 8004b5e:	4620      	mov	r0, r4
 8004b60:	601d      	str	r5, [r3, #0]
}
 8004b62:	bd38      	pop	{r3, r4, r5, pc}
 8004b64:	20008f8c 	.word	0x20008f8c
 8004b68:	20008f88 	.word	0x20008f88
 8004b6c:	20008f90 	.word	0x20008f90

08004b70 <HAL_Init>:
{
 8004b70:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b72:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <HAL_Init+0x30>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b7a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b82:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b8a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b8c:	2003      	movs	r0, #3
 8004b8e:	f000 fd4b 	bl	8005628 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b92:	2000      	movs	r0, #0
 8004b94:	f7ff ffc8 	bl	8004b28 <HAL_InitTick>
  HAL_MspInit();
 8004b98:	f7ff fccc 	bl	8004534 <HAL_MspInit>
}
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	bd08      	pop	{r3, pc}
 8004ba0:	40023c00 	.word	0x40023c00

08004ba4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004ba4:	4a03      	ldr	r2, [pc, #12]	; (8004bb4 <HAL_IncTick+0x10>)
 8004ba6:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <HAL_IncTick+0x14>)
 8004ba8:	6811      	ldr	r1, [r2, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	440b      	add	r3, r1
 8004bae:	6013      	str	r3, [r2, #0]
}
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	2001473c 	.word	0x2001473c
 8004bb8:	20008f8c 	.word	0x20008f8c

08004bbc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004bbc:	4b01      	ldr	r3, [pc, #4]	; (8004bc4 <HAL_GetTick+0x8>)
 8004bbe:	6818      	ldr	r0, [r3, #0]
}
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	2001473c 	.word	0x2001473c

08004bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004bcc:	f7ff fff6 	bl	8004bbc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bd0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004bd2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004bd4:	d002      	beq.n	8004bdc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bd6:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <HAL_Delay+0x20>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004bdc:	f7ff ffee 	bl	8004bbc <HAL_GetTick>
 8004be0:	1b43      	subs	r3, r0, r5
 8004be2:	42a3      	cmp	r3, r4
 8004be4:	d3fa      	bcc.n	8004bdc <HAL_Delay+0x14>
  {
  }
}
 8004be6:	bd38      	pop	{r3, r4, r5, pc}
 8004be8:	20008f8c 	.word	0x20008f8c

08004bec <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004bec:	2800      	cmp	r0, #0
 8004bee:	f000 809f 	beq.w	8004d30 <HAL_ADC_Init+0x144>
{
 8004bf2:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004bf4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	b13d      	cbz	r5, 8004c0a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004bfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bfc:	06db      	lsls	r3, r3, #27
 8004bfe:	d50c      	bpl.n	8004c1a <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004c00:	2300      	movs	r3, #0
 8004c02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8004c06:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8004c08:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8004c0a:	f7ff fcaf 	bl	800456c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004c0e:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c10:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8004c12:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c16:	06db      	lsls	r3, r3, #27
 8004c18:	d4f2      	bmi.n	8004c00 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8004c1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004c1c:	4a48      	ldr	r2, [pc, #288]	; (8004d40 <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 8004c1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c22:	f023 0302 	bic.w	r3, r3, #2
 8004c26:	f043 0302 	orr.w	r3, r3, #2
 8004c2a:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004c2c:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004c2e:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004c30:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8004c34:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004c36:	6851      	ldr	r1, [r2, #4]
 8004c38:	6860      	ldr	r0, [r4, #4]
 8004c3a:	4301      	orrs	r1, r0
 8004c3c:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004c3e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004c40:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004c42:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004c44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004c4a:	6859      	ldr	r1, [r3, #4]
 8004c4c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8004c50:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004c52:	6859      	ldr	r1, [r3, #4]
 8004c54:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8004c58:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	4302      	orrs	r2, r0
 8004c5e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c60:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c62:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c64:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8004c68:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c6a:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c6c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c6e:	4302      	orrs	r2, r0
 8004c70:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c72:	4a34      	ldr	r2, [pc, #208]	; (8004d44 <HAL_ADC_Init+0x158>)
 8004c74:	4291      	cmp	r1, r2
 8004c76:	d052      	beq.n	8004d1e <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c78:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c7a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c7c:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8004c80:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	4311      	orrs	r1, r2
 8004c86:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c88:	6899      	ldr	r1, [r3, #8]
 8004c8a:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8004c8e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	432a      	orrs	r2, r5
 8004c94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	f022 0202 	bic.w	r2, r2, #2
 8004c9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	7e21      	ldrb	r1, [r4, #24]
 8004ca2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004ca6:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004ca8:	f894 2020 	ldrb.w	r2, [r4, #32]
 8004cac:	2a00      	cmp	r2, #0
 8004cae:	d041      	beq.n	8004d34 <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004cb0:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004cb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004cb4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004cb8:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004cba:	6858      	ldr	r0, [r3, #4]
 8004cbc:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8004cc0:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004cc2:	1e51      	subs	r1, r2, #1
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004cca:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004cce:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004cd0:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004cd2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cda:	3901      	subs	r1, #1
 8004cdc:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8004ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004ce2:	6899      	ldr	r1, [r3, #8]
 8004ce4:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8004ce8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004cea:	6899      	ldr	r1, [r3, #8]
 8004cec:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8004cf0:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8004cf4:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004cf6:	6899      	ldr	r1, [r3, #8]
 8004cf8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004cfc:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004cfe:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004d00:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d02:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8004d06:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004d08:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004d0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d0c:	f023 0303 	bic.w	r3, r3, #3
 8004d10:	f043 0301 	orr.w	r3, r3, #1
 8004d14:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8004d16:	2300      	movs	r3, #0
 8004d18:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004d1c:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d2c:	609a      	str	r2, [r3, #8]
 8004d2e:	e7b2      	b.n	8004c96 <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8004d30:	2001      	movs	r0, #1
}
 8004d32:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d3a:	605a      	str	r2, [r3, #4]
 8004d3c:	e7c6      	b.n	8004ccc <HAL_ADC_Init+0xe0>
 8004d3e:	bf00      	nop
 8004d40:	40012300 	.word	0x40012300
 8004d44:	0f000001 	.word	0x0f000001

08004d48 <HAL_ADC_Start>:
{
 8004d48:	b410      	push	{r4}
  __HAL_LOCK(hadc);
 8004d4a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004d4e:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8004d50:	2100      	movs	r1, #0
  __HAL_LOCK(hadc);
 8004d52:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8004d54:	9101      	str	r1, [sp, #4]
  __HAL_LOCK(hadc);
 8004d56:	d06d      	beq.n	8004e34 <HAL_ADC_Start+0xec>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004d58:	6801      	ldr	r1, [r0, #0]
  __HAL_LOCK(hadc);
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004d60:	688b      	ldr	r3, [r1, #8]
 8004d62:	4602      	mov	r2, r0
 8004d64:	07d8      	lsls	r0, r3, #31
 8004d66:	d414      	bmi.n	8004d92 <HAL_ADC_Start+0x4a>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d68:	4b35      	ldr	r3, [pc, #212]	; (8004e40 <HAL_ADC_Start+0xf8>)
 8004d6a:	4c36      	ldr	r4, [pc, #216]	; (8004e44 <HAL_ADC_Start+0xfc>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8004d6e:	6888      	ldr	r0, [r1, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d70:	fba4 4303 	umull	r4, r3, r4, r3
 8004d74:	0c9b      	lsrs	r3, r3, #18
 8004d76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8004d7a:	f040 0001 	orr.w	r0, r0, #1
 8004d7e:	6088      	str	r0, [r1, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d80:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8004d82:	9b01      	ldr	r3, [sp, #4]
 8004d84:	b12b      	cbz	r3, 8004d92 <HAL_ADC_Start+0x4a>
      counter--;
 8004d86:	9b01      	ldr	r3, [sp, #4]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8004d8c:	9b01      	ldr	r3, [sp, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f9      	bne.n	8004d86 <HAL_ADC_Start+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d92:	6888      	ldr	r0, [r1, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8004d94:	6c13      	ldr	r3, [r2, #64]	; 0x40
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d96:	f010 0001 	ands.w	r0, r0, #1
 8004d9a:	d02e      	beq.n	8004dfa <HAL_ADC_Start+0xb2>
    ADC_STATE_CLR_SET(hadc->State,
 8004d9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004da0:	f023 0301 	bic.w	r3, r3, #1
 8004da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da8:	6413      	str	r3, [r2, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004daa:	684b      	ldr	r3, [r1, #4]
 8004dac:	055b      	lsls	r3, r3, #21
 8004dae:	d505      	bpl.n	8004dbc <HAL_ADC_Start+0x74>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004db0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004db2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004db6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004dba:	6413      	str	r3, [r2, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004dbc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004dbe:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004dc2:	bf1c      	itt	ne
 8004dc4:	6c53      	ldrne	r3, [r2, #68]	; 0x44
 8004dc6:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8004dca:	6453      	str	r3, [r2, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8004dcc:	2000      	movs	r0, #0
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004dce:	4b1e      	ldr	r3, [pc, #120]	; (8004e48 <HAL_ADC_Start+0x100>)
    __HAL_UNLOCK(hadc);
 8004dd0:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004dd4:	f06f 0422 	mvn.w	r4, #34	; 0x22
 8004dd8:	600c      	str	r4, [r1, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	f012 021f 	ands.w	r2, r2, #31
 8004de0:	d116      	bne.n	8004e10 <HAL_ADC_Start+0xc8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004de2:	6888      	ldr	r0, [r1, #8]
 8004de4:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8004de8:	d11f      	bne.n	8004e2a <HAL_ADC_Start+0xe2>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004dea:	688b      	ldr	r3, [r1, #8]
 8004dec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004df0:	608b      	str	r3, [r1, #8]
}
 8004df2:	b003      	add	sp, #12
 8004df4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004df8:	4770      	bx	lr
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dfa:	f043 0310 	orr.w	r3, r3, #16
 8004dfe:	6413      	str	r3, [r2, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e00:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	6453      	str	r3, [r2, #68]	; 0x44
}
 8004e08:	b003      	add	sp, #12
 8004e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e0e:	4770      	bx	lr
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004e10:	4b0e      	ldr	r3, [pc, #56]	; (8004e4c <HAL_ADC_Start+0x104>)
 8004e12:	4299      	cmp	r1, r3
 8004e14:	d1f8      	bne.n	8004e08 <HAL_ADC_Start+0xc0>
 8004e16:	688b      	ldr	r3, [r1, #8]
 8004e18:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004e1c:	d1f4      	bne.n	8004e08 <HAL_ADC_Start+0xc0>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e1e:	688a      	ldr	r2, [r1, #8]
 8004e20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  return HAL_OK;
 8004e24:	4618      	mov	r0, r3
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e26:	608a      	str	r2, [r1, #8]
 8004e28:	e7ee      	b.n	8004e08 <HAL_ADC_Start+0xc0>
  return HAL_OK;
 8004e2a:	4610      	mov	r0, r2
}
 8004e2c:	b003      	add	sp, #12
 8004e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e32:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8004e34:	2002      	movs	r0, #2
}
 8004e36:	b003      	add	sp, #12
 8004e38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20008f88 	.word	0x20008f88
 8004e44:	431bde83 	.word	0x431bde83
 8004e48:	40012300 	.word	0x40012300
 8004e4c:	40012000 	.word	0x40012000

08004e50 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004e50:	6803      	ldr	r3, [r0, #0]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	0552      	lsls	r2, r2, #21
{
 8004e56:	b570      	push	{r4, r5, r6, lr}
 8004e58:	4605      	mov	r5, r0
 8004e5a:	460c      	mov	r4, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004e5c:	d502      	bpl.n	8004e64 <HAL_ADC_PollForConversion+0x14>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004e5e:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004e60:	05de      	lsls	r6, r3, #23
 8004e62:	d443      	bmi.n	8004eec <HAL_ADC_PollForConversion+0x9c>
  tickstart = HAL_GetTick();
 8004e64:	f7ff feaa 	bl	8004bbc <HAL_GetTick>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004e68:	682a      	ldr	r2, [r5, #0]
  tickstart = HAL_GetTick();
 8004e6a:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004e6c:	e001      	b.n	8004e72 <HAL_ADC_PollForConversion+0x22>
    if(Timeout != HAL_MAX_DELAY)
 8004e6e:	1c60      	adds	r0, r4, #1
 8004e70:	d124      	bne.n	8004ebc <HAL_ADC_PollForConversion+0x6c>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004e72:	6813      	ldr	r3, [r2, #0]
 8004e74:	0799      	lsls	r1, r3, #30
 8004e76:	d5fa      	bpl.n	8004e6e <HAL_ADC_PollForConversion+0x1e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004e78:	f06f 0312 	mvn.w	r3, #18
 8004e7c:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e7e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004e80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e84:	642b      	str	r3, [r5, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e86:	6893      	ldr	r3, [r2, #8]
 8004e88:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8004e8c:	d114      	bne.n	8004eb8 <HAL_ADC_PollForConversion+0x68>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e8e:	7e28      	ldrb	r0, [r5, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e90:	b990      	cbnz	r0, 8004eb8 <HAL_ADC_PollForConversion+0x68>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004e92:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e94:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8004e98:	d002      	beq.n	8004ea0 <HAL_ADC_PollForConversion+0x50>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004e9a:	6893      	ldr	r3, [r2, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004e9c:	055a      	lsls	r2, r3, #21
 8004e9e:	d40b      	bmi.n	8004eb8 <HAL_ADC_PollForConversion+0x68>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004ea0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004ea2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea6:	642b      	str	r3, [r5, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ea8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004eaa:	04db      	lsls	r3, r3, #19
 8004eac:	d404      	bmi.n	8004eb8 <HAL_ADC_PollForConversion+0x68>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004eae:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	642b      	str	r3, [r5, #64]	; 0x40
}
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8004eb8:	2000      	movs	r0, #0
}
 8004eba:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004ebc:	b95c      	cbnz	r4, 8004ed6 <HAL_ADC_PollForConversion+0x86>
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ebe:	6813      	ldr	r3, [r2, #0]
 8004ec0:	f013 0302 	ands.w	r3, r3, #2
 8004ec4:	d1d5      	bne.n	8004e72 <HAL_ADC_PollForConversion+0x22>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ec6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 8004ec8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ecc:	f042 0204 	orr.w	r2, r2, #4
 8004ed0:	642a      	str	r2, [r5, #64]	; 0x40
          return HAL_TIMEOUT;
 8004ed2:	2003      	movs	r0, #3
}
 8004ed4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004ed6:	f7ff fe71 	bl	8004bbc <HAL_GetTick>
 8004eda:	1b80      	subs	r0, r0, r6
 8004edc:	42a0      	cmp	r0, r4
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ede:	682a      	ldr	r2, [r5, #0]
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004ee0:	d9c7      	bls.n	8004e72 <HAL_ADC_PollForConversion+0x22>
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ee2:	6813      	ldr	r3, [r2, #0]
 8004ee4:	f013 0302 	ands.w	r3, r3, #2
 8004ee8:	d1c3      	bne.n	8004e72 <HAL_ADC_PollForConversion+0x22>
 8004eea:	e7ec      	b.n	8004ec6 <HAL_ADC_PollForConversion+0x76>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004eec:	6c03      	ldr	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8004eee:	2200      	movs	r2, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ef0:	f043 0320 	orr.w	r3, r3, #32
    __HAL_UNLOCK(hadc);
 8004ef4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ef8:	6403      	str	r3, [r0, #64]	; 0x40
    return HAL_ERROR;
 8004efa:	2001      	movs	r0, #1
}
 8004efc:	bd70      	pop	{r4, r5, r6, pc}
 8004efe:	bf00      	nop

08004f00 <HAL_ADC_Start_DMA>:
{
 8004f00:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8004f02:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004f06:	b082      	sub	sp, #8
 8004f08:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8004f0a:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8004f0c:	f04f 0000 	mov.w	r0, #0
 8004f10:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004f12:	f000 8087 	beq.w	8005024 <HAL_ADC_Start_DMA+0x124>
 8004f16:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004f18:	682e      	ldr	r6, [r5, #0]
  __HAL_LOCK(hadc);
 8004f1a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004f1e:	68b3      	ldr	r3, [r6, #8]
 8004f20:	07dc      	lsls	r4, r3, #31
 8004f22:	d414      	bmi.n	8004f4e <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 8004f24:	68b3      	ldr	r3, [r6, #8]
 8004f26:	f043 0301 	orr.w	r3, r3, #1
 8004f2a:	60b3      	str	r3, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004f2c:	4b3f      	ldr	r3, [pc, #252]	; (800502c <HAL_ADC_Start_DMA+0x12c>)
 8004f2e:	6818      	ldr	r0, [r3, #0]
 8004f30:	4b3f      	ldr	r3, [pc, #252]	; (8005030 <HAL_ADC_Start_DMA+0x130>)
 8004f32:	fba3 3000 	umull	r3, r0, r3, r0
 8004f36:	0c80      	lsrs	r0, r0, #18
 8004f38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004f3c:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8004f3e:	9b01      	ldr	r3, [sp, #4]
 8004f40:	b12b      	cbz	r3, 8004f4e <HAL_ADC_Start_DMA+0x4e>
      counter--;
 8004f42:	9c01      	ldr	r4, [sp, #4]
 8004f44:	3c01      	subs	r4, #1
 8004f46:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8004f48:	9801      	ldr	r0, [sp, #4]
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	d1f9      	bne.n	8004f42 <HAL_ADC_Start_DMA+0x42>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004f4e:	68b3      	ldr	r3, [r6, #8]
 8004f50:	05d8      	lsls	r0, r3, #23
 8004f52:	d503      	bpl.n	8004f5c <HAL_ADC_Start_DMA+0x5c>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004f54:	68b3      	ldr	r3, [r6, #8]
 8004f56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f5a:	60b3      	str	r3, [r6, #8]
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004f5c:	68b0      	ldr	r0, [r6, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8004f5e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004f60:	f010 0001 	ands.w	r0, r0, #1
 8004f64:	d042      	beq.n	8004fec <HAL_ADC_Start_DMA+0xec>
    ADC_STATE_CLR_SET(hadc->State,
 8004f66:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004f6a:	f023 0301 	bic.w	r3, r3, #1
 8004f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f72:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004f74:	6873      	ldr	r3, [r6, #4]
 8004f76:	055b      	lsls	r3, r3, #21
 8004f78:	d505      	bpl.n	8004f86 <HAL_ADC_Start_DMA+0x86>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004f7a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004f7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f84:	642b      	str	r3, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f86:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f88:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f8a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004f8e:	bf1c      	itt	ne
 8004f90:	6c6b      	ldrne	r3, [r5, #68]	; 0x44
 8004f92:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8004f96:	646b      	str	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8004f98:	2400      	movs	r4, #0
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	460a      	mov	r2, r1
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f9e:	4925      	ldr	r1, [pc, #148]	; (8005034 <HAL_ADC_Start_DMA+0x134>)
    __HAL_UNLOCK(hadc);   
 8004fa0:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004fa4:	63c1      	str	r1, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004fa6:	4924      	ldr	r1, [pc, #144]	; (8005038 <HAL_ADC_Start_DMA+0x138>)
 8004fa8:	6401      	str	r1, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004faa:	4924      	ldr	r1, [pc, #144]	; (800503c <HAL_ADC_Start_DMA+0x13c>)
 8004fac:	64c1      	str	r1, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004fae:	f06f 0122 	mvn.w	r1, #34	; 0x22
 8004fb2:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004fb4:	6871      	ldr	r1, [r6, #4]
 8004fb6:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8004fba:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004fbc:	68b1      	ldr	r1, [r6, #8]
 8004fbe:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004fc2:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004fc4:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8004fc8:	f000 fc3e 	bl	8005848 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004fcc:	4b1c      	ldr	r3, [pc, #112]	; (8005040 <HAL_ADC_Start_DMA+0x140>)
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	f012 021f 	ands.w	r2, r2, #31
 8004fd4:	d113      	bne.n	8004ffe <HAL_ADC_Start_DMA+0xfe>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004fd6:	6829      	ldr	r1, [r5, #0]
 8004fd8:	6888      	ldr	r0, [r1, #8]
 8004fda:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8004fde:	d115      	bne.n	800500c <HAL_ADC_Start_DMA+0x10c>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004fe0:	688b      	ldr	r3, [r1, #8]
 8004fe2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fe6:	608b      	str	r3, [r1, #8]
}
 8004fe8:	b002      	add	sp, #8
 8004fea:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fec:	f043 0310 	orr.w	r3, r3, #16
 8004ff0:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ff2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	646b      	str	r3, [r5, #68]	; 0x44
}
 8004ffa:	b002      	add	sp, #8
 8004ffc:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ffe:	4a11      	ldr	r2, [pc, #68]	; (8005044 <HAL_ADC_Start_DMA+0x144>)
 8005000:	682b      	ldr	r3, [r5, #0]
 8005002:	4293      	cmp	r3, r2
 8005004:	d005      	beq.n	8005012 <HAL_ADC_Start_DMA+0x112>
  return HAL_OK;
 8005006:	4620      	mov	r0, r4
}
 8005008:	b002      	add	sp, #8
 800500a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800500c:	4610      	mov	r0, r2
}
 800500e:	b002      	add	sp, #8
 8005010:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005012:	6898      	ldr	r0, [r3, #8]
 8005014:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8005018:	d1f5      	bne.n	8005006 <HAL_ADC_Start_DMA+0x106>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005020:	609a      	str	r2, [r3, #8]
 8005022:	e7ea      	b.n	8004ffa <HAL_ADC_Start_DMA+0xfa>
  __HAL_LOCK(hadc);
 8005024:	2002      	movs	r0, #2
}
 8005026:	b002      	add	sp, #8
 8005028:	bd70      	pop	{r4, r5, r6, pc}
 800502a:	bf00      	nop
 800502c:	20008f88 	.word	0x20008f88
 8005030:	431bde83 	.word	0x431bde83
 8005034:	080050ed 	.word	0x080050ed
 8005038:	080050c5 	.word	0x080050c5
 800503c:	080050d5 	.word	0x080050d5
 8005040:	40012300 	.word	0x40012300
 8005044:	40012000 	.word	0x40012000

08005048 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 8005048:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800504c:	2b01      	cmp	r3, #1
 800504e:	d02b      	beq.n	80050a8 <HAL_ADC_Stop_DMA+0x60>
  __HAL_ADC_DISABLE(hadc);
 8005050:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 8005052:	2201      	movs	r2, #1
{
 8005054:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8005056:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	f022 0201 	bic.w	r2, r2, #1
 8005060:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005062:	4604      	mov	r4, r0
 8005064:	6898      	ldr	r0, [r3, #8]
 8005066:	f010 0001 	ands.w	r0, r0, #1
 800506a:	d118      	bne.n	800509e <HAL_ADC_Stop_DMA+0x56>
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800506c:	689a      	ldr	r2, [r3, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800506e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8005070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005074:	609a      	str	r2, [r3, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005076:	f891 2035 	ldrb.w	r2, [r1, #53]	; 0x35
 800507a:	2a02      	cmp	r2, #2
 800507c:	d016      	beq.n	80050ac <HAL_ADC_Stop_DMA+0x64>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8005084:	605a      	str	r2, [r3, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8005086:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005088:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	f043 0301 	orr.w	r3, r3, #1
 8005094:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8005096:	2300      	movs	r3, #0
 8005098:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800509c:	bd10      	pop	{r4, pc}
  __HAL_UNLOCK(hadc);
 800509e:	2300      	movs	r3, #0
 80050a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050a4:	2000      	movs	r0, #0
}
 80050a6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80050a8:	2002      	movs	r0, #2
}
 80050aa:	4770      	bx	lr
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80050ac:	4608      	mov	r0, r1
 80050ae:	f000 fc0b 	bl	80058c8 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 80050b2:	b128      	cbz	r0, 80050c0 <HAL_ADC_Stop_DMA+0x78>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80050b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80050b6:	6823      	ldr	r3, [r4, #0]
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80050b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050bc:	6422      	str	r2, [r4, #64]	; 0x40
 80050be:	e7de      	b.n	800507e <HAL_ADC_Stop_DMA+0x36>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	e7dc      	b.n	800507e <HAL_ADC_Stop_DMA+0x36>

080050c4 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80050c4:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80050c6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80050c8:	f7ff f9ae 	bl	8004428 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050cc:	bd08      	pop	{r3, pc}
 80050ce:	bf00      	nop

080050d0 <HAL_ADC_ErrorCallback>:
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop

080050d4 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80050d4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80050d6:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80050d8:	2340      	movs	r3, #64	; 0x40
 80050da:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80050dc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80050de:	f043 0304 	orr.w	r3, r3, #4
 80050e2:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80050e4:	f7ff fff4 	bl	80050d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050e8:	bd08      	pop	{r3, pc}
 80050ea:	bf00      	nop

080050ec <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80050ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80050ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050f0:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80050f4:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80050f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80050f8:	d123      	bne.n	8005142 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80050fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80050fe:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005100:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005102:	688a      	ldr	r2, [r1, #8]
 8005104:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8005108:	d117      	bne.n	800513a <ADC_DMAConvCplt+0x4e>
 800510a:	7e1a      	ldrb	r2, [r3, #24]
 800510c:	b9aa      	cbnz	r2, 800513a <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800510e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005110:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8005114:	d002      	beq.n	800511c <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005116:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005118:	0550      	lsls	r0, r2, #21
 800511a:	d40e      	bmi.n	800513a <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800511c:	684a      	ldr	r2, [r1, #4]
 800511e:	f022 0220 	bic.w	r2, r2, #32
 8005122:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005126:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800512a:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800512c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800512e:	04d1      	lsls	r1, r2, #19
 8005130:	d403      	bmi.n	800513a <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005134:	f042 0201 	orr.w	r2, r2, #1
 8005138:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff f97a 	bl	8004434 <HAL_ADC_ConvCpltCallback>
}
 8005140:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005142:	06d2      	lsls	r2, r2, #27
 8005144:	d404      	bmi.n	8005150 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8005148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800514c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514e:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff ffbd 	bl	80050d0 <HAL_ADC_ErrorCallback>
}
 8005156:	bd10      	pop	{r4, pc}

08005158 <HAL_ADC_ConfigChannel>:
{
 8005158:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 800515a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800515e:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8005160:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005162:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8005164:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8005166:	f000 809b 	beq.w	80052a0 <HAL_ADC_ConfigChannel+0x148>
 800516a:	2301      	movs	r3, #1
 800516c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005170:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005172:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005174:	2c09      	cmp	r4, #9
 8005176:	d82d      	bhi.n	80051d4 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005178:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800517a:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800517c:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8005180:	f04f 0c07 	mov.w	ip, #7
 8005184:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005188:	ea25 050c 	bic.w	r5, r5, ip
 800518c:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800518e:	691d      	ldr	r5, [r3, #16]
 8005190:	fa02 f20e 	lsl.w	r2, r2, lr
 8005194:	432a      	orrs	r2, r5
 8005196:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 8005198:	684a      	ldr	r2, [r1, #4]
 800519a:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800519c:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 800519e:	d82f      	bhi.n	8005200 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80051a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80051a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80051a6:	3a05      	subs	r2, #5
 80051a8:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80051ac:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80051b0:	fa0e f202 	lsl.w	r2, lr, r2
 80051b4:	ea21 0202 	bic.w	r2, r1, r2
 80051b8:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80051ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051bc:	ea4c 0202 	orr.w	r2, ip, r2
 80051c0:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80051c2:	4a3f      	ldr	r2, [pc, #252]	; (80052c0 <HAL_ADC_ConfigChannel+0x168>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d030      	beq.n	800522a <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 80051c8:	2300      	movs	r3, #0
 80051ca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80051ce:	4618      	mov	r0, r3
}
 80051d0:	b003      	add	sp, #12
 80051d2:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80051d4:	fa1f fc84 	uxth.w	ip, r4
 80051d8:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 80051dc:	68dd      	ldr	r5, [r3, #12]
 80051de:	f1a2 0e1e 	sub.w	lr, r2, #30
 80051e2:	2207      	movs	r2, #7
 80051e4:	fa02 f20e 	lsl.w	r2, r2, lr
 80051e8:	ea25 0202 	bic.w	r2, r5, r2
 80051ec:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80051ee:	688a      	ldr	r2, [r1, #8]
 80051f0:	68dd      	ldr	r5, [r3, #12]
 80051f2:	fa02 f20e 	lsl.w	r2, r2, lr
 80051f6:	432a      	orrs	r2, r5
 80051f8:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 80051fa:	684a      	ldr	r2, [r1, #4]
 80051fc:	2a06      	cmp	r2, #6
 80051fe:	d9cf      	bls.n	80051a0 <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 8005200:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005202:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 8005206:	d832      	bhi.n	800526e <HAL_ADC_ConfigChannel+0x116>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005208:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800520a:	3a23      	subs	r2, #35	; 0x23
 800520c:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800520e:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005212:	fa05 f202 	lsl.w	r2, r5, r2
 8005216:	ea21 0202 	bic.w	r2, r1, r2
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800521c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800521e:	ea4c 0202 	orr.w	r2, ip, r2
 8005222:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005224:	4a26      	ldr	r2, [pc, #152]	; (80052c0 <HAL_ADC_ConfigChannel+0x168>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d1ce      	bne.n	80051c8 <HAL_ADC_ConfigChannel+0x70>
 800522a:	2c12      	cmp	r4, #18
 800522c:	d02e      	beq.n	800528c <HAL_ADC_ConfigChannel+0x134>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800522e:	4b25      	ldr	r3, [pc, #148]	; (80052c4 <HAL_ADC_ConfigChannel+0x16c>)
 8005230:	429c      	cmp	r4, r3
 8005232:	d138      	bne.n	80052a6 <HAL_ADC_ConfigChannel+0x14e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005234:	4a24      	ldr	r2, [pc, #144]	; (80052c8 <HAL_ADC_ConfigChannel+0x170>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005236:	4b25      	ldr	r3, [pc, #148]	; (80052cc <HAL_ADC_ConfigChannel+0x174>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005238:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800523a:	4c25      	ldr	r4, [pc, #148]	; (80052d0 <HAL_ADC_ConfigChannel+0x178>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800523c:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 8005240:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005242:	6851      	ldr	r1, [r2, #4]
 8005244:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8005248:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	fba4 2303 	umull	r2, r3, r4, r3
 8005250:	0c9b      	lsrs	r3, r3, #18
 8005252:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800525a:	9b01      	ldr	r3, [sp, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0b3      	beq.n	80051c8 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8005260:	9b01      	ldr	r3, [sp, #4]
 8005262:	3b01      	subs	r3, #1
 8005264:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8005266:	9b01      	ldr	r3, [sp, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1f9      	bne.n	8005260 <HAL_ADC_ConfigChannel+0x108>
 800526c:	e7ac      	b.n	80051c8 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800526e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005270:	3a41      	subs	r2, #65	; 0x41
 8005272:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005274:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005278:	fa05 f202 	lsl.w	r2, r5, r2
 800527c:	ea21 0202 	bic.w	r2, r1, r2
 8005280:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005284:	ea4c 0202 	orr.w	r2, ip, r2
 8005288:	62da      	str	r2, [r3, #44]	; 0x2c
 800528a:	e79a      	b.n	80051c2 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800528c:	4b0e      	ldr	r3, [pc, #56]	; (80052c8 <HAL_ADC_ConfigChannel+0x170>)
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8005294:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800529c:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800529e:	e793      	b.n	80051c8 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80052a0:	2002      	movs	r0, #2
}
 80052a2:	b003      	add	sp, #12
 80052a4:	bd30      	pop	{r4, r5, pc}
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80052a6:	2c11      	cmp	r4, #17
 80052a8:	d18e      	bne.n	80051c8 <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80052aa:	4b07      	ldr	r3, [pc, #28]	; (80052c8 <HAL_ADC_ConfigChannel+0x170>)
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80052b2:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80052ba:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052bc:	e784      	b.n	80051c8 <HAL_ADC_ConfigChannel+0x70>
 80052be:	bf00      	nop
 80052c0:	40012000 	.word	0x40012000
 80052c4:	10000012 	.word	0x10000012
 80052c8:	40012300 	.word	0x40012300
 80052cc:	20008f88 	.word	0x20008f88
 80052d0:	431bde83 	.word	0x431bde83

080052d4 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 80052d4:	b410      	push	{r4}
  __IO uint32_t counter = 0U;
  uint32_t tmp1 = 0U, tmp2 = 0U;
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052d6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80052da:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 80052dc:	2100      	movs	r1, #0
  __HAL_LOCK(hadc);
 80052de:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80052e0:	9101      	str	r1, [sp, #4]
  __HAL_LOCK(hadc);
 80052e2:	d066      	beq.n	80053b2 <HAL_ADCEx_InjectedStart+0xde>
 80052e4:	2301      	movs	r3, #1
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80052e6:	6801      	ldr	r1, [r0, #0]
  __HAL_LOCK(hadc);
 80052e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80052ec:	688b      	ldr	r3, [r1, #8]
 80052ee:	07db      	lsls	r3, r3, #31
 80052f0:	4602      	mov	r2, r0
 80052f2:	d414      	bmi.n	800531e <HAL_ADCEx_InjectedStart+0x4a>
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80052f4:	4b31      	ldr	r3, [pc, #196]	; (80053bc <HAL_ADCEx_InjectedStart+0xe8>)
 80052f6:	4c32      	ldr	r4, [pc, #200]	; (80053c0 <HAL_ADCEx_InjectedStart+0xec>)
 80052f8:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 80052fa:	6888      	ldr	r0, [r1, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80052fc:	fba4 4303 	umull	r4, r3, r4, r3
 8005300:	0c9b      	lsrs	r3, r3, #18
 8005302:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8005306:	f040 0001 	orr.w	r0, r0, #1
 800530a:	6088      	str	r0, [r1, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800530c:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 800530e:	9b01      	ldr	r3, [sp, #4]
 8005310:	b12b      	cbz	r3, 800531e <HAL_ADCEx_InjectedStart+0x4a>
    {
      counter--;
 8005312:	9b01      	ldr	r3, [sp, #4]
 8005314:	3b01      	subs	r3, #1
 8005316:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8005318:	9b01      	ldr	r3, [sp, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f9      	bne.n	8005312 <HAL_ADCEx_InjectedStart+0x3e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800531e:	6888      	ldr	r0, [r1, #8]
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8005320:	6c13      	ldr	r3, [r2, #64]	; 0x40
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005322:	f010 0001 	ands.w	r0, r0, #1
 8005326:	d023      	beq.n	8005370 <HAL_ADCEx_InjectedStart+0x9c>
    ADC_STATE_CLR_SET(hadc->State,
 8005328:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800532c:	f023 0301 	bic.w	r3, r3, #1
 8005330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005334:	6413      	str	r3, [r2, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005336:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005338:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800533c:	bf08      	it	eq
 800533e:	6453      	streq	r3, [r2, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005340:	2000      	movs	r0, #0
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005342:	4b20      	ldr	r3, [pc, #128]	; (80053c4 <HAL_ADCEx_InjectedStart+0xf0>)
    __HAL_UNLOCK(hadc);
 8005344:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8005348:	f06f 0404 	mvn.w	r4, #4
 800534c:	600c      	str	r4, [r1, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	f012 021f 	ands.w	r2, r2, #31
 8005354:	d117      	bne.n	8005386 <HAL_ADCEx_InjectedStart+0xb2>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8005356:	688b      	ldr	r3, [r1, #8]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8005358:	6848      	ldr	r0, [r1, #4]
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800535a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800535e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
      if(tmp1 && tmp2)
 8005362:	4318      	orrs	r0, r3
 8005364:	d120      	bne.n	80053a8 <HAL_ADCEx_InjectedStart+0xd4>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8005366:	688b      	ldr	r3, [r1, #8]
 8005368:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800536c:	608b      	str	r3, [r1, #8]
 800536e:	e006      	b.n	800537e <HAL_ADCEx_InjectedStart+0xaa>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005370:	f043 0310 	orr.w	r3, r3, #16
 8005374:	6413      	str	r3, [r2, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005376:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005378:	f043 0301 	orr.w	r3, r3, #1
 800537c:	6453      	str	r3, [r2, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
}
 800537e:	b003      	add	sp, #12
 8005380:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005384:	4770      	bx	lr
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8005386:	4b10      	ldr	r3, [pc, #64]	; (80053c8 <HAL_ADCEx_InjectedStart+0xf4>)
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8005388:	688a      	ldr	r2, [r1, #8]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800538a:	684c      	ldr	r4, [r1, #4]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 800538c:	4299      	cmp	r1, r3
 800538e:	d1f6      	bne.n	800537e <HAL_ADCEx_InjectedStart+0xaa>
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8005390:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8005394:	f404 6480 	and.w	r4, r4, #1024	; 0x400
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8005398:	4322      	orrs	r2, r4
 800539a:	d1f0      	bne.n	800537e <HAL_ADCEx_InjectedStart+0xaa>
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 800539c:	688b      	ldr	r3, [r1, #8]
 800539e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  return HAL_OK;
 80053a2:	4610      	mov	r0, r2
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 80053a4:	608b      	str	r3, [r1, #8]
 80053a6:	e7ea      	b.n	800537e <HAL_ADCEx_InjectedStart+0xaa>
  return HAL_OK;
 80053a8:	4610      	mov	r0, r2
}
 80053aa:	b003      	add	sp, #12
 80053ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053b0:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80053b2:	2002      	movs	r0, #2
}
 80053b4:	b003      	add	sp, #12
 80053b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	20008f88 	.word	0x20008f88
 80053c0:	431bde83 	.word	0x431bde83
 80053c4:	40012300 	.word	0x40012300
 80053c8:	40012000 	.word	0x40012000

080053cc <HAL_ADCEx_InjectedStop>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80053cc:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80053d0:	2a01      	cmp	r2, #1
{
 80053d2:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80053d4:	d028      	beq.n	8005428 <HAL_ADCEx_InjectedStop+0x5c>
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80053d6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  __HAL_LOCK(hadc);
 80053d8:	2101      	movs	r1, #1
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80053da:	05d2      	lsls	r2, r2, #23
  __HAL_LOCK(hadc);
 80053dc:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80053e0:	d419      	bmi.n	8005416 <HAL_ADCEx_InjectedStop+0x4a>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 80053e2:	6802      	ldr	r2, [r0, #0]
 80053e4:	6850      	ldr	r0, [r2, #4]
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80053e6:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80053ea:	d114      	bne.n	8005416 <HAL_ADCEx_InjectedStop+0x4a>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80053ec:	6891      	ldr	r1, [r2, #8]
 80053ee:	f021 0101 	bic.w	r1, r1, #1
 80053f2:	6091      	str	r1, [r2, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80053f4:	6892      	ldr	r2, [r2, #8]
 80053f6:	f012 0201 	ands.w	r2, r2, #1
 80053fa:	d111      	bne.n	8005420 <HAL_ADCEx_InjectedStop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80053fc:	6c19      	ldr	r1, [r3, #64]	; 0x40
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053fe:	4610      	mov	r0, r2
      ADC_STATE_CLR_SET(hadc->State,
 8005400:	f421 5288 	bic.w	r2, r1, #4352	; 0x1100
 8005404:	f022 0201 	bic.w	r2, r2, #1
 8005408:	f042 0201 	orr.w	r2, r2, #1
 800540c:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005414:	4770      	bx	lr
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005418:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 800541c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800541e:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return tmp_hal_status;
 8005426:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8005428:	2002      	movs	r0, #2
}
 800542a:	4770      	bx	lr

0800542c <HAL_ADCEx_InjectedGetValue>:
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800542c:	6803      	ldr	r3, [r0, #0]
{
 800542e:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0U;
 8005430:	2000      	movs	r0, #0
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8005432:	f06f 0204 	mvn.w	r2, #4
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8005436:	3901      	subs	r1, #1
  __IO uint32_t tmp = 0U;
 8005438:	9001      	str	r0, [sp, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800543a:	601a      	str	r2, [r3, #0]
  switch(InjectedRank)
 800543c:	2903      	cmp	r1, #3
 800543e:	d805      	bhi.n	800544c <HAL_ADCEx_InjectedGetValue+0x20>
 8005440:	e8df f001 	tbb	[pc, r1]
 8005444:	02070c11 	.word	0x02070c11
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8005448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800544a:	9301      	str	r3, [sp, #4]
    }
    break;
    default:
    break;  
  }
  return tmp;
 800544c:	9801      	ldr	r0, [sp, #4]
}
 800544e:	b002      	add	sp, #8
 8005450:	4770      	bx	lr
      tmp =  hadc->Instance->JDR3;
 8005452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005454:	9301      	str	r3, [sp, #4]
  return tmp;
 8005456:	9801      	ldr	r0, [sp, #4]
}
 8005458:	b002      	add	sp, #8
 800545a:	4770      	bx	lr
      tmp =  hadc->Instance->JDR2;
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	9301      	str	r3, [sp, #4]
  return tmp;
 8005460:	9801      	ldr	r0, [sp, #4]
}
 8005462:	b002      	add	sp, #8
 8005464:	4770      	bx	lr
      tmp =  hadc->Instance->JDR1;
 8005466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005468:	9301      	str	r3, [sp, #4]
  return tmp;
 800546a:	9801      	ldr	r0, [sp, #4]
}
 800546c:	b002      	add	sp, #8
 800546e:	4770      	bx	lr

08005470 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8005470:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005472:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005476:	698e      	ldr	r6, [r1, #24]
  __HAL_LOCK(hadc);
 8005478:	2b01      	cmp	r3, #1
 800547a:	f000 80ca 	beq.w	8005612 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
 800547e:	2301      	movs	r3, #1
 8005480:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8005484:	680d      	ldr	r5, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8005486:	6803      	ldr	r3, [r0, #0]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8005488:	2d09      	cmp	r5, #9
 800548a:	d868      	bhi.n	800555e <HAL_ADCEx_InjectedConfigChannel+0xee>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 800548c:	691c      	ldr	r4, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800548e:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8005490:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8005494:	2707      	movs	r7, #7
 8005496:	fa07 f70c 	lsl.w	r7, r7, ip
 800549a:	ea24 0407 	bic.w	r4, r4, r7
 800549e:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80054a0:	691c      	ldr	r4, [r3, #16]
 80054a2:	fa02 f20c 	lsl.w	r2, r2, ip
 80054a6:	4322      	orrs	r2, r4
 80054a8:	611a      	str	r2, [r3, #16]
 80054aa:	46ac      	mov	ip, r5
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80054ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80054ae:	f8d1 e010 	ldr.w	lr, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80054b2:	684c      	ldr	r4, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80054b4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80054b8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80054ba:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80054bc:	f10e 32ff 	add.w	r2, lr, #4294967295
 80054c0:	ea47 5702 	orr.w	r7, r7, r2, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80054c4:	1ce2      	adds	r2, r4, #3
 80054c6:	eba2 020e 	sub.w	r2, r2, lr
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80054ca:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80054d0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80054d4:	f04f 0e1f 	mov.w	lr, #31
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80054d8:	fa0c fc02 	lsl.w	ip, ip, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80054dc:	fa0e f202 	lsl.w	r2, lr, r2
 80054e0:	ea27 0202 	bic.w	r2, r7, r2
 80054e4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80054e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054e8:	ea4c 0202 	orr.w	r2, ip, r2
 80054ec:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80054ee:	4a4a      	ldr	r2, [pc, #296]	; (8005618 <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 80054f0:	4296      	cmp	r6, r2
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80054f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80054fa:	689a      	ldr	r2, [r3, #8]
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80054fc:	d068      	beq.n	80055d0 <HAL_ADCEx_InjectedConfigChannel+0x160>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80054fe:	4316      	orrs	r6, r2
 8005500:	609e      	str	r6, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8005502:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8005504:	69ce      	ldr	r6, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8005506:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800550a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800550c:	689a      	ldr	r2, [r3, #8]
 800550e:	4332      	orrs	r2, r6
 8005510:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8005512:	7d4a      	ldrb	r2, [r1, #21]
 8005514:	2a00      	cmp	r2, #0
 8005516:	d034      	beq.n	8005582 <HAL_ADCEx_InjectedConfigChannel+0x112>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800551e:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8005520:	7d0a      	ldrb	r2, [r1, #20]
 8005522:	2a00      	cmp	r2, #0
 8005524:	d034      	beq.n	8005590 <HAL_ADCEx_InjectedConfigChannel+0x120>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8005526:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 8005528:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800552a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800552e:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8005530:	d034      	beq.n	800559c <HAL_ADCEx_InjectedConfigChannel+0x12c>
 8005532:	2c03      	cmp	r4, #3
 8005534:	d05b      	beq.n	80055ee <HAL_ADCEx_InjectedConfigChannel+0x17e>
 8005536:	2c01      	cmp	r4, #1
 8005538:	d04e      	beq.n	80055d8 <HAL_ADCEx_InjectedConfigChannel+0x168>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800553a:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800553c:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800553e:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8005542:	f022 020f 	bic.w	r2, r2, #15
 8005546:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8005548:	6a1a      	ldr	r2, [r3, #32]
 800554a:	430a      	orrs	r2, r1
 800554c:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800554e:	4a33      	ldr	r2, [pc, #204]	; (800561c <HAL_ADCEx_InjectedConfigChannel+0x1ac>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d030      	beq.n	80055b6 <HAL_ADCEx_InjectedConfigChannel+0x146>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005554:	2300      	movs	r3, #0
 8005556:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800555a:	4618      	mov	r0, r3
}
 800555c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800555e:	fa1f fc85 	uxth.w	ip, r5
 8005562:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8005566:	f1a2 041e 	sub.w	r4, r2, #30
 800556a:	2707      	movs	r7, #7
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	40a7      	lsls	r7, r4
 8005570:	ea22 0207 	bic.w	r2, r2, r7
 8005574:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8005576:	688a      	ldr	r2, [r1, #8]
 8005578:	40a2      	lsls	r2, r4
 800557a:	68dc      	ldr	r4, [r3, #12]
 800557c:	4322      	orrs	r2, r4
 800557e:	60da      	str	r2, [r3, #12]
 8005580:	e794      	b.n	80054ac <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005588:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800558a:	7d0a      	ldrb	r2, [r1, #20]
 800558c:	2a00      	cmp	r2, #0
 800558e:	d1ca      	bne.n	8005526 <HAL_ADCEx_InjectedConfigChannel+0xb6>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8005590:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8005592:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8005594:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005598:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 800559a:	d1ca      	bne.n	8005532 <HAL_ADCEx_InjectedConfigChannel+0xc2>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800559c:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800559e:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80055a0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80055a4:	f022 020f 	bic.w	r2, r2, #15
 80055a8:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80055aa:	699a      	ldr	r2, [r3, #24]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80055b0:	4a1a      	ldr	r2, [pc, #104]	; (800561c <HAL_ADCEx_InjectedConfigChannel+0x1ac>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d1ce      	bne.n	8005554 <HAL_ADCEx_InjectedConfigChannel+0xe4>
 80055b6:	2d12      	cmp	r5, #18
 80055b8:	d024      	beq.n	8005604 <HAL_ADCEx_InjectedConfigChannel+0x194>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80055ba:	4b19      	ldr	r3, [pc, #100]	; (8005620 <HAL_ADCEx_InjectedConfigChannel+0x1b0>)
 80055bc:	429d      	cmp	r5, r3
 80055be:	d001      	beq.n	80055c4 <HAL_ADCEx_InjectedConfigChannel+0x154>
 80055c0:	2d11      	cmp	r5, #17
 80055c2:	d1c7      	bne.n	8005554 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80055c4:	4a17      	ldr	r2, [pc, #92]	; (8005624 <HAL_ADCEx_InjectedConfigChannel+0x1b4>)
 80055c6:	6853      	ldr	r3, [r2, #4]
 80055c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80055cc:	6053      	str	r3, [r2, #4]
 80055ce:	e7c1      	b.n	8005554 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80055d0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80055d4:	609a      	str	r2, [r3, #8]
 80055d6:	e79c      	b.n	8005512 <HAL_ADCEx_InjectedConfigChannel+0xa2>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80055d8:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80055da:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80055dc:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80055e0:	f022 020f 	bic.w	r2, r2, #15
 80055e4:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80055e6:	695a      	ldr	r2, [r3, #20]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	615a      	str	r2, [r3, #20]
      break;
 80055ec:	e7af      	b.n	800554e <HAL_ADCEx_InjectedConfigChannel+0xde>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80055ee:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80055f0:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80055f2:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80055f6:	f022 020f 	bic.w	r2, r2, #15
 80055fa:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80055fc:	69da      	ldr	r2, [r3, #28]
 80055fe:	430a      	orrs	r2, r1
 8005600:	61da      	str	r2, [r3, #28]
      break;
 8005602:	e7a4      	b.n	800554e <HAL_ADCEx_InjectedConfigChannel+0xde>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005604:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8005608:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800560c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8005610:	e7a0      	b.n	8005554 <HAL_ADCEx_InjectedConfigChannel+0xe4>
  __HAL_LOCK(hadc);
 8005612:	2002      	movs	r0, #2
}
 8005614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005616:	bf00      	nop
 8005618:	000f0001 	.word	0x000f0001
 800561c:	40012000 	.word	0x40012000
 8005620:	10000012 	.word	0x10000012
 8005624:	40012300 	.word	0x40012300

08005628 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005628:	4907      	ldr	r1, [pc, #28]	; (8005648 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800562a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800562c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800562e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005632:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005636:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005638:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800563a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800563e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005642:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	e000ed00 	.word	0xe000ed00

0800564c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800564c:	4b1c      	ldr	r3, [pc, #112]	; (80056c0 <HAL_NVIC_SetPriority+0x74>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005654:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005656:	f1c3 0e07 	rsb	lr, r3, #7
 800565a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800565e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005662:	bf28      	it	cs
 8005664:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005668:	f1bc 0f06 	cmp.w	ip, #6
 800566c:	d91b      	bls.n	80056a6 <HAL_NVIC_SetPriority+0x5a>
 800566e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005670:	f04f 3cff 	mov.w	ip, #4294967295
 8005674:	fa0c fc03 	lsl.w	ip, ip, r3
 8005678:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800567c:	f04f 3cff 	mov.w	ip, #4294967295
 8005680:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005684:	ea21 010c 	bic.w	r1, r1, ip
 8005688:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800568a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800568c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005690:	db0c      	blt.n	80056ac <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005692:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005696:	0109      	lsls	r1, r1, #4
 8005698:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800569c:	b2c9      	uxtb	r1, r1
 800569e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80056a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80056a6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056a8:	4613      	mov	r3, r2
 80056aa:	e7e7      	b.n	800567c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ac:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <HAL_NVIC_SetPriority+0x78>)
 80056ae:	f000 000f 	and.w	r0, r0, #15
 80056b2:	0109      	lsls	r1, r1, #4
 80056b4:	4403      	add	r3, r0
 80056b6:	b2c9      	uxtb	r1, r1
 80056b8:	7619      	strb	r1, [r3, #24]
 80056ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80056be:	bf00      	nop
 80056c0:	e000ed00 	.word	0xe000ed00
 80056c4:	e000ecfc 	.word	0xe000ecfc

080056c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80056c8:	2800      	cmp	r0, #0
 80056ca:	db08      	blt.n	80056de <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056cc:	0941      	lsrs	r1, r0, #5
 80056ce:	4a04      	ldr	r2, [pc, #16]	; (80056e0 <HAL_NVIC_EnableIRQ+0x18>)
 80056d0:	f000 001f 	and.w	r0, r0, #31
 80056d4:	2301      	movs	r3, #1
 80056d6:	fa03 f000 	lsl.w	r0, r3, r0
 80056da:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80056de:	4770      	bx	lr
 80056e0:	e000e100 	.word	0xe000e100

080056e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056e4:	3801      	subs	r0, #1
 80056e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80056ea:	d210      	bcs.n	800570e <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056ec:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056f2:	4c08      	ldr	r4, [pc, #32]	; (8005714 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056f4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056f6:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80056fa:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056fe:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005700:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005702:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005704:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8005706:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800570a:	6119      	str	r1, [r3, #16]
 800570c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800570e:	2001      	movs	r0, #1
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	e000ed00 	.word	0xe000ed00

08005718 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005718:	b538      	push	{r3, r4, r5, lr}
 800571a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800571c:	f7ff fa4e 	bl	8004bbc <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005720:	2c00      	cmp	r4, #0
 8005722:	d067      	beq.n	80057f4 <HAL_DMA_Init+0xdc>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005724:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8005726:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8005728:	2102      	movs	r1, #2
 800572a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800572e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	f022 0201 	bic.w	r2, r2, #1
 8005738:	4605      	mov	r5, r0
 800573a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800573c:	e005      	b.n	800574a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800573e:	f7ff fa3d 	bl	8004bbc <HAL_GetTick>
 8005742:	1b43      	subs	r3, r0, r5
 8005744:	2b05      	cmp	r3, #5
 8005746:	d839      	bhi.n	80057bc <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	07d1      	lsls	r1, r2, #31
 800574e:	d4f6      	bmi.n	800573e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005750:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8005754:	68e1      	ldr	r1, [r4, #12]
 8005756:	4302      	orrs	r2, r0
 8005758:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800575a:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800575e:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005760:	432a      	orrs	r2, r5
 8005762:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005764:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8005766:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005768:	4302      	orrs	r2, r0
 800576a:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800576c:	4933      	ldr	r1, [pc, #204]	; (800583c <HAL_DMA_Init+0x124>)
 800576e:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8005770:	6a25      	ldr	r5, [r4, #32]
 8005772:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005774:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005776:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005778:	2904      	cmp	r1, #4
 800577a:	d026      	beq.n	80057ca <HAL_DMA_Init+0xb2>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800577c:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800577e:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005780:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005784:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005786:	b2d8      	uxtb	r0, r3
 8005788:	4a2d      	ldr	r2, [pc, #180]	; (8005840 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 800578a:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800578c:	3810      	subs	r0, #16
 800578e:	fba2 5200 	umull	r5, r2, r2, r0
 8005792:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005794:	492b      	ldr	r1, [pc, #172]	; (8005844 <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005796:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800579a:	5c89      	ldrb	r1, [r1, r2]
 800579c:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800579e:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 80057a2:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80057a4:	bf88      	it	hi
 80057a6:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057a8:	223f      	movs	r2, #63	; 0x3f
 80057aa:	408a      	lsls	r2, r1
 80057ac:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057ae:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057b0:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 80057b2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057b4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80057b6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80057ba:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057be:	2220      	movs	r2, #32
 80057c0:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057c2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 80057c6:	4618      	mov	r0, r3
}
 80057c8:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80057ca:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 80057ce:	4329      	orrs	r1, r5
 80057d0:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 80057d2:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80057d4:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 80057d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80057d8:	f021 0107 	bic.w	r1, r1, #7
 80057dc:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 80057de:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80057e2:	2d00      	cmp	r5, #0
 80057e4:	d0cf      	beq.n	8005786 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057e6:	b938      	cbnz	r0, 80057f8 <HAL_DMA_Init+0xe0>
  {
    switch (tmp)
 80057e8:	2a01      	cmp	r2, #1
 80057ea:	d023      	beq.n	8005834 <HAL_DMA_Init+0x11c>
 80057ec:	f032 0202 	bics.w	r2, r2, #2
 80057f0:	d1c9      	bne.n	8005786 <HAL_DMA_Init+0x6e>
 80057f2:	e008      	b.n	8005806 <HAL_DMA_Init+0xee>
    return HAL_ERROR;
 80057f4:	2001      	movs	r0, #1
}
 80057f6:	bd38      	pop	{r3, r4, r5, pc}
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057f8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80057fc:	d00c      	beq.n	8005818 <HAL_DMA_Init+0x100>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057fe:	2a02      	cmp	r2, #2
 8005800:	d903      	bls.n	800580a <HAL_DMA_Init+0xf2>
 8005802:	2a03      	cmp	r2, #3
 8005804:	d1bf      	bne.n	8005786 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005806:	01ea      	lsls	r2, r5, #7
 8005808:	d5bd      	bpl.n	8005786 <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 800580a:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800580c:	2240      	movs	r2, #64	; 0x40
 800580e:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8005810:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8005814:	4618      	mov	r0, r3
}
 8005816:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8005818:	2a03      	cmp	r2, #3
 800581a:	d8b4      	bhi.n	8005786 <HAL_DMA_Init+0x6e>
 800581c:	a001      	add	r0, pc, #4	; (adr r0, 8005824 <HAL_DMA_Init+0x10c>)
 800581e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8005822:	bf00      	nop
 8005824:	0800580b 	.word	0x0800580b
 8005828:	08005807 	.word	0x08005807
 800582c:	0800580b 	.word	0x0800580b
 8005830:	08005835 	.word	0x08005835
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005834:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8005838:	d1a5      	bne.n	8005786 <HAL_DMA_Init+0x6e>
 800583a:	e7e6      	b.n	800580a <HAL_DMA_Init+0xf2>
 800583c:	f010803f 	.word	0xf010803f
 8005840:	aaaaaaab 	.word	0xaaaaaaab
 8005844:	0800a27c 	.word	0x0800a27c

08005848 <HAL_DMA_Start_IT>:
{
 8005848:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 800584a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800584e:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8005850:	2c01      	cmp	r4, #1
 8005852:	d035      	beq.n	80058c0 <HAL_DMA_Start_IT+0x78>
  if(HAL_DMA_STATE_READY == hdma->State)
 8005854:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8005858:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800585c:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 800585e:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005862:	d005      	beq.n	8005870 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8005864:	2300      	movs	r3, #0
 8005866:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 800586a:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 800586c:	2002      	movs	r0, #2
}
 800586e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8005870:	2602      	movs	r6, #2
 8005872:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005876:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005878:	2600      	movs	r6, #0
 800587a:	6546      	str	r6, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800587c:	6826      	ldr	r6, [r4, #0]
 800587e:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8005882:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8005884:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005886:	6883      	ldr	r3, [r0, #8]
 8005888:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 800588a:	bf0e      	itee	eq
 800588c:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800588e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8005890:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005892:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8005894:	bf08      	it	eq
 8005896:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005898:	233f      	movs	r3, #63	; 0x3f
 800589a:	4093      	lsls	r3, r2
 800589c:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800589e:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80058a0:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80058a2:	f043 0316 	orr.w	r3, r3, #22
 80058a6:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80058a8:	b11a      	cbz	r2, 80058b2 <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 80058aa:	6823      	ldr	r3, [r4, #0]
 80058ac:	f043 0308 	orr.w	r3, r3, #8
 80058b0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80058b8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80058ba:	6023      	str	r3, [r4, #0]
}
 80058bc:	bc70      	pop	{r4, r5, r6}
 80058be:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80058c0:	2002      	movs	r0, #2
}
 80058c2:	bc70      	pop	{r4, r5, r6}
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop

080058c8 <HAL_DMA_Abort>:
{
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058cc:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80058ce:	f7ff f975 	bl	8004bbc <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058d2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d006      	beq.n	80058e8 <HAL_DMA_Abort+0x20>
    __HAL_UNLOCK(hdma);
 80058da:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058dc:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80058de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058e2:	6562      	str	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 80058e4:	2001      	movs	r0, #1
}
 80058e6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	f022 0216 	bic.w	r2, r2, #22
 80058f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058f2:	695a      	ldr	r2, [r3, #20]
 80058f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058f8:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80058fc:	4605      	mov	r5, r0
 80058fe:	b332      	cbz	r2, 800594e <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	f022 0208 	bic.w	r2, r2, #8
 8005906:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	f022 0201 	bic.w	r2, r2, #1
 800590e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005910:	e005      	b.n	800591e <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005912:	f7ff f953 	bl	8004bbc <HAL_GetTick>
 8005916:	1b43      	subs	r3, r0, r5
 8005918:	2b05      	cmp	r3, #5
 800591a:	d80f      	bhi.n	800593c <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f013 0301 	ands.w	r3, r3, #1
 8005924:	d1f5      	bne.n	8005912 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005926:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005928:	223f      	movs	r2, #63	; 0x3f
 800592a:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 800592c:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800592e:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8005930:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8005934:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005938:	4618      	mov	r0, r3
}
 800593a:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800593c:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800593e:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 8005940:	2300      	movs	r3, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005942:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8005944:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005948:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800594c:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800594e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005950:	2a00      	cmp	r2, #0
 8005952:	d1d5      	bne.n	8005900 <HAL_DMA_Abort+0x38>
 8005954:	e7d8      	b.n	8005908 <HAL_DMA_Abort+0x40>
 8005956:	bf00      	nop

08005958 <HAL_DMA_IRQHandler>:
{
 8005958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800595c:	b082      	sub	sp, #8
  uint32_t timeout = SystemCoreClock / 9600U;
 800595e:	4a74      	ldr	r2, [pc, #464]	; (8005b30 <HAL_DMA_IRQHandler+0x1d8>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005960:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8005962:	6815      	ldr	r5, [r2, #0]
  __IO uint32_t count = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005968:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800596a:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800596c:	2208      	movs	r2, #8
 800596e:	409a      	lsls	r2, r3
 8005970:	4222      	tst	r2, r4
{
 8005972:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005974:	d004      	beq.n	8005980 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005976:	6801      	ldr	r1, [r0, #0]
 8005978:	680f      	ldr	r7, [r1, #0]
 800597a:	0778      	lsls	r0, r7, #29
 800597c:	f100 808a 	bmi.w	8005a94 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005980:	2201      	movs	r2, #1
 8005982:	409a      	lsls	r2, r3
 8005984:	4222      	tst	r2, r4
 8005986:	d004      	beq.n	8005992 <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005988:	f8d8 1000 	ldr.w	r1, [r8]
 800598c:	6949      	ldr	r1, [r1, #20]
 800598e:	0609      	lsls	r1, r1, #24
 8005990:	d478      	bmi.n	8005a84 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005992:	2204      	movs	r2, #4
 8005994:	409a      	lsls	r2, r3
 8005996:	4222      	tst	r2, r4
 8005998:	d004      	beq.n	80059a4 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800599a:	f8d8 1000 	ldr.w	r1, [r8]
 800599e:	6809      	ldr	r1, [r1, #0]
 80059a0:	078f      	lsls	r7, r1, #30
 80059a2:	d467      	bmi.n	8005a74 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80059a4:	2210      	movs	r2, #16
 80059a6:	409a      	lsls	r2, r3
 80059a8:	4222      	tst	r2, r4
 80059aa:	d004      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80059ac:	f8d8 1000 	ldr.w	r1, [r8]
 80059b0:	680f      	ldr	r7, [r1, #0]
 80059b2:	0738      	lsls	r0, r7, #28
 80059b4:	d449      	bmi.n	8005a4a <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80059b6:	2220      	movs	r2, #32
 80059b8:	409a      	lsls	r2, r3
 80059ba:	4222      	tst	r2, r4
 80059bc:	d017      	beq.n	80059ee <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80059be:	f8d8 1000 	ldr.w	r1, [r8]
 80059c2:	680c      	ldr	r4, [r1, #0]
 80059c4:	06e0      	lsls	r0, r4, #27
 80059c6:	d512      	bpl.n	80059ee <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80059c8:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80059ca:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 80059ce:	2a05      	cmp	r2, #5
 80059d0:	d073      	beq.n	8005aba <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059d2:	680b      	ldr	r3, [r1, #0]
 80059d4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059d8:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059da:	f000 8090 	beq.w	8005afe <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059de:	0319      	lsls	r1, r3, #12
 80059e0:	f140 809b 	bpl.w	8005b1a <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 80059e4:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80059e8:	b10b      	cbz	r3, 80059ee <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 80059ea:	4640      	mov	r0, r8
 80059ec:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059ee:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80059f2:	b33b      	cbz	r3, 8005a44 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80059f4:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80059f8:	07da      	lsls	r2, r3, #31
 80059fa:	d51b      	bpl.n	8005a34 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 80059fc:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a00:	494c      	ldr	r1, [pc, #304]	; (8005b34 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a02:	2305      	movs	r3, #5
 8005a04:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005a08:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a0a:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 8005a0e:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a12:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	e002      	b.n	8005a1e <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a18:	6813      	ldr	r3, [r2, #0]
 8005a1a:	07db      	lsls	r3, r3, #31
 8005a1c:	d504      	bpl.n	8005a28 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 8005a1e:	9b01      	ldr	r3, [sp, #4]
 8005a20:	3301      	adds	r3, #1
 8005a22:	42ab      	cmp	r3, r5
 8005a24:	9301      	str	r3, [sp, #4]
 8005a26:	d9f7      	bls.n	8005a18 <HAL_DMA_IRQHandler+0xc0>
      hdma->State = HAL_DMA_STATE_READY;
 8005a28:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8005a2a:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8005a2c:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8005a30:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8005a34:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8005a38:	b123      	cbz	r3, 8005a44 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8005a3a:	4640      	mov	r0, r8
}
 8005a3c:	b002      	add	sp, #8
 8005a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8005a42:	4718      	bx	r3
}
 8005a44:	b002      	add	sp, #8
 8005a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a4a:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a4c:	680a      	ldr	r2, [r1, #0]
 8005a4e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a52:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a54:	d12a      	bne.n	8005aac <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a56:	05d7      	lsls	r7, r2, #23
 8005a58:	d403      	bmi.n	8005a62 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a5a:	680a      	ldr	r2, [r1, #0]
 8005a5c:	f022 0208 	bic.w	r2, r2, #8
 8005a60:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8005a62:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8005a66:	2a00      	cmp	r2, #0
 8005a68:	d0a5      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8005a6a:	4640      	mov	r0, r8
 8005a6c:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a6e:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8005a72:	e7a0      	b.n	80059b6 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005a74:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a76:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8005a7a:	f042 0204 	orr.w	r2, r2, #4
 8005a7e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8005a82:	e78f      	b.n	80059a4 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005a84:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a86:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8005a8a:	f042 0202 	orr.w	r2, r2, #2
 8005a8e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8005a92:	e77e      	b.n	8005992 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005a94:	680f      	ldr	r7, [r1, #0]
 8005a96:	f027 0704 	bic.w	r7, r7, #4
 8005a9a:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005a9c:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a9e:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8005aa2:	f042 0201 	orr.w	r2, r2, #1
 8005aa6:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8005aaa:	e769      	b.n	8005980 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005aac:	0312      	lsls	r2, r2, #12
 8005aae:	d5d8      	bpl.n	8005a62 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ab0:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8005ab4:	2a00      	cmp	r2, #0
 8005ab6:	d1d8      	bne.n	8005a6a <HAL_DMA_IRQHandler+0x112>
 8005ab8:	e77d      	b.n	80059b6 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005aba:	680a      	ldr	r2, [r1, #0]
 8005abc:	f022 0216 	bic.w	r2, r2, #22
 8005ac0:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ac2:	694a      	ldr	r2, [r1, #20]
 8005ac4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ac8:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005aca:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8005ace:	b352      	cbz	r2, 8005b26 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ad0:	680a      	ldr	r2, [r1, #0]
 8005ad2:	f022 0208 	bic.w	r2, r2, #8
 8005ad6:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ad8:	223f      	movs	r2, #63	; 0x3f
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8005ade:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ae2:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8005ae4:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 8005ae6:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8005ae8:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8005aec:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8005af0:	2900      	cmp	r1, #0
 8005af2:	d0a7      	beq.n	8005a44 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8005af4:	4640      	mov	r0, r8
}
 8005af6:	b002      	add	sp, #8
 8005af8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8005afc:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005afe:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8005b02:	f47f af6f 	bne.w	80059e4 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b06:	680a      	ldr	r2, [r1, #0]
 8005b08:	f022 0210 	bic.w	r2, r2, #16
 8005b0c:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8005b14:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 8005b18:	e764      	b.n	80059e4 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 8005b1a:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f47f af63 	bne.w	80059ea <HAL_DMA_IRQHandler+0x92>
 8005b24:	e763      	b.n	80059ee <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b26:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8005b2a:	2a00      	cmp	r2, #0
 8005b2c:	d1d0      	bne.n	8005ad0 <HAL_DMA_IRQHandler+0x178>
 8005b2e:	e7d3      	b.n	8005ad8 <HAL_DMA_IRQHandler+0x180>
 8005b30:	20008f88 	.word	0x20008f88
 8005b34:	1b4e81b5 	.word	0x1b4e81b5

08005b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b40:	4e70      	ldr	r6, [pc, #448]	; (8005d04 <HAL_GPIO_Init+0x1cc>)
{
 8005b42:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b44:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 8005b46:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b4a:	4689      	mov	r9, r1
 8005b4c:	e004      	b.n	8005b58 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b4e:	3301      	adds	r3, #1
 8005b50:	2b10      	cmp	r3, #16
 8005b52:	f102 0202 	add.w	r2, r2, #2
 8005b56:	d078      	beq.n	8005c4a <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 8005b58:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b5c:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8005b60:	43a1      	bics	r1, r4
 8005b62:	d1f4      	bne.n	8005b4e <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b64:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8005b68:	f00c 0103 	and.w	r1, ip, #3
 8005b6c:	1e4d      	subs	r5, r1, #1
 8005b6e:	2d01      	cmp	r5, #1
 8005b70:	d96e      	bls.n	8005c50 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b72:	2903      	cmp	r1, #3
 8005b74:	f040 80ae 	bne.w	8005cd4 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b78:	4091      	lsls	r1, r2
 8005b7a:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8005b7c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b7e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b80:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b82:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8005b86:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b88:	d0e1      	beq.n	8005b4e <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b8a:	4d5f      	ldr	r5, [pc, #380]	; (8005d08 <HAL_GPIO_Init+0x1d0>)
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	9103      	str	r1, [sp, #12]
 8005b90:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8005b92:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8005b96:	6469      	str	r1, [r5, #68]	; 0x44
 8005b98:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8005b9a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8005b9e:	9103      	str	r1, [sp, #12]
 8005ba0:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005ba2:	f023 0103 	bic.w	r1, r3, #3
 8005ba6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005baa:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005bae:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8005bb2:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005bb6:	00bf      	lsls	r7, r7, #2
 8005bb8:	250f      	movs	r5, #15
 8005bba:	40bd      	lsls	r5, r7
 8005bbc:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005bc0:	4d52      	ldr	r5, [pc, #328]	; (8005d0c <HAL_GPIO_Init+0x1d4>)
 8005bc2:	42a8      	cmp	r0, r5
 8005bc4:	d017      	beq.n	8005bf6 <HAL_GPIO_Init+0xbe>
 8005bc6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bca:	42a8      	cmp	r0, r5
 8005bcc:	f000 8086 	beq.w	8005cdc <HAL_GPIO_Init+0x1a4>
 8005bd0:	4d4f      	ldr	r5, [pc, #316]	; (8005d10 <HAL_GPIO_Init+0x1d8>)
 8005bd2:	42a8      	cmp	r0, r5
 8005bd4:	f000 8087 	beq.w	8005ce6 <HAL_GPIO_Init+0x1ae>
 8005bd8:	4d4e      	ldr	r5, [pc, #312]	; (8005d14 <HAL_GPIO_Init+0x1dc>)
 8005bda:	42a8      	cmp	r0, r5
 8005bdc:	f000 808a 	beq.w	8005cf4 <HAL_GPIO_Init+0x1bc>
 8005be0:	4d4d      	ldr	r5, [pc, #308]	; (8005d18 <HAL_GPIO_Init+0x1e0>)
 8005be2:	42a8      	cmp	r0, r5
 8005be4:	bf0c      	ite	eq
 8005be6:	f04f 0e04 	moveq.w	lr, #4
 8005bea:	f04f 0e07 	movne.w	lr, #7
 8005bee:	fa0e f707 	lsl.w	r7, lr, r7
 8005bf2:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bf6:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8005bfa:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8005bfc:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c00:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8005c04:	bf0c      	ite	eq
 8005c06:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8005c08:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8005c0c:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8005c0e:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c10:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8005c14:	bf0c      	ite	eq
 8005c16:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8005c18:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8005c1c:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8005c1e:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c20:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8005c24:	bf0c      	ite	eq
 8005c26:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8005c28:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8005c2c:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c2e:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c30:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c34:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8005c38:	bf0c      	ite	eq
 8005c3a:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8005c3c:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c40:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8005c42:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c44:	f102 0202 	add.w	r2, r2, #2
 8005c48:	d186      	bne.n	8005b58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005c4a:	b005      	add	sp, #20
 8005c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c50:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8005c54:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c56:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c5a:	2503      	movs	r5, #3
 8005c5c:	fa05 fe02 	lsl.w	lr, r5, r2
 8005c60:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c64:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8005c68:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005c6a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c6c:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c70:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c74:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8005c78:	409f      	lsls	r7, r3
 8005c7a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8005c7e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8005c80:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c82:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c86:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8005c8a:	4097      	lsls	r7, r2
 8005c8c:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c90:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8005c92:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c94:	fa01 f102 	lsl.w	r1, r1, r2
 8005c98:	f47f af70 	bne.w	8005b7c <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 8005c9c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8005ca0:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ca4:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8005ca8:	f8de 7020 	ldr.w	r7, [lr, #32]
 8005cac:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005cae:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cb2:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005cb6:	fa07 f708 	lsl.w	r7, r7, r8
 8005cba:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cbc:	270f      	movs	r7, #15
 8005cbe:	fa07 f808 	lsl.w	r8, r7, r8
 8005cc2:	9f00      	ldr	r7, [sp, #0]
 8005cc4:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005cc8:	9f01      	ldr	r7, [sp, #4]
 8005cca:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8005cce:	f8ce 7020 	str.w	r7, [lr, #32]
 8005cd2:	e753      	b.n	8005b7c <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005cd4:	2503      	movs	r5, #3
 8005cd6:	4095      	lsls	r5, r2
 8005cd8:	43ed      	mvns	r5, r5
 8005cda:	e7d1      	b.n	8005c80 <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005cdc:	fa0a f707 	lsl.w	r7, sl, r7
 8005ce0:	ea48 0807 	orr.w	r8, r8, r7
 8005ce4:	e787      	b.n	8005bf6 <HAL_GPIO_Init+0xbe>
 8005ce6:	f04f 0e02 	mov.w	lr, #2
 8005cea:	fa0e f707 	lsl.w	r7, lr, r7
 8005cee:	ea48 0807 	orr.w	r8, r8, r7
 8005cf2:	e780      	b.n	8005bf6 <HAL_GPIO_Init+0xbe>
 8005cf4:	f04f 0e03 	mov.w	lr, #3
 8005cf8:	fa0e f707 	lsl.w	r7, lr, r7
 8005cfc:	ea48 0807 	orr.w	r8, r8, r7
 8005d00:	e779      	b.n	8005bf6 <HAL_GPIO_Init+0xbe>
 8005d02:	bf00      	nop
 8005d04:	40013c00 	.word	0x40013c00
 8005d08:	40023800 	.word	0x40023800
 8005d0c:	40020000 	.word	0x40020000
 8005d10:	40020800 	.word	0x40020800
 8005d14:	40020c00 	.word	0x40020c00
 8005d18:	40021000 	.word	0x40021000

08005d1c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d1c:	b902      	cbnz	r2, 8005d20 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d1e:	0409      	lsls	r1, r1, #16
 8005d20:	6181      	str	r1, [r0, #24]
  }
}
 8005d22:	4770      	bx	lr

08005d24 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005d24:	4a04      	ldr	r2, [pc, #16]	; (8005d38 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8005d26:	6951      	ldr	r1, [r2, #20]
 8005d28:	4201      	tst	r1, r0
 8005d2a:	d100      	bne.n	8005d2e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8005d2c:	4770      	bx	lr
{
 8005d2e:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d30:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d32:	f7fe fbe9 	bl	8004508 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d36:	bd08      	pop	{r3, pc}
 8005d38:	40013c00 	.word	0x40013c00

08005d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d40:	4681      	mov	r9, r0
 8005d42:	460e      	mov	r6, r1
 8005d44:	4617      	mov	r7, r2
 8005d46:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d48:	f8d9 5000 	ldr.w	r5, [r9]
 8005d4c:	e004      	b.n	8005d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x1c>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d4e:	696c      	ldr	r4, [r5, #20]
 8005d50:	0562      	lsls	r2, r4, #21
 8005d52:	d40a      	bmi.n	8005d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2e>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d54:	1c7b      	adds	r3, r7, #1
 8005d56:	d122      	bne.n	8005d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d58:	696c      	ldr	r4, [r5, #20]
 8005d5a:	ea26 0404 	bic.w	r4, r6, r4
 8005d5e:	b2a4      	uxth	r4, r4
 8005d60:	2c00      	cmp	r4, #0
 8005d62:	d1f4      	bne.n	8005d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x12>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8005d64:	4620      	mov	r0, r4
}
 8005d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d6a:	682b      	ldr	r3, [r5, #0]
 8005d6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d70:	602b      	str	r3, [r5, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d72:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d74:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d78:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d7a:	6169      	str	r1, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d7c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d80:	f889 303d 	strb.w	r3, [r9, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d84:	f889 203e 	strb.w	r2, [r9, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d88:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005d8c:	f889 203c 	strb.w	r2, [r9, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d90:	f043 0304 	orr.w	r3, r3, #4
 8005d94:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
      return HAL_ERROR;
 8005d98:	2001      	movs	r0, #1
}
 8005d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d9e:	f7fe ff0d 	bl	8004bbc <HAL_GetTick>
 8005da2:	eba0 0008 	sub.w	r0, r0, r8
 8005da6:	42b8      	cmp	r0, r7
 8005da8:	d801      	bhi.n	8005dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
 8005daa:	2f00      	cmp	r7, #0
 8005dac:	d1cc      	bne.n	8005d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005dae:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8005db0:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005db2:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005db6:	f889 303d 	strb.w	r3, [r9, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dba:	f889 203e 	strb.w	r2, [r9, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dbe:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005dc2:	f889 203c 	strb.w	r2, [r9, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dc6:	f043 0320 	orr.w	r3, r3, #32
 8005dca:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
        return HAL_ERROR;
 8005dce:	2001      	movs	r0, #1
 8005dd0:	e7c9      	b.n	8005d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2a>
 8005dd2:	bf00      	nop

08005dd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	460d      	mov	r5, r1
 8005dda:	4617      	mov	r7, r2

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ddc:	e008      	b.n	8005df0 <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005dde:	6962      	ldr	r2, [r4, #20]
 8005de0:	06d2      	lsls	r2, r2, #27
 8005de2:	d41b      	bmi.n	8005e1c <I2C_WaitOnRXNEFlagUntilTimeout+0x48>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de4:	f7fe feea 	bl	8004bbc <HAL_GetTick>
 8005de8:	1bc0      	subs	r0, r0, r7
 8005dea:	42a8      	cmp	r0, r5
 8005dec:	d807      	bhi.n	8005dfe <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 8005dee:	b135      	cbz	r5, 8005dfe <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005df0:	6834      	ldr	r4, [r6, #0]
 8005df2:	6963      	ldr	r3, [r4, #20]
 8005df4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005df8:	d0f1      	beq.n	8005dde <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8005dfa:	2000      	movs	r0, #0
}
 8005dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dfe:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e00:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e02:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e04:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e08:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e0c:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005e0e:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e12:	f043 0320 	orr.w	r3, r3, #32
 8005e16:	6433      	str	r3, [r6, #64]	; 0x40
      return HAL_ERROR;
 8005e18:	2001      	movs	r0, #1
}
 8005e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e1c:	f06f 0110 	mvn.w	r1, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e20:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e22:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e24:	6333      	str	r3, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e26:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e2a:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e2e:	6c32      	ldr	r2, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005e30:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e34:	6432      	str	r2, [r6, #64]	; 0x40
      return HAL_ERROR;
 8005e36:	2001      	movs	r0, #1
}
 8005e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e3a:	bf00      	nop

08005e3c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8005e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3e:	4605      	mov	r5, r0
 8005e40:	460e      	mov	r6, r1
 8005e42:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e44:	682c      	ldr	r4, [r5, #0]
 8005e46:	e001      	b.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0x10>
    if (Timeout != HAL_MAX_DELAY)
 8005e48:	1c73      	adds	r3, r6, #1
 8005e4a:	d119      	bne.n	8005e80 <I2C_WaitOnBTFFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e4c:	6963      	ldr	r3, [r4, #20]
 8005e4e:	f013 0304 	ands.w	r3, r3, #4
 8005e52:	d113      	bne.n	8005e7c <I2C_WaitOnBTFFlagUntilTimeout+0x40>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e54:	6960      	ldr	r0, [r4, #20]
 8005e56:	0542      	lsls	r2, r0, #21
 8005e58:	d5f6      	bpl.n	8005e48 <I2C_WaitOnBTFFlagUntilTimeout+0xc>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e5a:	f46f 6180 	mvn.w	r1, #1024	; 0x400

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e5e:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e60:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e62:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e64:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e68:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e6c:	6c2a      	ldr	r2, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e6e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e72:	f042 0204 	orr.w	r2, r2, #4
 8005e76:	642a      	str	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 8005e78:	2001      	movs	r0, #1
}
 8005e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8005e7c:	2000      	movs	r0, #0
}
 8005e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e80:	f7fe fe9c 	bl	8004bbc <HAL_GetTick>
 8005e84:	1bc0      	subs	r0, r0, r7
 8005e86:	42b0      	cmp	r0, r6
 8005e88:	d801      	bhi.n	8005e8e <I2C_WaitOnBTFFlagUntilTimeout+0x52>
 8005e8a:	2e00      	cmp	r6, #0
 8005e8c:	d1da      	bne.n	8005e44 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e8e:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e90:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e92:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e94:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e98:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e9c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005e9e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ea2:	f043 0320 	orr.w	r3, r3, #32
 8005ea6:	642b      	str	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005ea8:	2001      	movs	r0, #1
}
 8005eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005eac <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	4605      	mov	r5, r0
 8005eb0:	460e      	mov	r6, r1
 8005eb2:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005eb4:	682c      	ldr	r4, [r5, #0]
 8005eb6:	e001      	b.n	8005ebc <I2C_WaitOnTXEFlagUntilTimeout+0x10>
    if (Timeout != HAL_MAX_DELAY)
 8005eb8:	1c73      	adds	r3, r6, #1
 8005eba:	d119      	bne.n	8005ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ebc:	6963      	ldr	r3, [r4, #20]
 8005ebe:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8005ec2:	d113      	bne.n	8005eec <I2C_WaitOnTXEFlagUntilTimeout+0x40>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ec4:	6960      	ldr	r0, [r4, #20]
 8005ec6:	0542      	lsls	r2, r0, #21
 8005ec8:	d5f6      	bpl.n	8005eb8 <I2C_WaitOnTXEFlagUntilTimeout+0xc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eca:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ece:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ed0:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ed2:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ed4:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed8:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005edc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8005ede:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ee2:	f042 0204 	orr.w	r2, r2, #4
 8005ee6:	642a      	str	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 8005ee8:	2001      	movs	r0, #1
}
 8005eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8005eec:	2000      	movs	r0, #0
}
 8005eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ef0:	f7fe fe64 	bl	8004bbc <HAL_GetTick>
 8005ef4:	1bc0      	subs	r0, r0, r7
 8005ef6:	42b0      	cmp	r0, r6
 8005ef8:	d801      	bhi.n	8005efe <I2C_WaitOnTXEFlagUntilTimeout+0x52>
 8005efa:	2e00      	cmp	r6, #0
 8005efc:	d1da      	bne.n	8005eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005efe:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f00:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f02:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f04:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f08:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f0c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005f0e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f12:	f043 0320 	orr.w	r3, r3, #32
 8005f16:	642b      	str	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005f18:	2001      	movs	r0, #1
}
 8005f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f1c <I2C_RequestMemoryWrite>:
{
 8005f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f20:	6805      	ldr	r5, [r0, #0]
{
 8005f22:	469b      	mov	fp, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f24:	682b      	ldr	r3, [r5, #0]
{
 8005f26:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8005f2c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005f2e:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f32:	602b      	str	r3, [r5, #0]
{
 8005f34:	4607      	mov	r7, r0
 8005f36:	4688      	mov	r8, r1
 8005f38:	4691      	mov	r9, r2
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f3a:	e001      	b.n	8005f40 <I2C_RequestMemoryWrite+0x24>
    if (Timeout != HAL_MAX_DELAY)
 8005f3c:	1c71      	adds	r1, r6, #1
 8005f3e:	d110      	bne.n	8005f62 <I2C_RequestMemoryWrite+0x46>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f40:	696c      	ldr	r4, [r5, #20]
 8005f42:	07e3      	lsls	r3, r4, #31
 8005f44:	d5fa      	bpl.n	8005f3c <I2C_RequestMemoryWrite+0x20>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f46:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8005f4a:	6129      	str	r1, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f4c:	4653      	mov	r3, sl
 8005f4e:	492d      	ldr	r1, [pc, #180]	; (8006004 <I2C_RequestMemoryWrite+0xe8>)
 8005f50:	4632      	mov	r2, r6
 8005f52:	4638      	mov	r0, r7
 8005f54:	f7ff fef2 	bl	8005d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f58:	b160      	cbz	r0, 8005f74 <I2C_RequestMemoryWrite+0x58>
    return HAL_ERROR;
 8005f5a:	2001      	movs	r0, #1
}
 8005f5c:	b003      	add	sp, #12
 8005f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f62:	f7fe fe2b 	bl	8004bbc <HAL_GetTick>
 8005f66:	eba0 000a 	sub.w	r0, r0, sl
 8005f6a:	4286      	cmp	r6, r0
 8005f6c:	d319      	bcc.n	8005fa2 <I2C_RequestMemoryWrite+0x86>
 8005f6e:	b1c6      	cbz	r6, 8005fa2 <I2C_RequestMemoryWrite+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f70:	683d      	ldr	r5, [r7, #0]
 8005f72:	e7e5      	b.n	8005f40 <I2C_RequestMemoryWrite+0x24>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	9001      	str	r0, [sp, #4]
 8005f78:	6959      	ldr	r1, [r3, #20]
 8005f7a:	9101      	str	r1, [sp, #4]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	9301      	str	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f80:	4652      	mov	r2, sl
 8005f82:	4631      	mov	r1, r6
 8005f84:	4638      	mov	r0, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f86:	9b01      	ldr	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f88:	f7ff ff90 	bl	8005eac <I2C_WaitOnTXEFlagUntilTimeout>
 8005f8c:	bb78      	cbnz	r0, 8005fee <I2C_RequestMemoryWrite+0xd2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f8e:	f1bb 0f01 	cmp.w	fp, #1
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f92:	683b      	ldr	r3, [r7, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f94:	d11d      	bne.n	8005fd2 <I2C_RequestMemoryWrite+0xb6>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f96:	fa5f f289 	uxtb.w	r2, r9
 8005f9a:	611a      	str	r2, [r3, #16]
}
 8005f9c:	b003      	add	sp, #12
 8005f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005fa2:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005fa4:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005fa6:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005fa8:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fb2:	6839      	ldr	r1, [r7, #0]
        __HAL_UNLOCK(hi2c);
 8005fb4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fb8:	f042 0220 	orr.w	r2, r2, #32
 8005fbc:	643a      	str	r2, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fbe:	680b      	ldr	r3, [r1, #0]
 8005fc0:	05da      	lsls	r2, r3, #23
 8005fc2:	d502      	bpl.n	8005fca <I2C_RequestMemoryWrite+0xae>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fc8:	643b      	str	r3, [r7, #64]	; 0x40
    return HAL_TIMEOUT;
 8005fca:	2003      	movs	r0, #3
}
 8005fcc:	b003      	add	sp, #12
 8005fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fd2:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8005fd6:	6118      	str	r0, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fd8:	4652      	mov	r2, sl
 8005fda:	4631      	mov	r1, r6
 8005fdc:	4638      	mov	r0, r7
 8005fde:	f7ff ff65 	bl	8005eac <I2C_WaitOnTXEFlagUntilTimeout>
 8005fe2:	b920      	cbnz	r0, 8005fee <I2C_RequestMemoryWrite+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	fa5f f389 	uxtb.w	r3, r9
 8005fea:	6113      	str	r3, [r2, #16]
 8005fec:	e7b6      	b.n	8005f5c <I2C_RequestMemoryWrite+0x40>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d1b2      	bne.n	8005f5a <I2C_RequestMemoryWrite+0x3e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	6813      	ldr	r3, [r2, #0]
 8005ff8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8005ffc:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	e7ac      	b.n	8005f5c <I2C_RequestMemoryWrite+0x40>
 8006002:	bf00      	nop
 8006004:	00010002 	.word	0x00010002

08006008 <I2C_RequestMemoryRead>:
{
 8006008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800600c:	6805      	ldr	r5, [r0, #0]
{
 800600e:	469b      	mov	fp, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006016:	602b      	str	r3, [r5, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006018:	682b      	ldr	r3, [r5, #0]
{
 800601a:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800601c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8006020:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006022:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006026:	602b      	str	r3, [r5, #0]
{
 8006028:	4607      	mov	r7, r0
 800602a:	4688      	mov	r8, r1
 800602c:	4692      	mov	sl, r2
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800602e:	e001      	b.n	8006034 <I2C_RequestMemoryRead+0x2c>
    if (Timeout != HAL_MAX_DELAY)
 8006030:	1c74      	adds	r4, r6, #1
 8006032:	d112      	bne.n	800605a <I2C_RequestMemoryRead+0x52>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006034:	696c      	ldr	r4, [r5, #20]
 8006036:	07e0      	lsls	r0, r4, #31
 8006038:	d5fa      	bpl.n	8006030 <I2C_RequestMemoryRead+0x28>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800603a:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 800603e:	612b      	str	r3, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006040:	4943      	ldr	r1, [pc, #268]	; (8006150 <I2C_RequestMemoryRead+0x148>)
 8006042:	464b      	mov	r3, r9
 8006044:	4632      	mov	r2, r6
 8006046:	4638      	mov	r0, r7
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006048:	fa5f f888 	uxtb.w	r8, r8
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800604c:	f7ff fe76 	bl	8005d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006050:	b168      	cbz	r0, 800606e <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 8006052:	2001      	movs	r0, #1
}
 8006054:	b003      	add	sp, #12
 8006056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800605a:	f7fe fdaf 	bl	8004bbc <HAL_GetTick>
 800605e:	eba0 0009 	sub.w	r0, r0, r9
 8006062:	4286      	cmp	r6, r0
 8006064:	d337      	bcc.n	80060d6 <I2C_RequestMemoryRead+0xce>
 8006066:	2e00      	cmp	r6, #0
 8006068:	d035      	beq.n	80060d6 <I2C_RequestMemoryRead+0xce>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800606a:	683d      	ldr	r5, [r7, #0]
 800606c:	e7e2      	b.n	8006034 <I2C_RequestMemoryRead+0x2c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	9001      	str	r0, [sp, #4]
 8006072:	6959      	ldr	r1, [r3, #20]
 8006074:	9101      	str	r1, [sp, #4]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	9301      	str	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800607a:	464a      	mov	r2, r9
 800607c:	4631      	mov	r1, r6
 800607e:	4638      	mov	r0, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006080:	9b01      	ldr	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006082:	f7ff ff13 	bl	8005eac <I2C_WaitOnTXEFlagUntilTimeout>
 8006086:	2800      	cmp	r0, #0
 8006088:	d13d      	bne.n	8006106 <I2C_RequestMemoryRead+0xfe>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800608a:	f1bb 0f01 	cmp.w	fp, #1
 800608e:	d144      	bne.n	800611a <I2C_RequestMemoryRead+0x112>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	fa5f f28a 	uxtb.w	r2, sl
 8006096:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006098:	464a      	mov	r2, r9
 800609a:	4631      	mov	r1, r6
 800609c:	4638      	mov	r0, r7
 800609e:	f7ff ff05 	bl	8005eac <I2C_WaitOnTXEFlagUntilTimeout>
 80060a2:	2800      	cmp	r0, #0
 80060a4:	d12f      	bne.n	8006106 <I2C_RequestMemoryRead+0xfe>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	6813      	ldr	r3, [r2, #0]
 80060aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ae:	6013      	str	r3, [r2, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060b0:	e001      	b.n	80060b6 <I2C_RequestMemoryRead+0xae>
    if (Timeout != HAL_MAX_DELAY)
 80060b2:	1c71      	adds	r1, r6, #1
 80060b4:	d141      	bne.n	800613a <I2C_RequestMemoryRead+0x132>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060b6:	6953      	ldr	r3, [r2, #20]
 80060b8:	07db      	lsls	r3, r3, #31
 80060ba:	d5fa      	bpl.n	80060b2 <I2C_RequestMemoryRead+0xaa>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80060bc:	f048 0301 	orr.w	r3, r8, #1
 80060c0:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060c2:	4923      	ldr	r1, [pc, #140]	; (8006150 <I2C_RequestMemoryRead+0x148>)
 80060c4:	464b      	mov	r3, r9
 80060c6:	4632      	mov	r2, r6
 80060c8:	4638      	mov	r0, r7
 80060ca:	f7ff fe37 	bl	8005d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 80060ce:	3800      	subs	r0, #0
 80060d0:	bf18      	it	ne
 80060d2:	2001      	movne	r0, #1
 80060d4:	e7be      	b.n	8006054 <I2C_RequestMemoryRead+0x4c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060d6:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80060d8:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060da:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80060dc:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060e6:	6839      	ldr	r1, [r7, #0]
        __HAL_UNLOCK(hi2c);
 80060e8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060ec:	f042 0220 	orr.w	r2, r2, #32
 80060f0:	643a      	str	r2, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060f2:	680b      	ldr	r3, [r1, #0]
 80060f4:	05da      	lsls	r2, r3, #23
 80060f6:	d502      	bpl.n	80060fe <I2C_RequestMemoryRead+0xf6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060fc:	643b      	str	r3, [r7, #64]	; 0x40
    return HAL_TIMEOUT;
 80060fe:	2003      	movs	r0, #3
}
 8006100:	b003      	add	sp, #12
 8006102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006108:	2b04      	cmp	r3, #4
 800610a:	d1a2      	bne.n	8006052 <I2C_RequestMemoryRead+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	6813      	ldr	r3, [r2, #0]
 8006110:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    return HAL_ERROR;
 8006114:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	e79c      	b.n	8006054 <I2C_RequestMemoryRead+0x4c>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8006120:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006122:	4631      	mov	r1, r6
 8006124:	464a      	mov	r2, r9
 8006126:	4638      	mov	r0, r7
 8006128:	f7ff fec0 	bl	8005eac <I2C_WaitOnTXEFlagUntilTimeout>
 800612c:	2800      	cmp	r0, #0
 800612e:	d1ea      	bne.n	8006106 <I2C_RequestMemoryRead+0xfe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	fa5f f38a 	uxtb.w	r3, sl
 8006136:	6113      	str	r3, [r2, #16]
 8006138:	e7ae      	b.n	8006098 <I2C_RequestMemoryRead+0x90>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800613a:	f7fe fd3f 	bl	8004bbc <HAL_GetTick>
 800613e:	eba0 0009 	sub.w	r0, r0, r9
 8006142:	4286      	cmp	r6, r0
 8006144:	d3c7      	bcc.n	80060d6 <I2C_RequestMemoryRead+0xce>
 8006146:	2e00      	cmp	r6, #0
 8006148:	d0c5      	beq.n	80060d6 <I2C_RequestMemoryRead+0xce>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	e7b3      	b.n	80060b6 <I2C_RequestMemoryRead+0xae>
 800614e:	bf00      	nop
 8006150:	00010002 	.word	0x00010002

08006154 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006154:	2800      	cmp	r0, #0
 8006156:	f000 80b9 	beq.w	80062cc <HAL_I2C_Init+0x178>
{
 800615a:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800615c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006160:	4604      	mov	r4, r0
 8006162:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 8098 	beq.w	800629c <HAL_I2C_Init+0x148>
  __HAL_I2C_DISABLE(hi2c);
 800616c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800616e:	2224      	movs	r2, #36	; 0x24
 8006170:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	f022 0201 	bic.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006182:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800618a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800618c:	f000 fd84 	bl	8006c98 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006190:	6863      	ldr	r3, [r4, #4]
 8006192:	494f      	ldr	r1, [pc, #316]	; (80062d0 <HAL_I2C_Init+0x17c>)
 8006194:	428b      	cmp	r3, r1
 8006196:	d84f      	bhi.n	8006238 <HAL_I2C_Init+0xe4>
 8006198:	4a4e      	ldr	r2, [pc, #312]	; (80062d4 <HAL_I2C_Init+0x180>)
 800619a:	4290      	cmp	r0, r2
 800619c:	d97c      	bls.n	8006298 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 800619e:	4d4e      	ldr	r5, [pc, #312]	; (80062d8 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061a0:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 80061a2:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061a6:	1e43      	subs	r3, r0, #1
 80061a8:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061ac:	6822      	ldr	r2, [r4, #0]
 80061ae:	6850      	ldr	r0, [r2, #4]
 80061b0:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80061b4:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 80061b8:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80061ba:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061bc:	f101 0c01 	add.w	ip, r1, #1
 80061c0:	6a11      	ldr	r1, [r2, #32]
 80061c2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80061c6:	ea41 010c 	orr.w	r1, r1, ip
 80061ca:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061cc:	69d1      	ldr	r1, [r2, #28]
 80061ce:	f640 7efc 	movw	lr, #4092	; 0xffc
 80061d2:	3301      	adds	r3, #1
 80061d4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80061d8:	ea13 0f0e 	tst.w	r3, lr
 80061dc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80061e0:	d161      	bne.n	80062a6 <HAL_I2C_Init+0x152>
 80061e2:	2304      	movs	r3, #4
 80061e4:	430b      	orrs	r3, r1
 80061e6:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061e8:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80061ec:	6811      	ldr	r1, [r2, #0]
 80061ee:	4303      	orrs	r3, r0
 80061f0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80061f4:	430b      	orrs	r3, r1
 80061f6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80061f8:	6891      	ldr	r1, [r2, #8]
 80061fa:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80061fe:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8006202:	4303      	orrs	r3, r0
 8006204:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006208:	430b      	orrs	r3, r1
 800620a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800620c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8006210:	68d1      	ldr	r1, [r2, #12]
 8006212:	4303      	orrs	r3, r0
 8006214:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006218:	430b      	orrs	r3, r1
 800621a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800621c:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800621e:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8006220:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8006224:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 8006226:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006228:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800622a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800622e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006230:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 8006234:	4618      	mov	r0, r3
}
 8006236:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006238:	4a28      	ldr	r2, [pc, #160]	; (80062dc <HAL_I2C_Init+0x188>)
 800623a:	4290      	cmp	r0, r2
 800623c:	d92c      	bls.n	8006298 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 800623e:	4d26      	ldr	r5, [pc, #152]	; (80062d8 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006240:	4e27      	ldr	r6, [pc, #156]	; (80062e0 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8006242:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006246:	6822      	ldr	r2, [r4, #0]
 8006248:	6855      	ldr	r5, [r2, #4]
 800624a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800624e:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8006252:	6055      	str	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8006254:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006258:	f44f 7596 	mov.w	r5, #300	; 0x12c
 800625c:	fb05 f101 	mul.w	r1, r5, r1
 8006260:	fba6 5101 	umull	r5, r1, r6, r1
 8006264:	6a15      	ldr	r5, [r2, #32]
 8006266:	0989      	lsrs	r1, r1, #6
 8006268:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800626c:	3101      	adds	r1, #1
 800626e:	4329      	orrs	r1, r5
 8006270:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006272:	69d1      	ldr	r1, [r2, #28]
 8006274:	68a5      	ldr	r5, [r4, #8]
 8006276:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800627a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800627e:	b9ad      	cbnz	r5, 80062ac <HAL_I2C_Init+0x158>
 8006280:	3801      	subs	r0, #1
 8006282:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006286:	fbb0 f3f3 	udiv	r3, r0, r3
 800628a:	3301      	adds	r3, #1
 800628c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006290:	b1d3      	cbz	r3, 80062c8 <HAL_I2C_Init+0x174>
 8006292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006296:	e7a5      	b.n	80061e4 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8006298:	2001      	movs	r0, #1
}
 800629a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800629c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80062a0:	f7fe f9cc 	bl	800463c <HAL_I2C_MspInit>
 80062a4:	e762      	b.n	800616c <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80062a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062aa:	e79b      	b.n	80061e4 <HAL_I2C_Init+0x90>
 80062ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80062b0:	3801      	subs	r0, #1
 80062b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80062b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80062ba:	3301      	adds	r3, #1
 80062bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062c0:	b113      	cbz	r3, 80062c8 <HAL_I2C_Init+0x174>
 80062c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062c6:	e78d      	b.n	80061e4 <HAL_I2C_Init+0x90>
 80062c8:	2301      	movs	r3, #1
 80062ca:	e78b      	b.n	80061e4 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80062cc:	2001      	movs	r0, #1
}
 80062ce:	4770      	bx	lr
 80062d0:	000186a0 	.word	0x000186a0
 80062d4:	001e847f 	.word	0x001e847f
 80062d8:	431bde83 	.word	0x431bde83
 80062dc:	003d08ff 	.word	0x003d08ff
 80062e0:	10624dd3 	.word	0x10624dd3

080062e4 <HAL_I2C_Mem_Write>:
{
 80062e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e8:	4604      	mov	r4, r0
 80062ea:	b083      	sub	sp, #12
 80062ec:	4699      	mov	r9, r3
 80062ee:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80062f2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80062f4:	460f      	mov	r7, r1
 80062f6:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80062f8:	f7fe fc60 	bl	8004bbc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80062fc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006300:	2b20      	cmp	r3, #32
 8006302:	d003      	beq.n	800630c <HAL_I2C_Mem_Write+0x28>
      return HAL_BUSY;
 8006304:	2002      	movs	r0, #2
}
 8006306:	b003      	add	sp, #12
 8006308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800630c:	4605      	mov	r5, r0
 800630e:	e004      	b.n	800631a <HAL_I2C_Mem_Write+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006310:	f7fe fc54 	bl	8004bbc <HAL_GetTick>
 8006314:	1b40      	subs	r0, r0, r5
 8006316:	2819      	cmp	r0, #25
 8006318:	d877      	bhi.n	800640a <HAL_I2C_Mem_Write+0x126>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800631a:	6820      	ldr	r0, [r4, #0]
 800631c:	6983      	ldr	r3, [r0, #24]
 800631e:	ea6f 0c03 	mvn.w	ip, r3
 8006322:	f01c 0b02 	ands.w	fp, ip, #2
 8006326:	d0f3      	beq.n	8006310 <HAL_I2C_Mem_Write+0x2c>
    __HAL_LOCK(hi2c);
 8006328:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800632c:	2b01      	cmp	r3, #1
 800632e:	d0e9      	beq.n	8006304 <HAL_I2C_Mem_Write+0x20>
 8006330:	2301      	movs	r3, #1
 8006332:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006336:	6803      	ldr	r3, [r0, #0]
 8006338:	07db      	lsls	r3, r3, #31
 800633a:	d561      	bpl.n	8006400 <HAL_I2C_Mem_Write+0x11c>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800633c:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800633e:	6807      	ldr	r7, [r0, #0]
 8006340:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8006344:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8006346:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006348:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800634a:	2021      	movs	r0, #33	; 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800634c:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006350:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006354:	2040      	movs	r0, #64	; 0x40
 8006356:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800635a:	2000      	movs	r0, #0
 800635c:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800635e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006362:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8006364:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006366:	4835      	ldr	r0, [pc, #212]	; (800643c <HAL_I2C_Mem_Write+0x158>)
 8006368:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800636a:	464b      	mov	r3, r9
 800636c:	4642      	mov	r2, r8
 800636e:	4620      	mov	r0, r4
 8006370:	f7ff fdd4 	bl	8005f1c <I2C_RequestMemoryWrite>
 8006374:	2800      	cmp	r0, #0
 8006376:	d13f      	bne.n	80063f8 <HAL_I2C_Mem_Write+0x114>
    while (hi2c->XferSize > 0U)
 8006378:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800637a:	b353      	cbz	r3, 80063d2 <HAL_I2C_Mem_Write+0xee>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800637c:	462a      	mov	r2, r5
 800637e:	4631      	mov	r1, r6
 8006380:	4620      	mov	r0, r4
 8006382:	f7ff fd93 	bl	8005eac <I2C_WaitOnTXEFlagUntilTimeout>
 8006386:	2800      	cmp	r0, #0
 8006388:	d14d      	bne.n	8006426 <HAL_I2C_Mem_Write+0x142>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800638a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800638c:	6820      	ldr	r0, [r4, #0]
      hi2c->XferSize--;
 800638e:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006392:	4639      	mov	r1, r7
      hi2c->XferSize--;
 8006394:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800639c:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 800639e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80063a0:	3b01      	subs	r3, #1
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063a6:	f8d0 e014 	ldr.w	lr, [r0, #20]
      hi2c->pBuffPtr++;
 80063aa:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80063ac:	b293      	uxth	r3, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063ae:	f01e 0f04 	tst.w	lr, #4
      hi2c->XferSize--;
 80063b2:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063b4:	d0e1      	beq.n	800637a <HAL_I2C_Mem_Write+0x96>
 80063b6:	b163      	cbz	r3, 80063d2 <HAL_I2C_Mem_Write+0xee>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063b8:	787a      	ldrb	r2, [r7, #1]
 80063ba:	6102      	str	r2, [r0, #16]
        hi2c->XferCount--;
 80063bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80063be:	f1ac 0302 	sub.w	r3, ip, #2
        hi2c->XferCount--;
 80063c2:	3a01      	subs	r2, #1
        hi2c->XferSize--;
 80063c4:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 80063c6:	3702      	adds	r7, #2
        hi2c->XferCount--;
 80063c8:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 80063ca:	6267      	str	r7, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80063cc:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80063ce:	8562      	strh	r2, [r4, #42]	; 0x2a
 80063d0:	e7d3      	b.n	800637a <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063d2:	462a      	mov	r2, r5
 80063d4:	4631      	mov	r1, r6
 80063d6:	4620      	mov	r0, r4
 80063d8:	f7ff fd30 	bl	8005e3c <I2C_WaitOnBTFFlagUntilTimeout>
 80063dc:	bb18      	cbnz	r0, 8006426 <HAL_I2C_Mem_Write+0x142>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063de:	6822      	ldr	r2, [r4, #0]
 80063e0:	6813      	ldr	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80063e2:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063e8:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80063ea:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80063ee:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80063f6:	e786      	b.n	8006306 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 80063f8:	2001      	movs	r0, #1
}
 80063fa:	b003      	add	sp, #12
 80063fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_I2C_ENABLE(hi2c);
 8006400:	6803      	ldr	r3, [r0, #0]
 8006402:	f043 0301 	orr.w	r3, r3, #1
 8006406:	6003      	str	r3, [r0, #0]
 8006408:	e798      	b.n	800633c <HAL_I2C_Mem_Write+0x58>
        hi2c->State             = HAL_I2C_STATE_READY;
 800640a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800640c:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006410:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006414:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006418:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800641a:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800641e:	f043 0320 	orr.w	r3, r3, #32
 8006422:	6423      	str	r3, [r4, #64]	; 0x40
 8006424:	e76e      	b.n	8006304 <HAL_I2C_Mem_Write+0x20>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006426:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006428:	2b04      	cmp	r3, #4
 800642a:	d1e5      	bne.n	80063f8 <HAL_I2C_Mem_Write+0x114>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800642c:	6822      	ldr	r2, [r4, #0]
 800642e:	6813      	ldr	r3, [r2, #0]
 8006430:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8006434:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	e765      	b.n	8006306 <HAL_I2C_Mem_Write+0x22>
 800643a:	bf00      	nop
 800643c:	ffff0000 	.word	0xffff0000

08006440 <HAL_I2C_Mem_Read>:
{
 8006440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006444:	4604      	mov	r4, r0
 8006446:	b087      	sub	sp, #28
 8006448:	4699      	mov	r9, r3
 800644a:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 800644e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006450:	460f      	mov	r7, r1
 8006452:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8006454:	f7fe fbb2 	bl	8004bbc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006458:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800645c:	2b20      	cmp	r3, #32
 800645e:	d004      	beq.n	800646a <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 8006460:	2702      	movs	r7, #2
}
 8006462:	4638      	mov	r0, r7
 8006464:	b007      	add	sp, #28
 8006466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800646a:	4606      	mov	r6, r0
 800646c:	e005      	b.n	800647a <HAL_I2C_Mem_Read+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800646e:	f7fe fba5 	bl	8004bbc <HAL_GetTick>
 8006472:	1b80      	subs	r0, r0, r6
 8006474:	2819      	cmp	r0, #25
 8006476:	f200 80e0 	bhi.w	800663a <HAL_I2C_Mem_Read+0x1fa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800647a:	f8d4 c000 	ldr.w	ip, [r4]
 800647e:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8006482:	43c0      	mvns	r0, r0
 8006484:	f010 0b02 	ands.w	fp, r0, #2
 8006488:	d0f1      	beq.n	800646e <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 800648a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800648e:	2b01      	cmp	r3, #1
 8006490:	d0e6      	beq.n	8006460 <HAL_I2C_Mem_Read+0x20>
 8006492:	2301      	movs	r3, #1
 8006494:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006498:	f8dc 3000 	ldr.w	r3, [ip]
 800649c:	07da      	lsls	r2, r3, #31
 800649e:	d54d      	bpl.n	800653c <HAL_I2C_Mem_Read+0xfc>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064a0:	f8dc 0000 	ldr.w	r0, [ip]
 80064a4:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 80064a8:	f8cc 0000 	str.w	r0, [ip]
    hi2c->pBuffPtr    = pData;
 80064ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 80064ae:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064b0:	2022      	movs	r0, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064b2:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064b6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064ba:	2040      	movs	r0, #64	; 0x40
 80064bc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064c0:	2000      	movs	r0, #0
 80064c2:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80064c4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064c8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80064ca:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064cc:	4896      	ldr	r0, [pc, #600]	; (8006728 <HAL_I2C_Mem_Read+0x2e8>)
 80064ce:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064d0:	4639      	mov	r1, r7
 80064d2:	464b      	mov	r3, r9
 80064d4:	4642      	mov	r2, r8
 80064d6:	4620      	mov	r0, r4
 80064d8:	f7ff fd96 	bl	8006008 <I2C_RequestMemoryRead>
 80064dc:	4607      	mov	r7, r0
 80064de:	bb40      	cbnz	r0, 8006532 <HAL_I2C_Mem_Read+0xf2>
    if (hi2c->XferSize == 0U)
 80064e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80064e2:	bb93      	cbnz	r3, 800654a <HAL_I2C_Mem_Read+0x10a>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	9002      	str	r0, [sp, #8]
 80064e8:	695a      	ldr	r2, [r3, #20]
 80064ea:	9202      	str	r2, [sp, #8]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	9202      	str	r2, [sp, #8]
 80064f0:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064f8:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064fa:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80064fc:	2220      	movs	r2, #32
 80064fe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8006502:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006506:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800650a:	e7aa      	b.n	8006462 <HAL_I2C_Mem_Read+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800650c:	f7fe fb56 	bl	8004bbc <HAL_GetTick>
 8006510:	1b80      	subs	r0, r0, r6
 8006512:	4285      	cmp	r5, r0
 8006514:	d300      	bcc.n	8006518 <HAL_I2C_Mem_Read+0xd8>
 8006516:	bb65      	cbnz	r5, 8006572 <HAL_I2C_Mem_Read+0x132>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006518:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800651a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800651c:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800651e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006522:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006526:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006528:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800652c:	f043 0320 	orr.w	r3, r3, #32
 8006530:	6423      	str	r3, [r4, #64]	; 0x40
            return HAL_ERROR;
 8006532:	2701      	movs	r7, #1
}
 8006534:	4638      	mov	r0, r7
 8006536:	b007      	add	sp, #28
 8006538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_I2C_ENABLE(hi2c);
 800653c:	f8dc 3000 	ldr.w	r3, [ip]
 8006540:	f043 0301 	orr.w	r3, r3, #1
 8006544:	f8cc 3000 	str.w	r3, [ip]
 8006548:	e7aa      	b.n	80064a0 <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 800654a:	2b01      	cmp	r3, #1
 800654c:	f000 80dc 	beq.w	8006708 <HAL_I2C_Mem_Read+0x2c8>
    else if (hi2c->XferSize == 2U)
 8006550:	2b02      	cmp	r3, #2
 8006552:	f000 80b2 	beq.w	80066ba <HAL_I2C_Mem_Read+0x27a>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006556:	6822      	ldr	r2, [r4, #0]
 8006558:	9005      	str	r0, [sp, #20]
 800655a:	6951      	ldr	r1, [r2, #20]
 800655c:	9105      	str	r1, [sp, #20]
 800655e:	6992      	ldr	r2, [r2, #24]
 8006560:	9205      	str	r2, [sp, #20]
 8006562:	9a05      	ldr	r2, [sp, #20]
      if (hi2c->XferSize <= 3U)
 8006564:	2b03      	cmp	r3, #3
 8006566:	d849      	bhi.n	80065fc <HAL_I2C_Mem_Read+0x1bc>
        if (hi2c->XferSize == 1U)
 8006568:	2b01      	cmp	r3, #1
 800656a:	f000 80c0 	beq.w	80066ee <HAL_I2C_Mem_Read+0x2ae>
        else if (hi2c->XferSize == 2U)
 800656e:	2b02      	cmp	r3, #2
 8006570:	d07a      	beq.n	8006668 <HAL_I2C_Mem_Read+0x228>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	e001      	b.n	800657a <HAL_I2C_Mem_Read+0x13a>
    if (Timeout != HAL_MAX_DELAY)
 8006576:	1c69      	adds	r1, r5, #1
 8006578:	d1c8      	bne.n	800650c <HAL_I2C_Mem_Read+0xcc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800657a:	6953      	ldr	r3, [r2, #20]
 800657c:	075b      	lsls	r3, r3, #29
 800657e:	d5fa      	bpl.n	8006576 <HAL_I2C_Mem_Read+0x136>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006580:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006582:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006584:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006588:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800658a:	6913      	ldr	r3, [r2, #16]
 800658c:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 800658e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006590:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006592:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006594:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8006596:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8006598:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 800659a:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 800659c:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800659e:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80065a0:	8563      	strh	r3, [r4, #42]	; 0x2a
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065a2:	6822      	ldr	r2, [r4, #0]
 80065a4:	e002      	b.n	80065ac <HAL_I2C_Mem_Read+0x16c>
    if (Timeout != HAL_MAX_DELAY)
 80065a6:	1c68      	adds	r0, r5, #1
 80065a8:	f040 8097 	bne.w	80066da <HAL_I2C_Mem_Read+0x29a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065ac:	6953      	ldr	r3, [r2, #20]
 80065ae:	0759      	lsls	r1, r3, #29
 80065b0:	d5f9      	bpl.n	80065a6 <HAL_I2C_Mem_Read+0x166>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065b2:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065ba:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065bc:	6913      	ldr	r3, [r2, #16]
 80065be:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80065c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 80065c2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 80065c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065c6:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 80065c8:	3b01      	subs	r3, #1
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ce:	6909      	ldr	r1, [r1, #16]
          hi2c->XferSize--;
 80065d0:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 80065d2:	f100 0c01 	add.w	ip, r0, #1
 80065d6:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80065da:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065dc:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 80065de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80065e0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80065e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80065e4:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 80065e6:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 80065e8:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80065ea:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 80065ec:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 80065ee:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80065f0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80065f2:	8562      	strh	r2, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d080      	beq.n	80064fa <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 80065f8:	2b03      	cmp	r3, #3
 80065fa:	d9b5      	bls.n	8006568 <HAL_I2C_Mem_Read+0x128>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065fc:	4632      	mov	r2, r6
 80065fe:	4629      	mov	r1, r5
 8006600:	4620      	mov	r0, r4
 8006602:	f7ff fbe7 	bl	8005dd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006606:	2800      	cmp	r0, #0
 8006608:	d193      	bne.n	8006532 <HAL_I2C_Mem_Read+0xf2>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800660a:	6822      	ldr	r2, [r4, #0]
 800660c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800660e:	6912      	ldr	r2, [r2, #16]
 8006610:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8006612:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006614:	6820      	ldr	r0, [r4, #0]
        hi2c->XferSize--;
 8006616:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8006618:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800661a:	3a01      	subs	r2, #1
 800661c:	b292      	uxth	r2, r2
 800661e:	8562      	strh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006620:	6942      	ldr	r2, [r0, #20]
        hi2c->XferSize--;
 8006622:	3b01      	subs	r3, #1
 8006624:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8006626:	f101 0c01 	add.w	ip, r1, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800662a:	0752      	lsls	r2, r2, #29
        hi2c->XferSize--;
 800662c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800662e:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006632:	d5df      	bpl.n	80065f4 <HAL_I2C_Mem_Read+0x1b4>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006634:	6903      	ldr	r3, [r0, #16]
 8006636:	704b      	strb	r3, [r1, #1]
 8006638:	e031      	b.n	800669e <HAL_I2C_Mem_Read+0x25e>
        hi2c->State             = HAL_I2C_STATE_READY;
 800663a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800663c:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006640:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006644:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006648:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800664a:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800664e:	f043 0320 	orr.w	r3, r3, #32
 8006652:	6423      	str	r3, [r4, #64]	; 0x40
 8006654:	e704      	b.n	8006460 <HAL_I2C_Mem_Read+0x20>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006656:	f7fe fab1 	bl	8004bbc <HAL_GetTick>
 800665a:	1b80      	subs	r0, r0, r6
 800665c:	4285      	cmp	r5, r0
 800665e:	f4ff af5b 	bcc.w	8006518 <HAL_I2C_Mem_Read+0xd8>
 8006662:	2d00      	cmp	r5, #0
 8006664:	f43f af58 	beq.w	8006518 <HAL_I2C_Mem_Read+0xd8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006668:	6822      	ldr	r2, [r4, #0]
 800666a:	e001      	b.n	8006670 <HAL_I2C_Mem_Read+0x230>
    if (Timeout != HAL_MAX_DELAY)
 800666c:	1c6b      	adds	r3, r5, #1
 800666e:	d1f2      	bne.n	8006656 <HAL_I2C_Mem_Read+0x216>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006670:	6953      	ldr	r3, [r2, #20]
 8006672:	0758      	lsls	r0, r3, #29
 8006674:	d5fa      	bpl.n	800666c <HAL_I2C_Mem_Read+0x22c>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006676:	6813      	ldr	r3, [r2, #0]
 8006678:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800667c:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800667e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006680:	6912      	ldr	r2, [r2, #16]
 8006682:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8006684:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006686:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8006688:	3b01      	subs	r3, #1
 800668a:	b29b      	uxth	r3, r3
 800668c:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 800668e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006690:	3b01      	subs	r3, #1
 8006692:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006694:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 8006696:	1c51      	adds	r1, r2, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006698:	691b      	ldr	r3, [r3, #16]
          hi2c->pBuffPtr++;
 800669a:	6261      	str	r1, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800669c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800669e:	6a63      	ldr	r3, [r4, #36]	; 0x24
          hi2c->XferCount--;
 80066a0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80066a2:	3301      	adds	r3, #1
 80066a4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80066a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80066a8:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 80066aa:	3b01      	subs	r3, #1
 80066ac:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 80066ae:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 80066b0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80066b2:	8562      	strh	r2, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d19f      	bne.n	80065f8 <HAL_I2C_Mem_Read+0x1b8>
 80066b8:	e71f      	b.n	80064fa <HAL_I2C_Mem_Read+0xba>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ba:	6822      	ldr	r2, [r4, #0]
 80066bc:	6811      	ldr	r1, [r2, #0]
 80066be:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80066c2:	6011      	str	r1, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066c4:	6811      	ldr	r1, [r2, #0]
 80066c6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80066ca:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066cc:	9004      	str	r0, [sp, #16]
 80066ce:	6951      	ldr	r1, [r2, #20]
 80066d0:	9104      	str	r1, [sp, #16]
 80066d2:	6992      	ldr	r2, [r2, #24]
 80066d4:	9204      	str	r2, [sp, #16]
 80066d6:	9a04      	ldr	r2, [sp, #16]
 80066d8:	e744      	b.n	8006564 <HAL_I2C_Mem_Read+0x124>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066da:	f7fe fa6f 	bl	8004bbc <HAL_GetTick>
 80066de:	1b80      	subs	r0, r0, r6
 80066e0:	4285      	cmp	r5, r0
 80066e2:	f4ff af19 	bcc.w	8006518 <HAL_I2C_Mem_Read+0xd8>
 80066e6:	2d00      	cmp	r5, #0
 80066e8:	f47f af5b 	bne.w	80065a2 <HAL_I2C_Mem_Read+0x162>
 80066ec:	e714      	b.n	8006518 <HAL_I2C_Mem_Read+0xd8>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066ee:	4632      	mov	r2, r6
 80066f0:	4629      	mov	r1, r5
 80066f2:	4620      	mov	r0, r4
 80066f4:	f7ff fb6e 	bl	8005dd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	f47f af1a 	bne.w	8006532 <HAL_I2C_Mem_Read+0xf2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	691a      	ldr	r2, [r3, #16]
 8006702:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006704:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006706:	e7ca      	b.n	800669e <HAL_I2C_Mem_Read+0x25e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006708:	6822      	ldr	r2, [r4, #0]
 800670a:	6811      	ldr	r1, [r2, #0]
 800670c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006710:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006712:	9003      	str	r0, [sp, #12]
 8006714:	6951      	ldr	r1, [r2, #20]
 8006716:	9103      	str	r1, [sp, #12]
 8006718:	6991      	ldr	r1, [r2, #24]
 800671a:	9103      	str	r1, [sp, #12]
 800671c:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800671e:	6811      	ldr	r1, [r2, #0]
 8006720:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006724:	6011      	str	r1, [r2, #0]
 8006726:	e71d      	b.n	8006564 <HAL_I2C_Mem_Read+0x124>
 8006728:	ffff0000 	.word	0xffff0000

0800672c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800672c:	2800      	cmp	r0, #0
 800672e:	f000 81a2 	beq.w	8006a76 <HAL_RCC_OscConfig+0x34a>
{
 8006732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006736:	6803      	ldr	r3, [r0, #0]
 8006738:	07dd      	lsls	r5, r3, #31
{
 800673a:	b082      	sub	sp, #8
 800673c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800673e:	d52f      	bpl.n	80067a0 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006740:	499e      	ldr	r1, [pc, #632]	; (80069bc <HAL_RCC_OscConfig+0x290>)
 8006742:	688a      	ldr	r2, [r1, #8]
 8006744:	f002 020c 	and.w	r2, r2, #12
 8006748:	2a04      	cmp	r2, #4
 800674a:	f000 80ed 	beq.w	8006928 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800674e:	688a      	ldr	r2, [r1, #8]
 8006750:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006754:	2a08      	cmp	r2, #8
 8006756:	f000 80e3 	beq.w	8006920 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800675a:	6863      	ldr	r3, [r4, #4]
 800675c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006760:	f000 80ec 	beq.w	800693c <HAL_RCC_OscConfig+0x210>
 8006764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006768:	f000 8175 	beq.w	8006a56 <HAL_RCC_OscConfig+0x32a>
 800676c:	4d93      	ldr	r5, [pc, #588]	; (80069bc <HAL_RCC_OscConfig+0x290>)
 800676e:	682a      	ldr	r2, [r5, #0]
 8006770:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006774:	602a      	str	r2, [r5, #0]
 8006776:	682a      	ldr	r2, [r5, #0]
 8006778:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800677c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800677e:	2b00      	cmp	r3, #0
 8006780:	f040 80e1 	bne.w	8006946 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006784:	f7fe fa1a 	bl	8004bbc <HAL_GetTick>
 8006788:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800678a:	e005      	b.n	8006798 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800678c:	f7fe fa16 	bl	8004bbc <HAL_GetTick>
 8006790:	1b80      	subs	r0, r0, r6
 8006792:	2864      	cmp	r0, #100	; 0x64
 8006794:	f200 8101 	bhi.w	800699a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006798:	682b      	ldr	r3, [r5, #0]
 800679a:	039b      	lsls	r3, r3, #14
 800679c:	d4f6      	bmi.n	800678c <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	079f      	lsls	r7, r3, #30
 80067a2:	d528      	bpl.n	80067f6 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067a4:	4a85      	ldr	r2, [pc, #532]	; (80069bc <HAL_RCC_OscConfig+0x290>)
 80067a6:	6891      	ldr	r1, [r2, #8]
 80067a8:	f011 0f0c 	tst.w	r1, #12
 80067ac:	f000 8090 	beq.w	80068d0 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067b0:	6891      	ldr	r1, [r2, #8]
 80067b2:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067b6:	2908      	cmp	r1, #8
 80067b8:	f000 8086 	beq.w	80068c8 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067bc:	68e3      	ldr	r3, [r4, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 810e 	beq.w	80069e0 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067c4:	4b7e      	ldr	r3, [pc, #504]	; (80069c0 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067c6:	4e7d      	ldr	r6, [pc, #500]	; (80069bc <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 80067c8:	2201      	movs	r2, #1
 80067ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80067cc:	f7fe f9f6 	bl	8004bbc <HAL_GetTick>
 80067d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067d2:	e005      	b.n	80067e0 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067d4:	f7fe f9f2 	bl	8004bbc <HAL_GetTick>
 80067d8:	1b40      	subs	r0, r0, r5
 80067da:	2802      	cmp	r0, #2
 80067dc:	f200 80dd 	bhi.w	800699a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067e0:	6833      	ldr	r3, [r6, #0]
 80067e2:	0798      	lsls	r0, r3, #30
 80067e4:	d5f6      	bpl.n	80067d4 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067e6:	6833      	ldr	r3, [r6, #0]
 80067e8:	6922      	ldr	r2, [r4, #16]
 80067ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80067ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80067f2:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	071a      	lsls	r2, r3, #28
 80067f8:	d451      	bmi.n	800689e <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067fa:	0758      	lsls	r0, r3, #29
 80067fc:	d52f      	bpl.n	800685e <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067fe:	4a6f      	ldr	r2, [pc, #444]	; (80069bc <HAL_RCC_OscConfig+0x290>)
 8006800:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006802:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8006806:	d07f      	beq.n	8006908 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8006808:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800680a:	4e6e      	ldr	r6, [pc, #440]	; (80069c4 <HAL_RCC_OscConfig+0x298>)
 800680c:	6833      	ldr	r3, [r6, #0]
 800680e:	05d9      	lsls	r1, r3, #23
 8006810:	f140 80b3 	bpl.w	800697a <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006814:	68a3      	ldr	r3, [r4, #8]
 8006816:	2b01      	cmp	r3, #1
 8006818:	f000 80c3 	beq.w	80069a2 <HAL_RCC_OscConfig+0x276>
 800681c:	2b05      	cmp	r3, #5
 800681e:	f000 812c 	beq.w	8006a7a <HAL_RCC_OscConfig+0x34e>
 8006822:	4e66      	ldr	r6, [pc, #408]	; (80069bc <HAL_RCC_OscConfig+0x290>)
 8006824:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8006826:	f022 0201 	bic.w	r2, r2, #1
 800682a:	6732      	str	r2, [r6, #112]	; 0x70
 800682c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800682e:	f022 0204 	bic.w	r2, r2, #4
 8006832:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006834:	2b00      	cmp	r3, #0
 8006836:	f040 80b9 	bne.w	80069ac <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800683a:	f7fe f9bf 	bl	8004bbc <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800683e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006842:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006844:	e005      	b.n	8006852 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006846:	f7fe f9b9 	bl	8004bbc <HAL_GetTick>
 800684a:	1bc0      	subs	r0, r0, r7
 800684c:	4540      	cmp	r0, r8
 800684e:	f200 80a4 	bhi.w	800699a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006852:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8006854:	0798      	lsls	r0, r3, #30
 8006856:	d4f6      	bmi.n	8006846 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006858:	2d00      	cmp	r5, #0
 800685a:	f040 8106 	bne.w	8006a6a <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800685e:	69a0      	ldr	r0, [r4, #24]
 8006860:	b1c8      	cbz	r0, 8006896 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006862:	4d56      	ldr	r5, [pc, #344]	; (80069bc <HAL_RCC_OscConfig+0x290>)
 8006864:	68ab      	ldr	r3, [r5, #8]
 8006866:	f003 030c 	and.w	r3, r3, #12
 800686a:	2b08      	cmp	r3, #8
 800686c:	f000 80c9 	beq.w	8006a02 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006870:	4b53      	ldr	r3, [pc, #332]	; (80069c0 <HAL_RCC_OscConfig+0x294>)
 8006872:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006874:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006876:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006878:	f000 8109 	beq.w	8006a8e <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800687c:	f7fe f99e 	bl	8004bbc <HAL_GetTick>
 8006880:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006882:	e005      	b.n	8006890 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006884:	f7fe f99a 	bl	8004bbc <HAL_GetTick>
 8006888:	1b00      	subs	r0, r0, r4
 800688a:	2802      	cmp	r0, #2
 800688c:	f200 8085 	bhi.w	800699a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006890:	682b      	ldr	r3, [r5, #0]
 8006892:	019b      	lsls	r3, r3, #6
 8006894:	d4f6      	bmi.n	8006884 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8006896:	2000      	movs	r0, #0
}
 8006898:	b002      	add	sp, #8
 800689a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800689e:	6963      	ldr	r3, [r4, #20]
 80068a0:	b30b      	cbz	r3, 80068e6 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 80068a2:	4b47      	ldr	r3, [pc, #284]	; (80069c0 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068a4:	4e45      	ldr	r6, [pc, #276]	; (80069bc <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 80068a6:	2201      	movs	r2, #1
 80068a8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80068ac:	f7fe f986 	bl	8004bbc <HAL_GetTick>
 80068b0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068b2:	e004      	b.n	80068be <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068b4:	f7fe f982 	bl	8004bbc <HAL_GetTick>
 80068b8:	1b40      	subs	r0, r0, r5
 80068ba:	2802      	cmp	r0, #2
 80068bc:	d86d      	bhi.n	800699a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068be:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80068c0:	079b      	lsls	r3, r3, #30
 80068c2:	d5f7      	bpl.n	80068b4 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	e798      	b.n	80067fa <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068c8:	6852      	ldr	r2, [r2, #4]
 80068ca:	0256      	lsls	r6, r2, #9
 80068cc:	f53f af76 	bmi.w	80067bc <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068d0:	4a3a      	ldr	r2, [pc, #232]	; (80069bc <HAL_RCC_OscConfig+0x290>)
 80068d2:	6812      	ldr	r2, [r2, #0]
 80068d4:	0795      	lsls	r5, r2, #30
 80068d6:	d544      	bpl.n	8006962 <HAL_RCC_OscConfig+0x236>
 80068d8:	68e2      	ldr	r2, [r4, #12]
 80068da:	2a01      	cmp	r2, #1
 80068dc:	d041      	beq.n	8006962 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 80068de:	2001      	movs	r0, #1
}
 80068e0:	b002      	add	sp, #8
 80068e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80068e6:	4a36      	ldr	r2, [pc, #216]	; (80069c0 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068e8:	4e34      	ldr	r6, [pc, #208]	; (80069bc <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 80068ea:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80068ee:	f7fe f965 	bl	8004bbc <HAL_GetTick>
 80068f2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068f4:	e004      	b.n	8006900 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068f6:	f7fe f961 	bl	8004bbc <HAL_GetTick>
 80068fa:	1b40      	subs	r0, r0, r5
 80068fc:	2802      	cmp	r0, #2
 80068fe:	d84c      	bhi.n	800699a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006900:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8006902:	079f      	lsls	r7, r3, #30
 8006904:	d4f7      	bmi.n	80068f6 <HAL_RCC_OscConfig+0x1ca>
 8006906:	e7dd      	b.n	80068c4 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006908:	9301      	str	r3, [sp, #4]
 800690a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800690c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006910:	6413      	str	r3, [r2, #64]	; 0x40
 8006912:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800691c:	2501      	movs	r5, #1
 800691e:	e774      	b.n	800680a <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006920:	684a      	ldr	r2, [r1, #4]
 8006922:	0250      	lsls	r0, r2, #9
 8006924:	f57f af19 	bpl.w	800675a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006928:	4a24      	ldr	r2, [pc, #144]	; (80069bc <HAL_RCC_OscConfig+0x290>)
 800692a:	6812      	ldr	r2, [r2, #0]
 800692c:	0391      	lsls	r1, r2, #14
 800692e:	f57f af37 	bpl.w	80067a0 <HAL_RCC_OscConfig+0x74>
 8006932:	6862      	ldr	r2, [r4, #4]
 8006934:	2a00      	cmp	r2, #0
 8006936:	f47f af33 	bne.w	80067a0 <HAL_RCC_OscConfig+0x74>
 800693a:	e7d0      	b.n	80068de <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800693c:	4a1f      	ldr	r2, [pc, #124]	; (80069bc <HAL_RCC_OscConfig+0x290>)
 800693e:	6813      	ldr	r3, [r2, #0]
 8006940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006944:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006946:	f7fe f939 	bl	8004bbc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800694a:	4e1c      	ldr	r6, [pc, #112]	; (80069bc <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800694c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800694e:	e004      	b.n	800695a <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006950:	f7fe f934 	bl	8004bbc <HAL_GetTick>
 8006954:	1b40      	subs	r0, r0, r5
 8006956:	2864      	cmp	r0, #100	; 0x64
 8006958:	d81f      	bhi.n	800699a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800695a:	6833      	ldr	r3, [r6, #0]
 800695c:	039a      	lsls	r2, r3, #14
 800695e:	d5f7      	bpl.n	8006950 <HAL_RCC_OscConfig+0x224>
 8006960:	e71d      	b.n	800679e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006962:	4916      	ldr	r1, [pc, #88]	; (80069bc <HAL_RCC_OscConfig+0x290>)
 8006964:	6920      	ldr	r0, [r4, #16]
 8006966:	680a      	ldr	r2, [r1, #0]
 8006968:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800696c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8006970:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006972:	071a      	lsls	r2, r3, #28
 8006974:	f57f af41 	bpl.w	80067fa <HAL_RCC_OscConfig+0xce>
 8006978:	e791      	b.n	800689e <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800697a:	6833      	ldr	r3, [r6, #0]
 800697c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006980:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006982:	f7fe f91b 	bl	8004bbc <HAL_GetTick>
 8006986:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006988:	6833      	ldr	r3, [r6, #0]
 800698a:	05da      	lsls	r2, r3, #23
 800698c:	f53f af42 	bmi.w	8006814 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006990:	f7fe f914 	bl	8004bbc <HAL_GetTick>
 8006994:	1bc0      	subs	r0, r0, r7
 8006996:	2802      	cmp	r0, #2
 8006998:	d9f6      	bls.n	8006988 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 800699a:	2003      	movs	r0, #3
}
 800699c:	b002      	add	sp, #8
 800699e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069a2:	4a06      	ldr	r2, [pc, #24]	; (80069bc <HAL_RCC_OscConfig+0x290>)
 80069a4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80069a6:	f043 0301 	orr.w	r3, r3, #1
 80069aa:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80069ac:	f7fe f906 	bl	8004bbc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b0:	4f02      	ldr	r7, [pc, #8]	; (80069bc <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 80069b2:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069b4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b8:	e00b      	b.n	80069d2 <HAL_RCC_OscConfig+0x2a6>
 80069ba:	bf00      	nop
 80069bc:	40023800 	.word	0x40023800
 80069c0:	42470000 	.word	0x42470000
 80069c4:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069c8:	f7fe f8f8 	bl	8004bbc <HAL_GetTick>
 80069cc:	1b80      	subs	r0, r0, r6
 80069ce:	4540      	cmp	r0, r8
 80069d0:	d8e3      	bhi.n	800699a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069d4:	079b      	lsls	r3, r3, #30
 80069d6:	d5f7      	bpl.n	80069c8 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 80069d8:	2d00      	cmp	r5, #0
 80069da:	f43f af40 	beq.w	800685e <HAL_RCC_OscConfig+0x132>
 80069de:	e044      	b.n	8006a6a <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 80069e0:	4a42      	ldr	r2, [pc, #264]	; (8006aec <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069e2:	4e43      	ldr	r6, [pc, #268]	; (8006af0 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 80069e4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80069e6:	f7fe f8e9 	bl	8004bbc <HAL_GetTick>
 80069ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ec:	e004      	b.n	80069f8 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069ee:	f7fe f8e5 	bl	8004bbc <HAL_GetTick>
 80069f2:	1b40      	subs	r0, r0, r5
 80069f4:	2802      	cmp	r0, #2
 80069f6:	d8d0      	bhi.n	800699a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069f8:	6833      	ldr	r3, [r6, #0]
 80069fa:	0799      	lsls	r1, r3, #30
 80069fc:	d4f7      	bmi.n	80069ee <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	e6f9      	b.n	80067f6 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a02:	2801      	cmp	r0, #1
 8006a04:	f43f af48 	beq.w	8006898 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8006a08:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a0a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a0c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a10:	4291      	cmp	r1, r2
 8006a12:	f47f af64 	bne.w	80068de <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a16:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a18:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a1c:	4291      	cmp	r1, r2
 8006a1e:	f47f af5e 	bne.w	80068de <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a22:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006a24:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8006a28:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a2a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8006a2e:	f47f af56 	bne.w	80068de <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a32:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006a34:	0852      	lsrs	r2, r2, #1
 8006a36:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8006a3a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a3c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8006a40:	f47f af4d 	bne.w	80068de <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006a46:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a4a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8006a4e:	bf14      	ite	ne
 8006a50:	2001      	movne	r0, #1
 8006a52:	2000      	moveq	r0, #0
 8006a54:	e720      	b.n	8006898 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a56:	4b26      	ldr	r3, [pc, #152]	; (8006af0 <HAL_RCC_OscConfig+0x3c4>)
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006a66:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a68:	e76d      	b.n	8006946 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a6a:	4a21      	ldr	r2, [pc, #132]	; (8006af0 <HAL_RCC_OscConfig+0x3c4>)
 8006a6c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a72:	6413      	str	r3, [r2, #64]	; 0x40
 8006a74:	e6f3      	b.n	800685e <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8006a76:	2001      	movs	r0, #1
}
 8006a78:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a7a:	4b1d      	ldr	r3, [pc, #116]	; (8006af0 <HAL_RCC_OscConfig+0x3c4>)
 8006a7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a7e:	f042 0204 	orr.w	r2, r2, #4
 8006a82:	671a      	str	r2, [r3, #112]	; 0x70
 8006a84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a8c:	e78e      	b.n	80069ac <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8006a8e:	f7fe f895 	bl	8004bbc <HAL_GetTick>
 8006a92:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a94:	e005      	b.n	8006aa2 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a96:	f7fe f891 	bl	8004bbc <HAL_GetTick>
 8006a9a:	1b80      	subs	r0, r0, r6
 8006a9c:	2802      	cmp	r0, #2
 8006a9e:	f63f af7c 	bhi.w	800699a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aa2:	682b      	ldr	r3, [r5, #0]
 8006aa4:	0199      	lsls	r1, r3, #6
 8006aa6:	d4f6      	bmi.n	8006a96 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006aa8:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8006aac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006aae:	430b      	orrs	r3, r1
 8006ab0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006ab4:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8006ab8:	0852      	lsrs	r2, r2, #1
 8006aba:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006abe:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8006ac0:	490a      	ldr	r1, [pc, #40]	; (8006aec <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ac2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8006ac6:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ac8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8006aca:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8006acc:	f7fe f876 	bl	8004bbc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ad0:	4d07      	ldr	r5, [pc, #28]	; (8006af0 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8006ad2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ad4:	e005      	b.n	8006ae2 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ad6:	f7fe f871 	bl	8004bbc <HAL_GetTick>
 8006ada:	1b00      	subs	r0, r0, r4
 8006adc:	2802      	cmp	r0, #2
 8006ade:	f63f af5c 	bhi.w	800699a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ae2:	682b      	ldr	r3, [r5, #0]
 8006ae4:	019a      	lsls	r2, r3, #6
 8006ae6:	d5f6      	bpl.n	8006ad6 <HAL_RCC_OscConfig+0x3aa>
 8006ae8:	e6d5      	b.n	8006896 <HAL_RCC_OscConfig+0x16a>
 8006aea:	bf00      	nop
 8006aec:	42470000 	.word	0x42470000
 8006af0:	40023800 	.word	0x40023800

08006af4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006af4:	4916      	ldr	r1, [pc, #88]	; (8006b50 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8006af6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006af8:	688b      	ldr	r3, [r1, #8]
 8006afa:	f003 030c 	and.w	r3, r3, #12
 8006afe:	2b04      	cmp	r3, #4
 8006b00:	d01b      	beq.n	8006b3a <HAL_RCC_GetSysClockFreq+0x46>
 8006b02:	2b08      	cmp	r3, #8
 8006b04:	d117      	bne.n	8006b36 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b06:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b08:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b0a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b0c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b10:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b14:	d113      	bne.n	8006b3e <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b16:	480f      	ldr	r0, [pc, #60]	; (8006b54 <HAL_RCC_GetSysClockFreq+0x60>)
 8006b18:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006b1c:	fba1 0100 	umull	r0, r1, r1, r0
 8006b20:	f7f9 feb8 	bl	8000894 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b24:	4b0a      	ldr	r3, [pc, #40]	; (8006b50 <HAL_RCC_GetSysClockFreq+0x5c>)
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8006b30:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006b34:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8006b36:	4807      	ldr	r0, [pc, #28]	; (8006b54 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8006b38:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b3a:	4807      	ldr	r0, [pc, #28]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8006b3c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b3e:	4806      	ldr	r0, [pc, #24]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x64>)
 8006b40:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006b44:	2300      	movs	r3, #0
 8006b46:	fba1 0100 	umull	r0, r1, r1, r0
 8006b4a:	f7f9 fea3 	bl	8000894 <__aeabi_uldivmod>
 8006b4e:	e7e9      	b.n	8006b24 <HAL_RCC_GetSysClockFreq+0x30>
 8006b50:	40023800 	.word	0x40023800
 8006b54:	00f42400 	.word	0x00f42400
 8006b58:	017d7840 	.word	0x017d7840

08006b5c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	f000 8087 	beq.w	8006c70 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b62:	4a48      	ldr	r2, [pc, #288]	; (8006c84 <HAL_RCC_ClockConfig+0x128>)
 8006b64:	6813      	ldr	r3, [r2, #0]
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	428b      	cmp	r3, r1
{
 8006b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b70:	460d      	mov	r5, r1
 8006b72:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b74:	d209      	bcs.n	8006b8a <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b76:	b2cb      	uxtb	r3, r1
 8006b78:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b7a:	6813      	ldr	r3, [r2, #0]
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	428b      	cmp	r3, r1
 8006b82:	d002      	beq.n	8006b8a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8006b84:	2001      	movs	r0, #1
}
 8006b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	0798      	lsls	r0, r3, #30
 8006b8e:	d514      	bpl.n	8006bba <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b90:	0759      	lsls	r1, r3, #29
 8006b92:	d504      	bpl.n	8006b9e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b94:	493c      	ldr	r1, [pc, #240]	; (8006c88 <HAL_RCC_ClockConfig+0x12c>)
 8006b96:	688a      	ldr	r2, [r1, #8]
 8006b98:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8006b9c:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b9e:	071a      	lsls	r2, r3, #28
 8006ba0:	d504      	bpl.n	8006bac <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ba2:	4939      	ldr	r1, [pc, #228]	; (8006c88 <HAL_RCC_ClockConfig+0x12c>)
 8006ba4:	688a      	ldr	r2, [r1, #8]
 8006ba6:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8006baa:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bac:	4936      	ldr	r1, [pc, #216]	; (8006c88 <HAL_RCC_ClockConfig+0x12c>)
 8006bae:	68a0      	ldr	r0, [r4, #8]
 8006bb0:	688a      	ldr	r2, [r1, #8]
 8006bb2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006bb6:	4302      	orrs	r2, r0
 8006bb8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bba:	07df      	lsls	r7, r3, #31
 8006bbc:	d521      	bpl.n	8006c02 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bbe:	6862      	ldr	r2, [r4, #4]
 8006bc0:	2a01      	cmp	r2, #1
 8006bc2:	d057      	beq.n	8006c74 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bc4:	1e93      	subs	r3, r2, #2
 8006bc6:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bc8:	4b2f      	ldr	r3, [pc, #188]	; (8006c88 <HAL_RCC_ClockConfig+0x12c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bcc:	d94d      	bls.n	8006c6a <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bce:	0799      	lsls	r1, r3, #30
 8006bd0:	d5d8      	bpl.n	8006b84 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bd2:	4e2d      	ldr	r6, [pc, #180]	; (8006c88 <HAL_RCC_ClockConfig+0x12c>)
 8006bd4:	68b3      	ldr	r3, [r6, #8]
 8006bd6:	f023 0303 	bic.w	r3, r3, #3
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8006bde:	f7fd ffed 	bl	8004bbc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006be2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006be6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006be8:	e004      	b.n	8006bf4 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bea:	f7fd ffe7 	bl	8004bbc <HAL_GetTick>
 8006bee:	1bc0      	subs	r0, r0, r7
 8006bf0:	4540      	cmp	r0, r8
 8006bf2:	d844      	bhi.n	8006c7e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bf4:	68b3      	ldr	r3, [r6, #8]
 8006bf6:	6862      	ldr	r2, [r4, #4]
 8006bf8:	f003 030c 	and.w	r3, r3, #12
 8006bfc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006c00:	d1f3      	bne.n	8006bea <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c02:	4a20      	ldr	r2, [pc, #128]	; (8006c84 <HAL_RCC_ClockConfig+0x128>)
 8006c04:	6813      	ldr	r3, [r2, #0]
 8006c06:	f003 0307 	and.w	r3, r3, #7
 8006c0a:	42ab      	cmp	r3, r5
 8006c0c:	d906      	bls.n	8006c1c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c0e:	b2eb      	uxtb	r3, r5
 8006c10:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c12:	6813      	ldr	r3, [r2, #0]
 8006c14:	f003 0307 	and.w	r3, r3, #7
 8006c18:	42ab      	cmp	r3, r5
 8006c1a:	d1b3      	bne.n	8006b84 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	075a      	lsls	r2, r3, #29
 8006c20:	d506      	bpl.n	8006c30 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c22:	4919      	ldr	r1, [pc, #100]	; (8006c88 <HAL_RCC_ClockConfig+0x12c>)
 8006c24:	68e0      	ldr	r0, [r4, #12]
 8006c26:	688a      	ldr	r2, [r1, #8]
 8006c28:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8006c2c:	4302      	orrs	r2, r0
 8006c2e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c30:	071b      	lsls	r3, r3, #28
 8006c32:	d507      	bpl.n	8006c44 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c34:	4a14      	ldr	r2, [pc, #80]	; (8006c88 <HAL_RCC_ClockConfig+0x12c>)
 8006c36:	6921      	ldr	r1, [r4, #16]
 8006c38:	6893      	ldr	r3, [r2, #8]
 8006c3a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006c3e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006c42:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c44:	f7ff ff56 	bl	8006af4 <HAL_RCC_GetSysClockFreq>
 8006c48:	4a0f      	ldr	r2, [pc, #60]	; (8006c88 <HAL_RCC_ClockConfig+0x12c>)
 8006c4a:	4c10      	ldr	r4, [pc, #64]	; (8006c8c <HAL_RCC_ClockConfig+0x130>)
 8006c4c:	6892      	ldr	r2, [r2, #8]
 8006c4e:	4910      	ldr	r1, [pc, #64]	; (8006c90 <HAL_RCC_ClockConfig+0x134>)
 8006c50:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006c54:	4603      	mov	r3, r0
 8006c56:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8006c58:	480e      	ldr	r0, [pc, #56]	; (8006c94 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c5a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8006c5c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c5e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8006c60:	f7fd ff62 	bl	8004b28 <HAL_InitTick>
  return HAL_OK;
 8006c64:	2000      	movs	r0, #0
}
 8006c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c6a:	0198      	lsls	r0, r3, #6
 8006c6c:	d4b1      	bmi.n	8006bd2 <HAL_RCC_ClockConfig+0x76>
 8006c6e:	e789      	b.n	8006b84 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8006c70:	2001      	movs	r0, #1
}
 8006c72:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c74:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <HAL_RCC_ClockConfig+0x12c>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	039e      	lsls	r6, r3, #14
 8006c7a:	d4aa      	bmi.n	8006bd2 <HAL_RCC_ClockConfig+0x76>
 8006c7c:	e782      	b.n	8006b84 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8006c7e:	2003      	movs	r0, #3
 8006c80:	e781      	b.n	8006b86 <HAL_RCC_ClockConfig+0x2a>
 8006c82:	bf00      	nop
 8006c84:	40023c00 	.word	0x40023c00
 8006c88:	40023800 	.word	0x40023800
 8006c8c:	0800a264 	.word	0x0800a264
 8006c90:	20008f88 	.word	0x20008f88
 8006c94:	20008f90 	.word	0x20008f90

08006c98 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c98:	4b04      	ldr	r3, [pc, #16]	; (8006cac <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8006c9a:	4905      	ldr	r1, [pc, #20]	; (8006cb0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	4a05      	ldr	r2, [pc, #20]	; (8006cb4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006ca0:	6808      	ldr	r0, [r1, #0]
 8006ca2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006ca6:	5cd3      	ldrb	r3, [r2, r3]
}
 8006ca8:	40d8      	lsrs	r0, r3
 8006caa:	4770      	bx	lr
 8006cac:	40023800 	.word	0x40023800
 8006cb0:	20008f88 	.word	0x20008f88
 8006cb4:	0800a274 	.word	0x0800a274

08006cb8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006cb8:	4b04      	ldr	r3, [pc, #16]	; (8006ccc <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8006cba:	4905      	ldr	r1, [pc, #20]	; (8006cd0 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	4a05      	ldr	r2, [pc, #20]	; (8006cd4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006cc0:	6808      	ldr	r0, [r1, #0]
 8006cc2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006cc6:	5cd3      	ldrb	r3, [r2, r3]
}
 8006cc8:	40d8      	lsrs	r0, r3
 8006cca:	4770      	bx	lr
 8006ccc:	40023800 	.word	0x40023800
 8006cd0:	20008f88 	.word	0x20008f88
 8006cd4:	0800a274 	.word	0x0800a274

08006cd8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8006cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cdc:	b082      	sub	sp, #8
 8006cde:	461e      	mov	r6, r3
 8006ce0:	4614      	mov	r4, r2
 8006ce2:	460d      	mov	r5, r1
 8006ce4:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ce6:	f7fd ff69 	bl	8004bbc <HAL_GetTick>
 8006cea:	4426      	add	r6, r4
 8006cec:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8006cee:	f7fd ff65 	bl	8004bbc <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006cf2:	4b26      	ldr	r3, [pc, #152]	; (8006d8c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006cfa:	fb06 f303 	mul.w	r3, r6, r3
  tmp_tickstart = HAL_GetTick();
 8006cfe:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d00:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	e001      	b.n	8006d0a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d06:	1c63      	adds	r3, r4, #1
 8006d08:	d107      	bne.n	8006d1a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d0a:	6893      	ldr	r3, [r2, #8]
 8006d0c:	ea35 0303 	bics.w	r3, r5, r3
 8006d10:	d0f9      	beq.n	8006d06 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
      }
      count--;
    }
  }

  return HAL_OK;
 8006d12:	2000      	movs	r0, #0
}
 8006d14:	b002      	add	sp, #8
 8006d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d1a:	f7fd ff4f 	bl	8004bbc <HAL_GetTick>
 8006d1e:	eba0 0008 	sub.w	r0, r0, r8
 8006d22:	42b0      	cmp	r0, r6
 8006d24:	d208      	bcs.n	8006d38 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
      if (count == 0U)
 8006d26:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8006d28:	2b00      	cmp	r3, #0
      count--;
 8006d2a:	9b01      	ldr	r3, [sp, #4]
 8006d2c:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8006d30:	bf08      	it	eq
 8006d32:	2600      	moveq	r6, #0
      count--;
 8006d34:	9301      	str	r3, [sp, #4]
 8006d36:	e7e4      	b.n	8006d02 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d38:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d3c:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d3e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d46:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d48:	d014      	beq.n	8006d74 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d4c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006d50:	d007      	beq.n	8006d62 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
        hspi->State = HAL_SPI_STATE_READY;
 8006d52:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8006d54:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8006d56:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8006d5a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        return HAL_TIMEOUT;
 8006d5e:	2003      	movs	r0, #3
 8006d60:	e7d8      	b.n	8006d14 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
          SPI_RESET_CRC(hspi);
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	e7ee      	b.n	8006d52 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006d7a:	d002      	beq.n	8006d82 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xaa>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d7c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006d80:	d1e3      	bne.n	8006d4a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	e7de      	b.n	8006d4a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8006d8c:	20008f88 	.word	0x20008f88

08006d90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d94:	6842      	ldr	r2, [r0, #4]
 8006d96:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8006d9a:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d9c:	d006      	beq.n	8006dac <SPI_EndRxTransaction+0x1c>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d9e:	460a      	mov	r2, r1
 8006da0:	2101      	movs	r1, #1
 8006da2:	f7ff ff99 	bl	8006cd8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006da6:	b978      	cbnz	r0, 8006dc8 <SPI_EndRxTransaction+0x38>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8006da8:	2000      	movs	r0, #0
}
 8006daa:	bd38      	pop	{r3, r4, r5, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dac:	6882      	ldr	r2, [r0, #8]
 8006dae:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006db2:	d01c      	beq.n	8006dee <SPI_EndRxTransaction+0x5e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006db4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006db8:	d00c      	beq.n	8006dd4 <SPI_EndRxTransaction+0x44>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006dba:	460a      	mov	r2, r1
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	2180      	movs	r1, #128	; 0x80
 8006dc0:	f7ff ff8a 	bl	8006cd8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d0ef      	beq.n	8006da8 <SPI_EndRxTransaction+0x18>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dc8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006dca:	f043 0320 	orr.w	r3, r3, #32
      return HAL_TIMEOUT;
 8006dce:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dd0:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_SPI_DISABLE(hspi);
 8006dd4:	6805      	ldr	r5, [r0, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006dd6:	460a      	mov	r2, r1
    __HAL_SPI_DISABLE(hspi);
 8006dd8:	6829      	ldr	r1, [r5, #0]
 8006dda:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006dde:	6029      	str	r1, [r5, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006de0:	2101      	movs	r1, #1
 8006de2:	f7ff ff79 	bl	8006cd8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d1ee      	bne.n	8006dc8 <SPI_EndRxTransaction+0x38>
  return HAL_OK;
 8006dea:	2000      	movs	r0, #0
 8006dec:	e7dd      	b.n	8006daa <SPI_EndRxTransaction+0x1a>
    __HAL_SPI_DISABLE(hspi);
 8006dee:	6800      	ldr	r0, [r0, #0]
 8006df0:	6802      	ldr	r2, [r0, #0]
 8006df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006df6:	6002      	str	r2, [r0, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006df8:	460a      	mov	r2, r1
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	2180      	movs	r1, #128	; 0x80
 8006dfe:	f7ff ff6b 	bl	8006cd8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006e02:	2800      	cmp	r0, #0
 8006e04:	d0d0      	beq.n	8006da8 <SPI_EndRxTransaction+0x18>
 8006e06:	e7df      	b.n	8006dc8 <SPI_EndRxTransaction+0x38>

08006e08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e08:	b530      	push	{r4, r5, lr}
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e0a:	4b16      	ldr	r3, [pc, #88]	; (8006e64 <SPI_EndRxTxTransaction+0x5c>)
 8006e0c:	4c16      	ldr	r4, [pc, #88]	; (8006e68 <SPI_EndRxTxTransaction+0x60>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	fba4 3c03 	umull	r3, ip, r4, r3
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e14:	6843      	ldr	r3, [r0, #4]
{
 8006e16:	b083      	sub	sp, #12
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e18:	ea4f 5c5c 	mov.w	ip, ip, lsr #21
 8006e1c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8006e20:	fb05 f50c 	mul.w	r5, r5, ip
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8006e28:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e2a:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e2c:	d107      	bne.n	8006e3e <SPI_EndRxTxTransaction+0x36>
 8006e2e:	e00c      	b.n	8006e4a <SPI_EndRxTxTransaction+0x42>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 8006e30:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006e32:	6822      	ldr	r2, [r4, #0]
      count--;
 8006e34:	3b01      	subs	r3, #1
 8006e36:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006e38:	6893      	ldr	r3, [r2, #8]
 8006e3a:	061b      	lsls	r3, r3, #24
 8006e3c:	d502      	bpl.n	8006e44 <SPI_EndRxTxTransaction+0x3c>
      if (count == 0U)
 8006e3e:	9b01      	ldr	r3, [sp, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1f5      	bne.n	8006e30 <SPI_EndRxTxTransaction+0x28>
  }

  return HAL_OK;
 8006e44:	2000      	movs	r0, #0
}
 8006e46:	b003      	add	sp, #12
 8006e48:	bd30      	pop	{r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	460a      	mov	r2, r1
 8006e4e:	2180      	movs	r1, #128	; 0x80
 8006e50:	f7ff ff42 	bl	8006cd8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d0f5      	beq.n	8006e44 <SPI_EndRxTxTransaction+0x3c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e58:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006e5a:	f043 0320 	orr.w	r3, r3, #32
      return HAL_TIMEOUT;
 8006e5e:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e60:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8006e62:	e7f0      	b.n	8006e46 <SPI_EndRxTxTransaction+0x3e>
 8006e64:	20008f88 	.word	0x20008f88
 8006e68:	165e9f81 	.word	0x165e9f81

08006e6c <HAL_SPI_Init>:
  if (hspi == NULL)
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d05c      	beq.n	8006f2a <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e70:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8006e72:	b570      	push	{r4, r5, r6, lr}
 8006e74:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e76:	2900      	cmp	r1, #0
 8006e78:	d047      	beq.n	8006f0a <HAL_SPI_Init+0x9e>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e7a:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e7c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e80:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e84:	2300      	movs	r3, #0
 8006e86:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e88:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8006e8c:	2a00      	cmp	r2, #0
 8006e8e:	d042      	beq.n	8006f16 <HAL_SPI_Init+0xaa>
 8006e90:	469c      	mov	ip, r3
  __HAL_SPI_DISABLE(hspi);
 8006e92:	6825      	ldr	r5, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e94:	68a2      	ldr	r2, [r4, #8]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006e96:	2302      	movs	r3, #2
 8006e98:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8006e9c:	682b      	ldr	r3, [r5, #0]
 8006e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea2:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ea4:	6863      	ldr	r3, [r4, #4]
 8006ea6:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8006eaa:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	68e2      	ldr	r2, [r4, #12]
 8006eb2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	6922      	ldr	r2, [r4, #16]
 8006eba:	f002 0202 	and.w	r2, r2, #2
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	6962      	ldr	r2, [r4, #20]
 8006ec2:	f002 0201 	and.w	r2, r2, #1
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006eca:	f001 0010 	and.w	r0, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ece:	f003 0638 	and.w	r6, r3, #56	; 0x38
 8006ed2:	69a1      	ldr	r1, [r4, #24]
 8006ed4:	6a23      	ldr	r3, [r4, #32]
 8006ed6:	f003 0e80 	and.w	lr, r3, #128	; 0x80
 8006eda:	f401 7300 	and.w	r3, r1, #512	; 0x200
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ee2:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ee4:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ee8:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006eec:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ef0:	4301      	orrs	r1, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ef2:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ef4:	6069      	str	r1, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ef6:	69eb      	ldr	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ef8:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006efa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8006efe:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f00:	61eb      	str	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f02:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f04:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
}
 8006f08:	bd70      	pop	{r4, r5, r6, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f0a:	6843      	ldr	r3, [r0, #4]
 8006f0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f10:	d0b6      	beq.n	8006e80 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f12:	61c1      	str	r1, [r0, #28]
 8006f14:	e7b4      	b.n	8006e80 <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 8006f16:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f7fd fbd2 	bl	80046c4 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f20:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f24:	f403 5c00 	and.w	ip, r3, #8192	; 0x2000
 8006f28:	e7b3      	b.n	8006e92 <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8006f2a:	2001      	movs	r0, #1
}
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop

08006f30 <HAL_SPI_Transmit>:
{
 8006f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f34:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8006f36:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8006f3a:	2801      	cmp	r0, #1
{
 8006f3c:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8006f3e:	d062      	beq.n	8007006 <HAL_SPI_Transmit+0xd6>
 8006f40:	461d      	mov	r5, r3
 8006f42:	2301      	movs	r3, #1
 8006f44:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8006f48:	4688      	mov	r8, r1
 8006f4a:	4617      	mov	r7, r2
 8006f4c:	f7fd fe36 	bl	8004bbc <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006f50:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8006f54:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8006f56:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006f58:	b2d8      	uxtb	r0, r3
 8006f5a:	d009      	beq.n	8006f70 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 8006f5c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8006f5e:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8006f60:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8006f62:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006f66:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006f6a:	b002      	add	sp, #8
 8006f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8006f70:	f1b8 0f00 	cmp.w	r8, #0
 8006f74:	d0f3      	beq.n	8006f5e <HAL_SPI_Transmit+0x2e>
 8006f76:	2f00      	cmp	r7, #0
 8006f78:	d0f1      	beq.n	8006f5e <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f7a:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f7c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f80:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f82:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f84:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f88:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->RxISR       = NULL;
 8006f8c:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f90:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f92:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f94:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006f96:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006f98:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxXferCount = 0U;
 8006f9a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    __HAL_SPI_DISABLE(hspi);
 8006f9c:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f9e:	d05d      	beq.n	800705c <HAL_SPI_Transmit+0x12c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	0652      	lsls	r2, r2, #25
 8006fa4:	d403      	bmi.n	8006fae <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fac:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fae:	68e2      	ldr	r2, [r4, #12]
 8006fb0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fb4:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fb6:	d02a      	beq.n	800700e <HAL_SPI_Transmit+0xde>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fb8:	2a00      	cmp	r2, #0
 8006fba:	d058      	beq.n	800706e <HAL_SPI_Transmit+0x13e>
 8006fbc:	2f01      	cmp	r7, #1
 8006fbe:	d056      	beq.n	800706e <HAL_SPI_Transmit+0x13e>
    while (hspi->TxXferCount > 0U)
 8006fc0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	b993      	cbnz	r3, 8006fec <HAL_SPI_Transmit+0xbc>
 8006fc6:	e060      	b.n	800708a <HAL_SPI_Transmit+0x15a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fc8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006fca:	7812      	ldrb	r2, [r2, #0]
 8006fcc:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8006fce:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006fd4:	f10c 3cff 	add.w	ip, ip, #4294967295
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fd8:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 8006fda:	fa1f fc8c 	uxth.w	ip, ip
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fde:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006fe0:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006fe4:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8006fe6:	b289      	uxth	r1, r1
 8006fe8:	2900      	cmp	r1, #0
 8006fea:	d04e      	beq.n	800708a <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	0792      	lsls	r2, r2, #30
 8006ff2:	d4e9      	bmi.n	8006fc8 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ff4:	f7fd fde2 	bl	8004bbc <HAL_GetTick>
 8006ff8:	1b80      	subs	r0, r0, r6
 8006ffa:	42a8      	cmp	r0, r5
 8006ffc:	d342      	bcc.n	8007084 <HAL_SPI_Transmit+0x154>
 8006ffe:	1c6b      	adds	r3, r5, #1
 8007000:	d0f0      	beq.n	8006fe4 <HAL_SPI_Transmit+0xb4>
          errorcode = HAL_TIMEOUT;
 8007002:	2003      	movs	r0, #3
 8007004:	e7ab      	b.n	8006f5e <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8007006:	2002      	movs	r0, #2
}
 8007008:	b002      	add	sp, #8
 800700a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800700e:	2a00      	cmp	r2, #0
 8007010:	d151      	bne.n	80070b6 <HAL_SPI_Transmit+0x186>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007012:	4641      	mov	r1, r8
 8007014:	f831 2b02 	ldrh.w	r2, [r1], #2
 8007018:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800701a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800701c:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800701e:	3a01      	subs	r2, #1
 8007020:	b292      	uxth	r2, r2
 8007022:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8007024:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8007026:	b292      	uxth	r2, r2
 8007028:	b96a      	cbnz	r2, 8007046 <HAL_SPI_Transmit+0x116>
 800702a:	e02e      	b.n	800708a <HAL_SPI_Transmit+0x15a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800702c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800702e:	f832 1b02 	ldrh.w	r1, [r2], #2
 8007032:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8007034:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007036:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8007038:	3b01      	subs	r3, #1
 800703a:	b29b      	uxth	r3, r3
 800703c:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800703e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007040:	b29b      	uxth	r3, r3
 8007042:	b313      	cbz	r3, 800708a <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	689a      	ldr	r2, [r3, #8]
 8007048:	0790      	lsls	r0, r2, #30
 800704a:	d4ef      	bmi.n	800702c <HAL_SPI_Transmit+0xfc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800704c:	f7fd fdb6 	bl	8004bbc <HAL_GetTick>
 8007050:	1b80      	subs	r0, r0, r6
 8007052:	42a8      	cmp	r0, r5
 8007054:	d332      	bcc.n	80070bc <HAL_SPI_Transmit+0x18c>
 8007056:	1c69      	adds	r1, r5, #1
 8007058:	d0f1      	beq.n	800703e <HAL_SPI_Transmit+0x10e>
 800705a:	e7d2      	b.n	8007002 <HAL_SPI_Transmit+0xd2>
    __HAL_SPI_DISABLE(hspi);
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007062:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	e798      	b.n	8006fa0 <HAL_SPI_Transmit+0x70>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800706e:	f898 2000 	ldrb.w	r2, [r8]
 8007072:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8007074:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007076:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8007078:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800707a:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 800707c:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800707e:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8007080:	86e3      	strh	r3, [r4, #54]	; 0x36
 8007082:	e79d      	b.n	8006fc0 <HAL_SPI_Transmit+0x90>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007084:	2d00      	cmp	r5, #0
 8007086:	d1ad      	bne.n	8006fe4 <HAL_SPI_Transmit+0xb4>
 8007088:	e7bb      	b.n	8007002 <HAL_SPI_Transmit+0xd2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800708a:	4632      	mov	r2, r6
 800708c:	4629      	mov	r1, r5
 800708e:	4620      	mov	r0, r4
 8007090:	f7ff feba 	bl	8006e08 <SPI_EndRxTxTransaction>
 8007094:	b108      	cbz	r0, 800709a <HAL_SPI_Transmit+0x16a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007096:	2320      	movs	r3, #32
 8007098:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800709a:	68a3      	ldr	r3, [r4, #8]
 800709c:	b933      	cbnz	r3, 80070ac <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800709e:	6822      	ldr	r2, [r4, #0]
 80070a0:	9301      	str	r3, [sp, #4]
 80070a2:	68d3      	ldr	r3, [r2, #12]
 80070a4:	9301      	str	r3, [sp, #4]
 80070a6:	6893      	ldr	r3, [r2, #8]
 80070a8:	9301      	str	r3, [sp, #4]
 80070aa:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80070ae:	3800      	subs	r0, #0
 80070b0:	bf18      	it	ne
 80070b2:	2001      	movne	r0, #1
error:
 80070b4:	e753      	b.n	8006f5e <HAL_SPI_Transmit+0x2e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070b6:	2f01      	cmp	r7, #1
 80070b8:	d1b4      	bne.n	8007024 <HAL_SPI_Transmit+0xf4>
 80070ba:	e7aa      	b.n	8007012 <HAL_SPI_Transmit+0xe2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070bc:	2d00      	cmp	r5, #0
 80070be:	d1be      	bne.n	800703e <HAL_SPI_Transmit+0x10e>
 80070c0:	e79f      	b.n	8007002 <HAL_SPI_Transmit+0xd2>
 80070c2:	bf00      	nop

080070c4 <HAL_SPI_TransmitReceive>:
{
 80070c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070c8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80070ca:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
{
 80070ce:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 80070d0:	2801      	cmp	r0, #1
{
 80070d2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80070d4:	f000 8083 	beq.w	80071de <HAL_SPI_TransmitReceive+0x11a>
 80070d8:	461f      	mov	r7, r3
 80070da:	2301      	movs	r3, #1
 80070dc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80070e0:	4689      	mov	r9, r1
 80070e2:	4690      	mov	r8, r2
 80070e4:	f7fd fd6a 	bl	8004bbc <HAL_GetTick>
 80070e8:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80070ea:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 80070ee:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070f0:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 80070f2:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070f4:	d011      	beq.n	800711a <HAL_SPI_TransmitReceive+0x56>
 80070f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070fa:	d009      	beq.n	8007110 <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 80070fc:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80070fe:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8007100:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8007102:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007106:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800710a:	b003      	add	sp, #12
 800710c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007110:	68a2      	ldr	r2, [r4, #8]
 8007112:	2a00      	cmp	r2, #0
 8007114:	d1f2      	bne.n	80070fc <HAL_SPI_TransmitReceive+0x38>
 8007116:	2904      	cmp	r1, #4
 8007118:	d1f0      	bne.n	80070fc <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800711a:	f1b9 0f00 	cmp.w	r9, #0
 800711e:	d062      	beq.n	80071e6 <HAL_SPI_TransmitReceive+0x122>
 8007120:	f1b8 0f00 	cmp.w	r8, #0
 8007124:	d05f      	beq.n	80071e6 <HAL_SPI_TransmitReceive+0x122>
 8007126:	2f00      	cmp	r7, #0
 8007128:	d05d      	beq.n	80071e6 <HAL_SPI_TransmitReceive+0x122>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800712a:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800712e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007132:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007134:	bf1c      	itt	ne
 8007136:	2205      	movne	r2, #5
 8007138:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800713c:	2200      	movs	r2, #0
 800713e:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8007140:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007144:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8007146:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8007148:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800714a:	6811      	ldr	r1, [r2, #0]
  hspi->RxXferSize  = Size;
 800714c:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800714e:	0649      	lsls	r1, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007150:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007154:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007156:	d403      	bmi.n	8007160 <HAL_SPI_TransmitReceive+0x9c>
    __HAL_SPI_ENABLE(hspi);
 8007158:	6811      	ldr	r1, [r2, #0]
 800715a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800715e:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007160:	68e1      	ldr	r1, [r4, #12]
 8007162:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8007166:	d061      	beq.n	800722c <HAL_SPI_TransmitReceive+0x168>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007168:	2b00      	cmp	r3, #0
 800716a:	d03e      	beq.n	80071ea <HAL_SPI_TransmitReceive+0x126>
 800716c:	2f01      	cmp	r7, #1
 800716e:	d03c      	beq.n	80071ea <HAL_SPI_TransmitReceive+0x126>
        txallowed = 1U;
 8007170:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007172:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007174:	b29b      	uxth	r3, r3
 8007176:	b91b      	cbnz	r3, 8007180 <HAL_SPI_TransmitReceive+0xbc>
 8007178:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800717a:	b29b      	uxth	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	d042      	beq.n	8007206 <HAL_SPI_TransmitReceive+0x142>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007180:	6822      	ldr	r2, [r4, #0]
 8007182:	6893      	ldr	r3, [r2, #8]
 8007184:	0799      	lsls	r1, r3, #30
 8007186:	d50f      	bpl.n	80071a8 <HAL_SPI_TransmitReceive+0xe4>
 8007188:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800718a:	b29b      	uxth	r3, r3
 800718c:	b163      	cbz	r3, 80071a8 <HAL_SPI_TransmitReceive+0xe4>
 800718e:	b15f      	cbz	r7, 80071a8 <HAL_SPI_TransmitReceive+0xe4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007190:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8007196:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8007198:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800719a:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 800719c:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800719e:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 80071a0:	6322      	str	r2, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071a2:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 80071a4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80071a6:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071a8:	6893      	ldr	r3, [r2, #8]
 80071aa:	f013 0301 	ands.w	r3, r3, #1
 80071ae:	d00d      	beq.n	80071cc <HAL_SPI_TransmitReceive+0x108>
 80071b0:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80071b2:	b289      	uxth	r1, r1
 80071b4:	b151      	cbz	r1, 80071cc <HAL_SPI_TransmitReceive+0x108>
        txallowed = 1U;
 80071b6:	461f      	mov	r7, r3
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80071b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80071ba:	68d2      	ldr	r2, [r2, #12]
 80071bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80071be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80071c0:	3301      	adds	r3, #1
 80071c2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80071c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80071c6:	3b01      	subs	r3, #1
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80071cc:	f7fd fcf6 	bl	8004bbc <HAL_GetTick>
 80071d0:	1b80      	subs	r0, r0, r6
 80071d2:	42a8      	cmp	r0, r5
 80071d4:	d314      	bcc.n	8007200 <HAL_SPI_TransmitReceive+0x13c>
 80071d6:	1c6b      	adds	r3, r5, #1
 80071d8:	d0cb      	beq.n	8007172 <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 80071da:	2003      	movs	r0, #3
 80071dc:	e78f      	b.n	80070fe <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 80071de:	2002      	movs	r0, #2
}
 80071e0:	b003      	add	sp, #12
 80071e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 80071e6:	2001      	movs	r0, #1
 80071e8:	e789      	b.n	80070fe <HAL_SPI_TransmitReceive+0x3a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071ea:	f899 3000 	ldrb.w	r3, [r9]
 80071ee:	7313      	strb	r3, [r2, #12]
      hspi->TxXferCount--;
 80071f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80071f4:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071f6:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80071f8:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071fa:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80071fc:	86e3      	strh	r3, [r4, #54]	; 0x36
 80071fe:	e7b7      	b.n	8007170 <HAL_SPI_TransmitReceive+0xac>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007200:	2d00      	cmp	r5, #0
 8007202:	d1b6      	bne.n	8007172 <HAL_SPI_TransmitReceive+0xae>
 8007204:	e7e9      	b.n	80071da <HAL_SPI_TransmitReceive+0x116>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007206:	4632      	mov	r2, r6
 8007208:	4629      	mov	r1, r5
 800720a:	4620      	mov	r0, r4
 800720c:	f7ff fdfc 	bl	8006e08 <SPI_EndRxTxTransaction>
 8007210:	2800      	cmp	r0, #0
 8007212:	d14c      	bne.n	80072ae <HAL_SPI_TransmitReceive+0x1ea>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007214:	68a3      	ldr	r3, [r4, #8]
 8007216:	2b00      	cmp	r3, #0
 8007218:	f47f af71 	bne.w	80070fe <HAL_SPI_TransmitReceive+0x3a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	9001      	str	r0, [sp, #4]
 8007220:	68da      	ldr	r2, [r3, #12]
 8007222:	9201      	str	r2, [sp, #4]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	9301      	str	r3, [sp, #4]
 8007228:	9b01      	ldr	r3, [sp, #4]
 800722a:	e768      	b.n	80070fe <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800722c:	2b00      	cmp	r3, #0
 800722e:	d13b      	bne.n	80072a8 <HAL_SPI_TransmitReceive+0x1e4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007230:	4649      	mov	r1, r9
 8007232:	f831 3b02 	ldrh.w	r3, [r1], #2
 8007236:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8007238:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800723a:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800723c:	3b01      	subs	r3, #1
 800723e:	b29b      	uxth	r3, r3
 8007240:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8007242:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007244:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007246:	b29b      	uxth	r3, r3
 8007248:	b91b      	cbnz	r3, 8007252 <HAL_SPI_TransmitReceive+0x18e>
 800724a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800724c:	b29b      	uxth	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d0d9      	beq.n	8007206 <HAL_SPI_TransmitReceive+0x142>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007252:	6822      	ldr	r2, [r4, #0]
 8007254:	6893      	ldr	r3, [r2, #8]
 8007256:	079b      	lsls	r3, r3, #30
 8007258:	d50d      	bpl.n	8007276 <HAL_SPI_TransmitReceive+0x1b2>
 800725a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800725c:	b29b      	uxth	r3, r3
 800725e:	b153      	cbz	r3, 8007276 <HAL_SPI_TransmitReceive+0x1b2>
 8007260:	b14f      	cbz	r7, 8007276 <HAL_SPI_TransmitReceive+0x1b2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007262:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007264:	f833 1b02 	ldrh.w	r1, [r3], #2
 8007268:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800726a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800726c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800726e:	3b01      	subs	r3, #1
 8007270:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8007272:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8007274:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007276:	6893      	ldr	r3, [r2, #8]
 8007278:	f013 0301 	ands.w	r3, r3, #1
 800727c:	d00c      	beq.n	8007298 <HAL_SPI_TransmitReceive+0x1d4>
 800727e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8007280:	b289      	uxth	r1, r1
 8007282:	b149      	cbz	r1, 8007298 <HAL_SPI_TransmitReceive+0x1d4>
        txallowed = 1U;
 8007284:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007286:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007288:	68d2      	ldr	r2, [r2, #12]
 800728a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800728e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8007290:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007292:	3b01      	subs	r3, #1
 8007294:	b29b      	uxth	r3, r3
 8007296:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007298:	f7fd fc90 	bl	8004bbc <HAL_GetTick>
 800729c:	1b80      	subs	r0, r0, r6
 800729e:	42a8      	cmp	r0, r5
 80072a0:	d3d0      	bcc.n	8007244 <HAL_SPI_TransmitReceive+0x180>
 80072a2:	1c68      	adds	r0, r5, #1
 80072a4:	d0ce      	beq.n	8007244 <HAL_SPI_TransmitReceive+0x180>
 80072a6:	e798      	b.n	80071da <HAL_SPI_TransmitReceive+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072a8:	2f01      	cmp	r7, #1
 80072aa:	d1ca      	bne.n	8007242 <HAL_SPI_TransmitReceive+0x17e>
 80072ac:	e7c0      	b.n	8007230 <HAL_SPI_TransmitReceive+0x16c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072ae:	2320      	movs	r3, #32
 80072b0:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80072b2:	2001      	movs	r0, #1
    goto error;
 80072b4:	e723      	b.n	80070fe <HAL_SPI_TransmitReceive+0x3a>
 80072b6:	bf00      	nop

080072b8 <HAL_SPI_Transmit_DMA>:
{
 80072b8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hspi);
 80072ba:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d056      	beq.n	8007370 <HAL_SPI_Transmit_DMA+0xb8>
  if (hspi->State != HAL_SPI_STATE_READY)
 80072c2:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80072c6:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80072c8:	2001      	movs	r0, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 80072ca:	4283      	cmp	r3, r0
  __HAL_LOCK(hspi);
 80072cc:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 80072d0:	b2dd      	uxtb	r5, r3
 80072d2:	d005      	beq.n	80072e0 <HAL_SPI_Transmit_DMA+0x28>
    errorcode = HAL_BUSY;
 80072d4:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 80072d6:	2300      	movs	r3, #0
 80072d8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80072dc:	4628      	mov	r0, r5
 80072de:	bd70      	pop	{r4, r5, r6, pc}
  if ((pData == NULL) || (Size == 0U))
 80072e0:	2900      	cmp	r1, #0
 80072e2:	d0f8      	beq.n	80072d6 <HAL_SPI_Transmit_DMA+0x1e>
 80072e4:	2a00      	cmp	r2, #0
 80072e6:	d0f6      	beq.n	80072d6 <HAL_SPI_Transmit_DMA+0x1e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80072e8:	2303      	movs	r3, #3
 80072ea:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072ee:	2300      	movs	r3, #0
 80072f0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxXferSize  = Size;
 80072f2:	86a2      	strh	r2, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80072f4:	86e2      	strh	r2, [r4, #54]	; 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072f6:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80072f8:	6321      	str	r1, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072fa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->RxISR       = NULL;
 80072fe:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
    __HAL_SPI_DISABLE(hspi);
 8007302:	6822      	ldr	r2, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007304:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007306:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007308:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800730a:	d028      	beq.n	800735e <HAL_SPI_Transmit_DMA+0xa6>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800730c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800730e:	4e1a      	ldr	r6, [pc, #104]	; (8007378 <HAL_SPI_Transmit_DMA+0xc0>)
                                 hspi->TxXferCount))
 8007310:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007312:	6406      	str	r6, [r0, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007314:	4e19      	ldr	r6, [pc, #100]	; (800737c <HAL_SPI_Transmit_DMA+0xc4>)
 8007316:	63c6      	str	r6, [r0, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007318:	4e19      	ldr	r6, [pc, #100]	; (8007380 <HAL_SPI_Transmit_DMA+0xc8>)
 800731a:	64c6      	str	r6, [r0, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 800731c:	2600      	movs	r6, #0
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800731e:	320c      	adds	r2, #12
 8007320:	b29b      	uxth	r3, r3
  hspi->hdmatx->XferAbortCallback = NULL;
 8007322:	6506      	str	r6, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007324:	f7fe fa90 	bl	8005848 <HAL_DMA_Start_IT>
 8007328:	b988      	cbnz	r0, 800734e <HAL_SPI_Transmit_DMA+0x96>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	0652      	lsls	r2, r2, #25
 8007330:	d403      	bmi.n	800733a <HAL_SPI_Transmit_DMA+0x82>
    __HAL_SPI_ENABLE(hspi);
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007338:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	f042 0220 	orr.w	r2, r2, #32
 8007340:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	f042 0202 	orr.w	r2, r2, #2
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007348:	2500      	movs	r5, #0
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800734a:	605a      	str	r2, [r3, #4]
 800734c:	e7c3      	b.n	80072d6 <HAL_SPI_Transmit_DMA+0x1e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800734e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8007350:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007352:	f043 0310 	orr.w	r3, r3, #16
 8007356:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8007358:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    goto error;
 800735c:	e7bb      	b.n	80072d6 <HAL_SPI_Transmit_DMA+0x1e>
    __HAL_SPI_DISABLE(hspi);
 800735e:	6813      	ldr	r3, [r2, #0]
 8007360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007364:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8007366:	6813      	ldr	r3, [r2, #0]
 8007368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	e7cd      	b.n	800730c <HAL_SPI_Transmit_DMA+0x54>
  __HAL_LOCK(hspi);
 8007370:	2502      	movs	r5, #2
}
 8007372:	4628      	mov	r0, r5
 8007374:	bd70      	pop	{r4, r5, r6, pc}
 8007376:	bf00      	nop
 8007378:	08007499 	.word	0x08007499
 800737c:	080074e5 	.word	0x080074e5
 8007380:	080074c1 	.word	0x080074c1

08007384 <HAL_SPI_TransmitReceive_DMA>:
{
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8007388:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 800738c:	2801      	cmp	r0, #1
 800738e:	d06a      	beq.n	8007466 <HAL_SPI_TransmitReceive_DMA+0xe2>
 8007390:	2001      	movs	r0, #1
 8007392:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  tmp_state           = hspi->State;
 8007396:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800739a:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 800739c:	fa5f fc80 	uxtb.w	ip, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80073a0:	d00e      	beq.n	80073c0 <HAL_SPI_TransmitReceive_DMA+0x3c>
 80073a2:	6860      	ldr	r0, [r4, #4]
 80073a4:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 80073a8:	d004      	beq.n	80073b4 <HAL_SPI_TransmitReceive_DMA+0x30>
    errorcode = HAL_BUSY;
 80073aa:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80073ac:	2300      	movs	r3, #0
 80073ae:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073b4:	68a0      	ldr	r0, [r4, #8]
 80073b6:	2800      	cmp	r0, #0
 80073b8:	d1f7      	bne.n	80073aa <HAL_SPI_TransmitReceive_DMA+0x26>
 80073ba:	f1bc 0f04 	cmp.w	ip, #4
 80073be:	d1f4      	bne.n	80073aa <HAL_SPI_TransmitReceive_DMA+0x26>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073c0:	2900      	cmp	r1, #0
 80073c2:	d04e      	beq.n	8007462 <HAL_SPI_TransmitReceive_DMA+0xde>
 80073c4:	2a00      	cmp	r2, #0
 80073c6:	d04c      	beq.n	8007462 <HAL_SPI_TransmitReceive_DMA+0xde>
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d04a      	beq.n	8007462 <HAL_SPI_TransmitReceive_DMA+0xde>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073cc:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80073d0:	6321      	str	r1, [r4, #48]	; 0x30
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073d2:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073d4:	bf1c      	itt	ne
 80073d6:	2005      	movne	r0, #5
 80073d8:	f884 0051 	strbne.w	r0, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073dc:	2000      	movs	r0, #0
 80073de:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->TxXferCount = Size;
 80073e0:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxXferCount = Size;
 80073e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80073e4:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
  hspi->TxXferSize  = Size;
 80073e8:	86a3      	strh	r3, [r4, #52]	; 0x34
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80073ea:	2904      	cmp	r1, #4
  hspi->RxXferSize  = Size;
 80073ec:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 80073ee:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80073f2:	bf08      	it	eq
 80073f4:	4921      	ldreq	r1, [pc, #132]	; (800747c <HAL_SPI_TransmitReceive_DMA+0xf8>)
 80073f6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80073f8:	bf0e      	itee	eq
 80073fa:	4b21      	ldreq	r3, [pc, #132]	; (8007480 <HAL_SPI_TransmitReceive_DMA+0xfc>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80073fc:	4921      	ldrne	r1, [pc, #132]	; (8007484 <HAL_SPI_TransmitReceive_DMA+0x100>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80073fe:	4b22      	ldrne	r3, [pc, #136]	; (8007488 <HAL_SPI_TransmitReceive_DMA+0x104>)
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007400:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007402:	4d22      	ldr	r5, [pc, #136]	; (800748c <HAL_SPI_TransmitReceive_DMA+0x108>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007404:	e9c0 310f 	strd	r3, r1, [r0, #60]	; 0x3c
                                 hspi->RxXferCount))
 8007408:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800740a:	6821      	ldr	r1, [r4, #0]
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800740c:	64c5      	str	r5, [r0, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800740e:	2500      	movs	r5, #0
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007410:	b29b      	uxth	r3, r3
 8007412:	310c      	adds	r1, #12
  hspi->hdmarx->XferAbortCallback = NULL;
 8007414:	6505      	str	r5, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007416:	f7fe fa17 	bl	8005848 <HAL_DMA_Start_IT>
 800741a:	bb30      	cbnz	r0, 800746a <HAL_SPI_TransmitReceive_DMA+0xe6>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800741c:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800741e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007420:	6853      	ldr	r3, [r2, #4]
 8007422:	f043 0301 	orr.w	r3, r3, #1
 8007426:	6053      	str	r3, [r2, #4]
                                 hspi->TxXferCount))
 8007428:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800742a:	320c      	adds	r2, #12
  hspi->hdmatx->XferCpltCallback     = NULL;
 800742c:	e9c1 000f 	strd	r0, r0, [r1, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007430:	e9c1 0013 	strd	r0, r0, [r1, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007434:	b29b      	uxth	r3, r3
 8007436:	4608      	mov	r0, r1
 8007438:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800743a:	f7fe fa05 	bl	8005848 <HAL_DMA_Start_IT>
 800743e:	b9a0      	cbnz	r0, 800746a <HAL_SPI_TransmitReceive_DMA+0xe6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	0652      	lsls	r2, r2, #25
 8007446:	d403      	bmi.n	8007450 <HAL_SPI_TransmitReceive_DMA+0xcc>
    __HAL_SPI_ENABLE(hspi);
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800744e:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	f042 0220 	orr.w	r2, r2, #32
 8007456:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	f042 0202 	orr.w	r2, r2, #2
 800745e:	605a      	str	r2, [r3, #4]
 8007460:	e7a4      	b.n	80073ac <HAL_SPI_TransmitReceive_DMA+0x28>
    errorcode = HAL_ERROR;
 8007462:	2001      	movs	r0, #1
 8007464:	e7a2      	b.n	80073ac <HAL_SPI_TransmitReceive_DMA+0x28>
  __HAL_LOCK(hspi);
 8007466:	2002      	movs	r0, #2
}
 8007468:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800746a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800746c:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800746e:	f043 0310 	orr.w	r3, r3, #16
 8007472:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007474:	4610      	mov	r0, r2
    hspi->State = HAL_SPI_STATE_READY;
 8007476:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    goto error;
 800747a:	e797      	b.n	80073ac <HAL_SPI_TransmitReceive_DMA+0x28>
 800747c:	080074a9 	.word	0x080074a9
 8007480:	08007555 	.word	0x08007555
 8007484:	080074b5 	.word	0x080074b5
 8007488:	080075c1 	.word	0x080075c1
 800748c:	080074c1 	.word	0x080074c1

08007490 <HAL_SPI_RxCpltCallback>:
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop

08007494 <HAL_SPI_TxHalfCpltCallback>:
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop

08007498 <SPI_DMAHalfTransmitCplt>:
{
 8007498:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800749a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800749c:	f7ff fffa 	bl	8007494 <HAL_SPI_TxHalfCpltCallback>
}
 80074a0:	bd08      	pop	{r3, pc}
 80074a2:	bf00      	nop

080074a4 <HAL_SPI_RxHalfCpltCallback>:
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop

080074a8 <SPI_DMAHalfReceiveCplt>:
{
 80074a8:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 80074aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80074ac:	f7ff fffa 	bl	80074a4 <HAL_SPI_RxHalfCpltCallback>
}
 80074b0:	bd08      	pop	{r3, pc}
 80074b2:	bf00      	nop

080074b4 <SPI_DMAHalfTransmitReceiveCplt>:
{
 80074b4:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80074b6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80074b8:	f7fc ffd2 	bl	8004460 <HAL_SPI_TxRxHalfCpltCallback>
}
 80074bc:	bd08      	pop	{r3, pc}
 80074be:	bf00      	nop

080074c0 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80074c0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80074c2:	6802      	ldr	r2, [r0, #0]
{
 80074c4:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80074c6:	6853      	ldr	r3, [r2, #4]
 80074c8:	f023 0303 	bic.w	r3, r3, #3
 80074cc:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80074ce:	6d43      	ldr	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80074d0:	2101      	movs	r1, #1
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80074d2:	f043 0310 	orr.w	r3, r3, #16
 80074d6:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80074d8:	f880 1051 	strb.w	r1, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 80074dc:	f7fd f802 	bl	80044e4 <HAL_SPI_ErrorCallback>
}
 80074e0:	bd08      	pop	{r3, pc}
 80074e2:	bf00      	nop

080074e4 <SPI_DMATransmitCplt>:
{
 80074e4:	b530      	push	{r4, r5, lr}
 80074e6:	4605      	mov	r5, r0
 80074e8:	b083      	sub	sp, #12
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80074ea:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 80074ec:	f7fd fb66 	bl	8004bbc <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80074f0:	682b      	ldr	r3, [r5, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	05db      	lsls	r3, r3, #23
 80074f6:	d422      	bmi.n	800753e <SPI_DMATransmitCplt+0x5a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	4602      	mov	r2, r0
 80074fc:	6858      	ldr	r0, [r3, #4]
 80074fe:	f020 0020 	bic.w	r0, r0, #32
 8007502:	6058      	str	r0, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007504:	6858      	ldr	r0, [r3, #4]
 8007506:	f020 0002 	bic.w	r0, r0, #2
 800750a:	6058      	str	r0, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800750c:	2164      	movs	r1, #100	; 0x64
 800750e:	4620      	mov	r0, r4
 8007510:	f7ff fc7a 	bl	8006e08 <SPI_EndRxTxTransaction>
 8007514:	b118      	cbz	r0, 800751e <SPI_DMATransmitCplt+0x3a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007516:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007518:	f043 0320 	orr.w	r3, r3, #32
 800751c:	6563      	str	r3, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800751e:	68a3      	ldr	r3, [r4, #8]
 8007520:	b933      	cbnz	r3, 8007530 <SPI_DMATransmitCplt+0x4c>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007522:	6822      	ldr	r2, [r4, #0]
 8007524:	9301      	str	r3, [sp, #4]
 8007526:	68d3      	ldr	r3, [r2, #12]
 8007528:	9301      	str	r3, [sp, #4]
 800752a:	6893      	ldr	r3, [r2, #8]
 800752c:	9301      	str	r3, [sp, #4]
 800752e:	9b01      	ldr	r3, [sp, #4]
    hspi->State = HAL_SPI_STATE_READY;
 8007530:	2301      	movs	r3, #1
    hspi->TxXferCount = 0U;
 8007532:	2200      	movs	r2, #0
 8007534:	86e2      	strh	r2, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007536:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800753a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800753c:	b923      	cbnz	r3, 8007548 <SPI_DMATransmitCplt+0x64>
  HAL_SPI_TxCpltCallback(hspi);
 800753e:	4620      	mov	r0, r4
 8007540:	f7fc ffe0 	bl	8004504 <HAL_SPI_TxCpltCallback>
}
 8007544:	b003      	add	sp, #12
 8007546:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8007548:	4620      	mov	r0, r4
 800754a:	f7fc ffcb 	bl	80044e4 <HAL_SPI_ErrorCallback>
}
 800754e:	b003      	add	sp, #12
 8007550:	bd30      	pop	{r4, r5, pc}
 8007552:	bf00      	nop

08007554 <SPI_DMAReceiveCplt>:
{
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007558:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 800755a:	f7fd fb2f 	bl	8004bbc <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800755e:	682b      	ldr	r3, [r5, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	05db      	lsls	r3, r3, #23
 8007564:	d417      	bmi.n	8007596 <SPI_DMAReceiveCplt+0x42>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007566:	6823      	ldr	r3, [r4, #0]
 8007568:	6859      	ldr	r1, [r3, #4]
 800756a:	4602      	mov	r2, r0
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800756c:	68a0      	ldr	r0, [r4, #8]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800756e:	f021 0120 	bic.w	r1, r1, #32
 8007572:	6059      	str	r1, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007574:	b1b0      	cbz	r0, 80075a4 <SPI_DMAReceiveCplt+0x50>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007576:	6859      	ldr	r1, [r3, #4]
 8007578:	f021 0101 	bic.w	r1, r1, #1
 800757c:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800757e:	2164      	movs	r1, #100	; 0x64
 8007580:	4620      	mov	r0, r4
 8007582:	f7ff fc05 	bl	8006d90 <SPI_EndRxTransaction>
 8007586:	b950      	cbnz	r0, 800759e <SPI_DMAReceiveCplt+0x4a>
    hspi->State = HAL_SPI_STATE_READY;
 8007588:	2301      	movs	r3, #1
    hspi->RxXferCount = 0U;
 800758a:	2200      	movs	r2, #0
 800758c:	87e2      	strh	r2, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800758e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007592:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007594:	b97b      	cbnz	r3, 80075b6 <SPI_DMAReceiveCplt+0x62>
  HAL_SPI_RxCpltCallback(hspi);
 8007596:	4620      	mov	r0, r4
 8007598:	f7ff ff7a 	bl	8007490 <HAL_SPI_RxCpltCallback>
}
 800759c:	bd38      	pop	{r3, r4, r5, pc}
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800759e:	2320      	movs	r3, #32
 80075a0:	6563      	str	r3, [r4, #84]	; 0x54
 80075a2:	e7f1      	b.n	8007588 <SPI_DMAReceiveCplt+0x34>
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80075a4:	6861      	ldr	r1, [r4, #4]
 80075a6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80075aa:	d1e4      	bne.n	8007576 <SPI_DMAReceiveCplt+0x22>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80075ac:	6859      	ldr	r1, [r3, #4]
 80075ae:	f021 0103 	bic.w	r1, r1, #3
 80075b2:	6059      	str	r1, [r3, #4]
 80075b4:	e7e3      	b.n	800757e <SPI_DMAReceiveCplt+0x2a>
      HAL_SPI_ErrorCallback(hspi);
 80075b6:	4620      	mov	r0, r4
 80075b8:	f7fc ff94 	bl	80044e4 <HAL_SPI_ErrorCallback>
}
 80075bc:	bd38      	pop	{r3, r4, r5, pc}
 80075be:	bf00      	nop

080075c0 <SPI_DMATransmitReceiveCplt>:
{
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80075c4:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 80075c6:	f7fd faf9 	bl	8004bbc <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80075ca:	682b      	ldr	r3, [r5, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	05db      	lsls	r3, r3, #23
 80075d0:	d41b      	bmi.n	800760a <SPI_DMATransmitReceiveCplt+0x4a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80075d2:	4602      	mov	r2, r0
 80075d4:	6820      	ldr	r0, [r4, #0]
 80075d6:	6843      	ldr	r3, [r0, #4]
 80075d8:	f023 0320 	bic.w	r3, r3, #32
 80075dc:	6043      	str	r3, [r0, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80075de:	2164      	movs	r1, #100	; 0x64
 80075e0:	4620      	mov	r0, r4
 80075e2:	f7ff fc11 	bl	8006e08 <SPI_EndRxTxTransaction>
 80075e6:	b118      	cbz	r0, 80075f0 <SPI_DMATransmitReceiveCplt+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80075ea:	f043 0320 	orr.w	r3, r3, #32
 80075ee:	6563      	str	r3, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80075f0:	6821      	ldr	r1, [r4, #0]
 80075f2:	684b      	ldr	r3, [r1, #4]
    hspi->TxXferCount = 0U;
 80075f4:	2200      	movs	r2, #0
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80075f6:	f023 0303 	bic.w	r3, r3, #3
    hspi->State = HAL_SPI_STATE_READY;
 80075fa:	2001      	movs	r0, #1
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80075fc:	604b      	str	r3, [r1, #4]
    hspi->TxXferCount = 0U;
 80075fe:	86e2      	strh	r2, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8007600:	87e2      	strh	r2, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007602:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007606:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007608:	b91b      	cbnz	r3, 8007612 <SPI_DMATransmitReceiveCplt+0x52>
  HAL_SPI_TxRxCpltCallback(hspi);
 800760a:	4620      	mov	r0, r4
 800760c:	f7fc ff36 	bl	800447c <HAL_SPI_TxRxCpltCallback>
}
 8007610:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8007612:	4620      	mov	r0, r4
 8007614:	f7fc ff66 	bl	80044e4 <HAL_SPI_ErrorCallback>
}
 8007618:	bd38      	pop	{r3, r4, r5, pc}
 800761a:	bf00      	nop

0800761c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800761c:	6a03      	ldr	r3, [r0, #32]
 800761e:	f023 0301 	bic.w	r3, r3, #1
 8007622:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007624:	6a03      	ldr	r3, [r0, #32]
{
 8007626:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007628:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800762a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800762c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800762e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007632:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007634:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8007636:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800763a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800763c:	4d0b      	ldr	r5, [pc, #44]	; (800766c <TIM_OC1_SetConfig+0x50>)
 800763e:	42a8      	cmp	r0, r5
 8007640:	d006      	beq.n	8007650 <TIM_OC1_SetConfig+0x34>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007642:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007644:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007646:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007648:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 800764a:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800764c:	6203      	str	r3, [r0, #32]
}
 800764e:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8007650:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8007652:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007656:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8007658:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800765c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8007660:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8007662:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8007666:	432c      	orrs	r4, r5
 8007668:	e7eb      	b.n	8007642 <TIM_OC1_SetConfig+0x26>
 800766a:	bf00      	nop
 800766c:	40010000 	.word	0x40010000

08007670 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007670:	6a03      	ldr	r3, [r0, #32]
 8007672:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007676:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007678:	6a03      	ldr	r3, [r0, #32]
{
 800767a:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800767c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800767e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007680:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007682:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007686:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007688:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800768a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800768e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007692:	4d0c      	ldr	r5, [pc, #48]	; (80076c4 <TIM_OC3_SetConfig+0x54>)
 8007694:	42a8      	cmp	r0, r5
 8007696:	d006      	beq.n	80076a6 <TIM_OC3_SetConfig+0x36>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007698:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800769a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800769c:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800769e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 80076a0:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80076a2:	6203      	str	r3, [r0, #32]
}
 80076a4:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076a6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80076a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076ac:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076b0:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076b4:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076b8:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80076ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076be:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80076c2:	e7e9      	b.n	8007698 <TIM_OC3_SetConfig+0x28>
 80076c4:	40010000 	.word	0x40010000

080076c8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076c8:	6a03      	ldr	r3, [r0, #32]
 80076ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076ce:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076d0:	6a03      	ldr	r3, [r0, #32]
{
 80076d2:	b430      	push	{r4, r5}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076d6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076da:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076de:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076e2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80076e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076e8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ec:	4d07      	ldr	r5, [pc, #28]	; (800770c <TIM_OC4_SetConfig+0x44>)
 80076ee:	42a8      	cmp	r0, r5
 80076f0:	d006      	beq.n	8007700 <TIM_OC4_SetConfig+0x38>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076f2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80076f4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80076f6:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80076f8:	bc30      	pop	{r4, r5}
  TIMx->CCR4 = OC_Config->Pulse;
 80076fa:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80076fc:	6203      	str	r3, [r0, #32]
}
 80076fe:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007700:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007702:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007706:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800770a:	e7f2      	b.n	80076f2 <TIM_OC4_SetConfig+0x2a>
 800770c:	40010000 	.word	0x40010000

08007710 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007710:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007714:	2b01      	cmp	r3, #1
 8007716:	d124      	bne.n	8007762 <HAL_TIM_Base_Start+0x52>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007718:	6803      	ldr	r3, [r0, #0]
 800771a:	4a14      	ldr	r2, [pc, #80]	; (800776c <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800771c:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800771e:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8007720:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007724:	d012      	beq.n	800774c <HAL_TIM_Base_Start+0x3c>
 8007726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800772a:	d00f      	beq.n	800774c <HAL_TIM_Base_Start+0x3c>
 800772c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007730:	4293      	cmp	r3, r2
 8007732:	d00b      	beq.n	800774c <HAL_TIM_Base_Start+0x3c>
 8007734:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007738:	4293      	cmp	r3, r2
 800773a:	d007      	beq.n	800774c <HAL_TIM_Base_Start+0x3c>
 800773c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007740:	4293      	cmp	r3, r2
 8007742:	d003      	beq.n	800774c <HAL_TIM_Base_Start+0x3c>
 8007744:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8007748:	4293      	cmp	r3, r2
 800774a:	d104      	bne.n	8007756 <HAL_TIM_Base_Start+0x46>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800774c:	689a      	ldr	r2, [r3, #8]
 800774e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007752:	2a06      	cmp	r2, #6
 8007754:	d007      	beq.n	8007766 <HAL_TIM_Base_Start+0x56>
    __HAL_TIM_ENABLE(htim);
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 800775c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	4770      	bx	lr
    return HAL_ERROR;
 8007762:	2001      	movs	r0, #1
 8007764:	4770      	bx	lr
  return HAL_OK;
 8007766:	2000      	movs	r0, #0
}
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	40010000 	.word	0x40010000

08007770 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007770:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007774:	2b01      	cmp	r3, #1
 8007776:	d127      	bne.n	80077c8 <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007778:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800777a:	4915      	ldr	r1, [pc, #84]	; (80077d0 <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 800777c:	2202      	movs	r2, #2
 800777e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007782:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007784:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007786:	f042 0201 	orr.w	r2, r2, #1
 800778a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800778c:	d011      	beq.n	80077b2 <HAL_TIM_Base_Start_IT+0x42>
 800778e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007792:	d00e      	beq.n	80077b2 <HAL_TIM_Base_Start_IT+0x42>
 8007794:	4a0f      	ldr	r2, [pc, #60]	; (80077d4 <HAL_TIM_Base_Start_IT+0x64>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d00b      	beq.n	80077b2 <HAL_TIM_Base_Start_IT+0x42>
 800779a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800779e:	4293      	cmp	r3, r2
 80077a0:	d007      	beq.n	80077b2 <HAL_TIM_Base_Start_IT+0x42>
 80077a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d003      	beq.n	80077b2 <HAL_TIM_Base_Start_IT+0x42>
 80077aa:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d104      	bne.n	80077bc <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077b2:	689a      	ldr	r2, [r3, #8]
 80077b4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b8:	2a06      	cmp	r2, #6
 80077ba:	d007      	beq.n	80077cc <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 80077c2:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	4770      	bx	lr
    return HAL_ERROR;
 80077c8:	2001      	movs	r0, #1
 80077ca:	4770      	bx	lr
  return HAL_OK;
 80077cc:	2000      	movs	r0, #0
}
 80077ce:	4770      	bx	lr
 80077d0:	40010000 	.word	0x40010000
 80077d4:	40000400 	.word	0x40000400

080077d8 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80077d8:	6803      	ldr	r3, [r0, #0]
 80077da:	68da      	ldr	r2, [r3, #12]
 80077dc:	f022 0201 	bic.w	r2, r2, #1
 80077e0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 80077e2:	6a1a      	ldr	r2, [r3, #32]
 80077e4:	f241 1111 	movw	r1, #4369	; 0x1111
 80077e8:	420a      	tst	r2, r1
 80077ea:	d108      	bne.n	80077fe <HAL_TIM_Base_Stop_IT+0x26>
 80077ec:	6a19      	ldr	r1, [r3, #32]
 80077ee:	f240 4244 	movw	r2, #1092	; 0x444
 80077f2:	4211      	tst	r1, r2
 80077f4:	d103      	bne.n	80077fe <HAL_TIM_Base_Stop_IT+0x26>
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	f022 0201 	bic.w	r2, r2, #1
 80077fc:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80077fe:	2301      	movs	r3, #1
 8007800:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8007804:	2000      	movs	r0, #0
 8007806:	4770      	bx	lr

08007808 <HAL_TIM_OC_MspInit>:
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop

0800780c <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800780c:	bb99      	cbnz	r1, 8007876 <HAL_TIM_OC_Start+0x6a>
 800780e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007812:	2b01      	cmp	r3, #1
 8007814:	d137      	bne.n	8007886 <HAL_TIM_OC_Start+0x7a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007816:	2302      	movs	r3, #2
 8007818:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800781c:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800781e:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007820:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007822:	f001 011f 	and.w	r1, r1, #31
 8007826:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 800782a:	ea20 0001 	bic.w	r0, r0, r1
 800782e:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007830:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007832:	4a27      	ldr	r2, [pc, #156]	; (80078d0 <HAL_TIM_OC_Start+0xc4>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007834:	4301      	orrs	r1, r0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007836:	4293      	cmp	r3, r2
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007838:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800783a:	d036      	beq.n	80078aa <HAL_TIM_OC_Start+0x9e>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800783c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007840:	d00e      	beq.n	8007860 <HAL_TIM_OC_Start+0x54>
 8007842:	4a24      	ldr	r2, [pc, #144]	; (80078d4 <HAL_TIM_OC_Start+0xc8>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d00b      	beq.n	8007860 <HAL_TIM_OC_Start+0x54>
 8007848:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800784c:	4293      	cmp	r3, r2
 800784e:	d007      	beq.n	8007860 <HAL_TIM_OC_Start+0x54>
 8007850:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007854:	4293      	cmp	r3, r2
 8007856:	d003      	beq.n	8007860 <HAL_TIM_OC_Start+0x54>
 8007858:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800785c:	4293      	cmp	r3, r2
 800785e:	d104      	bne.n	800786a <HAL_TIM_OC_Start+0x5e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007860:	689a      	ldr	r2, [r3, #8]
 8007862:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007866:	2a06      	cmp	r2, #6
 8007868:	d028      	beq.n	80078bc <HAL_TIM_OC_Start+0xb0>
    __HAL_TIM_ENABLE(htim);
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8007870:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007876:	2904      	cmp	r1, #4
 8007878:	d022      	beq.n	80078c0 <HAL_TIM_OC_Start+0xb4>
 800787a:	2908      	cmp	r1, #8
 800787c:	d00d      	beq.n	800789a <HAL_TIM_OC_Start+0x8e>
 800787e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007882:	2b01      	cmp	r3, #1
 8007884:	d001      	beq.n	800788a <HAL_TIM_OC_Start+0x7e>
    return HAL_ERROR;
 8007886:	2001      	movs	r0, #1
 8007888:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800788a:	2904      	cmp	r1, #4
 800788c:	d01c      	beq.n	80078c8 <HAL_TIM_OC_Start+0xbc>
 800788e:	2908      	cmp	r1, #8
 8007890:	d007      	beq.n	80078a2 <HAL_TIM_OC_Start+0x96>
 8007892:	2302      	movs	r3, #2
 8007894:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8007898:	e7c0      	b.n	800781c <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800789a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d1f1      	bne.n	8007886 <HAL_TIM_OC_Start+0x7a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078a2:	2302      	movs	r3, #2
 80078a4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80078a8:	e7b8      	b.n	800781c <HAL_TIM_OC_Start+0x10>
    __HAL_TIM_MOE_ENABLE(htim);
 80078aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078b0:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078b8:	2a06      	cmp	r2, #6
 80078ba:	d1d6      	bne.n	800786a <HAL_TIM_OC_Start+0x5e>
  return HAL_OK;
 80078bc:	2000      	movs	r0, #0
}
 80078be:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078c0:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d1de      	bne.n	8007886 <HAL_TIM_OC_Start+0x7a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078c8:	2302      	movs	r3, #2
 80078ca:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80078ce:	e7a5      	b.n	800781c <HAL_TIM_OC_Start+0x10>
 80078d0:	40010000 	.word	0x40010000
 80078d4:	40000400 	.word	0x40000400

080078d8 <HAL_TIM_PWM_MspInit>:
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop

080078dc <HAL_TIM_PWM_Start>:
 80078dc:	f7ff bf96 	b.w	800780c <HAL_TIM_OC_Start>

080078e0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80078e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d075      	beq.n	80079d4 <HAL_TIM_ConfigClockSource+0xf4>
 80078e8:	4602      	mov	r2, r0
{
 80078ea:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80078ec:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 80078ee:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80078f0:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 80078f4:	2001      	movs	r0, #1
 80078f6:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80078fa:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007900:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007904:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8007906:	680b      	ldr	r3, [r1, #0]
 8007908:	2b60      	cmp	r3, #96	; 0x60
 800790a:	d065      	beq.n	80079d8 <HAL_TIM_ConfigClockSource+0xf8>
 800790c:	d824      	bhi.n	8007958 <HAL_TIM_ConfigClockSource+0x78>
 800790e:	2b40      	cmp	r3, #64	; 0x40
 8007910:	d07c      	beq.n	8007a0c <HAL_TIM_ConfigClockSource+0x12c>
 8007912:	d94b      	bls.n	80079ac <HAL_TIM_ConfigClockSource+0xcc>
 8007914:	2b50      	cmp	r3, #80	; 0x50
 8007916:	d117      	bne.n	8007948 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007918:	6848      	ldr	r0, [r1, #4]
 800791a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800791c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800791e:	6a23      	ldr	r3, [r4, #32]
 8007920:	f023 0301 	bic.w	r3, r3, #1
 8007924:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007926:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007928:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800792c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8007930:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007932:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007936:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8007938:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800793a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800793c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007940:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8007944:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8007946:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8007948:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800794a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800794c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007950:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8007954:	bc30      	pop	{r4, r5}
 8007956:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8007958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800795c:	d038      	beq.n	80079d0 <HAL_TIM_ConfigClockSource+0xf0>
 800795e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007962:	d110      	bne.n	8007986 <HAL_TIM_ConfigClockSource+0xa6>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007964:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8007968:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800796a:	432b      	orrs	r3, r5
 800796c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800796e:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007972:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8007976:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8007978:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800797a:	68a3      	ldr	r3, [r4, #8]
 800797c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8007980:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007982:	60a3      	str	r3, [r4, #8]
      break;
 8007984:	e7e0      	b.n	8007948 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8007986:	2b70      	cmp	r3, #112	; 0x70
 8007988:	d1de      	bne.n	8007948 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800798a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800798e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007990:	432b      	orrs	r3, r5
 8007992:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007994:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007998:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800799c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800799e:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80079a0:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 80079a6:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 80079a8:	60a3      	str	r3, [r4, #8]
      break;
 80079aa:	e7cd      	b.n	8007948 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80079ac:	2b20      	cmp	r3, #32
 80079ae:	d002      	beq.n	80079b6 <HAL_TIM_ConfigClockSource+0xd6>
 80079b0:	d90a      	bls.n	80079c8 <HAL_TIM_ConfigClockSource+0xe8>
 80079b2:	2b30      	cmp	r3, #48	; 0x30
 80079b4:	d1c8      	bne.n	8007948 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80079b6:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80079b8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079bc:	430b      	orrs	r3, r1
 80079be:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 80079c2:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80079c4:	60a3      	str	r3, [r4, #8]
}
 80079c6:	e7bf      	b.n	8007948 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80079c8:	f033 0110 	bics.w	r1, r3, #16
 80079cc:	d1bc      	bne.n	8007948 <HAL_TIM_ConfigClockSource+0x68>
 80079ce:	e7f2      	b.n	80079b6 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 80079d0:	2000      	movs	r0, #0
 80079d2:	e7b9      	b.n	8007948 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 80079d4:	2002      	movs	r0, #2
}
 80079d6:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079d8:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079da:	68cb      	ldr	r3, [r1, #12]
 80079dc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079de:	f020 0010 	bic.w	r0, r0, #16
 80079e2:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079e4:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079e6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079ea:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 80079ee:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80079f0:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80079f6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 80079fa:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80079fc:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80079fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a02:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8007a06:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8007a08:	60a3      	str	r3, [r4, #8]
}
 8007a0a:	e79d      	b.n	8007948 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a0c:	6848      	ldr	r0, [r1, #4]
 8007a0e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007a10:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a12:	6a23      	ldr	r3, [r4, #32]
 8007a14:	f023 0301 	bic.w	r3, r3, #1
 8007a18:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a1a:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a1c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8007a24:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a26:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007a2a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8007a2c:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8007a2e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a34:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8007a38:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8007a3a:	60a3      	str	r3, [r4, #8]
}
 8007a3c:	e784      	b.n	8007948 <HAL_TIM_ConfigClockSource+0x68>
 8007a3e:	bf00      	nop

08007a40 <HAL_TIM_OC_DelayElapsedCallback>:
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop

08007a44 <HAL_TIM_IC_CaptureCallback>:
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop

08007a48 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop

08007a4c <HAL_TIM_TriggerCallback>:
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop

08007a50 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a50:	6803      	ldr	r3, [r0, #0]
 8007a52:	691a      	ldr	r2, [r3, #16]
 8007a54:	0791      	lsls	r1, r2, #30
{
 8007a56:	b510      	push	{r4, lr}
 8007a58:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a5a:	d502      	bpl.n	8007a62 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a5c:	68da      	ldr	r2, [r3, #12]
 8007a5e:	0792      	lsls	r2, r2, #30
 8007a60:	d45f      	bmi.n	8007b22 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a62:	691a      	ldr	r2, [r3, #16]
 8007a64:	0750      	lsls	r0, r2, #29
 8007a66:	d502      	bpl.n	8007a6e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	0751      	lsls	r1, r2, #29
 8007a6c:	d446      	bmi.n	8007afc <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a6e:	691a      	ldr	r2, [r3, #16]
 8007a70:	0712      	lsls	r2, r2, #28
 8007a72:	d502      	bpl.n	8007a7a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a74:	68da      	ldr	r2, [r3, #12]
 8007a76:	0710      	lsls	r0, r2, #28
 8007a78:	d42e      	bmi.n	8007ad8 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a7a:	691a      	ldr	r2, [r3, #16]
 8007a7c:	06d2      	lsls	r2, r2, #27
 8007a7e:	d502      	bpl.n	8007a86 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a80:	68da      	ldr	r2, [r3, #12]
 8007a82:	06d0      	lsls	r0, r2, #27
 8007a84:	d418      	bmi.n	8007ab8 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a86:	691a      	ldr	r2, [r3, #16]
 8007a88:	07d1      	lsls	r1, r2, #31
 8007a8a:	d502      	bpl.n	8007a92 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a8c:	68da      	ldr	r2, [r3, #12]
 8007a8e:	07d2      	lsls	r2, r2, #31
 8007a90:	d45d      	bmi.n	8007b4e <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a92:	691a      	ldr	r2, [r3, #16]
 8007a94:	0610      	lsls	r0, r2, #24
 8007a96:	d502      	bpl.n	8007a9e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	0611      	lsls	r1, r2, #24
 8007a9c:	d45f      	bmi.n	8007b5e <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a9e:	691a      	ldr	r2, [r3, #16]
 8007aa0:	0652      	lsls	r2, r2, #25
 8007aa2:	d502      	bpl.n	8007aaa <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007aa4:	68da      	ldr	r2, [r3, #12]
 8007aa6:	0650      	lsls	r0, r2, #25
 8007aa8:	d461      	bmi.n	8007b6e <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007aaa:	691a      	ldr	r2, [r3, #16]
 8007aac:	0691      	lsls	r1, r2, #26
 8007aae:	d502      	bpl.n	8007ab6 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	0692      	lsls	r2, r2, #26
 8007ab4:	d443      	bmi.n	8007b3e <HAL_TIM_IRQHandler+0xee>
}
 8007ab6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ab8:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007abc:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007abe:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ac0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ac2:	69db      	ldr	r3, [r3, #28]
 8007ac4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007ac8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007aca:	d064      	beq.n	8007b96 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8007acc:	f7ff ffba 	bl	8007a44 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ad0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ad2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ad4:	7722      	strb	r2, [r4, #28]
 8007ad6:	e7d6      	b.n	8007a86 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ad8:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007adc:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ade:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ae0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8007ae6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ae8:	d152      	bne.n	8007b90 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aea:	f7ff ffa9 	bl	8007a40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aee:	4620      	mov	r0, r4
 8007af0:	f7ff ffaa 	bl	8007a48 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007af4:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007af6:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007af8:	7722      	strb	r2, [r4, #28]
 8007afa:	e7be      	b.n	8007a7a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007afc:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b00:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b02:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b04:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007b0c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b0e:	d13c      	bne.n	8007b8a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b10:	f7ff ff96 	bl	8007a40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b14:	4620      	mov	r0, r4
 8007b16:	f7ff ff97 	bl	8007a48 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b1a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b1c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b1e:	7722      	strb	r2, [r4, #28]
 8007b20:	e7a5      	b.n	8007a6e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b22:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b26:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b28:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b2a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	079b      	lsls	r3, r3, #30
 8007b30:	d025      	beq.n	8007b7e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8007b32:	f7ff ff87 	bl	8007a44 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b36:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b38:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b3a:	7722      	strb	r2, [r4, #28]
 8007b3c:	e791      	b.n	8007a62 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b3e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8007b42:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b44:	611a      	str	r2, [r3, #16]
}
 8007b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8007b4a:	f000 ba6d 	b.w	8008028 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b4e:	f06f 0201 	mvn.w	r2, #1
 8007b52:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b54:	4620      	mov	r0, r4
 8007b56:	f7f9 fbeb 	bl	8001330 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b5a:	6823      	ldr	r3, [r4, #0]
 8007b5c:	e799      	b.n	8007a92 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b62:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007b64:	4620      	mov	r0, r4
 8007b66:	f000 fa61 	bl	800802c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	e797      	b.n	8007a9e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b72:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007b74:	4620      	mov	r0, r4
 8007b76:	f7ff ff69 	bl	8007a4c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	e795      	b.n	8007aaa <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b7e:	f7ff ff5f 	bl	8007a40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b82:	4620      	mov	r0, r4
 8007b84:	f7ff ff60 	bl	8007a48 <HAL_TIM_PWM_PulseFinishedCallback>
 8007b88:	e7d5      	b.n	8007b36 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8007b8a:	f7ff ff5b 	bl	8007a44 <HAL_TIM_IC_CaptureCallback>
 8007b8e:	e7c4      	b.n	8007b1a <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8007b90:	f7ff ff58 	bl	8007a44 <HAL_TIM_IC_CaptureCallback>
 8007b94:	e7ae      	b.n	8007af4 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b96:	f7ff ff53 	bl	8007a40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f7ff ff54 	bl	8007a48 <HAL_TIM_PWM_PulseFinishedCallback>
 8007ba0:	e796      	b.n	8007ad0 <HAL_TIM_IRQHandler+0x80>
 8007ba2:	bf00      	nop

08007ba4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ba4:	4a2a      	ldr	r2, [pc, #168]	; (8007c50 <TIM_Base_SetConfig+0xac>)
  tmpcr1 = TIMx->CR1;
 8007ba6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ba8:	4290      	cmp	r0, r2
{
 8007baa:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bac:	d039      	beq.n	8007c22 <TIM_Base_SetConfig+0x7e>
 8007bae:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007bb2:	d021      	beq.n	8007bf8 <TIM_Base_SetConfig+0x54>
 8007bb4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007bb8:	4290      	cmp	r0, r2
 8007bba:	d01d      	beq.n	8007bf8 <TIM_Base_SetConfig+0x54>
 8007bbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007bc0:	4290      	cmp	r0, r2
 8007bc2:	d019      	beq.n	8007bf8 <TIM_Base_SetConfig+0x54>
 8007bc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007bc8:	4290      	cmp	r0, r2
 8007bca:	d015      	beq.n	8007bf8 <TIM_Base_SetConfig+0x54>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bcc:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8007bd0:	4290      	cmp	r0, r2
 8007bd2:	d015      	beq.n	8007c00 <TIM_Base_SetConfig+0x5c>
 8007bd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007bd8:	4290      	cmp	r0, r2
 8007bda:	d011      	beq.n	8007c00 <TIM_Base_SetConfig+0x5c>
 8007bdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007be0:	4290      	cmp	r0, r2
 8007be2:	d00d      	beq.n	8007c00 <TIM_Base_SetConfig+0x5c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007be4:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007be6:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8007be8:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bee:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007bf0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bf2:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007bf4:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bf6:	e010      	b.n	8007c1a <TIM_Base_SetConfig+0x76>
    tmpcr1 |= Structure->CounterMode;
 8007bf8:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007bfe:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c00:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c02:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c08:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c0e:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c10:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8007c12:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8007c14:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c16:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007c18:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007c1a:	2301      	movs	r3, #1
}
 8007c1c:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8007c1e:	6143      	str	r3, [r0, #20]
}
 8007c20:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8007c22:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c24:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007c2a:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c30:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c32:	694a      	ldr	r2, [r1, #20]
 8007c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c38:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007c3a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c3c:	688b      	ldr	r3, [r1, #8]
 8007c3e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007c40:	680b      	ldr	r3, [r1, #0]
 8007c42:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007c44:	690b      	ldr	r3, [r1, #16]
 8007c46:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007c48:	2301      	movs	r3, #1
}
 8007c4a:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8007c4c:	6143      	str	r3, [r0, #20]
}
 8007c4e:	4770      	bx	lr
 8007c50:	40010000 	.word	0x40010000

08007c54 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007c54:	b350      	cbz	r0, 8007cac <HAL_TIM_Base_Init+0x58>
{
 8007c56:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007c58:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007c62:	b1f3      	cbz	r3, 8007ca2 <HAL_TIM_Base_Init+0x4e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c64:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8007c66:	2302      	movs	r3, #2
 8007c68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c6c:	f851 0b04 	ldr.w	r0, [r1], #4
 8007c70:	f7ff ff98 	bl	8007ba4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c74:	2301      	movs	r3, #1
 8007c76:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c7a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007c7e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007c82:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007c86:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c92:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007c96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007c9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007c9e:	2000      	movs	r0, #0
}
 8007ca0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007ca2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007ca6:	f7fc fe25 	bl	80048f4 <HAL_TIM_Base_MspInit>
 8007caa:	e7db      	b.n	8007c64 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8007cac:	2001      	movs	r0, #1
}
 8007cae:	4770      	bx	lr

08007cb0 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8007cb0:	b350      	cbz	r0, 8007d08 <HAL_TIM_OC_Init+0x58>
{
 8007cb2:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007cb4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007cb8:	4604      	mov	r4, r0
 8007cba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007cbe:	b1f3      	cbz	r3, 8007cfe <HAL_TIM_OC_Init+0x4e>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007cc0:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007cc8:	f851 0b04 	ldr.w	r0, [r1], #4
 8007ccc:	f7ff ff6a 	bl	8007ba4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cd6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007cda:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007cde:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007ce2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ce6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007cf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007cf6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007cfa:	2000      	movs	r0, #0
}
 8007cfc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007cfe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8007d02:	f7ff fd81 	bl	8007808 <HAL_TIM_OC_MspInit>
 8007d06:	e7db      	b.n	8007cc0 <HAL_TIM_OC_Init+0x10>
    return HAL_ERROR;
 8007d08:	2001      	movs	r0, #1
}
 8007d0a:	4770      	bx	lr

08007d0c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007d0c:	b350      	cbz	r0, 8007d64 <HAL_TIM_PWM_Init+0x58>
{
 8007d0e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007d10:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007d14:	4604      	mov	r4, r0
 8007d16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007d1a:	b1f3      	cbz	r3, 8007d5a <HAL_TIM_PWM_Init+0x4e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d1c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8007d1e:	2302      	movs	r3, #2
 8007d20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d24:	f851 0b04 	ldr.w	r0, [r1], #4
 8007d28:	f7ff ff3c 	bl	8007ba4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d32:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007d36:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007d3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007d3e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007d4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007d52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007d56:	2000      	movs	r0, #0
}
 8007d58:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007d5a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007d5e:	f7ff fdbb 	bl	80078d8 <HAL_TIM_PWM_MspInit>
 8007d62:	e7db      	b.n	8007d1c <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8007d64:	2001      	movs	r0, #1
}
 8007d66:	4770      	bx	lr

08007d68 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d052      	beq.n	8007e12 <HAL_TIM_Encoder_Init+0xaa>
{
 8007d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007d6e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007d72:	460d      	mov	r5, r1
 8007d74:	4604      	mov	r4, r0
 8007d76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d044      	beq.n	8007e08 <HAL_TIM_Encoder_Init+0xa0>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d7e:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8007d80:	2302      	movs	r3, #2
 8007d82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d86:	f851 0b04 	ldr.w	r0, [r1], #4
 8007d8a:	6883      	ldr	r3, [r0, #8]
 8007d8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d90:	f023 0307 	bic.w	r3, r3, #7
 8007d94:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d96:	f7ff ff05 	bl	8007ba4 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8007d9a:	6821      	ldr	r1, [r4, #0]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007d9c:	69aa      	ldr	r2, [r5, #24]
  tmpsmcr = htim->Instance->SMCR;
 8007d9e:	688e      	ldr	r6, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8007da0:	698b      	ldr	r3, [r1, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007da2:	68a8      	ldr	r0, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007da4:	6a2f      	ldr	r7, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007daa:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007dae:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007db2:	4303      	orrs	r3, r0
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007db4:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007db8:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007dba:	69e8      	ldr	r0, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007dbc:	011b      	lsls	r3, r3, #4
 8007dbe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8007dc2:	68e8      	ldr	r0, [r5, #12]
 8007dc4:	4303      	orrs	r3, r0
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007dc6:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007dca:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  tmpccer = htim->Instance->CCER;
 8007dce:	6a08      	ldr	r0, [r1, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007dd0:	696f      	ldr	r7, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007dd2:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007dd4:	686a      	ldr	r2, [r5, #4]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007dd6:	f020 00aa 	bic.w	r0, r0, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007dda:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 8007dde:	4310      	orrs	r0, r2
  tmpsmcr |= sConfig->EncoderMode;
 8007de0:	682a      	ldr	r2, [r5, #0]
 8007de2:	4316      	orrs	r6, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007de4:	2201      	movs	r2, #1
  htim->Instance->SMCR = tmpsmcr;
 8007de6:	608e      	str	r6, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8007de8:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 8007dea:	6208      	str	r0, [r1, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dec:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007df0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007df4:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007df8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007dfc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 8007e00:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 8007e04:	2000      	movs	r0, #0
}
 8007e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8007e08:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8007e0c:	f7fc fd18 	bl	8004840 <HAL_TIM_Encoder_MspInit>
 8007e10:	e7b5      	b.n	8007d7e <HAL_TIM_Encoder_Init+0x16>
    return HAL_ERROR;
 8007e12:	2001      	movs	r0, #1
}
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop

08007e18 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e18:	6a03      	ldr	r3, [r0, #32]
 8007e1a:	f023 0310 	bic.w	r3, r3, #16
 8007e1e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007e20:	6a03      	ldr	r3, [r0, #32]
{
 8007e22:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8007e24:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007e26:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e28:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e2a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e2e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e32:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8007e34:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e38:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e3c:	4d0c      	ldr	r5, [pc, #48]	; (8007e70 <TIM_OC2_SetConfig+0x58>)
 8007e3e:	42a8      	cmp	r0, r5
 8007e40:	d006      	beq.n	8007e50 <TIM_OC2_SetConfig+0x38>
  TIMx->CCR2 = OC_Config->Pulse;
 8007e42:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007e44:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007e46:	6182      	str	r2, [r0, #24]
}
 8007e48:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8007e4a:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007e4c:	6203      	str	r3, [r0, #32]
}
 8007e4e:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e50:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e56:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e5a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e5e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e62:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e68:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8007e6c:	e7e9      	b.n	8007e42 <TIM_OC2_SetConfig+0x2a>
 8007e6e:	bf00      	nop
 8007e70:	40010000 	.word	0x40010000

08007e74 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8007e74:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d034      	beq.n	8007ee6 <HAL_TIM_OC_ConfigChannel+0x72>
 8007e7c:	2301      	movs	r3, #1
{
 8007e7e:	b510      	push	{r4, lr}
 8007e80:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007e82:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8007e86:	2a0c      	cmp	r2, #12
 8007e88:	d808      	bhi.n	8007e9c <HAL_TIM_OC_ConfigChannel+0x28>
 8007e8a:	e8df f002 	tbb	[pc, r2]
 8007e8e:	0714      	.short	0x0714
 8007e90:	071c0707 	.word	0x071c0707
 8007e94:	07240707 	.word	0x07240707
 8007e98:	0707      	.short	0x0707
 8007e9a:	0c          	.byte	0x0c
 8007e9b:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8007ea2:	2001      	movs	r0, #1
}
 8007ea4:	bd10      	pop	{r4, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ea6:	6800      	ldr	r0, [r0, #0]
 8007ea8:	f7ff fc0e 	bl	80076c8 <TIM_OC4_SetConfig>
  __HAL_UNLOCK(htim);
 8007eac:	2300      	movs	r3, #0
 8007eae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007eb2:	2000      	movs	r0, #0
}
 8007eb4:	bd10      	pop	{r4, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007eb6:	6800      	ldr	r0, [r0, #0]
 8007eb8:	f7ff fbb0 	bl	800761c <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007ec2:	2000      	movs	r0, #0
}
 8007ec4:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ec6:	6800      	ldr	r0, [r0, #0]
 8007ec8:	f7ff ffa6 	bl	8007e18 <TIM_OC2_SetConfig>
  __HAL_UNLOCK(htim);
 8007ecc:	2300      	movs	r3, #0
 8007ece:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007ed2:	2000      	movs	r0, #0
}
 8007ed4:	bd10      	pop	{r4, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ed6:	6800      	ldr	r0, [r0, #0]
 8007ed8:	f7ff fbca 	bl	8007670 <TIM_OC3_SetConfig>
  __HAL_UNLOCK(htim);
 8007edc:	2300      	movs	r3, #0
 8007ede:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007ee2:	2000      	movs	r0, #0
}
 8007ee4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8007ee6:	2002      	movs	r0, #2
}
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop

08007eec <HAL_TIM_PWM_ConfigChannel>:
{
 8007eec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007eee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d05e      	beq.n	8007fb4 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	4604      	mov	r4, r0
 8007efa:	460d      	mov	r5, r1
 8007efc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8007f00:	2a0c      	cmp	r2, #12
 8007f02:	d808      	bhi.n	8007f16 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8007f04:	e8df f002 	tbb	[pc, r2]
 8007f08:	0707071f 	.word	0x0707071f
 8007f0c:	07070731 	.word	0x07070731
 8007f10:	07070744 	.word	0x07070744
 8007f14:	0c          	.byte	0x0c
 8007f15:	00          	.byte	0x00
 8007f16:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007f1e:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f20:	6800      	ldr	r0, [r0, #0]
 8007f22:	f7ff fbd1 	bl	80076c8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f26:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f28:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f2a:	69d9      	ldr	r1, [r3, #28]
 8007f2c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007f30:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f32:	69d9      	ldr	r1, [r3, #28]
 8007f34:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007f38:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f3a:	69da      	ldr	r2, [r3, #28]
 8007f3c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007f40:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007f42:	2000      	movs	r0, #0
      break;
 8007f44:	e7e8      	b.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x2c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f46:	6800      	ldr	r0, [r0, #0]
 8007f48:	f7ff fb68 	bl	800761c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f4c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f4e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f50:	6999      	ldr	r1, [r3, #24]
 8007f52:	f041 0108 	orr.w	r1, r1, #8
 8007f56:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f58:	6999      	ldr	r1, [r3, #24]
 8007f5a:	f021 0104 	bic.w	r1, r1, #4
 8007f5e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f60:	699a      	ldr	r2, [r3, #24]
 8007f62:	4302      	orrs	r2, r0
 8007f64:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007f66:	2000      	movs	r0, #0
      break;
 8007f68:	e7d6      	b.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x2c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f6a:	6800      	ldr	r0, [r0, #0]
 8007f6c:	f7ff ff54 	bl	8007e18 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f70:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f72:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f74:	6999      	ldr	r1, [r3, #24]
 8007f76:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007f7a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f7c:	6999      	ldr	r1, [r3, #24]
 8007f7e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007f82:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f84:	699a      	ldr	r2, [r3, #24]
 8007f86:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007f8a:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007f8c:	2000      	movs	r0, #0
      break;
 8007f8e:	e7c3      	b.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x2c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f90:	6800      	ldr	r0, [r0, #0]
 8007f92:	f7ff fb6d 	bl	8007670 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f96:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f98:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f9a:	69d9      	ldr	r1, [r3, #28]
 8007f9c:	f041 0108 	orr.w	r1, r1, #8
 8007fa0:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fa2:	69d9      	ldr	r1, [r3, #28]
 8007fa4:	f021 0104 	bic.w	r1, r1, #4
 8007fa8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007faa:	69da      	ldr	r2, [r3, #28]
 8007fac:	4302      	orrs	r2, r0
 8007fae:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007fb0:	2000      	movs	r0, #0
      break;
 8007fb2:	e7b1      	b.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x2c>
  __HAL_LOCK(htim);
 8007fb4:	2002      	movs	r0, #2
}
 8007fb6:	bd38      	pop	{r3, r4, r5, pc}

08007fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fb8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d02f      	beq.n	8008020 <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fc0:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007fc2:	2202      	movs	r2, #2
{
 8007fc4:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8007fc6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8007fca:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fcc:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8007fce:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fd0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fd4:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fd8:	4a12      	ldr	r2, [pc, #72]	; (8008024 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d012      	beq.n	8008004 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe2:	d00f      	beq.n	8008004 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007fe4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d00b      	beq.n	8008004 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007fec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d007      	beq.n	8008004 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007ff4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d003      	beq.n	8008004 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007ffc:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8008000:	4293      	cmp	r3, r2
 8008002:	d104      	bne.n	800800e <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008004:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008006:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800800a:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800800c:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800800e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8008010:	2201      	movs	r2, #1
 8008012:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008016:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800801a:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800801c:	4618      	mov	r0, r3
}
 800801e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008020:	2002      	movs	r0, #2
}
 8008022:	4770      	bx	lr
 8008024:	40010000 	.word	0x40010000

08008028 <HAL_TIMEx_CommutCallback>:
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop

0800802c <HAL_TIMEx_BreakCallback>:
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop

08008030 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008030:	6802      	ldr	r2, [r0, #0]
 8008032:	6911      	ldr	r1, [r2, #16]
{
 8008034:	b538      	push	{r3, r4, r5, lr}
 8008036:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008038:	68c0      	ldr	r0, [r0, #12]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800803a:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800803c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8008040:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008042:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008044:	6111      	str	r1, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008046:	4303      	orrs	r3, r0
 8008048:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800804a:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800804c:	4303      	orrs	r3, r0
 800804e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8008050:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8008054:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008058:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800805a:	430b      	orrs	r3, r1
 800805c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800805e:	6953      	ldr	r3, [r2, #20]
 8008060:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008062:	4928      	ldr	r1, [pc, #160]	; (8008104 <UART_SetConfig+0xd4>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008068:	4303      	orrs	r3, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800806a:	428a      	cmp	r2, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800806c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800806e:	d029      	beq.n	80080c4 <UART_SetConfig+0x94>
 8008070:	4b25      	ldr	r3, [pc, #148]	; (8008108 <UART_SetConfig+0xd8>)
 8008072:	429a      	cmp	r2, r3
 8008074:	d026      	beq.n	80080c4 <UART_SetConfig+0x94>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008076:	f7fe fe0f 	bl	8006c98 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800807a:	69e3      	ldr	r3, [r4, #28]
 800807c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008080:	d126      	bne.n	80080d0 <UART_SetConfig+0xa0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008082:	6862      	ldr	r2, [r4, #4]
 8008084:	4d21      	ldr	r5, [pc, #132]	; (800810c <UART_SetConfig+0xdc>)
 8008086:	1892      	adds	r2, r2, r2
 8008088:	f04f 0119 	mov.w	r1, #25
 800808c:	f04f 0300 	mov.w	r3, #0
 8008090:	415b      	adcs	r3, r3
 8008092:	fba0 0101 	umull	r0, r1, r0, r1
 8008096:	f7f8 fbfd 	bl	8000894 <__aeabi_uldivmod>
 800809a:	fba5 3200 	umull	r3, r2, r5, r0
 800809e:	0951      	lsrs	r1, r2, #5
 80080a0:	2364      	movs	r3, #100	; 0x64
 80080a2:	fb03 0311 	mls	r3, r3, r1, r0
 80080a6:	00db      	lsls	r3, r3, #3
 80080a8:	3332      	adds	r3, #50	; 0x32
 80080aa:	fba5 2303 	umull	r2, r3, r5, r3
 80080ae:	f3c3 1242 	ubfx	r2, r3, #5, #3
 80080b2:	091b      	lsrs	r3, r3, #4
 80080b4:	6824      	ldr	r4, [r4, #0]
 80080b6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80080ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80080be:	4413      	add	r3, r2
 80080c0:	60a3      	str	r3, [r4, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80080c2:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80080c4:	f7fe fdf8 	bl	8006cb8 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080c8:	69e3      	ldr	r3, [r4, #28]
 80080ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080ce:	d0d8      	beq.n	8008082 <UART_SetConfig+0x52>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080d0:	6863      	ldr	r3, [r4, #4]
 80080d2:	2119      	movs	r1, #25
 80080d4:	009a      	lsls	r2, r3, #2
 80080d6:	fba0 0101 	umull	r0, r1, r0, r1
 80080da:	0f9b      	lsrs	r3, r3, #30
 80080dc:	f7f8 fbda 	bl	8000894 <__aeabi_uldivmod>
 80080e0:	4a0a      	ldr	r2, [pc, #40]	; (800810c <UART_SetConfig+0xdc>)
 80080e2:	fba2 1300 	umull	r1, r3, r2, r0
 80080e6:	095b      	lsrs	r3, r3, #5
 80080e8:	6821      	ldr	r1, [r4, #0]
 80080ea:	2464      	movs	r4, #100	; 0x64
 80080ec:	fb04 0013 	mls	r0, r4, r3, r0
 80080f0:	0100      	lsls	r0, r0, #4
 80080f2:	3032      	adds	r0, #50	; 0x32
 80080f4:	fba2 2000 	umull	r2, r0, r2, r0
 80080f8:	011b      	lsls	r3, r3, #4
 80080fa:	eb03 1050 	add.w	r0, r3, r0, lsr #5
 80080fe:	6088      	str	r0, [r1, #8]
}
 8008100:	bd38      	pop	{r3, r4, r5, pc}
 8008102:	bf00      	nop
 8008104:	40011000 	.word	0x40011000
 8008108:	40011400 	.word	0x40011400
 800810c:	51eb851f 	.word	0x51eb851f

08008110 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8008110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008114:	4680      	mov	r8, r0
 8008116:	460f      	mov	r7, r1
 8008118:	4691      	mov	r9, r2
 800811a:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800811c:	f8d8 5000 	ldr.w	r5, [r8]
 8008120:	e001      	b.n	8008126 <UART_WaitOnFlagUntilTimeout.constprop.0+0x16>
    if (Timeout != HAL_MAX_DELAY)
 8008122:	1c73      	adds	r3, r6, #1
 8008124:	d106      	bne.n	8008134 <UART_WaitOnFlagUntilTimeout.constprop.0+0x24>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008126:	682c      	ldr	r4, [r5, #0]
 8008128:	ea37 0304 	bics.w	r3, r7, r4
 800812c:	d1f9      	bne.n	8008122 <UART_WaitOnFlagUntilTimeout.constprop.0+0x12>
  return HAL_OK;
 800812e:	2000      	movs	r0, #0
}
 8008130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008134:	b13e      	cbz	r6, 8008146 <UART_WaitOnFlagUntilTimeout.constprop.0+0x36>
 8008136:	f7fc fd41 	bl	8004bbc <HAL_GetTick>
 800813a:	eba0 0009 	sub.w	r0, r0, r9
 800813e:	4286      	cmp	r6, r0
 8008140:	d2ec      	bcs.n	800811c <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008142:	f8d8 5000 	ldr.w	r5, [r8]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008146:	f105 030c 	add.w	r3, r5, #12
 800814a:	e853 3f00 	ldrex	r3, [r3]
 800814e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008152:	f105 010c 	add.w	r1, r5, #12
 8008156:	e841 3200 	strex	r2, r3, [r1]
 800815a:	2a00      	cmp	r2, #0
 800815c:	d1f3      	bne.n	8008146 <UART_WaitOnFlagUntilTimeout.constprop.0+0x36>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815e:	f105 0314 	add.w	r3, r5, #20
 8008162:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008166:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	f105 0114 	add.w	r1, r5, #20
 800816e:	e841 3200 	strex	r2, r3, [r1]
 8008172:	2a00      	cmp	r2, #0
 8008174:	d1f3      	bne.n	800815e <UART_WaitOnFlagUntilTimeout.constprop.0+0x4e>
        huart->gState  = HAL_UART_STATE_READY;
 8008176:	2320      	movs	r3, #32
 8008178:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 800817c:	f888 203c 	strb.w	r2, [r8, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8008180:	f888 303e 	strb.w	r3, [r8, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8008184:	2003      	movs	r0, #3
 8008186:	e7d3      	b.n	8008130 <UART_WaitOnFlagUntilTimeout.constprop.0+0x20>

08008188 <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 8008188:	b380      	cbz	r0, 80081ec <HAL_HalfDuplex_Init+0x64>
{
 800818a:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800818c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008190:	4604      	mov	r4, r0
 8008192:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008196:	b323      	cbz	r3, 80081e2 <HAL_HalfDuplex_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8008198:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800819a:	2324      	movs	r3, #36	; 0x24
 800819c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80081a0:	68d3      	ldr	r3, [r2, #12]
 80081a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  UART_SetConfig(huart);
 80081a6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80081a8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80081aa:	f7ff ff41 	bl	8008030 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	691a      	ldr	r2, [r3, #16]
 80081b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80081b8:	695a      	ldr	r2, [r3, #20]
 80081ba:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80081be:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80081c0:	695a      	ldr	r2, [r3, #20]
 80081c2:	f042 0208 	orr.w	r2, r2, #8
 80081c6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80081c8:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ca:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80081cc:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80081ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081d2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081d4:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80081d6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80081da:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 80081de:	4628      	mov	r0, r5
}
 80081e0:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 80081e2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80081e6:	f7fc fbeb 	bl	80049c0 <HAL_UART_MspInit>
 80081ea:	e7d5      	b.n	8008198 <HAL_HalfDuplex_Init+0x10>
    return HAL_ERROR;
 80081ec:	2001      	movs	r0, #1
}
 80081ee:	4770      	bx	lr

080081f0 <HAL_UART_Transmit>:
{
 80081f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081f4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80081f6:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 80081fa:	2820      	cmp	r0, #32
 80081fc:	d146      	bne.n	800828c <HAL_UART_Transmit+0x9c>
    if ((pData == NULL) || (Size == 0U))
 80081fe:	460d      	mov	r5, r1
 8008200:	2900      	cmp	r1, #0
 8008202:	d040      	beq.n	8008286 <HAL_UART_Transmit+0x96>
 8008204:	4617      	mov	r7, r2
 8008206:	2a00      	cmp	r2, #0
 8008208:	d03d      	beq.n	8008286 <HAL_UART_Transmit+0x96>
 800820a:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 800820c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008210:	2b01      	cmp	r3, #1
 8008212:	d03b      	beq.n	800828c <HAL_UART_Transmit+0x9c>
 8008214:	2301      	movs	r3, #1
 8008216:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800821a:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800821e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008220:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008224:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8008228:	f7fc fcc8 	bl	8004bbc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800822c:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 800822e:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8008234:	84e7      	strh	r7, [r4, #38]	; 0x26
    tickstart = HAL_GetTick();
 8008236:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008238:	d02b      	beq.n	8008292 <HAL_UART_Transmit+0xa2>
    while (huart->TxXferCount > 0U)
 800823a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800823c:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800823e:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8008240:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8008244:	b97b      	cbnz	r3, 8008266 <HAL_UART_Transmit+0x76>
 8008246:	e02d      	b.n	80082a4 <HAL_UART_Transmit+0xb4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800824e:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 8008250:	f8b4 c026 	ldrh.w	ip, [r4, #38]	; 0x26
 8008254:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008258:	fa1f fc8c 	uxth.w	ip, ip
 800825c:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008260:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8008262:	b289      	uxth	r1, r1
 8008264:	b1f1      	cbz	r1, 80082a4 <HAL_UART_Transmit+0xb4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008266:	4633      	mov	r3, r6
 8008268:	4642      	mov	r2, r8
 800826a:	2180      	movs	r1, #128	; 0x80
 800826c:	4620      	mov	r0, r4
 800826e:	f7ff ff4f 	bl	8008110 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8008272:	b9a0      	cbnz	r0, 800829e <HAL_UART_Transmit+0xae>
      if (pdata8bits == NULL)
 8008274:	2d00      	cmp	r5, #0
 8008276:	d1e7      	bne.n	8008248 <HAL_UART_Transmit+0x58>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008278:	f839 3b02 	ldrh.w	r3, [r9], #2
 800827c:	6822      	ldr	r2, [r4, #0]
 800827e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008282:	6053      	str	r3, [r2, #4]
        pdata16bits++;
 8008284:	e7e4      	b.n	8008250 <HAL_UART_Transmit+0x60>
      return  HAL_ERROR;
 8008286:	2001      	movs	r0, #1
}
 8008288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800828c:	2002      	movs	r0, #2
}
 800828e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008292:	6923      	ldr	r3, [r4, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d1d0      	bne.n	800823a <HAL_UART_Transmit+0x4a>
 8008298:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 800829a:	461d      	mov	r5, r3
 800829c:	e7cd      	b.n	800823a <HAL_UART_Transmit+0x4a>
        return HAL_TIMEOUT;
 800829e:	2003      	movs	r0, #3
}
 80082a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082a4:	4633      	mov	r3, r6
 80082a6:	4642      	mov	r2, r8
 80082a8:	2140      	movs	r1, #64	; 0x40
 80082aa:	4620      	mov	r0, r4
 80082ac:	f7ff ff30 	bl	8008110 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	d1f4      	bne.n	800829e <HAL_UART_Transmit+0xae>
    huart->gState = HAL_UART_STATE_READY;
 80082b4:	2320      	movs	r3, #32
 80082b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80082ba:	e7e5      	b.n	8008288 <HAL_UART_Transmit+0x98>

080082bc <arm_sin_f32>:
 80082bc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8008338 <arm_sin_f32+0x7c>
 80082c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80082c4:	ee20 7a07 	vmul.f32	s14, s0, s14
 80082c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082cc:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80082d0:	d42c      	bmi.n	800832c <arm_sin_f32+0x70>
 80082d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082d6:	eddf 6a19 	vldr	s13, [pc, #100]	; 800833c <arm_sin_f32+0x80>
 80082da:	4a19      	ldr	r2, [pc, #100]	; (8008340 <arm_sin_f32+0x84>)
 80082dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80082e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80082e8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80082ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082f0:	bfa8      	it	ge
 80082f2:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 80082f6:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80082fa:	ee17 3a10 	vmov	r3, s14
 80082fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008302:	ee07 3a10 	vmov	s14, r3
 8008306:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800830a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800830e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008312:	edd1 6a01 	vldr	s13, [r1, #4]
 8008316:	ee30 7a67 	vsub.f32	s14, s0, s15
 800831a:	ed91 0a00 	vldr	s0, [r1]
 800831e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008322:	ee27 0a00 	vmul.f32	s0, s14, s0
 8008326:	ee30 0a27 	vadd.f32	s0, s0, s15
 800832a:	4770      	bx	lr
 800832c:	ee17 3a90 	vmov	r3, s15
 8008330:	3b01      	subs	r3, #1
 8008332:	ee07 3a90 	vmov	s15, r3
 8008336:	e7cc      	b.n	80082d2 <arm_sin_f32+0x16>
 8008338:	3e22f983 	.word	0x3e22f983
 800833c:	44000000 	.word	0x44000000
 8008340:	0800a284 	.word	0x0800a284

08008344 <atoi>:
 8008344:	220a      	movs	r2, #10
 8008346:	2100      	movs	r1, #0
 8008348:	f000 b8d6 	b.w	80084f8 <strtol>

0800834c <__errno>:
 800834c:	4b01      	ldr	r3, [pc, #4]	; (8008354 <__errno+0x8>)
 800834e:	6818      	ldr	r0, [r3, #0]
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	20008f94 	.word	0x20008f94

08008358 <__libc_init_array>:
 8008358:	b570      	push	{r4, r5, r6, lr}
 800835a:	4d0d      	ldr	r5, [pc, #52]	; (8008390 <__libc_init_array+0x38>)
 800835c:	4c0d      	ldr	r4, [pc, #52]	; (8008394 <__libc_init_array+0x3c>)
 800835e:	1b64      	subs	r4, r4, r5
 8008360:	10a4      	asrs	r4, r4, #2
 8008362:	2600      	movs	r6, #0
 8008364:	42a6      	cmp	r6, r4
 8008366:	d109      	bne.n	800837c <__libc_init_array+0x24>
 8008368:	4d0b      	ldr	r5, [pc, #44]	; (8008398 <__libc_init_array+0x40>)
 800836a:	4c0c      	ldr	r4, [pc, #48]	; (800839c <__libc_init_array+0x44>)
 800836c:	f000 f8ce 	bl	800850c <_init>
 8008370:	1b64      	subs	r4, r4, r5
 8008372:	10a4      	asrs	r4, r4, #2
 8008374:	2600      	movs	r6, #0
 8008376:	42a6      	cmp	r6, r4
 8008378:	d105      	bne.n	8008386 <__libc_init_array+0x2e>
 800837a:	bd70      	pop	{r4, r5, r6, pc}
 800837c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008380:	4798      	blx	r3
 8008382:	3601      	adds	r6, #1
 8008384:	e7ee      	b.n	8008364 <__libc_init_array+0xc>
 8008386:	f855 3b04 	ldr.w	r3, [r5], #4
 800838a:	4798      	blx	r3
 800838c:	3601      	adds	r6, #1
 800838e:	e7f2      	b.n	8008376 <__libc_init_array+0x1e>
 8008390:	0800ab94 	.word	0x0800ab94
 8008394:	0800ab94 	.word	0x0800ab94
 8008398:	0800ab94 	.word	0x0800ab94
 800839c:	0800ab98 	.word	0x0800ab98

080083a0 <memcpy>:
 80083a0:	440a      	add	r2, r1
 80083a2:	4291      	cmp	r1, r2
 80083a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083a8:	d100      	bne.n	80083ac <memcpy+0xc>
 80083aa:	4770      	bx	lr
 80083ac:	b510      	push	{r4, lr}
 80083ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083b6:	4291      	cmp	r1, r2
 80083b8:	d1f9      	bne.n	80083ae <memcpy+0xe>
 80083ba:	bd10      	pop	{r4, pc}

080083bc <memset>:
 80083bc:	4402      	add	r2, r0
 80083be:	4603      	mov	r3, r0
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d100      	bne.n	80083c6 <memset+0xa>
 80083c4:	4770      	bx	lr
 80083c6:	f803 1b01 	strb.w	r1, [r3], #1
 80083ca:	e7f9      	b.n	80083c0 <memset+0x4>

080083cc <strncmp>:
 80083cc:	b510      	push	{r4, lr}
 80083ce:	b17a      	cbz	r2, 80083f0 <strncmp+0x24>
 80083d0:	4603      	mov	r3, r0
 80083d2:	3901      	subs	r1, #1
 80083d4:	1884      	adds	r4, r0, r2
 80083d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80083da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80083de:	4290      	cmp	r0, r2
 80083e0:	d101      	bne.n	80083e6 <strncmp+0x1a>
 80083e2:	42a3      	cmp	r3, r4
 80083e4:	d101      	bne.n	80083ea <strncmp+0x1e>
 80083e6:	1a80      	subs	r0, r0, r2
 80083e8:	bd10      	pop	{r4, pc}
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d1f3      	bne.n	80083d6 <strncmp+0xa>
 80083ee:	e7fa      	b.n	80083e6 <strncmp+0x1a>
 80083f0:	4610      	mov	r0, r2
 80083f2:	e7f9      	b.n	80083e8 <strncmp+0x1c>

080083f4 <_strtol_l.constprop.0>:
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083fa:	d001      	beq.n	8008400 <_strtol_l.constprop.0+0xc>
 80083fc:	2b24      	cmp	r3, #36	; 0x24
 80083fe:	d906      	bls.n	800840e <_strtol_l.constprop.0+0x1a>
 8008400:	f7ff ffa4 	bl	800834c <__errno>
 8008404:	2316      	movs	r3, #22
 8008406:	6003      	str	r3, [r0, #0]
 8008408:	2000      	movs	r0, #0
 800840a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800840e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80084f4 <_strtol_l.constprop.0+0x100>
 8008412:	460d      	mov	r5, r1
 8008414:	462e      	mov	r6, r5
 8008416:	f815 4b01 	ldrb.w	r4, [r5], #1
 800841a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800841e:	f017 0708 	ands.w	r7, r7, #8
 8008422:	d1f7      	bne.n	8008414 <_strtol_l.constprop.0+0x20>
 8008424:	2c2d      	cmp	r4, #45	; 0x2d
 8008426:	d132      	bne.n	800848e <_strtol_l.constprop.0+0x9a>
 8008428:	782c      	ldrb	r4, [r5, #0]
 800842a:	2701      	movs	r7, #1
 800842c:	1cb5      	adds	r5, r6, #2
 800842e:	2b00      	cmp	r3, #0
 8008430:	d05b      	beq.n	80084ea <_strtol_l.constprop.0+0xf6>
 8008432:	2b10      	cmp	r3, #16
 8008434:	d109      	bne.n	800844a <_strtol_l.constprop.0+0x56>
 8008436:	2c30      	cmp	r4, #48	; 0x30
 8008438:	d107      	bne.n	800844a <_strtol_l.constprop.0+0x56>
 800843a:	782c      	ldrb	r4, [r5, #0]
 800843c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008440:	2c58      	cmp	r4, #88	; 0x58
 8008442:	d14d      	bne.n	80084e0 <_strtol_l.constprop.0+0xec>
 8008444:	786c      	ldrb	r4, [r5, #1]
 8008446:	2310      	movs	r3, #16
 8008448:	3502      	adds	r5, #2
 800844a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800844e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008452:	f04f 0c00 	mov.w	ip, #0
 8008456:	fbb8 f9f3 	udiv	r9, r8, r3
 800845a:	4666      	mov	r6, ip
 800845c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008460:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008464:	f1be 0f09 	cmp.w	lr, #9
 8008468:	d816      	bhi.n	8008498 <_strtol_l.constprop.0+0xa4>
 800846a:	4674      	mov	r4, lr
 800846c:	42a3      	cmp	r3, r4
 800846e:	dd24      	ble.n	80084ba <_strtol_l.constprop.0+0xc6>
 8008470:	f1bc 0f00 	cmp.w	ip, #0
 8008474:	db1e      	blt.n	80084b4 <_strtol_l.constprop.0+0xc0>
 8008476:	45b1      	cmp	r9, r6
 8008478:	d31c      	bcc.n	80084b4 <_strtol_l.constprop.0+0xc0>
 800847a:	d101      	bne.n	8008480 <_strtol_l.constprop.0+0x8c>
 800847c:	45a2      	cmp	sl, r4
 800847e:	db19      	blt.n	80084b4 <_strtol_l.constprop.0+0xc0>
 8008480:	fb06 4603 	mla	r6, r6, r3, r4
 8008484:	f04f 0c01 	mov.w	ip, #1
 8008488:	f815 4b01 	ldrb.w	r4, [r5], #1
 800848c:	e7e8      	b.n	8008460 <_strtol_l.constprop.0+0x6c>
 800848e:	2c2b      	cmp	r4, #43	; 0x2b
 8008490:	bf04      	itt	eq
 8008492:	782c      	ldrbeq	r4, [r5, #0]
 8008494:	1cb5      	addeq	r5, r6, #2
 8008496:	e7ca      	b.n	800842e <_strtol_l.constprop.0+0x3a>
 8008498:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800849c:	f1be 0f19 	cmp.w	lr, #25
 80084a0:	d801      	bhi.n	80084a6 <_strtol_l.constprop.0+0xb2>
 80084a2:	3c37      	subs	r4, #55	; 0x37
 80084a4:	e7e2      	b.n	800846c <_strtol_l.constprop.0+0x78>
 80084a6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80084aa:	f1be 0f19 	cmp.w	lr, #25
 80084ae:	d804      	bhi.n	80084ba <_strtol_l.constprop.0+0xc6>
 80084b0:	3c57      	subs	r4, #87	; 0x57
 80084b2:	e7db      	b.n	800846c <_strtol_l.constprop.0+0x78>
 80084b4:	f04f 3cff 	mov.w	ip, #4294967295
 80084b8:	e7e6      	b.n	8008488 <_strtol_l.constprop.0+0x94>
 80084ba:	f1bc 0f00 	cmp.w	ip, #0
 80084be:	da05      	bge.n	80084cc <_strtol_l.constprop.0+0xd8>
 80084c0:	2322      	movs	r3, #34	; 0x22
 80084c2:	6003      	str	r3, [r0, #0]
 80084c4:	4646      	mov	r6, r8
 80084c6:	b942      	cbnz	r2, 80084da <_strtol_l.constprop.0+0xe6>
 80084c8:	4630      	mov	r0, r6
 80084ca:	e79e      	b.n	800840a <_strtol_l.constprop.0+0x16>
 80084cc:	b107      	cbz	r7, 80084d0 <_strtol_l.constprop.0+0xdc>
 80084ce:	4276      	negs	r6, r6
 80084d0:	2a00      	cmp	r2, #0
 80084d2:	d0f9      	beq.n	80084c8 <_strtol_l.constprop.0+0xd4>
 80084d4:	f1bc 0f00 	cmp.w	ip, #0
 80084d8:	d000      	beq.n	80084dc <_strtol_l.constprop.0+0xe8>
 80084da:	1e69      	subs	r1, r5, #1
 80084dc:	6011      	str	r1, [r2, #0]
 80084de:	e7f3      	b.n	80084c8 <_strtol_l.constprop.0+0xd4>
 80084e0:	2430      	movs	r4, #48	; 0x30
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1b1      	bne.n	800844a <_strtol_l.constprop.0+0x56>
 80084e6:	2308      	movs	r3, #8
 80084e8:	e7af      	b.n	800844a <_strtol_l.constprop.0+0x56>
 80084ea:	2c30      	cmp	r4, #48	; 0x30
 80084ec:	d0a5      	beq.n	800843a <_strtol_l.constprop.0+0x46>
 80084ee:	230a      	movs	r3, #10
 80084f0:	e7ab      	b.n	800844a <_strtol_l.constprop.0+0x56>
 80084f2:	bf00      	nop
 80084f4:	0800aa89 	.word	0x0800aa89

080084f8 <strtol>:
 80084f8:	4613      	mov	r3, r2
 80084fa:	460a      	mov	r2, r1
 80084fc:	4601      	mov	r1, r0
 80084fe:	4802      	ldr	r0, [pc, #8]	; (8008508 <strtol+0x10>)
 8008500:	6800      	ldr	r0, [r0, #0]
 8008502:	f7ff bf77 	b.w	80083f4 <_strtol_l.constprop.0>
 8008506:	bf00      	nop
 8008508:	20008f94 	.word	0x20008f94

0800850c <_init>:
 800850c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850e:	bf00      	nop
 8008510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008512:	bc08      	pop	{r3}
 8008514:	469e      	mov	lr, r3
 8008516:	4770      	bx	lr

08008518 <_fini>:
 8008518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851a:	bf00      	nop
 800851c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800851e:	bc08      	pop	{r3}
 8008520:	469e      	mov	lr, r3
 8008522:	4770      	bx	lr
