
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acc0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b90  0800ae58  0800ae58  0001ae58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9e8  0800c9e8  00020400  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9e8  0800c9e8  0001c9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9f0  0800c9f0  00020400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9f0  0800c9f0  0001c9f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9f4  0800c9f4  0001c9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000400  20000000  0800c9f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006850  20000400  0800cdf8  00020400  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006c50  0800cdf8  00026c50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020400  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171c1  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b0  00000000  00000000  000375f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00039da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  0003b120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d6c  00000000  00000000  0003c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ee5  00000000  00000000  0005511c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a12ec  00000000  00000000  0006d001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  0010e2ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055d0  00000000  00000000  0010e3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  00113980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000400 	.word	0x20000400
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800ae40 	.word	0x0800ae40

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000404 	.word	0x20000404
 80001d4:	0800ae40 	.word	0x0800ae40

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2f>:
 80007b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007bc:	bf24      	itt	cs
 80007be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007c6:	d90d      	bls.n	80007e4 <__aeabi_d2f+0x30>
 80007c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007dc:	bf08      	it	eq
 80007de:	f020 0001 	biceq.w	r0, r0, #1
 80007e2:	4770      	bx	lr
 80007e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007e8:	d121      	bne.n	800082e <__aeabi_d2f+0x7a>
 80007ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ee:	bfbc      	itt	lt
 80007f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007f4:	4770      	bxlt	lr
 80007f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007fe:	f1c2 0218 	rsb	r2, r2, #24
 8000802:	f1c2 0c20 	rsb	ip, r2, #32
 8000806:	fa10 f30c 	lsls.w	r3, r0, ip
 800080a:	fa20 f002 	lsr.w	r0, r0, r2
 800080e:	bf18      	it	ne
 8000810:	f040 0001 	orrne.w	r0, r0, #1
 8000814:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000818:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800081c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000820:	ea40 000c 	orr.w	r0, r0, ip
 8000824:	fa23 f302 	lsr.w	r3, r3, r2
 8000828:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800082c:	e7cc      	b.n	80007c8 <__aeabi_d2f+0x14>
 800082e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000832:	d107      	bne.n	8000844 <__aeabi_d2f+0x90>
 8000834:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000838:	bf1e      	ittt	ne
 800083a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800083e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000842:	4770      	bxne	lr
 8000844:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000848:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800084c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b974 	b.w	8000b54 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468e      	mov	lr, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	d14d      	bne.n	800092e <__udivmoddi4+0xaa>
 8000892:	428a      	cmp	r2, r1
 8000894:	4694      	mov	ip, r2
 8000896:	d969      	bls.n	800096c <__udivmoddi4+0xe8>
 8000898:	fab2 f282 	clz	r2, r2
 800089c:	b152      	cbz	r2, 80008b4 <__udivmoddi4+0x30>
 800089e:	fa01 f302 	lsl.w	r3, r1, r2
 80008a2:	f1c2 0120 	rsb	r1, r2, #32
 80008a6:	fa20 f101 	lsr.w	r1, r0, r1
 80008aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ae:	ea41 0e03 	orr.w	lr, r1, r3
 80008b2:	4094      	lsls	r4, r2
 80008b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b8:	0c21      	lsrs	r1, r4, #16
 80008ba:	fbbe f6f8 	udiv	r6, lr, r8
 80008be:	fa1f f78c 	uxth.w	r7, ip
 80008c2:	fb08 e316 	mls	r3, r8, r6, lr
 80008c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ca:	fb06 f107 	mul.w	r1, r6, r7
 80008ce:	4299      	cmp	r1, r3
 80008d0:	d90a      	bls.n	80008e8 <__udivmoddi4+0x64>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008da:	f080 811f 	bcs.w	8000b1c <__udivmoddi4+0x298>
 80008de:	4299      	cmp	r1, r3
 80008e0:	f240 811c 	bls.w	8000b1c <__udivmoddi4+0x298>
 80008e4:	3e02      	subs	r6, #2
 80008e6:	4463      	add	r3, ip
 80008e8:	1a5b      	subs	r3, r3, r1
 80008ea:	b2a4      	uxth	r4, r4
 80008ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f0:	fb08 3310 	mls	r3, r8, r0, r3
 80008f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f8:	fb00 f707 	mul.w	r7, r0, r7
 80008fc:	42a7      	cmp	r7, r4
 80008fe:	d90a      	bls.n	8000916 <__udivmoddi4+0x92>
 8000900:	eb1c 0404 	adds.w	r4, ip, r4
 8000904:	f100 33ff 	add.w	r3, r0, #4294967295
 8000908:	f080 810a 	bcs.w	8000b20 <__udivmoddi4+0x29c>
 800090c:	42a7      	cmp	r7, r4
 800090e:	f240 8107 	bls.w	8000b20 <__udivmoddi4+0x29c>
 8000912:	4464      	add	r4, ip
 8000914:	3802      	subs	r0, #2
 8000916:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800091a:	1be4      	subs	r4, r4, r7
 800091c:	2600      	movs	r6, #0
 800091e:	b11d      	cbz	r5, 8000928 <__udivmoddi4+0xa4>
 8000920:	40d4      	lsrs	r4, r2
 8000922:	2300      	movs	r3, #0
 8000924:	e9c5 4300 	strd	r4, r3, [r5]
 8000928:	4631      	mov	r1, r6
 800092a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092e:	428b      	cmp	r3, r1
 8000930:	d909      	bls.n	8000946 <__udivmoddi4+0xc2>
 8000932:	2d00      	cmp	r5, #0
 8000934:	f000 80ef 	beq.w	8000b16 <__udivmoddi4+0x292>
 8000938:	2600      	movs	r6, #0
 800093a:	e9c5 0100 	strd	r0, r1, [r5]
 800093e:	4630      	mov	r0, r6
 8000940:	4631      	mov	r1, r6
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000946:	fab3 f683 	clz	r6, r3
 800094a:	2e00      	cmp	r6, #0
 800094c:	d14a      	bne.n	80009e4 <__udivmoddi4+0x160>
 800094e:	428b      	cmp	r3, r1
 8000950:	d302      	bcc.n	8000958 <__udivmoddi4+0xd4>
 8000952:	4282      	cmp	r2, r0
 8000954:	f200 80f9 	bhi.w	8000b4a <__udivmoddi4+0x2c6>
 8000958:	1a84      	subs	r4, r0, r2
 800095a:	eb61 0303 	sbc.w	r3, r1, r3
 800095e:	2001      	movs	r0, #1
 8000960:	469e      	mov	lr, r3
 8000962:	2d00      	cmp	r5, #0
 8000964:	d0e0      	beq.n	8000928 <__udivmoddi4+0xa4>
 8000966:	e9c5 4e00 	strd	r4, lr, [r5]
 800096a:	e7dd      	b.n	8000928 <__udivmoddi4+0xa4>
 800096c:	b902      	cbnz	r2, 8000970 <__udivmoddi4+0xec>
 800096e:	deff      	udf	#255	; 0xff
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	2a00      	cmp	r2, #0
 8000976:	f040 8092 	bne.w	8000a9e <__udivmoddi4+0x21a>
 800097a:	eba1 010c 	sub.w	r1, r1, ip
 800097e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000982:	fa1f fe8c 	uxth.w	lr, ip
 8000986:	2601      	movs	r6, #1
 8000988:	0c20      	lsrs	r0, r4, #16
 800098a:	fbb1 f3f7 	udiv	r3, r1, r7
 800098e:	fb07 1113 	mls	r1, r7, r3, r1
 8000992:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000996:	fb0e f003 	mul.w	r0, lr, r3
 800099a:	4288      	cmp	r0, r1
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x12c>
 800099e:	eb1c 0101 	adds.w	r1, ip, r1
 80009a2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x12a>
 80009a8:	4288      	cmp	r0, r1
 80009aa:	f200 80cb 	bhi.w	8000b44 <__udivmoddi4+0x2c0>
 80009ae:	4643      	mov	r3, r8
 80009b0:	1a09      	subs	r1, r1, r0
 80009b2:	b2a4      	uxth	r4, r4
 80009b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009b8:	fb07 1110 	mls	r1, r7, r0, r1
 80009bc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009c0:	fb0e fe00 	mul.w	lr, lr, r0
 80009c4:	45a6      	cmp	lr, r4
 80009c6:	d908      	bls.n	80009da <__udivmoddi4+0x156>
 80009c8:	eb1c 0404 	adds.w	r4, ip, r4
 80009cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80009d0:	d202      	bcs.n	80009d8 <__udivmoddi4+0x154>
 80009d2:	45a6      	cmp	lr, r4
 80009d4:	f200 80bb 	bhi.w	8000b4e <__udivmoddi4+0x2ca>
 80009d8:	4608      	mov	r0, r1
 80009da:	eba4 040e 	sub.w	r4, r4, lr
 80009de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009e2:	e79c      	b.n	800091e <__udivmoddi4+0x9a>
 80009e4:	f1c6 0720 	rsb	r7, r6, #32
 80009e8:	40b3      	lsls	r3, r6
 80009ea:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80009f2:	fa20 f407 	lsr.w	r4, r0, r7
 80009f6:	fa01 f306 	lsl.w	r3, r1, r6
 80009fa:	431c      	orrs	r4, r3
 80009fc:	40f9      	lsrs	r1, r7
 80009fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a02:	fa00 f306 	lsl.w	r3, r0, r6
 8000a06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a0a:	0c20      	lsrs	r0, r4, #16
 8000a0c:	fa1f fe8c 	uxth.w	lr, ip
 8000a10:	fb09 1118 	mls	r1, r9, r8, r1
 8000a14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a18:	fb08 f00e 	mul.w	r0, r8, lr
 8000a1c:	4288      	cmp	r0, r1
 8000a1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a22:	d90b      	bls.n	8000a3c <__udivmoddi4+0x1b8>
 8000a24:	eb1c 0101 	adds.w	r1, ip, r1
 8000a28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a2c:	f080 8088 	bcs.w	8000b40 <__udivmoddi4+0x2bc>
 8000a30:	4288      	cmp	r0, r1
 8000a32:	f240 8085 	bls.w	8000b40 <__udivmoddi4+0x2bc>
 8000a36:	f1a8 0802 	sub.w	r8, r8, #2
 8000a3a:	4461      	add	r1, ip
 8000a3c:	1a09      	subs	r1, r1, r0
 8000a3e:	b2a4      	uxth	r4, r4
 8000a40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a44:	fb09 1110 	mls	r1, r9, r0, r1
 8000a48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a50:	458e      	cmp	lr, r1
 8000a52:	d908      	bls.n	8000a66 <__udivmoddi4+0x1e2>
 8000a54:	eb1c 0101 	adds.w	r1, ip, r1
 8000a58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a5c:	d26c      	bcs.n	8000b38 <__udivmoddi4+0x2b4>
 8000a5e:	458e      	cmp	lr, r1
 8000a60:	d96a      	bls.n	8000b38 <__udivmoddi4+0x2b4>
 8000a62:	3802      	subs	r0, #2
 8000a64:	4461      	add	r1, ip
 8000a66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a6e:	eba1 010e 	sub.w	r1, r1, lr
 8000a72:	42a1      	cmp	r1, r4
 8000a74:	46c8      	mov	r8, r9
 8000a76:	46a6      	mov	lr, r4
 8000a78:	d356      	bcc.n	8000b28 <__udivmoddi4+0x2a4>
 8000a7a:	d053      	beq.n	8000b24 <__udivmoddi4+0x2a0>
 8000a7c:	b15d      	cbz	r5, 8000a96 <__udivmoddi4+0x212>
 8000a7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a82:	eb61 010e 	sbc.w	r1, r1, lr
 8000a86:	fa01 f707 	lsl.w	r7, r1, r7
 8000a8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a8e:	40f1      	lsrs	r1, r6
 8000a90:	431f      	orrs	r7, r3
 8000a92:	e9c5 7100 	strd	r7, r1, [r5]
 8000a96:	2600      	movs	r6, #0
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	40d8      	lsrs	r0, r3
 8000aa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aac:	4091      	lsls	r1, r2
 8000aae:	4301      	orrs	r1, r0
 8000ab0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab4:	fa1f fe8c 	uxth.w	lr, ip
 8000ab8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000abc:	fb07 3610 	mls	r6, r7, r0, r3
 8000ac0:	0c0b      	lsrs	r3, r1, #16
 8000ac2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ac6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aca:	429e      	cmp	r6, r3
 8000acc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ad0:	d908      	bls.n	8000ae4 <__udivmoddi4+0x260>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ada:	d22f      	bcs.n	8000b3c <__udivmoddi4+0x2b8>
 8000adc:	429e      	cmp	r6, r3
 8000ade:	d92d      	bls.n	8000b3c <__udivmoddi4+0x2b8>
 8000ae0:	3802      	subs	r0, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	1b9b      	subs	r3, r3, r6
 8000ae6:	b289      	uxth	r1, r1
 8000ae8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000aec:	fb07 3316 	mls	r3, r7, r6, r3
 8000af0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000af4:	fb06 f30e 	mul.w	r3, r6, lr
 8000af8:	428b      	cmp	r3, r1
 8000afa:	d908      	bls.n	8000b0e <__udivmoddi4+0x28a>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b04:	d216      	bcs.n	8000b34 <__udivmoddi4+0x2b0>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d914      	bls.n	8000b34 <__udivmoddi4+0x2b0>
 8000b0a:	3e02      	subs	r6, #2
 8000b0c:	4461      	add	r1, ip
 8000b0e:	1ac9      	subs	r1, r1, r3
 8000b10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b14:	e738      	b.n	8000988 <__udivmoddi4+0x104>
 8000b16:	462e      	mov	r6, r5
 8000b18:	4628      	mov	r0, r5
 8000b1a:	e705      	b.n	8000928 <__udivmoddi4+0xa4>
 8000b1c:	4606      	mov	r6, r0
 8000b1e:	e6e3      	b.n	80008e8 <__udivmoddi4+0x64>
 8000b20:	4618      	mov	r0, r3
 8000b22:	e6f8      	b.n	8000916 <__udivmoddi4+0x92>
 8000b24:	454b      	cmp	r3, r9
 8000b26:	d2a9      	bcs.n	8000a7c <__udivmoddi4+0x1f8>
 8000b28:	ebb9 0802 	subs.w	r8, r9, r2
 8000b2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b30:	3801      	subs	r0, #1
 8000b32:	e7a3      	b.n	8000a7c <__udivmoddi4+0x1f8>
 8000b34:	4646      	mov	r6, r8
 8000b36:	e7ea      	b.n	8000b0e <__udivmoddi4+0x28a>
 8000b38:	4620      	mov	r0, r4
 8000b3a:	e794      	b.n	8000a66 <__udivmoddi4+0x1e2>
 8000b3c:	4640      	mov	r0, r8
 8000b3e:	e7d1      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b40:	46d0      	mov	r8, sl
 8000b42:	e77b      	b.n	8000a3c <__udivmoddi4+0x1b8>
 8000b44:	3b02      	subs	r3, #2
 8000b46:	4461      	add	r1, ip
 8000b48:	e732      	b.n	80009b0 <__udivmoddi4+0x12c>
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e709      	b.n	8000962 <__udivmoddi4+0xde>
 8000b4e:	4464      	add	r4, ip
 8000b50:	3802      	subs	r0, #2
 8000b52:	e742      	b.n	80009da <__udivmoddi4+0x156>

08000b54 <__aeabi_idiv0>:
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]


	char menu_string2[8];
	var_index=var_index&15;    //set var index ie  LFO[1].rate
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	70fb      	strb	r3, [r7, #3]
	uint8_t menu_countr=0; //  menu vars
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	75fb      	strb	r3, [r7, #23]
	uint8_t *menu_vars_var1=NULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]

	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000b74:	4bb6      	ldr	r3, [pc, #728]	; (8000e50 <menu_vars+0x2f8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	801a      	strh	r2, [r3, #0]
 8000b7a:	e01d      	b.n	8000bb8 <menu_vars+0x60>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000b7c:	4bb4      	ldr	r3, [pc, #720]	; (8000e50 <menu_vars+0x2f8>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4bb4      	ldr	r3, [pc, #720]	; (8000e54 <menu_vars+0x2fc>)
 8000b84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	6810      	ldr	r0, [r2, #0]
 8000b8e:	6851      	ldr	r1, [r2, #4]
 8000b90:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2208      	movs	r2, #8
 8000b98:	4619      	mov	r1, r3
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f00a f8b0 	bl	800ad00 <strncmp>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <menu_vars+0x54>
			menu_countr = i;
 8000ba6:	4baa      	ldr	r3, [pc, #680]	; (8000e50 <menu_vars+0x2f8>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000bac:	4ba8      	ldr	r3, [pc, #672]	; (8000e50 <menu_vars+0x2f8>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4ba6      	ldr	r3, [pc, #664]	; (8000e50 <menu_vars+0x2f8>)
 8000bb6:	801a      	strh	r2, [r3, #0]
 8000bb8:	4ba5      	ldr	r3, [pc, #660]	; (8000e50 <menu_vars+0x2f8>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	2b27      	cmp	r3, #39	; 0x27
 8000bbe:	d9dd      	bls.n	8000b7c <menu_vars+0x24>

		}
	}
	menu_vars_ref=menu_countr ;
 8000bc0:	4aa5      	ldr	r2, [pc, #660]	; (8000e58 <menu_vars+0x300>)
 8000bc2:	7dfb      	ldrb	r3, [r7, #23]
 8000bc4:	7013      	strb	r3, [r2, #0]
	if (var_index>menu_vars_index_limit[menu_countr]) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
 8000bc8:	4aa4      	ldr	r2, [pc, #656]	; (8000e5c <menu_vars+0x304>)
 8000bca:	5cd3      	ldrb	r3, [r2, r3]
 8000bcc:	78fa      	ldrb	r2, [r7, #3]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d903      	bls.n	8000bda <menu_vars+0x82>
 8000bd2:	7dfb      	ldrb	r3, [r7, #23]
 8000bd4:	4aa1      	ldr	r2, [pc, #644]	; (8000e5c <menu_vars+0x304>)
 8000bd6:	5cd3      	ldrb	r3, [r2, r3]
 8000bd8:	70fb      	strb	r3, [r7, #3]

	switch(menu_countr){
 8000bda:	7dfb      	ldrb	r3, [r7, #23]
 8000bdc:	2b27      	cmp	r3, #39	; 0x27
 8000bde:	f200 81a8 	bhi.w	8000f32 <menu_vars+0x3da>
 8000be2:	a201      	add	r2, pc, #4	; (adr r2, 8000be8 <menu_vars+0x90>)
 8000be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be8:	08000c89 	.word	0x08000c89
 8000bec:	08000c8f 	.word	0x08000c8f
 8000bf0:	08000ca1 	.word	0x08000ca1
 8000bf4:	08000cb5 	.word	0x08000cb5
 8000bf8:	08000cc9 	.word	0x08000cc9
 8000bfc:	08000cdd 	.word	0x08000cdd
 8000c00:	08000cf1 	.word	0x08000cf1
 8000c04:	08000cf7 	.word	0x08000cf7
 8000c08:	08000d09 	.word	0x08000d09
 8000c0c:	08000d1d 	.word	0x08000d1d
 8000c10:	08000d31 	.word	0x08000d31
 8000c14:	08000d45 	.word	0x08000d45
 8000c18:	08000d4b 	.word	0x08000d4b
 8000c1c:	08000d5d 	.word	0x08000d5d
 8000c20:	08000d71 	.word	0x08000d71
 8000c24:	08000d85 	.word	0x08000d85
 8000c28:	08000d99 	.word	0x08000d99
 8000c2c:	08000dad 	.word	0x08000dad
 8000c30:	08000dc1 	.word	0x08000dc1
 8000c34:	08000dd5 	.word	0x08000dd5
 8000c38:	08000de9 	.word	0x08000de9
 8000c3c:	08000dfd 	.word	0x08000dfd
 8000c40:	08000e03 	.word	0x08000e03
 8000c44:	08000e09 	.word	0x08000e09
 8000c48:	08000e0f 	.word	0x08000e0f
 8000c4c:	08000e1b 	.word	0x08000e1b
 8000c50:	08000e29 	.word	0x08000e29
 8000c54:	08000e37 	.word	0x08000e37
 8000c58:	08000e43 	.word	0x08000e43
 8000c5c:	08000e7d 	.word	0x08000e7d
 8000c60:	08000e8b 	.word	0x08000e8b
 8000c64:	08000e99 	.word	0x08000e99
 8000c68:	08000ea7 	.word	0x08000ea7
 8000c6c:	08000eb5 	.word	0x08000eb5
 8000c70:	08000ec3 	.word	0x08000ec3
 8000c74:	08000ed1 	.word	0x08000ed1
 8000c78:	08000ee5 	.word	0x08000ee5
 8000c7c:	08000ef7 	.word	0x08000ef7
 8000c80:	08000f0b 	.word	0x08000f0b
 8000c84:	08000f1f 	.word	0x08000f1f
	case 0:     menu_vars_var1= NULL; break;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	e154      	b.n	8000f38 <menu_vars+0x3e0>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000c8e:	78fa      	ldrb	r2, [r7, #3]
 8000c90:	4613      	mov	r3, r2
 8000c92:	011b      	lsls	r3, r3, #4
 8000c94:	4413      	add	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	4a71      	ldr	r2, [pc, #452]	; (8000e60 <menu_vars+0x308>)
 8000c9a:	4413      	add	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	e14b      	b.n	8000f38 <menu_vars+0x3e0>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000ca0:	78fa      	ldrb	r2, [r7, #3]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	011b      	lsls	r3, r3, #4
 8000ca6:	4413      	add	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4a6d      	ldr	r2, [pc, #436]	; (8000e60 <menu_vars+0x308>)
 8000cac:	4413      	add	r3, r2
 8000cae:	3301      	adds	r3, #1
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	e141      	b.n	8000f38 <menu_vars+0x3e0>
	case 3:     menu_vars_var1= &LFO[var_index].gain    ; break;
 8000cb4:	78fa      	ldrb	r2, [r7, #3]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	4413      	add	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4a68      	ldr	r2, [pc, #416]	; (8000e60 <menu_vars+0x308>)
 8000cc0:	4413      	add	r3, r2
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	e137      	b.n	8000f38 <menu_vars+0x3e0>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000cc8:	78fa      	ldrb	r2, [r7, #3]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	011b      	lsls	r3, r3, #4
 8000cce:	4413      	add	r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	4a63      	ldr	r2, [pc, #396]	; (8000e60 <menu_vars+0x308>)
 8000cd4:	4413      	add	r3, r2
 8000cd6:	3303      	adds	r3, #3
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	e12d      	b.n	8000f38 <menu_vars+0x3e0>
	case 5:     menu_vars_var1= &patch[var_index].target    ; break;
 8000cdc:	78fa      	ldrb	r2, [r7, #3]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	4a5f      	ldr	r2, [pc, #380]	; (8000e64 <menu_vars+0x30c>)
 8000ce8:	4413      	add	r3, r2
 8000cea:	3304      	adds	r3, #4
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	e123      	b.n	8000f38 <menu_vars+0x3e0>
	case 6:     menu_vars_var1= NULL   ; break;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	e120      	b.n	8000f38 <menu_vars+0x3e0>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000cf6:	78fb      	ldrb	r3, [r7, #3]
 8000cf8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000cfc:	fb02 f303 	mul.w	r3, r2, r3
 8000d00:	4a59      	ldr	r2, [pc, #356]	; (8000e68 <menu_vars+0x310>)
 8000d02:	4413      	add	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	e117      	b.n	8000f38 <menu_vars+0x3e0>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000d08:	78fb      	ldrb	r3, [r7, #3]
 8000d0a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d0e:	fb02 f303 	mul.w	r3, r2, r3
 8000d12:	4a55      	ldr	r2, [pc, #340]	; (8000e68 <menu_vars+0x310>)
 8000d14:	4413      	add	r3, r2
 8000d16:	3301      	adds	r3, #1
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	e10d      	b.n	8000f38 <menu_vars+0x3e0>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d22:	fb02 f303 	mul.w	r3, r2, r3
 8000d26:	4a50      	ldr	r2, [pc, #320]	; (8000e68 <menu_vars+0x310>)
 8000d28:	4413      	add	r3, r2
 8000d2a:	3302      	adds	r3, #2
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	e103      	b.n	8000f38 <menu_vars+0x3e0>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d36:	fb02 f303 	mul.w	r3, r2, r3
 8000d3a:	4a4b      	ldr	r2, [pc, #300]	; (8000e68 <menu_vars+0x310>)
 8000d3c:	4413      	add	r3, r2
 8000d3e:	3303      	adds	r3, #3
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	e0f9      	b.n	8000f38 <menu_vars+0x3e0>
	case 11:     menu_vars_var1= NULL  ; break;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	e0f6      	b.n	8000f38 <menu_vars+0x3e0>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000d4a:	78fa      	ldrb	r2, [r7, #3]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	1a9b      	subs	r3, r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	4a45      	ldr	r2, [pc, #276]	; (8000e6c <menu_vars+0x314>)
 8000d56:	4413      	add	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	e0ed      	b.n	8000f38 <menu_vars+0x3e0>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000d5c:	78fa      	ldrb	r2, [r7, #3]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	1a9b      	subs	r3, r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	4a41      	ldr	r2, [pc, #260]	; (8000e6c <menu_vars+0x314>)
 8000d68:	4413      	add	r3, r2
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	e0e3      	b.n	8000f38 <menu_vars+0x3e0>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000d70:	78fa      	ldrb	r2, [r7, #3]
 8000d72:	4613      	mov	r3, r2
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	1a9b      	subs	r3, r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4a3c      	ldr	r2, [pc, #240]	; (8000e6c <menu_vars+0x314>)
 8000d7c:	4413      	add	r3, r2
 8000d7e:	3302      	adds	r3, #2
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	e0d9      	b.n	8000f38 <menu_vars+0x3e0>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000d84:	78fa      	ldrb	r2, [r7, #3]
 8000d86:	4613      	mov	r3, r2
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	1a9b      	subs	r3, r3, r2
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	4a37      	ldr	r2, [pc, #220]	; (8000e6c <menu_vars+0x314>)
 8000d90:	4413      	add	r3, r2
 8000d92:	3303      	adds	r3, #3
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	e0cf      	b.n	8000f38 <menu_vars+0x3e0>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000d98:	78fa      	ldrb	r2, [r7, #3]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	1a9b      	subs	r3, r3, r2
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	4a32      	ldr	r2, [pc, #200]	; (8000e6c <menu_vars+0x314>)
 8000da4:	4413      	add	r3, r2
 8000da6:	3304      	adds	r3, #4
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	e0c5      	b.n	8000f38 <menu_vars+0x3e0>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000dac:	78fa      	ldrb	r2, [r7, #3]
 8000dae:	4613      	mov	r3, r2
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	1a9b      	subs	r3, r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	4a2d      	ldr	r2, [pc, #180]	; (8000e6c <menu_vars+0x314>)
 8000db8:	4413      	add	r3, r2
 8000dba:	3305      	adds	r3, #5
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	e0bb      	b.n	8000f38 <menu_vars+0x3e0>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000dc0:	78fa      	ldrb	r2, [r7, #3]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4a28      	ldr	r2, [pc, #160]	; (8000e6c <menu_vars+0x314>)
 8000dcc:	4413      	add	r3, r2
 8000dce:	3306      	adds	r3, #6
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	e0b1      	b.n	8000f38 <menu_vars+0x3e0>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 8000dd4:	78fa      	ldrb	r2, [r7, #3]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	1a9b      	subs	r3, r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4a23      	ldr	r2, [pc, #140]	; (8000e6c <menu_vars+0x314>)
 8000de0:	4413      	add	r3, r2
 8000de2:	3307      	adds	r3, #7
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	e0a7      	b.n	8000f38 <menu_vars+0x3e0>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000de8:	78fa      	ldrb	r2, [r7, #3]
 8000dea:	4613      	mov	r3, r2
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	1a9b      	subs	r3, r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	3308      	adds	r3, #8
 8000df4:	4a1d      	ldr	r2, [pc, #116]	; (8000e6c <menu_vars+0x314>)
 8000df6:	4413      	add	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	e09d      	b.n	8000f38 <menu_vars+0x3e0>
	case 21:     menu_vars_var1= NULL   ; break;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	e09a      	b.n	8000f38 <menu_vars+0x3e0>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <menu_vars+0x318>)
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	e097      	b.n	8000f38 <menu_vars+0x3e0>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000e08:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <menu_vars+0x31c>)
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	e094      	b.n	8000f38 <menu_vars+0x3e0>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000e0e:	78fb      	ldrb	r3, [r7, #3]
 8000e10:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <menu_vars+0x318>)
 8000e12:	4413      	add	r3, r2
 8000e14:	3302      	adds	r3, #2
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	e08e      	b.n	8000f38 <menu_vars+0x3e0>
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000e1a:	78fb      	ldrb	r3, [r7, #3]
 8000e1c:	3310      	adds	r3, #16
 8000e1e:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <menu_vars+0x318>)
 8000e20:	4413      	add	r3, r2
 8000e22:	3303      	adds	r3, #3
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	e087      	b.n	8000f38 <menu_vars+0x3e0>
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	3320      	adds	r3, #32
 8000e2c:	4a10      	ldr	r2, [pc, #64]	; (8000e70 <menu_vars+0x318>)
 8000e2e:	4413      	add	r3, r2
 8000e30:	3304      	adds	r3, #4
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	e080      	b.n	8000f38 <menu_vars+0x3e0>
	case 27: 	menu_vars_var1=&filter[var_index].cutoff_1 ;break;
 8000e36:	78fb      	ldrb	r3, [r7, #3]
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <menu_vars+0x320>)
 8000e3c:	4413      	add	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	e07a      	b.n	8000f38 <menu_vars+0x3e0>
	case 28: 	menu_vars_var1=&filter[var_index].cutoff_2 ;break;  // fine tune
 8000e42:	78fb      	ldrb	r3, [r7, #3]
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <menu_vars+0x320>)
 8000e48:	4413      	add	r3, r2
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	e073      	b.n	8000f38 <menu_vars+0x3e0>
 8000e50:	20000758 	.word	0x20000758
 8000e54:	2000024c 	.word	0x2000024c
 8000e58:	2000653d 	.word	0x2000653d
 8000e5c:	0800b794 	.word	0x0800b794
 8000e60:	20003300 	.word	0x20003300
 8000e64:	20004064 	.word	0x20004064
 8000e68:	200035a8 	.word	0x200035a8
 8000e6c:	200001bc 	.word	0x200001bc
 8000e70:	20004034 	.word	0x20004034
 8000e74:	20004035 	.word	0x20004035
 8000e78:	20000220 	.word	0x20000220
	case 29: 	menu_vars_var1=&filter[var_index].resonance ;break;
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	4a30      	ldr	r2, [pc, #192]	; (8000f44 <menu_vars+0x3ec>)
 8000e82:	4413      	add	r3, r2
 8000e84:	3302      	adds	r3, #2
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	e056      	b.n	8000f38 <menu_vars+0x3e0>
	case 30: 	menu_vars_var1=&filter[var_index].q_level  ;break;
 8000e8a:	78fb      	ldrb	r3, [r7, #3]
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	4a2d      	ldr	r2, [pc, #180]	; (8000f44 <menu_vars+0x3ec>)
 8000e90:	4413      	add	r3, r2
 8000e92:	3303      	adds	r3, #3
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	e04f      	b.n	8000f38 <menu_vars+0x3e0>
	case 31: 	menu_vars_var1=&filter[var_index].level;break;
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4a29      	ldr	r2, [pc, #164]	; (8000f44 <menu_vars+0x3ec>)
 8000e9e:	4413      	add	r3, r2
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	e048      	b.n	8000f38 <menu_vars+0x3e0>
	case 32: 	menu_vars_var1=&filter[var_index].feedback ;break;
 8000ea6:	78fb      	ldrb	r3, [r7, #3]
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	4a26      	ldr	r2, [pc, #152]	; (8000f44 <menu_vars+0x3ec>)
 8000eac:	4413      	add	r3, r2
 8000eae:	3307      	adds	r3, #7
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	e041      	b.n	8000f38 <menu_vars+0x3e0>
	case 33: 	menu_vars_var1=&filter[var_index].out_mix ;break;
 8000eb4:	78fb      	ldrb	r3, [r7, #3]
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	4a22      	ldr	r2, [pc, #136]	; (8000f44 <menu_vars+0x3ec>)
 8000eba:	4413      	add	r3, r2
 8000ebc:	3306      	adds	r3, #6
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	e03a      	b.n	8000f38 <menu_vars+0x3e0>
	case 34: 	menu_vars_var1=&filter[var_index].poles ;break;
 8000ec2:	78fb      	ldrb	r3, [r7, #3]
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	4a1f      	ldr	r2, [pc, #124]	; (8000f44 <menu_vars+0x3ec>)
 8000ec8:	4413      	add	r3, r2
 8000eca:	3305      	adds	r3, #5
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	e033      	b.n	8000f38 <menu_vars+0x3e0>
	case 35:     menu_vars_var1= &patch[var_index].target_index    ; break;
 8000ed0:	78fa      	ldrb	r2, [r7, #3]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <menu_vars+0x3f0>)
 8000edc:	4413      	add	r3, r2
 8000ede:	3305      	adds	r3, #5
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	e029      	b.n	8000f38 <menu_vars+0x3e0>
	case 36: 	menu_vars_var1=&patch[var_index].input1 ;break;
 8000ee4:	78fa      	ldrb	r2, [r7, #3]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	4a16      	ldr	r2, [pc, #88]	; (8000f48 <menu_vars+0x3f0>)
 8000ef0:	4413      	add	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	e020      	b.n	8000f38 <menu_vars+0x3e0>
	case 37: 	menu_vars_var1=&patch[var_index].input2 ;break;
 8000ef6:	78fa      	ldrb	r2, [r7, #3]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	4a11      	ldr	r2, [pc, #68]	; (8000f48 <menu_vars+0x3f0>)
 8000f02:	4413      	add	r3, r2
 8000f04:	3301      	adds	r3, #1
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	e016      	b.n	8000f38 <menu_vars+0x3e0>
	case 38: 	menu_vars_var1=&patch[var_index].in_mix ;break;
 8000f0a:	78fa      	ldrb	r2, [r7, #3]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	4a0c      	ldr	r2, [pc, #48]	; (8000f48 <menu_vars+0x3f0>)
 8000f16:	4413      	add	r3, r2
 8000f18:	3302      	adds	r3, #2
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	e00c      	b.n	8000f38 <menu_vars+0x3e0>
	case 39: 	menu_vars_var1=&patch[var_index].in_offset ;break;
 8000f1e:	78fa      	ldrb	r2, [r7, #3]
 8000f20:	4613      	mov	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <menu_vars+0x3f0>)
 8000f2a:	4413      	add	r3, r2
 8000f2c:	3303      	adds	r3, #3
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	e002      	b.n	8000f38 <menu_vars+0x3e0>

	default :		menu_vars_var1= NULL   ; break;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	bf00      	nop

	}
    // copy back address  ,ok
	// return the result number for later reference
	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
 8000f38:	693b      	ldr	r3, [r7, #16]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000220 	.word	0x20000220
 8000f48:	20004064 	.word	0x20004064

08000f4c <menu_parser>:



void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0


	char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 8000f52:	4a5b      	ldr	r2, [pc, #364]	; (80010c0 <menu_parser+0x174>)
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f5c:	e883 0003 	stmia.w	r3, {r0, r1}
	char menu_string2[8]="hhhhhhhh";
 8000f60:	4a58      	ldr	r2, [pc, #352]	; (80010c4 <menu_parser+0x178>)
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f68:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t string_counter=0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	75fb      	strb	r3, [r7, #23]

	uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 8000f70:	f240 43f9 	movw	r3, #1273	; 0x4f9
 8000f74:	82bb      	strh	r3, [r7, #20]


	if (string_search>menu_searchsize) {                    //this is ok
 8000f76:	4b54      	ldr	r3, [pc, #336]	; (80010c8 <menu_parser+0x17c>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	8aba      	ldrh	r2, [r7, #20]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	f0c0 809a 	bcc.w	80010b6 <menu_parser+0x16a>
		return;    }    // check if bigger than search area
	//if (menu_counter>240)  return;
	memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 8000f82:	4b51      	ldr	r3, [pc, #324]	; (80010c8 <menu_parser+0x17c>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b50      	ldr	r3, [pc, #320]	; (80010cc <menu_parser+0x180>)
 8000f8a:	441a      	add	r2, r3
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	6810      	ldr	r0, [r2, #0]
 8000f92:	6851      	ldr	r1, [r2, #4]
 8000f94:	c303      	stmia	r3!, {r0, r1}
	////////////////////////////
	for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 8000f96:	2300      	movs	r3, #0
 8000f98:	75fb      	strb	r3, [r7, #23]
 8000f9a:	e072      	b.n	8001082 <menu_parser+0x136>

		memcpy(menu_string2,menu_titles_final[string_counter],8);
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
 8000f9e:	4a4c      	ldr	r2, [pc, #304]	; (80010d0 <menu_parser+0x184>)
 8000fa0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	6810      	ldr	r0, [r2, #0]
 8000fa8:	6851      	ldr	r1, [r2, #4]
 8000faa:	c303      	stmia	r3!, {r0, r1}
		if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 8000fac:	1d39      	adds	r1, r7, #4
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	2208      	movs	r2, #8
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f009 fea3 	bl	800ad00 <strncmp>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d15d      	bne.n	800107c <menu_parser+0x130>
		{

			if ((menu_counter>110 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 8000fc0:	4b44      	ldr	r3, [pc, #272]	; (80010d4 <menu_parser+0x188>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	2b6e      	cmp	r3, #110	; 0x6e
 8000fc6:	d909      	bls.n	8000fdc <menu_parser+0x90>
 8000fc8:	4b42      	ldr	r3, [pc, #264]	; (80010d4 <menu_parser+0x188>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	2b7f      	cmp	r3, #127	; 0x7f
 8000fce:	d805      	bhi.n	8000fdc <menu_parser+0x90>
 8000fd0:	4b40      	ldr	r3, [pc, #256]	; (80010d4 <menu_parser+0x188>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	3310      	adds	r3, #16
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	4b3e      	ldr	r3, [pc, #248]	; (80010d4 <menu_parser+0x188>)
 8000fda:	801a      	strh	r2, [r3, #0]
			if((menu_counter>237)&&(menu_counter<256 )) menu_counter=menu_counter+16; // skip
 8000fdc:	4b3d      	ldr	r3, [pc, #244]	; (80010d4 <menu_parser+0x188>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	2bed      	cmp	r3, #237	; 0xed
 8000fe2:	d909      	bls.n	8000ff8 <menu_parser+0xac>
 8000fe4:	4b3b      	ldr	r3, [pc, #236]	; (80010d4 <menu_parser+0x188>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	2bff      	cmp	r3, #255	; 0xff
 8000fea:	d805      	bhi.n	8000ff8 <menu_parser+0xac>
 8000fec:	4b39      	ldr	r3, [pc, #228]	; (80010d4 <menu_parser+0x188>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	3310      	adds	r3, #16
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	4b37      	ldr	r3, [pc, #220]	; (80010d4 <menu_parser+0x188>)
 8000ff6:	801a      	strh	r2, [r3, #0]
			if((menu_counter>365)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
 8000ff8:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <menu_parser+0x188>)
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 8001000:	d30a      	bcc.n	8001018 <menu_parser+0xcc>
 8001002:	4b34      	ldr	r3, [pc, #208]	; (80010d4 <menu_parser+0x188>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800100a:	d205      	bcs.n	8001018 <menu_parser+0xcc>
 800100c:	4b31      	ldr	r3, [pc, #196]	; (80010d4 <menu_parser+0x188>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	3310      	adds	r3, #16
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <menu_parser+0x188>)
 8001016:	801a      	strh	r2, [r3, #0]
			menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 8001018:	7dfb      	ldrb	r3, [r7, #23]
 800101a:	041a      	lsls	r2, r3, #16
 800101c:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <menu_parser+0x188>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001024:	18d1      	adds	r1, r2, r3
 8001026:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <menu_parser+0x18c>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	4b2b      	ldr	r3, [pc, #172]	; (80010dc <menu_parser+0x190>)
 800102e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 8001032:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <menu_parser+0x18c>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	461a      	mov	r2, r3
 800103a:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <menu_parser+0x194>)
 800103c:	18d0      	adds	r0, r2, r3
 800103e:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <menu_parser+0x17c>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	3b02      	subs	r3, #2
 8001044:	4a21      	ldr	r2, [pc, #132]	; (80010cc <menu_parser+0x180>)
 8001046:	4413      	add	r3, r2
 8001048:	2202      	movs	r2, #2
 800104a:	4619      	mov	r1, r3
 800104c:	f009 fe42 	bl	800acd4 <memcpy>


			menu_title_count++;
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <menu_parser+0x18c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <menu_parser+0x18c>)
 800105a:	701a      	strb	r2, [r3, #0]
			menu_counter++;
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <menu_parser+0x188>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	b29a      	uxth	r2, r3
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <menu_parser+0x188>)
 8001066:	801a      	strh	r2, [r3, #0]
			space_check=0;
 8001068:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <menu_parser+0x198>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
			string_search=string_search+8;     // advance search position
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <menu_parser+0x17c>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	3308      	adds	r3, #8
 8001074:	b29a      	uxth	r2, r3
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <menu_parser+0x17c>)
 8001078:	801a      	strh	r2, [r3, #0]

			return;}
 800107a:	e01d      	b.n	80010b8 <menu_parser+0x16c>
	for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 800107c:	7dfb      	ldrb	r3, [r7, #23]
 800107e:	3301      	adds	r3, #1
 8001080:	75fb      	strb	r3, [r7, #23]
 8001082:	7dfb      	ldrb	r3, [r7, #23]
 8001084:	2b27      	cmp	r3, #39	; 0x27
 8001086:	d989      	bls.n	8000f9c <menu_parser+0x50>

	}

	if (space_check>1)  menu_counter++;   //this is ok
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <menu_parser+0x198>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d905      	bls.n	800109c <menu_parser+0x150>
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <menu_parser+0x188>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	b29a      	uxth	r2, r3
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <menu_parser+0x188>)
 800109a:	801a      	strh	r2, [r3, #0]
	space_check++;  // count empty spaces or fill characters
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <menu_parser+0x198>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <menu_parser+0x198>)
 80010a6:	701a      	strb	r2, [r3, #0]
	string_search++;
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <menu_parser+0x17c>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <menu_parser+0x17c>)
 80010b2:	801a      	strh	r2, [r3, #0]
	return;
 80010b4:	e000      	b.n	80010b8 <menu_parser+0x16c>
		return;    }    // check if bigger than search area
 80010b6:	bf00      	nop


}
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	0800b1a0 	.word	0x0800b1a0
 80010c4:	0800b1a8 	.word	0x0800b1a8
 80010c8:	200041f4 	.word	0x200041f4
 80010cc:	0800b290 	.word	0x0800b290
 80010d0:	2000024c 	.word	0x2000024c
 80010d4:	200041f6 	.word	0x200041f6
 80010d8:	200041f9 	.word	0x200041f9
 80010dc:	200041fc 	.word	0x200041fc
 80010e0:	200043fc 	.word	0x200043fc
 80010e4:	200041f8 	.word	0x200041f8

080010e8 <patch_target_parse>:
void patch_target_parse(void){    // records ptr for target options , works ok
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
uint8_t skip=0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]
		for (n=0;n<10;n++){
 80010f2:	4b91      	ldr	r3, [pc, #580]	; (8001338 <patch_target_parse+0x250>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	801a      	strh	r2, [r3, #0]
 80010f8:	e113      	b.n	8001322 <patch_target_parse+0x23a>

			uint16_t* output_hold;
			uint8_t input_hold=patch[n].input1;
 80010fa:	4b8f      	ldr	r3, [pc, #572]	; (8001338 <patch_target_parse+0x250>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	4619      	mov	r1, r3
 8001100:	4a8e      	ldr	r2, [pc, #568]	; (800133c <patch_target_parse+0x254>)
 8001102:	460b      	mov	r3, r1
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	440b      	add	r3, r1
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	4413      	add	r3, r2
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	717b      	strb	r3, [r7, #5]

			if (patch[n].input1>39) patch[n].input1=0;    // limit
 8001110:	4b89      	ldr	r3, [pc, #548]	; (8001338 <patch_target_parse+0x250>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	4a89      	ldr	r2, [pc, #548]	; (800133c <patch_target_parse+0x254>)
 8001118:	460b      	mov	r3, r1
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	4413      	add	r3, r2
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b27      	cmp	r3, #39	; 0x27
 8001126:	d90a      	bls.n	800113e <patch_target_parse+0x56>
 8001128:	4b83      	ldr	r3, [pc, #524]	; (8001338 <patch_target_parse+0x250>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	4a83      	ldr	r2, [pc, #524]	; (800133c <patch_target_parse+0x254>)
 8001130:	460b      	mov	r3, r1
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4413      	add	r3, r2
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]

			switch(input_hold&3){     // lfo now , can add adsr later
 800113e:	797b      	ldrb	r3, [r7, #5]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b03      	cmp	r3, #3
 8001146:	d842      	bhi.n	80011ce <patch_target_parse+0xe6>
 8001148:	a201      	add	r2, pc, #4	; (adr r2, 8001150 <patch_target_parse+0x68>)
 800114a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114e:	bf00      	nop
 8001150:	08001161 	.word	0x08001161
 8001154:	0800117b 	.word	0x0800117b
 8001158:	08001197 	.word	0x08001197
 800115c:	080011b3 	.word	0x080011b3

						case 0:   output_hold=&LFO[input_hold>>2].out[0];break;
 8001160:	797b      	ldrb	r3, [r7, #5]
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	b2db      	uxtb	r3, r3
 8001166:	461a      	mov	r2, r3
 8001168:	4613      	mov	r3, r2
 800116a:	011b      	lsls	r3, r3, #4
 800116c:	4413      	add	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4a73      	ldr	r2, [pc, #460]	; (8001340 <patch_target_parse+0x258>)
 8001172:	4413      	add	r3, r2
 8001174:	3306      	adds	r3, #6
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	e029      	b.n	80011ce <patch_target_parse+0xe6>
						case 1:   output_hold=&LFO[input_hold>>2].out_saw[0];break;
 800117a:	797b      	ldrb	r3, [r7, #5]
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	4613      	mov	r3, r2
 8001184:	011b      	lsls	r3, r3, #4
 8001186:	4413      	add	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	3318      	adds	r3, #24
 800118c:	4a6c      	ldr	r2, [pc, #432]	; (8001340 <patch_target_parse+0x258>)
 800118e:	4413      	add	r3, r2
 8001190:	3302      	adds	r3, #2
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	e01b      	b.n	80011ce <patch_target_parse+0xe6>
						case 2:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 8001196:	797b      	ldrb	r3, [r7, #5]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	b2db      	uxtb	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	4613      	mov	r3, r2
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	3328      	adds	r3, #40	; 0x28
 80011a8:	4a65      	ldr	r2, [pc, #404]	; (8001340 <patch_target_parse+0x258>)
 80011aa:	4413      	add	r3, r2
 80011ac:	3306      	adds	r3, #6
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	e00d      	b.n	80011ce <patch_target_parse+0xe6>
						case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 80011b2:	797b      	ldrb	r3, [r7, #5]
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	461a      	mov	r2, r3
 80011ba:	4613      	mov	r3, r2
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	4413      	add	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	3328      	adds	r3, #40	; 0x28
 80011c4:	4a5e      	ldr	r2, [pc, #376]	; (8001340 <patch_target_parse+0x258>)
 80011c6:	4413      	add	r3, r2
 80011c8:	3306      	adds	r3, #6
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	bf00      	nop
						}

			patch[n].in1_ptr=output_hold;   // sets input pointer to first sample , default is lfo[0].out [0]
 80011ce:	4b5a      	ldr	r3, [pc, #360]	; (8001338 <patch_target_parse+0x250>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	4619      	mov	r1, r3
 80011d4:	4a59      	ldr	r2, [pc, #356]	; (800133c <patch_target_parse+0x254>)
 80011d6:	460b      	mov	r3, r1
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	4413      	add	r3, r2
 80011e0:	3320      	adds	r3, #32
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	601a      	str	r2, [r3, #0]


			if (patch[n].target) {  // test if above zero
 80011e6:	4b54      	ldr	r3, [pc, #336]	; (8001338 <patch_target_parse+0x250>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	4619      	mov	r1, r3
 80011ec:	4a53      	ldr	r2, [pc, #332]	; (800133c <patch_target_parse+0x254>)
 80011ee:	460b      	mov	r3, r1
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	4413      	add	r3, r2
 80011f8:	3304      	adds	r3, #4
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 808a 	beq.w	8001316 <patch_target_parse+0x22e>


				uint8_t target_input=patch[n].target; // copy to avoid messed up pointer
 8001202:	4b4d      	ldr	r3, [pc, #308]	; (8001338 <patch_target_parse+0x250>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	4619      	mov	r1, r3
 8001208:	4a4c      	ldr	r2, [pc, #304]	; (800133c <patch_target_parse+0x254>)
 800120a:	460b      	mov	r3, r1
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	4413      	add	r3, r2
 8001214:	3304      	adds	r3, #4
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	73fb      	strb	r3, [r7, #15]
 800121e:	e00a      	b.n	8001236 <patch_target_parse+0x14e>
					if (patch_skip_list[target_input]==1)  target_input++;
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	4a48      	ldr	r2, [pc, #288]	; (8001344 <patch_target_parse+0x25c>)
 8001224:	5cd3      	ldrb	r3, [r2, r3]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d102      	bne.n	8001230 <patch_target_parse+0x148>
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	3301      	adds	r3, #1
 800122e:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	3301      	adds	r3, #1
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	2b27      	cmp	r3, #39	; 0x27
 800123a:	d9f1      	bls.n	8001220 <patch_target_parse+0x138>

				}  // test against list
				if (target_input>(menu_lookup_count-1)) target_input=menu_lookup_count-1;
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	2b27      	cmp	r3, #39	; 0x27
 8001240:	d901      	bls.n	8001246 <patch_target_parse+0x15e>
 8001242:	2327      	movs	r3, #39	; 0x27
 8001244:	71fb      	strb	r3, [r7, #7]
				if (target_input!=35)  {     // make target index is not selected
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b23      	cmp	r3, #35	; 0x23
 800124a:	d058      	beq.n	80012fe <patch_target_parse+0x216>


			patch[n].target=target_input; // write back corrected value
 800124c:	4b3a      	ldr	r3, [pc, #232]	; (8001338 <patch_target_parse+0x250>)
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	4a3a      	ldr	r2, [pc, #232]	; (800133c <patch_target_parse+0x254>)
 8001254:	460b      	mov	r3, r1
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4413      	add	r3, r2
 800125e:	3304      	adds	r3, #4
 8001260:	79fa      	ldrb	r2, [r7, #7]
 8001262:	701a      	strb	r2, [r3, #0]

			uint8_t target_index=patch[n].target_index;
 8001264:	4b34      	ldr	r3, [pc, #208]	; (8001338 <patch_target_parse+0x250>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	4a34      	ldr	r2, [pc, #208]	; (800133c <patch_target_parse+0x254>)
 800126c:	460b      	mov	r3, r1
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	4413      	add	r3, r2
 8001276:	3305      	adds	r3, #5
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	71bb      	strb	r3, [r7, #6]

			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 800127c:	79bb      	ldrb	r3, [r7, #6]
 800127e:	4a32      	ldr	r2, [pc, #200]	; (8001348 <patch_target_parse+0x260>)
 8001280:	5cd3      	ldrb	r3, [r2, r3]
 8001282:	79ba      	ldrb	r2, [r7, #6]
 8001284:	429a      	cmp	r2, r3
 8001286:	d903      	bls.n	8001290 <patch_target_parse+0x1a8>
			{	target_index=menu_vars_index_limit[target_index]; }
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	4a2f      	ldr	r2, [pc, #188]	; (8001348 <patch_target_parse+0x260>)
 800128c:	5cd3      	ldrb	r3, [r2, r3]
 800128e:	71bb      	strb	r3, [r7, #6]
			patch[n].target_index=target_index;
 8001290:	4b29      	ldr	r3, [pc, #164]	; (8001338 <patch_target_parse+0x250>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	4a29      	ldr	r2, [pc, #164]	; (800133c <patch_target_parse+0x254>)
 8001298:	460b      	mov	r3, r1
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4413      	add	r3, r2
 80012a2:	3305      	adds	r3, #5
 80012a4:	79ba      	ldrb	r2, [r7, #6]
 80012a6:	701a      	strb	r2, [r3, #0]
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	4a28      	ldr	r2, [pc, #160]	; (800134c <patch_target_parse+0x264>)
 80012ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b0:	79ba      	ldrb	r2, [r7, #6]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fc4f 	bl	8000b58 <menu_vars>
 80012ba:	6038      	str	r0, [r7, #0]

			if (target_out_ptr)           {patch[n].out_ptr =target_out_ptr;     // write ptr
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d029      	beq.n	8001316 <patch_target_parse+0x22e>
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <patch_target_parse+0x250>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	4619      	mov	r1, r3
 80012c8:	4a1c      	ldr	r2, [pc, #112]	; (800133c <patch_target_parse+0x254>)
 80012ca:	460b      	mov	r3, r1
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	4413      	add	r3, r2
 80012d4:	331c      	adds	r3, #28
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	601a      	str	r2, [r3, #0]
			patch[n].limiter=menu_vars_limiter[menu_vars_ref]; }
 80012da:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <patch_target_parse+0x268>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <patch_target_parse+0x250>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <patch_target_parse+0x26c>)
 80012e8:	5c98      	ldrb	r0, [r3, r2]
 80012ea:	4a14      	ldr	r2, [pc, #80]	; (800133c <patch_target_parse+0x254>)
 80012ec:	460b      	mov	r3, r1
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	4413      	add	r3, r2
 80012f6:	3324      	adds	r3, #36	; 0x24
 80012f8:	4602      	mov	r2, r0
 80012fa:	701a      	strb	r2, [r3, #0]
 80012fc:	e00b      	b.n	8001316 <patch_target_parse+0x22e>
				}
				else patch[n].target=0;  // write back 0 if failed
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <patch_target_parse+0x250>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	4619      	mov	r1, r3
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <patch_target_parse+0x254>)
 8001306:	460b      	mov	r3, r1
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	4413      	add	r3, r2
 8001310:	3304      	adds	r3, #4
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
		for (n=0;n<10;n++){
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <patch_target_parse+0x250>)
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <patch_target_parse+0x250>)
 8001320:	801a      	strh	r2, [r3, #0]
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <patch_target_parse+0x250>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	2b09      	cmp	r3, #9
 8001328:	f67f aee7 	bls.w	80010fa <patch_target_parse+0x12>


			}
		}

	}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000734 	.word	0x20000734
 800133c:	20004064 	.word	0x20004064
 8001340:	20003300 	.word	0x20003300
 8001344:	0800b7e4 	.word	0x0800b7e4
 8001348:	0800b794 	.word	0x0800b794
 800134c:	2000024c 	.word	0x2000024c
 8001350:	2000653d 	.word	0x2000653d
 8001354:	0800b7bc 	.word	0x0800b7bc

08001358 <patch_target_replace>:


	}

}
void patch_target_replace(void){					// sttaight value replace  ,ok
 8001358:	b490      	push	{r4, r7}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
	uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 800135e:	4b3f      	ldr	r3, [pc, #252]	; (800145c <patch_target_replace+0x104>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	73bb      	strb	r3, [r7, #14]

	for (n=0;n<10;n++){
 8001368:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <patch_target_replace+0x108>)
 800136a:	2200      	movs	r2, #0
 800136c:	801a      	strh	r2, [r3, #0]
 800136e:	e06b      	b.n	8001448 <patch_target_replace+0xf0>



		if (patch[n].target) {         // check first for enable
 8001370:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <patch_target_replace+0x108>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	4a3b      	ldr	r2, [pc, #236]	; (8001464 <patch_target_replace+0x10c>)
 8001378:	460b      	mov	r3, r1
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4413      	add	r3, r2
 8001382:	3304      	adds	r3, #4
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d058      	beq.n	800143c <patch_target_replace+0xe4>

			patch[n].output[loop_position]=*(patch[n].in1_ptr+(loop_position));   //write output here
 800138a:	4b35      	ldr	r3, [pc, #212]	; (8001460 <patch_target_replace+0x108>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	4619      	mov	r1, r3
 8001390:	4a34      	ldr	r2, [pc, #208]	; (8001464 <patch_target_replace+0x10c>)
 8001392:	460b      	mov	r3, r1
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	440b      	add	r3, r1
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4413      	add	r3, r2
 800139c:	3320      	adds	r3, #32
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	7bbb      	ldrb	r3, [r7, #14]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4413      	add	r3, r2
 80013a6:	4a2e      	ldr	r2, [pc, #184]	; (8001460 <patch_target_replace+0x108>)
 80013a8:	8812      	ldrh	r2, [r2, #0]
 80013aa:	4610      	mov	r0, r2
 80013ac:	7bba      	ldrb	r2, [r7, #14]
 80013ae:	881c      	ldrh	r4, [r3, #0]
 80013b0:	492c      	ldr	r1, [pc, #176]	; (8001464 <patch_target_replace+0x10c>)
 80013b2:	4603      	mov	r3, r0
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4403      	add	r3, r0
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	440b      	add	r3, r1
 80013c0:	4622      	mov	r2, r4
 80013c2:	80da      	strh	r2, [r3, #6]


			uint8_t  *ptr_to_modify =patch[n].out_ptr;       // select address , not always 8 bit ,ok
 80013c4:	4b26      	ldr	r3, [pc, #152]	; (8001460 <patch_target_replace+0x108>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	4a26      	ldr	r2, [pc, #152]	; (8001464 <patch_target_replace+0x10c>)
 80013cc:	460b      	mov	r3, r1
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4413      	add	r3, r2
 80013d6:	331c      	adds	r3, #28
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	60bb      	str	r3, [r7, #8]
			uint16_t lfo_out_temp=  (patch[n].output [loop_position])>>8;  // 0-256,
 80013dc:	4b20      	ldr	r3, [pc, #128]	; (8001460 <patch_target_replace+0x108>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	7bba      	ldrb	r2, [r7, #14]
 80013e4:	491f      	ldr	r1, [pc, #124]	; (8001464 <patch_target_replace+0x10c>)
 80013e6:	4603      	mov	r3, r0
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4403      	add	r3, r0
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	440b      	add	r3, r1
 80013f4:	88db      	ldrh	r3, [r3, #6]
 80013f6:	0a1b      	lsrs	r3, r3, #8
 80013f8:	80fb      	strh	r3, [r7, #6]
			uint8_t lfo_mod1=ptr_to_modify; //ok
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	717b      	strb	r3, [r7, #5]

			uint8_t  var_replaced =  lfo_out_temp &255 ;   // grab lfo out *    data to be modfied
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	73fb      	strb	r3, [r7, #15]

			if (var_replaced>patch[n].limiter) var_replaced=patch[n].limiter;  // limit lfo output
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <patch_target_replace+0x108>)
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	4619      	mov	r1, r3
 8001408:	4a16      	ldr	r2, [pc, #88]	; (8001464 <patch_target_replace+0x10c>)
 800140a:	460b      	mov	r3, r1
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	4413      	add	r3, r2
 8001414:	3324      	adds	r3, #36	; 0x24
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	429a      	cmp	r2, r3
 800141c:	d90b      	bls.n	8001436 <patch_target_replace+0xde>
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <patch_target_replace+0x108>)
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	4619      	mov	r1, r3
 8001424:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <patch_target_replace+0x10c>)
 8001426:	460b      	mov	r3, r1
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	440b      	add	r3, r1
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4413      	add	r3, r2
 8001430:	3324      	adds	r3, #36	; 0x24
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	73fb      	strb	r3, [r7, #15]

			*ptr_to_modify =var_replaced;   // replace original value,ok
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	701a      	strb	r2, [r3, #0]
	for (n=0;n<10;n++){
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <patch_target_replace+0x108>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	b29a      	uxth	r2, r3
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <patch_target_replace+0x108>)
 8001446:	801a      	strh	r2, [r3, #0]
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <patch_target_replace+0x108>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	2b09      	cmp	r3, #9
 800144e:	d98f      	bls.n	8001370 <patch_target_replace+0x18>
		}


	}

}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bc90      	pop	{r4, r7}
 800145a:	4770      	bx	lr
 800145c:	20004514 	.word	0x20004514
 8001460:	20000734 	.word	0x20000734
 8001464:	20004064 	.word	0x20004064

08001468 <SPI_command>:



void SPI_command(void){
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 800146e:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <SPI_command+0x68>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d128      	bne.n	80014c8 <SPI_command+0x60>
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <SPI_command+0x6c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d124      	bne.n	80014c8 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <SPI_command+0x70>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	0a1b      	lsrs	r3, r3, #8
 8001484:	b29b      	uxth	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <SPI_command+0x2a>
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <SPI_command+0x74>)
 800148c:	22f8      	movs	r2, #248	; 0xf8
 800148e:	701a      	strb	r2, [r3, #0]
 8001490:	e002      	b.n	8001498 <SPI_command+0x30>
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <SPI_command+0x74>)
 8001494:	22fa      	movs	r2, #250	; 0xfa
 8001496:	701a      	strb	r2, [r3, #0]

	spi_store[0]=spi_byte&255;
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <SPI_command+0x74>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <SPI_command+0x70>)
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	091b      	lsrs	r3, r3, #4
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <SPI_command+0x70>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 80014b6:	4639      	mov	r1, r7
 80014b8:	2303      	movs	r3, #3
 80014ba:	2203      	movs	r2, #3
 80014bc:	4808      	ldr	r0, [pc, #32]	; (80014e0 <SPI_command+0x78>)
 80014be:	f007 f9ea 	bl	8008896 <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 80014c2:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <SPI_command+0x68>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	801a      	strh	r2, [r3, #0]
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	2000239e 	.word	0x2000239e
 80014d4:	200023a4 	.word	0x200023a4
 80014d8:	200023a2 	.word	0x200023a2
 80014dc:	200023a0 	.word	0x200023a0
 80014e0:	20006a94 	.word	0x20006a94

080014e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

	{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
		time_proc++;
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4b29      	ldr	r3, [pc, #164]	; (800159c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80014f6:	801a      	strh	r2, [r3, #0]
		//if (((sample_point==511) || (sample_point==1022)) && (bank_write)  ) error_count++;

		if (sample_point==511) {bank_write=1; sample_pointD=0;  }
 80014f8:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001502:	4293      	cmp	r3, r2
 8001504:	d105      	bne.n	8001512 <HAL_TIM_PeriodElapsedCallback+0x2e>
 8001506:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001508:	2201      	movs	r2, #1
 800150a:	801a      	strh	r2, [r3, #0]
 800150c:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800150e:	2200      	movs	r2, #0
 8001510:	801a      	strh	r2, [r3, #0]
		if (sample_point==1022) {bank_write=1; sample_pointD=512; }
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800151c:	4293      	cmp	r3, r2
 800151e:	d106      	bne.n	800152e <HAL_TIM_PeriodElapsedCallback+0x4a>
 8001520:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001522:	2201      	movs	r2, #1
 8001524:	801a      	strh	r2, [r3, #0]
 8001526:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800152c:	801a      	strh	r2, [r3, #0]
		sample_point=sample_point & 1023;// this is 1
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	b29b      	uxth	r3, r3
 8001534:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001538:	b29a      	uxth	r2, r3
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800153c:	801a      	strh	r2, [r3, #0]
		play_hold=play_sample[sample_point<<1]; // this is 2
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	b29b      	uxth	r3, r3
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4a19      	ldr	r2, [pc, #100]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001548:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800154e:	801a      	strh	r2, [r3, #0]
		play_hold2=play_sample[(sample_point<<1)+1];
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	3301      	adds	r3, #1
 800155a:	4a14      	ldr	r2, [pc, #80]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800155c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001562:	801a      	strh	r2, [r3, #0]
		if(TIM3==htim->Instance)			// nothing here is consistent ?
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a13      	ldr	r2, [pc, #76]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d110      	bne.n	8001590 <HAL_TIM_PeriodElapsedCallback+0xac>
	{


	TIM3->CCR1=play_hold ;  // keep readin sample storage
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	b29a      	uxth	r2, r3
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001576:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=play_hold2 ;   // load up counter on ch2
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	b29a      	uxth	r2, r3
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001580:	639a      	str	r2, [r3, #56]	; 0x38

	sample_point++; //this needs to be here or too fast and wrong sample rate
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	3301      	adds	r3, #1
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800158e:	801a      	strh	r2, [r3, #0]

	}

	}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	200032fc 	.word	0x200032fc
 80015a0:	20001760 	.word	0x20001760
 80015a4:	200001b2 	.word	0x200001b2
 80015a8:	20001766 	.word	0x20001766
 80015ac:	2000075c 	.word	0x2000075c
 80015b0:	20001762 	.word	0x20001762
 80015b4:	20001764 	.word	0x20001764
 80015b8:	40000400 	.word	0x40000400

080015bc <analoginputloopb>:



void analoginputloopb(void){  //works ,getting obsolete
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0


	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 80015c2:	4b51      	ldr	r3, [pc, #324]	; (8001708 <analoginputloopb+0x14c>)
 80015c4:	889b      	ldrh	r3, [r3, #4]
 80015c6:	091b      	lsrs	r3, r3, #4
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b4f      	ldr	r3, [pc, #316]	; (800170c <analoginputloopb+0x150>)
 80015ce:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 80015d0:	4b4d      	ldr	r3, [pc, #308]	; (8001708 <analoginputloopb+0x14c>)
 80015d2:	889b      	ldrh	r3, [r3, #4]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	4b4c      	ldr	r3, [pc, #304]	; (8001710 <analoginputloopb+0x154>)
 80015de:	701a      	strb	r2, [r3, #0]


		cursor_menu[1]=0;
 80015e0:	4b49      	ldr	r3, [pc, #292]	; (8001708 <analoginputloopb+0x14c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	805a      	strh	r2, [r3, #2]

		cursor_menu[2]=enc2_dir;
 80015e6:	4b4b      	ldr	r3, [pc, #300]	; (8001714 <analoginputloopb+0x158>)
 80015e8:	881a      	ldrh	r2, [r3, #0]
 80015ea:	4b47      	ldr	r3, [pc, #284]	; (8001708 <analoginputloopb+0x14c>)
 80015ec:	809a      	strh	r2, [r3, #4]


	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 80015ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	085b      	lsrs	r3, r3, #1
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	4b47      	ldr	r3, [pc, #284]	; (8001718 <analoginputloopb+0x15c>)
 80015fa:	801a      	strh	r2, [r3, #0]
	enc2_store[enc2_store_count]=(TIM4->CNT)&255;  // read counter tim4, noisy
 80015fc:	4b47      	ldr	r3, [pc, #284]	; (800171c <analoginputloopb+0x160>)
 80015fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001600:	4b47      	ldr	r3, [pc, #284]	; (8001720 <analoginputloopb+0x164>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	b2c9      	uxtb	r1, r1
 8001608:	4b46      	ldr	r3, [pc, #280]	; (8001724 <analoginputloopb+0x168>)
 800160a:	5499      	strb	r1, [r3, r2]
	uint16_t enc2_store2=0;
 800160c:	2300      	movs	r3, #0
 800160e:	80fb      	strh	r3, [r7, #6]
	uint16_t enc2_store3=0;
 8001610:	2300      	movs	r3, #0
 8001612:	80bb      	strh	r3, [r7, #4]
	if (enc2_store_count==3) enc2_store_count=0; else enc2_store_count++;
 8001614:	4b42      	ldr	r3, [pc, #264]	; (8001720 <analoginputloopb+0x164>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b03      	cmp	r3, #3
 800161a:	d103      	bne.n	8001624 <analoginputloopb+0x68>
 800161c:	4b40      	ldr	r3, [pc, #256]	; (8001720 <analoginputloopb+0x164>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	e005      	b.n	8001630 <analoginputloopb+0x74>
 8001624:	4b3e      	ldr	r3, [pc, #248]	; (8001720 <analoginputloopb+0x164>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	3301      	adds	r3, #1
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b3c      	ldr	r3, [pc, #240]	; (8001720 <analoginputloopb+0x164>)
 800162e:	701a      	strb	r2, [r3, #0]

	enc2_store2=enc2_store[0]+enc2_store[1]+enc2_store[2]+enc2_store[3];     // average filter hopefully
 8001630:	4b3c      	ldr	r3, [pc, #240]	; (8001724 <analoginputloopb+0x168>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	b29a      	uxth	r2, r3
 8001636:	4b3b      	ldr	r3, [pc, #236]	; (8001724 <analoginputloopb+0x168>)
 8001638:	785b      	ldrb	r3, [r3, #1]
 800163a:	b29b      	uxth	r3, r3
 800163c:	4413      	add	r3, r2
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b38      	ldr	r3, [pc, #224]	; (8001724 <analoginputloopb+0x168>)
 8001642:	789b      	ldrb	r3, [r3, #2]
 8001644:	b29b      	uxth	r3, r3
 8001646:	4413      	add	r3, r2
 8001648:	b29a      	uxth	r2, r3
 800164a:	4b36      	ldr	r3, [pc, #216]	; (8001724 <analoginputloopb+0x168>)
 800164c:	78db      	ldrb	r3, [r3, #3]
 800164e:	b29b      	uxth	r3, r3
 8001650:	4413      	add	r3, r2
 8001652:	80fb      	strh	r3, [r7, #6]
	enc2_store3=enc2_store2>>3;
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	08db      	lsrs	r3, r3, #3
 8001658:	80bb      	strh	r3, [r7, #4]
	enc2_temp=enc2_store3;
 800165a:	4a33      	ldr	r2, [pc, #204]	; (8001728 <analoginputloopb+0x16c>)
 800165c:	88bb      	ldrh	r3, [r7, #4]
 800165e:	8013      	strh	r3, [r2, #0]

	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;
 8001660:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <analoginputloopb+0x15c>)
 8001662:	881a      	ldrh	r2, [r3, #0]
 8001664:	4b31      	ldr	r3, [pc, #196]	; (800172c <analoginputloopb+0x170>)
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d908      	bls.n	800167e <analoginputloopb+0xc2>
 800166c:	4b30      	ldr	r3, [pc, #192]	; (8001730 <analoginputloopb+0x174>)
 800166e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001672:	b29b      	uxth	r3, r3
 8001674:	3b01      	subs	r3, #1
 8001676:	b29b      	uxth	r3, r3
 8001678:	b21a      	sxth	r2, r3
 800167a:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <analoginputloopb+0x174>)
 800167c:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 800167e:	4b26      	ldr	r3, [pc, #152]	; (8001718 <analoginputloopb+0x15c>)
 8001680:	881a      	ldrh	r2, [r3, #0]
 8001682:	4b2a      	ldr	r3, [pc, #168]	; (800172c <analoginputloopb+0x170>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d208      	bcs.n	800169c <analoginputloopb+0xe0>
 800168a:	4b29      	ldr	r3, [pc, #164]	; (8001730 <analoginputloopb+0x174>)
 800168c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001690:	b29b      	uxth	r3, r3
 8001692:	3301      	adds	r3, #1
 8001694:	b29b      	uxth	r3, r3
 8001696:	b21a      	sxth	r2, r3
 8001698:	4b25      	ldr	r3, [pc, #148]	; (8001730 <analoginputloopb+0x174>)
 800169a:	801a      	strh	r2, [r3, #0]


  if (enc2_temp>383) enc2_temp=383;  //mem overflow somewhere
 800169c:	4b22      	ldr	r3, [pc, #136]	; (8001728 <analoginputloopb+0x16c>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80016a4:	d303      	bcc.n	80016ae <analoginputloopb+0xf2>
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <analoginputloopb+0x16c>)
 80016a8:	f240 127f 	movw	r2, #383	; 0x17f
 80016ac:	801a      	strh	r2, [r3, #0]
	if (enc_dir>255) enc_dir=255;
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <analoginputloopb+0x174>)
 80016b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b4:	2bff      	cmp	r3, #255	; 0xff
 80016b6:	dd02      	ble.n	80016be <analoginputloopb+0x102>
 80016b8:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <analoginputloopb+0x174>)
 80016ba:	22ff      	movs	r2, #255	; 0xff
 80016bc:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <analoginputloopb+0x174>)
 80016c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	da02      	bge.n	80016ce <analoginputloopb+0x112>
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <analoginputloopb+0x174>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	801a      	strh	r2, [r3, #0]

			enc_tempB=enc_temp;
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <analoginputloopb+0x15c>)
 80016d0:	881a      	ldrh	r2, [r3, #0]
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <analoginputloopb+0x170>)
 80016d4:	801a      	strh	r2, [r3, #0]

			enc2_dir=enc2_temp; //temp to try source data
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <analoginputloopb+0x16c>)
 80016d8:	881a      	ldrh	r2, [r3, #0]
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <analoginputloopb+0x158>)
 80016dc:	801a      	strh	r2, [r3, #0]


					enc2_tempB=enc2_temp; // to effective as counter not getting reset
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <analoginputloopb+0x16c>)
 80016e0:	881a      	ldrh	r2, [r3, #0]
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <analoginputloopb+0x178>)
 80016e4:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <analoginputloopb+0x17c>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <analoginputloopb+0x180>)
 80016ee:	5c9b      	ldrb	r3, [r3, r2]
 80016f0:	4a11      	ldr	r2, [pc, #68]	; (8001738 <analoginputloopb+0x17c>)
 80016f2:	8812      	ldrh	r2, [r2, #0]
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	b2d9      	uxtb	r1, r3
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <analoginputloopb+0x184>)
 80016fa:	5499      	strb	r1, [r3, r2]


}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	200023a8 	.word	0x200023a8
 800170c:	2000072a 	.word	0x2000072a
 8001710:	2000072b 	.word	0x2000072b
 8001714:	20002396 	.word	0x20002396
 8001718:	2000238e 	.word	0x2000238e
 800171c:	40000800 	.word	0x40000800
 8001720:	20004511 	.word	0x20004511
 8001724:	2000450c 	.word	0x2000450c
 8001728:	20002392 	.word	0x20002392
 800172c:	20002390 	.word	0x20002390
 8001730:	20002398 	.word	0x20002398
 8001734:	20002394 	.word	0x20002394
 8001738:	20000730 	.word	0x20000730
 800173c:	200005a0 	.word	0x200005a0
 8001740:	20000420 	.word	0x20000420

08001744 <display_init>:
void display_init(void){
 8001744:	b5b0      	push	{r4, r5, r7, lr}
 8001746:	b08a      	sub	sp, #40	; 0x28
 8001748:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <display_init+0x90>)
 800174c:	1d3c      	adds	r4, r7, #4
 800174e:	461d      	mov	r5, r3
 8001750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001758:	682b      	ldr	r3, [r5, #0]
 800175a:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 800175c:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <display_init+0x94>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d132      	bne.n	80017ca <display_init+0x86>

switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8001764:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <display_init+0x98>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	b29b      	uxth	r3, r3
 800176a:	3b06      	subs	r3, #6
 800176c:	b29a      	uxth	r2, r3
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <display_init+0x9c>)
 8001770:	801a      	strh	r2, [r3, #0]
 8001772:	f000 fbb9 	bl	8001ee8 <displayBuffer2>
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <display_init+0x9c>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <display_init+0xa0>)
 800177e:	5c9b      	ldrb	r3, [r3, r2]
 8001780:	b29a      	uxth	r2, r3
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <display_init+0xa4>)
 8001784:	801a      	strh	r2, [r3, #0]
 8001786:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <display_init+0x98>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b05      	cmp	r3, #5
 800178e:	d80b      	bhi.n	80017a8 <display_init+0x64>
 8001790:	2003      	movs	r0, #3
 8001792:	f003 fcb1 	bl	80050f8 <HAL_Delay>
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <display_init+0x98>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	3328      	adds	r3, #40	; 0x28
 800179e:	443b      	add	r3, r7
 80017a0:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80017a4:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <display_init+0xa4>)
 80017a6:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <display_init+0x98>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <display_init+0x98>)
 80017b2:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <display_init+0x94>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]
 80017ba:	f7ff fe55 	bl	8001468 <SPI_command>
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <display_init+0x94>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <display_init+0xa8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	801a      	strh	r2, [r3, #0]


		  }

		//  if (init==5) display_fill();
}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	; 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bdb0      	pop	{r4, r5, r7, pc}
 80017d2:	bf00      	nop
 80017d4:	0800b1b0 	.word	0x0800b1b0
 80017d8:	200023a4 	.word	0x200023a4
 80017dc:	200023a5 	.word	0x200023a5
 80017e0:	200023a6 	.word	0x200023a6
 80017e4:	20000000 	.word	0x20000000
 80017e8:	200023a2 	.word	0x200023a2
 80017ec:	2000239e 	.word	0x2000239e

080017f0 <gfx_send>:


void gfx_send(void){         // send spi to lcd from gfx ram
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	71fb      	strb	r3, [r7, #7]
			uint8_t spi_store3=gfx_ram[gfx_send_counter];
 80017fa:	4b24      	ldr	r3, [pc, #144]	; (800188c <gfx_send+0x9c>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	4b23      	ldr	r3, [pc, #140]	; (8001890 <gfx_send+0xa0>)
 8001802:	5c9b      	ldrb	r3, [r3, r2]
 8001804:	71bb      	strb	r3, [r7, #6]
	if (gfx_send_counter2>1) {spi_store2=250;
 8001806:	4b23      	ldr	r3, [pc, #140]	; (8001894 <gfx_send+0xa4>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d902      	bls.n	8001814 <gfx_send+0x24>
 800180e:	23fa      	movs	r3, #250	; 0xfa
 8001810:	71fb      	strb	r3, [r7, #7]
 8001812:	e001      	b.n	8001818 <gfx_send+0x28>

			}

			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001814:	23f8      	movs	r3, #248	; 0xf8
 8001816:	71fb      	strb	r3, [r7, #7]


					spi_store[0]=spi_store2;
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	703b      	strb	r3, [r7, #0]
					spi_store[1]=((spi_store3>>4)<<4);
 800181c:	79bb      	ldrb	r3, [r7, #6]
 800181e:	091b      	lsrs	r3, r3, #4
 8001820:	b2db      	uxtb	r3, r3
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	b2db      	uxtb	r3, r3
 8001826:	707b      	strb	r3, [r7, #1]
					spi_store[2]=((spi_store3&15)<<4);
 8001828:	79bb      	ldrb	r3, [r7, #6]
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	b2db      	uxtb	r3, r3
 800182e:	70bb      	strb	r3, [r7, #2]


						HAL_SPI_Transmit(&hspi2,spi_store,3,3);  // ok
 8001830:	4639      	mov	r1, r7
 8001832:	2303      	movs	r3, #3
 8001834:	2203      	movs	r2, #3
 8001836:	4818      	ldr	r0, [pc, #96]	; (8001898 <gfx_send+0xa8>)
 8001838:	f007 f82d 	bl	8008896 <HAL_SPI_Transmit>
					if (gfx_send_counter2==17 ) { gfx_send_counter2=0;    } else gfx_send_counter2++; // check elsewhere if changing gfx_send_counter
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <gfx_send+0xa4>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b11      	cmp	r3, #17
 8001842:	d103      	bne.n	800184c <gfx_send+0x5c>
 8001844:	4b13      	ldr	r3, [pc, #76]	; (8001894 <gfx_send+0xa4>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
 800184a:	e005      	b.n	8001858 <gfx_send+0x68>
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <gfx_send+0xa4>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	3301      	adds	r3, #1
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <gfx_send+0xa4>)
 8001856:	701a      	strb	r2, [r3, #0]
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <gfx_send+0x9c>)
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	f240 427f 	movw	r2, #1151	; 0x47f
 8001860:	4293      	cmp	r3, r2
 8001862:	d109      	bne.n	8001878 <gfx_send+0x88>
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <gfx_send+0x9c>)
 8001866:	2200      	movs	r2, #0
 8001868:	801a      	strh	r2, [r3, #0]
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <gfx_send+0xac>)
 800186c:	2201      	movs	r2, #1
 800186e:	701a      	strb	r2, [r3, #0]
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <gfx_send+0xa4>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]

		}
 8001876:	e005      	b.n	8001884 <gfx_send+0x94>
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <gfx_send+0x9c>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	3301      	adds	r3, #1
 800187e:	b29a      	uxth	r2, r3
 8001880:	4b02      	ldr	r3, [pc, #8]	; (800188c <gfx_send+0x9c>)
 8001882:	801a      	strh	r2, [r3, #0]
		}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20002ed2 	.word	0x20002ed2
 8001890:	20002a50 	.word	0x20002a50
 8001894:	20002ed4 	.word	0x20002ed4
 8001898:	20006a94 	.word	0x20006a94
 800189c:	20002ee2 	.word	0x20002ee2

080018a0 <gfx_clear>:

void gfx_clear(void){     // simple gfx ram clear ,besides feedback
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

	for (n=0;n<1152 ;n=n+18)    {
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <gfx_clear+0x6c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	801a      	strh	r2, [r3, #0]
 80018aa:	e01c      	b.n	80018e6 <gfx_clear+0x46>
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <gfx_clear+0x70>)
 80018ae:	2202      	movs	r2, #2
 80018b0:	801a      	strh	r2, [r3, #0]
 80018b2:	e00e      	b.n	80018d2 <gfx_clear+0x32>
 80018b4:	4b15      	ldr	r3, [pc, #84]	; (800190c <gfx_clear+0x6c>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <gfx_clear+0x70>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	4a14      	ldr	r2, [pc, #80]	; (8001914 <gfx_clear+0x74>)
 80018c2:	2100      	movs	r1, #0
 80018c4:	54d1      	strb	r1, [r2, r3]
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <gfx_clear+0x70>)
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	3301      	adds	r3, #1
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <gfx_clear+0x70>)
 80018d0:	801a      	strh	r2, [r3, #0]
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <gfx_clear+0x70>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	2b11      	cmp	r3, #17
 80018d8:	d9ec      	bls.n	80018b4 <gfx_clear+0x14>
	for (n=0;n<1152 ;n=n+18)    {
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <gfx_clear+0x6c>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	3312      	adds	r3, #18
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <gfx_clear+0x6c>)
 80018e4:	801a      	strh	r2, [r3, #0]
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <gfx_clear+0x6c>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80018ee:	d3dd      	bcc.n	80018ac <gfx_clear+0xc>

				}  }
	 gfx_send_swap=0;  // disable line skip
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <gfx_clear+0x78>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <gfx_clear+0x7c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <gfx_clear+0x80>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]

}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	20000734 	.word	0x20000734
 8001910:	20000758 	.word	0x20000758
 8001914:	20002a50 	.word	0x20002a50
 8001918:	20002ed6 	.word	0x20002ed6
 800191c:	20002ed2 	.word	0x20002ed2
 8001920:	20002ee2 	.word	0x20002ee2

08001924 <display_clear>:

		 gfx_send();

	 }  }

void display_clear (void){ //  simple character clear on default menu3
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0

	uint16_t disp_counter=0;
 800192a:	2300      	movs	r3, #0
 800192c:	80fb      	strh	r3, [r7, #6]
	for (disp_counter=0;disp_counter<default_menu3_size;disp_counter++){
 800192e:	2300      	movs	r3, #0
 8001930:	80fb      	strh	r3, [r7, #6]
 8001932:	e006      	b.n	8001942 <display_clear+0x1e>
		default_menu3[disp_counter]=47;
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <display_clear+0x38>)
 8001938:	212f      	movs	r1, #47	; 0x2f
 800193a:	54d1      	strb	r1, [r2, r3]
	for (disp_counter=0;disp_counter<default_menu3_size;disp_counter++){
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	3301      	adds	r3, #1
 8001940:	80fb      	strh	r3, [r7, #6]
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <display_clear+0x3c>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	88fa      	ldrh	r2, [r7, #6]
 8001948:	429a      	cmp	r2, r3
 800194a:	d3f3      	bcc.n	8001934 <display_clear+0x10>
	}


}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20006540 	.word	0x20006540
 8001960:	2000450a 	.word	0x2000450a

08001964 <display_generate>:
void display_generate(void){    // display character generate, 1+1+16 chars
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0

	gfx_clear_flag=0;
 8001968:	4b10      	ldr	r3, [pc, #64]	; (80019ac <display_generate+0x48>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
	for (i=0;i<18;i++) {
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <display_generate+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	801a      	strh	r2, [r3, #0]
 8001974:	e009      	b.n	800198a <display_generate+0x26>
	display_process();
 8001976:	f000 f863 	bl	8001a40 <display_process>
		  displayBuffer2();} // 5 cycles max for the lot or  0.2ms
 800197a:	f000 fab5 	bl	8001ee8 <displayBuffer2>
	for (i=0;i<18;i++) {
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <display_generate+0x4c>)
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	3301      	adds	r3, #1
 8001984:	b29a      	uxth	r2, r3
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <display_generate+0x4c>)
 8001988:	801a      	strh	r2, [r3, #0]
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <display_generate+0x4c>)
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	2b11      	cmp	r3, #17
 8001990:	d9f1      	bls.n	8001976 <display_generate+0x12>
	 if(!gfx_clear_flag)   gfx_send_swap=1;   // enable line swapping
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <display_generate+0x48>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d102      	bne.n	80019a0 <display_generate+0x3c>
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <display_generate+0x50>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
	 disp_end=0;   ///reset till next full page
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <display_generate+0x54>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]

	//  if (!disp_stepper) break;

}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20004516 	.word	0x20004516
 80019b0:	20000758 	.word	0x20000758
 80019b4:	20002ed6 	.word	0x20002ed6
 80019b8:	20002ee2 	.word	0x20002ee2

080019bc <display_fill>:

void display_fill(void)  {     // full update of gfx memory, ok
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
loop_counter3=1;
 80019c2:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <display_fill+0x6c>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
uint16_t fill_counter= 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	80fb      	strh	r3, [r7, #6]
uint16_t init_b1=init_b;
 80019cc:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <display_fill+0x70>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	80bb      	strh	r3, [r7, #4]
uint16_t init_bs=init_b&896;   // get msb
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <display_fill+0x70>)
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80019da:	807b      	strh	r3, [r7, #2]
fill_counter=fill_counter+init_bs; // add msb from init b
 80019dc:	88fa      	ldrh	r2, [r7, #6]
 80019de:	887b      	ldrh	r3, [r7, #2]
 80019e0:	4413      	add	r3, r2
 80019e2:	80fb      	strh	r3, [r7, #6]

while ((fill_counter&896)==init_bs)   // skip when over a page something  127+
 80019e4:	e00a      	b.n	80019fc <display_fill+0x40>
{
	init_b=fill_counter; // upcount
 80019e6:	4a11      	ldr	r2, [pc, #68]	; (8001a2c <display_fill+0x70>)
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	8013      	strh	r3, [r2, #0]

	disp_stepper=1;   // first character
 80019ec:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <display_fill+0x74>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
	displayBuffer2();	//read default menu
 80019f2:	f000 fa79 	bl	8001ee8 <displayBuffer2>
	fill_counter++;
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	3301      	adds	r3, #1
 80019fa:	80fb      	strh	r3, [r7, #6]
while ((fill_counter&896)==init_bs)   // skip when over a page something  127+
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	f403 7260 	and.w	r2, r3, #896	; 0x380
 8001a02:	887b      	ldrh	r3, [r7, #2]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d0ee      	beq.n	80019e6 <display_fill+0x2a>
}
init_b=init_b1; // write back original value
 8001a08:	4a08      	ldr	r2, [pc, #32]	; (8001a2c <display_fill+0x70>)
 8001a0a:	88bb      	ldrh	r3, [r7, #4]
 8001a0c:	8013      	strh	r3, [r2, #0]
gfx_send_swap=0;  // disable line skip
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <display_fill+0x78>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <display_fill+0x7c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <display_fill+0x80>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]


	}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20002ee3 	.word	0x20002ee3
 8001a2c:	200023a6 	.word	0x200023a6
 8001a30:	200001b6 	.word	0x200001b6
 8001a34:	20002ed6 	.word	0x20002ed6
 8001a38:	20002ed2 	.word	0x20002ed2
 8001a3c:	20002ee2 	.word	0x20002ee2

08001a40 <display_process>:



void display_process(void){							// keep data processing here
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
uint16_t feedback_loc=(init_b&896)+107;
 8001a46:	4b80      	ldr	r3, [pc, #512]	; (8001c48 <display_process+0x208>)
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	336b      	adds	r3, #107	; 0x6b
 8001a52:	81bb      	strh	r3, [r7, #12]

	if ((enc2_tempC==enc2_dir) && (!enc2_add))  {
 8001a54:	4b7d      	ldr	r3, [pc, #500]	; (8001c4c <display_process+0x20c>)
 8001a56:	f993 3000 	ldrsb.w	r3, [r3]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b7c      	ldr	r3, [pc, #496]	; (8001c50 <display_process+0x210>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d112      	bne.n	8001a8a <display_process+0x4a>
 8001a64:	4b7b      	ldr	r3, [pc, #492]	; (8001c54 <display_process+0x214>)
 8001a66:	f993 3000 	ldrsb.w	r3, [r3]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10d      	bne.n	8001a8a <display_process+0x4a>
		if ((disp_stepper==5)&&(!target_display))  {enc2_add=2; 	disp_stepper=17;}   	 // wait till enc2_dir  hasn't changed ,jump and then change feedback
 8001a6e:	4b7a      	ldr	r3, [pc, #488]	; (8001c58 <display_process+0x218>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	d109      	bne.n	8001a8a <display_process+0x4a>
 8001a76:	4b79      	ldr	r3, [pc, #484]	; (8001c5c <display_process+0x21c>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d105      	bne.n	8001a8a <display_process+0x4a>
 8001a7e:	4b75      	ldr	r3, [pc, #468]	; (8001c54 <display_process+0x214>)
 8001a80:	2202      	movs	r2, #2
 8001a82:	701a      	strb	r2, [r3, #0]
 8001a84:	4b74      	ldr	r3, [pc, #464]	; (8001c58 <display_process+0x218>)
 8001a86:	2211      	movs	r2, #17
 8001a88:	701a      	strb	r2, [r3, #0]
			}

	if (disp_stepper>1)	init_b=feedback_loc+16+(disp_stepper);  // write lcd3
 8001a8a:	4b73      	ldr	r3, [pc, #460]	; (8001c58 <display_process+0x218>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d909      	bls.n	8001aa6 <display_process+0x66>
 8001a92:	4b71      	ldr	r3, [pc, #452]	; (8001c58 <display_process+0x218>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	89bb      	ldrh	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3310      	adds	r3, #16
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	4b69      	ldr	r3, [pc, #420]	; (8001c48 <display_process+0x208>)
 8001aa4:	801a      	strh	r2, [r3, #0]
	if (disp_stepper>4)	init_b=feedback_loc+(disp_stepper);  // write feedback line
 8001aa6:	4b6c      	ldr	r3, [pc, #432]	; (8001c58 <display_process+0x218>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d907      	bls.n	8001abe <display_process+0x7e>
 8001aae:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <display_process+0x218>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	89bb      	ldrh	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	4b63      	ldr	r3, [pc, #396]	; (8001c48 <display_process+0x208>)
 8001abc:	801a      	strh	r2, [r3, #0]

	if ((lcd_temp!=enc_dir)  && (enc2_tempC==enc2_dir) )   {*menu_vars_var=enc_dir;   // enc2_dir =same enc_dir=changed
 8001abe:	4b68      	ldr	r3, [pc, #416]	; (8001c60 <display_process+0x220>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b67      	ldr	r3, [pc, #412]	; (8001c64 <display_process+0x224>)
 8001ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d014      	beq.n	8001af8 <display_process+0xb8>
 8001ace:	4b5f      	ldr	r3, [pc, #380]	; (8001c4c <display_process+0x20c>)
 8001ad0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b5e      	ldr	r3, [pc, #376]	; (8001c50 <display_process+0x210>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d10c      	bne.n	8001af8 <display_process+0xb8>
 8001ade:	4b61      	ldr	r3, [pc, #388]	; (8001c64 <display_process+0x224>)
 8001ae0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ae4:	4b60      	ldr	r3, [pc, #384]	; (8001c68 <display_process+0x228>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	701a      	strb	r2, [r3, #0]
	lcd_temp=enc_dir;  }
 8001aec:	4b5d      	ldr	r3, [pc, #372]	; (8001c64 <display_process+0x224>)
 8001aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4b5a      	ldr	r3, [pc, #360]	; (8001c60 <display_process+0x220>)
 8001af6:	701a      	strb	r2, [r3, #0]



	if ((disp_stepper==0) && (enc2_tempC!=enc2_dir) && (!enc2_add))  {      // wait till loop end , ok
 8001af8:	4b57      	ldr	r3, [pc, #348]	; (8001c58 <display_process+0x218>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f040 8082 	bne.w	8001c06 <display_process+0x1c6>
 8001b02:	4b52      	ldr	r3, [pc, #328]	; (8001c4c <display_process+0x20c>)
 8001b04:	f993 3000 	ldrsb.w	r3, [r3]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b51      	ldr	r3, [pc, #324]	; (8001c50 <display_process+0x210>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d079      	beq.n	8001c06 <display_process+0x1c6>
 8001b12:	4b50      	ldr	r3, [pc, #320]	; (8001c54 <display_process+0x214>)
 8001b14:	f993 3000 	ldrsb.w	r3, [r3]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d174      	bne.n	8001c06 <display_process+0x1c6>

	if  (enc2_tempC<enc2_dir)	 enc2_add=1;   									// use this to set up or down count for variables , might change
 8001b1c:	4b4b      	ldr	r3, [pc, #300]	; (8001c4c <display_process+0x20c>)
 8001b1e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b22:	461a      	mov	r2, r3
 8001b24:	4b4a      	ldr	r3, [pc, #296]	; (8001c50 <display_process+0x210>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	da02      	bge.n	8001b32 <display_process+0xf2>
 8001b2c:	4b49      	ldr	r3, [pc, #292]	; (8001c54 <display_process+0x214>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	701a      	strb	r2, [r3, #0]
		if  (enc2_tempC>enc2_dir)	 enc2_add=-1;    // slow but 1 step at a time
 8001b32:	4b46      	ldr	r3, [pc, #280]	; (8001c4c <display_process+0x20c>)
 8001b34:	f993 3000 	ldrsb.w	r3, [r3]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b45      	ldr	r3, [pc, #276]	; (8001c50 <display_process+0x210>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	dd02      	ble.n	8001b48 <display_process+0x108>
 8001b42:	4b44      	ldr	r3, [pc, #272]	; (8001c54 <display_process+0x214>)
 8001b44:	22ff      	movs	r2, #255	; 0xff
 8001b46:	701a      	strb	r2, [r3, #0]
		if  (enc2_tempC<enc2_dir)	 enc2_add=+(enc2_dir-enc2_tempC);   	//  fast but skips
 8001b48:	4b40      	ldr	r3, [pc, #256]	; (8001c4c <display_process+0x20c>)
 8001b4a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <display_process+0x210>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	da0b      	bge.n	8001b70 <display_process+0x130>
 8001b58:	4b3d      	ldr	r3, [pc, #244]	; (8001c50 <display_process+0x210>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <display_process+0x20c>)
 8001b60:	f993 3000 	ldrsb.w	r3, [r3]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	b25a      	sxtb	r2, r3
 8001b6c:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <display_process+0x214>)
 8001b6e:	701a      	strb	r2, [r3, #0]

		if  (enc2_tempC>enc2_dir)	 enc2_add=-(enc2_tempC-enc2_dir);
 8001b70:	4b36      	ldr	r3, [pc, #216]	; (8001c4c <display_process+0x20c>)
 8001b72:	f993 3000 	ldrsb.w	r3, [r3]
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b35      	ldr	r3, [pc, #212]	; (8001c50 <display_process+0x210>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	dd0b      	ble.n	8001b98 <display_process+0x158>
 8001b80:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <display_process+0x210>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <display_process+0x20c>)
 8001b88:	f993 3000 	ldrsb.w	r3, [r3]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	b25a      	sxtb	r2, r3
 8001b94:	4b2f      	ldr	r3, [pc, #188]	; (8001c54 <display_process+0x214>)
 8001b96:	701a      	strb	r2, [r3, #0]


		enc2_tempC=enc2_dir;	   // loop back until change
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <display_process+0x210>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	b25a      	sxtb	r2, r3
 8001b9e:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <display_process+0x20c>)
 8001ba0:	701a      	strb	r2, [r3, #0]
		if ((enc_out1>=0)  &&  (enc_out1<=menu_title_count))    {enc_out1=enc_out1+enc2_add;}   // count up or down within limits
 8001ba2:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <display_process+0x22c>)
 8001ba4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db14      	blt.n	8001bd6 <display_process+0x196>
 8001bac:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <display_process+0x22c>)
 8001bae:	f993 3000 	ldrsb.w	r3, [r3]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <display_process+0x230>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dc0c      	bgt.n	8001bd6 <display_process+0x196>
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <display_process+0x22c>)
 8001bbe:	f993 3000 	ldrsb.w	r3, [r3]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <display_process+0x214>)
 8001bc6:	f993 3000 	ldrsb.w	r3, [r3]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	b25a      	sxtb	r2, r3
 8001bd2:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <display_process+0x22c>)
 8001bd4:	701a      	strb	r2, [r3, #0]
		if (enc_out1<0)  {  enc_out1=menu_title_count; }
 8001bd6:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <display_process+0x22c>)
 8001bd8:	f993 3000 	ldrsb.w	r3, [r3]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	da04      	bge.n	8001bea <display_process+0x1aa>
 8001be0:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <display_process+0x230>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	b25a      	sxtb	r2, r3
 8001be6:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <display_process+0x22c>)
 8001be8:	701a      	strb	r2, [r3, #0]
		if (enc_out1>menu_title_count) enc_out1=0;
 8001bea:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <display_process+0x22c>)
 8001bec:	f993 3000 	ldrsb.w	r3, [r3]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <display_process+0x230>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	dd02      	ble.n	8001c00 <display_process+0x1c0>
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <display_process+0x22c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
		enc2_add=2;
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <display_process+0x214>)
 8001c02:	2202      	movs	r2, #2
 8001c04:	701a      	strb	r2, [r3, #0]

	}


	if ((disp_stepper==0) && (enc2_add==2))			// skip if no input for enc2 , also maybe wait till enc2 stopped moving
 8001c06:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <display_process+0x218>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d170      	bne.n	8001cf0 <display_process+0x2b0>
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <display_process+0x214>)
 8001c10:	f993 3000 	ldrsb.w	r3, [r3]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d16b      	bne.n	8001cf0 <display_process+0x2b0>
	{



	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;   // look up up menu_titles_final
 8001c18:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <display_process+0x22c>)
 8001c1a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <display_process+0x234>)
 8001c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c26:	0c1b      	lsrs	r3, r3, #16
 8001c28:	72fb      	strb	r3, [r7, #11]
	if (crap_hold9==5) target_display=1;   // check if LFO.target is on cursor , may use for other things
 8001c2a:	7afb      	ldrb	r3, [r7, #11]
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d103      	bne.n	8001c38 <display_process+0x1f8>
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <display_process+0x21c>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	e022      	b.n	8001c7e <display_process+0x23e>
	else if (crap_hold9==36) target_display=2;   else target_display=0;
 8001c38:	7afb      	ldrb	r3, [r7, #11]
 8001c3a:	2b24      	cmp	r3, #36	; 0x24
 8001c3c:	d11c      	bne.n	8001c78 <display_process+0x238>
 8001c3e:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <display_process+0x21c>)
 8001c40:	2202      	movs	r2, #2
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	e01b      	b.n	8001c7e <display_process+0x23e>
 8001c46:	bf00      	nop
 8001c48:	200023a6 	.word	0x200023a6
 8001c4c:	200001b4 	.word	0x200001b4
 8001c50:	20002396 	.word	0x20002396
 8001c54:	200001b5 	.word	0x200001b5
 8001c58:	200001b6 	.word	0x200001b6
 8001c5c:	20004513 	.word	0x20004513
 8001c60:	20004512 	.word	0x20004512
 8001c64:	20002398 	.word	0x20002398
 8001c68:	200044fc 	.word	0x200044fc
 8001c6c:	20000240 	.word	0x20000240
 8001c70:	200041f9 	.word	0x200041f9
 8001c74:	200041fc 	.word	0x200041fc
 8001c78:	4b87      	ldr	r3, [pc, #540]	; (8001e98 <display_process+0x458>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]

	// fetch values for last line or cursor

	 memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 8001c7e:	89bb      	ldrh	r3, [r7, #12]
 8001c80:	3308      	adds	r3, #8
 8001c82:	4a86      	ldr	r2, [pc, #536]	; (8001e9c <display_process+0x45c>)
 8001c84:	1898      	adds	r0, r3, r2
 8001c86:	7afb      	ldrb	r3, [r7, #11]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4a85      	ldr	r2, [pc, #532]	; (8001ea0 <display_process+0x460>)
 8001c8c:	4413      	add	r3, r2
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2208      	movs	r2, #8
 8001c92:	4619      	mov	r1, r3
 8001c94:	f009 f81e 	bl	800acd4 <memcpy>
	 memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8001c98:	7afb      	ldrb	r3, [r7, #11]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4a80      	ldr	r2, [pc, #512]	; (8001ea0 <display_process+0x460>)
 8001c9e:	4413      	add	r3, r2
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4b80      	ldr	r3, [pc, #512]	; (8001ea4 <display_process+0x464>)
 8001ca4:	6810      	ldr	r0, [r2, #0]
 8001ca6:	6851      	ldr	r1, [r2, #4]
 8001ca8:	c303      	stmia	r3!, {r0, r1}

	 char temp_char[]="  ";
 8001caa:	4a7f      	ldr	r2, [pc, #508]	; (8001ea8 <display_process+0x468>)
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	8019      	strh	r1, [r3, #0]
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	0c12      	lsrs	r2, r2, #16
 8001cb8:	701a      	strb	r2, [r3, #0]
	 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8001cba:	4b7c      	ldr	r3, [pc, #496]	; (8001eac <display_process+0x46c>)
 8001cbc:	f993 3000 	ldrsb.w	r3, [r3]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b7a      	ldr	r3, [pc, #488]	; (8001eb0 <display_process+0x470>)
 8001cc6:	4413      	add	r3, r2
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	80bb      	strh	r3, [r7, #4]
	 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f008 ffd1 	bl	800ac78 <atoi>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4b76      	ldr	r3, [pc, #472]	; (8001eb4 <display_process+0x474>)
 8001cdc:	701a      	strb	r2, [r3, #0]


	 menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8001cde:	4b75      	ldr	r3, [pc, #468]	; (8001eb4 <display_process+0x474>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	486f      	ldr	r0, [pc, #444]	; (8001ea4 <display_process+0x464>)
 8001ce6:	f7fe ff37 	bl	8000b58 <menu_vars>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4a72      	ldr	r2, [pc, #456]	; (8001eb8 <display_process+0x478>)
 8001cee:	6013      	str	r3, [r2, #0]

	    // grab value on ptr address , also write first char , ok

	}

	if ((disp_stepper==0) || (disp_stepper==1))   // repeat first character
 8001cf0:	4b72      	ldr	r3, [pc, #456]	; (8001ebc <display_process+0x47c>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <display_process+0x2c0>
 8001cf8:	4b70      	ldr	r3, [pc, #448]	; (8001ebc <display_process+0x47c>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d14d      	bne.n	8001d9c <display_process+0x35c>
	{


		uint16_t init_holder=init_b;
 8001d00:	4b6f      	ldr	r3, [pc, #444]	; (8001ec0 <display_process+0x480>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	813b      	strh	r3, [r7, #8]

		init_b= menu_title_lut[enc_out1];    // this only grabs menu_title_count (&255)      , problem maybe here
 8001d06:	4b69      	ldr	r3, [pc, #420]	; (8001eac <display_process+0x46c>)
 8001d08:	f993 3000 	ldrsb.w	r3, [r3]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b6d      	ldr	r3, [pc, #436]	; (8001ec4 <display_process+0x484>)
 8001d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	4b6a      	ldr	r3, [pc, #424]	; (8001ec0 <display_process+0x480>)
 8001d18:	801a      	strh	r2, [r3, #0]
		//	if (init_b>(feedback_loc+3) ) init_b=init_b+16;// skip feedback line
		if ((init_b&896)!=(init_holder&896)) {display_fill(); gfx_clear_flag=1; } // detect x over , not perfect
 8001d1a:	4b69      	ldr	r3, [pc, #420]	; (8001ec0 <display_process+0x480>)
 8001d1c:	881a      	ldrh	r2, [r3, #0]
 8001d1e:	893b      	ldrh	r3, [r7, #8]
 8001d20:	4053      	eors	r3, r2
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <display_process+0x2f6>
 8001d2c:	f7ff fe46 	bl	80019bc <display_fill>
 8001d30:	4b65      	ldr	r3, [pc, #404]	; (8001ec8 <display_process+0x488>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]

		lcd_out3=*menu_vars_var;
 8001d36:	4b60      	ldr	r3, [pc, #384]	; (8001eb8 <display_process+0x478>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	4b63      	ldr	r3, [pc, #396]	; (8001ecc <display_process+0x48c>)
 8001d40:	801a      	strh	r2, [r3, #0]
		div_limit=lcd_out3;
 8001d42:	4b62      	ldr	r3, [pc, #392]	; (8001ecc <display_process+0x48c>)
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	4b61      	ldr	r3, [pc, #388]	; (8001ed0 <display_process+0x490>)
 8001d4a:	701a      	strb	r2, [r3, #0]
		if (lcd_out3>10)							div_limit= lcd_out3>>2;
 8001d4c:	4b5f      	ldr	r3, [pc, #380]	; (8001ecc <display_process+0x48c>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	2b0a      	cmp	r3, #10
 8001d52:	d906      	bls.n	8001d62 <display_process+0x322>
 8001d54:	4b5d      	ldr	r3, [pc, #372]	; (8001ecc <display_process+0x48c>)
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	089b      	lsrs	r3, r3, #2
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4b5c      	ldr	r3, [pc, #368]	; (8001ed0 <display_process+0x490>)
 8001d60:	701a      	strb	r2, [r3, #0]
		if (lcd_out3>40)							div_limit= lcd_out3>>5;
 8001d62:	4b5a      	ldr	r3, [pc, #360]	; (8001ecc <display_process+0x48c>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	2b28      	cmp	r3, #40	; 0x28
 8001d68:	d906      	bls.n	8001d78 <display_process+0x338>
 8001d6a:	4b58      	ldr	r3, [pc, #352]	; (8001ecc <display_process+0x48c>)
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	4b56      	ldr	r3, [pc, #344]	; (8001ed0 <display_process+0x490>)
 8001d76:	701a      	strb	r2, [r3, #0]

		default_menu3[init_b]=div_limit+48; lcd_temp=lcd_out3; enc_dir=lcd_temp;       } // force enc_dir
 8001d78:	4b55      	ldr	r3, [pc, #340]	; (8001ed0 <display_process+0x490>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4a50      	ldr	r2, [pc, #320]	; (8001ec0 <display_process+0x480>)
 8001d7e:	8812      	ldrh	r2, [r2, #0]
 8001d80:	3330      	adds	r3, #48	; 0x30
 8001d82:	b2d9      	uxtb	r1, r3
 8001d84:	4b45      	ldr	r3, [pc, #276]	; (8001e9c <display_process+0x45c>)
 8001d86:	5499      	strb	r1, [r3, r2]
 8001d88:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <display_process+0x48c>)
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4b51      	ldr	r3, [pc, #324]	; (8001ed4 <display_process+0x494>)
 8001d90:	701a      	strb	r2, [r3, #0]
 8001d92:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <display_process+0x494>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	b21a      	sxth	r2, r3
 8001d98:	4b4f      	ldr	r3, [pc, #316]	; (8001ed8 <display_process+0x498>)
 8001d9a:	801a      	strh	r2, [r3, #0]

	if (disp_stepper>4) {default_menu3[feedback_loc+5]=menu_index_list[enc_out1<<1];   	default_menu3[feedback_loc+6]=menu_index_list[(enc_out1<<1)+1];}   // index display
 8001d9c:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <display_process+0x47c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d914      	bls.n	8001dce <display_process+0x38e>
 8001da4:	4b41      	ldr	r3, [pc, #260]	; (8001eac <display_process+0x46c>)
 8001da6:	f993 3000 	ldrsb.w	r3, [r3]
 8001daa:	005a      	lsls	r2, r3, #1
 8001dac:	89bb      	ldrh	r3, [r7, #12]
 8001dae:	3305      	adds	r3, #5
 8001db0:	493f      	ldr	r1, [pc, #252]	; (8001eb0 <display_process+0x470>)
 8001db2:	5c89      	ldrb	r1, [r1, r2]
 8001db4:	4a39      	ldr	r2, [pc, #228]	; (8001e9c <display_process+0x45c>)
 8001db6:	54d1      	strb	r1, [r2, r3]
 8001db8:	4b3c      	ldr	r3, [pc, #240]	; (8001eac <display_process+0x46c>)
 8001dba:	f993 3000 	ldrsb.w	r3, [r3]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	89bb      	ldrh	r3, [r7, #12]
 8001dc4:	3306      	adds	r3, #6
 8001dc6:	493a      	ldr	r1, [pc, #232]	; (8001eb0 <display_process+0x470>)
 8001dc8:	5c89      	ldrb	r1, [r1, r2]
 8001dca:	4a34      	ldr	r2, [pc, #208]	; (8001e9c <display_process+0x45c>)
 8001dcc:	54d1      	strb	r1, [r2, r3]

	if ((target_display) &&   (disp_stepper>4))      // write LFO.target display , might use it for other things too
 8001dce:	4b32      	ldr	r3, [pc, #200]	; (8001e98 <display_process+0x458>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d02e      	beq.n	8001e34 <display_process+0x3f4>
 8001dd6:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <display_process+0x47c>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d92a      	bls.n	8001e34 <display_process+0x3f4>
	{
		uint8_t target_tmp1=*menu_vars_var ;
 8001dde:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <display_process+0x478>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	73fb      	strb	r3, [r7, #15]
		if (target_tmp1>=menu_lookup_count) target_tmp1=0;    // check in case
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	2b27      	cmp	r3, #39	; 0x27
 8001dea:	d901      	bls.n	8001df0 <display_process+0x3b0>
 8001dec:	2300      	movs	r3, #0
 8001dee:	73fb      	strb	r3, [r7, #15]
		if (target_display==1) memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+target_tmp1),8);  // copy info for LFO
 8001df0:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <display_process+0x458>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d10c      	bne.n	8001e12 <display_process+0x3d2>
 8001df8:	89bb      	ldrh	r3, [r7, #12]
 8001dfa:	3308      	adds	r3, #8
 8001dfc:	4a27      	ldr	r2, [pc, #156]	; (8001e9c <display_process+0x45c>)
 8001dfe:	1898      	adds	r0, r3, r2
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4a26      	ldr	r2, [pc, #152]	; (8001ea0 <display_process+0x460>)
 8001e06:	4413      	add	r3, r2
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f008 ff61 	bl	800acd4 <memcpy>
		if (target_display==2) memcpy(default_menu3+feedback_loc+8, *(patch_inputs+target_tmp1),8);  // Limited atm
 8001e12:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <display_process+0x458>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d10c      	bne.n	8001e34 <display_process+0x3f4>
 8001e1a:	89bb      	ldrh	r3, [r7, #12]
 8001e1c:	3308      	adds	r3, #8
 8001e1e:	4a1f      	ldr	r2, [pc, #124]	; (8001e9c <display_process+0x45c>)
 8001e20:	1898      	adds	r0, r3, r2
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4a2d      	ldr	r2, [pc, #180]	; (8001edc <display_process+0x49c>)
 8001e28:	4413      	add	r3, r2
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f008 ff50 	bl	800acd4 <memcpy>
		 		 	}

	if (disp_stepper==1)  gfx_send_cursor=(init_b>>4)&7 ;   //send cursor line
 8001e34:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <display_process+0x47c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d109      	bne.n	8001e50 <display_process+0x410>
 8001e3c:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <display_process+0x480>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <display_process+0x4a0>)
 8001e4e:	701a      	strb	r2, [r3, #0]
	if (disp_stepper==2)  {
 8001e50:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <display_process+0x47c>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d11a      	bne.n	8001e8e <display_process+0x44e>

		default_menu3[feedback_loc+18]=potSource[380]+48;
 8001e58:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <display_process+0x4a4>)
 8001e5a:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
 8001e5e:	89bb      	ldrh	r3, [r7, #12]
 8001e60:	3312      	adds	r3, #18
 8001e62:	3230      	adds	r2, #48	; 0x30
 8001e64:	b2d1      	uxtb	r1, r2
 8001e66:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <display_process+0x45c>)
 8001e68:	54d1      	strb	r1, [r2, r3]
		default_menu3[feedback_loc+19]=potSource[381]+48; default_menu3[feedback_loc+20]=potSource[382]+48; }  // write this straight after start ,ok
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <display_process+0x4a4>)
 8001e6c:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
 8001e70:	89bb      	ldrh	r3, [r7, #12]
 8001e72:	3313      	adds	r3, #19
 8001e74:	3230      	adds	r2, #48	; 0x30
 8001e76:	b2d1      	uxtb	r1, r2
 8001e78:	4a08      	ldr	r2, [pc, #32]	; (8001e9c <display_process+0x45c>)
 8001e7a:	54d1      	strb	r1, [r2, r3]
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <display_process+0x4a4>)
 8001e7e:	f893 217e 	ldrb.w	r2, [r3, #382]	; 0x17e
 8001e82:	89bb      	ldrh	r3, [r7, #12]
 8001e84:	3314      	adds	r3, #20
 8001e86:	3230      	adds	r2, #48	; 0x30
 8001e88:	b2d1      	uxtb	r1, r2
 8001e8a:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <display_process+0x45c>)
 8001e8c:	54d1      	strb	r1, [r2, r3]


}   // end o void
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20004513 	.word	0x20004513
 8001e9c:	20006540 	.word	0x20006540
 8001ea0:	2000024c 	.word	0x2000024c
 8001ea4:	20004500 	.word	0x20004500
 8001ea8:	0800b1d4 	.word	0x0800b1d4
 8001eac:	20000240 	.word	0x20000240
 8001eb0:	200043fc 	.word	0x200043fc
 8001eb4:	20004508 	.word	0x20004508
 8001eb8:	200044fc 	.word	0x200044fc
 8001ebc:	200001b6 	.word	0x200001b6
 8001ec0:	200023a6 	.word	0x200023a6
 8001ec4:	200041fc 	.word	0x200041fc
 8001ec8:	20004516 	.word	0x20004516
 8001ecc:	20002ee0 	.word	0x20002ee0
 8001ed0:	2000653e 	.word	0x2000653e
 8001ed4:	20004512 	.word	0x20004512
 8001ed8:	20002398 	.word	0x20002398
 8001edc:	200002ec 	.word	0x200002ec
 8001ee0:	20002ed5 	.word	0x20002ed5
 8001ee4:	200005a0 	.word	0x200005a0

08001ee8 <displayBuffer2>:


void displayBuffer2 (void){       // use only writing characters  ,nothing more  , init_b for selecting location
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
														//when scrolling maybe use this only until  settled
														// start 2*8 bit then squeeze in 20*6 bit characters

	store_c= (default_menu3[init_b]-47)&127 ;    // grab char from mem
 8001eee:	4b3d      	ldr	r3, [pc, #244]	; (8001fe4 <displayBuffer2+0xfc>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4b3c      	ldr	r3, [pc, #240]	; (8001fe8 <displayBuffer2+0x100>)
 8001ef6:	5c9b      	ldrb	r3, [r3, r2]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	3b2f      	subs	r3, #47	; 0x2f
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	4b39      	ldr	r3, [pc, #228]	; (8001fec <displayBuffer2+0x104>)
 8001f06:	801a      	strh	r2, [r3, #0]
	uint8_t init_bx=init_b&127;
 8001f08:	4b36      	ldr	r3, [pc, #216]	; (8001fe4 <displayBuffer2+0xfc>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f12:	71bb      	strb	r3, [r7, #6]

	uint8_t d_count;
uint8_t init_x=(init_bx & 15)+2 ;    // +2 important  2-17 hor char pos
 8001f14:	79bb      	ldrb	r3, [r7, #6]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	717b      	strb	r3, [r7, #5]
uint8_t init_x2=(init_bx>>4)<<3 ;  // 0,8,16-64  vertical pos  gfx
 8001f20:	79bb      	ldrb	r3, [r7, #6]
 8001f22:	091b      	lsrs	r3, r3, #4
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	713b      	strb	r3, [r7, #4]
uint16_t init_y=((init_x2)*18)+init_x;   //   works ok  8  bit  0-1152
 8001f2a:	793b      	ldrb	r3, [r7, #4]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	00d2      	lsls	r2, r2, #3
 8001f32:	4413      	add	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	797b      	ldrb	r3, [r7, #5]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	807b      	strh	r3, [r7, #2]
uint16_t store_x;

store_x=(store_c*8);  // i line characters , might shrink it and use extr for other  visuals , old code but keep for now
 8001f40:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <displayBuffer2+0x104>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	803b      	strh	r3, [r7, #0]


		if ( (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 8001f48:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <displayBuffer2+0x108>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d11a      	bne.n	8001f86 <displayBuffer2+0x9e>
			for (d_count=0;d_count<8;d_count++){
 8001f50:	2300      	movs	r3, #0
 8001f52:	71fb      	strb	r3, [r7, #7]
 8001f54:	e013      	b.n	8001f7e <displayBuffer2+0x96>

				gfx_ram[init_y+(d_count*18) ]= gfx_char[d_count+store_x]^127; //write character to ram ,should be elsewhere , blank is correct
 8001f56:	79fa      	ldrb	r2, [r7, #7]
 8001f58:	883b      	ldrh	r3, [r7, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4a25      	ldr	r2, [pc, #148]	; (8001ff4 <displayBuffer2+0x10c>)
 8001f5e:	5cd1      	ldrb	r1, [r2, r3]
 8001f60:	8878      	ldrh	r0, [r7, #2]
 8001f62:	79fa      	ldrb	r2, [r7, #7]
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4403      	add	r3, r0
 8001f6e:	f081 027f 	eor.w	r2, r1, #127	; 0x7f
 8001f72:	b2d1      	uxtb	r1, r2
 8001f74:	4a20      	ldr	r2, [pc, #128]	; (8001ff8 <displayBuffer2+0x110>)
 8001f76:	54d1      	strb	r1, [r2, r3]
			for (d_count=0;d_count<8;d_count++){
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	71fb      	strb	r3, [r7, #7]
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	2b07      	cmp	r3, #7
 8001f82:	d9e8      	bls.n	8001f56 <displayBuffer2+0x6e>
 8001f84:	e016      	b.n	8001fb4 <displayBuffer2+0xcc>
			}

		else for (d_count=0;d_count<8;d_count++){
 8001f86:	2300      	movs	r3, #0
 8001f88:	71fb      	strb	r3, [r7, #7]
 8001f8a:	e010      	b.n	8001fae <displayBuffer2+0xc6>
			gfx_ram[init_y+(d_count*18) ]= gfx_char[d_count+store_x]; //write character to ram ,should be elsewhere , seems affected by later stufff
 8001f8c:	79fa      	ldrb	r2, [r7, #7]
 8001f8e:	883b      	ldrh	r3, [r7, #0]
 8001f90:	18d1      	adds	r1, r2, r3
 8001f92:	8878      	ldrh	r0, [r7, #2]
 8001f94:	79fa      	ldrb	r2, [r7, #7]
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4403      	add	r3, r0
 8001fa0:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <displayBuffer2+0x10c>)
 8001fa2:	5c51      	ldrb	r1, [r2, r1]
 8001fa4:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <displayBuffer2+0x110>)
 8001fa6:	54d1      	strb	r1, [r2, r3]
		else for (d_count=0;d_count<8;d_count++){
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	3301      	adds	r3, #1
 8001fac:	71fb      	strb	r3, [r7, #7]
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	2b07      	cmp	r3, #7
 8001fb2:	d9eb      	bls.n	8001f8c <displayBuffer2+0xa4>
		}

if (disp_stepper==17) {disp_stepper=0;enc2_add=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <displayBuffer2+0x108>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b11      	cmp	r3, #17
 8001fba:	d106      	bne.n	8001fca <displayBuffer2+0xe2>
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <displayBuffer2+0x108>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <displayBuffer2+0x114>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]


}    // displayBuffer2
 8001fc8:	e005      	b.n	8001fd6 <displayBuffer2+0xee>
if (disp_stepper==17) {disp_stepper=0;enc2_add=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <displayBuffer2+0x108>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <displayBuffer2+0x108>)
 8001fd4:	701a      	strb	r2, [r3, #0]
}    // displayBuffer2
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	200023a6 	.word	0x200023a6
 8001fe8:	20006540 	.word	0x20006540
 8001fec:	20000732 	.word	0x20000732
 8001ff0:	200001b6 	.word	0x200001b6
 8001ff4:	0800bcc0 	.word	0x0800bcc0
 8001ff8:	20002a50 	.word	0x20002a50
 8001ffc:	200001b5 	.word	0x200001b5

08002000 <note_reset>:


void note_reset (void){          // reset deafult values before modulation , in case it gets left  with no modulator
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0

	note[0].velocity=255;note[1].velocity=255;note[2].velocity=255;note[3].velocity=255;note[4].velocity=255;note[5].velocity=255;note[6].velocity=255
 8002004:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <note_reset+0x78>)
 8002006:	22ff      	movs	r2, #255	; 0xff
 8002008:	71da      	strb	r2, [r3, #7]
 800200a:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <note_reset+0x78>)
 800200c:	22ff      	movs	r2, #255	; 0xff
 800200e:	755a      	strb	r2, [r3, #21]
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <note_reset+0x78>)
 8002012:	22ff      	movs	r2, #255	; 0xff
 8002014:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8002018:	4b17      	ldr	r3, [pc, #92]	; (8002078 <note_reset+0x78>)
 800201a:	22ff      	movs	r2, #255	; 0xff
 800201c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8002020:	4b15      	ldr	r3, [pc, #84]	; (8002078 <note_reset+0x78>)
 8002022:	22ff      	movs	r2, #255	; 0xff
 8002024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <note_reset+0x78>)
 800202a:	22ff      	movs	r2, #255	; 0xff
 800202c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <note_reset+0x78>)
 8002032:	22ff      	movs	r2, #255	; 0xff
 8002034:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
																;note[0].detune=127;note[1].detune=127;note[2].detune=127;note[3].detune=127;note[4].detune=127;
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <note_reset+0x78>)
 800203a:	227f      	movs	r2, #127	; 0x7f
 800203c:	721a      	strb	r2, [r3, #8]
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <note_reset+0x78>)
 8002040:	227f      	movs	r2, #127	; 0x7f
 8002042:	759a      	strb	r2, [r3, #22]
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <note_reset+0x78>)
 8002046:	227f      	movs	r2, #127	; 0x7f
 8002048:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800204c:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <note_reset+0x78>)
 800204e:	227f      	movs	r2, #127	; 0x7f
 8002050:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <note_reset+0x78>)
 8002056:	227f      	movs	r2, #127	; 0x7f
 8002058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	note[5].detune=127;note[6].detune=127;
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <note_reset+0x78>)
 800205e:	227f      	movs	r2, #127	; 0x7f
 8002060:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <note_reset+0x78>)
 8002066:	227f      	movs	r2, #127	; 0x7f
 8002068:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c


}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	200001bc 	.word	0x200001bc
 800207c:	00000000 	.word	0x00000000

08002080 <sampling>:


return  output;

}
void sampling(void){						// 330 atm or 8.5ms
 8002080:	b5b0      	push	{r4, r5, r7, lr}
 8002082:	b0a8      	sub	sp, #160	; 0xa0
 8002084:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;

//time_proc=0;

	time_proc=0;
 8002086:	4b9e      	ldr	r3, [pc, #632]	; (8002300 <sampling+0x280>)
 8002088:	2200      	movs	r2, #0
 800208a:	801a      	strh	r2, [r3, #0]

uint8_t mask_i;


bank_write=0;
 800208c:	4b9d      	ldr	r3, [pc, #628]	; (8002304 <sampling+0x284>)
 800208e:	2200      	movs	r2, #0
 8002090:	801a      	strh	r2, [r3, #0]
memcpy(notes_joined,seq.notes2,16);
 8002092:	2210      	movs	r2, #16
 8002094:	499c      	ldr	r1, [pc, #624]	; (8002308 <sampling+0x288>)
 8002096:	489d      	ldr	r0, [pc, #628]	; (800230c <sampling+0x28c>)
 8002098:	f008 fe1c 	bl	800acd4 <memcpy>
memcpy(notes_joined+16,seq.notes1,16);
 800209c:	4b9c      	ldr	r3, [pc, #624]	; (8002310 <sampling+0x290>)
 800209e:	2210      	movs	r2, #16
 80020a0:	499c      	ldr	r1, [pc, #624]	; (8002314 <sampling+0x294>)
 80020a2:	4618      	mov	r0, r3
 80020a4:	f008 fe16 	bl	800acd4 <memcpy>
sample_pointB=sample_pointD;
 80020a8:	4b9b      	ldr	r3, [pc, #620]	; (8002318 <sampling+0x298>)
 80020aa:	881a      	ldrh	r2, [r3, #0]
 80020ac:	4b9b      	ldr	r3, [pc, #620]	; (800231c <sampling+0x29c>)
 80020ae:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 80020b6:	4b9a      	ldr	r3, [pc, #616]	; (8002320 <sampling+0x2a0>)
 80020b8:	785b      	ldrb	r3, [r3, #1]
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b99      	ldr	r3, [pc, #612]	; (8002324 <sampling+0x2a4>)
 80020be:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80020c2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s

tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 80020c6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	da00      	bge.n	80020d0 <sampling+0x50>
 80020ce:	331f      	adds	r3, #31
 80020d0:	115b      	asrs	r3, r3, #5
 80020d2:	461a      	mov	r2, r3
 80020d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e4:	4b90      	ldr	r3, [pc, #576]	; (8002328 <sampling+0x2a8>)
 80020e6:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 80020ea:	4b8f      	ldr	r3, [pc, #572]	; (8002328 <sampling+0x2a8>)
 80020ec:	ed93 7a00 	vldr	s14, [r3]
 80020f0:	eddf 6a8e 	vldr	s13, [pc, #568]	; 800232c <sampling+0x2ac>
 80020f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020f8:	4b8b      	ldr	r3, [pc, #556]	; (8002328 <sampling+0x2a8>)
 80020fa:	edc3 7a00 	vstr	s15, [r3]

uint8_t looper_dat[8]={1,3,7,15};
 80020fe:	4a8c      	ldr	r2, [pc, #560]	; (8002330 <sampling+0x2b0>)
 8002100:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002104:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002108:	6018      	str	r0, [r3, #0]
 800210a:	3304      	adds	r3, #4
 800210c:	7019      	strb	r1, [r3, #0]
 800210e:	f107 0369 	add.w	r3, r7, #105	; 0x69
 8002112:	2200      	movs	r2, #0
 8002114:	801a      	strh	r2, [r3, #0]
 8002116:	709a      	strb	r2, [r3, #2]
uint32_t lfo_tempo_hold;

if (tempo_mod_hold!=tempo_mod){					// lfo lut calculate only when changes tempo
 8002118:	4b86      	ldr	r3, [pc, #536]	; (8002334 <sampling+0x2b4>)
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8002120:	429a      	cmp	r2, r3
 8002122:	d036      	beq.n	8002192 <sampling+0x112>

		float lfo_tempo_calc=((62831*4)/(tempo_mod)); // deafualt 1 note
 8002124:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002128:	4a83      	ldr	r2, [pc, #524]	; (8002338 <sampling+0x2b8>)
 800212a:	fb92 f3f3 	sdiv	r3, r2, r3
 800212e:	ee07 3a90 	vmov	s15, r3
 8002132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002136:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88


						for (i=0;i<256;i++){								// 128 is 1 note
 800213a:	4b80      	ldr	r3, [pc, #512]	; (800233c <sampling+0x2bc>)
 800213c:	2200      	movs	r2, #0
 800213e:	801a      	strh	r2, [r3, #0]
 8002140:	e023      	b.n	800218a <sampling+0x10a>
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/64;
 8002142:	4b7e      	ldr	r3, [pc, #504]	; (800233c <sampling+0x2bc>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	3301      	adds	r3, #1
 8002148:	ee07 3a90 	vmov	s15, r3
 800214c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002150:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002154:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002158:	eddf 6a79 	vldr	s13, [pc, #484]	; 8002340 <sampling+0x2c0>
 800215c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002164:	ee17 3a90 	vmov	r3, s15
 8002168:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	lfo_tempo_lut[i]= lfo_tempo_hold;
 800216c:	4b73      	ldr	r3, [pc, #460]	; (800233c <sampling+0x2bc>)
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002176:	b299      	uxth	r1, r3
 8002178:	4b72      	ldr	r3, [pc, #456]	; (8002344 <sampling+0x2c4>)
 800217a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						for (i=0;i<256;i++){								// 128 is 1 note
 800217e:	4b6f      	ldr	r3, [pc, #444]	; (800233c <sampling+0x2bc>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	3301      	adds	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	4b6d      	ldr	r3, [pc, #436]	; (800233c <sampling+0x2bc>)
 8002188:	801a      	strh	r2, [r3, #0]
 800218a:	4b6c      	ldr	r3, [pc, #432]	; (800233c <sampling+0x2bc>)
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	2bff      	cmp	r3, #255	; 0xff
 8002190:	d9d7      	bls.n	8002142 <sampling+0xc2>

}}
tempo_mod_hold=tempo_mod;   // for lfo
 8002192:	4a68      	ldr	r2, [pc, #416]	; (8002334 <sampling+0x2b4>)
 8002194:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002198:	8013      	strh	r3, [r2, #0]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 800219a:	f107 0320 	add.w	r3, r7, #32
 800219e:	2244      	movs	r2, #68	; 0x44
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f008 fda4 	bl	800acf0 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 80021a8:	4b64      	ldr	r3, [pc, #400]	; (800233c <sampling+0x2bc>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	801a      	strh	r2, [r3, #0]
 80021ae:	e00d      	b.n	80021cc <sampling+0x14c>
 80021b0:	4b62      	ldr	r3, [pc, #392]	; (800233c <sampling+0x2bc>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	33a0      	adds	r3, #160	; 0xa0
 80021b8:	443b      	add	r3, r7
 80021ba:	2200      	movs	r2, #0
 80021bc:	f843 2c80 	str.w	r2, [r3, #-128]
 80021c0:	4b5e      	ldr	r3, [pc, #376]	; (800233c <sampling+0x2bc>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	3301      	adds	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	4b5c      	ldr	r3, [pc, #368]	; (800233c <sampling+0x2bc>)
 80021ca:	801a      	strh	r2, [r3, #0]
 80021cc:	4b5b      	ldr	r3, [pc, #364]	; (800233c <sampling+0x2bc>)
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	2b0f      	cmp	r3, #15
 80021d2:	d9ed      	bls.n	80021b0 <sampling+0x130>
	//potSource[150]=(freq_point[0])*100; //0-2

potSource[380]=(lcd_out3/100);  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 80021d4:	4b5c      	ldr	r3, [pc, #368]	; (8002348 <sampling+0x2c8>)
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	4a5c      	ldr	r2, [pc, #368]	; (800234c <sampling+0x2cc>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	4b5a      	ldr	r3, [pc, #360]	; (8002350 <sampling+0x2d0>)
 80021e6:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
potSource[381]=((lcd_out3 %100)/10);		 // 0-160 to 0-10
 80021ea:	4b57      	ldr	r3, [pc, #348]	; (8002348 <sampling+0x2c8>)
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	4a57      	ldr	r2, [pc, #348]	; (800234c <sampling+0x2cc>)
 80021f0:	fba2 1203 	umull	r1, r2, r2, r3
 80021f4:	0952      	lsrs	r2, r2, #5
 80021f6:	2164      	movs	r1, #100	; 0x64
 80021f8:	fb01 f202 	mul.w	r2, r1, r2
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	b29b      	uxth	r3, r3
 8002200:	4a54      	ldr	r2, [pc, #336]	; (8002354 <sampling+0x2d4>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	08db      	lsrs	r3, r3, #3
 8002208:	b29b      	uxth	r3, r3
 800220a:	b2da      	uxtb	r2, r3
 800220c:	4b50      	ldr	r3, [pc, #320]	; (8002350 <sampling+0x2d0>)
 800220e:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
potSource[382]=(lcd_out3%10);
 8002212:	4b4d      	ldr	r3, [pc, #308]	; (8002348 <sampling+0x2c8>)
 8002214:	881a      	ldrh	r2, [r3, #0]
 8002216:	4b4f      	ldr	r3, [pc, #316]	; (8002354 <sampling+0x2d4>)
 8002218:	fba3 1302 	umull	r1, r3, r3, r2
 800221c:	08d9      	lsrs	r1, r3, #3
 800221e:	460b      	mov	r3, r1
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	b29b      	uxth	r3, r3
 800222a:	b2da      	uxtb	r2, r3
 800222c:	4b48      	ldr	r3, [pc, #288]	; (8002350 <sampling+0x2d0>)
 800222e:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e



note_holdA=0;
 8002232:	4b49      	ldr	r3, [pc, #292]	; (8002358 <sampling+0x2d8>)
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]

// some good phasin and delays here
uint8_t cross_fade[2]={0,0};
 8002238:	2300      	movs	r3, #0
 800223a:	83bb      	strh	r3, [r7, #28]
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 800223c:	4b47      	ldr	r3, [pc, #284]	; (800235c <sampling+0x2dc>)
 800223e:	f107 0408 	add.w	r4, r7, #8
 8002242:	461d      	mov	r5, r3
 8002244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002248:	682b      	ldr	r3, [r5, #0]
 800224a:	7023      	strb	r3, [r4, #0]
//adc_values[2]= 15; //force for now
//if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (ADSR[0].attack_trigger==0) {		adsr_att=(161-ADSR[0].attack ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 800224c:	4b44      	ldr	r3, [pc, #272]	; (8002360 <sampling+0x2e0>)
 800224e:	791b      	ldrb	r3, [r3, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d146      	bne.n	80022e2 <sampling+0x262>
 8002254:	4b42      	ldr	r3, [pc, #264]	; (8002360 <sampling+0x2e0>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe fa3f 	bl	80006e0 <__aeabi_i2d>
 8002262:	a323      	add	r3, pc, #140	; (adr r3, 80022f0 <sampling+0x270>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fd ffbe 	bl	80001e8 <__aeabi_dmul>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	f7fe fa9e 	bl	80007b4 <__aeabi_d2f>
 8002278:	4603      	mov	r3, r0
 800227a:	4a3a      	ldr	r2, [pc, #232]	; (8002364 <sampling+0x2e4>)
 800227c:	6013      	str	r3, [r2, #0]
ADSR[0].sustain_data=((161-ADSR[0].decay)*0.01);  // length and level this is ok is running 1/16 ish				ADSR[0].attack_data=ADSR[0].attack_data-ADSR[0].sustain_data;
 800227e:	4b38      	ldr	r3, [pc, #224]	; (8002360 <sampling+0x2e0>)
 8002280:	785b      	ldrb	r3, [r3, #1]
 8002282:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fa2a 	bl	80006e0 <__aeabi_i2d>
 800228c:	a31a      	add	r3, pc, #104	; (adr r3, 80022f8 <sampling+0x278>)
 800228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002292:	f7fd ffa9 	bl	80001e8 <__aeabi_dmul>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4610      	mov	r0, r2
 800229c:	4619      	mov	r1, r3
 800229e:	f7fe fa89 	bl	80007b4 <__aeabi_d2f>
 80022a2:	4603      	mov	r3, r0
 80022a4:	4a2e      	ldr	r2, [pc, #184]	; (8002360 <sampling+0x2e0>)
 80022a6:	6113      	str	r3, [r2, #16]
adsr_att=adsr_att*adsr_att;
 80022a8:	4b2e      	ldr	r3, [pc, #184]	; (8002364 <sampling+0x2e4>)
 80022aa:	ed93 7a00 	vldr	s14, [r3]
 80022ae:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <sampling+0x2e4>)
 80022b0:	edd3 7a00 	vldr	s15, [r3]
 80022b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b8:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <sampling+0x2e4>)
 80022ba:	edc3 7a00 	vstr	s15, [r3]
ADSR[0].sustain_data=ADSR[0].sustain_data*ADSR[0].sustain_data;
 80022be:	4b28      	ldr	r3, [pc, #160]	; (8002360 <sampling+0x2e0>)
 80022c0:	ed93 7a04 	vldr	s14, [r3, #16]
 80022c4:	4b26      	ldr	r3, [pc, #152]	; (8002360 <sampling+0x2e0>)
 80022c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80022ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ce:	4b24      	ldr	r3, [pc, #144]	; (8002360 <sampling+0x2e0>)
 80022d0:	edc3 7a04 	vstr	s15, [r3, #16]

ADSR[0].attack_trigger=1;
 80022d4:	4b22      	ldr	r3, [pc, #136]	; (8002360 <sampling+0x2e0>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	711a      	strb	r2, [r3, #4]
ADSR[0].attack_data=0;
 80022da:	4b21      	ldr	r3, [pc, #132]	; (8002360 <sampling+0x2e0>)
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
}

//float ADSR[0].buffer_temp;    // adsr

for (i=0;i<256;i++) {
 80022e2:	4b16      	ldr	r3, [pc, #88]	; (800233c <sampling+0x2bc>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	801a      	strh	r2, [r3, #0]
 80022e8:	e0fe      	b.n	80024e8 <sampling+0x468>
 80022ea:	bf00      	nop
 80022ec:	f3af 8000 	nop.w
 80022f0:	47ae147b 	.word	0x47ae147b
 80022f4:	3f947ae1 	.word	0x3f947ae1
 80022f8:	47ae147b 	.word	0x47ae147b
 80022fc:	3f847ae1 	.word	0x3f847ae1
 8002300:	200032fc 	.word	0x200032fc
 8002304:	200001b2 	.word	0x200001b2
 8002308:	20004047 	.word	0x20004047
 800230c:	2000651c 	.word	0x2000651c
 8002310:	2000652c 	.word	0x2000652c
 8002314:	20004036 	.word	0x20004036
 8002318:	20001766 	.word	0x20001766
 800231c:	20000756 	.word	0x20000756
 8002320:	20004034 	.word	0x20004034
 8002324:	2000264c 	.word	0x2000264c
 8002328:	20002ed8 	.word	0x20002ed8
 800232c:	42a00000 	.word	0x42a00000
 8002330:	0800b1d8 	.word	0x0800b1d8
 8002334:	20002a4c 	.word	0x20002a4c
 8002338:	0003d5bc 	.word	0x0003d5bc
 800233c:	20000758 	.word	0x20000758
 8002340:	42800000 	.word	0x42800000
 8002344:	2000284c 	.word	0x2000284c
 8002348:	20002ee0 	.word	0x20002ee0
 800234c:	51eb851f 	.word	0x51eb851f
 8002350:	200005a0 	.word	0x200005a0
 8002354:	cccccccd 	.word	0xcccccccd
 8002358:	20002372 	.word	0x20002372
 800235c:	0800b1e0 	.word	0x0800b1e0
 8002360:	200035a8 	.word	0x200035a8
 8002364:	20002edc 	.word	0x20002edc

	if     (ADSR[0].attack_data<1000)    																		{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=ADSR[0].attack_data; } //0-1000
 8002368:	4b8b      	ldr	r3, [pc, #556]	; (8002598 <sampling+0x518>)
 800236a:	edd3 7a02 	vldr	s15, [r3, #8]
 800236e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800259c <sampling+0x51c>
 8002372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237a:	d50e      	bpl.n	800239a <sampling+0x31a>
 800237c:	4b86      	ldr	r3, [pc, #536]	; (8002598 <sampling+0x518>)
 800237e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002382:	4b87      	ldr	r3, [pc, #540]	; (80025a0 <sampling+0x520>)
 8002384:	edd3 7a00 	vldr	s15, [r3]
 8002388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238c:	4b82      	ldr	r3, [pc, #520]	; (8002598 <sampling+0x518>)
 800238e:	edc3 7a02 	vstr	s15, [r3, #8]
 8002392:	4b81      	ldr	r3, [pc, #516]	; (8002598 <sampling+0x518>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	4a80      	ldr	r2, [pc, #512]	; (8002598 <sampling+0x518>)
 8002398:	6193      	str	r3, [r2, #24]
	 if  ((ADSR[0].attack_data<1500)  && (ADSR[0].attack_data>999))  					{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=1500-(ADSR[0].attack_data-500);  }  // 1000-500
 800239a:	4b7f      	ldr	r3, [pc, #508]	; (8002598 <sampling+0x518>)
 800239c:	edd3 7a02 	vldr	s15, [r3, #8]
 80023a0:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80025a4 <sampling+0x524>
 80023a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ac:	d522      	bpl.n	80023f4 <sampling+0x374>
 80023ae:	4b7a      	ldr	r3, [pc, #488]	; (8002598 <sampling+0x518>)
 80023b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80023b4:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 80025a8 <sampling+0x528>
 80023b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c0:	dd18      	ble.n	80023f4 <sampling+0x374>
 80023c2:	4b75      	ldr	r3, [pc, #468]	; (8002598 <sampling+0x518>)
 80023c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80023c8:	4b75      	ldr	r3, [pc, #468]	; (80025a0 <sampling+0x520>)
 80023ca:	edd3 7a00 	vldr	s15, [r3]
 80023ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d2:	4b71      	ldr	r3, [pc, #452]	; (8002598 <sampling+0x518>)
 80023d4:	edc3 7a02 	vstr	s15, [r3, #8]
 80023d8:	4b6f      	ldr	r3, [pc, #444]	; (8002598 <sampling+0x518>)
 80023da:	edd3 7a02 	vldr	s15, [r3, #8]
 80023de:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80025ac <sampling+0x52c>
 80023e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023e6:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80025a4 <sampling+0x524>
 80023ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ee:	4b6a      	ldr	r3, [pc, #424]	; (8002598 <sampling+0x518>)
 80023f0:	edc3 7a06 	vstr	s15, [r3, #24]
	 if ((ADSR[0].attack_data>1499)   && 		(ADSR[0].attack_data<2000)) 			{		ADSR[0].buffer_temp=500; 	ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data;}
 80023f4:	4b68      	ldr	r3, [pc, #416]	; (8002598 <sampling+0x518>)
 80023f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80023fa:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80025b0 <sampling+0x530>
 80023fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002406:	dd17      	ble.n	8002438 <sampling+0x3b8>
 8002408:	4b63      	ldr	r3, [pc, #396]	; (8002598 <sampling+0x518>)
 800240a:	edd3 7a02 	vldr	s15, [r3, #8]
 800240e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80025b4 <sampling+0x534>
 8002412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241a:	d50d      	bpl.n	8002438 <sampling+0x3b8>
 800241c:	4b5e      	ldr	r3, [pc, #376]	; (8002598 <sampling+0x518>)
 800241e:	4a66      	ldr	r2, [pc, #408]	; (80025b8 <sampling+0x538>)
 8002420:	619a      	str	r2, [r3, #24]
 8002422:	4b5d      	ldr	r3, [pc, #372]	; (8002598 <sampling+0x518>)
 8002424:	ed93 7a02 	vldr	s14, [r3, #8]
 8002428:	4b5b      	ldr	r3, [pc, #364]	; (8002598 <sampling+0x518>)
 800242a:	edd3 7a04 	vldr	s15, [r3, #16]
 800242e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002432:	4b59      	ldr	r3, [pc, #356]	; (8002598 <sampling+0x518>)
 8002434:	edc3 7a02 	vstr	s15, [r3, #8]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)					{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
 8002438:	4b57      	ldr	r3, [pc, #348]	; (8002598 <sampling+0x518>)
 800243a:	edd3 7a02 	vldr	s15, [r3, #8]
 800243e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80025bc <sampling+0x53c>
 8002442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244a:	dd1e      	ble.n	800248a <sampling+0x40a>
 800244c:	4b52      	ldr	r3, [pc, #328]	; (8002598 <sampling+0x518>)
 800244e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002452:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80025c0 <sampling+0x540>
 8002456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800245a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245e:	d514      	bpl.n	800248a <sampling+0x40a>
 8002460:	4b4d      	ldr	r3, [pc, #308]	; (8002598 <sampling+0x518>)
 8002462:	ed93 7a02 	vldr	s14, [r3, #8]
 8002466:	4b4c      	ldr	r3, [pc, #304]	; (8002598 <sampling+0x518>)
 8002468:	edd3 7a04 	vldr	s15, [r3, #16]
 800246c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002470:	4b49      	ldr	r3, [pc, #292]	; (8002598 <sampling+0x518>)
 8002472:	edc3 7a02 	vstr	s15, [r3, #8]
 8002476:	4b48      	ldr	r3, [pc, #288]	; (8002598 <sampling+0x518>)
 8002478:	edd3 7a02 	vldr	s15, [r3, #8]
 800247c:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80025c0 <sampling+0x540>
 8002480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002484:	4b44      	ldr	r3, [pc, #272]	; (8002598 <sampling+0x518>)
 8002486:	edc3 7a06 	vstr	s15, [r3, #24]
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END
 800248a:	4b43      	ldr	r3, [pc, #268]	; (8002598 <sampling+0x518>)
 800248c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002490:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80025c4 <sampling+0x544>
 8002494:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249c:	dd06      	ble.n	80024ac <sampling+0x42c>
 800249e:	4b3e      	ldr	r3, [pc, #248]	; (8002598 <sampling+0x518>)
 80024a0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024a4:	619a      	str	r2, [r3, #24]
 80024a6:	4b3c      	ldr	r3, [pc, #240]	; (8002598 <sampling+0x518>)
 80024a8:	4a47      	ldr	r2, [pc, #284]	; (80025c8 <sampling+0x548>)
 80024aa:	609a      	str	r2, [r3, #8]

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
 80024ac:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <sampling+0x518>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe f927 	bl	8000704 <__aeabi_f2d>
 80024b6:	a336      	add	r3, pc, #216	; (adr r3, 8002590 <sampling+0x510>)
 80024b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024bc:	f7fd fe94 	bl	80001e8 <__aeabi_dmul>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4941      	ldr	r1, [pc, #260]	; (80025cc <sampling+0x54c>)
 80024c6:	8809      	ldrh	r1, [r1, #0]
 80024c8:	460c      	mov	r4, r1
 80024ca:	4610      	mov	r0, r2
 80024cc:	4619      	mov	r1, r3
 80024ce:	f7fe f971 	bl	80007b4 <__aeabi_d2f>
 80024d2:	4602      	mov	r2, r0
 80024d4:	493e      	ldr	r1, [pc, #248]	; (80025d0 <sampling+0x550>)
 80024d6:	00a3      	lsls	r3, r4, #2
 80024d8:	440b      	add	r3, r1
 80024da:	601a      	str	r2, [r3, #0]
for (i=0;i<256;i++) {
 80024dc:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <sampling+0x54c>)
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	3301      	adds	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	4b39      	ldr	r3, [pc, #228]	; (80025cc <sampling+0x54c>)
 80024e6:	801a      	strh	r2, [r3, #0]
 80024e8:	4b38      	ldr	r3, [pc, #224]	; (80025cc <sampling+0x54c>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	2bff      	cmp	r3, #255	; 0xff
 80024ee:	f67f af3b 	bls.w	8002368 <sampling+0x2e8>
}

uint8_t seq_dat=(1<<(((adc_values[0]>>3))+1))-1;
 80024f2:	4b38      	ldr	r3, [pc, #224]	; (80025d4 <sampling+0x554>)
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	08db      	lsrs	r3, r3, #3
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3301      	adds	r3, #1
 80024fc:	2201      	movs	r2, #1
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	3b01      	subs	r3, #1
 8002506:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 800250a:	4b30      	ldr	r3, [pc, #192]	; (80025cc <sampling+0x54c>)
 800250c:	2200      	movs	r2, #0
 800250e:	801a      	strh	r2, [r3, #0]
 8002510:	e1b0      	b.n	8002874 <sampling+0x7f4>

	i_total=i+sample_pointB;
 8002512:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <sampling+0x54c>)
 8002514:	881a      	ldrh	r2, [r3, #0]
 8002516:	4b30      	ldr	r3, [pc, #192]	; (80025d8 <sampling+0x558>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	4413      	add	r3, r2
 800251c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	sampling_position=i>>6;   //   0-8 steps
 8002520:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <sampling+0x54c>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	099b      	lsrs	r3, r3, #6
 8002526:	b29b      	uxth	r3, r3
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4b2c      	ldr	r3, [pc, #176]	; (80025dc <sampling+0x55c>)
 800252c:	701a      	strb	r2, [r3, #0]
	sampling_position_b=(sampling_position+7)&7;
 800252e:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <sampling+0x55c>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	3307      	adds	r3, #7
 8002534:	b2db      	uxtb	r3, r3
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	b2da      	uxtb	r2, r3
 800253c:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <sampling+0x560>)
 800253e:	701a      	strb	r2, [r3, #0]
	note_plain=seq.notes1[seq.pos & 7 ];
 8002540:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <sampling+0x564>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	4a26      	ldr	r2, [pc, #152]	; (80025e4 <sampling+0x564>)
 800254a:	4413      	add	r3, r2
 800254c:	789b      	ldrb	r3, [r3, #2]
 800254e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
potValues[i&255]=potSource[i&255]>>4; //just to update values
 8002552:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <sampling+0x54c>)
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	4a23      	ldr	r2, [pc, #140]	; (80025e8 <sampling+0x568>)
 800255a:	5cd2      	ldrb	r2, [r2, r3]
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <sampling+0x54c>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	0912      	lsrs	r2, r2, #4
 8002564:	b2d1      	uxtb	r1, r2
 8002566:	4a21      	ldr	r2, [pc, #132]	; (80025ec <sampling+0x56c>)
 8002568:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 800256a:	4b21      	ldr	r3, [pc, #132]	; (80025f0 <sampling+0x570>)
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8002572:	429a      	cmp	r2, r3
 8002574:	d840      	bhi.n	80025f8 <sampling+0x578>
 8002576:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <sampling+0x574>)
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	b29b      	uxth	r3, r3
 800257e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002582:	b29a      	uxth	r2, r3
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <sampling+0x574>)
 8002586:	801a      	strh	r2, [r3, #0]
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <sampling+0x570>)
 800258a:	2200      	movs	r2, #0
 800258c:	801a      	strh	r2, [r3, #0]
 800258e:	e039      	b.n	8002604 <sampling+0x584>
 8002590:	d2f1a9fc 	.word	0xd2f1a9fc
 8002594:	3f50624d 	.word	0x3f50624d
 8002598:	200035a8 	.word	0x200035a8
 800259c:	447a0000 	.word	0x447a0000
 80025a0:	20002edc 	.word	0x20002edc
 80025a4:	44bb8000 	.word	0x44bb8000
 80025a8:	4479c000 	.word	0x4479c000
 80025ac:	43fa0000 	.word	0x43fa0000
 80025b0:	44bb6000 	.word	0x44bb6000
 80025b4:	44fa0000 	.word	0x44fa0000
 80025b8:	43fa0000 	.word	0x43fa0000
 80025bc:	44f9e000 	.word	0x44f9e000
 80025c0:	451c4000 	.word	0x451c4000
 80025c4:	453b8000 	.word	0x453b8000
 80025c8:	457a0000 	.word	0x457a0000
 80025cc:	20000758 	.word	0x20000758
 80025d0:	20001f70 	.word	0x20001f70
 80025d4:	200001a8 	.word	0x200001a8
 80025d8:	20000756 	.word	0x20000756
 80025dc:	20004514 	.word	0x20004514
 80025e0:	20004515 	.word	0x20004515
 80025e4:	20004034 	.word	0x20004034
 80025e8:	200005a0 	.word	0x200005a0
 80025ec:	20000420 	.word	0x20000420
 80025f0:	2000239a 	.word	0x2000239a
 80025f4:	20002370 	.word	0x20002370
 80025f8:	4ba3      	ldr	r3, [pc, #652]	; (8002888 <sampling+0x808>)
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	3301      	adds	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	4ba1      	ldr	r3, [pc, #644]	; (8002888 <sampling+0x808>)
 8002602:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8002604:	2300      	movs	r3, #0
 8002606:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
	if ((next_isr>>4) != (seq.pos)) { 					//     min 6400 cycles per seq.pos ,         next note step 140ms
 800260a:	4ba0      	ldr	r3, [pc, #640]	; (800288c <sampling+0x80c>)
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	091b      	lsrs	r3, r3, #4
 8002610:	b29a      	uxth	r2, r3
 8002612:	4b9f      	ldr	r3, [pc, #636]	; (8002890 <sampling+0x810>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	429a      	cmp	r2, r3
 800261a:	d009      	beq.n	8002630 <sampling+0x5b0>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 800261c:	4b9b      	ldr	r3, [pc, #620]	; (800288c <sampling+0x80c>)
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	b29b      	uxth	r3, r3
 8002624:	b2da      	uxtb	r2, r3
 8002626:	4b9a      	ldr	r3, [pc, #616]	; (8002890 <sampling+0x810>)
 8002628:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 800262a:	2301      	movs	r3, #1
 800262c:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos ie once in ten bankwrites ,rare
 8002630:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 810f 	beq.w	8002858 <sampling+0x7d8>
	{

		note_reset();
 800263a:	f7ff fce1 	bl	8002000 <note_reset>
		//note[1].timeshift=(adc_values[1])&31; //assigned pots to start of loopers 0-16,works

	//	note[2].timeshift=note[1].timeshift=note[3].timeshift=note[4].timeshift;
		uint8_t   loop_temp1[4];
		loop_temp1[0]=seq.pos&7;
 800263e:	4b94      	ldr	r3, [pc, #592]	; (8002890 <sampling+0x810>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	b2db      	uxtb	r3, r3
 8002648:	713b      	strb	r3, [r7, #4]
		loop_temp1[1]=adc_values[1]>>2;
 800264a:	4b92      	ldr	r3, [pc, #584]	; (8002894 <sampling+0x814>)
 800264c:	885b      	ldrh	r3, [r3, #2]
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	b29b      	uxth	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	717b      	strb	r3, [r7, #5]
		loop_temp1[2]=adc_values[2]>>2;
 8002656:	4b8f      	ldr	r3, [pc, #572]	; (8002894 <sampling+0x814>)
 8002658:	889b      	ldrh	r3, [r3, #4]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	b29b      	uxth	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	71bb      	strb	r3, [r7, #6]
		loop_temp1[3]=adc_values[0]>>2;
 8002662:	4b8c      	ldr	r3, [pc, #560]	; (8002894 <sampling+0x814>)
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	b29b      	uxth	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	71fb      	strb	r3, [r7, #7]

		//loop_temp1=(seq.pos&seq_dat); // loop position and length



		seq.loop[1]=(note[1].timeshift+loop_temp1[0]+loop_temp1[1])&31;
 800266e:	4b8a      	ldr	r3, [pc, #552]	; (8002898 <sampling+0x818>)
 8002670:	7d1a      	ldrb	r2, [r3, #20]
 8002672:	793b      	ldrb	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	b2da      	uxtb	r2, r3
 8002678:	797b      	ldrb	r3, [r7, #5]
 800267a:	4413      	add	r3, r2
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	b2da      	uxtb	r2, r3
 8002684:	4b82      	ldr	r3, [pc, #520]	; (8002890 <sampling+0x810>)
 8002686:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		seq.loop[2]=(note[2].timeshift+loop_temp1[0]+loop_temp1[2])&31; // this is really handy with sync to notes
 800268a:	4b83      	ldr	r3, [pc, #524]	; (8002898 <sampling+0x818>)
 800268c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002690:	793b      	ldrb	r3, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	b2da      	uxtb	r2, r3
 8002696:	79bb      	ldrb	r3, [r7, #6]
 8002698:	4413      	add	r3, r2
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4b7b      	ldr	r3, [pc, #492]	; (8002890 <sampling+0x810>)
 80026a4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		seq.loop[3]=(note[3].timeshift+loop_temp1[0]+loop_temp1[3])&31;
 80026a8:	4b7b      	ldr	r3, [pc, #492]	; (8002898 <sampling+0x818>)
 80026aa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80026ae:	793b      	ldrb	r3, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	4413      	add	r3, r2
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	4b73      	ldr	r3, [pc, #460]	; (8002890 <sampling+0x810>)
 80026c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		seq.loop[5]=(note[5].timeshift+loop_temp1[0])&31;
 80026c6:	4b74      	ldr	r3, [pc, #464]	; (8002898 <sampling+0x818>)
 80026c8:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80026cc:	793b      	ldrb	r3, [r7, #4]
 80026ce:	4413      	add	r3, r2
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	4b6d      	ldr	r3, [pc, #436]	; (8002890 <sampling+0x810>)
 80026da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29


			note[1].pitch=(notes_joined[seq.loop[1]])+(note[1].transpose);    // maybe join 1 and 2
 80026de:	4b6c      	ldr	r3, [pc, #432]	; (8002890 <sampling+0x810>)
 80026e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b6d      	ldr	r3, [pc, #436]	; (800289c <sampling+0x81c>)
 80026e8:	5c9a      	ldrb	r2, [r3, r2]
 80026ea:	4b6b      	ldr	r3, [pc, #428]	; (8002898 <sampling+0x818>)
 80026ec:	7cdb      	ldrb	r3, [r3, #19]
 80026ee:	4413      	add	r3, r2
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4b69      	ldr	r3, [pc, #420]	; (8002898 <sampling+0x818>)
 80026f4:	741a      	strb	r2, [r3, #16]
			note[0].pitch=note[1].pitch+(note[0].transpose); // just double
 80026f6:	4b68      	ldr	r3, [pc, #416]	; (8002898 <sampling+0x818>)
 80026f8:	7c1a      	ldrb	r2, [r3, #16]
 80026fa:	4b67      	ldr	r3, [pc, #412]	; (8002898 <sampling+0x818>)
 80026fc:	795b      	ldrb	r3, [r3, #5]
 80026fe:	4413      	add	r3, r2
 8002700:	b2da      	uxtb	r2, r3
 8002702:	4b65      	ldr	r3, [pc, #404]	; (8002898 <sampling+0x818>)
 8002704:	709a      	strb	r2, [r3, #2]

			note[2].pitch=(notes_joined[seq.loop[2]])+(note[2].transpose);  //loop 8 notes from pos and x times
 8002706:	4b62      	ldr	r3, [pc, #392]	; (8002890 <sampling+0x810>)
 8002708:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800270c:	461a      	mov	r2, r3
 800270e:	4b63      	ldr	r3, [pc, #396]	; (800289c <sampling+0x81c>)
 8002710:	5c9a      	ldrb	r2, [r3, r2]
 8002712:	4b61      	ldr	r3, [pc, #388]	; (8002898 <sampling+0x818>)
 8002714:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002718:	4413      	add	r3, r2
 800271a:	b2da      	uxtb	r2, r3
 800271c:	4b5e      	ldr	r3, [pc, #376]	; (8002898 <sampling+0x818>)
 800271e:	779a      	strb	r2, [r3, #30]

		note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8002720:	4b5b      	ldr	r3, [pc, #364]	; (8002890 <sampling+0x810>)
 8002722:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002726:	461a      	mov	r2, r3
 8002728:	4b5c      	ldr	r3, [pc, #368]	; (800289c <sampling+0x81c>)
 800272a:	5c9a      	ldrb	r2, [r3, r2]
 800272c:	4b5a      	ldr	r3, [pc, #360]	; (8002898 <sampling+0x818>)
 800272e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002732:	4413      	add	r3, r2
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4b58      	ldr	r3, [pc, #352]	; (8002898 <sampling+0x818>)
 8002738:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
//	if (note[3].pitch) 		{note[3].pitch=note[3].pitch+(note[3].transpose>>4);	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off

	note[5].pitch=(notes_joined[seq.loop[5]])+(note[5].transpose);  //
 800273c:	4b54      	ldr	r3, [pc, #336]	; (8002890 <sampling+0x810>)
 800273e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002742:	461a      	mov	r2, r3
 8002744:	4b55      	ldr	r3, [pc, #340]	; (800289c <sampling+0x81c>)
 8002746:	5c9a      	ldrb	r2, [r3, r2]
 8002748:	4b53      	ldr	r3, [pc, #332]	; (8002898 <sampling+0x818>)
 800274a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800274e:	4413      	add	r3, r2
 8002750:	b2da      	uxtb	r2, r3
 8002752:	4b51      	ldr	r3, [pc, #324]	; (8002898 <sampling+0x818>)
 8002754:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		patch_target_replace();
 8002758:	f7fe fdfe 	bl	8001358 <patch_target_replace>
		uint8_t detune_temp=0;
 800275c:	2300      	movs	r3, #0
 800275e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
		detune_temp=(note[5].pitch+(note[5].detune))&31    ;
 8002762:	4b4d      	ldr	r3, [pc, #308]	; (8002898 <sampling+0x818>)
 8002764:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8002768:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <sampling+0x818>)
 800276a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800276e:	4413      	add	r3, r2
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
		if(detune_temp>27) detune_temp=27;
 800277a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800277e:	2b1b      	cmp	r3, #27
 8002780:	d902      	bls.n	8002788 <sampling+0x708>
 8002782:	231b      	movs	r3, #27
 8002784:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
		   //this is for sine skip mask

	note[5].tuned=sine_lut[MajorNote[detune_temp]];	//sets freq ,1.0594  * 16536 =17518  ,
 8002788:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800278c:	4a44      	ldr	r2, [pc, #272]	; (80028a0 <sampling+0x820>)
 800278e:	5cd3      	ldrb	r3, [r2, r3]
 8002790:	461a      	mov	r2, r3
 8002792:	4b44      	ldr	r3, [pc, #272]	; (80028a4 <sampling+0x824>)
 8002794:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002798:	4b3f      	ldr	r3, [pc, #252]	; (8002898 <sampling+0x818>)
 800279a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	note[5].tuned= (note[5].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
 800279e:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <sampling+0x818>)
 80027a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027a4:	461a      	mov	r2, r3
 80027a6:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	129b      	asrs	r3, r3, #10
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	4b39      	ldr	r3, [pc, #228]	; (8002898 <sampling+0x818>)
 80027b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		mask_result =0;
 80027b8:	4b3b      	ldr	r3, [pc, #236]	; (80028a8 <sampling+0x828>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	801a      	strh	r2, [r3, #0]

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 80027be:	2300      	movs	r3, #0
 80027c0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80027c4:	e044      	b.n	8002850 <sampling+0x7d0>

	if (note[mask_i].pitch) {
 80027c6:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80027ca:	4933      	ldr	r1, [pc, #204]	; (8002898 <sampling+0x818>)
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	440b      	add	r3, r1
 80027d6:	3302      	adds	r3, #2
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d033      	beq.n	8002846 <sampling+0x7c6>

	//	note[mask_i].pitch=(note[mask_i].pitch ;

		detune_temp=(note[mask_i].pitch+(note[mask_i].detune))&31    ;
 80027de:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80027e2:	492d      	ldr	r1, [pc, #180]	; (8002898 <sampling+0x818>)
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	440b      	add	r3, r1
 80027ee:	3302      	adds	r3, #2
 80027f0:	7819      	ldrb	r1, [r3, #0]
 80027f2:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80027f6:	4828      	ldr	r0, [pc, #160]	; (8002898 <sampling+0x818>)
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4403      	add	r3, r0
 8002802:	3308      	adds	r3, #8
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	440b      	add	r3, r1
 8002808:	b2db      	uxtb	r3, r3
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
		if(detune_temp>27) detune_temp=27;
 8002812:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8002816:	2b1b      	cmp	r3, #27
 8002818:	d902      	bls.n	8002820 <sampling+0x7a0>
 800281a:	231b      	movs	r3, #27
 800281c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
		note[mask_i].tuned=sample_Noteadd[MajorNote[detune_temp]];
 8002820:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8002824:	4a1e      	ldr	r2, [pc, #120]	; (80028a0 <sampling+0x820>)
 8002826:	5cd3      	ldrb	r3, [r2, r3]
 8002828:	4619      	mov	r1, r3
 800282a:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 800282e:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <sampling+0x82c>)
 8002830:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8002834:	4918      	ldr	r1, [pc, #96]	; (8002898 <sampling+0x818>)
 8002836:	4613      	mov	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	440b      	add	r3, r1
 8002840:	330c      	adds	r3, #12
 8002842:	4602      	mov	r2, r0
 8002844:	801a      	strh	r2, [r3, #0]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002846:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800284a:	3301      	adds	r3, #1
 800284c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002850:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002854:	2b04      	cmp	r3, #4
 8002856:	d9b6      	bls.n	80027c6 <sampling+0x746>
		//note_tuned[3]=2751;
	} // end of note calcualte



	if ((i&63)==0)
 8002858:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <sampling+0x830>)
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <sampling+0x7e8>
	{

		LFO_source(); // calculate lfo maybe 8 times for now
 8002864:	f000 fdf0 	bl	8003448 <LFO_source>
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <sampling+0x830>)
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	3301      	adds	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <sampling+0x830>)
 8002872:	801a      	strh	r2, [r3, #0]
 8002874:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <sampling+0x830>)
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800287c:	f4ff ae49 	bcc.w	8002512 <sampling+0x492>
// filter loop
int32_t  sample_temp2;
uint8_t sine_zero;
int32_t  sample_temp1;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <sampling+0x830>)
 8002882:	2200      	movs	r2, #0
 8002884:	801a      	strh	r2, [r3, #0]
 8002886:	e1d1      	b.n	8002c2c <sampling+0xbac>
 8002888:	2000239a 	.word	0x2000239a
 800288c:	20002370 	.word	0x20002370
 8002890:	20004034 	.word	0x20004034
 8002894:	200001a8 	.word	0x200001a8
 8002898:	200001bc 	.word	0x200001bc
 800289c:	2000651c 	.word	0x2000651c
 80028a0:	0800b210 	.word	0x0800b210
 80028a4:	20000144 	.word	0x20000144
 80028a8:	20001768 	.word	0x20001768
 80028ac:	0800b22c 	.word	0x0800b22c
 80028b0:	20000758 	.word	0x20000758
	i_total=i+sample_pointB;
 80028b4:	4bac      	ldr	r3, [pc, #688]	; (8002b68 <sampling+0xae8>)
 80028b6:	881a      	ldrh	r2, [r3, #0]
 80028b8:	4bac      	ldr	r3, [pc, #688]	; (8002b6c <sampling+0xaec>)
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	4413      	add	r3, r2
 80028be:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	sampling_position=(i>>6);
 80028c2:	4ba9      	ldr	r3, [pc, #676]	; (8002b68 <sampling+0xae8>)
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	099b      	lsrs	r3, r3, #6
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	4ba8      	ldr	r3, [pc, #672]	; (8002b70 <sampling+0xaf0>)
 80028ce:	701a      	strb	r2, [r3, #0]

	if ((i&63)==0)	{  patch_target_replace();    // update values , not too bad
 80028d0:	4ba5      	ldr	r3, [pc, #660]	; (8002b68 <sampling+0xae8>)
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f040 8095 	bne.w	8002a08 <sampling+0x988>
 80028de:	f7fe fd3b 	bl	8001358 <patch_target_replace>
float freq_temp=arm_sin_f32(filter[0].cutoff_1*0.01)    ;   // need this for useful filter
 80028e2:	4ba4      	ldr	r3, [pc, #656]	; (8002b74 <sampling+0xaf4>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fd fefa 	bl	80006e0 <__aeabi_i2d>
 80028ec:	a39a      	add	r3, pc, #616	; (adr r3, 8002b58 <sampling+0xad8>)
 80028ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f2:	f7fd fc79 	bl	80001e8 <__aeabi_dmul>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	f7fd ff59 	bl	80007b4 <__aeabi_d2f>
 8002902:	4603      	mov	r3, r0
 8002904:	ee00 3a10 	vmov	s0, r3
 8002908:	f008 f972 	bl	800abf0 <arm_sin_f32>
 800290c:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 8002910:	4b97      	ldr	r3, [pc, #604]	; (8002b70 <sampling+0xaf0>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002918:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800291c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002920:	4a95      	ldr	r2, [pc, #596]	; (8002b78 <sampling+0xaf8>)
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	edc3 7a00 	vstr	s15, [r3]
 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.006)    ;
 800292a:	4b92      	ldr	r3, [pc, #584]	; (8002b74 <sampling+0xaf4>)
 800292c:	7a1b      	ldrb	r3, [r3, #8]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fd fed6 	bl	80006e0 <__aeabi_i2d>
 8002934:	a38a      	add	r3, pc, #552	; (adr r3, 8002b60 <sampling+0xae0>)
 8002936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293a:	f7fd fc55 	bl	80001e8 <__aeabi_dmul>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4610      	mov	r0, r2
 8002944:	4619      	mov	r1, r3
 8002946:	f7fd ff35 	bl	80007b4 <__aeabi_d2f>
 800294a:	4603      	mov	r3, r0
 800294c:	ee00 3a10 	vmov	s0, r3
 8002950:	f008 f94e 	bl	800abf0 <arm_sin_f32>
 8002954:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
freq_pointer[1] [sampling_position] =1-freq_temp ; // filter lfos
 8002958:	4b85      	ldr	r3, [pc, #532]	; (8002b70 <sampling+0xaf0>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002960:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002968:	4a83      	ldr	r2, [pc, #524]	; (8002b78 <sampling+0xaf8>)
 800296a:	3309      	adds	r3, #9
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	edc3 7a00 	vstr	s15, [r3]
freq_temp=arm_sin_f32(filter[2].cutoff_1*0.006)    ;
 8002974:	4b7f      	ldr	r3, [pc, #508]	; (8002b74 <sampling+0xaf4>)
 8002976:	7c1b      	ldrb	r3, [r3, #16]
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd feb1 	bl	80006e0 <__aeabi_i2d>
 800297e:	a378      	add	r3, pc, #480	; (adr r3, 8002b60 <sampling+0xae0>)
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	f7fd fc30 	bl	80001e8 <__aeabi_dmul>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4610      	mov	r0, r2
 800298e:	4619      	mov	r1, r3
 8002990:	f7fd ff10 	bl	80007b4 <__aeabi_d2f>
 8002994:	4603      	mov	r3, r0
 8002996:	ee00 3a10 	vmov	s0, r3
 800299a:	f008 f929 	bl	800abf0 <arm_sin_f32>
 800299e:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
freq_pointer[2] [sampling_position] =1-freq_temp ; // filter lfos
 80029a2:	4b73      	ldr	r3, [pc, #460]	; (8002b70 <sampling+0xaf0>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029aa:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80029ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b2:	4a71      	ldr	r2, [pc, #452]	; (8002b78 <sampling+0xaf8>)
 80029b4:	3312      	adds	r3, #18
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	edc3 7a00 	vstr	s15, [r3]
 freq_temp=arm_sin_f32(filter[3].cutoff_1*0.006)    ;
 80029be:	4b6d      	ldr	r3, [pc, #436]	; (8002b74 <sampling+0xaf4>)
 80029c0:	7e1b      	ldrb	r3, [r3, #24]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fd fe8c 	bl	80006e0 <__aeabi_i2d>
 80029c8:	a365      	add	r3, pc, #404	; (adr r3, 8002b60 <sampling+0xae0>)
 80029ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ce:	f7fd fc0b 	bl	80001e8 <__aeabi_dmul>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4610      	mov	r0, r2
 80029d8:	4619      	mov	r1, r3
 80029da:	f7fd feeb 	bl	80007b4 <__aeabi_d2f>
 80029de:	4603      	mov	r3, r0
 80029e0:	ee00 3a10 	vmov	s0, r3
 80029e4:	f008 f904 	bl	800abf0 <arm_sin_f32>
 80029e8:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
freq_pointer[3] [sampling_position] =1-freq_temp ; // filter lfos
 80029ec:	4b60      	ldr	r3, [pc, #384]	; (8002b70 <sampling+0xaf0>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029f4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80029f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029fc:	4a5e      	ldr	r2, [pc, #376]	; (8002b78 <sampling+0xaf8>)
 80029fe:	331b      	adds	r3, #27
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	edc3 7a00 	vstr	s15, [r3]

	}

// every step   1,110,928   >>20  ,per note
// New oscillators , sync, trigger input , waveshape ,zero cross
	sample_accus[0] = sample_accus[0] + note[0].tuned; //careful with signed bit shift,better compare
 8002a08:	4b5c      	ldr	r3, [pc, #368]	; (8002b7c <sampling+0xafc>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a5c      	ldr	r2, [pc, #368]	; (8002b80 <sampling+0xb00>)
 8002a0e:	8992      	ldrh	r2, [r2, #12]
 8002a10:	4413      	add	r3, r2
 8002a12:	4a5a      	ldr	r2, [pc, #360]	; (8002b7c <sampling+0xafc>)
 8002a14:	6013      	str	r3, [r2, #0]

	if (sample_accus[0]>524287) sample_accus[0] =-sample_accus[0] ; // faster >  than &  ,strange
 8002a16:	4b59      	ldr	r3, [pc, #356]	; (8002b7c <sampling+0xafc>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a1e:	db04      	blt.n	8002a2a <sampling+0x9aa>
 8002a20:	4b56      	ldr	r3, [pc, #344]	; (8002b7c <sampling+0xafc>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	425b      	negs	r3, r3
 8002a26:	4a55      	ldr	r2, [pc, #340]	; (8002b7c <sampling+0xafc>)
 8002a28:	6013      	str	r3, [r2, #0]

	sample_accus[1] = sample_accus[1] + note[1].tuned;  // normal adder full volume
 8002a2a:	4b54      	ldr	r3, [pc, #336]	; (8002b7c <sampling+0xafc>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4a54      	ldr	r2, [pc, #336]	; (8002b80 <sampling+0xb00>)
 8002a30:	8b52      	ldrh	r2, [r2, #26]
 8002a32:	4413      	add	r3, r2
 8002a34:	4a51      	ldr	r2, [pc, #324]	; (8002b7c <sampling+0xafc>)
 8002a36:	6053      	str	r3, [r2, #4]

			if (sample_accus[1]>524287) sample_accus[1] =-sample_accus[1] ; // faster >  than &  ,strange
 8002a38:	4b50      	ldr	r3, [pc, #320]	; (8002b7c <sampling+0xafc>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a40:	db04      	blt.n	8002a4c <sampling+0x9cc>
 8002a42:	4b4e      	ldr	r3, [pc, #312]	; (8002b7c <sampling+0xafc>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	425b      	negs	r3, r3
 8002a48:	4a4c      	ldr	r2, [pc, #304]	; (8002b7c <sampling+0xafc>)
 8002a4a:	6053      	str	r3, [r2, #4]

			sample_accus[2] = sample_accus[2] + note[2].tuned;
 8002a4c:	4b4b      	ldr	r3, [pc, #300]	; (8002b7c <sampling+0xafc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4a4b      	ldr	r2, [pc, #300]	; (8002b80 <sampling+0xb00>)
 8002a52:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8002a54:	4413      	add	r3, r2
 8002a56:	4a49      	ldr	r2, [pc, #292]	; (8002b7c <sampling+0xafc>)
 8002a58:	6093      	str	r3, [r2, #8]

					if (sample_accus[2]>524287) sample_accus[2] =-sample_accus[2] ; // faster >  than &  ,strange
 8002a5a:	4b48      	ldr	r3, [pc, #288]	; (8002b7c <sampling+0xafc>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a62:	db04      	blt.n	8002a6e <sampling+0x9ee>
 8002a64:	4b45      	ldr	r3, [pc, #276]	; (8002b7c <sampling+0xafc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	425b      	negs	r3, r3
 8002a6a:	4a44      	ldr	r2, [pc, #272]	; (8002b7c <sampling+0xafc>)
 8002a6c:	6093      	str	r3, [r2, #8]

					sample_accus[3] = sample_accus[3] + note[3].tuned; // bouncing somewhere
 8002a6e:	4b43      	ldr	r3, [pc, #268]	; (8002b7c <sampling+0xafc>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	4a43      	ldr	r2, [pc, #268]	; (8002b80 <sampling+0xb00>)
 8002a74:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8002a76:	4413      	add	r3, r2
 8002a78:	4a40      	ldr	r2, [pc, #256]	; (8002b7c <sampling+0xafc>)
 8002a7a:	60d3      	str	r3, [r2, #12]

							if (sample_accus[3]>524287) sample_accus[3] =-sample_accus[3] ; // faster >  than &  ,strange
 8002a7c:	4b3f      	ldr	r3, [pc, #252]	; (8002b7c <sampling+0xafc>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a84:	db04      	blt.n	8002a90 <sampling+0xa10>
 8002a86:	4b3d      	ldr	r3, [pc, #244]	; (8002b7c <sampling+0xafc>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	425b      	negs	r3, r3
 8002a8c:	4a3b      	ldr	r2, [pc, #236]	; (8002b7c <sampling+0xafc>)
 8002a8e:	60d3      	str	r3, [r2, #12]

							sample_accus[4] = sample_accus[4] + note[4].tuned;
 8002a90:	4b3a      	ldr	r3, [pc, #232]	; (8002b7c <sampling+0xafc>)
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	4a3a      	ldr	r2, [pc, #232]	; (8002b80 <sampling+0xb00>)
 8002a96:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002a9a:	4413      	add	r3, r2
 8002a9c:	4a37      	ldr	r2, [pc, #220]	; (8002b7c <sampling+0xafc>)
 8002a9e:	6113      	str	r3, [r2, #16]

									if (sample_accus[4]>524287) sample_accus[4] =-sample_accus[4] ; // faster >  than &  ,strange
 8002aa0:	4b36      	ldr	r3, [pc, #216]	; (8002b7c <sampling+0xafc>)
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002aa8:	db04      	blt.n	8002ab4 <sampling+0xa34>
 8002aaa:	4b34      	ldr	r3, [pc, #208]	; (8002b7c <sampling+0xafc>)
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	425b      	negs	r3, r3
 8002ab0:	4a32      	ldr	r2, [pc, #200]	; (8002b7c <sampling+0xafc>)
 8002ab2:	6113      	str	r3, [r2, #16]

									sample_Accu[5] =sample_Accu[0] =sample_Accu[1] =sample_Accu[2]=sample_Accu[3] =0; //all zeroed 20 bits
 8002ab4:	4b33      	ldr	r3, [pc, #204]	; (8002b84 <sampling+0xb04>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	4b32      	ldr	r3, [pc, #200]	; (8002b84 <sampling+0xb04>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	4a31      	ldr	r2, [pc, #196]	; (8002b84 <sampling+0xb04>)
 8002ac0:	6093      	str	r3, [r2, #8]
 8002ac2:	4b30      	ldr	r3, [pc, #192]	; (8002b84 <sampling+0xb04>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	4a2f      	ldr	r2, [pc, #188]	; (8002b84 <sampling+0xb04>)
 8002ac8:	6053      	str	r3, [r2, #4]
 8002aca:	4b2e      	ldr	r3, [pc, #184]	; (8002b84 <sampling+0xb04>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4a2d      	ldr	r2, [pc, #180]	; (8002b84 <sampling+0xb04>)
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b2c      	ldr	r3, [pc, #176]	; (8002b84 <sampling+0xb04>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a2b      	ldr	r2, [pc, #172]	; (8002b84 <sampling+0xb04>)
 8002ad8:	6153      	str	r3, [r2, #20]


									sample_temp1=(sample_accus[0]*note[0].velocity);   // multiply then shift is a little faster
 8002ada:	4b28      	ldr	r3, [pc, #160]	; (8002b7c <sampling+0xafc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a28      	ldr	r2, [pc, #160]	; (8002b80 <sampling+0xb00>)
 8002ae0:	79d2      	ldrb	r2, [r2, #7]
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	677b      	str	r3, [r7, #116]	; 0x74
									sample_temp2=(sample_accus[1]*note[1].velocity);// needs cut a bit  ,default 20bit
 8002ae8:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <sampling+0xafc>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4a24      	ldr	r2, [pc, #144]	; (8002b80 <sampling+0xb00>)
 8002aee:	7d52      	ldrb	r2, [r2, #21]
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	673b      	str	r3, [r7, #112]	; 0x70
								    sample_Accu[0]=(sample_temp1+sample_temp1)>>9;
 8002af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	125b      	asrs	r3, r3, #9
 8002afc:	4a21      	ldr	r2, [pc, #132]	; (8002b84 <sampling+0xb04>)
 8002afe:	6013      	str	r3, [r2, #0]

									sample_temp1=sample_accus[2]*note[2].velocity; // needs cut a bit  ,default 20bit
 8002b00:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <sampling+0xafc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	4a1e      	ldr	r2, [pc, #120]	; (8002b80 <sampling+0xb00>)
 8002b06:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
 8002b0e:	677b      	str	r3, [r7, #116]	; 0x74
									sample_Accu[1]=sample_temp1>>8; // 20+8
 8002b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b12:	121b      	asrs	r3, r3, #8
 8002b14:	4a1b      	ldr	r2, [pc, #108]	; (8002b84 <sampling+0xb04>)
 8002b16:	6053      	str	r3, [r2, #4]


									sample_temp1=sample_accus[3]*note[3].velocity;      // needs some gain fine tune !
 8002b18:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <sampling+0xafc>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a18      	ldr	r2, [pc, #96]	; (8002b80 <sampling+0xb00>)
 8002b1e:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	677b      	str	r3, [r7, #116]	; 0x74
									sample_Accu[2] =sample_temp1>>8;    // 64 default 20+8
 8002b28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b2a:	121b      	asrs	r3, r3, #8
 8002b2c:	4a15      	ldr	r2, [pc, #84]	; (8002b84 <sampling+0xb04>)
 8002b2e:	6093      	str	r3, [r2, #8]


									sample_temp1=sine_out*	note[5].velocity;  // sine out is 16bit, add 4 then 16+8
 8002b30:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <sampling+0xb00>)
 8002b32:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <sampling+0xb08>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	fb02 f303 	mul.w	r3, r2, r3
 8002b40:	677b      	str	r3, [r7, #116]	; 0x74
									sample_Accu[3] =sample_temp1>>4;
 8002b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b44:	111b      	asrs	r3, r3, #4
 8002b46:	4a0f      	ldr	r2, [pc, #60]	; (8002b84 <sampling+0xb04>)
 8002b48:	60d3      	str	r3, [r2, #12]


	if (sine_counterB==0) 	sine_temp2=note[5].tuned;
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <sampling+0xb0c>)
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	e01e      	b.n	8002b90 <sampling+0xb10>
 8002b52:	bf00      	nop
 8002b54:	f3af 8000 	nop.w
 8002b58:	47ae147b 	.word	0x47ae147b
 8002b5c:	3f847ae1 	.word	0x3f847ae1
 8002b60:	bc6a7efa 	.word	0xbc6a7efa
 8002b64:	3f789374 	.word	0x3f789374
 8002b68:	20000758 	.word	0x20000758
 8002b6c:	20000756 	.word	0x20000756
 8002b70:	20004514 	.word	0x20004514
 8002b74:	20000220 	.word	0x20000220
 8002b78:	20002428 	.word	0x20002428
 8002b7c:	20002374 	.word	0x20002374
 8002b80:	200001bc 	.word	0x200001bc
 8002b84:	20000738 	.word	0x20000738
 8002b88:	20000724 	.word	0x20000724
 8002b8c:	20000722 	.word	0x20000722
 8002b90:	d104      	bne.n	8002b9c <sampling+0xb1c>
 8002b92:	4ba0      	ldr	r3, [pc, #640]	; (8002e14 <sampling+0xd94>)
 8002b94:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8002b98:	4b9f      	ldr	r3, [pc, #636]	; (8002e18 <sampling+0xd98>)
 8002b9a:	801a      	strh	r2, [r3, #0]

		sine_counterB=sine_counterB+sine_temp2 ;  // sine up counter per cycle , however sine adder needs to wait
 8002b9c:	4b9f      	ldr	r3, [pc, #636]	; (8002e1c <sampling+0xd9c>)
 8002b9e:	881a      	ldrh	r2, [r3, #0]
 8002ba0:	4b9d      	ldr	r3, [pc, #628]	; (8002e18 <sampling+0xd98>)
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	4b9c      	ldr	r3, [pc, #624]	; (8002e1c <sampling+0xd9c>)
 8002baa:	801a      	strh	r2, [r3, #0]
		if (sine_counterB>>7) sine_zero=0; else sine_zero=1;
 8002bac:	4b9b      	ldr	r3, [pc, #620]	; (8002e1c <sampling+0xd9c>)
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	09db      	lsrs	r3, r3, #7
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <sampling+0xb40>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002bbe:	e002      	b.n	8002bc6 <sampling+0xb46>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	if (sine_counterB>(sine_length<<5)) sine_counterB=0; //fixed for now
 8002bc6:	4b95      	ldr	r3, [pc, #596]	; (8002e1c <sampling+0xd9c>)
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4b94      	ldr	r3, [pc, #592]	; (8002e20 <sampling+0xda0>)
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	015b      	lsls	r3, r3, #5
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	dd02      	ble.n	8002bdc <sampling+0xb5c>
 8002bd6:	4b91      	ldr	r3, [pc, #580]	; (8002e1c <sampling+0xd9c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	801a      	strh	r2, [r3, #0]
	sine_count(); // calc sine   distortion out when hcagning note
 8002bdc:	f000 fbd4 	bl	8003388 <sine_count>
	play_holder0[i]=sample_Accu[0];  // write to bank
 8002be0:	4b90      	ldr	r3, [pc, #576]	; (8002e24 <sampling+0xda4>)
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	4619      	mov	r1, r3
 8002be6:	4b90      	ldr	r3, [pc, #576]	; (8002e28 <sampling+0xda8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a90      	ldr	r2, [pc, #576]	; (8002e2c <sampling+0xdac>)
 8002bec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder1[i]=sample_Accu[1];
 8002bf0:	4b8c      	ldr	r3, [pc, #560]	; (8002e24 <sampling+0xda4>)
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4b8c      	ldr	r3, [pc, #560]	; (8002e28 <sampling+0xda8>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4a8d      	ldr	r2, [pc, #564]	; (8002e30 <sampling+0xdb0>)
 8002bfc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder2[i]=sample_Accu[2];
 8002c00:	4b88      	ldr	r3, [pc, #544]	; (8002e24 <sampling+0xda4>)
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	4619      	mov	r1, r3
 8002c06:	4b88      	ldr	r3, [pc, #544]	; (8002e28 <sampling+0xda8>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	4a8a      	ldr	r2, [pc, #552]	; (8002e34 <sampling+0xdb4>)
 8002c0c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder3[i]=sample_Accu[3];
 8002c10:	4b84      	ldr	r3, [pc, #528]	; (8002e24 <sampling+0xda4>)
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	4619      	mov	r1, r3
 8002c16:	4b84      	ldr	r3, [pc, #528]	; (8002e28 <sampling+0xda8>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	4a87      	ldr	r2, [pc, #540]	; (8002e38 <sampling+0xdb8>)
 8002c1c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002c20:	4b80      	ldr	r3, [pc, #512]	; (8002e24 <sampling+0xda4>)
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	3301      	adds	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	4b7e      	ldr	r3, [pc, #504]	; (8002e24 <sampling+0xda4>)
 8002c2a:	801a      	strh	r2, [r3, #0]
 8002c2c:	4b7d      	ldr	r3, [pc, #500]	; (8002e24 <sampling+0xda4>)
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c34:	f4ff ae3e 	bcc.w	80028b4 <sampling+0x834>
int32_t filter_Accu;
int32_t filter_Accu2;

//uint16_t* click=&input_holder[0];

uint16_t crap_hold=2000;
 8002c38:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c3c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

				uint16_t crap_hold1=2000;
 8002c40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c44:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
				uint16_t crap_hold2=2000;
 8002c48:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c4c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 8002c50:	4b74      	ldr	r3, [pc, #464]	; (8002e24 <sampling+0xda4>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	801a      	strh	r2, [r3, #0]
 8002c56:	e030      	b.n	8002cba <sampling+0xc3a>
			{
				crap_hold=((input_holder[i]*7)+crap_hold2)>>3;
 8002c58:	4b72      	ldr	r3, [pc, #456]	; (8002e24 <sampling+0xda4>)
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4b77      	ldr	r3, [pc, #476]	; (8002e3c <sampling+0xdbc>)
 8002c60:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002c64:	461a      	mov	r2, r3
 8002c66:	4613      	mov	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	1a9a      	subs	r2, r3, r2
 8002c6c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002c70:	4413      	add	r3, r2
 8002c72:	10db      	asrs	r3, r3, #3
 8002c74:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
					crap_hold1=((crap_hold*7)+crap_hold1)>>3;
 8002c78:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	1a9a      	subs	r2, r3, r2
 8002c82:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002c86:	4413      	add	r3, r2
 8002c88:	10db      	asrs	r3, r3, #3
 8002c8a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					input_holder[i] =((crap_hold1*7)+crap_hold2)>>3;
 8002c8e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8002c92:	4613      	mov	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	1a9a      	subs	r2, r3, r2
 8002c98:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002c9c:	4413      	add	r3, r2
 8002c9e:	10d9      	asrs	r1, r3, #3
 8002ca0:	4b60      	ldr	r3, [pc, #384]	; (8002e24 <sampling+0xda4>)
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	b289      	uxth	r1, r1
 8002ca8:	4b64      	ldr	r3, [pc, #400]	; (8002e3c <sampling+0xdbc>)
 8002caa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 8002cae:	4b5d      	ldr	r3, [pc, #372]	; (8002e24 <sampling+0xda4>)
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	4b5b      	ldr	r3, [pc, #364]	; (8002e24 <sampling+0xda4>)
 8002cb8:	801a      	strh	r2, [r3, #0]
 8002cba:	4b5a      	ldr	r3, [pc, #360]	; (8002e24 <sampling+0xda4>)
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc2:	d3c9      	bcc.n	8002c58 <sampling+0xbd8>
}
*/



for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8002cc4:	4b57      	ldr	r3, [pc, #348]	; (8002e24 <sampling+0xda4>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	801a      	strh	r2, [r3, #0]
 8002cca:	e32c      	b.n	8003326 <sampling+0x12a6>
	i_total=i+sample_pointB;
 8002ccc:	4b55      	ldr	r3, [pc, #340]	; (8002e24 <sampling+0xda4>)
 8002cce:	881a      	ldrh	r2, [r3, #0]
 8002cd0:	4b5b      	ldr	r3, [pc, #364]	; (8002e40 <sampling+0xdc0>)
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

sampling_position=(i>>6);
 8002cda:	4b52      	ldr	r3, [pc, #328]	; (8002e24 <sampling+0xda4>)
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	099b      	lsrs	r3, r3, #6
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	4b57      	ldr	r3, [pc, #348]	; (8002e44 <sampling+0xdc4>)
 8002ce6:	701a      	strb	r2, [r3, #0]
// filter 1
if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 8002ce8:	4b4e      	ldr	r3, [pc, #312]	; (8002e24 <sampling+0xda4>)
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	095b      	lsrs	r3, r3, #5
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	33a0      	adds	r3, #160	; 0xa0
 8002cf4:	443b      	add	r3, r7
 8002cf6:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8002cfa:	4a4a      	ldr	r2, [pc, #296]	; (8002e24 <sampling+0xda4>)
 8002cfc:	8812      	ldrh	r2, [r2, #0]
 8002cfe:	f002 021f 	and.w	r2, r2, #31
 8002d02:	2101      	movs	r1, #1
 8002d04:	fa01 f202 	lsl.w	r2, r1, r2
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d10f      	bne.n	8002d2c <sampling+0xcac>
 8002d0c:	4b4e      	ldr	r3, [pc, #312]	; (8002e48 <sampling+0xdc8>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	711a      	strb	r2, [r3, #4]
 8002d12:	4b4e      	ldr	r3, [pc, #312]	; (8002e4c <sampling+0xdcc>)
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	3301      	adds	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	4b4c      	ldr	r3, [pc, #304]	; (8002e4c <sampling+0xdcc>)
 8002d1c:	801a      	strh	r2, [r3, #0]
 8002d1e:	4b4b      	ldr	r3, [pc, #300]	; (8002e4c <sampling+0xdcc>)
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	4b48      	ldr	r3, [pc, #288]	; (8002e4c <sampling+0xdcc>)
 8002d2a:	801a      	strh	r2, [r3, #0]


sample_Accu[0]=play_holder0[i];  // sine input
 8002d2c:	4b3d      	ldr	r3, [pc, #244]	; (8002e24 <sampling+0xda4>)
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b3e      	ldr	r3, [pc, #248]	; (8002e2c <sampling+0xdac>)
 8002d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d38:	4a3b      	ldr	r2, [pc, #236]	; (8002e28 <sampling+0xda8>)
 8002d3a:	6013      	str	r3, [r2, #0]
sample_Accu[1]=play_holder1[i] ; // saw
 8002d3c:	4b39      	ldr	r3, [pc, #228]	; (8002e24 <sampling+0xda4>)
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b3b      	ldr	r3, [pc, #236]	; (8002e30 <sampling+0xdb0>)
 8002d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d48:	4a37      	ldr	r2, [pc, #220]	; (8002e28 <sampling+0xda8>)
 8002d4a:	6053      	str	r3, [r2, #4]
sample_Accu[2]=play_holder2[i];  // sine input
 8002d4c:	4b35      	ldr	r3, [pc, #212]	; (8002e24 <sampling+0xda4>)
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b38      	ldr	r3, [pc, #224]	; (8002e34 <sampling+0xdb4>)
 8002d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d58:	4a33      	ldr	r2, [pc, #204]	; (8002e28 <sampling+0xda8>)
 8002d5a:	6093      	str	r3, [r2, #8]
sample_Accu[3]=play_holder3[i] ;
 8002d5c:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <sampling+0xda4>)
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b35      	ldr	r3, [pc, #212]	; (8002e38 <sampling+0xdb8>)
 8002d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d68:	4a2f      	ldr	r2, [pc, #188]	; (8002e28 <sampling+0xda8>)
 8002d6a:	60d3      	str	r3, [r2, #12]

// this section is about 100 tmr cycles
if ((i&63)==0){
 8002d6c:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <sampling+0xda4>)
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f040 8127 	bne.w	8002fc8 <sampling+0xf48>
freq_point[0]=freq_pointer[0] [sampling_position];; // load up coeffs
 8002d7a:	4b32      	ldr	r3, [pc, #200]	; (8002e44 <sampling+0xdc4>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	4a34      	ldr	r2, [pc, #208]	; (8002e50 <sampling+0xdd0>)
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a33      	ldr	r2, [pc, #204]	; (8002e54 <sampling+0xdd4>)
 8002d88:	6013      	str	r3, [r2, #0]

freq_point[2]=freq_pointer[1] [sampling_position];  // ok , array was too short
 8002d8a:	4b2e      	ldr	r3, [pc, #184]	; (8002e44 <sampling+0xdc4>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	4a30      	ldr	r2, [pc, #192]	; (8002e50 <sampling+0xdd0>)
 8002d90:	3309      	adds	r3, #9
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a2e      	ldr	r2, [pc, #184]	; (8002e54 <sampling+0xdd4>)
 8002d9a:	6093      	str	r3, [r2, #8]
freq_point[4]=freq_pointer[2] [sampling_position];  // ok , array was too short
 8002d9c:	4b29      	ldr	r3, [pc, #164]	; (8002e44 <sampling+0xdc4>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	4a2b      	ldr	r2, [pc, #172]	; (8002e50 <sampling+0xdd0>)
 8002da2:	3312      	adds	r3, #18
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a2a      	ldr	r2, [pc, #168]	; (8002e54 <sampling+0xdd4>)
 8002dac:	6113      	str	r3, [r2, #16]
freq_point[6]=freq_pointer[3] [sampling_position];  // ok , array was too short
 8002dae:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <sampling+0xdc4>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	4a27      	ldr	r2, [pc, #156]	; (8002e50 <sampling+0xdd0>)
 8002db4:	331b      	adds	r3, #27
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a25      	ldr	r2, [pc, #148]	; (8002e54 <sampling+0xdd4>)
 8002dbe:	6193      	str	r3, [r2, #24]


if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 8002dc0:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <sampling+0xdd4>)
 8002dc2:	edd3 7a00 	vldr	s15, [r3]
 8002dc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd2:	dd04      	ble.n	8002dde <sampling+0xd5e>
 8002dd4:	4b1f      	ldr	r3, [pc, #124]	; (8002e54 <sampling+0xdd4>)
 8002dd6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	e00b      	b.n	8002df6 <sampling+0xd76>
 8002dde:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <sampling+0xdd4>)
 8002de0:	edd3 7a00 	vldr	s15, [r3]
 8002de4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dec:	d503      	bpl.n	8002df6 <sampling+0xd76>
 8002dee:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <sampling+0xdd4>)
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
if (freq_point[4]>1) freq_point[4]=1; else if (freq_point[4]<0) freq_point[4]=0;// just in case
 8002df6:	4b17      	ldr	r3, [pc, #92]	; (8002e54 <sampling+0xdd4>)
 8002df8:	edd3 7a04 	vldr	s15, [r3, #16]
 8002dfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e08:	dd26      	ble.n	8002e58 <sampling+0xdd8>
 8002e0a:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <sampling+0xdd4>)
 8002e0c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e10:	611a      	str	r2, [r3, #16]
 8002e12:	e02d      	b.n	8002e70 <sampling+0xdf0>
 8002e14:	200001bc 	.word	0x200001bc
 8002e18:	20000728 	.word	0x20000728
 8002e1c:	20000722 	.word	0x20000722
 8002e20:	20000142 	.word	0x20000142
 8002e24:	20000758 	.word	0x20000758
 8002e28:	20000738 	.word	0x20000738
 8002e2c:	20005d18 	.word	0x20005d18
 8002e30:	20004518 	.word	0x20004518
 8002e34:	20004d18 	.word	0x20004d18
 8002e38:	20005518 	.word	0x20005518
 8002e3c:	20002ee4 	.word	0x20002ee4
 8002e40:	20000756 	.word	0x20000756
 8002e44:	20004514 	.word	0x20004514
 8002e48:	200035a8 	.word	0x200035a8
 8002e4c:	200024b8 	.word	0x200024b8
 8002e50:	20002428 	.word	0x20002428
 8002e54:	20002408 	.word	0x20002408
 8002e58:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <sampling+0xe44>)
 8002e5a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e66:	d503      	bpl.n	8002e70 <sampling+0xdf0>
 8002e68:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <sampling+0xe44>)
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	611a      	str	r2, [r3, #16]
if (freq_point[2]>1) freq_point[2]=1; else if (freq_point[2]<0) freq_point[2]=0;// just in case
 8002e70:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <sampling+0xe44>)
 8002e72:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e82:	dd04      	ble.n	8002e8e <sampling+0xe0e>
 8002e84:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <sampling+0xe44>)
 8002e86:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	e00b      	b.n	8002ea6 <sampling+0xe26>
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <sampling+0xe44>)
 8002e90:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9c:	d503      	bpl.n	8002ea6 <sampling+0xe26>
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <sampling+0xe44>)
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	609a      	str	r2, [r3, #8]
if (freq_point[6]>1) freq_point[6]=1; else if (freq_point[6]<0) freq_point[6]=0;// just in case
 8002ea6:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <sampling+0xe44>)
 8002ea8:	edd3 7a06 	vldr	s15, [r3, #24]
 8002eac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002eb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb8:	dd06      	ble.n	8002ec8 <sampling+0xe48>
 8002eba:	4b02      	ldr	r3, [pc, #8]	; (8002ec4 <sampling+0xe44>)
 8002ebc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ec0:	619a      	str	r2, [r3, #24]
 8002ec2:	e00d      	b.n	8002ee0 <sampling+0xe60>
 8002ec4:	20002408 	.word	0x20002408
 8002ec8:	4bc5      	ldr	r3, [pc, #788]	; (80031e0 <sampling+0x1160>)
 8002eca:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ece:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed6:	d503      	bpl.n	8002ee0 <sampling+0xe60>
 8002ed8:	4bc1      	ldr	r3, [pc, #772]	; (80031e0 <sampling+0x1160>)
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]

freq_point[1]=1-freq_point[0];
 8002ee0:	4bbf      	ldr	r3, [pc, #764]	; (80031e0 <sampling+0x1160>)
 8002ee2:	edd3 7a00 	vldr	s15, [r3]
 8002ee6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eee:	4bbc      	ldr	r3, [pc, #752]	; (80031e0 <sampling+0x1160>)
 8002ef0:	edc3 7a01 	vstr	s15, [r3, #4]
freq_point[3]=1-freq_point[2];
 8002ef4:	4bba      	ldr	r3, [pc, #744]	; (80031e0 <sampling+0x1160>)
 8002ef6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002efa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f02:	4bb7      	ldr	r3, [pc, #732]	; (80031e0 <sampling+0x1160>)
 8002f04:	edc3 7a03 	vstr	s15, [r3, #12]
freq_point[5]=1-freq_point[4];
 8002f08:	4bb5      	ldr	r3, [pc, #724]	; (80031e0 <sampling+0x1160>)
 8002f0a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f16:	4bb2      	ldr	r3, [pc, #712]	; (80031e0 <sampling+0x1160>)
 8002f18:	edc3 7a05 	vstr	s15, [r3, #20]
freq_point[7]=1-freq_point[6];
 8002f1c:	4bb0      	ldr	r3, [pc, #704]	; (80031e0 <sampling+0x1160>)
 8002f1e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f2a:	4bad      	ldr	r3, [pc, #692]	; (80031e0 <sampling+0x1160>)
 8002f2c:	edc3 7a07 	vstr	s15, [r3, #28]

filter_res[0]=freq_point[0]*0.2;
 8002f30:	4bab      	ldr	r3, [pc, #684]	; (80031e0 <sampling+0x1160>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fd fbe5 	bl	8000704 <__aeabi_f2d>
 8002f3a:	a3a7      	add	r3, pc, #668	; (adr r3, 80031d8 <sampling+0x1158>)
 8002f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f40:	f7fd f952 	bl	80001e8 <__aeabi_dmul>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	f7fd fc32 	bl	80007b4 <__aeabi_d2f>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4aa4      	ldr	r2, [pc, #656]	; (80031e4 <sampling+0x1164>)
 8002f54:	6013      	str	r3, [r2, #0]
filter_res[1]=freq_point[1]*0.2;
 8002f56:	4ba2      	ldr	r3, [pc, #648]	; (80031e0 <sampling+0x1160>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fd fbd2 	bl	8000704 <__aeabi_f2d>
 8002f60:	a39d      	add	r3, pc, #628	; (adr r3, 80031d8 <sampling+0x1158>)
 8002f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f66:	f7fd f93f 	bl	80001e8 <__aeabi_dmul>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4610      	mov	r0, r2
 8002f70:	4619      	mov	r1, r3
 8002f72:	f7fd fc1f 	bl	80007b4 <__aeabi_d2f>
 8002f76:	4603      	mov	r3, r0
 8002f78:	4a9a      	ldr	r2, [pc, #616]	; (80031e4 <sampling+0x1164>)
 8002f7a:	6053      	str	r3, [r2, #4]
filter_res[2]=freq_point[2]*0.2;
 8002f7c:	4b98      	ldr	r3, [pc, #608]	; (80031e0 <sampling+0x1160>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fd fbbf 	bl	8000704 <__aeabi_f2d>
 8002f86:	a394      	add	r3, pc, #592	; (adr r3, 80031d8 <sampling+0x1158>)
 8002f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8c:	f7fd f92c 	bl	80001e8 <__aeabi_dmul>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4610      	mov	r0, r2
 8002f96:	4619      	mov	r1, r3
 8002f98:	f7fd fc0c 	bl	80007b4 <__aeabi_d2f>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	4a91      	ldr	r2, [pc, #580]	; (80031e4 <sampling+0x1164>)
 8002fa0:	6093      	str	r3, [r2, #8]
filter_res[3]=freq_point[3]*0.2;
 8002fa2:	4b8f      	ldr	r3, [pc, #572]	; (80031e0 <sampling+0x1160>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd fbac 	bl	8000704 <__aeabi_f2d>
 8002fac:	a38a      	add	r3, pc, #552	; (adr r3, 80031d8 <sampling+0x1158>)
 8002fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb2:	f7fd f919 	bl	80001e8 <__aeabi_dmul>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4610      	mov	r0, r2
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f7fd fbf9 	bl	80007b4 <__aeabi_d2f>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	4a87      	ldr	r2, [pc, #540]	; (80031e4 <sampling+0x1164>)
 8002fc6:	60d3      	str	r3, [r2, #12]
		//freq_point[0]=0.50;

   // vol lfo


		filter_accus[1]=sample_Accu[0]; // saw
 8002fc8:	4b87      	ldr	r3, [pc, #540]	; (80031e8 <sampling+0x1168>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	ee07 3a90 	vmov	s15, r3
 8002fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fd4:	4b85      	ldr	r3, [pc, #532]	; (80031ec <sampling+0x116c>)
 8002fd6:	edc3 7a01 	vstr	s15, [r3, #4]
		filter_accus[1]=filter_accus[1]-(filter_accus[3]*filter_res[0]);
 8002fda:	4b84      	ldr	r3, [pc, #528]	; (80031ec <sampling+0x116c>)
 8002fdc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fe0:	4b82      	ldr	r3, [pc, #520]	; (80031ec <sampling+0x116c>)
 8002fe2:	edd3 6a03 	vldr	s13, [r3, #12]
 8002fe6:	4b7f      	ldr	r3, [pc, #508]	; (80031e4 <sampling+0x1164>)
 8002fe8:	edd3 7a00 	vldr	s15, [r3]
 8002fec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ff4:	4b7d      	ldr	r3, [pc, #500]	; (80031ec <sampling+0x116c>)
 8002ff6:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);      //short=fast , adding makes it slower
 8002ffa:	4b7c      	ldr	r3, [pc, #496]	; (80031ec <sampling+0x116c>)
 8002ffc:	ed93 7a01 	vldr	s14, [r3, #4]
 8003000:	4b77      	ldr	r3, [pc, #476]	; (80031e0 <sampling+0x1160>)
 8003002:	edd3 7a00 	vldr	s15, [r3]
 8003006:	ee27 7a27 	vmul.f32	s14, s14, s15
 800300a:	4b78      	ldr	r3, [pc, #480]	; (80031ec <sampling+0x116c>)
 800300c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003010:	4b73      	ldr	r3, [pc, #460]	; (80031e0 <sampling+0x1160>)
 8003012:	edd3 7a01 	vldr	s15, [r3, #4]
 8003016:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800301a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800301e:	4b73      	ldr	r3, [pc, #460]	; (80031ec <sampling+0x116c>)
 8003020:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);			// int32 after conversions is no quicker
 8003024:	4b71      	ldr	r3, [pc, #452]	; (80031ec <sampling+0x116c>)
 8003026:	ed93 7a02 	vldr	s14, [r3, #8]
 800302a:	4b6d      	ldr	r3, [pc, #436]	; (80031e0 <sampling+0x1160>)
 800302c:	edd3 7a00 	vldr	s15, [r3]
 8003030:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003034:	4b6d      	ldr	r3, [pc, #436]	; (80031ec <sampling+0x116c>)
 8003036:	edd3 6a03 	vldr	s13, [r3, #12]
 800303a:	4b69      	ldr	r3, [pc, #420]	; (80031e0 <sampling+0x1160>)
 800303c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003048:	4b68      	ldr	r3, [pc, #416]	; (80031ec <sampling+0x116c>)
 800304a:	edc3 7a03 	vstr	s15, [r3, #12]
		sample_Accu[0]=filter_accus[3];
 800304e:	4b67      	ldr	r3, [pc, #412]	; (80031ec <sampling+0x116c>)
 8003050:	edd3 7a03 	vldr	s15, [r3, #12]
 8003054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003058:	ee17 2a90 	vmov	r2, s15
 800305c:	4b62      	ldr	r3, [pc, #392]	; (80031e8 <sampling+0x1168>)
 800305e:	601a      	str	r2, [r3, #0]

	//	sample_Accu[3]=play_holder2[i] >>5;
		filter_accus[4]=sample_Accu[1];
 8003060:	4b61      	ldr	r3, [pc, #388]	; (80031e8 <sampling+0x1168>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	ee07 3a90 	vmov	s15, r3
 8003068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800306c:	4b5f      	ldr	r3, [pc, #380]	; (80031ec <sampling+0x116c>)
 800306e:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[4]=filter_accus[4]-(filter_accus[6]*filter_res[1]);
 8003072:	4b5e      	ldr	r3, [pc, #376]	; (80031ec <sampling+0x116c>)
 8003074:	ed93 7a04 	vldr	s14, [r3, #16]
 8003078:	4b5c      	ldr	r3, [pc, #368]	; (80031ec <sampling+0x116c>)
 800307a:	edd3 6a06 	vldr	s13, [r3, #24]
 800307e:	4b59      	ldr	r3, [pc, #356]	; (80031e4 <sampling+0x1164>)
 8003080:	edd3 7a01 	vldr	s15, [r3, #4]
 8003084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800308c:	4b57      	ldr	r3, [pc, #348]	; (80031ec <sampling+0x116c>)
 800308e:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[2])+(filter_accus[5]*freq_point[3]);   // 30 cyles for 2 poles
 8003092:	4b56      	ldr	r3, [pc, #344]	; (80031ec <sampling+0x116c>)
 8003094:	ed93 7a04 	vldr	s14, [r3, #16]
 8003098:	4b51      	ldr	r3, [pc, #324]	; (80031e0 <sampling+0x1160>)
 800309a:	edd3 7a02 	vldr	s15, [r3, #8]
 800309e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030a2:	4b52      	ldr	r3, [pc, #328]	; (80031ec <sampling+0x116c>)
 80030a4:	edd3 6a05 	vldr	s13, [r3, #20]
 80030a8:	4b4d      	ldr	r3, [pc, #308]	; (80031e0 <sampling+0x1160>)
 80030aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80030ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030b6:	4b4d      	ldr	r3, [pc, #308]	; (80031ec <sampling+0x116c>)
 80030b8:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_accus[6]=(filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]);
 80030bc:	4b4b      	ldr	r3, [pc, #300]	; (80031ec <sampling+0x116c>)
 80030be:	ed93 7a05 	vldr	s14, [r3, #20]
 80030c2:	4b47      	ldr	r3, [pc, #284]	; (80031e0 <sampling+0x1160>)
 80030c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80030c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030cc:	4b47      	ldr	r3, [pc, #284]	; (80031ec <sampling+0x116c>)
 80030ce:	edd3 6a06 	vldr	s13, [r3, #24]
 80030d2:	4b43      	ldr	r3, [pc, #268]	; (80031e0 <sampling+0x1160>)
 80030d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80030d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e0:	4b42      	ldr	r3, [pc, #264]	; (80031ec <sampling+0x116c>)
 80030e2:	edc3 7a06 	vstr	s15, [r3, #24]
		sample_Accu[1]=filter_accus[6];
 80030e6:	4b41      	ldr	r3, [pc, #260]	; (80031ec <sampling+0x116c>)
 80030e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80030ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030f0:	ee17 2a90 	vmov	r2, s15
 80030f4:	4b3c      	ldr	r3, [pc, #240]	; (80031e8 <sampling+0x1168>)
 80030f6:	605a      	str	r2, [r3, #4]

		filter_accus[7]=sample_Accu[2];
 80030f8:	4b3b      	ldr	r3, [pc, #236]	; (80031e8 <sampling+0x1168>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	ee07 3a90 	vmov	s15, r3
 8003100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003104:	4b39      	ldr	r3, [pc, #228]	; (80031ec <sampling+0x116c>)
 8003106:	edc3 7a07 	vstr	s15, [r3, #28]
		filter_accus[7]=filter_accus[7]-(filter_accus[9]*filter_res[2]);  // resonance
 800310a:	4b38      	ldr	r3, [pc, #224]	; (80031ec <sampling+0x116c>)
 800310c:	ed93 7a07 	vldr	s14, [r3, #28]
 8003110:	4b36      	ldr	r3, [pc, #216]	; (80031ec <sampling+0x116c>)
 8003112:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003116:	4b33      	ldr	r3, [pc, #204]	; (80031e4 <sampling+0x1164>)
 8003118:	edd3 7a02 	vldr	s15, [r3, #8]
 800311c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003124:	4b31      	ldr	r3, [pc, #196]	; (80031ec <sampling+0x116c>)
 8003126:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[4])+(filter_accus[8]*freq_point[5]);   // 30 cyles for 2 poles
 800312a:	4b30      	ldr	r3, [pc, #192]	; (80031ec <sampling+0x116c>)
 800312c:	ed93 7a07 	vldr	s14, [r3, #28]
 8003130:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <sampling+0x1160>)
 8003132:	edd3 7a04 	vldr	s15, [r3, #16]
 8003136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800313a:	4b2c      	ldr	r3, [pc, #176]	; (80031ec <sampling+0x116c>)
 800313c:	edd3 6a08 	vldr	s13, [r3, #32]
 8003140:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <sampling+0x1160>)
 8003142:	edd3 7a05 	vldr	s15, [r3, #20]
 8003146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800314a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800314e:	4b27      	ldr	r3, [pc, #156]	; (80031ec <sampling+0x116c>)
 8003150:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]);
 8003154:	4b25      	ldr	r3, [pc, #148]	; (80031ec <sampling+0x116c>)
 8003156:	ed93 7a08 	vldr	s14, [r3, #32]
 800315a:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <sampling+0x1160>)
 800315c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003160:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003164:	4b21      	ldr	r3, [pc, #132]	; (80031ec <sampling+0x116c>)
 8003166:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800316a:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <sampling+0x1160>)
 800316c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003170:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003178:	4b1c      	ldr	r3, [pc, #112]	; (80031ec <sampling+0x116c>)
 800317a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				sample_Accu[2]=filter_accus[9];
 800317e:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <sampling+0x116c>)
 8003180:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003188:	ee17 2a90 	vmov	r2, s15
 800318c:	4b16      	ldr	r3, [pc, #88]	; (80031e8 <sampling+0x1168>)
 800318e:	609a      	str	r2, [r3, #8]

				filter_accus[10]=sample_Accu[3];
 8003190:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <sampling+0x1168>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	ee07 3a90 	vmov	s15, r3
 8003198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800319c:	4b13      	ldr	r3, [pc, #76]	; (80031ec <sampling+0x116c>)
 800319e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_accus[10]=filter_accus[10]-(filter_accus[12]*filter_res[3]);
 80031a2:	4b12      	ldr	r3, [pc, #72]	; (80031ec <sampling+0x116c>)
 80031a4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80031a8:	4b10      	ldr	r3, [pc, #64]	; (80031ec <sampling+0x116c>)
 80031aa:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80031ae:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <sampling+0x1164>)
 80031b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80031b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <sampling+0x116c>)
 80031be:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
						filter_accus[11]=(filter_accus[10]*freq_point[6])+(filter_accus[11]*freq_point[7]);   // 30 cyles for 2 poles
 80031c2:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <sampling+0x116c>)
 80031c4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <sampling+0x1160>)
 80031ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80031ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031d2:	e00d      	b.n	80031f0 <sampling+0x1170>
 80031d4:	f3af 8000 	nop.w
 80031d8:	9999999a 	.word	0x9999999a
 80031dc:	3fc99999 	.word	0x3fc99999
 80031e0:	20002408 	.word	0x20002408
 80031e4:	200023b8 	.word	0x200023b8
 80031e8:	20000738 	.word	0x20000738
 80031ec:	200023cc 	.word	0x200023cc
 80031f0:	4b59      	ldr	r3, [pc, #356]	; (8003358 <sampling+0x12d8>)
 80031f2:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80031f6:	4b59      	ldr	r3, [pc, #356]	; (800335c <sampling+0x12dc>)
 80031f8:	edd3 7a07 	vldr	s15, [r3, #28]
 80031fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003204:	4b54      	ldr	r3, [pc, #336]	; (8003358 <sampling+0x12d8>)
 8003206:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
						filter_accus[12]=(filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]);
 800320a:	4b53      	ldr	r3, [pc, #332]	; (8003358 <sampling+0x12d8>)
 800320c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003210:	4b52      	ldr	r3, [pc, #328]	; (800335c <sampling+0x12dc>)
 8003212:	edd3 7a06 	vldr	s15, [r3, #24]
 8003216:	ee27 7a27 	vmul.f32	s14, s14, s15
 800321a:	4b4f      	ldr	r3, [pc, #316]	; (8003358 <sampling+0x12d8>)
 800321c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8003220:	4b4e      	ldr	r3, [pc, #312]	; (800335c <sampling+0x12dc>)
 8003222:	edd3 7a07 	vldr	s15, [r3, #28]
 8003226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800322a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800322e:	4b4a      	ldr	r3, [pc, #296]	; (8003358 <sampling+0x12d8>)
 8003230:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
						sample_Accu[3]=filter_accus[12];
 8003234:	4b48      	ldr	r3, [pc, #288]	; (8003358 <sampling+0x12d8>)
 8003236:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800323a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800323e:	ee17 2a90 	vmov	r2, s15
 8003242:	4b47      	ldr	r3, [pc, #284]	; (8003360 <sampling+0x12e0>)
 8003244:	60da      	str	r2, [r3, #12]
	//	sample_Accu[0] =filter_accus[5]; // out
	//	filter_accus[11]=filter_accus[5]; //write back new value
		//sample_Accu[0] =sample_Accu[1];


filter_Accu=filter_Accu2=0;
 8003246:	2300      	movs	r3, #0
 8003248:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800324c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003250:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
filter_Accu=(sample_Accu[0]+sample_Accu[1])>>11;
 8003254:	4b42      	ldr	r3, [pc, #264]	; (8003360 <sampling+0x12e0>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4b41      	ldr	r3, [pc, #260]	; (8003360 <sampling+0x12e0>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4413      	add	r3, r2
 800325e:	12db      	asrs	r3, r3, #11
 8003260:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
filter_Accu2=(sample_Accu[2]+sample_Accu[3])>>11; //filter + drum out
 8003264:	4b3e      	ldr	r3, [pc, #248]	; (8003360 <sampling+0x12e0>)
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	4b3d      	ldr	r3, [pc, #244]	; (8003360 <sampling+0x12e0>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4413      	add	r3, r2
 800326e:	12db      	asrs	r3, r3, #11
 8003270:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8003274:	4b3b      	ldr	r3, [pc, #236]	; (8003364 <sampling+0x12e4>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2bc7      	cmp	r3, #199	; 0xc7
 800327a:	d005      	beq.n	8003288 <sampling+0x1208>
 800327c:	4b39      	ldr	r3, [pc, #228]	; (8003364 <sampling+0x12e4>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	3301      	adds	r3, #1
 8003282:	b2da      	uxtb	r2, r3
 8003284:	4b37      	ldr	r3, [pc, #220]	; (8003364 <sampling+0x12e4>)
 8003286:	701a      	strb	r2, [r3, #0]

 //if (filter_Accu>0xFFFF) {filter_Accu=0xFFFF;clipping++;} else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 if (filter_Accu>0x3FF) {filter_Accu=0x3FF;clipping++;} else if (filter_Accu<-1023) filter_Accu=-1023;  // limiter to 11 bits
 8003288:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800328c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003290:	db0a      	blt.n	80032a8 <sampling+0x1228>
 8003292:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003296:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800329a:	4b33      	ldr	r3, [pc, #204]	; (8003368 <sampling+0x12e8>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	3301      	adds	r3, #1
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	4b31      	ldr	r3, [pc, #196]	; (8003368 <sampling+0x12e8>)
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	e007      	b.n	80032b8 <sampling+0x1238>
 80032a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032ac:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 80032b0:	dc02      	bgt.n	80032b8 <sampling+0x1238>
 80032b2:	4b2e      	ldr	r3, [pc, #184]	; (800336c <sampling+0x12ec>)
 80032b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 if (filter_Accu2>0x3FF) {filter_Accu2=0x3FF;clipping++;} else if (filter_Accu2<-1023) filter_Accu2=-1023;  // limiter to 11 bits
 80032b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c0:	db0a      	blt.n	80032d8 <sampling+0x1258>
 80032c2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80032c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032ca:	4b27      	ldr	r3, [pc, #156]	; (8003368 <sampling+0x12e8>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	3301      	adds	r3, #1
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	4b25      	ldr	r3, [pc, #148]	; (8003368 <sampling+0x12e8>)
 80032d4:	701a      	strb	r2, [r3, #0]
 80032d6:	e007      	b.n	80032e8 <sampling+0x1268>
 80032d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032dc:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 80032e0:	dc02      	bgt.n	80032e8 <sampling+0x1268>
 80032e2:	4b22      	ldr	r3, [pc, #136]	; (800336c <sampling+0x12ec>)
 80032e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90



 play_sample[(i_total<<1)]=(filter_Accu)+1023;   // final output disable for now 2544
 80032e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80032f8:	b291      	uxth	r1, r2
 80032fa:	4a1d      	ldr	r2, [pc, #116]	; (8003370 <sampling+0x12f0>)
 80032fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 play_sample[(i_total<<1)+1]=(filter_Accu2)+1023;
 8003300:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003304:	b29a      	uxth	r2, r3
 8003306:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	3301      	adds	r3, #1
 800330e:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8003312:	b291      	uxth	r1, r2
 8003314:	4a16      	ldr	r2, [pc, #88]	; (8003370 <sampling+0x12f0>)
 8003316:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 800331a:	4b16      	ldr	r3, [pc, #88]	; (8003374 <sampling+0x12f4>)
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	3301      	adds	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	4b14      	ldr	r3, [pc, #80]	; (8003374 <sampling+0x12f4>)
 8003324:	801a      	strh	r2, [r3, #0]
 8003326:	4b13      	ldr	r3, [pc, #76]	; (8003374 <sampling+0x12f4>)
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800332e:	f4ff accd 	bcc.w	8002ccc <sampling+0xc4c>
} // end of filer


//time_final=time_proc;   // in samples

if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 8003332:	4b11      	ldr	r3, [pc, #68]	; (8003378 <sampling+0x12f8>)
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d005      	beq.n	8003346 <sampling+0x12c6>
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <sampling+0x12fc>)
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	3301      	adds	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	4b0e      	ldr	r3, [pc, #56]	; (800337c <sampling+0x12fc>)
 8003344:	801a      	strh	r2, [r3, #0]
time_final[0]=time_proc;
 8003346:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <sampling+0x1300>)
 8003348:	881a      	ldrh	r2, [r3, #0]
 800334a:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <sampling+0x1304>)
 800334c:	801a      	strh	r2, [r3, #0]


//bank_write=0;   /// total 320 sample time (39khz)
}
 800334e:	bf00      	nop
 8003350:	37a0      	adds	r7, #160	; 0xa0
 8003352:	46bd      	mov	sp, r7
 8003354:	bdb0      	pop	{r4, r5, r7, pc}
 8003356:	bf00      	nop
 8003358:	200023cc 	.word	0x200023cc
 800335c:	20002408 	.word	0x20002408
 8003360:	20000738 	.word	0x20000738
 8003364:	2000238c 	.word	0x2000238c
 8003368:	20006518 	.word	0x20006518
 800336c:	fffffc01 	.word	0xfffffc01
 8003370:	2000075c 	.word	0x2000075c
 8003374:	20000758 	.word	0x20000758
 8003378:	200001b2 	.word	0x200001b2
 800337c:	200032fe 	.word	0x200032fe
 8003380:	200032fc 	.word	0x200032fc
 8003384:	200032f8 	.word	0x200032f8

08003388 <sine_count>:
mask_result=mask_tempB &1;


}

void sine_count(void) {         // sine_out is the output 9  bit  , works
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
	int32_t sine_tempA;
	int32_t sine_tempB;
	int8_t sine_frac;


	sine_counter=(sine_counterB>>5);  // up countr controlled by counter
 800338e:	4b28      	ldr	r3, [pc, #160]	; (8003430 <sine_count+0xa8>)
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	b29a      	uxth	r2, r3
 8003396:	4b27      	ldr	r3, [pc, #156]	; (8003434 <sine_count+0xac>)
 8003398:	801a      	strh	r2, [r3, #0]
		if (sine_counter>sine_length) sine_counter = sine_length;		// seems to be faster than using a for loop to calculate both values
 800339a:	4b26      	ldr	r3, [pc, #152]	; (8003434 <sine_count+0xac>)
 800339c:	881a      	ldrh	r2, [r3, #0]
 800339e:	4b26      	ldr	r3, [pc, #152]	; (8003438 <sine_count+0xb0>)
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d903      	bls.n	80033ae <sine_count+0x26>
 80033a6:	4b24      	ldr	r3, [pc, #144]	; (8003438 <sine_count+0xb0>)
 80033a8:	881a      	ldrh	r2, [r3, #0]
 80033aa:	4b22      	ldr	r3, [pc, #136]	; (8003434 <sine_count+0xac>)
 80033ac:	801a      	strh	r2, [r3, #0]
		sine_out = sine_block[sine_counter];  // 0- 40000
 80033ae:	4b21      	ldr	r3, [pc, #132]	; (8003434 <sine_count+0xac>)
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	4b21      	ldr	r3, [pc, #132]	; (800343c <sine_count+0xb4>)
 80033b6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80033ba:	461a      	mov	r2, r3
 80033bc:	4b20      	ldr	r3, [pc, #128]	; (8003440 <sine_count+0xb8>)
 80033be:	601a      	str	r2, [r3, #0]
		sine_tempA=sine_out; // grab first value , needs to be always plus
 80033c0:	4b1f      	ldr	r3, [pc, #124]	; (8003440 <sine_count+0xb8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	607b      	str	r3, [r7, #4]
		sine_tempA=sine_tempA-20000; //convert to signed
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 80033cc:	3b20      	subs	r3, #32
 80033ce:	607b      	str	r3, [r7, #4]

		sine_counter++;
 80033d0:	4b18      	ldr	r3, [pc, #96]	; (8003434 <sine_count+0xac>)
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	3301      	adds	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	4b16      	ldr	r3, [pc, #88]	; (8003434 <sine_count+0xac>)
 80033da:	801a      	strh	r2, [r3, #0]
		if (sine_counter>=sine_length)  sine_counter=0; // set to sample length
 80033dc:	4b15      	ldr	r3, [pc, #84]	; (8003434 <sine_count+0xac>)
 80033de:	881a      	ldrh	r2, [r3, #0]
 80033e0:	4b15      	ldr	r3, [pc, #84]	; (8003438 <sine_count+0xb0>)
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d302      	bcc.n	80033ee <sine_count+0x66>
 80033e8:	4b12      	ldr	r3, [pc, #72]	; (8003434 <sine_count+0xac>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	801a      	strh	r2, [r3, #0]
				sine_tempB=sine_block[sine_counter]-20000;  // convert to signed and +256 to -256
 80033ee:	4b11      	ldr	r3, [pc, #68]	; (8003434 <sine_count+0xac>)
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <sine_count+0xb4>)
 80033f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80033fa:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 80033fe:	3b20      	subs	r3, #32
 8003400:	603b      	str	r3, [r7, #0]
				sine_tempB=	((sine_tempB-sine_tempA)>>5)*(sine_counterB & 31);   // calculate fraction then add
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	115b      	asrs	r3, r3, #5
 800340a:	4a09      	ldr	r2, [pc, #36]	; (8003430 <sine_count+0xa8>)
 800340c:	8812      	ldrh	r2, [r2, #0]
 800340e:	f002 021f 	and.w	r2, r2, #31
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	603b      	str	r3, [r7, #0]
				sine_out=(sine_tempA+sine_tempB);   // add back to start value -20k-20k  or about 16bit
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	4413      	add	r3, r2
 800341e:	4a08      	ldr	r2, [pc, #32]	; (8003440 <sine_count+0xb8>)
 8003420:	6013      	str	r3, [r2, #0]


	}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20000722 	.word	0x20000722
 8003434:	20000720 	.word	0x20000720
 8003438:	20000142 	.word	0x20000142
 800343c:	0800b80c 	.word	0x0800b80c
 8003440:	20000724 	.word	0x20000724
 8003444:	00000000 	.word	0x00000000

08003448 <LFO_source>:


void LFO_source(void){     // lfo
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b08b      	sub	sp, #44	; 0x2c
 800344c:	af00      	add	r7, sp, #0


float	freq_temp=0;
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	613b      	str	r3, [r7, #16]
float 	freq2_temp=0;
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
uint32_t 	freq_saw=0;
 800345a:	2300      	movs	r3, #0
 800345c:	623b      	str	r3, [r7, #32]
uint8_t lfo_c ;
float offset=0;
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
	uint32_t freq3_temp;
	uint32_t freq4_temp;
	int16_t  output_hold;
	int32_t freq_tri;

	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003464:	2300      	movs	r3, #0
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	e140      	b.n	80036ec <LFO_source+0x2a4>



	lfo_accu_temp=	lfo_accu[lfo_c][sampling_position_b];  // hold
 800346a:	7ffa      	ldrb	r2, [r7, #31]
 800346c:	4ba6      	ldr	r3, [pc, #664]	; (8003708 <LFO_source+0x2c0>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	49a6      	ldr	r1, [pc, #664]	; (800370c <LFO_source+0x2c4>)
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4403      	add	r3, r0
 800347e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003482:	61bb      	str	r3, [r7, #24]

	freq3_temp=lfo_tempo_lut[LFO[lfo_c].rate] ;  // rate. this needs a little log
 8003484:	7ffa      	ldrb	r2, [r7, #31]
 8003486:	49a2      	ldr	r1, [pc, #648]	; (8003710 <LFO_source+0x2c8>)
 8003488:	4613      	mov	r3, r2
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	4b9f      	ldr	r3, [pc, #636]	; (8003714 <LFO_source+0x2cc>)
 8003498:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800349c:	60bb      	str	r3, [r7, #8]
		//freq4_temp=freq3_temp*freq3_temp;  // multiply  , dont more then 8000 really


			freq3_temp=lfo_accu_temp+ freq3_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	4413      	add	r3, r2
 80034a4:	60bb      	str	r3, [r7, #8]


///  counts from -16k to +16 k   @ + 0.03125      to   +400    *10    or 13 ms *8 (10 hz ? fastest  )
		if (freq3_temp>62831) lfo_accu_temp=0; else lfo_accu_temp=freq3_temp; // write back value  counts -16000 to +16000
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f24f 526f 	movw	r2, #62831	; 0xf56f
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d902      	bls.n	80034b6 <LFO_source+0x6e>
 80034b0:	2300      	movs	r3, #0
 80034b2:	61bb      	str	r3, [r7, #24]
 80034b4:	e001      	b.n	80034ba <LFO_source+0x72>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	61bb      	str	r3, [r7, #24]
		if(!seq.pos)  lfo_accu_temp=0;   // tempo sync, mediocre
 80034ba:	4b97      	ldr	r3, [pc, #604]	; (8003718 <LFO_source+0x2d0>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <LFO_source+0x7e>
 80034c2:	2300      	movs	r3, #0
 80034c4:	61bb      	str	r3, [r7, #24]
		lfo_accu[lfo_c][sampling_position]=lfo_accu_temp;
 80034c6:	7ffa      	ldrb	r2, [r7, #31]
 80034c8:	4b94      	ldr	r3, [pc, #592]	; (800371c <LFO_source+0x2d4>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	498f      	ldr	r1, [pc, #572]	; (800370c <LFO_source+0x2c4>)
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4403      	add	r3, r0
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		freq_temp=lfo_accu_temp;
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ea:	edc7 7a04 	vstr	s15, [r7, #16]
		freq2_temp=(freq_temp*0.0001);  //0-360
 80034ee:	6938      	ldr	r0, [r7, #16]
 80034f0:	f7fd f908 	bl	8000704 <__aeabi_f2d>
 80034f4:	a382      	add	r3, pc, #520	; (adr r3, 8003700 <LFO_source+0x2b8>)
 80034f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fa:	f7fc fe75 	bl	80001e8 <__aeabi_dmul>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4610      	mov	r0, r2
 8003504:	4619      	mov	r1, r3
 8003506:	f7fd f955 	bl	80007b4 <__aeabi_d2f>
 800350a:	4603      	mov	r3, r0
 800350c:	627b      	str	r3, [r7, #36]	; 0x24

		freq_temp =arm_sin_f32(freq2_temp); // seems ok   , cmsis is ok  RADIANS !!!!!
 800350e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003512:	f007 fb6d 	bl	800abf0 <arm_sin_f32>
 8003516:	ed87 0a04 	vstr	s0, [r7, #16]
		freq2_temp=freq_temp*LFO[lfo_c].depth*204;
 800351a:	7ffa      	ldrb	r2, [r7, #31]
 800351c:	497c      	ldr	r1, [pc, #496]	; (8003710 <LFO_source+0x2c8>)
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	3301      	adds	r3, #1
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	ee07 3a90 	vmov	s15, r3
 8003530:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003534:	edd7 7a04 	vldr	s15, [r7, #16]
 8003538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800353c:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8003720 <LFO_source+0x2d8>
 8003540:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003544:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		if (!LFO[lfo_c].offset)    LFO[lfo_c].offset=0;   // se
 8003548:	7ffa      	ldrb	r2, [r7, #31]
 800354a:	4971      	ldr	r1, [pc, #452]	; (8003710 <LFO_source+0x2c8>)
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	3303      	adds	r3, #3
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <LFO_source+0x12a>
 800355e:	7ffa      	ldrb	r2, [r7, #31]
 8003560:	496b      	ldr	r1, [pc, #428]	; (8003710 <LFO_source+0x2c8>)
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	3303      	adds	r3, #3
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
 8003572:	7ffa      	ldrb	r2, [r7, #31]
 8003574:	4966      	ldr	r1, [pc, #408]	; (8003710 <LFO_source+0x2c8>)
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	3303      	adds	r3, #3
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	021b      	lsls	r3, r3, #8
 8003586:	ee07 3a90 	vmov	s15, r3
 800358a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800358e:	edc7 7a03 	vstr	s15, [r7, #12]
			freq2_temp=(freq2_temp+offset);
 8003592:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003596:	edd7 7a03 	vldr	s15, [r7, #12]
 800359a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800359e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		if (freq2_temp>32767)  freq2_temp=32767;
 80035a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80035a6:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8003724 <LFO_source+0x2dc>
 80035aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b2:	dd01      	ble.n	80035b8 <LFO_source+0x170>
 80035b4:	4b5c      	ldr	r3, [pc, #368]	; (8003728 <LFO_source+0x2e0>)
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
		if (freq2_temp<-32767) {  freq2_temp=-32767; }  // clip to 13bit -/+ 8000
 80035b8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80035bc:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800372c <LFO_source+0x2e4>
 80035c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c8:	d501      	bpl.n	80035ce <LFO_source+0x186>
 80035ca:	4b59      	ldr	r3, [pc, #356]	; (8003730 <LFO_source+0x2e8>)
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24

						output_hold=freq2_temp;
 80035ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80035d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035d6:	ee17 3a90 	vmov	r3, s15
 80035da:	80fb      	strh	r3, [r7, #6]
						if(lfo_accu_temp<32768)   freq_tri=lfo_accu_temp; else freq_tri=65535-lfo_accu_temp;    // 0-32767
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e2:	d202      	bcs.n	80035ea <LFO_source+0x1a2>
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	e004      	b.n	80035f4 <LFO_source+0x1ac>
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80035f0:	33ff      	adds	r3, #255	; 0xff
 80035f2:	617b      	str	r3, [r7, #20]
					freq_saw=((lfo_accu_temp*LFO[lfo_c].depth)>>8)+offset;
 80035f4:	7ffa      	ldrb	r2, [r7, #31]
 80035f6:	4946      	ldr	r1, [pc, #280]	; (8003710 <LFO_source+0x2c8>)
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	3301      	adds	r3, #1
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	0a1b      	lsrs	r3, r3, #8
 8003610:	ee07 3a90 	vmov	s15, r3
 8003614:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003618:	edd7 7a03 	vldr	s15, [r7, #12]
 800361c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003624:	ee17 3a90 	vmov	r3, s15
 8003628:	623b      	str	r3, [r7, #32]
					if (freq_saw>65535)  freq_saw=65535;   // clip
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003630:	d302      	bcc.n	8003638 <LFO_source+0x1f0>
 8003632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003636:	623b      	str	r3, [r7, #32]

					LFO[lfo_c].out[sampling_position]=output_hold+32767;
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	7ffa      	ldrb	r2, [r7, #31]
 800363c:	4937      	ldr	r1, [pc, #220]	; (800371c <LFO_source+0x2d4>)
 800363e:	7809      	ldrb	r1, [r1, #0]
 8003640:	460c      	mov	r4, r1
 8003642:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003646:	337f      	adds	r3, #127	; 0x7f
 8003648:	b298      	uxth	r0, r3
 800364a:	4931      	ldr	r1, [pc, #196]	; (8003710 <LFO_source+0x2c8>)
 800364c:	4613      	mov	r3, r2
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	4413      	add	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4423      	add	r3, r4
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	440b      	add	r3, r1
 800365a:	4602      	mov	r2, r0
 800365c:	80da      	strh	r2, [r3, #6]
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;
 800365e:	7ffa      	ldrb	r2, [r7, #31]
 8003660:	4b2e      	ldr	r3, [pc, #184]	; (800371c <LFO_source+0x2d4>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	461c      	mov	r4, r3
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	b298      	uxth	r0, r3
 800366a:	4929      	ldr	r1, [pc, #164]	; (8003710 <LFO_source+0x2c8>)
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	4413      	add	r3, r2
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	4423      	add	r3, r4
 8003676:	330c      	adds	r3, #12
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	440b      	add	r3, r1
 800367c:	4602      	mov	r2, r0
 800367e:	805a      	strh	r2, [r3, #2]

				   freq_tri=((freq_tri*LFO[lfo_c].depth)>>7)+offset;
 8003680:	7ffa      	ldrb	r2, [r7, #31]
 8003682:	4923      	ldr	r1, [pc, #140]	; (8003710 <LFO_source+0x2c8>)
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	3301      	adds	r3, #1
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	11db      	asrs	r3, r3, #7
 800369c:	ee07 3a90 	vmov	s15, r3
 80036a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80036a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036b0:	ee17 3a90 	vmov	r3, s15
 80036b4:	617b      	str	r3, [r7, #20]
				   if (freq_tri>65535)  freq_tri=65535;   // clip
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036bc:	db02      	blt.n	80036c4 <LFO_source+0x27c>
 80036be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036c2:	617b      	str	r3, [r7, #20]
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 80036c4:	7ffa      	ldrb	r2, [r7, #31]
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <LFO_source+0x2d4>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	461c      	mov	r4, r3
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	b298      	uxth	r0, r3
 80036d0:	490f      	ldr	r1, [pc, #60]	; (8003710 <LFO_source+0x2c8>)
 80036d2:	4613      	mov	r3, r2
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	4413      	add	r3, r2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	4423      	add	r3, r4
 80036dc:	3314      	adds	r3, #20
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	440b      	add	r3, r1
 80036e2:	4602      	mov	r2, r0
 80036e4:	80da      	strh	r2, [r3, #6]
	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 80036e6:	7ffb      	ldrb	r3, [r7, #31]
 80036e8:	3301      	adds	r3, #1
 80036ea:	77fb      	strb	r3, [r7, #31]
 80036ec:	7ffb      	ldrb	r3, [r7, #31]
 80036ee:	2b09      	cmp	r3, #9
 80036f0:	f67f aebb 	bls.w	800346a <LFO_source+0x22>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch



	}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	372c      	adds	r7, #44	; 0x2c
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd90      	pop	{r4, r7, pc}
 80036fe:	bf00      	nop
 8003700:	eb1c432d 	.word	0xeb1c432d
 8003704:	3f1a36e2 	.word	0x3f1a36e2
 8003708:	20004515 	.word	0x20004515
 800370c:	200024bc 	.word	0x200024bc
 8003710:	20003300 	.word	0x20003300
 8003714:	2000284c 	.word	0x2000284c
 8003718:	20004034 	.word	0x20004034
 800371c:	20004514 	.word	0x20004514
 8003720:	434c0000 	.word	0x434c0000
 8003724:	46fffe00 	.word	0x46fffe00
 8003728:	46fffe00 	.word	0x46fffe00
 800372c:	c6fffe00 	.word	0xc6fffe00
 8003730:	c6fffe00 	.word	0xc6fffe00
 8003734:	00000000 	.word	0x00000000

08003738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003738:	b5b0      	push	{r4, r5, r7, lr}
 800373a:	b0a4      	sub	sp, #144	; 0x90
 800373c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800373e:	f001 fc69 	bl	8005014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003742:	f000 fd43 	bl	80041cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003746:	f001 f879 	bl	800483c <MX_GPIO_Init>
  MX_DMA_Init();
 800374a:	f001 f857 	bl	80047fc <MX_DMA_Init>
  MX_ADC1_Init();
 800374e:	f000 fda7 	bl	80042a0 <MX_ADC1_Init>
  MX_SPI2_Init();
 8003752:	f000 fe9f 	bl	8004494 <MX_SPI2_Init>
  MX_TIM3_Init();
 8003756:	f000 ff27 	bl	80045a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800375a:	f000 ffa7 	bl	80046ac <MX_TIM4_Init>
  MX_I2C2_Init();
 800375e:	f000 fe35 	bl	80043cc <MX_I2C2_Init>
  MX_TIM2_Init();
 8003762:	f000 fecd 	bl	8004500 <MX_TIM2_Init>
  MX_SPI1_Init();
 8003766:	f000 fe5f 	bl	8004428 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800376a:	f000 fff3 	bl	8004754 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800376e:	f001 f81b 	bl	80047a8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8003772:	4bcd      	ldr	r3, [pc, #820]	; (8003aa8 <main+0x370>)
 8003774:	677b      	str	r3, [r7, #116]	; 0x74



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2); // write to register hspi2
 8003776:	48cd      	ldr	r0, [pc, #820]	; (8003aac <main+0x374>)
 8003778:	f005 f804 	bl	8008784 <HAL_SPI_Init>
  HAL_SPI_Init(&hspi1); // write to register hspi2
 800377c:	48cc      	ldr	r0, [pc, #816]	; (8003ab0 <main+0x378>)
 800377e:	f005 f801 	bl	8008784 <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8003782:	48cc      	ldr	r0, [pc, #816]	; (8003ab4 <main+0x37c>)
 8003784:	f005 fe50 	bl	8009428 <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 8003788:	4bcb      	ldr	r3, [pc, #812]	; (8003ab8 <main+0x380>)
 800378a:	2200      	movs	r2, #0
 800378c:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 800378e:	48cb      	ldr	r0, [pc, #812]	; (8003abc <main+0x384>)
 8003790:	f005 fdf0 	bl	8009374 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 8003794:	48ca      	ldr	r0, [pc, #808]	; (8003ac0 <main+0x388>)
 8003796:	f005 fded 	bl	8009374 <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800379a:	2100      	movs	r1, #0
 800379c:	48c5      	ldr	r0, [pc, #788]	; (8003ab4 <main+0x37c>)
 800379e:	f005 feff 	bl	80095a0 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80037a2:	2104      	movs	r1, #4
 80037a4:	48c3      	ldr	r0, [pc, #780]	; (8003ab4 <main+0x37c>)
 80037a6:	f005 fefb 	bl	80095a0 <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 80037aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037ae:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 80037b4:	48c3      	ldr	r0, [pc, #780]	; (8003ac4 <main+0x38c>)
 80037b6:	f001 fd07 	bl	80051c8 <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 80037ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037be:	49c2      	ldr	r1, [pc, #776]	; (8003ac8 <main+0x390>)
 80037c0:	48c0      	ldr	r0, [pc, #768]	; (8003ac4 <main+0x38c>)
 80037c2:	f001 fe41 	bl	8005448 <HAL_ADC_Start_DMA>
//HAL_DMA_Init(&hdma_spi2_tx);

HAL_I2C_MspInit(&hi2c2);
 80037c6:	48c1      	ldr	r0, [pc, #772]	; (8003acc <main+0x394>)
 80037c8:	f001 f972 	bl	8004ab0 <HAL_I2C_MspInit>
uint8_t send_spi1[5]={0x90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
 80037cc:	4ac0      	ldr	r2, [pc, #768]	; (8003ad0 <main+0x398>)
 80037ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80037d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037d6:	6018      	str	r0, [r3, #0]
 80037d8:	3304      	adds	r3, #4
 80037da:	7019      	strb	r1, [r3, #0]
HAL_SPI_Receive(&hspi1, return_spi1, 2, 1000);   // manuf return sif correct , 0xEF,0x17 which is correct, then repeats when more request

*/


HAL_Delay(5);
 80037dc:	2005      	movs	r0, #5
 80037de:	f001 fc8b 	bl	80050f8 <HAL_Delay>


send_spi1[0]=0x06; //enable write  , only lasts for single operation
 80037e2:	2306      	movs	r3, #6
 80037e4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80037e8:	2200      	movs	r2, #0
 80037ea:	2110      	movs	r1, #16
 80037ec:	48b9      	ldr	r0, [pc, #740]	; (8003ad4 <main+0x39c>)
 80037ee:	f003 fb97 	bl	8006f20 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 80037f2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80037f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037fa:	2201      	movs	r2, #1
 80037fc:	48ac      	ldr	r0, [pc, #688]	; (8003ab0 <main+0x378>)
 80037fe:	f005 f84a 	bl	8008896 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003802:	2201      	movs	r2, #1
 8003804:	2110      	movs	r1, #16
 8003806:	48b3      	ldr	r0, [pc, #716]	; (8003ad4 <main+0x39c>)
 8003808:	f003 fb8a 	bl	8006f20 <HAL_GPIO_WritePin>
HAL_Delay(5);
 800380c:	2005      	movs	r0, #5
 800380e:	f001 fc73 	bl	80050f8 <HAL_Delay>
send_spi1[0]=0x20; //sector erase
 8003812:	2320      	movs	r3, #32
 8003814:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
send_spi1[1]=0; //24bit address msb
 8003818:	2300      	movs	r3, #0
 800381a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
send_spi1[2]=0; //24bit address
 800381e:	2300      	movs	r3, #0
 8003820:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
send_spi1[3]=1; //24bit address lsb
 8003824:	2301      	movs	r3, #1
 8003826:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 800382a:	2200      	movs	r2, #0
 800382c:	2110      	movs	r1, #16
 800382e:	48a9      	ldr	r0, [pc, #676]	; (8003ad4 <main+0x39c>)
 8003830:	f003 fb76 	bl	8006f20 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works
 8003834:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003838:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800383c:	2204      	movs	r2, #4
 800383e:	489c      	ldr	r0, [pc, #624]	; (8003ab0 <main+0x378>)
 8003840:	f005 f829 	bl	8008896 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003844:	2201      	movs	r2, #1
 8003846:	2110      	movs	r1, #16
 8003848:	48a2      	ldr	r0, [pc, #648]	; (8003ad4 <main+0x39c>)
 800384a:	f003 fb69 	bl	8006f20 <HAL_GPIO_WritePin>


send_spi1[0]=0x05; //read status register  if writing
 800384e:	2305      	movs	r3, #5
 8003850:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
send_spi1[1]=0; //24bit address msb
 8003854:	2300      	movs	r3, #0
 8003856:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
status_reg[1]=1; // set busy on
 800385a:	4b9f      	ldr	r3, [pc, #636]	; (8003ad8 <main+0x3a0>)
 800385c:	2201      	movs	r2, #1
 800385e:	705a      	strb	r2, [r3, #1]

while (status_reg[1]&1){								// check if write busy
 8003860:	e012      	b.n	8003888 <main+0x150>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8003862:	2200      	movs	r2, #0
 8003864:	2110      	movs	r1, #16
 8003866:	489b      	ldr	r0, [pc, #620]	; (8003ad4 <main+0x39c>)
 8003868:	f003 fb5a 	bl	8006f20 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 800386c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003870:	23c8      	movs	r3, #200	; 0xc8
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	2302      	movs	r3, #2
 8003876:	4a98      	ldr	r2, [pc, #608]	; (8003ad8 <main+0x3a0>)
 8003878:	488d      	ldr	r0, [pc, #564]	; (8003ab0 <main+0x378>)
 800387a:	f005 fa59 	bl	8008d30 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 800387e:	2201      	movs	r2, #1
 8003880:	2110      	movs	r1, #16
 8003882:	4894      	ldr	r0, [pc, #592]	; (8003ad4 <main+0x39c>)
 8003884:	f003 fb4c 	bl	8006f20 <HAL_GPIO_WritePin>
while (status_reg[1]&1){								// check if write busy
 8003888:	4b93      	ldr	r3, [pc, #588]	; (8003ad8 <main+0x3a0>)
 800388a:	785b      	ldrb	r3, [r3, #1]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e6      	bne.n	8003862 <main+0x12a>
}

send_spi1[0]=0x06; //enable write again
 8003894:	2306      	movs	r3, #6
 8003896:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 800389a:	2200      	movs	r2, #0
 800389c:	2110      	movs	r1, #16
 800389e:	488d      	ldr	r0, [pc, #564]	; (8003ad4 <main+0x39c>)
 80038a0:	f003 fb3e 	bl	8006f20 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 80038a4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80038a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ac:	2201      	movs	r2, #1
 80038ae:	4880      	ldr	r0, [pc, #512]	; (8003ab0 <main+0x378>)
 80038b0:	f004 fff1 	bl	8008896 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80038b4:	2201      	movs	r2, #1
 80038b6:	2110      	movs	r1, #16
 80038b8:	4886      	ldr	r0, [pc, #536]	; (8003ad4 <main+0x39c>)
 80038ba:	f003 fb31 	bl	8006f20 <HAL_GPIO_WritePin>
HAL_Delay(5);
 80038be:	2005      	movs	r0, #5
 80038c0:	f001 fc1a 	bl	80050f8 <HAL_Delay>




//uint8_t temp_spi1[]={0x02,0,0,1,"H","E","L","L","O"," ","W","O","R","L","D",250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
uint8_t temp_spi1[]={0x02,0,0,1,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
 80038c4:	4b85      	ldr	r3, [pc, #532]	; (8003adc <main+0x3a4>)
 80038c6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80038ca:	461d      	mov	r5, r3
 80038cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038d0:	682b      	ldr	r3, [r5, #0]
 80038d2:	8023      	strh	r3, [r4, #0]
memcpy  (send_spi1,temp_spi1, 14);   // copy new array over old
 80038d4:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80038d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80038dc:	220e      	movs	r2, #14
 80038de:	4618      	mov	r0, r3
 80038e0:	f007 f9f8 	bl	800acd4 <memcpy>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80038e4:	2200      	movs	r2, #0
 80038e6:	2110      	movs	r1, #16
 80038e8:	487a      	ldr	r0, [pc, #488]	; (8003ad4 <main+0x39c>)
 80038ea:	f003 fb19 	bl	8006f20 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 14, 1000);  //address,page program
 80038ee:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80038f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038f6:	220e      	movs	r2, #14
 80038f8:	486d      	ldr	r0, [pc, #436]	; (8003ab0 <main+0x378>)
 80038fa:	f004 ffcc 	bl	8008896 <HAL_SPI_Transmit>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80038fe:	2201      	movs	r2, #1
 8003900:	2110      	movs	r1, #16
 8003902:	4874      	ldr	r0, [pc, #464]	; (8003ad4 <main+0x39c>)
 8003904:	f003 fb0c 	bl	8006f20 <HAL_GPIO_WritePin>




HAL_Delay(25);
 8003908:	2019      	movs	r0, #25
 800390a:	f001 fbf5 	bl	80050f8 <HAL_Delay>
send_spi1[0]=0x04; //disable write
 800390e:	2304      	movs	r3, #4
 8003910:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8003914:	2200      	movs	r2, #0
 8003916:	2110      	movs	r1, #16
 8003918:	486e      	ldr	r0, [pc, #440]	; (8003ad4 <main+0x39c>)
 800391a:	f003 fb01 	bl	8006f20 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 800391e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003926:	2201      	movs	r2, #1
 8003928:	4861      	ldr	r0, [pc, #388]	; (8003ab0 <main+0x378>)
 800392a:	f004 ffb4 	bl	8008896 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 800392e:	2201      	movs	r2, #1
 8003930:	2110      	movs	r1, #16
 8003932:	4868      	ldr	r0, [pc, #416]	; (8003ad4 <main+0x39c>)
 8003934:	f003 faf4 	bl	8006f20 <HAL_GPIO_WritePin>

HAL_Delay(5);
 8003938:	2005      	movs	r0, #5
 800393a:	f001 fbdd 	bl	80050f8 <HAL_Delay>
memcpy  (send_spi1,return_spi1, 14);   // clear out
 800393e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003942:	220e      	movs	r2, #14
 8003944:	4966      	ldr	r1, [pc, #408]	; (8003ae0 <main+0x3a8>)
 8003946:	4618      	mov	r0, r3
 8003948:	f007 f9c4 	bl	800acd4 <memcpy>
send_spi1[0]=0x03; //read page 1
 800394c:	2303      	movs	r3, #3
 800394e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
send_spi1[1]=0; //24bit address msb
 8003952:	2300      	movs	r3, #0
 8003954:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
send_spi1[2]=0; //24bit address
 8003958:	2300      	movs	r3, #0
 800395a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
send_spi1[3]=1; //24bit address lsb
 800395e:	2301      	movs	r3, #1
 8003960:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8003964:	2200      	movs	r2, #0
 8003966:	2110      	movs	r1, #16
 8003968:	485a      	ldr	r0, [pc, #360]	; (8003ad4 <main+0x39c>)
 800396a:	f003 fad9 	bl	8006f20 <HAL_GPIO_WritePin>

HAL_SPI_Transmit (&hspi1, send_spi1, 4, 100);
 800396e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003972:	2364      	movs	r3, #100	; 0x64
 8003974:	2204      	movs	r2, #4
 8003976:	484e      	ldr	r0, [pc, #312]	; (8003ab0 <main+0x378>)
 8003978:	f004 ff8d 	bl	8008896 <HAL_SPI_Transmit>
HAL_SPI_Receive (&hspi1, return_spi1, 10, 100);   // works fine
 800397c:	2364      	movs	r3, #100	; 0x64
 800397e:	220a      	movs	r2, #10
 8003980:	4957      	ldr	r1, [pc, #348]	; (8003ae0 <main+0x3a8>)
 8003982:	484b      	ldr	r0, [pc, #300]	; (8003ab0 <main+0x378>)
 8003984:	f005 f8c3 	bl	8008b0e <HAL_SPI_Receive>

//HAL_SPI_TransmitReceive(&hspi1, send_spi1, return_spi1,14, 100);  // better in case skip , 4 bytes is null then data , slow
//HAL_Delay(5);

//HAL_SPI_Receive(&hspi1, return_spi1, 12, 1000);  // reverse msb ?
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003988:	2201      	movs	r2, #1
 800398a:	2110      	movs	r1, #16
 800398c:	4851      	ldr	r0, [pc, #324]	; (8003ad4 <main+0x39c>)
 800398e:	f003 fac7 	bl	8006f20 <HAL_GPIO_WritePin>



HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8003992:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800399a:	2201      	movs	r2, #1
 800399c:	4844      	ldr	r0, [pc, #272]	; (8003ab0 <main+0x378>)
 800399e:	f004 ff7a 	bl	8008896 <HAL_SPI_Transmit>


uint8_t potSource2[64]={0};    // { [0 ... 112] = 64 };
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	f107 0310 	add.w	r3, r7, #16
 80039aa:	223c      	movs	r2, #60	; 0x3c
 80039ac:	2100      	movs	r1, #0
 80039ae:	4618      	mov	r0, r3
 80039b0:	f007 f99e 	bl	800acf0 <memset>
uint16_t mem_count2=0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

HAL_I2C_Mem_Read (&hi2c2,160,64, 2 , potSource, 384,1000); //ok
 80039ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039be:	9302      	str	r3, [sp, #8]
 80039c0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80039c4:	9301      	str	r3, [sp, #4]
 80039c6:	4b47      	ldr	r3, [pc, #284]	; (8003ae4 <main+0x3ac>)
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	2302      	movs	r3, #2
 80039cc:	2240      	movs	r2, #64	; 0x40
 80039ce:	21a0      	movs	r1, #160	; 0xa0
 80039d0:	483e      	ldr	r0, [pc, #248]	; (8003acc <main+0x394>)
 80039d2:	f003 fcfd 	bl	80073d0 <HAL_I2C_Mem_Read>





	uint16_t mem_counter=0;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 80039dc:	4a42      	ldr	r2, [pc, #264]	; (8003ae8 <main+0x3b0>)
 80039de:	4b41      	ldr	r3, [pc, #260]	; (8003ae4 <main+0x3ac>)
 80039e0:	4614      	mov	r4, r2
 80039e2:	461d      	mov	r5, r3
 80039e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80039f0:	c407      	stmia	r4!, {r0, r1, r2}
 80039f2:	8023      	strh	r3, [r4, #0]
    memcpy(&note,potSource+156,112 );   // this works but keep checking for fragmentation
 80039f4:	4b3d      	ldr	r3, [pc, #244]	; (8003aec <main+0x3b4>)
 80039f6:	2270      	movs	r2, #112	; 0x70
 80039f8:	4619      	mov	r1, r3
 80039fa:	483d      	ldr	r0, [pc, #244]	; (8003af0 <main+0x3b8>)
 80039fc:	f007 f96a 	bl	800acd4 <memcpy>

    for(mem_counter=0;mem_counter<10;mem_counter++){
 8003a00:	2300      	movs	r3, #0
 8003a02:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8003a06:	e043      	b.n	8003a90 <main+0x358>

		memcpy(&LFO[mem_counter],potSource+46+(mem_counter*6),6 );  // + 60 ,ok here
 8003a08:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4a37      	ldr	r2, [pc, #220]	; (8003af4 <main+0x3bc>)
 8003a16:	1898      	adds	r0, r3, r2
 8003a18:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	4413      	add	r3, r2
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	332e      	adds	r3, #46	; 0x2e
 8003a26:	4a2f      	ldr	r2, [pc, #188]	; (8003ae4 <main+0x3ac>)
 8003a28:	4413      	add	r3, r2
 8003a2a:	2206      	movs	r2, #6
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f007 f951 	bl	800acd4 <memcpy>

		memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 8003a32:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003a36:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	4a2e      	ldr	r2, [pc, #184]	; (8003af8 <main+0x3c0>)
 8003a40:	1898      	adds	r0, r3, r2
 8003a42:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	336a      	adds	r3, #106	; 0x6a
 8003a4e:	4a25      	ldr	r2, [pc, #148]	; (8003ae4 <main+0x3ac>)
 8003a50:	4413      	add	r3, r2
 8003a52:	2205      	movs	r2, #5
 8003a54:	4619      	mov	r1, r3
 8003a56:	f007 f93d 	bl	800acd4 <memcpy>
		memcpy(&patch[mem_counter],potSource+268+(mem_counter*6),6 );
 8003a5a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003a5e:	4613      	mov	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4a25      	ldr	r2, [pc, #148]	; (8003afc <main+0x3c4>)
 8003a68:	1898      	adds	r0, r3, r2
 8003a6a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003a6e:	4613      	mov	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4413      	add	r3, r2
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003a7a:	4a1a      	ldr	r2, [pc, #104]	; (8003ae4 <main+0x3ac>)
 8003a7c:	4413      	add	r3, r2
 8003a7e:	2206      	movs	r2, #6
 8003a80:	4619      	mov	r1, r3
 8003a82:	f007 f927 	bl	800acd4 <memcpy>
    for(mem_counter=0;mem_counter<10;mem_counter++){
 8003a86:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8003a90:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003a94:	2b09      	cmp	r3, #9
 8003a96:	d9b7      	bls.n	8003a08 <main+0x2d0>
	}


	for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8003a98:	4b19      	ldr	r3, [pc, #100]	; (8003b00 <main+0x3c8>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	801a      	strh	r2, [r3, #0]
 8003a9e:	e087      	b.n	8003bb0 <main+0x478>

	for 	(n=0;n<18;n++){					// this is ok
 8003aa0:	4b18      	ldr	r3, [pc, #96]	; (8003b04 <main+0x3cc>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	801a      	strh	r2, [r3, #0]
 8003aa6:	e079      	b.n	8003b9c <main+0x464>
 8003aa8:	0800d2f0 	.word	0x0800d2f0
 8003aac:	20006a94 	.word	0x20006a94
 8003ab0:	20006a3c 	.word	0x20006a3c
 8003ab4:	20006b34 	.word	0x20006b34
 8003ab8:	40000400 	.word	0x40000400
 8003abc:	20006aec 	.word	0x20006aec
 8003ac0:	20006b7c 	.word	0x20006b7c
 8003ac4:	20006940 	.word	0x20006940
 8003ac8:	2000176c 	.word	0x2000176c
 8003acc:	200069e8 	.word	0x200069e8
 8003ad0:	0800b1f4 	.word	0x0800b1f4
 8003ad4:	40020000 	.word	0x40020000
 8003ad8:	200001b8 	.word	0x200001b8
 8003adc:	0800b1fc 	.word	0x0800b1fc
 8003ae0:	200032e8 	.word	0x200032e8
 8003ae4:	200005a0 	.word	0x200005a0
 8003ae8:	20004034 	.word	0x20004034
 8003aec:	2000063c 	.word	0x2000063c
 8003af0:	200001bc 	.word	0x200001bc
 8003af4:	20003300 	.word	0x20003300
 8003af8:	200035a8 	.word	0x200035a8
 8003afc:	20004064 	.word	0x20004064
 8003b00:	20000758 	.word	0x20000758
 8003b04:	20000734 	.word	0x20000734
		if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 8003b08:	4b9d      	ldr	r3, [pc, #628]	; (8003d80 <main+0x648>)
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d114      	bne.n	8003b3a <main+0x402>
 8003b10:	4b9c      	ldr	r3, [pc, #624]	; (8003d84 <main+0x64c>)
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f003 031f 	and.w	r3, r3, #31
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	4b99      	ldr	r3, [pc, #612]	; (8003d84 <main+0x64c>)
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	4619      	mov	r1, r3
 8003b22:	460b      	mov	r3, r1
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	440b      	add	r3, r1
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4b94      	ldr	r3, [pc, #592]	; (8003d80 <main+0x648>)
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	440b      	add	r3, r1
 8003b32:	3a80      	subs	r2, #128	; 0x80
 8003b34:	b2d1      	uxtb	r1, r2
 8003b36:	4a94      	ldr	r2, [pc, #592]	; (8003d88 <main+0x650>)
 8003b38:	54d1      	strb	r1, [r2, r3]
		if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 8003b3a:	4b91      	ldr	r3, [pc, #580]	; (8003d80 <main+0x648>)
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d114      	bne.n	8003b6c <main+0x434>
 8003b42:	4b90      	ldr	r3, [pc, #576]	; (8003d84 <main+0x64c>)
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3310      	adds	r3, #16
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	4b8d      	ldr	r3, [pc, #564]	; (8003d84 <main+0x64c>)
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	4619      	mov	r1, r3
 8003b54:	460b      	mov	r3, r1
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	440b      	add	r3, r1
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4b88      	ldr	r3, [pc, #544]	; (8003d80 <main+0x648>)
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	440b      	add	r3, r1
 8003b64:	00d2      	lsls	r2, r2, #3
 8003b66:	b2d1      	uxtb	r1, r2
 8003b68:	4a87      	ldr	r2, [pc, #540]	; (8003d88 <main+0x650>)
 8003b6a:	54d1      	strb	r1, [r2, r3]
		if (n>1)  gfx_ram[(i*18)+n] = 255;
 8003b6c:	4b84      	ldr	r3, [pc, #528]	; (8003d80 <main+0x648>)
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d90d      	bls.n	8003b90 <main+0x458>
 8003b74:	4b83      	ldr	r3, [pc, #524]	; (8003d84 <main+0x64c>)
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4413      	add	r3, r2
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	461a      	mov	r2, r3
 8003b84:	4b7e      	ldr	r3, [pc, #504]	; (8003d80 <main+0x648>)
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	4413      	add	r3, r2
 8003b8a:	4a7f      	ldr	r2, [pc, #508]	; (8003d88 <main+0x650>)
 8003b8c:	21ff      	movs	r1, #255	; 0xff
 8003b8e:	54d1      	strb	r1, [r2, r3]
	for 	(n=0;n<18;n++){					// this is ok
 8003b90:	4b7b      	ldr	r3, [pc, #492]	; (8003d80 <main+0x648>)
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	3301      	adds	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	4b79      	ldr	r3, [pc, #484]	; (8003d80 <main+0x648>)
 8003b9a:	801a      	strh	r2, [r3, #0]
 8003b9c:	4b78      	ldr	r3, [pc, #480]	; (8003d80 <main+0x648>)
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	2b11      	cmp	r3, #17
 8003ba2:	d9b1      	bls.n	8003b08 <main+0x3d0>
	for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8003ba4:	4b77      	ldr	r3, [pc, #476]	; (8003d84 <main+0x64c>)
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	4b75      	ldr	r3, [pc, #468]	; (8003d84 <main+0x64c>)
 8003bae:	801a      	strh	r2, [r3, #0]
 8003bb0:	4b74      	ldr	r3, [pc, #464]	; (8003d84 <main+0x64c>)
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	2b3f      	cmp	r3, #63	; 0x3f
 8003bb6:	f67f af73 	bls.w	8003aa0 <main+0x368>

	}

	}
seq.pos=0;
 8003bba:	4b74      	ldr	r3, [pc, #464]	; (8003d8c <main+0x654>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	701a      	strb	r2, [r3, #0]


float tempo_hold;  // calculate tempo look up


	for (i=0;i<256;i++) {
 8003bc0:	4b70      	ldr	r3, [pc, #448]	; (8003d84 <main+0x64c>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	801a      	strh	r2, [r3, #0]
 8003bc6:	e045      	b.n	8003c54 <main+0x51c>

	tempo_hold=(i+180)*0.0166666666;
 8003bc8:	4b6e      	ldr	r3, [pc, #440]	; (8003d84 <main+0x64c>)
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	33b4      	adds	r3, #180	; 0xb4
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fc fd86 	bl	80006e0 <__aeabi_i2d>
 8003bd4:	a366      	add	r3, pc, #408	; (adr r3, 8003d70 <main+0x638>)
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	f7fc fb05 	bl	80001e8 <__aeabi_dmul>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4610      	mov	r0, r2
 8003be4:	4619      	mov	r1, r3
 8003be6:	f7fc fde5 	bl	80007b4 <__aeabi_d2f>
 8003bea:	4603      	mov	r3, r0
 8003bec:	66bb      	str	r3, [r7, #104]	; 0x68

	tempo_hold=	1/tempo_hold;
 8003bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bf2:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8003bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bfa:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	tempo_hold=	tempo_hold*2187.6*2;      // change for the sake of note length
 8003bfe:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003c00:	f7fc fd80 	bl	8000704 <__aeabi_f2d>
 8003c04:	a35c      	add	r3, pc, #368	; (adr r3, 8003d78 <main+0x640>)
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	f7fc faed 	bl	80001e8 <__aeabi_dmul>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4610      	mov	r0, r2
 8003c14:	4619      	mov	r1, r3
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	f7fc fc15 	bl	8000448 <__adddf3>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4610      	mov	r0, r2
 8003c24:	4619      	mov	r1, r3
 8003c26:	f7fc fdc5 	bl	80007b4 <__aeabi_d2f>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	66bb      	str	r3, [r7, #104]	; 0x68
	//tempo_hold=	tempo_hold*2187.6*1;      // change for the sake of note length
	tempo_lut[i]=tempo_hold;
 8003c2e:	4b55      	ldr	r3, [pc, #340]	; (8003d84 <main+0x64c>)
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c3c:	ee17 3a90 	vmov	r3, s15
 8003c40:	b299      	uxth	r1, r3
 8003c42:	4b53      	ldr	r3, [pc, #332]	; (8003d90 <main+0x658>)
 8003c44:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i=0;i<256;i++) {
 8003c48:	4b4e      	ldr	r3, [pc, #312]	; (8003d84 <main+0x64c>)
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	4b4c      	ldr	r3, [pc, #304]	; (8003d84 <main+0x64c>)
 8003c52:	801a      	strh	r2, [r3, #0]
 8003c54:	4b4b      	ldr	r3, [pc, #300]	; (8003d84 <main+0x64c>)
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	2bff      	cmp	r3, #255	; 0xff
 8003c5a:	d9b5      	bls.n	8003bc8 <main+0x490>
	}

isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount
 8003c5c:	4b4d      	ldr	r3, [pc, #308]	; (8003d94 <main+0x65c>)
 8003c5e:	f240 223b 	movw	r2, #571	; 0x23b
 8003c62:	801a      	strh	r2, [r3, #0]

	noteTiming=24;
 8003c64:	4b4c      	ldr	r3, [pc, #304]	; (8003d98 <main+0x660>)
 8003c66:	2218      	movs	r2, #24
 8003c68:	701a      	strb	r2, [r3, #0]
	for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8003c6a:	4b46      	ldr	r3, [pc, #280]	; (8003d84 <main+0x64c>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	801a      	strh	r2, [r3, #0]
 8003c70:	e00b      	b.n	8003c8a <main+0x552>
		spell[i]=67;
 8003c72:	4b44      	ldr	r3, [pc, #272]	; (8003d84 <main+0x64c>)
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	4b48      	ldr	r3, [pc, #288]	; (8003d9c <main+0x664>)
 8003c7a:	2143      	movs	r1, #67	; 0x43
 8003c7c:	5499      	strb	r1, [r3, r2]
	for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8003c7e:	4b41      	ldr	r3, [pc, #260]	; (8003d84 <main+0x64c>)
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	3301      	adds	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	4b3f      	ldr	r3, [pc, #252]	; (8003d84 <main+0x64c>)
 8003c88:	801a      	strh	r2, [r3, #0]
 8003c8a:	4b3e      	ldr	r3, [pc, #248]	; (8003d84 <main+0x64c>)
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003c92:	d3ee      	bcc.n	8003c72 <main+0x53a>

	}

	gfx_clear();
 8003c94:	f7fd fe04 	bl	80018a0 <gfx_clear>
uint16_t pars_counter;

for (pars_counter=0;pars_counter<512;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8003c9e:	e00e      	b.n	8003cbe <main+0x586>

		menu_parser();  // run it closer to default_menu size ,times, if default_menu is corrupt gfx breaks pretty bad
 8003ca0:	f7fd f954 	bl	8000f4c <menu_parser>
		default_menu3[pars_counter>>1]=64;
 8003ca4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	4b3c      	ldr	r3, [pc, #240]	; (8003da0 <main+0x668>)
 8003cb0:	2140      	movs	r1, #64	; 0x40
 8003cb2:	5499      	strb	r1, [r3, r2]
for (pars_counter=0;pars_counter<512;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8003cb4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8003cbe:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003cc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc6:	d3eb      	bcc.n	8003ca0 <main+0x568>
	}



default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 8003cc8:	4835      	ldr	r0, [pc, #212]	; (8003da0 <main+0x668>)
 8003cca:	f7fc fa85 	bl	80001d8 <strlen>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	4b34      	ldr	r3, [pc, #208]	; (8003da4 <main+0x66c>)
 8003cd4:	801a      	strh	r2, [r3, #0]
	menu_title_count--;  //count back one
 8003cd6:	4b34      	ldr	r3, [pc, #208]	; (8003da8 <main+0x670>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	4b32      	ldr	r3, [pc, #200]	; (8003da8 <main+0x670>)
 8003ce0:	701a      	strb	r2, [r3, #0]
	display_clear ();
 8003ce2:	f7fd fe1f 	bl	8001924 <display_clear>
	for (pars_counter=0;pars_counter<menu_title_count;pars_counter++)	default_menu3 [menu_title_lut[pars_counter]&1023]=48;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8003cec:	e00e      	b.n	8003d0c <main+0x5d4>
 8003cee:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003cf2:	4a2e      	ldr	r2, [pc, #184]	; (8003dac <main+0x674>)
 8003cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cfc:	4a28      	ldr	r2, [pc, #160]	; (8003da0 <main+0x668>)
 8003cfe:	2130      	movs	r1, #48	; 0x30
 8003d00:	54d1      	strb	r1, [r2, r3]
 8003d02:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003d06:	3301      	adds	r3, #1
 8003d08:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8003d0c:	4b26      	ldr	r3, [pc, #152]	; (8003da8 <main+0x670>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d3e9      	bcc.n	8003cee <main+0x5b6>

menuSelect=0;
 8003d1a:	4b25      	ldr	r3, [pc, #148]	; (8003db0 <main+0x678>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 8003d20:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <main+0x67c>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 8003d26:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <main+0x680>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	4b22      	ldr	r3, [pc, #136]	; (8003db8 <main+0x680>)
 8003d30:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 8003d32:	4b22      	ldr	r3, [pc, #136]	; (8003dbc <main+0x684>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3301      	adds	r3, #1
 8003d38:	4a20      	ldr	r2, [pc, #128]	; (8003dbc <main+0x684>)
 8003d3a:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing

	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 8003d3c:	4b1f      	ldr	r3, [pc, #124]	; (8003dbc <main+0x684>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	2b06      	cmp	r3, #6
 8003d46:	d101      	bne.n	8003d4c <main+0x614>
 8003d48:	f7fd fc38 	bl	80015bc <analoginputloopb>


if (loop_counter2==4024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 8003d4c:	4b1b      	ldr	r3, [pc, #108]	; (8003dbc <main+0x684>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f640 72b8 	movw	r2, #4024	; 0xfb8
 8003d54:	4293      	cmp	r3, r2
 8003d56:	f040 8113 	bne.w	8003f80 <main+0x848>
	  if (mem_count>329) mem_count=0; else mem_count++; // write to first this was moved for no logical reason ?
 8003d5a:	4b19      	ldr	r3, [pc, #100]	; (8003dc0 <main+0x688>)
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8003d62:	d32f      	bcc.n	8003dc4 <main+0x68c>
 8003d64:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <main+0x688>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	801a      	strh	r2, [r3, #0]
 8003d6a:	e031      	b.n	8003dd0 <main+0x698>
 8003d6c:	f3af 8000 	nop.w
 8003d70:	0febdd13 	.word	0x0febdd13
 8003d74:	3f911111 	.word	0x3f911111
 8003d78:	33333333 	.word	0x33333333
 8003d7c:	40a11733 	.word	0x40a11733
 8003d80:	20000734 	.word	0x20000734
 8003d84:	20000758 	.word	0x20000758
 8003d88:	20002a50 	.word	0x20002a50
 8003d8c:	20004034 	.word	0x20004034
 8003d90:	2000264c 	.word	0x2000264c
 8003d94:	2000072c 	.word	0x2000072c
 8003d98:	2000041c 	.word	0x2000041c
 8003d9c:	20000000 	.word	0x20000000
 8003da0:	20006540 	.word	0x20006540
 8003da4:	2000450a 	.word	0x2000450a
 8003da8:	200041f9 	.word	0x200041f9
 8003dac:	200041fc 	.word	0x200041fc
 8003db0:	2000072a 	.word	0x2000072a
 8003db4:	2000072e 	.word	0x2000072e
 8003db8:	20000754 	.word	0x20000754
 8003dbc:	200023b0 	.word	0x200023b0
 8003dc0:	200023ae 	.word	0x200023ae
 8003dc4:	4b75      	ldr	r3, [pc, #468]	; (8003f9c <main+0x864>)
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	4b73      	ldr	r3, [pc, #460]	; (8003f9c <main+0x864>)
 8003dce:	801a      	strh	r2, [r3, #0]
	  patch_target_parse(); //
 8003dd0:	f7fd f98a 	bl	80010e8 <patch_target_parse>
	// read values from stored

	 // serial_send[2]=mem_count>>8;
	  serial_send[2]=0;
 8003dd4:	4b72      	ldr	r3, [pc, #456]	; (8003fa0 <main+0x868>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	709a      	strb	r2, [r3, #2]
	  serial_send[3]=mem_count&63;
 8003dda:	4b70      	ldr	r3, [pc, #448]	; (8003f9c <main+0x864>)
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	4b6e      	ldr	r3, [pc, #440]	; (8003fa0 <main+0x868>)
 8003de8:	70da      	strb	r2, [r3, #3]
	  serial_send[4]=potSource[mem_count&63];
 8003dea:	4b6c      	ldr	r3, [pc, #432]	; (8003f9c <main+0x864>)
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003df2:	4a6c      	ldr	r2, [pc, #432]	; (8003fa4 <main+0x86c>)
 8003df4:	5cd2      	ldrb	r2, [r2, r3]
 8003df6:	4b6a      	ldr	r3, [pc, #424]	; (8003fa0 <main+0x868>)
 8003df8:	711a      	strb	r2, [r3, #4]
	  HAL_UART_Transmit(&huart1,serial_send,5, 100);  //send serial
 8003dfa:	2364      	movs	r3, #100	; 0x64
 8003dfc:	2205      	movs	r2, #5
 8003dfe:	4968      	ldr	r1, [pc, #416]	; (8003fa0 <main+0x868>)
 8003e00:	4869      	ldr	r0, [pc, #420]	; (8003fa8 <main+0x870>)
 8003e02:	f006 fb80 	bl	800a506 <HAL_UART_Transmit>

	memcpy(potSource,&seq,46); // about 35
 8003e06:	4a67      	ldr	r2, [pc, #412]	; (8003fa4 <main+0x86c>)
 8003e08:	4b68      	ldr	r3, [pc, #416]	; (8003fac <main+0x874>)
 8003e0a:	4614      	mov	r4, r2
 8003e0c:	461d      	mov	r5, r3
 8003e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003e1a:	c407      	stmia	r4!, {r0, r1, r2}
 8003e1c:	8023      	strh	r3, [r4, #0]

	for(i=0;i<10;i++){
 8003e1e:	4b64      	ldr	r3, [pc, #400]	; (8003fb0 <main+0x878>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	801a      	strh	r2, [r3, #0]
 8003e24:	e065      	b.n	8003ef2 <main+0x7ba>
		if (i<8){    memcpy(potSource+156+(i*14),&note[i],14 );}  //grab note settings ,112 total , works
 8003e26:	4b62      	ldr	r3, [pc, #392]	; (8003fb0 <main+0x878>)
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	2b07      	cmp	r3, #7
 8003e2c:	d816      	bhi.n	8003e5c <main+0x724>
 8003e2e:	4b60      	ldr	r3, [pc, #384]	; (8003fb0 <main+0x878>)
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	4613      	mov	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	339c      	adds	r3, #156	; 0x9c
 8003e3e:	4a59      	ldr	r2, [pc, #356]	; (8003fa4 <main+0x86c>)
 8003e40:	1898      	adds	r0, r3, r2
 8003e42:	4b5b      	ldr	r3, [pc, #364]	; (8003fb0 <main+0x878>)
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	4613      	mov	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	4a58      	ldr	r2, [pc, #352]	; (8003fb4 <main+0x87c>)
 8003e52:	4413      	add	r3, r2
 8003e54:	220e      	movs	r2, #14
 8003e56:	4619      	mov	r1, r3
 8003e58:	f006 ff3c 	bl	800acd4 <memcpy>

		memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 8003e5c:	4b54      	ldr	r3, [pc, #336]	; (8003fb0 <main+0x878>)
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	4613      	mov	r3, r2
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	4413      	add	r3, r2
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	332e      	adds	r3, #46	; 0x2e
 8003e6c:	4a4d      	ldr	r2, [pc, #308]	; (8003fa4 <main+0x86c>)
 8003e6e:	1898      	adds	r0, r3, r2
 8003e70:	4b4f      	ldr	r3, [pc, #316]	; (8003fb0 <main+0x878>)
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	461a      	mov	r2, r3
 8003e76:	4613      	mov	r3, r2
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4a4e      	ldr	r2, [pc, #312]	; (8003fb8 <main+0x880>)
 8003e80:	4413      	add	r3, r2
 8003e82:	2206      	movs	r2, #6
 8003e84:	4619      	mov	r1, r3
 8003e86:	f006 ff25 	bl	800acd4 <memcpy>
		memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 8003e8a:	4b49      	ldr	r3, [pc, #292]	; (8003fb0 <main+0x878>)
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	336a      	adds	r3, #106	; 0x6a
 8003e98:	4a42      	ldr	r2, [pc, #264]	; (8003fa4 <main+0x86c>)
 8003e9a:	1898      	adds	r0, r3, r2
 8003e9c:	4b44      	ldr	r3, [pc, #272]	; (8003fb0 <main+0x878>)
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8003ea6:	fb02 f303 	mul.w	r3, r2, r3
 8003eaa:	4a44      	ldr	r2, [pc, #272]	; (8003fbc <main+0x884>)
 8003eac:	4413      	add	r3, r2
 8003eae:	2205      	movs	r2, #5
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f006 ff0f 	bl	800acd4 <memcpy>
		memcpy(potSource+268+(i*6),&patch[i],6 );
 8003eb6:	4b3e      	ldr	r3, [pc, #248]	; (8003fb0 <main+0x878>)
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	4413      	add	r3, r2
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003ec8:	4a36      	ldr	r2, [pc, #216]	; (8003fa4 <main+0x86c>)
 8003eca:	1898      	adds	r0, r3, r2
 8003ecc:	4b38      	ldr	r3, [pc, #224]	; (8003fb0 <main+0x878>)
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	4a39      	ldr	r2, [pc, #228]	; (8003fc0 <main+0x888>)
 8003edc:	4413      	add	r3, r2
 8003ede:	2206      	movs	r2, #6
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f006 fef7 	bl	800acd4 <memcpy>
	for(i=0;i<10;i++){
 8003ee6:	4b32      	ldr	r3, [pc, #200]	; (8003fb0 <main+0x878>)
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	3301      	adds	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	4b30      	ldr	r3, [pc, #192]	; (8003fb0 <main+0x878>)
 8003ef0:	801a      	strh	r2, [r3, #0]
 8003ef2:	4b2f      	ldr	r3, [pc, #188]	; (8003fb0 <main+0x878>)
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	2b09      	cmp	r3, #9
 8003ef8:	d995      	bls.n	8003e26 <main+0x6ee>
	}	// copy vars into potSource

	HAL_UART_Transmit(&huart1,serial_send,5, 100);  //send serial again
 8003efa:	2364      	movs	r3, #100	; 0x64
 8003efc:	2205      	movs	r2, #5
 8003efe:	4928      	ldr	r1, [pc, #160]	; (8003fa0 <main+0x868>)
 8003f00:	4829      	ldr	r0, [pc, #164]	; (8003fa8 <main+0x870>)
 8003f02:	f006 fb00 	bl	800a506 <HAL_UART_Transmit>

		uint16_t mem_count2=0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

			// for patch write start at 2048 for now



				 mem_buf=potSource[mem_count];
 8003f0c:	4b23      	ldr	r3, [pc, #140]	; (8003f9c <main+0x864>)
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <main+0x86c>)
 8003f14:	5c9a      	ldrb	r2, [r3, r2]
 8003f16:	4b2b      	ldr	r3, [pc, #172]	; (8003fc4 <main+0x88c>)
 8003f18:	701a      	strb	r2, [r3, #0]
			//	 if (mem_buf>159) mem_buf=159;
				 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 8003f1a:	4b20      	ldr	r3, [pc, #128]	; (8003f9c <main+0x864>)
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	099b      	lsrs	r3, r3, #6
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3301      	adds	r3, #1
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	019b      	lsls	r3, r3, #6
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	4b1c      	ldr	r3, [pc, #112]	; (8003f9c <main+0x864>)
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	4413      	add	r3, r2
 8003f36:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
				 //mem_count2=mem_count2+2048;   // Relocate mem for patch

				 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,&mem_verify, 1,100);
 8003f3a:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8003f3e:	2364      	movs	r3, #100	; 0x64
 8003f40:	9302      	str	r3, [sp, #8]
 8003f42:	2301      	movs	r3, #1
 8003f44:	9301      	str	r3, [sp, #4]
 8003f46:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <main+0x890>)
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	21a0      	movs	r1, #160	; 0xa0
 8003f4e:	481f      	ldr	r0, [pc, #124]	; (8003fcc <main+0x894>)
 8003f50:	f003 fa3e 	bl	80073d0 <HAL_I2C_Mem_Read>
				 if (mem_verify!=mem_buf) HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);
 8003f54:	4b1c      	ldr	r3, [pc, #112]	; (8003fc8 <main+0x890>)
 8003f56:	781a      	ldrb	r2, [r3, #0]
 8003f58:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <main+0x88c>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d00c      	beq.n	8003f7a <main+0x842>
 8003f60:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8003f64:	2364      	movs	r3, #100	; 0x64
 8003f66:	9302      	str	r3, [sp, #8]
 8003f68:	2301      	movs	r3, #1
 8003f6a:	9301      	str	r3, [sp, #4]
 8003f6c:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <main+0x88c>)
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	2302      	movs	r3, #2
 8003f72:	21a0      	movs	r1, #160	; 0xa0
 8003f74:	4815      	ldr	r0, [pc, #84]	; (8003fcc <main+0x894>)
 8003f76:	f003 f931 	bl	80071dc <HAL_I2C_Mem_Write>



//if (mem_buf!=mem_verify)	 mem_errors++;  // check writes

loop_counter2=0; //reset
 8003f7a:	4b15      	ldr	r3, [pc, #84]	; (8003fd0 <main+0x898>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]

}


	  if (disp_end==1)	  display_generate();      // run this after gfx draw page finish
 8003f80:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <main+0x89c>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <main+0x854>
 8003f88:	f7fd fcec 	bl	8001964 <display_generate>




	  if (init<6)				// after 6 its done for good   // no freeze here
 8003f8c:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <main+0x8a0>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b05      	cmp	r3, #5
 8003f92:	d82f      	bhi.n	8003ff4 <main+0x8bc>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8003f94:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <main+0x878>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	801a      	strh	r2, [r3, #0]
 8003f9a:	e027      	b.n	8003fec <main+0x8b4>
 8003f9c:	200023ae 	.word	0x200023ae
 8003fa0:	20000244 	.word	0x20000244
 8003fa4:	200005a0 	.word	0x200005a0
 8003fa8:	20006bc4 	.word	0x20006bc4
 8003fac:	20004034 	.word	0x20004034
 8003fb0:	20000758 	.word	0x20000758
 8003fb4:	200001bc 	.word	0x200001bc
 8003fb8:	20003300 	.word	0x20003300
 8003fbc:	200035a8 	.word	0x200035a8
 8003fc0:	20004064 	.word	0x20004064
 8003fc4:	200023b4 	.word	0x200023b4
 8003fc8:	20004517 	.word	0x20004517
 8003fcc:	200069e8 	.word	0x200069e8
 8003fd0:	200023b0 	.word	0x200023b0
 8003fd4:	20002ee2 	.word	0x20002ee2
 8003fd8:	200023a5 	.word	0x200023a5
 8003fdc:	f7fd fbb2 	bl	8001744 <display_init>
 8003fe0:	4b6a      	ldr	r3, [pc, #424]	; (800418c <main+0xa54>)
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	4b68      	ldr	r3, [pc, #416]	; (800418c <main+0xa54>)
 8003fea:	801a      	strh	r2, [r3, #0]
 8003fec:	4b67      	ldr	r3, [pc, #412]	; (800418c <main+0xa54>)
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	2b05      	cmp	r3, #5
 8003ff2:	d9f3      	bls.n	8003fdc <main+0x8a4>
}

	  if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 8003ff4:	4b66      	ldr	r3, [pc, #408]	; (8004190 <main+0xa58>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b05      	cmp	r3, #5
 8003ffa:	d92a      	bls.n	8004052 <main+0x91a>


		  if (gfx_send_swap==2) gfx_send_lines++;		// this is ok for now
 8003ffc:	4b65      	ldr	r3, [pc, #404]	; (8004194 <main+0xa5c>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b02      	cmp	r3, #2
 8004002:	d105      	bne.n	8004010 <main+0x8d8>
 8004004:	4b64      	ldr	r3, [pc, #400]	; (8004198 <main+0xa60>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	3301      	adds	r3, #1
 800400a:	b2da      	uxtb	r2, r3
 800400c:	4b62      	ldr	r3, [pc, #392]	; (8004198 <main+0xa60>)
 800400e:	701a      	strb	r2, [r3, #0]
		  if (gfx_send_swap==1)  { gfx_send_counter=gfx_send_cursor*144; gfx_send_swap=2; } // jump to cursor pixel line
 8004010:	4b60      	ldr	r3, [pc, #384]	; (8004194 <main+0xa5c>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d10c      	bne.n	8004032 <main+0x8fa>
 8004018:	4b60      	ldr	r3, [pc, #384]	; (800419c <main+0xa64>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	b29b      	uxth	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	00d2      	lsls	r2, r2, #3
 8004022:	4413      	add	r3, r2
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	b29a      	uxth	r2, r3
 8004028:	4b5d      	ldr	r3, [pc, #372]	; (80041a0 <main+0xa68>)
 800402a:	801a      	strh	r2, [r3, #0]
 800402c:	4b59      	ldr	r3, [pc, #356]	; (8004194 <main+0xa5c>)
 800402e:	2202      	movs	r2, #2
 8004030:	701a      	strb	r2, [r3, #0]
	      if (gfx_send_lines==144)   { gfx_send_lines=0; gfx_send_counter=1008; gfx_send_swap=0;}  // skip to last char line
 8004032:	4b59      	ldr	r3, [pc, #356]	; (8004198 <main+0xa60>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b90      	cmp	r3, #144	; 0x90
 8004038:	d109      	bne.n	800404e <main+0x916>
 800403a:	4b57      	ldr	r3, [pc, #348]	; (8004198 <main+0xa60>)
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
 8004040:	4b57      	ldr	r3, [pc, #348]	; (80041a0 <main+0xa68>)
 8004042:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8004046:	801a      	strh	r2, [r3, #0]
 8004048:	4b52      	ldr	r3, [pc, #328]	; (8004194 <main+0xa5c>)
 800404a:	2200      	movs	r2, #0
 800404c:	701a      	strb	r2, [r3, #0]
				gfx_send();    // don't loop this without using dma  , just makes things really slow
 800404e:	f7fd fbcf 	bl	80017f0 <gfx_send>

	}


	  if (loop_counter == 255)	{ // grab adc readings + 3ms , 32 step  // no freeze
 8004052:	4b54      	ldr	r3, [pc, #336]	; (80041a4 <main+0xa6c>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2bff      	cmp	r3, #255	; 0xff
 8004058:	d13d      	bne.n	80040d6 <main+0x99e>



		  //HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

		  HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 800405a:	4853      	ldr	r0, [pc, #332]	; (80041a8 <main+0xa70>)
 800405c:	f001 fe02 	bl	8005c64 <HAL_ADCEx_InjectedStart>
		  uint16_t adc_temp1[4]={0,0,0,0};
 8004060:	1d3b      	adds	r3, r7, #4
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	605a      	str	r2, [r3, #4]

		  HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 8004068:	2101      	movs	r1, #1
 800406a:	484f      	ldr	r0, [pc, #316]	; (80041a8 <main+0xa70>)
 800406c:	f001 f960 	bl	8005330 <HAL_ADC_PollForConversion>

		  adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8004070:	2101      	movs	r1, #1
 8004072:	484d      	ldr	r0, [pc, #308]	; (80041a8 <main+0xa70>)
 8004074:	f001 ff0c 	bl	8005e90 <HAL_ADCEx_InjectedGetValue>
 8004078:	4603      	mov	r3, r0
 800407a:	b29b      	uxth	r3, r3
 800407c:	80bb      	strh	r3, [r7, #4]
		  adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 800407e:	2102      	movs	r1, #2
 8004080:	4849      	ldr	r0, [pc, #292]	; (80041a8 <main+0xa70>)
 8004082:	f001 ff05 	bl	8005e90 <HAL_ADCEx_InjectedGetValue>
 8004086:	4603      	mov	r3, r0
 8004088:	b29b      	uxth	r3, r3
 800408a:	80fb      	strh	r3, [r7, #6]
		  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 800408c:	2103      	movs	r1, #3
 800408e:	4846      	ldr	r0, [pc, #280]	; (80041a8 <main+0xa70>)
 8004090:	f001 fefe 	bl	8005e90 <HAL_ADCEx_InjectedGetValue>
 8004094:	4603      	mov	r3, r0
 8004096:	b29b      	uxth	r3, r3
 8004098:	813b      	strh	r3, [r7, #8]

		  //  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
		  adc_values[0]=	31- ( adc_temp1[0]>>7);
 800409a:	88bb      	ldrh	r3, [r7, #4]
 800409c:	09db      	lsrs	r3, r3, #7
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f1c3 031f 	rsb	r3, r3, #31
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	4b41      	ldr	r3, [pc, #260]	; (80041ac <main+0xa74>)
 80040a8:	801a      	strh	r2, [r3, #0]
		  adc_values[1]=	 31-( adc_temp1[1]>>7);
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	09db      	lsrs	r3, r3, #7
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f1c3 031f 	rsb	r3, r3, #31
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	4b3d      	ldr	r3, [pc, #244]	; (80041ac <main+0xa74>)
 80040b8:	805a      	strh	r2, [r3, #2]
		  adc_values[2]=	 31-( adc_temp1[2]>>7);
 80040ba:	893b      	ldrh	r3, [r7, #8]
 80040bc:	09db      	lsrs	r3, r3, #7
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f1c3 031f 	rsb	r3, r3, #31
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	4b39      	ldr	r3, [pc, #228]	; (80041ac <main+0xa74>)
 80040c8:	809a      	strh	r2, [r3, #4]
		  //  adc_values[2]=	  adc_temp1[2]>>7;
		  HAL_ADCEx_InjectedStop(&hadc1) ;
 80040ca:	4837      	ldr	r0, [pc, #220]	; (80041a8 <main+0xa70>)
 80040cc:	f001 fe94 	bl	8005df8 <HAL_ADCEx_InjectedStop>


		  //HAL_ADC_Start_DMA(&hadc1, adc_source, 512);


	  	loop_counter=0;
 80040d0:	4b34      	ldr	r3, [pc, #208]	; (80041a4 <main+0xa6c>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 80040d6:	4b36      	ldr	r3, [pc, #216]	; (80041b0 <main+0xa78>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b07      	cmp	r3, #7
 80040dc:	d106      	bne.n	80040ec <main+0x9b4>
 80040de:	4b35      	ldr	r3, [pc, #212]	; (80041b4 <main+0xa7c>)
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d102      	bne.n	80040ec <main+0x9b4>
 80040e6:	4b33      	ldr	r3, [pc, #204]	; (80041b4 <main+0xa7c>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	801a      	strh	r2, [r3, #0]
	   if (promValue<64) promValue=promValue+1 ; else promValue=0;  // fetch eeprom   nogo
	  	  if ((promValues[promValue] ) !=(potValues[promValue]))  EEPROM.write(promValue,(potValues[promValue]));   //  not too happy can totally kill speed  will have to put elsewhere
	  	  promValues[promValue] =potValues[promValue];
	  	   */

	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 80040ec:	4b30      	ldr	r3, [pc, #192]	; (80041b0 <main+0xa78>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	461a      	mov	r2, r3
 80040f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040fc:	482e      	ldr	r0, [pc, #184]	; (80041b8 <main+0xa80>)
 80040fe:	f002 ff0f 	bl	8006f20 <HAL_GPIO_WritePin>


	//  if (sample_pointB!=sample_pointD) bank_write=1; // set start of buffer ,grab , works ok

	  	//	adc_flag=0;
	  		if (adc_flag) {
 8004102:	4b2e      	ldr	r3, [pc, #184]	; (80041bc <main+0xa84>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d03a      	beq.n	8004180 <main+0xa48>
	  		HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go
 800410a:	4827      	ldr	r0, [pc, #156]	; (80041a8 <main+0xa70>)
 800410c:	f001 fa8c 	bl	8005628 <HAL_ADC_Stop_DMA>
	  		HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time
 8004110:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004114:	492a      	ldr	r1, [pc, #168]	; (80041c0 <main+0xa88>)
 8004116:	4824      	ldr	r0, [pc, #144]	; (80041a8 <main+0xa70>)
 8004118:	f001 f996 	bl	8005448 <HAL_ADC_Start_DMA>

	  			uint16_t* click=&adc_source[0];
 800411c:	4b28      	ldr	r3, [pc, #160]	; (80041c0 <main+0xa88>)
 800411e:	67bb      	str	r3, [r7, #120]	; 0x78

	  			for (i=0;i<512;i++)
 8004120:	4b1a      	ldr	r3, [pc, #104]	; (800418c <main+0xa54>)
 8004122:	2200      	movs	r2, #0
 8004124:	801a      	strh	r2, [r3, #0]
 8004126:	e023      	b.n	8004170 <main+0xa38>
	  			{

	  				uint16_t crap_hold=*click;
 8004128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	  			uint16_t crap_hold1=*(++click);
 8004130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004132:	3302      	adds	r3, #2
 8004134:	67bb      	str	r3, [r7, #120]	; 0x78
 8004136:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	  		click++;
 800413e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004140:	3302      	adds	r3, #2
 8004142:	67bb      	str	r3, [r7, #120]	; 0x78

	  	//			uint16_t crap_hold=adc_source[i*2];

	  				 // 				uint16_t crap_hold1=adc_source[(i*2)+1];

	  				input_holder[i] = (crap_hold+crap_hold1 )>>1;
 8004144:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8004148:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800414c:	4413      	add	r3, r2
 800414e:	1059      	asrs	r1, r3, #1
 8004150:	4b0e      	ldr	r3, [pc, #56]	; (800418c <main+0xa54>)
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	b289      	uxth	r1, r1
 8004158:	4b1a      	ldr	r3, [pc, #104]	; (80041c4 <main+0xa8c>)
 800415a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  				adc_flag=0;
 800415e:	4b17      	ldr	r3, [pc, #92]	; (80041bc <main+0xa84>)
 8004160:	2200      	movs	r2, #0
 8004162:	701a      	strb	r2, [r3, #0]
	  			for (i=0;i<512;i++)
 8004164:	4b09      	ldr	r3, [pc, #36]	; (800418c <main+0xa54>)
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	3301      	adds	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	4b07      	ldr	r3, [pc, #28]	; (800418c <main+0xa54>)
 800416e:	801a      	strh	r2, [r3, #0]
 8004170:	4b06      	ldr	r3, [pc, #24]	; (800418c <main+0xa54>)
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004178:	d3d6      	bcc.n	8004128 <main+0x9f0>
	  			}
	  		}

	while  (bank_write)                         {							// wait for adc , priority
 800417a:	e001      	b.n	8004180 <main+0xa48>



		  //HAL_Delay(4);
	  		//sample_point=sample_point&768 ;
	  		sampling();
 800417c:	f7fd ff80 	bl	8002080 <sampling>
	while  (bank_write)                         {							// wait for adc , priority
 8004180:	4b11      	ldr	r3, [pc, #68]	; (80041c8 <main+0xa90>)
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1f9      	bne.n	800417c <main+0xa44>
	  loop_counter++ ;
 8004188:	e5cd      	b.n	8003d26 <main+0x5ee>
 800418a:	bf00      	nop
 800418c:	20000758 	.word	0x20000758
 8004190:	200023a5 	.word	0x200023a5
 8004194:	20002ed6 	.word	0x20002ed6
 8004198:	20002ed7 	.word	0x20002ed7
 800419c:	20002ed5 	.word	0x20002ed5
 80041a0:	20002ed2 	.word	0x20002ed2
 80041a4:	20000754 	.word	0x20000754
 80041a8:	20006940 	.word	0x20006940
 80041ac:	200001a8 	.word	0x200001a8
 80041b0:	20004034 	.word	0x20004034
 80041b4:	2000239c 	.word	0x2000239c
 80041b8:	40020800 	.word	0x40020800
 80041bc:	200032e4 	.word	0x200032e4
 80041c0:	2000176c 	.word	0x2000176c
 80041c4:	20002ee4 	.word	0x20002ee4
 80041c8:	200001b2 	.word	0x200001b2

080041cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b094      	sub	sp, #80	; 0x50
 80041d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041d2:	f107 0320 	add.w	r3, r7, #32
 80041d6:	2230      	movs	r2, #48	; 0x30
 80041d8:	2100      	movs	r1, #0
 80041da:	4618      	mov	r0, r3
 80041dc:	f006 fd88 	bl	800acf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041e0:	f107 030c 	add.w	r3, r7, #12
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	605a      	str	r2, [r3, #4]
 80041ea:	609a      	str	r2, [r3, #8]
 80041ec:	60da      	str	r2, [r3, #12]
 80041ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80041f0:	2300      	movs	r3, #0
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	4b28      	ldr	r3, [pc, #160]	; (8004298 <SystemClock_Config+0xcc>)
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	4a27      	ldr	r2, [pc, #156]	; (8004298 <SystemClock_Config+0xcc>)
 80041fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041fe:	6413      	str	r3, [r2, #64]	; 0x40
 8004200:	4b25      	ldr	r3, [pc, #148]	; (8004298 <SystemClock_Config+0xcc>)
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800420c:	2300      	movs	r3, #0
 800420e:	607b      	str	r3, [r7, #4]
 8004210:	4b22      	ldr	r3, [pc, #136]	; (800429c <SystemClock_Config+0xd0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a21      	ldr	r2, [pc, #132]	; (800429c <SystemClock_Config+0xd0>)
 8004216:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	4b1f      	ldr	r3, [pc, #124]	; (800429c <SystemClock_Config+0xd0>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004224:	607b      	str	r3, [r7, #4]
 8004226:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004228:	2302      	movs	r3, #2
 800422a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800422c:	2301      	movs	r3, #1
 800422e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004230:	2310      	movs	r3, #16
 8004232:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004234:	2302      	movs	r3, #2
 8004236:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004238:	2300      	movs	r3, #0
 800423a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800423c:	2308      	movs	r3, #8
 800423e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004240:	2364      	movs	r3, #100	; 0x64
 8004242:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004244:	2302      	movs	r3, #2
 8004246:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004248:	2304      	movs	r3, #4
 800424a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800424c:	f107 0320 	add.w	r3, r7, #32
 8004250:	4618      	mov	r0, r3
 8004252:	f003 fe3f 	bl	8007ed4 <HAL_RCC_OscConfig>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800425c:	f000 fb66 	bl	800492c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004260:	230f      	movs	r3, #15
 8004262:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004264:	2302      	movs	r3, #2
 8004266:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800426c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004270:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004276:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004278:	f107 030c 	add.w	r3, r7, #12
 800427c:	2103      	movs	r1, #3
 800427e:	4618      	mov	r0, r3
 8004280:	f004 f8a0 	bl	80083c4 <HAL_RCC_ClockConfig>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800428a:	f000 fb4f 	bl	800492c <Error_Handler>
  }
}
 800428e:	bf00      	nop
 8004290:	3750      	adds	r7, #80	; 0x50
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40023800 	.word	0x40023800
 800429c:	40007000 	.word	0x40007000

080042a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08c      	sub	sp, #48	; 0x30
 80042a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80042a6:	f107 0320 	add.w	r3, r7, #32
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	605a      	str	r2, [r3, #4]
 80042b0:	609a      	str	r2, [r3, #8]
 80042b2:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80042b4:	463b      	mov	r3, r7
 80042b6:	2220      	movs	r2, #32
 80042b8:	2100      	movs	r1, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	f006 fd18 	bl	800acf0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80042c0:	4b3e      	ldr	r3, [pc, #248]	; (80043bc <MX_ADC1_Init+0x11c>)
 80042c2:	4a3f      	ldr	r2, [pc, #252]	; (80043c0 <MX_ADC1_Init+0x120>)
 80042c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80042c6:	4b3d      	ldr	r3, [pc, #244]	; (80043bc <MX_ADC1_Init+0x11c>)
 80042c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80042ce:	4b3b      	ldr	r3, [pc, #236]	; (80043bc <MX_ADC1_Init+0x11c>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80042d4:	4b39      	ldr	r3, [pc, #228]	; (80043bc <MX_ADC1_Init+0x11c>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80042da:	4b38      	ldr	r3, [pc, #224]	; (80043bc <MX_ADC1_Init+0x11c>)
 80042dc:	2201      	movs	r2, #1
 80042de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80042e0:	4b36      	ldr	r3, [pc, #216]	; (80043bc <MX_ADC1_Init+0x11c>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80042e8:	4b34      	ldr	r3, [pc, #208]	; (80043bc <MX_ADC1_Init+0x11c>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80042ee:	4b33      	ldr	r3, [pc, #204]	; (80043bc <MX_ADC1_Init+0x11c>)
 80042f0:	4a34      	ldr	r2, [pc, #208]	; (80043c4 <MX_ADC1_Init+0x124>)
 80042f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80042f4:	4b31      	ldr	r3, [pc, #196]	; (80043bc <MX_ADC1_Init+0x11c>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80042fa:	4b30      	ldr	r3, [pc, #192]	; (80043bc <MX_ADC1_Init+0x11c>)
 80042fc:	2201      	movs	r2, #1
 80042fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004300:	4b2e      	ldr	r3, [pc, #184]	; (80043bc <MX_ADC1_Init+0x11c>)
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004308:	4b2c      	ldr	r3, [pc, #176]	; (80043bc <MX_ADC1_Init+0x11c>)
 800430a:	2200      	movs	r2, #0
 800430c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800430e:	482b      	ldr	r0, [pc, #172]	; (80043bc <MX_ADC1_Init+0x11c>)
 8004310:	f000 ff16 	bl	8005140 <HAL_ADC_Init>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 800431a:	f000 fb07 	bl	800492c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800431e:	2309      	movs	r3, #9
 8004320:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8004322:	2301      	movs	r3, #1
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8004326:	2306      	movs	r3, #6
 8004328:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800432a:	f107 0320 	add.w	r3, r7, #32
 800432e:	4619      	mov	r1, r3
 8004330:	4822      	ldr	r0, [pc, #136]	; (80043bc <MX_ADC1_Init+0x11c>)
 8004332:	f001 f9e7 	bl	8005704 <HAL_ADC_ConfigChannel>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800433c:	f000 faf6 	bl	800492c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8004340:	2300      	movs	r3, #0
 8004342:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8004344:	2301      	movs	r3, #1
 8004346:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8004348:	2303      	movs	r3, #3
 800434a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 800434c:	2303      	movs	r3, #3
 800434e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8004350:	2300      	movs	r3, #0
 8004352:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8004354:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <MX_ADC1_Init+0x128>)
 8004356:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8004358:	2300      	movs	r3, #0
 800435a:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800435c:	2300      	movs	r3, #0
 800435e:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004364:	463b      	mov	r3, r7
 8004366:	4619      	mov	r1, r3
 8004368:	4814      	ldr	r0, [pc, #80]	; (80043bc <MX_ADC1_Init+0x11c>)
 800436a:	f001 fdc9 	bl	8005f00 <HAL_ADCEx_InjectedConfigChannel>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8004374:	f000 fada 	bl	800492c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8004378:	2302      	movs	r3, #2
 800437a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 800437c:	2302      	movs	r3, #2
 800437e:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004380:	463b      	mov	r3, r7
 8004382:	4619      	mov	r1, r3
 8004384:	480d      	ldr	r0, [pc, #52]	; (80043bc <MX_ADC1_Init+0x11c>)
 8004386:	f001 fdbb 	bl	8005f00 <HAL_ADCEx_InjectedConfigChannel>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8004390:	f000 facc 	bl	800492c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8004394:	2308      	movs	r3, #8
 8004396:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8004398:	2303      	movs	r3, #3
 800439a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800439c:	2300      	movs	r3, #0
 800439e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80043a0:	463b      	mov	r3, r7
 80043a2:	4619      	mov	r1, r3
 80043a4:	4805      	ldr	r0, [pc, #20]	; (80043bc <MX_ADC1_Init+0x11c>)
 80043a6:	f001 fdab 	bl	8005f00 <HAL_ADCEx_InjectedConfigChannel>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80043b0:	f000 fabc 	bl	800492c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80043b4:	bf00      	nop
 80043b6:	3730      	adds	r7, #48	; 0x30
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20006940 	.word	0x20006940
 80043c0:	40012000 	.word	0x40012000
 80043c4:	0f000001 	.word	0x0f000001
 80043c8:	000f0001 	.word	0x000f0001

080043cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80043d0:	4b12      	ldr	r3, [pc, #72]	; (800441c <MX_I2C2_Init+0x50>)
 80043d2:	4a13      	ldr	r2, [pc, #76]	; (8004420 <MX_I2C2_Init+0x54>)
 80043d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80043d6:	4b11      	ldr	r3, [pc, #68]	; (800441c <MX_I2C2_Init+0x50>)
 80043d8:	4a12      	ldr	r2, [pc, #72]	; (8004424 <MX_I2C2_Init+0x58>)
 80043da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80043dc:	4b0f      	ldr	r3, [pc, #60]	; (800441c <MX_I2C2_Init+0x50>)
 80043de:	2200      	movs	r2, #0
 80043e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80043e2:	4b0e      	ldr	r3, [pc, #56]	; (800441c <MX_I2C2_Init+0x50>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043e8:	4b0c      	ldr	r3, [pc, #48]	; (800441c <MX_I2C2_Init+0x50>)
 80043ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043f0:	4b0a      	ldr	r3, [pc, #40]	; (800441c <MX_I2C2_Init+0x50>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80043f6:	4b09      	ldr	r3, [pc, #36]	; (800441c <MX_I2C2_Init+0x50>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80043fc:	4b07      	ldr	r3, [pc, #28]	; (800441c <MX_I2C2_Init+0x50>)
 80043fe:	2200      	movs	r2, #0
 8004400:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004402:	4b06      	ldr	r3, [pc, #24]	; (800441c <MX_I2C2_Init+0x50>)
 8004404:	2200      	movs	r2, #0
 8004406:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004408:	4804      	ldr	r0, [pc, #16]	; (800441c <MX_I2C2_Init+0x50>)
 800440a:	f002 fda3 	bl	8006f54 <HAL_I2C_Init>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004414:	f000 fa8a 	bl	800492c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004418:	bf00      	nop
 800441a:	bd80      	pop	{r7, pc}
 800441c:	200069e8 	.word	0x200069e8
 8004420:	40005800 	.word	0x40005800
 8004424:	000186a0 	.word	0x000186a0

08004428 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800442c:	4b17      	ldr	r3, [pc, #92]	; (800448c <MX_SPI1_Init+0x64>)
 800442e:	4a18      	ldr	r2, [pc, #96]	; (8004490 <MX_SPI1_Init+0x68>)
 8004430:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004432:	4b16      	ldr	r3, [pc, #88]	; (800448c <MX_SPI1_Init+0x64>)
 8004434:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004438:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800443a:	4b14      	ldr	r3, [pc, #80]	; (800448c <MX_SPI1_Init+0x64>)
 800443c:	2200      	movs	r2, #0
 800443e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004440:	4b12      	ldr	r3, [pc, #72]	; (800448c <MX_SPI1_Init+0x64>)
 8004442:	2200      	movs	r2, #0
 8004444:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004446:	4b11      	ldr	r3, [pc, #68]	; (800448c <MX_SPI1_Init+0x64>)
 8004448:	2200      	movs	r2, #0
 800444a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800444c:	4b0f      	ldr	r3, [pc, #60]	; (800448c <MX_SPI1_Init+0x64>)
 800444e:	2200      	movs	r2, #0
 8004450:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004452:	4b0e      	ldr	r3, [pc, #56]	; (800448c <MX_SPI1_Init+0x64>)
 8004454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004458:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800445a:	4b0c      	ldr	r3, [pc, #48]	; (800448c <MX_SPI1_Init+0x64>)
 800445c:	2208      	movs	r2, #8
 800445e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <MX_SPI1_Init+0x64>)
 8004462:	2200      	movs	r2, #0
 8004464:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004466:	4b09      	ldr	r3, [pc, #36]	; (800448c <MX_SPI1_Init+0x64>)
 8004468:	2200      	movs	r2, #0
 800446a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800446c:	4b07      	ldr	r3, [pc, #28]	; (800448c <MX_SPI1_Init+0x64>)
 800446e:	2200      	movs	r2, #0
 8004470:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004472:	4b06      	ldr	r3, [pc, #24]	; (800448c <MX_SPI1_Init+0x64>)
 8004474:	220a      	movs	r2, #10
 8004476:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004478:	4804      	ldr	r0, [pc, #16]	; (800448c <MX_SPI1_Init+0x64>)
 800447a:	f004 f983 	bl	8008784 <HAL_SPI_Init>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004484:	f000 fa52 	bl	800492c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004488:	bf00      	nop
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20006a3c 	.word	0x20006a3c
 8004490:	40013000 	.word	0x40013000

08004494 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004498:	4b17      	ldr	r3, [pc, #92]	; (80044f8 <MX_SPI2_Init+0x64>)
 800449a:	4a18      	ldr	r2, [pc, #96]	; (80044fc <MX_SPI2_Init+0x68>)
 800449c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800449e:	4b16      	ldr	r3, [pc, #88]	; (80044f8 <MX_SPI2_Init+0x64>)
 80044a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80044a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80044a6:	4b14      	ldr	r3, [pc, #80]	; (80044f8 <MX_SPI2_Init+0x64>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80044ac:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <MX_SPI2_Init+0x64>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80044b2:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <MX_SPI2_Init+0x64>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80044b8:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <MX_SPI2_Init+0x64>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80044be:	4b0e      	ldr	r3, [pc, #56]	; (80044f8 <MX_SPI2_Init+0x64>)
 80044c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80044c6:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <MX_SPI2_Init+0x64>)
 80044c8:	2230      	movs	r2, #48	; 0x30
 80044ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044cc:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <MX_SPI2_Init+0x64>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80044d2:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <MX_SPI2_Init+0x64>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044d8:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <MX_SPI2_Init+0x64>)
 80044da:	2200      	movs	r2, #0
 80044dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80044de:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <MX_SPI2_Init+0x64>)
 80044e0:	220a      	movs	r2, #10
 80044e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80044e4:	4804      	ldr	r0, [pc, #16]	; (80044f8 <MX_SPI2_Init+0x64>)
 80044e6:	f004 f94d 	bl	8008784 <HAL_SPI_Init>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80044f0:	f000 fa1c 	bl	800492c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80044f4:	bf00      	nop
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	20006a94 	.word	0x20006a94
 80044fc:	40003800 	.word	0x40003800

08004500 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08c      	sub	sp, #48	; 0x30
 8004504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004506:	f107 030c 	add.w	r3, r7, #12
 800450a:	2224      	movs	r2, #36	; 0x24
 800450c:	2100      	movs	r1, #0
 800450e:	4618      	mov	r0, r3
 8004510:	f006 fbee 	bl	800acf0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004514:	1d3b      	adds	r3, r7, #4
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800451c:	4b21      	ldr	r3, [pc, #132]	; (80045a4 <MX_TIM2_Init+0xa4>)
 800451e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004522:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004524:	4b1f      	ldr	r3, [pc, #124]	; (80045a4 <MX_TIM2_Init+0xa4>)
 8004526:	2200      	movs	r2, #0
 8004528:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800452a:	4b1e      	ldr	r3, [pc, #120]	; (80045a4 <MX_TIM2_Init+0xa4>)
 800452c:	2200      	movs	r2, #0
 800452e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004530:	4b1c      	ldr	r3, [pc, #112]	; (80045a4 <MX_TIM2_Init+0xa4>)
 8004532:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004536:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8004538:	4b1a      	ldr	r3, [pc, #104]	; (80045a4 <MX_TIM2_Init+0xa4>)
 800453a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800453e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004540:	4b18      	ldr	r3, [pc, #96]	; (80045a4 <MX_TIM2_Init+0xa4>)
 8004542:	2200      	movs	r2, #0
 8004544:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004546:	2301      	movs	r3, #1
 8004548:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800454a:	2302      	movs	r3, #2
 800454c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800454e:	2301      	movs	r3, #1
 8004550:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004552:	2300      	movs	r3, #0
 8004554:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8004556:	2302      	movs	r3, #2
 8004558:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800455a:	2302      	movs	r3, #2
 800455c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800455e:	2301      	movs	r3, #1
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004562:	2300      	movs	r3, #0
 8004564:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8004566:	2302      	movs	r3, #2
 8004568:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800456a:	f107 030c 	add.w	r3, r7, #12
 800456e:	4619      	mov	r1, r3
 8004570:	480c      	ldr	r0, [pc, #48]	; (80045a4 <MX_TIM2_Init+0xa4>)
 8004572:	f005 f8c5 	bl	8009700 <HAL_TIM_Encoder_Init>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800457c:	f000 f9d6 	bl	800492c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004580:	2300      	movs	r3, #0
 8004582:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004584:	2300      	movs	r3, #0
 8004586:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004588:	1d3b      	adds	r3, r7, #4
 800458a:	4619      	mov	r1, r3
 800458c:	4805      	ldr	r0, [pc, #20]	; (80045a4 <MX_TIM2_Init+0xa4>)
 800458e:	f005 fee3 	bl	800a358 <HAL_TIMEx_MasterConfigSynchronization>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004598:	f000 f9c8 	bl	800492c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800459c:	bf00      	nop
 800459e:	3730      	adds	r7, #48	; 0x30
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	20006aec 	.word	0x20006aec

080045a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08e      	sub	sp, #56	; 0x38
 80045ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	605a      	str	r2, [r3, #4]
 80045b8:	609a      	str	r2, [r3, #8]
 80045ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045bc:	f107 0320 	add.w	r3, r7, #32
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045c6:	1d3b      	adds	r3, r7, #4
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	605a      	str	r2, [r3, #4]
 80045ce:	609a      	str	r2, [r3, #8]
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	611a      	str	r2, [r3, #16]
 80045d4:	615a      	str	r2, [r3, #20]
 80045d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80045d8:	4b32      	ldr	r3, [pc, #200]	; (80046a4 <MX_TIM3_Init+0xfc>)
 80045da:	4a33      	ldr	r2, [pc, #204]	; (80046a8 <MX_TIM3_Init+0x100>)
 80045dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80045de:	4b31      	ldr	r3, [pc, #196]	; (80046a4 <MX_TIM3_Init+0xfc>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045e4:	4b2f      	ldr	r3, [pc, #188]	; (80046a4 <MX_TIM3_Init+0xfc>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2544;
 80045ea:	4b2e      	ldr	r3, [pc, #184]	; (80046a4 <MX_TIM3_Init+0xfc>)
 80045ec:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 80045f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045f2:	4b2c      	ldr	r3, [pc, #176]	; (80046a4 <MX_TIM3_Init+0xfc>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045f8:	4b2a      	ldr	r3, [pc, #168]	; (80046a4 <MX_TIM3_Init+0xfc>)
 80045fa:	2280      	movs	r2, #128	; 0x80
 80045fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80045fe:	4829      	ldr	r0, [pc, #164]	; (80046a4 <MX_TIM3_Init+0xfc>)
 8004600:	f004 fe68 	bl	80092d4 <HAL_TIM_Base_Init>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800460a:	f000 f98f 	bl	800492c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800460e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004612:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004614:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004618:	4619      	mov	r1, r3
 800461a:	4822      	ldr	r0, [pc, #136]	; (80046a4 <MX_TIM3_Init+0xfc>)
 800461c:	f005 fae0 	bl	8009be0 <HAL_TIM_ConfigClockSource>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004626:	f000 f981 	bl	800492c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800462a:	481e      	ldr	r0, [pc, #120]	; (80046a4 <MX_TIM3_Init+0xfc>)
 800462c:	f004 ff5e 	bl	80094ec <HAL_TIM_PWM_Init>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004636:	f000 f979 	bl	800492c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800463a:	2300      	movs	r3, #0
 800463c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800463e:	2300      	movs	r3, #0
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004642:	f107 0320 	add.w	r3, r7, #32
 8004646:	4619      	mov	r1, r3
 8004648:	4816      	ldr	r0, [pc, #88]	; (80046a4 <MX_TIM3_Init+0xfc>)
 800464a:	f005 fe85 	bl	800a358 <HAL_TIMEx_MasterConfigSynchronization>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004654:	f000 f96a 	bl	800492c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004658:	2360      	movs	r3, #96	; 0x60
 800465a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004668:	1d3b      	adds	r3, r7, #4
 800466a:	2200      	movs	r2, #0
 800466c:	4619      	mov	r1, r3
 800466e:	480d      	ldr	r0, [pc, #52]	; (80046a4 <MX_TIM3_Init+0xfc>)
 8004670:	f005 f9f4 	bl	8009a5c <HAL_TIM_PWM_ConfigChannel>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800467a:	f000 f957 	bl	800492c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800467e:	1d3b      	adds	r3, r7, #4
 8004680:	2204      	movs	r2, #4
 8004682:	4619      	mov	r1, r3
 8004684:	4807      	ldr	r0, [pc, #28]	; (80046a4 <MX_TIM3_Init+0xfc>)
 8004686:	f005 f9e9 	bl	8009a5c <HAL_TIM_PWM_ConfigChannel>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004690:	f000 f94c 	bl	800492c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004694:	4803      	ldr	r0, [pc, #12]	; (80046a4 <MX_TIM3_Init+0xfc>)
 8004696:	f000 fb87 	bl	8004da8 <HAL_TIM_MspPostInit>

}
 800469a:	bf00      	nop
 800469c:	3738      	adds	r7, #56	; 0x38
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20006b34 	.word	0x20006b34
 80046a8:	40000400 	.word	0x40000400

080046ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08c      	sub	sp, #48	; 0x30
 80046b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80046b2:	f107 030c 	add.w	r3, r7, #12
 80046b6:	2224      	movs	r2, #36	; 0x24
 80046b8:	2100      	movs	r1, #0
 80046ba:	4618      	mov	r0, r3
 80046bc:	f006 fb18 	bl	800acf0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046c0:	1d3b      	adds	r3, r7, #4
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80046c8:	4b20      	ldr	r3, [pc, #128]	; (800474c <MX_TIM4_Init+0xa0>)
 80046ca:	4a21      	ldr	r2, [pc, #132]	; (8004750 <MX_TIM4_Init+0xa4>)
 80046cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80046ce:	4b1f      	ldr	r3, [pc, #124]	; (800474c <MX_TIM4_Init+0xa0>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046d4:	4b1d      	ldr	r3, [pc, #116]	; (800474c <MX_TIM4_Init+0xa0>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80046da:	4b1c      	ldr	r3, [pc, #112]	; (800474c <MX_TIM4_Init+0xa0>)
 80046dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046e2:	4b1a      	ldr	r3, [pc, #104]	; (800474c <MX_TIM4_Init+0xa0>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046e8:	4b18      	ldr	r3, [pc, #96]	; (800474c <MX_TIM4_Init+0xa0>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80046ee:	2301      	movs	r3, #1
 80046f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80046f2:	2302      	movs	r3, #2
 80046f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80046f6:	2301      	movs	r3, #1
 80046f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80046fa:	2300      	movs	r3, #0
 80046fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80046fe:	2302      	movs	r3, #2
 8004700:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004702:	2302      	movs	r3, #2
 8004704:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004706:	2301      	movs	r3, #1
 8004708:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800470a:	2300      	movs	r3, #0
 800470c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 800470e:	2302      	movs	r3, #2
 8004710:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004712:	f107 030c 	add.w	r3, r7, #12
 8004716:	4619      	mov	r1, r3
 8004718:	480c      	ldr	r0, [pc, #48]	; (800474c <MX_TIM4_Init+0xa0>)
 800471a:	f004 fff1 	bl	8009700 <HAL_TIM_Encoder_Init>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004724:	f000 f902 	bl	800492c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004728:	2300      	movs	r3, #0
 800472a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800472c:	2300      	movs	r3, #0
 800472e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004730:	1d3b      	adds	r3, r7, #4
 8004732:	4619      	mov	r1, r3
 8004734:	4805      	ldr	r0, [pc, #20]	; (800474c <MX_TIM4_Init+0xa0>)
 8004736:	f005 fe0f 	bl	800a358 <HAL_TIMEx_MasterConfigSynchronization>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004740:	f000 f8f4 	bl	800492c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004744:	bf00      	nop
 8004746:	3730      	adds	r7, #48	; 0x30
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20006b7c 	.word	0x20006b7c
 8004750:	40000800 	.word	0x40000800

08004754 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004758:	4b11      	ldr	r3, [pc, #68]	; (80047a0 <MX_USART1_UART_Init+0x4c>)
 800475a:	4a12      	ldr	r2, [pc, #72]	; (80047a4 <MX_USART1_UART_Init+0x50>)
 800475c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800475e:	4b10      	ldr	r3, [pc, #64]	; (80047a0 <MX_USART1_UART_Init+0x4c>)
 8004760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004764:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004766:	4b0e      	ldr	r3, [pc, #56]	; (80047a0 <MX_USART1_UART_Init+0x4c>)
 8004768:	2200      	movs	r2, #0
 800476a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800476c:	4b0c      	ldr	r3, [pc, #48]	; (80047a0 <MX_USART1_UART_Init+0x4c>)
 800476e:	2200      	movs	r2, #0
 8004770:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004772:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <MX_USART1_UART_Init+0x4c>)
 8004774:	2200      	movs	r2, #0
 8004776:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8004778:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <MX_USART1_UART_Init+0x4c>)
 800477a:	2208      	movs	r2, #8
 800477c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800477e:	4b08      	ldr	r3, [pc, #32]	; (80047a0 <MX_USART1_UART_Init+0x4c>)
 8004780:	2200      	movs	r2, #0
 8004782:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004784:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <MX_USART1_UART_Init+0x4c>)
 8004786:	2200      	movs	r2, #0
 8004788:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800478a:	4805      	ldr	r0, [pc, #20]	; (80047a0 <MX_USART1_UART_Init+0x4c>)
 800478c:	f005 fe66 	bl	800a45c <HAL_HalfDuplex_Init>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004796:	f000 f8c9 	bl	800492c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800479a:	bf00      	nop
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20006bc4 	.word	0x20006bc4
 80047a4:	40011000 	.word	0x40011000

080047a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80047ac:	4b11      	ldr	r3, [pc, #68]	; (80047f4 <MX_USART6_UART_Init+0x4c>)
 80047ae:	4a12      	ldr	r2, [pc, #72]	; (80047f8 <MX_USART6_UART_Init+0x50>)
 80047b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80047b2:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <MX_USART6_UART_Init+0x4c>)
 80047b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80047b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80047ba:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <MX_USART6_UART_Init+0x4c>)
 80047bc:	2200      	movs	r2, #0
 80047be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80047c0:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <MX_USART6_UART_Init+0x4c>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80047c6:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <MX_USART6_UART_Init+0x4c>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80047cc:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <MX_USART6_UART_Init+0x4c>)
 80047ce:	220c      	movs	r2, #12
 80047d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047d2:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <MX_USART6_UART_Init+0x4c>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80047d8:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <MX_USART6_UART_Init+0x4c>)
 80047da:	2200      	movs	r2, #0
 80047dc:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 80047de:	4805      	ldr	r0, [pc, #20]	; (80047f4 <MX_USART6_UART_Init+0x4c>)
 80047e0:	f005 fe3c 	bl	800a45c <HAL_HalfDuplex_Init>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80047ea:	f000 f89f 	bl	800492c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80047ee:	bf00      	nop
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20006c08 	.word	0x20006c08
 80047f8:	40011400 	.word	0x40011400

080047fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004802:	2300      	movs	r3, #0
 8004804:	607b      	str	r3, [r7, #4]
 8004806:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <MX_DMA_Init+0x3c>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	4a0b      	ldr	r2, [pc, #44]	; (8004838 <MX_DMA_Init+0x3c>)
 800480c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004810:	6313      	str	r3, [r2, #48]	; 0x30
 8004812:	4b09      	ldr	r3, [pc, #36]	; (8004838 <MX_DMA_Init+0x3c>)
 8004814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800481a:	607b      	str	r3, [r7, #4]
 800481c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800481e:	2200      	movs	r2, #0
 8004820:	2100      	movs	r1, #0
 8004822:	203c      	movs	r0, #60	; 0x3c
 8004824:	f001 fde1 	bl	80063ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004828:	203c      	movs	r0, #60	; 0x3c
 800482a:	f001 fdfa 	bl	8006422 <HAL_NVIC_EnableIRQ>

}
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800

0800483c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004842:	f107 030c 	add.w	r3, r7, #12
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	605a      	str	r2, [r3, #4]
 800484c:	609a      	str	r2, [r3, #8]
 800484e:	60da      	str	r2, [r3, #12]
 8004850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004852:	2300      	movs	r3, #0
 8004854:	60bb      	str	r3, [r7, #8]
 8004856:	4b2a      	ldr	r3, [pc, #168]	; (8004900 <MX_GPIO_Init+0xc4>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485a:	4a29      	ldr	r2, [pc, #164]	; (8004900 <MX_GPIO_Init+0xc4>)
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	6313      	str	r3, [r2, #48]	; 0x30
 8004862:	4b27      	ldr	r3, [pc, #156]	; (8004900 <MX_GPIO_Init+0xc4>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	60bb      	str	r3, [r7, #8]
 800486c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	607b      	str	r3, [r7, #4]
 8004872:	4b23      	ldr	r3, [pc, #140]	; (8004900 <MX_GPIO_Init+0xc4>)
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	4a22      	ldr	r2, [pc, #136]	; (8004900 <MX_GPIO_Init+0xc4>)
 8004878:	f043 0302 	orr.w	r3, r3, #2
 800487c:	6313      	str	r3, [r2, #48]	; 0x30
 800487e:	4b20      	ldr	r3, [pc, #128]	; (8004900 <MX_GPIO_Init+0xc4>)
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	607b      	str	r3, [r7, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	603b      	str	r3, [r7, #0]
 800488e:	4b1c      	ldr	r3, [pc, #112]	; (8004900 <MX_GPIO_Init+0xc4>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	4a1b      	ldr	r2, [pc, #108]	; (8004900 <MX_GPIO_Init+0xc4>)
 8004894:	f043 0304 	orr.w	r3, r3, #4
 8004898:	6313      	str	r3, [r2, #48]	; 0x30
 800489a:	4b19      	ldr	r3, [pc, #100]	; (8004900 <MX_GPIO_Init+0xc4>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80048a6:	2200      	movs	r2, #0
 80048a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80048ac:	4815      	ldr	r0, [pc, #84]	; (8004904 <MX_GPIO_Init+0xc8>)
 80048ae:	f002 fb37 	bl	8006f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 80048b2:	2201      	movs	r2, #1
 80048b4:	2110      	movs	r1, #16
 80048b6:	4814      	ldr	r0, [pc, #80]	; (8004908 <MX_GPIO_Init+0xcc>)
 80048b8:	f002 fb32 	bl	8006f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80048bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048c2:	2301      	movs	r3, #1
 80048c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80048ce:	f107 030c 	add.w	r3, r7, #12
 80048d2:	4619      	mov	r1, r3
 80048d4:	480b      	ldr	r0, [pc, #44]	; (8004904 <MX_GPIO_Init+0xc8>)
 80048d6:	f002 f99f 	bl	8006c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 80048da:	2310      	movs	r3, #16
 80048dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048de:	2301      	movs	r3, #1
 80048e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e6:	2303      	movs	r3, #3
 80048e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 80048ea:	f107 030c 	add.w	r3, r7, #12
 80048ee:	4619      	mov	r1, r3
 80048f0:	4805      	ldr	r0, [pc, #20]	; (8004908 <MX_GPIO_Init+0xcc>)
 80048f2:	f002 f991 	bl	8006c18 <HAL_GPIO_Init>

}
 80048f6:	bf00      	nop
 80048f8:	3720      	adds	r7, #32
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40023800 	.word	0x40023800
 8004904:	40020800 	.word	0x40020800
 8004908:	40020000 	.word	0x40020000

0800490c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
adc_flag=1;
 8004914:	4b04      	ldr	r3, [pc, #16]	; (8004928 <HAL_ADC_ConvCpltCallback+0x1c>)
 8004916:	2201      	movs	r2, #1
 8004918:	701a      	strb	r2, [r3, #0]


}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	200032e4 	.word	0x200032e4

0800492c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004930:	b672      	cpsid	i
}
 8004932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004934:	e7fe      	b.n	8004934 <Error_Handler+0x8>
	...

08004938 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800493e:	2300      	movs	r3, #0
 8004940:	607b      	str	r3, [r7, #4]
 8004942:	4b10      	ldr	r3, [pc, #64]	; (8004984 <HAL_MspInit+0x4c>)
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	4a0f      	ldr	r2, [pc, #60]	; (8004984 <HAL_MspInit+0x4c>)
 8004948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800494c:	6453      	str	r3, [r2, #68]	; 0x44
 800494e:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <HAL_MspInit+0x4c>)
 8004950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004956:	607b      	str	r3, [r7, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800495a:	2300      	movs	r3, #0
 800495c:	603b      	str	r3, [r7, #0]
 800495e:	4b09      	ldr	r3, [pc, #36]	; (8004984 <HAL_MspInit+0x4c>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	4a08      	ldr	r2, [pc, #32]	; (8004984 <HAL_MspInit+0x4c>)
 8004964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004968:	6413      	str	r3, [r2, #64]	; 0x40
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_MspInit+0x4c>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40023800 	.word	0x40023800

08004988 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	; 0x28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004990:	f107 0314 	add.w	r3, r7, #20
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	605a      	str	r2, [r3, #4]
 800499a:	609a      	str	r2, [r3, #8]
 800499c:	60da      	str	r2, [r3, #12]
 800499e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a3c      	ldr	r2, [pc, #240]	; (8004a98 <HAL_ADC_MspInit+0x110>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d171      	bne.n	8004a8e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80049aa:	2300      	movs	r3, #0
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	4b3b      	ldr	r3, [pc, #236]	; (8004a9c <HAL_ADC_MspInit+0x114>)
 80049b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b2:	4a3a      	ldr	r2, [pc, #232]	; (8004a9c <HAL_ADC_MspInit+0x114>)
 80049b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b8:	6453      	str	r3, [r2, #68]	; 0x44
 80049ba:	4b38      	ldr	r3, [pc, #224]	; (8004a9c <HAL_ADC_MspInit+0x114>)
 80049bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	4b34      	ldr	r3, [pc, #208]	; (8004a9c <HAL_ADC_MspInit+0x114>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	4a33      	ldr	r2, [pc, #204]	; (8004a9c <HAL_ADC_MspInit+0x114>)
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	6313      	str	r3, [r2, #48]	; 0x30
 80049d6:	4b31      	ldr	r3, [pc, #196]	; (8004a9c <HAL_ADC_MspInit+0x114>)
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	4b2d      	ldr	r3, [pc, #180]	; (8004a9c <HAL_ADC_MspInit+0x114>)
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	4a2c      	ldr	r2, [pc, #176]	; (8004a9c <HAL_ADC_MspInit+0x114>)
 80049ec:	f043 0302 	orr.w	r3, r3, #2
 80049f0:	6313      	str	r3, [r2, #48]	; 0x30
 80049f2:	4b2a      	ldr	r3, [pc, #168]	; (8004a9c <HAL_ADC_MspInit+0x114>)
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	60bb      	str	r3, [r7, #8]
 80049fc:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 80049fe:	2305      	movs	r3, #5
 8004a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a02:	2303      	movs	r3, #3
 8004a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a0a:	f107 0314 	add.w	r3, r7, #20
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4823      	ldr	r0, [pc, #140]	; (8004aa0 <HAL_ADC_MspInit+0x118>)
 8004a12:	f002 f901 	bl	8006c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8004a16:	2303      	movs	r3, #3
 8004a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a22:	f107 0314 	add.w	r3, r7, #20
 8004a26:	4619      	mov	r1, r3
 8004a28:	481e      	ldr	r0, [pc, #120]	; (8004aa4 <HAL_ADC_MspInit+0x11c>)
 8004a2a:	f002 f8f5 	bl	8006c18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8004a2e:	4b1e      	ldr	r3, [pc, #120]	; (8004aa8 <HAL_ADC_MspInit+0x120>)
 8004a30:	4a1e      	ldr	r2, [pc, #120]	; (8004aac <HAL_ADC_MspInit+0x124>)
 8004a32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004a34:	4b1c      	ldr	r3, [pc, #112]	; (8004aa8 <HAL_ADC_MspInit+0x120>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a3a:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <HAL_ADC_MspInit+0x120>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a40:	4b19      	ldr	r3, [pc, #100]	; (8004aa8 <HAL_ADC_MspInit+0x120>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004a46:	4b18      	ldr	r3, [pc, #96]	; (8004aa8 <HAL_ADC_MspInit+0x120>)
 8004a48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a4c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a4e:	4b16      	ldr	r3, [pc, #88]	; (8004aa8 <HAL_ADC_MspInit+0x120>)
 8004a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a54:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a56:	4b14      	ldr	r3, [pc, #80]	; (8004aa8 <HAL_ADC_MspInit+0x120>)
 8004a58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004a5e:	4b12      	ldr	r3, [pc, #72]	; (8004aa8 <HAL_ADC_MspInit+0x120>)
 8004a60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a64:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004a66:	4b10      	ldr	r3, [pc, #64]	; (8004aa8 <HAL_ADC_MspInit+0x120>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a6c:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <HAL_ADC_MspInit+0x120>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004a72:	480d      	ldr	r0, [pc, #52]	; (8004aa8 <HAL_ADC_MspInit+0x120>)
 8004a74:	f001 fcf0 	bl	8006458 <HAL_DMA_Init>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8004a7e:	f7ff ff55 	bl	800492c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <HAL_ADC_MspInit+0x120>)
 8004a86:	639a      	str	r2, [r3, #56]	; 0x38
 8004a88:	4a07      	ldr	r2, [pc, #28]	; (8004aa8 <HAL_ADC_MspInit+0x120>)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004a8e:	bf00      	nop
 8004a90:	3728      	adds	r7, #40	; 0x28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40012000 	.word	0x40012000
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	40020000 	.word	0x40020000
 8004aa4:	40020400 	.word	0x40020400
 8004aa8:	20006988 	.word	0x20006988
 8004aac:	40026470 	.word	0x40026470

08004ab0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08a      	sub	sp, #40	; 0x28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab8:	f107 0314 	add.w	r3, r7, #20
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	605a      	str	r2, [r3, #4]
 8004ac2:	609a      	str	r2, [r3, #8]
 8004ac4:	60da      	str	r2, [r3, #12]
 8004ac6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a22      	ldr	r2, [pc, #136]	; (8004b58 <HAL_I2C_MspInit+0xa8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d13d      	bne.n	8004b4e <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	4b21      	ldr	r3, [pc, #132]	; (8004b5c <HAL_I2C_MspInit+0xac>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	4a20      	ldr	r2, [pc, #128]	; (8004b5c <HAL_I2C_MspInit+0xac>)
 8004adc:	f043 0302 	orr.w	r3, r3, #2
 8004ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ae2:	4b1e      	ldr	r3, [pc, #120]	; (8004b5c <HAL_I2C_MspInit+0xac>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	613b      	str	r3, [r7, #16]
 8004aec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004af4:	2312      	movs	r3, #18
 8004af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004afc:	2303      	movs	r3, #3
 8004afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004b00:	2309      	movs	r3, #9
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b04:	f107 0314 	add.w	r3, r7, #20
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4815      	ldr	r0, [pc, #84]	; (8004b60 <HAL_I2C_MspInit+0xb0>)
 8004b0c:	f002 f884 	bl	8006c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b16:	2312      	movs	r3, #18
 8004b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004b22:	2304      	movs	r3, #4
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b26:	f107 0314 	add.w	r3, r7, #20
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	480c      	ldr	r0, [pc, #48]	; (8004b60 <HAL_I2C_MspInit+0xb0>)
 8004b2e:	f002 f873 	bl	8006c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	4b09      	ldr	r3, [pc, #36]	; (8004b5c <HAL_I2C_MspInit+0xac>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	4a08      	ldr	r2, [pc, #32]	; (8004b5c <HAL_I2C_MspInit+0xac>)
 8004b3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b40:	6413      	str	r3, [r2, #64]	; 0x40
 8004b42:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <HAL_I2C_MspInit+0xac>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004b4e:	bf00      	nop
 8004b50:	3728      	adds	r7, #40	; 0x28
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40005800 	.word	0x40005800
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	40020400 	.word	0x40020400

08004b64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08c      	sub	sp, #48	; 0x30
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b6c:	f107 031c 	add.w	r3, r7, #28
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	605a      	str	r2, [r3, #4]
 8004b76:	609a      	str	r2, [r3, #8]
 8004b78:	60da      	str	r2, [r3, #12]
 8004b7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a32      	ldr	r2, [pc, #200]	; (8004c4c <HAL_SPI_MspInit+0xe8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d12c      	bne.n	8004be0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004b86:	2300      	movs	r3, #0
 8004b88:	61bb      	str	r3, [r7, #24]
 8004b8a:	4b31      	ldr	r3, [pc, #196]	; (8004c50 <HAL_SPI_MspInit+0xec>)
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8e:	4a30      	ldr	r2, [pc, #192]	; (8004c50 <HAL_SPI_MspInit+0xec>)
 8004b90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b94:	6453      	str	r3, [r2, #68]	; 0x44
 8004b96:	4b2e      	ldr	r3, [pc, #184]	; (8004c50 <HAL_SPI_MspInit+0xec>)
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b9e:	61bb      	str	r3, [r7, #24]
 8004ba0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	4b2a      	ldr	r3, [pc, #168]	; (8004c50 <HAL_SPI_MspInit+0xec>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	4a29      	ldr	r2, [pc, #164]	; (8004c50 <HAL_SPI_MspInit+0xec>)
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb2:	4b27      	ldr	r3, [pc, #156]	; (8004c50 <HAL_SPI_MspInit+0xec>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8004bbe:	23e0      	movs	r3, #224	; 0xe0
 8004bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004bce:	2305      	movs	r3, #5
 8004bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bd2:	f107 031c 	add.w	r3, r7, #28
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	481e      	ldr	r0, [pc, #120]	; (8004c54 <HAL_SPI_MspInit+0xf0>)
 8004bda:	f002 f81d 	bl	8006c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004bde:	e031      	b.n	8004c44 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <HAL_SPI_MspInit+0xf4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d12c      	bne.n	8004c44 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	4b18      	ldr	r3, [pc, #96]	; (8004c50 <HAL_SPI_MspInit+0xec>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	4a17      	ldr	r2, [pc, #92]	; (8004c50 <HAL_SPI_MspInit+0xec>)
 8004bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bfa:	4b15      	ldr	r3, [pc, #84]	; (8004c50 <HAL_SPI_MspInit+0xec>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c02:	613b      	str	r3, [r7, #16]
 8004c04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	4b11      	ldr	r3, [pc, #68]	; (8004c50 <HAL_SPI_MspInit+0xec>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	4a10      	ldr	r2, [pc, #64]	; (8004c50 <HAL_SPI_MspInit+0xec>)
 8004c10:	f043 0302 	orr.w	r3, r3, #2
 8004c14:	6313      	str	r3, [r2, #48]	; 0x30
 8004c16:	4b0e      	ldr	r3, [pc, #56]	; (8004c50 <HAL_SPI_MspInit+0xec>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8004c22:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c28:	2302      	movs	r3, #2
 8004c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c30:	2303      	movs	r3, #3
 8004c32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c34:	2305      	movs	r3, #5
 8004c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c38:	f107 031c 	add.w	r3, r7, #28
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4807      	ldr	r0, [pc, #28]	; (8004c5c <HAL_SPI_MspInit+0xf8>)
 8004c40:	f001 ffea 	bl	8006c18 <HAL_GPIO_Init>
}
 8004c44:	bf00      	nop
 8004c46:	3730      	adds	r7, #48	; 0x30
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40013000 	.word	0x40013000
 8004c50:	40023800 	.word	0x40023800
 8004c54:	40020000 	.word	0x40020000
 8004c58:	40003800 	.word	0x40003800
 8004c5c:	40020400 	.word	0x40020400

08004c60 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08c      	sub	sp, #48	; 0x30
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c68:	f107 031c 	add.w	r3, r7, #28
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	605a      	str	r2, [r3, #4]
 8004c72:	609a      	str	r2, [r3, #8]
 8004c74:	60da      	str	r2, [r3, #12]
 8004c76:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c80:	d12d      	bne.n	8004cde <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c82:	2300      	movs	r3, #0
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	4b30      	ldr	r3, [pc, #192]	; (8004d48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	4a2f      	ldr	r2, [pc, #188]	; (8004d48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004c8c:	f043 0301 	orr.w	r3, r3, #1
 8004c90:	6413      	str	r3, [r2, #64]	; 0x40
 8004c92:	4b2d      	ldr	r3, [pc, #180]	; (8004d48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	61bb      	str	r3, [r7, #24]
 8004c9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	4b29      	ldr	r3, [pc, #164]	; (8004d48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca6:	4a28      	ldr	r2, [pc, #160]	; (8004d48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004ca8:	f043 0301 	orr.w	r3, r3, #1
 8004cac:	6313      	str	r3, [r2, #48]	; 0x30
 8004cae:	4b26      	ldr	r3, [pc, #152]	; (8004d48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8004cba:	f248 0302 	movw	r3, #32770	; 0x8002
 8004cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cd0:	f107 031c 	add.w	r3, r7, #28
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	481d      	ldr	r0, [pc, #116]	; (8004d4c <HAL_TIM_Encoder_MspInit+0xec>)
 8004cd8:	f001 ff9e 	bl	8006c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004cdc:	e030      	b.n	8004d40 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1b      	ldr	r2, [pc, #108]	; (8004d50 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d12b      	bne.n	8004d40 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]
 8004cec:	4b16      	ldr	r3, [pc, #88]	; (8004d48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	4a15      	ldr	r2, [pc, #84]	; (8004d48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004cf2:	f043 0304 	orr.w	r3, r3, #4
 8004cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8004cf8:	4b13      	ldr	r3, [pc, #76]	; (8004d48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	4b0f      	ldr	r3, [pc, #60]	; (8004d48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0c:	4a0e      	ldr	r2, [pc, #56]	; (8004d48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004d0e:	f043 0302 	orr.w	r3, r3, #2
 8004d12:	6313      	str	r3, [r2, #48]	; 0x30
 8004d14:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004d20:	23c0      	movs	r3, #192	; 0xc0
 8004d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d24:	2302      	movs	r3, #2
 8004d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004d30:	2302      	movs	r3, #2
 8004d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d34:	f107 031c 	add.w	r3, r7, #28
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4806      	ldr	r0, [pc, #24]	; (8004d54 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004d3c:	f001 ff6c 	bl	8006c18 <HAL_GPIO_Init>
}
 8004d40:	bf00      	nop
 8004d42:	3730      	adds	r7, #48	; 0x30
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	40020000 	.word	0x40020000
 8004d50:	40000800 	.word	0x40000800
 8004d54:	40020400 	.word	0x40020400

08004d58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a0e      	ldr	r2, [pc, #56]	; (8004da0 <HAL_TIM_Base_MspInit+0x48>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d115      	bne.n	8004d96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	4b0d      	ldr	r3, [pc, #52]	; (8004da4 <HAL_TIM_Base_MspInit+0x4c>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	4a0c      	ldr	r2, [pc, #48]	; (8004da4 <HAL_TIM_Base_MspInit+0x4c>)
 8004d74:	f043 0302 	orr.w	r3, r3, #2
 8004d78:	6413      	str	r3, [r2, #64]	; 0x40
 8004d7a:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <HAL_TIM_Base_MspInit+0x4c>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004d86:	2200      	movs	r2, #0
 8004d88:	2100      	movs	r1, #0
 8004d8a:	201d      	movs	r0, #29
 8004d8c:	f001 fb2d 	bl	80063ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004d90:	201d      	movs	r0, #29
 8004d92:	f001 fb46 	bl	8006422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004d96:	bf00      	nop
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40000400 	.word	0x40000400
 8004da4:	40023800 	.word	0x40023800

08004da8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004db0:	f107 030c 	add.w	r3, r7, #12
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	605a      	str	r2, [r3, #4]
 8004dba:	609a      	str	r2, [r3, #8]
 8004dbc:	60da      	str	r2, [r3, #12]
 8004dbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a12      	ldr	r2, [pc, #72]	; (8004e10 <HAL_TIM_MspPostInit+0x68>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d11d      	bne.n	8004e06 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60bb      	str	r3, [r7, #8]
 8004dce:	4b11      	ldr	r3, [pc, #68]	; (8004e14 <HAL_TIM_MspPostInit+0x6c>)
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	4a10      	ldr	r2, [pc, #64]	; (8004e14 <HAL_TIM_MspPostInit+0x6c>)
 8004dd4:	f043 0302 	orr.w	r3, r3, #2
 8004dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dda:	4b0e      	ldr	r3, [pc, #56]	; (8004e14 <HAL_TIM_MspPostInit+0x6c>)
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	60bb      	str	r3, [r7, #8]
 8004de4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004de6:	2330      	movs	r3, #48	; 0x30
 8004de8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dea:	2302      	movs	r3, #2
 8004dec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004df6:	2302      	movs	r3, #2
 8004df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dfa:	f107 030c 	add.w	r3, r7, #12
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4805      	ldr	r0, [pc, #20]	; (8004e18 <HAL_TIM_MspPostInit+0x70>)
 8004e02:	f001 ff09 	bl	8006c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004e06:	bf00      	nop
 8004e08:	3720      	adds	r7, #32
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	40000400 	.word	0x40000400
 8004e14:	40023800 	.word	0x40023800
 8004e18:	40020400 	.word	0x40020400

08004e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b08c      	sub	sp, #48	; 0x30
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e24:	f107 031c 	add.w	r3, r7, #28
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	605a      	str	r2, [r3, #4]
 8004e2e:	609a      	str	r2, [r3, #8]
 8004e30:	60da      	str	r2, [r3, #12]
 8004e32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a33      	ldr	r2, [pc, #204]	; (8004f08 <HAL_UART_MspInit+0xec>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d12d      	bne.n	8004e9a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61bb      	str	r3, [r7, #24]
 8004e42:	4b32      	ldr	r3, [pc, #200]	; (8004f0c <HAL_UART_MspInit+0xf0>)
 8004e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e46:	4a31      	ldr	r2, [pc, #196]	; (8004f0c <HAL_UART_MspInit+0xf0>)
 8004e48:	f043 0310 	orr.w	r3, r3, #16
 8004e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e4e:	4b2f      	ldr	r3, [pc, #188]	; (8004f0c <HAL_UART_MspInit+0xf0>)
 8004e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e52:	f003 0310 	and.w	r3, r3, #16
 8004e56:	61bb      	str	r3, [r7, #24]
 8004e58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	4b2b      	ldr	r3, [pc, #172]	; (8004f0c <HAL_UART_MspInit+0xf0>)
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	4a2a      	ldr	r2, [pc, #168]	; (8004f0c <HAL_UART_MspInit+0xf0>)
 8004e64:	f043 0301 	orr.w	r3, r3, #1
 8004e68:	6313      	str	r3, [r2, #48]	; 0x30
 8004e6a:	4b28      	ldr	r3, [pc, #160]	; (8004f0c <HAL_UART_MspInit+0xf0>)
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e80:	2300      	movs	r3, #0
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e84:	2300      	movs	r3, #0
 8004e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e88:	2307      	movs	r3, #7
 8004e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e8c:	f107 031c 	add.w	r3, r7, #28
 8004e90:	4619      	mov	r1, r3
 8004e92:	481f      	ldr	r0, [pc, #124]	; (8004f10 <HAL_UART_MspInit+0xf4>)
 8004e94:	f001 fec0 	bl	8006c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004e98:	e031      	b.n	8004efe <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a1d      	ldr	r2, [pc, #116]	; (8004f14 <HAL_UART_MspInit+0xf8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d12c      	bne.n	8004efe <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	4b18      	ldr	r3, [pc, #96]	; (8004f0c <HAL_UART_MspInit+0xf0>)
 8004eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eac:	4a17      	ldr	r2, [pc, #92]	; (8004f0c <HAL_UART_MspInit+0xf0>)
 8004eae:	f043 0320 	orr.w	r3, r3, #32
 8004eb2:	6453      	str	r3, [r2, #68]	; 0x44
 8004eb4:	4b15      	ldr	r3, [pc, #84]	; (8004f0c <HAL_UART_MspInit+0xf0>)
 8004eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb8:	f003 0320 	and.w	r3, r3, #32
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <HAL_UART_MspInit+0xf0>)
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	4a10      	ldr	r2, [pc, #64]	; (8004f0c <HAL_UART_MspInit+0xf0>)
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	6313      	str	r3, [r2, #48]	; 0x30
 8004ed0:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <HAL_UART_MspInit+0xf0>)
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004edc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eea:	2300      	movs	r3, #0
 8004eec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004eee:	2308      	movs	r3, #8
 8004ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ef2:	f107 031c 	add.w	r3, r7, #28
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4805      	ldr	r0, [pc, #20]	; (8004f10 <HAL_UART_MspInit+0xf4>)
 8004efa:	f001 fe8d 	bl	8006c18 <HAL_GPIO_Init>
}
 8004efe:	bf00      	nop
 8004f00:	3730      	adds	r7, #48	; 0x30
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	40011000 	.word	0x40011000
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	40020000 	.word	0x40020000
 8004f14:	40011400 	.word	0x40011400

08004f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f1c:	e7fe      	b.n	8004f1c <NMI_Handler+0x4>

08004f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f22:	e7fe      	b.n	8004f22 <HardFault_Handler+0x4>

08004f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f28:	e7fe      	b.n	8004f28 <MemManage_Handler+0x4>

08004f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f2e:	e7fe      	b.n	8004f2e <BusFault_Handler+0x4>

08004f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f34:	e7fe      	b.n	8004f34 <UsageFault_Handler+0x4>

08004f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f36:	b480      	push	{r7}
 8004f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f3a:	bf00      	nop
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f48:	bf00      	nop
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f52:	b480      	push	{r7}
 8004f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f56:	bf00      	nop
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f64:	f000 f8a8 	bl	80050b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f68:	bf00      	nop
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004f70:	4802      	ldr	r0, [pc, #8]	; (8004f7c <TIM3_IRQHandler+0x10>)
 8004f72:	f004 fc6b 	bl	800984c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004f76:	bf00      	nop
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20006b34 	.word	0x20006b34

08004f80 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f84:	4802      	ldr	r0, [pc, #8]	; (8004f90 <DMA2_Stream4_IRQHandler+0x10>)
 8004f86:	f001 fbdd 	bl	8006744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8004f8a:	bf00      	nop
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20006988 	.word	0x20006988

08004f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f98:	4b08      	ldr	r3, [pc, #32]	; (8004fbc <SystemInit+0x28>)
 8004f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9e:	4a07      	ldr	r2, [pc, #28]	; (8004fbc <SystemInit+0x28>)
 8004fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004fa8:	4b04      	ldr	r3, [pc, #16]	; (8004fbc <SystemInit+0x28>)
 8004faa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004fae:	609a      	str	r2, [r3, #8]
#endif
}
 8004fb0:	bf00      	nop
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	e000ed00 	.word	0xe000ed00

08004fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ff8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004fc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004fc6:	e003      	b.n	8004fd0 <LoopCopyDataInit>

08004fc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004fc8:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004fca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004fcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004fce:	3104      	adds	r1, #4

08004fd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004fd0:	480b      	ldr	r0, [pc, #44]	; (8005000 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004fd2:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004fd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004fd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004fd8:	d3f6      	bcc.n	8004fc8 <CopyDataInit>
  ldr  r2, =_sbss
 8004fda:	4a0b      	ldr	r2, [pc, #44]	; (8005008 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004fdc:	e002      	b.n	8004fe4 <LoopFillZerobss>

08004fde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004fde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004fe0:	f842 3b04 	str.w	r3, [r2], #4

08004fe4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004fe4:	4b09      	ldr	r3, [pc, #36]	; (800500c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004fe6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004fe8:	d3f9      	bcc.n	8004fde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004fea:	f7ff ffd3 	bl	8004f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004fee:	f005 fe4d 	bl	800ac8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ff2:	f7fe fba1 	bl	8003738 <main>
  bx  lr    
 8004ff6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ff8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004ffc:	0800c9f8 	.word	0x0800c9f8
  ldr  r0, =_sdata
 8005000:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005004:	20000400 	.word	0x20000400
  ldr  r2, =_sbss
 8005008:	20000400 	.word	0x20000400
  ldr  r3, = _ebss
 800500c:	20006c50 	.word	0x20006c50

08005010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005010:	e7fe      	b.n	8005010 <ADC_IRQHandler>
	...

08005014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005018:	4b0e      	ldr	r3, [pc, #56]	; (8005054 <HAL_Init+0x40>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a0d      	ldr	r2, [pc, #52]	; (8005054 <HAL_Init+0x40>)
 800501e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005022:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005024:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <HAL_Init+0x40>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a0a      	ldr	r2, [pc, #40]	; (8005054 <HAL_Init+0x40>)
 800502a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800502e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005030:	4b08      	ldr	r3, [pc, #32]	; (8005054 <HAL_Init+0x40>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a07      	ldr	r2, [pc, #28]	; (8005054 <HAL_Init+0x40>)
 8005036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800503a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800503c:	2003      	movs	r0, #3
 800503e:	f001 f9c9 	bl	80063d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005042:	2000      	movs	r0, #0
 8005044:	f000 f808 	bl	8005058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005048:	f7ff fc76 	bl	8004938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	40023c00 	.word	0x40023c00

08005058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005060:	4b12      	ldr	r3, [pc, #72]	; (80050ac <HAL_InitTick+0x54>)
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	4b12      	ldr	r3, [pc, #72]	; (80050b0 <HAL_InitTick+0x58>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	4619      	mov	r1, r3
 800506a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800506e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005072:	fbb2 f3f3 	udiv	r3, r2, r3
 8005076:	4618      	mov	r0, r3
 8005078:	f001 f9e1 	bl	800643e <HAL_SYSTICK_Config>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e00e      	b.n	80050a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b0f      	cmp	r3, #15
 800508a:	d80a      	bhi.n	80050a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800508c:	2200      	movs	r2, #0
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	f04f 30ff 	mov.w	r0, #4294967295
 8005094:	f001 f9a9 	bl	80063ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005098:	4a06      	ldr	r2, [pc, #24]	; (80050b4 <HAL_InitTick+0x5c>)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800509e:	2300      	movs	r3, #0
 80050a0:	e000      	b.n	80050a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	20000390 	.word	0x20000390
 80050b0:	20000398 	.word	0x20000398
 80050b4:	20000394 	.word	0x20000394

080050b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050bc:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <HAL_IncTick+0x20>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	461a      	mov	r2, r3
 80050c2:	4b06      	ldr	r3, [pc, #24]	; (80050dc <HAL_IncTick+0x24>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4413      	add	r3, r2
 80050c8:	4a04      	ldr	r2, [pc, #16]	; (80050dc <HAL_IncTick+0x24>)
 80050ca:	6013      	str	r3, [r2, #0]
}
 80050cc:	bf00      	nop
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	20000398 	.word	0x20000398
 80050dc:	20006c4c 	.word	0x20006c4c

080050e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  return uwTick;
 80050e4:	4b03      	ldr	r3, [pc, #12]	; (80050f4 <HAL_GetTick+0x14>)
 80050e6:	681b      	ldr	r3, [r3, #0]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	20006c4c 	.word	0x20006c4c

080050f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005100:	f7ff ffee 	bl	80050e0 <HAL_GetTick>
 8005104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005110:	d005      	beq.n	800511e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005112:	4b0a      	ldr	r3, [pc, #40]	; (800513c <HAL_Delay+0x44>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800511e:	bf00      	nop
 8005120:	f7ff ffde 	bl	80050e0 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	429a      	cmp	r2, r3
 800512e:	d8f7      	bhi.n	8005120 <HAL_Delay+0x28>
  {
  }
}
 8005130:	bf00      	nop
 8005132:	bf00      	nop
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20000398 	.word	0x20000398

08005140 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e033      	b.n	80051be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d109      	bne.n	8005172 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7ff fc12 	bl	8004988 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f003 0310 	and.w	r3, r3, #16
 800517a:	2b00      	cmp	r3, #0
 800517c:	d118      	bne.n	80051b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005186:	f023 0302 	bic.w	r3, r3, #2
 800518a:	f043 0202 	orr.w	r2, r3, #2
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fbe8 	bl	8005968 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f023 0303 	bic.w	r3, r3, #3
 80051a6:	f043 0201 	orr.w	r2, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	641a      	str	r2, [r3, #64]	; 0x40
 80051ae:	e001      	b.n	80051b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d101      	bne.n	80051e2 <HAL_ADC_Start+0x1a>
 80051de:	2302      	movs	r3, #2
 80051e0:	e097      	b.n	8005312 <HAL_ADC_Start+0x14a>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d018      	beq.n	800522a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005208:	4b45      	ldr	r3, [pc, #276]	; (8005320 <HAL_ADC_Start+0x158>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a45      	ldr	r2, [pc, #276]	; (8005324 <HAL_ADC_Start+0x15c>)
 800520e:	fba2 2303 	umull	r2, r3, r2, r3
 8005212:	0c9a      	lsrs	r2, r3, #18
 8005214:	4613      	mov	r3, r2
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	4413      	add	r3, r2
 800521a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800521c:	e002      	b.n	8005224 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	3b01      	subs	r3, #1
 8005222:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1f9      	bne.n	800521e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b01      	cmp	r3, #1
 8005236:	d15f      	bne.n	80052f8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005240:	f023 0301 	bic.w	r3, r3, #1
 8005244:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005256:	2b00      	cmp	r3, #0
 8005258:	d007      	beq.n	800526a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005262:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005276:	d106      	bne.n	8005286 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527c:	f023 0206 	bic.w	r2, r3, #6
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	645a      	str	r2, [r3, #68]	; 0x44
 8005284:	e002      	b.n	800528c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005294:	4b24      	ldr	r3, [pc, #144]	; (8005328 <HAL_ADC_Start+0x160>)
 8005296:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80052a0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f003 031f 	and.w	r3, r3, #31
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10f      	bne.n	80052ce <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d129      	bne.n	8005310 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689a      	ldr	r2, [r3, #8]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80052ca:	609a      	str	r2, [r3, #8]
 80052cc:	e020      	b.n	8005310 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a16      	ldr	r2, [pc, #88]	; (800532c <HAL_ADC_Start+0x164>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d11b      	bne.n	8005310 <HAL_ADC_Start+0x148>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d114      	bne.n	8005310 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80052f4:	609a      	str	r2, [r3, #8]
 80052f6:	e00b      	b.n	8005310 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	f043 0210 	orr.w	r2, r3, #16
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005308:	f043 0201 	orr.w	r2, r3, #1
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	20000390 	.word	0x20000390
 8005324:	431bde83 	.word	0x431bde83
 8005328:	40012300 	.word	0x40012300
 800532c:	40012000 	.word	0x40012000

08005330 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800534c:	d113      	bne.n	8005376 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800535c:	d10b      	bne.n	8005376 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	f043 0220 	orr.w	r2, r3, #32
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e063      	b.n	800543e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005376:	f7ff feb3 	bl	80050e0 <HAL_GetTick>
 800537a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800537c:	e021      	b.n	80053c2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005384:	d01d      	beq.n	80053c2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <HAL_ADC_PollForConversion+0x6c>
 800538c:	f7ff fea8 	bl	80050e0 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d212      	bcs.n	80053c2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d00b      	beq.n	80053c2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f043 0204 	orr.w	r2, r3, #4
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e03d      	b.n	800543e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d1d6      	bne.n	800537e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0212 	mvn.w	r2, #18
 80053d8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d123      	bne.n	800543c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d11f      	bne.n	800543c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005406:	2b00      	cmp	r3, #0
 8005408:	d006      	beq.n	8005418 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005414:	2b00      	cmp	r3, #0
 8005416:	d111      	bne.n	800543c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d105      	bne.n	800543c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	f043 0201 	orr.w	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800545e:	2b01      	cmp	r3, #1
 8005460:	d101      	bne.n	8005466 <HAL_ADC_Start_DMA+0x1e>
 8005462:	2302      	movs	r3, #2
 8005464:	e0ce      	b.n	8005604 <HAL_ADC_Start_DMA+0x1bc>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b01      	cmp	r3, #1
 800547a:	d018      	beq.n	80054ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0201 	orr.w	r2, r2, #1
 800548a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800548c:	4b5f      	ldr	r3, [pc, #380]	; (800560c <HAL_ADC_Start_DMA+0x1c4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a5f      	ldr	r2, [pc, #380]	; (8005610 <HAL_ADC_Start_DMA+0x1c8>)
 8005492:	fba2 2303 	umull	r2, r3, r2, r3
 8005496:	0c9a      	lsrs	r2, r3, #18
 8005498:	4613      	mov	r3, r2
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	4413      	add	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80054a0:	e002      	b.n	80054a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f9      	bne.n	80054a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054bc:	d107      	bne.n	80054ce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b01      	cmp	r3, #1
 80054da:	f040 8086 	bne.w	80055ea <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80054e6:	f023 0301 	bic.w	r3, r3, #1
 80054ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d007      	beq.n	8005510 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005504:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005508:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551c:	d106      	bne.n	800552c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005522:	f023 0206 	bic.w	r2, r3, #6
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	645a      	str	r2, [r3, #68]	; 0x44
 800552a:	e002      	b.n	8005532 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800553a:	4b36      	ldr	r3, [pc, #216]	; (8005614 <HAL_ADC_Start_DMA+0x1cc>)
 800553c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005542:	4a35      	ldr	r2, [pc, #212]	; (8005618 <HAL_ADC_Start_DMA+0x1d0>)
 8005544:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	4a34      	ldr	r2, [pc, #208]	; (800561c <HAL_ADC_Start_DMA+0x1d4>)
 800554c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005552:	4a33      	ldr	r2, [pc, #204]	; (8005620 <HAL_ADC_Start_DMA+0x1d8>)
 8005554:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800555e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800556e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800557e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	334c      	adds	r3, #76	; 0x4c
 800558a:	4619      	mov	r1, r3
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f001 f810 	bl	80065b4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f003 031f 	and.w	r3, r3, #31
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10f      	bne.n	80055c0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d129      	bne.n	8005602 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80055bc:	609a      	str	r2, [r3, #8]
 80055be:	e020      	b.n	8005602 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a17      	ldr	r2, [pc, #92]	; (8005624 <HAL_ADC_Start_DMA+0x1dc>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d11b      	bne.n	8005602 <HAL_ADC_Start_DMA+0x1ba>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d114      	bne.n	8005602 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80055e6:	609a      	str	r2, [r3, #8]
 80055e8:	e00b      	b.n	8005602 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f043 0210 	orr.w	r2, r3, #16
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fa:	f043 0201 	orr.w	r2, r3, #1
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	20000390 	.word	0x20000390
 8005610:	431bde83 	.word	0x431bde83
 8005614:	40012300 	.word	0x40012300
 8005618:	08005b61 	.word	0x08005b61
 800561c:	08005c1b 	.word	0x08005c1b
 8005620:	08005c37 	.word	0x08005c37
 8005624:	40012000 	.word	0x40012000

08005628 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_ADC_Stop_DMA+0x1a>
 800563e:	2302      	movs	r3, #2
 8005640:	e048      	b.n	80056d4 <HAL_ADC_Stop_DMA+0xac>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0201 	bic.w	r2, r2, #1
 8005658:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	d130      	bne.n	80056ca <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005676:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d10f      	bne.n	80056a6 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568a:	4618      	mov	r0, r3
 800568c:	f000 ffea 	bl	8006664 <HAL_DMA_Abort>
 8005690:	4603      	mov	r3, r0
 8005692:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80056b4:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80056be:	f023 0301 	bic.w	r3, r3, #1
 80056c2:	f043 0201 	orr.w	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_ADC_ConfigChannel+0x1c>
 800571c:	2302      	movs	r3, #2
 800571e:	e113      	b.n	8005948 <HAL_ADC_ConfigChannel+0x244>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b09      	cmp	r3, #9
 800572e:	d925      	bls.n	800577c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68d9      	ldr	r1, [r3, #12]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	b29b      	uxth	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	4613      	mov	r3, r2
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	4413      	add	r3, r2
 8005744:	3b1e      	subs	r3, #30
 8005746:	2207      	movs	r2, #7
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	43da      	mvns	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	400a      	ands	r2, r1
 8005754:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68d9      	ldr	r1, [r3, #12]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	b29b      	uxth	r3, r3
 8005766:	4618      	mov	r0, r3
 8005768:	4603      	mov	r3, r0
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	4403      	add	r3, r0
 800576e:	3b1e      	subs	r3, #30
 8005770:	409a      	lsls	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	60da      	str	r2, [r3, #12]
 800577a:	e022      	b.n	80057c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6919      	ldr	r1, [r3, #16]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	b29b      	uxth	r3, r3
 8005788:	461a      	mov	r2, r3
 800578a:	4613      	mov	r3, r2
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	4413      	add	r3, r2
 8005790:	2207      	movs	r2, #7
 8005792:	fa02 f303 	lsl.w	r3, r2, r3
 8005796:	43da      	mvns	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	400a      	ands	r2, r1
 800579e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6919      	ldr	r1, [r3, #16]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	4618      	mov	r0, r3
 80057b2:	4603      	mov	r3, r0
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	4403      	add	r3, r0
 80057b8:	409a      	lsls	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2b06      	cmp	r3, #6
 80057c8:	d824      	bhi.n	8005814 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	4613      	mov	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	3b05      	subs	r3, #5
 80057dc:	221f      	movs	r2, #31
 80057de:	fa02 f303 	lsl.w	r3, r2, r3
 80057e2:	43da      	mvns	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	400a      	ands	r2, r1
 80057ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	4618      	mov	r0, r3
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	3b05      	subs	r3, #5
 8005806:	fa00 f203 	lsl.w	r2, r0, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	635a      	str	r2, [r3, #52]	; 0x34
 8005812:	e04c      	b.n	80058ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b0c      	cmp	r3, #12
 800581a:	d824      	bhi.n	8005866 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	4613      	mov	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	3b23      	subs	r3, #35	; 0x23
 800582e:	221f      	movs	r2, #31
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	43da      	mvns	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	400a      	ands	r2, r1
 800583c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	b29b      	uxth	r3, r3
 800584a:	4618      	mov	r0, r3
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	3b23      	subs	r3, #35	; 0x23
 8005858:	fa00 f203 	lsl.w	r2, r0, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
 8005864:	e023      	b.n	80058ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	3b41      	subs	r3, #65	; 0x41
 8005878:	221f      	movs	r2, #31
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	43da      	mvns	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	400a      	ands	r2, r1
 8005886:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	b29b      	uxth	r3, r3
 8005894:	4618      	mov	r0, r3
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	4613      	mov	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	3b41      	subs	r3, #65	; 0x41
 80058a2:	fa00 f203 	lsl.w	r2, r0, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80058ae:	4b29      	ldr	r3, [pc, #164]	; (8005954 <HAL_ADC_ConfigChannel+0x250>)
 80058b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a28      	ldr	r2, [pc, #160]	; (8005958 <HAL_ADC_ConfigChannel+0x254>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d10f      	bne.n	80058dc <HAL_ADC_ConfigChannel+0x1d8>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b12      	cmp	r3, #18
 80058c2:	d10b      	bne.n	80058dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a1d      	ldr	r2, [pc, #116]	; (8005958 <HAL_ADC_ConfigChannel+0x254>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d12b      	bne.n	800593e <HAL_ADC_ConfigChannel+0x23a>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a1c      	ldr	r2, [pc, #112]	; (800595c <HAL_ADC_ConfigChannel+0x258>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <HAL_ADC_ConfigChannel+0x1f4>
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b11      	cmp	r3, #17
 80058f6:	d122      	bne.n	800593e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a11      	ldr	r2, [pc, #68]	; (800595c <HAL_ADC_ConfigChannel+0x258>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d111      	bne.n	800593e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800591a:	4b11      	ldr	r3, [pc, #68]	; (8005960 <HAL_ADC_ConfigChannel+0x25c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a11      	ldr	r2, [pc, #68]	; (8005964 <HAL_ADC_ConfigChannel+0x260>)
 8005920:	fba2 2303 	umull	r2, r3, r2, r3
 8005924:	0c9a      	lsrs	r2, r3, #18
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005930:	e002      	b.n	8005938 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	3b01      	subs	r3, #1
 8005936:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f9      	bne.n	8005932 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	40012300 	.word	0x40012300
 8005958:	40012000 	.word	0x40012000
 800595c:	10000012 	.word	0x10000012
 8005960:	20000390 	.word	0x20000390
 8005964:	431bde83 	.word	0x431bde83

08005968 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005970:	4b79      	ldr	r3, [pc, #484]	; (8005b58 <ADC_Init+0x1f0>)
 8005972:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	431a      	orrs	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800599c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6859      	ldr	r1, [r3, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	021a      	lsls	r2, r3, #8
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80059c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6859      	ldr	r1, [r3, #4]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6899      	ldr	r1, [r3, #8]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fa:	4a58      	ldr	r2, [pc, #352]	; (8005b5c <ADC_Init+0x1f4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d022      	beq.n	8005a46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6899      	ldr	r1, [r3, #8]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689a      	ldr	r2, [r3, #8]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6899      	ldr	r1, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	609a      	str	r2, [r3, #8]
 8005a44:	e00f      	b.n	8005a66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0202 	bic.w	r2, r2, #2
 8005a74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6899      	ldr	r1, [r3, #8]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	7e1b      	ldrb	r3, [r3, #24]
 8005a80:	005a      	lsls	r2, r3, #1
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d01b      	beq.n	8005acc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aa2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005ab2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6859      	ldr	r1, [r3, #4]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	035a      	lsls	r2, r3, #13
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]
 8005aca:	e007      	b.n	8005adc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ada:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005aea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	3b01      	subs	r3, #1
 8005af8:	051a      	lsls	r2, r3, #20
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6899      	ldr	r1, [r3, #8]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b1e:	025a      	lsls	r2, r3, #9
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689a      	ldr	r2, [r3, #8]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6899      	ldr	r1, [r3, #8]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	029a      	lsls	r2, r3, #10
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	609a      	str	r2, [r3, #8]
}
 8005b4c:	bf00      	nop
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	40012300 	.word	0x40012300
 8005b5c:	0f000001 	.word	0x0f000001

08005b60 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d13c      	bne.n	8005bf4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d12b      	bne.n	8005bec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d127      	bne.n	8005bec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d006      	beq.n	8005bb8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d119      	bne.n	8005bec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0220 	bic.w	r2, r2, #32
 8005bc6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d105      	bne.n	8005bec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	f043 0201 	orr.w	r2, r3, #1
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f7fe fe8d 	bl	800490c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005bf2:	e00e      	b.n	8005c12 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f7ff fd75 	bl	80056f0 <HAL_ADC_ErrorCallback>
}
 8005c06:	e004      	b.n	8005c12 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	4798      	blx	r3
}
 8005c12:	bf00      	nop
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f7ff fd57 	bl	80056dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c2e:	bf00      	nop
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b084      	sub	sp, #16
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2240      	movs	r2, #64	; 0x40
 8005c48:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4e:	f043 0204 	orr.w	r2, r3, #4
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f7ff fd4a 	bl	80056f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c5c:	bf00      	nop
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	2300      	movs	r3, #0
 8005c76:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d101      	bne.n	8005c86 <HAL_ADCEx_InjectedStart+0x22>
 8005c82:	2302      	movs	r3, #2
 8005c84:	e0aa      	b.n	8005ddc <HAL_ADCEx_InjectedStart+0x178>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d018      	beq.n	8005cce <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689a      	ldr	r2, [r3, #8]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0201 	orr.w	r2, r2, #1
 8005caa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005cac:	4b4e      	ldr	r3, [pc, #312]	; (8005de8 <HAL_ADCEx_InjectedStart+0x184>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a4e      	ldr	r2, [pc, #312]	; (8005dec <HAL_ADCEx_InjectedStart+0x188>)
 8005cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb6:	0c9a      	lsrs	r2, r3, #18
 8005cb8:	4613      	mov	r3, r2
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	4413      	add	r3, r2
 8005cbe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005cc0:	e002      	b.n	8005cc8 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1f9      	bne.n	8005cc2 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d172      	bne.n	8005dc2 <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005ce4:	f023 0301 	bic.w	r3, r3, #1
 8005ce8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d102      	bne.n	8005d02 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f06f 0204 	mvn.w	r2, #4
 8005d12:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d14:	4b36      	ldr	r3, [pc, #216]	; (8005df0 <HAL_ADCEx_InjectedStart+0x18c>)
 8005d16:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f003 031f 	and.w	r3, r3, #31
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d124      	bne.n	8005d6e <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	bf0c      	ite	eq
 8005d32:	2301      	moveq	r3, #1
 8005d34:	2300      	movne	r3, #0
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	bf0c      	ite	eq
 8005d48:	2301      	moveq	r3, #1
 8005d4a:	2300      	movne	r3, #0
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d041      	beq.n	8005dda <HAL_ADCEx_InjectedStart+0x176>
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d03e      	beq.n	8005dda <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689a      	ldr	r2, [r3, #8]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005d6a:	609a      	str	r2, [r3, #8]
 8005d6c:	e035      	b.n	8005dda <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	bf0c      	ite	eq
 8005d7c:	2301      	moveq	r3, #1
 8005d7e:	2300      	movne	r3, #0
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	bf0c      	ite	eq
 8005d92:	2301      	moveq	r3, #1
 8005d94:	2300      	movne	r3, #0
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a15      	ldr	r2, [pc, #84]	; (8005df4 <HAL_ADCEx_InjectedStart+0x190>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d11a      	bne.n	8005dda <HAL_ADCEx_InjectedStart+0x176>
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d017      	beq.n	8005dda <HAL_ADCEx_InjectedStart+0x176>
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d014      	beq.n	8005dda <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005dbe:	609a      	str	r2, [r3, #8]
 8005dc0:	e00b      	b.n	8005dda <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	f043 0210 	orr.w	r2, r3, #16
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd2:	f043 0201 	orr.w	r2, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	371c      	adds	r7, #28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	20000390 	.word	0x20000390
 8005dec:	431bde83 	.word	0x431bde83
 8005df0:	40012300 	.word	0x40012300
 8005df4:	40012000 	.word	0x40012000

08005df8 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d101      	bne.n	8005e12 <HAL_ADCEx_InjectedStop+0x1a>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e037      	b.n	8005e82 <HAL_ADCEx_InjectedStop+0x8a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d120      	bne.n	8005e68 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d119      	bne.n	8005e68 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0201 	bic.w	r2, r2, #1
 8005e42:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d112      	bne.n	8005e78 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005e5a:	f023 0301 	bic.w	r3, r3, #1
 8005e5e:	f043 0201 	orr.w	r2, r3, #1
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005e66:	e007      	b.n	8005e78 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6c:	f043 0220 	orr.w	r2, r3, #32
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
	...

08005e90 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f06f 0204 	mvn.w	r2, #4
 8005ea6:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d81f      	bhi.n	8005ef0 <HAL_ADCEx_InjectedGetValue+0x60>
 8005eb0:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <HAL_ADCEx_InjectedGetValue+0x28>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005ee7 	.word	0x08005ee7
 8005ebc:	08005edd 	.word	0x08005edd
 8005ec0:	08005ed3 	.word	0x08005ed3
 8005ec4:	08005ec9 	.word	0x08005ec9
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ece:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8005ed0:	e00f      	b.n	8005ef2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed8:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8005eda:	e00a      	b.n	8005ef2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	60fb      	str	r3, [r7, #12]
    }
    break;
 8005ee4:	e005      	b.n	8005ef2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eec:	60fb      	str	r3, [r7, #12]
    }
    break;
 8005eee:	e000      	b.n	8005ef2 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8005ef0:	bf00      	nop
  }
  return tmp;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e17e      	b.n	8006216 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b09      	cmp	r3, #9
 8005f26:	d925      	bls.n	8005f74 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68d9      	ldr	r1, [r3, #12]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	461a      	mov	r2, r3
 8005f36:	4613      	mov	r3, r2
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	4413      	add	r3, r2
 8005f3c:	3b1e      	subs	r3, #30
 8005f3e:	2207      	movs	r2, #7
 8005f40:	fa02 f303 	lsl.w	r3, r2, r3
 8005f44:	43da      	mvns	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	400a      	ands	r2, r1
 8005f4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68d9      	ldr	r1, [r3, #12]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	4618      	mov	r0, r3
 8005f60:	4603      	mov	r3, r0
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	4403      	add	r3, r0
 8005f66:	3b1e      	subs	r3, #30
 8005f68:	409a      	lsls	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	60da      	str	r2, [r3, #12]
 8005f72:	e022      	b.n	8005fba <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6919      	ldr	r1, [r3, #16]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	4613      	mov	r3, r2
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	4413      	add	r3, r2
 8005f88:	2207      	movs	r2, #7
 8005f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8e:	43da      	mvns	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	400a      	ands	r2, r1
 8005f96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6919      	ldr	r1, [r3, #16]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	4618      	mov	r0, r3
 8005faa:	4603      	mov	r3, r0
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	4403      	add	r3, r0
 8005fb0:	409a      	lsls	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005fc8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	051a      	lsls	r2, r3, #20
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	3303      	adds	r3, #3
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	221f      	movs	r2, #31
 8006004:	fa02 f303 	lsl.w	r3, r2, r3
 8006008:	43da      	mvns	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	400a      	ands	r2, r1
 8006010:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	b29b      	uxth	r3, r3
 800601e:	4618      	mov	r0, r3
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	b2da      	uxtb	r2, r3
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	b2db      	uxtb	r3, r3
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	b2db      	uxtb	r3, r3
 8006030:	3303      	adds	r3, #3
 8006032:	b2db      	uxtb	r3, r3
 8006034:	461a      	mov	r2, r3
 8006036:	4613      	mov	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	fa00 f203 	lsl.w	r2, r0, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	4a75      	ldr	r2, [pc, #468]	; (8006224 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d022      	beq.n	8006098 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8006060:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6899      	ldr	r1, [r3, #8]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	699a      	ldr	r2, [r3, #24]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689a      	ldr	r2, [r3, #8]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006082:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6899      	ldr	r1, [r3, #8]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	69da      	ldr	r2, [r3, #28]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	609a      	str	r2, [r3, #8]
 8006096:	e00f      	b.n	80060b8 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80060a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80060b6:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	7d5b      	ldrb	r3, [r3, #21]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060ce:	605a      	str	r2, [r3, #4]
 80060d0:	e007      	b.n	80060e2 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060e0:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	7d1b      	ldrb	r3, [r3, #20]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d008      	beq.n	80060fc <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060f8:	605a      	str	r2, [r3, #4]
 80060fa:	e007      	b.n	800610c <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800610a:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	2b03      	cmp	r3, #3
 8006112:	d02e      	beq.n	8006172 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8006114:	2b03      	cmp	r3, #3
 8006116:	d840      	bhi.n	800619a <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8006118:	2b01      	cmp	r3, #1
 800611a:	d002      	beq.n	8006122 <HAL_ADCEx_InjectedConfigChannel+0x222>
 800611c:	2b02      	cmp	r3, #2
 800611e:	d014      	beq.n	800614a <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8006120:	e03b      	b.n	800619a <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	6812      	ldr	r2, [r2, #0]
 800612c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006130:	f023 030f 	bic.w	r3, r3, #15
 8006134:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6959      	ldr	r1, [r3, #20]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	615a      	str	r2, [r3, #20]
      break;
 8006148:	e03b      	b.n	80061c2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	6812      	ldr	r2, [r2, #0]
 8006154:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006158:	f023 030f 	bic.w	r3, r3, #15
 800615c:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6999      	ldr	r1, [r3, #24]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	68da      	ldr	r2, [r3, #12]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	619a      	str	r2, [r3, #24]
      break;
 8006170:	e027      	b.n	80061c2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6812      	ldr	r2, [r2, #0]
 800617c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006180:	f023 030f 	bic.w	r3, r3, #15
 8006184:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69d9      	ldr	r1, [r3, #28]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	61da      	str	r2, [r3, #28]
      break;
 8006198:	e013      	b.n	80061c2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6812      	ldr	r2, [r2, #0]
 80061a4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80061a8:	f023 030f 	bic.w	r3, r3, #15
 80061ac:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6a19      	ldr	r1, [r3, #32]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	68da      	ldr	r2, [r3, #12]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	621a      	str	r2, [r3, #32]
      break;
 80061c0:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80061c2:	4b19      	ldr	r3, [pc, #100]	; (8006228 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80061c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a18      	ldr	r2, [pc, #96]	; (800622c <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d109      	bne.n	80061e4 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b12      	cmp	r3, #18
 80061d6:	d105      	bne.n	80061e4 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a10      	ldr	r2, [pc, #64]	; (800622c <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d10e      	bne.n	800620c <HAL_ADCEx_InjectedConfigChannel+0x30c>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a0f      	ldr	r2, [pc, #60]	; (8006230 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d003      	beq.n	8006200 <HAL_ADCEx_InjectedConfigChannel+0x300>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b11      	cmp	r3, #17
 80061fe:	d105      	bne.n	800620c <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	000f0001 	.word	0x000f0001
 8006228:	40012300 	.word	0x40012300
 800622c:	40012000 	.word	0x40012000
 8006230:	10000012 	.word	0x10000012

08006234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f003 0307 	and.w	r3, r3, #7
 8006242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006244:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <__NVIC_SetPriorityGrouping+0x44>)
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006250:	4013      	ands	r3, r2
 8006252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800625c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006266:	4a04      	ldr	r2, [pc, #16]	; (8006278 <__NVIC_SetPriorityGrouping+0x44>)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	60d3      	str	r3, [r2, #12]
}
 800626c:	bf00      	nop
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	e000ed00 	.word	0xe000ed00

0800627c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800627c:	b480      	push	{r7}
 800627e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006280:	4b04      	ldr	r3, [pc, #16]	; (8006294 <__NVIC_GetPriorityGrouping+0x18>)
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	0a1b      	lsrs	r3, r3, #8
 8006286:	f003 0307 	and.w	r3, r3, #7
}
 800628a:	4618      	mov	r0, r3
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	e000ed00 	.word	0xe000ed00

08006298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	4603      	mov	r3, r0
 80062a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	db0b      	blt.n	80062c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062aa:	79fb      	ldrb	r3, [r7, #7]
 80062ac:	f003 021f 	and.w	r2, r3, #31
 80062b0:	4907      	ldr	r1, [pc, #28]	; (80062d0 <__NVIC_EnableIRQ+0x38>)
 80062b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062b6:	095b      	lsrs	r3, r3, #5
 80062b8:	2001      	movs	r0, #1
 80062ba:	fa00 f202 	lsl.w	r2, r0, r2
 80062be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80062c2:	bf00      	nop
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	e000e100 	.word	0xe000e100

080062d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	4603      	mov	r3, r0
 80062dc:	6039      	str	r1, [r7, #0]
 80062de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	db0a      	blt.n	80062fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	490c      	ldr	r1, [pc, #48]	; (8006320 <__NVIC_SetPriority+0x4c>)
 80062ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f2:	0112      	lsls	r2, r2, #4
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	440b      	add	r3, r1
 80062f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062fc:	e00a      	b.n	8006314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	b2da      	uxtb	r2, r3
 8006302:	4908      	ldr	r1, [pc, #32]	; (8006324 <__NVIC_SetPriority+0x50>)
 8006304:	79fb      	ldrb	r3, [r7, #7]
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	3b04      	subs	r3, #4
 800630c:	0112      	lsls	r2, r2, #4
 800630e:	b2d2      	uxtb	r2, r2
 8006310:	440b      	add	r3, r1
 8006312:	761a      	strb	r2, [r3, #24]
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	e000e100 	.word	0xe000e100
 8006324:	e000ed00 	.word	0xe000ed00

08006328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006328:	b480      	push	{r7}
 800632a:	b089      	sub	sp, #36	; 0x24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	f1c3 0307 	rsb	r3, r3, #7
 8006342:	2b04      	cmp	r3, #4
 8006344:	bf28      	it	cs
 8006346:	2304      	movcs	r3, #4
 8006348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	3304      	adds	r3, #4
 800634e:	2b06      	cmp	r3, #6
 8006350:	d902      	bls.n	8006358 <NVIC_EncodePriority+0x30>
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	3b03      	subs	r3, #3
 8006356:	e000      	b.n	800635a <NVIC_EncodePriority+0x32>
 8006358:	2300      	movs	r3, #0
 800635a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800635c:	f04f 32ff 	mov.w	r2, #4294967295
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	43da      	mvns	r2, r3
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	401a      	ands	r2, r3
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006370:	f04f 31ff 	mov.w	r1, #4294967295
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	fa01 f303 	lsl.w	r3, r1, r3
 800637a:	43d9      	mvns	r1, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006380:	4313      	orrs	r3, r2
         );
}
 8006382:	4618      	mov	r0, r3
 8006384:	3724      	adds	r7, #36	; 0x24
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
	...

08006390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3b01      	subs	r3, #1
 800639c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063a0:	d301      	bcc.n	80063a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063a2:	2301      	movs	r3, #1
 80063a4:	e00f      	b.n	80063c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063a6:	4a0a      	ldr	r2, [pc, #40]	; (80063d0 <SysTick_Config+0x40>)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80063ae:	210f      	movs	r1, #15
 80063b0:	f04f 30ff 	mov.w	r0, #4294967295
 80063b4:	f7ff ff8e 	bl	80062d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063b8:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <SysTick_Config+0x40>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063be:	4b04      	ldr	r3, [pc, #16]	; (80063d0 <SysTick_Config+0x40>)
 80063c0:	2207      	movs	r2, #7
 80063c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	e000e010 	.word	0xe000e010

080063d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7ff ff29 	bl	8006234 <__NVIC_SetPriorityGrouping>
}
 80063e2:	bf00      	nop
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b086      	sub	sp, #24
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	4603      	mov	r3, r0
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	607a      	str	r2, [r7, #4]
 80063f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80063fc:	f7ff ff3e 	bl	800627c <__NVIC_GetPriorityGrouping>
 8006400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	68b9      	ldr	r1, [r7, #8]
 8006406:	6978      	ldr	r0, [r7, #20]
 8006408:	f7ff ff8e 	bl	8006328 <NVIC_EncodePriority>
 800640c:	4602      	mov	r2, r0
 800640e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006412:	4611      	mov	r1, r2
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff ff5d 	bl	80062d4 <__NVIC_SetPriority>
}
 800641a:	bf00      	nop
 800641c:	3718      	adds	r7, #24
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b082      	sub	sp, #8
 8006426:	af00      	add	r7, sp, #0
 8006428:	4603      	mov	r3, r0
 800642a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800642c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff ff31 	bl	8006298 <__NVIC_EnableIRQ>
}
 8006436:	bf00      	nop
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b082      	sub	sp, #8
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff ffa2 	bl	8006390 <SysTick_Config>
 800644c:	4603      	mov	r3, r0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
	...

08006458 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006464:	f7fe fe3c 	bl	80050e0 <HAL_GetTick>
 8006468:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e099      	b.n	80065a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0201 	bic.w	r2, r2, #1
 8006492:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006494:	e00f      	b.n	80064b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006496:	f7fe fe23 	bl	80050e0 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b05      	cmp	r3, #5
 80064a2:	d908      	bls.n	80064b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2220      	movs	r2, #32
 80064a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2203      	movs	r2, #3
 80064ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e078      	b.n	80065a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1e8      	bne.n	8006496 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	4b38      	ldr	r3, [pc, #224]	; (80065b0 <HAL_DMA_Init+0x158>)
 80064d0:	4013      	ands	r3, r2
 80064d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80064e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	4313      	orrs	r3, r2
 8006506:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	2b04      	cmp	r3, #4
 800650e:	d107      	bne.n	8006520 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006518:	4313      	orrs	r3, r2
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	4313      	orrs	r3, r2
 800651e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f023 0307 	bic.w	r3, r3, #7
 8006536:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	2b04      	cmp	r3, #4
 8006548:	d117      	bne.n	800657a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	4313      	orrs	r3, r2
 8006552:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00e      	beq.n	800657a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fadf 	bl	8006b20 <DMA_CheckFifoParam>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d008      	beq.n	800657a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2240      	movs	r2, #64	; 0x40
 800656c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006576:	2301      	movs	r3, #1
 8006578:	e016      	b.n	80065a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fa96 	bl	8006ab4 <DMA_CalcBaseAndBitshift>
 8006588:	4603      	mov	r3, r0
 800658a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006590:	223f      	movs	r2, #63	; 0x3f
 8006592:	409a      	lsls	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	f010803f 	.word	0xf010803f

080065b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d101      	bne.n	80065da <HAL_DMA_Start_IT+0x26>
 80065d6:	2302      	movs	r3, #2
 80065d8:	e040      	b.n	800665c <HAL_DMA_Start_IT+0xa8>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d12f      	bne.n	800664e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2202      	movs	r2, #2
 80065f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	68b9      	ldr	r1, [r7, #8]
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 fa28 	bl	8006a58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800660c:	223f      	movs	r2, #63	; 0x3f
 800660e:	409a      	lsls	r2, r3
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0216 	orr.w	r2, r2, #22
 8006622:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d007      	beq.n	800663c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0208 	orr.w	r2, r2, #8
 800663a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0201 	orr.w	r2, r2, #1
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	e005      	b.n	800665a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006656:	2302      	movs	r3, #2
 8006658:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800665a:	7dfb      	ldrb	r3, [r7, #23]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006670:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006672:	f7fe fd35 	bl	80050e0 <HAL_GetTick>
 8006676:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d008      	beq.n	8006696 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2280      	movs	r2, #128	; 0x80
 8006688:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e052      	b.n	800673c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0216 	bic.w	r2, r2, #22
 80066a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	695a      	ldr	r2, [r3, #20]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d103      	bne.n	80066c6 <HAL_DMA_Abort+0x62>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d007      	beq.n	80066d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0208 	bic.w	r2, r2, #8
 80066d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0201 	bic.w	r2, r2, #1
 80066e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066e6:	e013      	b.n	8006710 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066e8:	f7fe fcfa 	bl	80050e0 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b05      	cmp	r3, #5
 80066f4:	d90c      	bls.n	8006710 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2220      	movs	r2, #32
 80066fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2203      	movs	r2, #3
 8006700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e015      	b.n	800673c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1e4      	bne.n	80066e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006722:	223f      	movs	r2, #63	; 0x3f
 8006724:	409a      	lsls	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006750:	4b8e      	ldr	r3, [pc, #568]	; (800698c <HAL_DMA_IRQHandler+0x248>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a8e      	ldr	r2, [pc, #568]	; (8006990 <HAL_DMA_IRQHandler+0x24c>)
 8006756:	fba2 2303 	umull	r2, r3, r2, r3
 800675a:	0a9b      	lsrs	r3, r3, #10
 800675c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006762:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800676e:	2208      	movs	r2, #8
 8006770:	409a      	lsls	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	4013      	ands	r3, r2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d01a      	beq.n	80067b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0304 	and.w	r3, r3, #4
 8006784:	2b00      	cmp	r3, #0
 8006786:	d013      	beq.n	80067b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0204 	bic.w	r2, r2, #4
 8006796:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800679c:	2208      	movs	r2, #8
 800679e:	409a      	lsls	r2, r3
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a8:	f043 0201 	orr.w	r2, r3, #1
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067b4:	2201      	movs	r2, #1
 80067b6:	409a      	lsls	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4013      	ands	r3, r2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d012      	beq.n	80067e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00b      	beq.n	80067e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d2:	2201      	movs	r2, #1
 80067d4:	409a      	lsls	r2, r3
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067de:	f043 0202 	orr.w	r2, r3, #2
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ea:	2204      	movs	r2, #4
 80067ec:	409a      	lsls	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4013      	ands	r3, r2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d012      	beq.n	800681c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00b      	beq.n	800681c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006808:	2204      	movs	r2, #4
 800680a:	409a      	lsls	r2, r3
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006814:	f043 0204 	orr.w	r2, r3, #4
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006820:	2210      	movs	r2, #16
 8006822:	409a      	lsls	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4013      	ands	r3, r2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d043      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0308 	and.w	r3, r3, #8
 8006836:	2b00      	cmp	r3, #0
 8006838:	d03c      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683e:	2210      	movs	r2, #16
 8006840:	409a      	lsls	r2, r3
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d018      	beq.n	8006886 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d108      	bne.n	8006874 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	d024      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	4798      	blx	r3
 8006872:	e01f      	b.n	80068b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01b      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	4798      	blx	r3
 8006884:	e016      	b.n	80068b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006890:	2b00      	cmp	r3, #0
 8006892:	d107      	bne.n	80068a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0208 	bic.w	r2, r2, #8
 80068a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b8:	2220      	movs	r2, #32
 80068ba:	409a      	lsls	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4013      	ands	r3, r2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 808f 	beq.w	80069e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0310 	and.w	r3, r3, #16
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 8087 	beq.w	80069e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068da:	2220      	movs	r2, #32
 80068dc:	409a      	lsls	r2, r3
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b05      	cmp	r3, #5
 80068ec:	d136      	bne.n	800695c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 0216 	bic.w	r2, r2, #22
 80068fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	695a      	ldr	r2, [r3, #20]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800690c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	2b00      	cmp	r3, #0
 8006914:	d103      	bne.n	800691e <HAL_DMA_IRQHandler+0x1da>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800691a:	2b00      	cmp	r3, #0
 800691c:	d007      	beq.n	800692e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0208 	bic.w	r2, r2, #8
 800692c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006932:	223f      	movs	r2, #63	; 0x3f
 8006934:	409a      	lsls	r2, r3
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800694e:	2b00      	cmp	r3, #0
 8006950:	d07e      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	4798      	blx	r3
        }
        return;
 800695a:	e079      	b.n	8006a50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d01d      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10d      	bne.n	8006994 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697c:	2b00      	cmp	r3, #0
 800697e:	d031      	beq.n	80069e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	4798      	blx	r3
 8006988:	e02c      	b.n	80069e4 <HAL_DMA_IRQHandler+0x2a0>
 800698a:	bf00      	nop
 800698c:	20000390 	.word	0x20000390
 8006990:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d023      	beq.n	80069e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	4798      	blx	r3
 80069a4:	e01e      	b.n	80069e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10f      	bne.n	80069d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 0210 	bic.w	r2, r2, #16
 80069c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d032      	beq.n	8006a52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d022      	beq.n	8006a3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2205      	movs	r2, #5
 80069fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0201 	bic.w	r2, r2, #1
 8006a0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	3301      	adds	r3, #1
 8006a14:	60bb      	str	r3, [r7, #8]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d307      	bcc.n	8006a2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1f2      	bne.n	8006a10 <HAL_DMA_IRQHandler+0x2cc>
 8006a2a:	e000      	b.n	8006a2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006a2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d005      	beq.n	8006a52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	4798      	blx	r3
 8006a4e:	e000      	b.n	8006a52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006a50:	bf00      	nop
    }
  }
}
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	2b40      	cmp	r3, #64	; 0x40
 8006a84:	d108      	bne.n	8006a98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006a96:	e007      	b.n	8006aa8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	60da      	str	r2, [r3, #12]
}
 8006aa8:	bf00      	nop
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	3b10      	subs	r3, #16
 8006ac4:	4a14      	ldr	r2, [pc, #80]	; (8006b18 <DMA_CalcBaseAndBitshift+0x64>)
 8006ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aca:	091b      	lsrs	r3, r3, #4
 8006acc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006ace:	4a13      	ldr	r2, [pc, #76]	; (8006b1c <DMA_CalcBaseAndBitshift+0x68>)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d909      	bls.n	8006af6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006aea:	f023 0303 	bic.w	r3, r3, #3
 8006aee:	1d1a      	adds	r2, r3, #4
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	659a      	str	r2, [r3, #88]	; 0x58
 8006af4:	e007      	b.n	8006b06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006afe:	f023 0303 	bic.w	r3, r3, #3
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	aaaaaaab 	.word	0xaaaaaaab
 8006b1c:	0800c0d8 	.word	0x0800c0d8

08006b20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d11f      	bne.n	8006b7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d856      	bhi.n	8006bee <DMA_CheckFifoParam+0xce>
 8006b40:	a201      	add	r2, pc, #4	; (adr r2, 8006b48 <DMA_CheckFifoParam+0x28>)
 8006b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b46:	bf00      	nop
 8006b48:	08006b59 	.word	0x08006b59
 8006b4c:	08006b6b 	.word	0x08006b6b
 8006b50:	08006b59 	.word	0x08006b59
 8006b54:	08006bef 	.word	0x08006bef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d046      	beq.n	8006bf2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b68:	e043      	b.n	8006bf2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b72:	d140      	bne.n	8006bf6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b78:	e03d      	b.n	8006bf6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b82:	d121      	bne.n	8006bc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	d837      	bhi.n	8006bfa <DMA_CheckFifoParam+0xda>
 8006b8a:	a201      	add	r2, pc, #4	; (adr r2, 8006b90 <DMA_CheckFifoParam+0x70>)
 8006b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b90:	08006ba1 	.word	0x08006ba1
 8006b94:	08006ba7 	.word	0x08006ba7
 8006b98:	08006ba1 	.word	0x08006ba1
 8006b9c:	08006bb9 	.word	0x08006bb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba4:	e030      	b.n	8006c08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d025      	beq.n	8006bfe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bb6:	e022      	b.n	8006bfe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006bc0:	d11f      	bne.n	8006c02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006bc6:	e01c      	b.n	8006c02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d903      	bls.n	8006bd6 <DMA_CheckFifoParam+0xb6>
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b03      	cmp	r3, #3
 8006bd2:	d003      	beq.n	8006bdc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006bd4:	e018      	b.n	8006c08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8006bda:	e015      	b.n	8006c08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00e      	beq.n	8006c06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	73fb      	strb	r3, [r7, #15]
      break;
 8006bec:	e00b      	b.n	8006c06 <DMA_CheckFifoParam+0xe6>
      break;
 8006bee:	bf00      	nop
 8006bf0:	e00a      	b.n	8006c08 <DMA_CheckFifoParam+0xe8>
      break;
 8006bf2:	bf00      	nop
 8006bf4:	e008      	b.n	8006c08 <DMA_CheckFifoParam+0xe8>
      break;
 8006bf6:	bf00      	nop
 8006bf8:	e006      	b.n	8006c08 <DMA_CheckFifoParam+0xe8>
      break;
 8006bfa:	bf00      	nop
 8006bfc:	e004      	b.n	8006c08 <DMA_CheckFifoParam+0xe8>
      break;
 8006bfe:	bf00      	nop
 8006c00:	e002      	b.n	8006c08 <DMA_CheckFifoParam+0xe8>
      break;   
 8006c02:	bf00      	nop
 8006c04:	e000      	b.n	8006c08 <DMA_CheckFifoParam+0xe8>
      break;
 8006c06:	bf00      	nop
    }
  } 
  
  return status; 
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop

08006c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b089      	sub	sp, #36	; 0x24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c22:	2300      	movs	r3, #0
 8006c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c2e:	2300      	movs	r3, #0
 8006c30:	61fb      	str	r3, [r7, #28]
 8006c32:	e159      	b.n	8006ee8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c34:	2201      	movs	r2, #1
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	4013      	ands	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	f040 8148 	bne.w	8006ee2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d005      	beq.n	8006c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d130      	bne.n	8006ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	2203      	movs	r2, #3
 8006c76:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7a:	43db      	mvns	r3, r3
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca8:	43db      	mvns	r3, r3
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	4013      	ands	r3, r2
 8006cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	091b      	lsrs	r3, r3, #4
 8006cb6:	f003 0201 	and.w	r2, r3, #1
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f003 0303 	and.w	r3, r3, #3
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d017      	beq.n	8006d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	2203      	movs	r2, #3
 8006ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce8:	43db      	mvns	r3, r3
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	4013      	ands	r3, r2
 8006cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfc:	69ba      	ldr	r2, [r7, #24]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f003 0303 	and.w	r3, r3, #3
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d123      	bne.n	8006d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	08da      	lsrs	r2, r3, #3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3208      	adds	r2, #8
 8006d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	220f      	movs	r2, #15
 8006d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d30:	43db      	mvns	r3, r3
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	4013      	ands	r3, r2
 8006d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	691a      	ldr	r2, [r3, #16]
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	f003 0307 	and.w	r3, r3, #7
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	fa02 f303 	lsl.w	r3, r2, r3
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	08da      	lsrs	r2, r3, #3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	3208      	adds	r2, #8
 8006d56:	69b9      	ldr	r1, [r7, #24]
 8006d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	005b      	lsls	r3, r3, #1
 8006d66:	2203      	movs	r2, #3
 8006d68:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6c:	43db      	mvns	r3, r3
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	4013      	ands	r3, r2
 8006d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f003 0203 	and.w	r2, r3, #3
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	fa02 f303 	lsl.w	r3, r2, r3
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 80a2 	beq.w	8006ee2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	4b57      	ldr	r3, [pc, #348]	; (8006f00 <HAL_GPIO_Init+0x2e8>)
 8006da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da6:	4a56      	ldr	r2, [pc, #344]	; (8006f00 <HAL_GPIO_Init+0x2e8>)
 8006da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dac:	6453      	str	r3, [r2, #68]	; 0x44
 8006dae:	4b54      	ldr	r3, [pc, #336]	; (8006f00 <HAL_GPIO_Init+0x2e8>)
 8006db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006dba:	4a52      	ldr	r2, [pc, #328]	; (8006f04 <HAL_GPIO_Init+0x2ec>)
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	089b      	lsrs	r3, r3, #2
 8006dc0:	3302      	adds	r3, #2
 8006dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	f003 0303 	and.w	r3, r3, #3
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	220f      	movs	r2, #15
 8006dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd6:	43db      	mvns	r3, r3
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	4013      	ands	r3, r2
 8006ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a49      	ldr	r2, [pc, #292]	; (8006f08 <HAL_GPIO_Init+0x2f0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d019      	beq.n	8006e1a <HAL_GPIO_Init+0x202>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a48      	ldr	r2, [pc, #288]	; (8006f0c <HAL_GPIO_Init+0x2f4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d013      	beq.n	8006e16 <HAL_GPIO_Init+0x1fe>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a47      	ldr	r2, [pc, #284]	; (8006f10 <HAL_GPIO_Init+0x2f8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00d      	beq.n	8006e12 <HAL_GPIO_Init+0x1fa>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a46      	ldr	r2, [pc, #280]	; (8006f14 <HAL_GPIO_Init+0x2fc>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d007      	beq.n	8006e0e <HAL_GPIO_Init+0x1f6>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a45      	ldr	r2, [pc, #276]	; (8006f18 <HAL_GPIO_Init+0x300>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d101      	bne.n	8006e0a <HAL_GPIO_Init+0x1f2>
 8006e06:	2304      	movs	r3, #4
 8006e08:	e008      	b.n	8006e1c <HAL_GPIO_Init+0x204>
 8006e0a:	2307      	movs	r3, #7
 8006e0c:	e006      	b.n	8006e1c <HAL_GPIO_Init+0x204>
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e004      	b.n	8006e1c <HAL_GPIO_Init+0x204>
 8006e12:	2302      	movs	r3, #2
 8006e14:	e002      	b.n	8006e1c <HAL_GPIO_Init+0x204>
 8006e16:	2301      	movs	r3, #1
 8006e18:	e000      	b.n	8006e1c <HAL_GPIO_Init+0x204>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	f002 0203 	and.w	r2, r2, #3
 8006e22:	0092      	lsls	r2, r2, #2
 8006e24:	4093      	lsls	r3, r2
 8006e26:	69ba      	ldr	r2, [r7, #24]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e2c:	4935      	ldr	r1, [pc, #212]	; (8006f04 <HAL_GPIO_Init+0x2ec>)
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	089b      	lsrs	r3, r3, #2
 8006e32:	3302      	adds	r3, #2
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e3a:	4b38      	ldr	r3, [pc, #224]	; (8006f1c <HAL_GPIO_Init+0x304>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	43db      	mvns	r3, r3
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	4013      	ands	r3, r2
 8006e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006e5e:	4a2f      	ldr	r2, [pc, #188]	; (8006f1c <HAL_GPIO_Init+0x304>)
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006e64:	4b2d      	ldr	r3, [pc, #180]	; (8006f1c <HAL_GPIO_Init+0x304>)
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	43db      	mvns	r3, r3
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	4013      	ands	r3, r2
 8006e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006e88:	4a24      	ldr	r2, [pc, #144]	; (8006f1c <HAL_GPIO_Init+0x304>)
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006e8e:	4b23      	ldr	r3, [pc, #140]	; (8006f1c <HAL_GPIO_Init+0x304>)
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	43db      	mvns	r3, r3
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006eaa:	69ba      	ldr	r2, [r7, #24]
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006eb2:	4a1a      	ldr	r2, [pc, #104]	; (8006f1c <HAL_GPIO_Init+0x304>)
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006eb8:	4b18      	ldr	r3, [pc, #96]	; (8006f1c <HAL_GPIO_Init+0x304>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	43db      	mvns	r3, r3
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006edc:	4a0f      	ldr	r2, [pc, #60]	; (8006f1c <HAL_GPIO_Init+0x304>)
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	61fb      	str	r3, [r7, #28]
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	2b0f      	cmp	r3, #15
 8006eec:	f67f aea2 	bls.w	8006c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ef0:	bf00      	nop
 8006ef2:	bf00      	nop
 8006ef4:	3724      	adds	r7, #36	; 0x24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	40023800 	.word	0x40023800
 8006f04:	40013800 	.word	0x40013800
 8006f08:	40020000 	.word	0x40020000
 8006f0c:	40020400 	.word	0x40020400
 8006f10:	40020800 	.word	0x40020800
 8006f14:	40020c00 	.word	0x40020c00
 8006f18:	40021000 	.word	0x40021000
 8006f1c:	40013c00 	.word	0x40013c00

08006f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	807b      	strh	r3, [r7, #2]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f30:	787b      	ldrb	r3, [r7, #1]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f36:	887a      	ldrh	r2, [r7, #2]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006f3c:	e003      	b.n	8006f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006f3e:	887b      	ldrh	r3, [r7, #2]
 8006f40:	041a      	lsls	r2, r3, #16
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	619a      	str	r2, [r3, #24]
}
 8006f46:	bf00      	nop
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
	...

08006f54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e12b      	b.n	80071be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d106      	bne.n	8006f80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7fd fd98 	bl	8004ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2224      	movs	r2, #36	; 0x24
 8006f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0201 	bic.w	r2, r2, #1
 8006f96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006fb8:	f001 fbbc 	bl	8008734 <HAL_RCC_GetPCLK1Freq>
 8006fbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	4a81      	ldr	r2, [pc, #516]	; (80071c8 <HAL_I2C_Init+0x274>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d807      	bhi.n	8006fd8 <HAL_I2C_Init+0x84>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4a80      	ldr	r2, [pc, #512]	; (80071cc <HAL_I2C_Init+0x278>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	bf94      	ite	ls
 8006fd0:	2301      	movls	r3, #1
 8006fd2:	2300      	movhi	r3, #0
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	e006      	b.n	8006fe6 <HAL_I2C_Init+0x92>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4a7d      	ldr	r2, [pc, #500]	; (80071d0 <HAL_I2C_Init+0x27c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	bf94      	ite	ls
 8006fe0:	2301      	movls	r3, #1
 8006fe2:	2300      	movhi	r3, #0
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e0e7      	b.n	80071be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	4a78      	ldr	r2, [pc, #480]	; (80071d4 <HAL_I2C_Init+0x280>)
 8006ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff6:	0c9b      	lsrs	r3, r3, #18
 8006ff8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	430a      	orrs	r2, r1
 800700c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	4a6a      	ldr	r2, [pc, #424]	; (80071c8 <HAL_I2C_Init+0x274>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d802      	bhi.n	8007028 <HAL_I2C_Init+0xd4>
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	3301      	adds	r3, #1
 8007026:	e009      	b.n	800703c <HAL_I2C_Init+0xe8>
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800702e:	fb02 f303 	mul.w	r3, r2, r3
 8007032:	4a69      	ldr	r2, [pc, #420]	; (80071d8 <HAL_I2C_Init+0x284>)
 8007034:	fba2 2303 	umull	r2, r3, r2, r3
 8007038:	099b      	lsrs	r3, r3, #6
 800703a:	3301      	adds	r3, #1
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	6812      	ldr	r2, [r2, #0]
 8007040:	430b      	orrs	r3, r1
 8007042:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800704e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	495c      	ldr	r1, [pc, #368]	; (80071c8 <HAL_I2C_Init+0x274>)
 8007058:	428b      	cmp	r3, r1
 800705a:	d819      	bhi.n	8007090 <HAL_I2C_Init+0x13c>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	1e59      	subs	r1, r3, #1
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	fbb1 f3f3 	udiv	r3, r1, r3
 800706a:	1c59      	adds	r1, r3, #1
 800706c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007070:	400b      	ands	r3, r1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00a      	beq.n	800708c <HAL_I2C_Init+0x138>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	1e59      	subs	r1, r3, #1
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	fbb1 f3f3 	udiv	r3, r1, r3
 8007084:	3301      	adds	r3, #1
 8007086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800708a:	e051      	b.n	8007130 <HAL_I2C_Init+0x1dc>
 800708c:	2304      	movs	r3, #4
 800708e:	e04f      	b.n	8007130 <HAL_I2C_Init+0x1dc>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d111      	bne.n	80070bc <HAL_I2C_Init+0x168>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	1e58      	subs	r0, r3, #1
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6859      	ldr	r1, [r3, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	440b      	add	r3, r1
 80070a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80070aa:	3301      	adds	r3, #1
 80070ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	bf0c      	ite	eq
 80070b4:	2301      	moveq	r3, #1
 80070b6:	2300      	movne	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	e012      	b.n	80070e2 <HAL_I2C_Init+0x18e>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	1e58      	subs	r0, r3, #1
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6859      	ldr	r1, [r3, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	440b      	add	r3, r1
 80070ca:	0099      	lsls	r1, r3, #2
 80070cc:	440b      	add	r3, r1
 80070ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80070d2:	3301      	adds	r3, #1
 80070d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070d8:	2b00      	cmp	r3, #0
 80070da:	bf0c      	ite	eq
 80070dc:	2301      	moveq	r3, #1
 80070de:	2300      	movne	r3, #0
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <HAL_I2C_Init+0x196>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e022      	b.n	8007130 <HAL_I2C_Init+0x1dc>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10e      	bne.n	8007110 <HAL_I2C_Init+0x1bc>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	1e58      	subs	r0, r3, #1
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6859      	ldr	r1, [r3, #4]
 80070fa:	460b      	mov	r3, r1
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	440b      	add	r3, r1
 8007100:	fbb0 f3f3 	udiv	r3, r0, r3
 8007104:	3301      	adds	r3, #1
 8007106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800710a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800710e:	e00f      	b.n	8007130 <HAL_I2C_Init+0x1dc>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	1e58      	subs	r0, r3, #1
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6859      	ldr	r1, [r3, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	440b      	add	r3, r1
 800711e:	0099      	lsls	r1, r3, #2
 8007120:	440b      	add	r3, r1
 8007122:	fbb0 f3f3 	udiv	r3, r0, r3
 8007126:	3301      	adds	r3, #1
 8007128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800712c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007130:	6879      	ldr	r1, [r7, #4]
 8007132:	6809      	ldr	r1, [r1, #0]
 8007134:	4313      	orrs	r3, r2
 8007136:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	69da      	ldr	r2, [r3, #28]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	431a      	orrs	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800715e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	6911      	ldr	r1, [r2, #16]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	68d2      	ldr	r2, [r2, #12]
 800716a:	4311      	orrs	r1, r2
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	6812      	ldr	r2, [r2, #0]
 8007170:	430b      	orrs	r3, r1
 8007172:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	695a      	ldr	r2, [r3, #20]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	431a      	orrs	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f042 0201 	orr.w	r2, r2, #1
 800719e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2220      	movs	r2, #32
 80071aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	000186a0 	.word	0x000186a0
 80071cc:	001e847f 	.word	0x001e847f
 80071d0:	003d08ff 	.word	0x003d08ff
 80071d4:	431bde83 	.word	0x431bde83
 80071d8:	10624dd3 	.word	0x10624dd3

080071dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b088      	sub	sp, #32
 80071e0:	af02      	add	r7, sp, #8
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	4608      	mov	r0, r1
 80071e6:	4611      	mov	r1, r2
 80071e8:	461a      	mov	r2, r3
 80071ea:	4603      	mov	r3, r0
 80071ec:	817b      	strh	r3, [r7, #10]
 80071ee:	460b      	mov	r3, r1
 80071f0:	813b      	strh	r3, [r7, #8]
 80071f2:	4613      	mov	r3, r2
 80071f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071f6:	f7fd ff73 	bl	80050e0 <HAL_GetTick>
 80071fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b20      	cmp	r3, #32
 8007206:	f040 80d9 	bne.w	80073bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	2319      	movs	r3, #25
 8007210:	2201      	movs	r2, #1
 8007212:	496d      	ldr	r1, [pc, #436]	; (80073c8 <HAL_I2C_Mem_Write+0x1ec>)
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 fc7f 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007220:	2302      	movs	r3, #2
 8007222:	e0cc      	b.n	80073be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800722a:	2b01      	cmp	r3, #1
 800722c:	d101      	bne.n	8007232 <HAL_I2C_Mem_Write+0x56>
 800722e:	2302      	movs	r3, #2
 8007230:	e0c5      	b.n	80073be <HAL_I2C_Mem_Write+0x1e2>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b01      	cmp	r3, #1
 8007246:	d007      	beq.n	8007258 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0201 	orr.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007266:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2221      	movs	r2, #33	; 0x21
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2240      	movs	r2, #64	; 0x40
 8007274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6a3a      	ldr	r2, [r7, #32]
 8007282:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007288:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800728e:	b29a      	uxth	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4a4d      	ldr	r2, [pc, #308]	; (80073cc <HAL_I2C_Mem_Write+0x1f0>)
 8007298:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800729a:	88f8      	ldrh	r0, [r7, #6]
 800729c:	893a      	ldrh	r2, [r7, #8]
 800729e:	8979      	ldrh	r1, [r7, #10]
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	9301      	str	r3, [sp, #4]
 80072a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	4603      	mov	r3, r0
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 fab6 	bl	800781c <I2C_RequestMemoryWrite>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d052      	beq.n	800735c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e081      	b.n	80073be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 fd00 	bl	8007cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00d      	beq.n	80072e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d107      	bne.n	80072e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e06b      	b.n	80073be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	781a      	ldrb	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007300:	3b01      	subs	r3, #1
 8007302:	b29a      	uxth	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800730c:	b29b      	uxth	r3, r3
 800730e:	3b01      	subs	r3, #1
 8007310:	b29a      	uxth	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	f003 0304 	and.w	r3, r3, #4
 8007320:	2b04      	cmp	r3, #4
 8007322:	d11b      	bne.n	800735c <HAL_I2C_Mem_Write+0x180>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007328:	2b00      	cmp	r3, #0
 800732a:	d017      	beq.n	800735c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	781a      	ldrb	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007346:	3b01      	subs	r3, #1
 8007348:	b29a      	uxth	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007352:	b29b      	uxth	r3, r3
 8007354:	3b01      	subs	r3, #1
 8007356:	b29a      	uxth	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1aa      	bne.n	80072ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 fcec 	bl	8007d46 <I2C_WaitOnBTFFlagUntilTimeout>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00d      	beq.n	8007390 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007378:	2b04      	cmp	r3, #4
 800737a:	d107      	bne.n	800738c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800738a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e016      	b.n	80073be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800739e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	e000      	b.n	80073be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80073bc:	2302      	movs	r3, #2
  }
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	00100002 	.word	0x00100002
 80073cc:	ffff0000 	.word	0xffff0000

080073d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08c      	sub	sp, #48	; 0x30
 80073d4:	af02      	add	r7, sp, #8
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	4608      	mov	r0, r1
 80073da:	4611      	mov	r1, r2
 80073dc:	461a      	mov	r2, r3
 80073de:	4603      	mov	r3, r0
 80073e0:	817b      	strh	r3, [r7, #10]
 80073e2:	460b      	mov	r3, r1
 80073e4:	813b      	strh	r3, [r7, #8]
 80073e6:	4613      	mov	r3, r2
 80073e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073ea:	f7fd fe79 	bl	80050e0 <HAL_GetTick>
 80073ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b20      	cmp	r3, #32
 80073fa:	f040 8208 	bne.w	800780e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	2319      	movs	r3, #25
 8007404:	2201      	movs	r2, #1
 8007406:	497b      	ldr	r1, [pc, #492]	; (80075f4 <HAL_I2C_Mem_Read+0x224>)
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 fb85 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007414:	2302      	movs	r3, #2
 8007416:	e1fb      	b.n	8007810 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800741e:	2b01      	cmp	r3, #1
 8007420:	d101      	bne.n	8007426 <HAL_I2C_Mem_Read+0x56>
 8007422:	2302      	movs	r3, #2
 8007424:	e1f4      	b.n	8007810 <HAL_I2C_Mem_Read+0x440>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b01      	cmp	r3, #1
 800743a:	d007      	beq.n	800744c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f042 0201 	orr.w	r2, r2, #1
 800744a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800745a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2222      	movs	r2, #34	; 0x22
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2240      	movs	r2, #64	; 0x40
 8007468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007476:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800747c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007482:	b29a      	uxth	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4a5b      	ldr	r2, [pc, #364]	; (80075f8 <HAL_I2C_Mem_Read+0x228>)
 800748c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800748e:	88f8      	ldrh	r0, [r7, #6]
 8007490:	893a      	ldrh	r2, [r7, #8]
 8007492:	8979      	ldrh	r1, [r7, #10]
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	9301      	str	r3, [sp, #4]
 8007498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	4603      	mov	r3, r0
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 fa52 	bl	8007948 <I2C_RequestMemoryRead>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e1b0      	b.n	8007810 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d113      	bne.n	80074de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074b6:	2300      	movs	r3, #0
 80074b8:	623b      	str	r3, [r7, #32]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	623b      	str	r3, [r7, #32]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	623b      	str	r3, [r7, #32]
 80074ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074da:	601a      	str	r2, [r3, #0]
 80074dc:	e184      	b.n	80077e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d11b      	bne.n	800751e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074f6:	2300      	movs	r3, #0
 80074f8:	61fb      	str	r3, [r7, #28]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	61fb      	str	r3, [r7, #28]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	61fb      	str	r3, [r7, #28]
 800750a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	e164      	b.n	80077e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007522:	2b02      	cmp	r3, #2
 8007524:	d11b      	bne.n	800755e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007534:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007544:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007546:	2300      	movs	r3, #0
 8007548:	61bb      	str	r3, [r7, #24]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	61bb      	str	r3, [r7, #24]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	61bb      	str	r3, [r7, #24]
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	e144      	b.n	80077e8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	617b      	str	r3, [r7, #20]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	617b      	str	r3, [r7, #20]
 8007572:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007574:	e138      	b.n	80077e8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800757a:	2b03      	cmp	r3, #3
 800757c:	f200 80f1 	bhi.w	8007762 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007584:	2b01      	cmp	r3, #1
 8007586:	d123      	bne.n	80075d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800758a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f000 fc1b 	bl	8007dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e139      	b.n	8007810 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	691a      	ldr	r2, [r3, #16]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	b2d2      	uxtb	r2, r2
 80075a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b8:	3b01      	subs	r3, #1
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075ce:	e10b      	b.n	80077e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d14e      	bne.n	8007676 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075de:	2200      	movs	r2, #0
 80075e0:	4906      	ldr	r1, [pc, #24]	; (80075fc <HAL_I2C_Mem_Read+0x22c>)
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 fa98 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d008      	beq.n	8007600 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e10e      	b.n	8007810 <HAL_I2C_Mem_Read+0x440>
 80075f2:	bf00      	nop
 80075f4:	00100002 	.word	0x00100002
 80075f8:	ffff0000 	.word	0xffff0000
 80075fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800760e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	691a      	ldr	r2, [r3, #16]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	b2d2      	uxtb	r2, r2
 800761c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800762c:	3b01      	subs	r3, #1
 800762e:	b29a      	uxth	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007638:	b29b      	uxth	r3, r3
 800763a:	3b01      	subs	r3, #1
 800763c:	b29a      	uxth	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	691a      	ldr	r2, [r3, #16]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	b2d2      	uxtb	r2, r2
 800764e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	1c5a      	adds	r2, r3, #1
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800765e:	3b01      	subs	r3, #1
 8007660:	b29a      	uxth	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800766a:	b29b      	uxth	r3, r3
 800766c:	3b01      	subs	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007674:	e0b8      	b.n	80077e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767c:	2200      	movs	r2, #0
 800767e:	4966      	ldr	r1, [pc, #408]	; (8007818 <HAL_I2C_Mem_Read+0x448>)
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 fa49 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e0bf      	b.n	8007810 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800769e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	691a      	ldr	r2, [r3, #16]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076bc:	3b01      	subs	r3, #1
 80076be:	b29a      	uxth	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	3b01      	subs	r3, #1
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	2200      	movs	r2, #0
 80076da:	494f      	ldr	r1, [pc, #316]	; (8007818 <HAL_I2C_Mem_Read+0x448>)
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 fa1b 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d001      	beq.n	80076ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e091      	b.n	8007810 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	691a      	ldr	r2, [r3, #16]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	b2d2      	uxtb	r2, r2
 8007708:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007718:	3b01      	subs	r3, #1
 800771a:	b29a      	uxth	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007724:	b29b      	uxth	r3, r3
 8007726:	3b01      	subs	r3, #1
 8007728:	b29a      	uxth	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	691a      	ldr	r2, [r3, #16]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	b2d2      	uxtb	r2, r2
 800773a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800774a:	3b01      	subs	r3, #1
 800774c:	b29a      	uxth	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007756:	b29b      	uxth	r3, r3
 8007758:	3b01      	subs	r3, #1
 800775a:	b29a      	uxth	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007760:	e042      	b.n	80077e8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007764:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 fb2e 	bl	8007dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e04c      	b.n	8007810 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	691a      	ldr	r2, [r3, #16]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	b2d2      	uxtb	r2, r2
 8007782:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	1c5a      	adds	r2, r3, #1
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007792:	3b01      	subs	r3, #1
 8007794:	b29a      	uxth	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800779e:	b29b      	uxth	r3, r3
 80077a0:	3b01      	subs	r3, #1
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	f003 0304 	and.w	r3, r3, #4
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d118      	bne.n	80077e8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	691a      	ldr	r2, [r3, #16]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	b2d2      	uxtb	r2, r2
 80077c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077d2:	3b01      	subs	r3, #1
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077de:	b29b      	uxth	r3, r3
 80077e0:	3b01      	subs	r3, #1
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f47f aec2 	bne.w	8007576 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	e000      	b.n	8007810 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800780e:	2302      	movs	r3, #2
  }
}
 8007810:	4618      	mov	r0, r3
 8007812:	3728      	adds	r7, #40	; 0x28
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	00010004 	.word	0x00010004

0800781c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af02      	add	r7, sp, #8
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	4608      	mov	r0, r1
 8007826:	4611      	mov	r1, r2
 8007828:	461a      	mov	r2, r3
 800782a:	4603      	mov	r3, r0
 800782c:	817b      	strh	r3, [r7, #10]
 800782e:	460b      	mov	r3, r1
 8007830:	813b      	strh	r3, [r7, #8]
 8007832:	4613      	mov	r3, r2
 8007834:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007844:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	2200      	movs	r2, #0
 800784e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f000 f960 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00d      	beq.n	800787a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800786c:	d103      	bne.n	8007876 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007874:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e05f      	b.n	800793a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800787a:	897b      	ldrh	r3, [r7, #10]
 800787c:	b2db      	uxtb	r3, r3
 800787e:	461a      	mov	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007888:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	6a3a      	ldr	r2, [r7, #32]
 800788e:	492d      	ldr	r1, [pc, #180]	; (8007944 <I2C_RequestMemoryWrite+0x128>)
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 f998 	bl	8007bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e04c      	b.n	800793a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078a0:	2300      	movs	r3, #0
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b8:	6a39      	ldr	r1, [r7, #32]
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 fa02 	bl	8007cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00d      	beq.n	80078e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d107      	bne.n	80078de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e02b      	b.n	800793a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078e2:	88fb      	ldrh	r3, [r7, #6]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d105      	bne.n	80078f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078e8:	893b      	ldrh	r3, [r7, #8]
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	611a      	str	r2, [r3, #16]
 80078f2:	e021      	b.n	8007938 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80078f4:	893b      	ldrh	r3, [r7, #8]
 80078f6:	0a1b      	lsrs	r3, r3, #8
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007904:	6a39      	ldr	r1, [r7, #32]
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 f9dc 	bl	8007cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00d      	beq.n	800792e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	2b04      	cmp	r3, #4
 8007918:	d107      	bne.n	800792a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007928:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e005      	b.n	800793a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800792e:	893b      	ldrh	r3, [r7, #8]
 8007930:	b2da      	uxtb	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3718      	adds	r7, #24
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	00010002 	.word	0x00010002

08007948 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b088      	sub	sp, #32
 800794c:	af02      	add	r7, sp, #8
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	4608      	mov	r0, r1
 8007952:	4611      	mov	r1, r2
 8007954:	461a      	mov	r2, r3
 8007956:	4603      	mov	r3, r0
 8007958:	817b      	strh	r3, [r7, #10]
 800795a:	460b      	mov	r3, r1
 800795c:	813b      	strh	r3, [r7, #8]
 800795e:	4613      	mov	r3, r2
 8007960:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007970:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007980:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	2200      	movs	r2, #0
 800798a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f000 f8c2 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00d      	beq.n	80079b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079a8:	d103      	bne.n	80079b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e0aa      	b.n	8007b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80079b6:	897b      	ldrh	r3, [r7, #10]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	461a      	mov	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	6a3a      	ldr	r2, [r7, #32]
 80079ca:	4952      	ldr	r1, [pc, #328]	; (8007b14 <I2C_RequestMemoryRead+0x1cc>)
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 f8fa 	bl	8007bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e097      	b.n	8007b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079dc:	2300      	movs	r3, #0
 80079de:	617b      	str	r3, [r7, #20]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	617b      	str	r3, [r7, #20]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	617b      	str	r3, [r7, #20]
 80079f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079f4:	6a39      	ldr	r1, [r7, #32]
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f000 f964 	bl	8007cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00d      	beq.n	8007a1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	d107      	bne.n	8007a1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e076      	b.n	8007b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a1e:	88fb      	ldrh	r3, [r7, #6]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d105      	bne.n	8007a30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a24:	893b      	ldrh	r3, [r7, #8]
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	611a      	str	r2, [r3, #16]
 8007a2e:	e021      	b.n	8007a74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a30:	893b      	ldrh	r3, [r7, #8]
 8007a32:	0a1b      	lsrs	r3, r3, #8
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	b2da      	uxtb	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a40:	6a39      	ldr	r1, [r7, #32]
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f000 f93e 	bl	8007cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00d      	beq.n	8007a6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	d107      	bne.n	8007a66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e050      	b.n	8007b0c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a6a:	893b      	ldrh	r3, [r7, #8]
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a76:	6a39      	ldr	r1, [r7, #32]
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 f923 	bl	8007cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00d      	beq.n	8007aa0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a88:	2b04      	cmp	r3, #4
 8007a8a:	d107      	bne.n	8007a9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e035      	b.n	8007b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007aae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f000 f82b 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00d      	beq.n	8007ae4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ad6:	d103      	bne.n	8007ae0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ade:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e013      	b.n	8007b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007ae4:	897b      	ldrh	r3, [r7, #10]
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	f043 0301 	orr.w	r3, r3, #1
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	6a3a      	ldr	r2, [r7, #32]
 8007af8:	4906      	ldr	r1, [pc, #24]	; (8007b14 <I2C_RequestMemoryRead+0x1cc>)
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f000 f863 	bl	8007bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e000      	b.n	8007b0c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3718      	adds	r7, #24
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	00010002 	.word	0x00010002

08007b18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	603b      	str	r3, [r7, #0]
 8007b24:	4613      	mov	r3, r2
 8007b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b28:	e025      	b.n	8007b76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b30:	d021      	beq.n	8007b76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b32:	f7fd fad5 	bl	80050e0 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d302      	bcc.n	8007b48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d116      	bne.n	8007b76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b62:	f043 0220 	orr.w	r2, r3, #32
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e023      	b.n	8007bbe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	0c1b      	lsrs	r3, r3, #16
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d10d      	bne.n	8007b9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	43da      	mvns	r2, r3
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	bf0c      	ite	eq
 8007b92:	2301      	moveq	r3, #1
 8007b94:	2300      	movne	r3, #0
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	461a      	mov	r2, r3
 8007b9a:	e00c      	b.n	8007bb6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	43da      	mvns	r2, r3
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	bf0c      	ite	eq
 8007bae:	2301      	moveq	r3, #1
 8007bb0:	2300      	movne	r3, #0
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	79fb      	ldrb	r3, [r7, #7]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d0b6      	beq.n	8007b2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	60f8      	str	r0, [r7, #12]
 8007bce:	60b9      	str	r1, [r7, #8]
 8007bd0:	607a      	str	r2, [r7, #4]
 8007bd2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bd4:	e051      	b.n	8007c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007be4:	d123      	bne.n	8007c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bf4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007bfe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1a:	f043 0204 	orr.w	r2, r3, #4
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e046      	b.n	8007cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c34:	d021      	beq.n	8007c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c36:	f7fd fa53 	bl	80050e0 <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d302      	bcc.n	8007c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d116      	bne.n	8007c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2220      	movs	r2, #32
 8007c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c66:	f043 0220 	orr.w	r2, r3, #32
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e020      	b.n	8007cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	0c1b      	lsrs	r3, r3, #16
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d10c      	bne.n	8007c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	43da      	mvns	r2, r3
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	4013      	ands	r3, r2
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	bf14      	ite	ne
 8007c96:	2301      	movne	r3, #1
 8007c98:	2300      	moveq	r3, #0
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	e00b      	b.n	8007cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	43da      	mvns	r2, r3
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	4013      	ands	r3, r2
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	bf14      	ite	ne
 8007cb0:	2301      	movne	r3, #1
 8007cb2:	2300      	moveq	r3, #0
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d18d      	bne.n	8007bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cd0:	e02d      	b.n	8007d2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 f8ce 	bl	8007e74 <I2C_IsAcknowledgeFailed>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e02d      	b.n	8007d3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce8:	d021      	beq.n	8007d2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cea:	f7fd f9f9 	bl	80050e0 <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d302      	bcc.n	8007d00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d116      	bne.n	8007d2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1a:	f043 0220 	orr.w	r2, r3, #32
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e007      	b.n	8007d3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d38:	2b80      	cmp	r3, #128	; 0x80
 8007d3a:	d1ca      	bne.n	8007cd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b084      	sub	sp, #16
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	60b9      	str	r1, [r7, #8]
 8007d50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d52:	e02d      	b.n	8007db0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 f88d 	bl	8007e74 <I2C_IsAcknowledgeFailed>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e02d      	b.n	8007dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6a:	d021      	beq.n	8007db0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d6c:	f7fd f9b8 	bl	80050e0 <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d302      	bcc.n	8007d82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d116      	bne.n	8007db0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9c:	f043 0220 	orr.w	r2, r3, #32
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e007      	b.n	8007dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	f003 0304 	and.w	r3, r3, #4
 8007dba:	2b04      	cmp	r3, #4
 8007dbc:	d1ca      	bne.n	8007d54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007dd4:	e042      	b.n	8007e5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	f003 0310 	and.w	r3, r3, #16
 8007de0:	2b10      	cmp	r3, #16
 8007de2:	d119      	bne.n	8007e18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f06f 0210 	mvn.w	r2, #16
 8007dec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2220      	movs	r2, #32
 8007df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e029      	b.n	8007e6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e18:	f7fd f962 	bl	80050e0 <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d302      	bcc.n	8007e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d116      	bne.n	8007e5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2220      	movs	r2, #32
 8007e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e48:	f043 0220 	orr.w	r2, r3, #32
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e007      	b.n	8007e6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e66:	2b40      	cmp	r3, #64	; 0x40
 8007e68:	d1b5      	bne.n	8007dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e8a:	d11b      	bne.n	8007ec4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb0:	f043 0204 	orr.w	r2, r3, #4
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e000      	b.n	8007ec6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
	...

08007ed4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e267      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d075      	beq.n	8007fde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ef2:	4b88      	ldr	r3, [pc, #544]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f003 030c 	and.w	r3, r3, #12
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d00c      	beq.n	8007f18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007efe:	4b85      	ldr	r3, [pc, #532]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f06:	2b08      	cmp	r3, #8
 8007f08:	d112      	bne.n	8007f30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f0a:	4b82      	ldr	r3, [pc, #520]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f16:	d10b      	bne.n	8007f30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f18:	4b7e      	ldr	r3, [pc, #504]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d05b      	beq.n	8007fdc <HAL_RCC_OscConfig+0x108>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d157      	bne.n	8007fdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e242      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f38:	d106      	bne.n	8007f48 <HAL_RCC_OscConfig+0x74>
 8007f3a:	4b76      	ldr	r3, [pc, #472]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a75      	ldr	r2, [pc, #468]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f44:	6013      	str	r3, [r2, #0]
 8007f46:	e01d      	b.n	8007f84 <HAL_RCC_OscConfig+0xb0>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f50:	d10c      	bne.n	8007f6c <HAL_RCC_OscConfig+0x98>
 8007f52:	4b70      	ldr	r3, [pc, #448]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a6f      	ldr	r2, [pc, #444]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	4b6d      	ldr	r3, [pc, #436]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a6c      	ldr	r2, [pc, #432]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f68:	6013      	str	r3, [r2, #0]
 8007f6a:	e00b      	b.n	8007f84 <HAL_RCC_OscConfig+0xb0>
 8007f6c:	4b69      	ldr	r3, [pc, #420]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a68      	ldr	r2, [pc, #416]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	4b66      	ldr	r3, [pc, #408]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a65      	ldr	r2, [pc, #404]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d013      	beq.n	8007fb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f8c:	f7fd f8a8 	bl	80050e0 <HAL_GetTick>
 8007f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f92:	e008      	b.n	8007fa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f94:	f7fd f8a4 	bl	80050e0 <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	2b64      	cmp	r3, #100	; 0x64
 8007fa0:	d901      	bls.n	8007fa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e207      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fa6:	4b5b      	ldr	r3, [pc, #364]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d0f0      	beq.n	8007f94 <HAL_RCC_OscConfig+0xc0>
 8007fb2:	e014      	b.n	8007fde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fb4:	f7fd f894 	bl	80050e0 <HAL_GetTick>
 8007fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fba:	e008      	b.n	8007fce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fbc:	f7fd f890 	bl	80050e0 <HAL_GetTick>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	2b64      	cmp	r3, #100	; 0x64
 8007fc8:	d901      	bls.n	8007fce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e1f3      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fce:	4b51      	ldr	r3, [pc, #324]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1f0      	bne.n	8007fbc <HAL_RCC_OscConfig+0xe8>
 8007fda:	e000      	b.n	8007fde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0302 	and.w	r3, r3, #2
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d063      	beq.n	80080b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007fea:	4b4a      	ldr	r3, [pc, #296]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f003 030c 	and.w	r3, r3, #12
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00b      	beq.n	800800e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ff6:	4b47      	ldr	r3, [pc, #284]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ffe:	2b08      	cmp	r3, #8
 8008000:	d11c      	bne.n	800803c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008002:	4b44      	ldr	r3, [pc, #272]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d116      	bne.n	800803c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800800e:	4b41      	ldr	r3, [pc, #260]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d005      	beq.n	8008026 <HAL_RCC_OscConfig+0x152>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d001      	beq.n	8008026 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e1c7      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008026:	4b3b      	ldr	r3, [pc, #236]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	00db      	lsls	r3, r3, #3
 8008034:	4937      	ldr	r1, [pc, #220]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8008036:	4313      	orrs	r3, r2
 8008038:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800803a:	e03a      	b.n	80080b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d020      	beq.n	8008086 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008044:	4b34      	ldr	r3, [pc, #208]	; (8008118 <HAL_RCC_OscConfig+0x244>)
 8008046:	2201      	movs	r2, #1
 8008048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800804a:	f7fd f849 	bl	80050e0 <HAL_GetTick>
 800804e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008050:	e008      	b.n	8008064 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008052:	f7fd f845 	bl	80050e0 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	2b02      	cmp	r3, #2
 800805e:	d901      	bls.n	8008064 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e1a8      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008064:	4b2b      	ldr	r3, [pc, #172]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0302 	and.w	r3, r3, #2
 800806c:	2b00      	cmp	r3, #0
 800806e:	d0f0      	beq.n	8008052 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008070:	4b28      	ldr	r3, [pc, #160]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	00db      	lsls	r3, r3, #3
 800807e:	4925      	ldr	r1, [pc, #148]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8008080:	4313      	orrs	r3, r2
 8008082:	600b      	str	r3, [r1, #0]
 8008084:	e015      	b.n	80080b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008086:	4b24      	ldr	r3, [pc, #144]	; (8008118 <HAL_RCC_OscConfig+0x244>)
 8008088:	2200      	movs	r2, #0
 800808a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800808c:	f7fd f828 	bl	80050e0 <HAL_GetTick>
 8008090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008092:	e008      	b.n	80080a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008094:	f7fd f824 	bl	80050e0 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d901      	bls.n	80080a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e187      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080a6:	4b1b      	ldr	r3, [pc, #108]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1f0      	bne.n	8008094 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0308 	and.w	r3, r3, #8
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d036      	beq.n	800812c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d016      	beq.n	80080f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080c6:	4b15      	ldr	r3, [pc, #84]	; (800811c <HAL_RCC_OscConfig+0x248>)
 80080c8:	2201      	movs	r2, #1
 80080ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080cc:	f7fd f808 	bl	80050e0 <HAL_GetTick>
 80080d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080d2:	e008      	b.n	80080e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080d4:	f7fd f804 	bl	80050e0 <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d901      	bls.n	80080e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e167      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080e6:	4b0b      	ldr	r3, [pc, #44]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 80080e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080ea:	f003 0302 	and.w	r3, r3, #2
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d0f0      	beq.n	80080d4 <HAL_RCC_OscConfig+0x200>
 80080f2:	e01b      	b.n	800812c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080f4:	4b09      	ldr	r3, [pc, #36]	; (800811c <HAL_RCC_OscConfig+0x248>)
 80080f6:	2200      	movs	r2, #0
 80080f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080fa:	f7fc fff1 	bl	80050e0 <HAL_GetTick>
 80080fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008100:	e00e      	b.n	8008120 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008102:	f7fc ffed 	bl	80050e0 <HAL_GetTick>
 8008106:	4602      	mov	r2, r0
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	2b02      	cmp	r3, #2
 800810e:	d907      	bls.n	8008120 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e150      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
 8008114:	40023800 	.word	0x40023800
 8008118:	42470000 	.word	0x42470000
 800811c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008120:	4b88      	ldr	r3, [pc, #544]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 8008122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1ea      	bne.n	8008102 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0304 	and.w	r3, r3, #4
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 8097 	beq.w	8008268 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800813a:	2300      	movs	r3, #0
 800813c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800813e:	4b81      	ldr	r3, [pc, #516]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 8008140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10f      	bne.n	800816a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800814a:	2300      	movs	r3, #0
 800814c:	60bb      	str	r3, [r7, #8]
 800814e:	4b7d      	ldr	r3, [pc, #500]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 8008150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008152:	4a7c      	ldr	r2, [pc, #496]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 8008154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008158:	6413      	str	r3, [r2, #64]	; 0x40
 800815a:	4b7a      	ldr	r3, [pc, #488]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 800815c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008162:	60bb      	str	r3, [r7, #8]
 8008164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008166:	2301      	movs	r3, #1
 8008168:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800816a:	4b77      	ldr	r3, [pc, #476]	; (8008348 <HAL_RCC_OscConfig+0x474>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008172:	2b00      	cmp	r3, #0
 8008174:	d118      	bne.n	80081a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008176:	4b74      	ldr	r3, [pc, #464]	; (8008348 <HAL_RCC_OscConfig+0x474>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a73      	ldr	r2, [pc, #460]	; (8008348 <HAL_RCC_OscConfig+0x474>)
 800817c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008182:	f7fc ffad 	bl	80050e0 <HAL_GetTick>
 8008186:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008188:	e008      	b.n	800819c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800818a:	f7fc ffa9 	bl	80050e0 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	2b02      	cmp	r3, #2
 8008196:	d901      	bls.n	800819c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e10c      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800819c:	4b6a      	ldr	r3, [pc, #424]	; (8008348 <HAL_RCC_OscConfig+0x474>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d0f0      	beq.n	800818a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d106      	bne.n	80081be <HAL_RCC_OscConfig+0x2ea>
 80081b0:	4b64      	ldr	r3, [pc, #400]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80081b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b4:	4a63      	ldr	r2, [pc, #396]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80081b6:	f043 0301 	orr.w	r3, r3, #1
 80081ba:	6713      	str	r3, [r2, #112]	; 0x70
 80081bc:	e01c      	b.n	80081f8 <HAL_RCC_OscConfig+0x324>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	2b05      	cmp	r3, #5
 80081c4:	d10c      	bne.n	80081e0 <HAL_RCC_OscConfig+0x30c>
 80081c6:	4b5f      	ldr	r3, [pc, #380]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80081c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ca:	4a5e      	ldr	r2, [pc, #376]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80081cc:	f043 0304 	orr.w	r3, r3, #4
 80081d0:	6713      	str	r3, [r2, #112]	; 0x70
 80081d2:	4b5c      	ldr	r3, [pc, #368]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80081d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d6:	4a5b      	ldr	r2, [pc, #364]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80081d8:	f043 0301 	orr.w	r3, r3, #1
 80081dc:	6713      	str	r3, [r2, #112]	; 0x70
 80081de:	e00b      	b.n	80081f8 <HAL_RCC_OscConfig+0x324>
 80081e0:	4b58      	ldr	r3, [pc, #352]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80081e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e4:	4a57      	ldr	r2, [pc, #348]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80081e6:	f023 0301 	bic.w	r3, r3, #1
 80081ea:	6713      	str	r3, [r2, #112]	; 0x70
 80081ec:	4b55      	ldr	r3, [pc, #340]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80081ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f0:	4a54      	ldr	r2, [pc, #336]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80081f2:	f023 0304 	bic.w	r3, r3, #4
 80081f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d015      	beq.n	800822c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008200:	f7fc ff6e 	bl	80050e0 <HAL_GetTick>
 8008204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008206:	e00a      	b.n	800821e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008208:	f7fc ff6a 	bl	80050e0 <HAL_GetTick>
 800820c:	4602      	mov	r2, r0
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	f241 3288 	movw	r2, #5000	; 0x1388
 8008216:	4293      	cmp	r3, r2
 8008218:	d901      	bls.n	800821e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800821a:	2303      	movs	r3, #3
 800821c:	e0cb      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800821e:	4b49      	ldr	r3, [pc, #292]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 8008220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008222:	f003 0302 	and.w	r3, r3, #2
 8008226:	2b00      	cmp	r3, #0
 8008228:	d0ee      	beq.n	8008208 <HAL_RCC_OscConfig+0x334>
 800822a:	e014      	b.n	8008256 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800822c:	f7fc ff58 	bl	80050e0 <HAL_GetTick>
 8008230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008232:	e00a      	b.n	800824a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008234:	f7fc ff54 	bl	80050e0 <HAL_GetTick>
 8008238:	4602      	mov	r2, r0
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008242:	4293      	cmp	r3, r2
 8008244:	d901      	bls.n	800824a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e0b5      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800824a:	4b3e      	ldr	r3, [pc, #248]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 800824c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1ee      	bne.n	8008234 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008256:	7dfb      	ldrb	r3, [r7, #23]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d105      	bne.n	8008268 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800825c:	4b39      	ldr	r3, [pc, #228]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 800825e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008260:	4a38      	ldr	r2, [pc, #224]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 8008262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008266:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 80a1 	beq.w	80083b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008272:	4b34      	ldr	r3, [pc, #208]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f003 030c 	and.w	r3, r3, #12
 800827a:	2b08      	cmp	r3, #8
 800827c:	d05c      	beq.n	8008338 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	2b02      	cmp	r3, #2
 8008284:	d141      	bne.n	800830a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008286:	4b31      	ldr	r3, [pc, #196]	; (800834c <HAL_RCC_OscConfig+0x478>)
 8008288:	2200      	movs	r2, #0
 800828a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800828c:	f7fc ff28 	bl	80050e0 <HAL_GetTick>
 8008290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008292:	e008      	b.n	80082a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008294:	f7fc ff24 	bl	80050e0 <HAL_GetTick>
 8008298:	4602      	mov	r2, r0
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d901      	bls.n	80082a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e087      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082a6:	4b27      	ldr	r3, [pc, #156]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1f0      	bne.n	8008294 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69da      	ldr	r2, [r3, #28]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	431a      	orrs	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	019b      	lsls	r3, r3, #6
 80082c2:	431a      	orrs	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c8:	085b      	lsrs	r3, r3, #1
 80082ca:	3b01      	subs	r3, #1
 80082cc:	041b      	lsls	r3, r3, #16
 80082ce:	431a      	orrs	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d4:	061b      	lsls	r3, r3, #24
 80082d6:	491b      	ldr	r1, [pc, #108]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80082d8:	4313      	orrs	r3, r2
 80082da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082dc:	4b1b      	ldr	r3, [pc, #108]	; (800834c <HAL_RCC_OscConfig+0x478>)
 80082de:	2201      	movs	r2, #1
 80082e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082e2:	f7fc fefd 	bl	80050e0 <HAL_GetTick>
 80082e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082e8:	e008      	b.n	80082fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082ea:	f7fc fef9 	bl	80050e0 <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d901      	bls.n	80082fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e05c      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082fc:	4b11      	ldr	r3, [pc, #68]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d0f0      	beq.n	80082ea <HAL_RCC_OscConfig+0x416>
 8008308:	e054      	b.n	80083b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800830a:	4b10      	ldr	r3, [pc, #64]	; (800834c <HAL_RCC_OscConfig+0x478>)
 800830c:	2200      	movs	r2, #0
 800830e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008310:	f7fc fee6 	bl	80050e0 <HAL_GetTick>
 8008314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008316:	e008      	b.n	800832a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008318:	f7fc fee2 	bl	80050e0 <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	2b02      	cmp	r3, #2
 8008324:	d901      	bls.n	800832a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e045      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800832a:	4b06      	ldr	r3, [pc, #24]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1f0      	bne.n	8008318 <HAL_RCC_OscConfig+0x444>
 8008336:	e03d      	b.n	80083b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d107      	bne.n	8008350 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e038      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
 8008344:	40023800 	.word	0x40023800
 8008348:	40007000 	.word	0x40007000
 800834c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008350:	4b1b      	ldr	r3, [pc, #108]	; (80083c0 <HAL_RCC_OscConfig+0x4ec>)
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d028      	beq.n	80083b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008368:	429a      	cmp	r2, r3
 800836a:	d121      	bne.n	80083b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008376:	429a      	cmp	r2, r3
 8008378:	d11a      	bne.n	80083b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008380:	4013      	ands	r3, r2
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008386:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008388:	4293      	cmp	r3, r2
 800838a:	d111      	bne.n	80083b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008396:	085b      	lsrs	r3, r3, #1
 8008398:	3b01      	subs	r3, #1
 800839a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800839c:	429a      	cmp	r2, r3
 800839e:	d107      	bne.n	80083b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d001      	beq.n	80083b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e000      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3718      	adds	r7, #24
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	40023800 	.word	0x40023800

080083c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d101      	bne.n	80083d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e0cc      	b.n	8008572 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083d8:	4b68      	ldr	r3, [pc, #416]	; (800857c <HAL_RCC_ClockConfig+0x1b8>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0307 	and.w	r3, r3, #7
 80083e0:	683a      	ldr	r2, [r7, #0]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d90c      	bls.n	8008400 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083e6:	4b65      	ldr	r3, [pc, #404]	; (800857c <HAL_RCC_ClockConfig+0x1b8>)
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	b2d2      	uxtb	r2, r2
 80083ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ee:	4b63      	ldr	r3, [pc, #396]	; (800857c <HAL_RCC_ClockConfig+0x1b8>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0307 	and.w	r3, r3, #7
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d001      	beq.n	8008400 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e0b8      	b.n	8008572 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0302 	and.w	r3, r3, #2
 8008408:	2b00      	cmp	r3, #0
 800840a:	d020      	beq.n	800844e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0304 	and.w	r3, r3, #4
 8008414:	2b00      	cmp	r3, #0
 8008416:	d005      	beq.n	8008424 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008418:	4b59      	ldr	r3, [pc, #356]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	4a58      	ldr	r2, [pc, #352]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 800841e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008422:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0308 	and.w	r3, r3, #8
 800842c:	2b00      	cmp	r3, #0
 800842e:	d005      	beq.n	800843c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008430:	4b53      	ldr	r3, [pc, #332]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	4a52      	ldr	r2, [pc, #328]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 8008436:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800843a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800843c:	4b50      	ldr	r3, [pc, #320]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	494d      	ldr	r1, [pc, #308]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 800844a:	4313      	orrs	r3, r2
 800844c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d044      	beq.n	80084e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d107      	bne.n	8008472 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008462:	4b47      	ldr	r3, [pc, #284]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d119      	bne.n	80084a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e07f      	b.n	8008572 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	2b02      	cmp	r3, #2
 8008478:	d003      	beq.n	8008482 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800847e:	2b03      	cmp	r3, #3
 8008480:	d107      	bne.n	8008492 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008482:	4b3f      	ldr	r3, [pc, #252]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d109      	bne.n	80084a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e06f      	b.n	8008572 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008492:	4b3b      	ldr	r3, [pc, #236]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0302 	and.w	r3, r3, #2
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e067      	b.n	8008572 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084a2:	4b37      	ldr	r3, [pc, #220]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f023 0203 	bic.w	r2, r3, #3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	4934      	ldr	r1, [pc, #208]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 80084b0:	4313      	orrs	r3, r2
 80084b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084b4:	f7fc fe14 	bl	80050e0 <HAL_GetTick>
 80084b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084ba:	e00a      	b.n	80084d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084bc:	f7fc fe10 	bl	80050e0 <HAL_GetTick>
 80084c0:	4602      	mov	r2, r0
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d901      	bls.n	80084d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e04f      	b.n	8008572 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084d2:	4b2b      	ldr	r3, [pc, #172]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f003 020c 	and.w	r2, r3, #12
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d1eb      	bne.n	80084bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084e4:	4b25      	ldr	r3, [pc, #148]	; (800857c <HAL_RCC_ClockConfig+0x1b8>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 0307 	and.w	r3, r3, #7
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d20c      	bcs.n	800850c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084f2:	4b22      	ldr	r3, [pc, #136]	; (800857c <HAL_RCC_ClockConfig+0x1b8>)
 80084f4:	683a      	ldr	r2, [r7, #0]
 80084f6:	b2d2      	uxtb	r2, r2
 80084f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084fa:	4b20      	ldr	r3, [pc, #128]	; (800857c <HAL_RCC_ClockConfig+0x1b8>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0307 	and.w	r3, r3, #7
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	429a      	cmp	r2, r3
 8008506:	d001      	beq.n	800850c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	e032      	b.n	8008572 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0304 	and.w	r3, r3, #4
 8008514:	2b00      	cmp	r3, #0
 8008516:	d008      	beq.n	800852a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008518:	4b19      	ldr	r3, [pc, #100]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	4916      	ldr	r1, [pc, #88]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 8008526:	4313      	orrs	r3, r2
 8008528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 0308 	and.w	r3, r3, #8
 8008532:	2b00      	cmp	r3, #0
 8008534:	d009      	beq.n	800854a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008536:	4b12      	ldr	r3, [pc, #72]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	00db      	lsls	r3, r3, #3
 8008544:	490e      	ldr	r1, [pc, #56]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 8008546:	4313      	orrs	r3, r2
 8008548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800854a:	f000 f821 	bl	8008590 <HAL_RCC_GetSysClockFreq>
 800854e:	4602      	mov	r2, r0
 8008550:	4b0b      	ldr	r3, [pc, #44]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	091b      	lsrs	r3, r3, #4
 8008556:	f003 030f 	and.w	r3, r3, #15
 800855a:	490a      	ldr	r1, [pc, #40]	; (8008584 <HAL_RCC_ClockConfig+0x1c0>)
 800855c:	5ccb      	ldrb	r3, [r1, r3]
 800855e:	fa22 f303 	lsr.w	r3, r2, r3
 8008562:	4a09      	ldr	r2, [pc, #36]	; (8008588 <HAL_RCC_ClockConfig+0x1c4>)
 8008564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008566:	4b09      	ldr	r3, [pc, #36]	; (800858c <HAL_RCC_ClockConfig+0x1c8>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4618      	mov	r0, r3
 800856c:	f7fc fd74 	bl	8005058 <HAL_InitTick>

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	40023c00 	.word	0x40023c00
 8008580:	40023800 	.word	0x40023800
 8008584:	0800c0c0 	.word	0x0800c0c0
 8008588:	20000390 	.word	0x20000390
 800858c:	20000394 	.word	0x20000394

08008590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008594:	b090      	sub	sp, #64	; 0x40
 8008596:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008598:	2300      	movs	r3, #0
 800859a:	637b      	str	r3, [r7, #52]	; 0x34
 800859c:	2300      	movs	r3, #0
 800859e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085a0:	2300      	movs	r3, #0
 80085a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085a8:	4b59      	ldr	r3, [pc, #356]	; (8008710 <HAL_RCC_GetSysClockFreq+0x180>)
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f003 030c 	and.w	r3, r3, #12
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	d00d      	beq.n	80085d0 <HAL_RCC_GetSysClockFreq+0x40>
 80085b4:	2b08      	cmp	r3, #8
 80085b6:	f200 80a1 	bhi.w	80086fc <HAL_RCC_GetSysClockFreq+0x16c>
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d002      	beq.n	80085c4 <HAL_RCC_GetSysClockFreq+0x34>
 80085be:	2b04      	cmp	r3, #4
 80085c0:	d003      	beq.n	80085ca <HAL_RCC_GetSysClockFreq+0x3a>
 80085c2:	e09b      	b.n	80086fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80085c4:	4b53      	ldr	r3, [pc, #332]	; (8008714 <HAL_RCC_GetSysClockFreq+0x184>)
 80085c6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80085c8:	e09b      	b.n	8008702 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80085ca:	4b53      	ldr	r3, [pc, #332]	; (8008718 <HAL_RCC_GetSysClockFreq+0x188>)
 80085cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80085ce:	e098      	b.n	8008702 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085d0:	4b4f      	ldr	r3, [pc, #316]	; (8008710 <HAL_RCC_GetSysClockFreq+0x180>)
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80085da:	4b4d      	ldr	r3, [pc, #308]	; (8008710 <HAL_RCC_GetSysClockFreq+0x180>)
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d028      	beq.n	8008638 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085e6:	4b4a      	ldr	r3, [pc, #296]	; (8008710 <HAL_RCC_GetSysClockFreq+0x180>)
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	099b      	lsrs	r3, r3, #6
 80085ec:	2200      	movs	r2, #0
 80085ee:	623b      	str	r3, [r7, #32]
 80085f0:	627a      	str	r2, [r7, #36]	; 0x24
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80085f8:	2100      	movs	r1, #0
 80085fa:	4b47      	ldr	r3, [pc, #284]	; (8008718 <HAL_RCC_GetSysClockFreq+0x188>)
 80085fc:	fb03 f201 	mul.w	r2, r3, r1
 8008600:	2300      	movs	r3, #0
 8008602:	fb00 f303 	mul.w	r3, r0, r3
 8008606:	4413      	add	r3, r2
 8008608:	4a43      	ldr	r2, [pc, #268]	; (8008718 <HAL_RCC_GetSysClockFreq+0x188>)
 800860a:	fba0 1202 	umull	r1, r2, r0, r2
 800860e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008610:	460a      	mov	r2, r1
 8008612:	62ba      	str	r2, [r7, #40]	; 0x28
 8008614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008616:	4413      	add	r3, r2
 8008618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800861a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861c:	2200      	movs	r2, #0
 800861e:	61bb      	str	r3, [r7, #24]
 8008620:	61fa      	str	r2, [r7, #28]
 8008622:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008626:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800862a:	f7f8 f913 	bl	8000854 <__aeabi_uldivmod>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	4613      	mov	r3, r2
 8008634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008636:	e053      	b.n	80086e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008638:	4b35      	ldr	r3, [pc, #212]	; (8008710 <HAL_RCC_GetSysClockFreq+0x180>)
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	099b      	lsrs	r3, r3, #6
 800863e:	2200      	movs	r2, #0
 8008640:	613b      	str	r3, [r7, #16]
 8008642:	617a      	str	r2, [r7, #20]
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800864a:	f04f 0b00 	mov.w	fp, #0
 800864e:	4652      	mov	r2, sl
 8008650:	465b      	mov	r3, fp
 8008652:	f04f 0000 	mov.w	r0, #0
 8008656:	f04f 0100 	mov.w	r1, #0
 800865a:	0159      	lsls	r1, r3, #5
 800865c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008660:	0150      	lsls	r0, r2, #5
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	ebb2 080a 	subs.w	r8, r2, sl
 800866a:	eb63 090b 	sbc.w	r9, r3, fp
 800866e:	f04f 0200 	mov.w	r2, #0
 8008672:	f04f 0300 	mov.w	r3, #0
 8008676:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800867a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800867e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008682:	ebb2 0408 	subs.w	r4, r2, r8
 8008686:	eb63 0509 	sbc.w	r5, r3, r9
 800868a:	f04f 0200 	mov.w	r2, #0
 800868e:	f04f 0300 	mov.w	r3, #0
 8008692:	00eb      	lsls	r3, r5, #3
 8008694:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008698:	00e2      	lsls	r2, r4, #3
 800869a:	4614      	mov	r4, r2
 800869c:	461d      	mov	r5, r3
 800869e:	eb14 030a 	adds.w	r3, r4, sl
 80086a2:	603b      	str	r3, [r7, #0]
 80086a4:	eb45 030b 	adc.w	r3, r5, fp
 80086a8:	607b      	str	r3, [r7, #4]
 80086aa:	f04f 0200 	mov.w	r2, #0
 80086ae:	f04f 0300 	mov.w	r3, #0
 80086b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80086b6:	4629      	mov	r1, r5
 80086b8:	028b      	lsls	r3, r1, #10
 80086ba:	4621      	mov	r1, r4
 80086bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80086c0:	4621      	mov	r1, r4
 80086c2:	028a      	lsls	r2, r1, #10
 80086c4:	4610      	mov	r0, r2
 80086c6:	4619      	mov	r1, r3
 80086c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ca:	2200      	movs	r2, #0
 80086cc:	60bb      	str	r3, [r7, #8]
 80086ce:	60fa      	str	r2, [r7, #12]
 80086d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086d4:	f7f8 f8be 	bl	8000854 <__aeabi_uldivmod>
 80086d8:	4602      	mov	r2, r0
 80086da:	460b      	mov	r3, r1
 80086dc:	4613      	mov	r3, r2
 80086de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80086e0:	4b0b      	ldr	r3, [pc, #44]	; (8008710 <HAL_RCC_GetSysClockFreq+0x180>)
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	0c1b      	lsrs	r3, r3, #16
 80086e6:	f003 0303 	and.w	r3, r3, #3
 80086ea:	3301      	adds	r3, #1
 80086ec:	005b      	lsls	r3, r3, #1
 80086ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80086f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80086fa:	e002      	b.n	8008702 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80086fc:	4b05      	ldr	r3, [pc, #20]	; (8008714 <HAL_RCC_GetSysClockFreq+0x184>)
 80086fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008704:	4618      	mov	r0, r3
 8008706:	3740      	adds	r7, #64	; 0x40
 8008708:	46bd      	mov	sp, r7
 800870a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800870e:	bf00      	nop
 8008710:	40023800 	.word	0x40023800
 8008714:	00f42400 	.word	0x00f42400
 8008718:	017d7840 	.word	0x017d7840

0800871c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800871c:	b480      	push	{r7}
 800871e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008720:	4b03      	ldr	r3, [pc, #12]	; (8008730 <HAL_RCC_GetHCLKFreq+0x14>)
 8008722:	681b      	ldr	r3, [r3, #0]
}
 8008724:	4618      	mov	r0, r3
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	20000390 	.word	0x20000390

08008734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008738:	f7ff fff0 	bl	800871c <HAL_RCC_GetHCLKFreq>
 800873c:	4602      	mov	r2, r0
 800873e:	4b05      	ldr	r3, [pc, #20]	; (8008754 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	0a9b      	lsrs	r3, r3, #10
 8008744:	f003 0307 	and.w	r3, r3, #7
 8008748:	4903      	ldr	r1, [pc, #12]	; (8008758 <HAL_RCC_GetPCLK1Freq+0x24>)
 800874a:	5ccb      	ldrb	r3, [r1, r3]
 800874c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008750:	4618      	mov	r0, r3
 8008752:	bd80      	pop	{r7, pc}
 8008754:	40023800 	.word	0x40023800
 8008758:	0800c0d0 	.word	0x0800c0d0

0800875c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008760:	f7ff ffdc 	bl	800871c <HAL_RCC_GetHCLKFreq>
 8008764:	4602      	mov	r2, r0
 8008766:	4b05      	ldr	r3, [pc, #20]	; (800877c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	0b5b      	lsrs	r3, r3, #13
 800876c:	f003 0307 	and.w	r3, r3, #7
 8008770:	4903      	ldr	r1, [pc, #12]	; (8008780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008772:	5ccb      	ldrb	r3, [r1, r3]
 8008774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008778:	4618      	mov	r0, r3
 800877a:	bd80      	pop	{r7, pc}
 800877c:	40023800 	.word	0x40023800
 8008780:	0800c0d0 	.word	0x0800c0d0

08008784 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e07b      	b.n	800888e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879a:	2b00      	cmp	r3, #0
 800879c:	d108      	bne.n	80087b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087a6:	d009      	beq.n	80087bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	61da      	str	r2, [r3, #28]
 80087ae:	e005      	b.n	80087bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d106      	bne.n	80087dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7fc f9c4 	bl	8004b64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2202      	movs	r2, #2
 80087e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008804:	431a      	orrs	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800880e:	431a      	orrs	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	f003 0302 	and.w	r3, r3, #2
 8008818:	431a      	orrs	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	431a      	orrs	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800882c:	431a      	orrs	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008836:	431a      	orrs	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6a1b      	ldr	r3, [r3, #32]
 800883c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008840:	ea42 0103 	orr.w	r1, r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008848:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	430a      	orrs	r2, r1
 8008852:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	0c1b      	lsrs	r3, r3, #16
 800885a:	f003 0104 	and.w	r1, r3, #4
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008862:	f003 0210 	and.w	r2, r3, #16
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	430a      	orrs	r2, r1
 800886c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	69da      	ldr	r2, [r3, #28]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800887c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b088      	sub	sp, #32
 800889a:	af00      	add	r7, sp, #0
 800889c:	60f8      	str	r0, [r7, #12]
 800889e:	60b9      	str	r1, [r7, #8]
 80088a0:	603b      	str	r3, [r7, #0]
 80088a2:	4613      	mov	r3, r2
 80088a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088a6:	2300      	movs	r3, #0
 80088a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d101      	bne.n	80088b8 <HAL_SPI_Transmit+0x22>
 80088b4:	2302      	movs	r3, #2
 80088b6:	e126      	b.n	8008b06 <HAL_SPI_Transmit+0x270>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088c0:	f7fc fc0e 	bl	80050e0 <HAL_GetTick>
 80088c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80088c6:	88fb      	ldrh	r3, [r7, #6]
 80088c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d002      	beq.n	80088dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80088d6:	2302      	movs	r3, #2
 80088d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80088da:	e10b      	b.n	8008af4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d002      	beq.n	80088e8 <HAL_SPI_Transmit+0x52>
 80088e2:	88fb      	ldrh	r3, [r7, #6]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d102      	bne.n	80088ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80088ec:	e102      	b.n	8008af4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2203      	movs	r2, #3
 80088f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	88fa      	ldrh	r2, [r7, #6]
 8008906:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	88fa      	ldrh	r2, [r7, #6]
 800890c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008934:	d10f      	bne.n	8008956 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008944:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008954:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008960:	2b40      	cmp	r3, #64	; 0x40
 8008962:	d007      	beq.n	8008974 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008972:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800897c:	d14b      	bne.n	8008a16 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <HAL_SPI_Transmit+0xf6>
 8008986:	8afb      	ldrh	r3, [r7, #22]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d13e      	bne.n	8008a0a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008990:	881a      	ldrh	r2, [r3, #0]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899c:	1c9a      	adds	r2, r3, #2
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	3b01      	subs	r3, #1
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80089b0:	e02b      	b.n	8008a0a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	f003 0302 	and.w	r3, r3, #2
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d112      	bne.n	80089e6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c4:	881a      	ldrh	r2, [r3, #0]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d0:	1c9a      	adds	r2, r3, #2
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089da:	b29b      	uxth	r3, r3
 80089dc:	3b01      	subs	r3, #1
 80089de:	b29a      	uxth	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80089e4:	e011      	b.n	8008a0a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089e6:	f7fc fb7b 	bl	80050e0 <HAL_GetTick>
 80089ea:	4602      	mov	r2, r0
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d803      	bhi.n	80089fe <HAL_SPI_Transmit+0x168>
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fc:	d102      	bne.n	8008a04 <HAL_SPI_Transmit+0x16e>
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d102      	bne.n	8008a0a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008a04:	2303      	movs	r3, #3
 8008a06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008a08:	e074      	b.n	8008af4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1ce      	bne.n	80089b2 <HAL_SPI_Transmit+0x11c>
 8008a14:	e04c      	b.n	8008ab0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <HAL_SPI_Transmit+0x18e>
 8008a1e:	8afb      	ldrh	r3, [r7, #22]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d140      	bne.n	8008aa6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	330c      	adds	r3, #12
 8008a2e:	7812      	ldrb	r2, [r2, #0]
 8008a30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a36:	1c5a      	adds	r2, r3, #1
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	3b01      	subs	r3, #1
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008a4a:	e02c      	b.n	8008aa6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f003 0302 	and.w	r3, r3, #2
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d113      	bne.n	8008a82 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	330c      	adds	r3, #12
 8008a64:	7812      	ldrb	r2, [r2, #0]
 8008a66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6c:	1c5a      	adds	r2, r3, #1
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008a80:	e011      	b.n	8008aa6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a82:	f7fc fb2d 	bl	80050e0 <HAL_GetTick>
 8008a86:	4602      	mov	r2, r0
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d803      	bhi.n	8008a9a <HAL_SPI_Transmit+0x204>
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a98:	d102      	bne.n	8008aa0 <HAL_SPI_Transmit+0x20a>
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d102      	bne.n	8008aa6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008aa4:	e026      	b.n	8008af4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1cd      	bne.n	8008a4c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ab0:	69ba      	ldr	r2, [r7, #24]
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 fbcb 	bl	8009250 <SPI_EndRxTxTransaction>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10a      	bne.n	8008ae4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ace:	2300      	movs	r3, #0
 8008ad0:	613b      	str	r3, [r7, #16]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	613b      	str	r3, [r7, #16]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	613b      	str	r3, [r7, #16]
 8008ae2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d002      	beq.n	8008af2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	77fb      	strb	r3, [r7, #31]
 8008af0:	e000      	b.n	8008af4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008af2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008b04:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3720      	adds	r7, #32
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b088      	sub	sp, #32
 8008b12:	af02      	add	r7, sp, #8
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	603b      	str	r3, [r7, #0]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b2a:	d112      	bne.n	8008b52 <HAL_SPI_Receive+0x44>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10e      	bne.n	8008b52 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2204      	movs	r2, #4
 8008b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008b3c:	88fa      	ldrh	r2, [r7, #6]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	4613      	mov	r3, r2
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	68b9      	ldr	r1, [r7, #8]
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 f8f1 	bl	8008d30 <HAL_SPI_TransmitReceive>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	e0ea      	b.n	8008d28 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d101      	bne.n	8008b60 <HAL_SPI_Receive+0x52>
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	e0e3      	b.n	8008d28 <HAL_SPI_Receive+0x21a>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b68:	f7fc faba 	bl	80050e0 <HAL_GetTick>
 8008b6c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d002      	beq.n	8008b80 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b7e:	e0ca      	b.n	8008d16 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d002      	beq.n	8008b8c <HAL_SPI_Receive+0x7e>
 8008b86:	88fb      	ldrh	r3, [r7, #6]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d102      	bne.n	8008b92 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b90:	e0c1      	b.n	8008d16 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2204      	movs	r2, #4
 8008b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	88fa      	ldrh	r2, [r7, #6]
 8008baa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	88fa      	ldrh	r2, [r7, #6]
 8008bb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bd8:	d10f      	bne.n	8008bfa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008be8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008bf8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c04:	2b40      	cmp	r3, #64	; 0x40
 8008c06:	d007      	beq.n	8008c18 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c16:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d162      	bne.n	8008ce6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008c20:	e02e      	b.n	8008c80 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	f003 0301 	and.w	r3, r3, #1
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d115      	bne.n	8008c5c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f103 020c 	add.w	r2, r3, #12
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3c:	7812      	ldrb	r2, [r2, #0]
 8008c3e:	b2d2      	uxtb	r2, r2
 8008c40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c46:	1c5a      	adds	r2, r3, #1
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	3b01      	subs	r3, #1
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c5a:	e011      	b.n	8008c80 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c5c:	f7fc fa40 	bl	80050e0 <HAL_GetTick>
 8008c60:	4602      	mov	r2, r0
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d803      	bhi.n	8008c74 <HAL_SPI_Receive+0x166>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c72:	d102      	bne.n	8008c7a <HAL_SPI_Receive+0x16c>
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d102      	bne.n	8008c80 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008c7e:	e04a      	b.n	8008d16 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1cb      	bne.n	8008c22 <HAL_SPI_Receive+0x114>
 8008c8a:	e031      	b.n	8008cf0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d113      	bne.n	8008cc2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68da      	ldr	r2, [r3, #12]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca4:	b292      	uxth	r2, r2
 8008ca6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cac:	1c9a      	adds	r2, r3, #2
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008cc0:	e011      	b.n	8008ce6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cc2:	f7fc fa0d 	bl	80050e0 <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	683a      	ldr	r2, [r7, #0]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d803      	bhi.n	8008cda <HAL_SPI_Receive+0x1cc>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd8:	d102      	bne.n	8008ce0 <HAL_SPI_Receive+0x1d2>
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d102      	bne.n	8008ce6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008ce4:	e017      	b.n	8008d16 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1cd      	bne.n	8008c8c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f000 fa45 	bl	8009184 <SPI_EndRxTransaction>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2220      	movs	r2, #32
 8008d04:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d002      	beq.n	8008d14 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	75fb      	strb	r3, [r7, #23]
 8008d12:	e000      	b.n	8008d16 <HAL_SPI_Receive+0x208>
  }

error :
 8008d14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3718      	adds	r7, #24
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b08c      	sub	sp, #48	; 0x30
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
 8008d3c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d101      	bne.n	8008d56 <HAL_SPI_TransmitReceive+0x26>
 8008d52:	2302      	movs	r3, #2
 8008d54:	e18a      	b.n	800906c <HAL_SPI_TransmitReceive+0x33c>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d5e:	f7fc f9bf 	bl	80050e0 <HAL_GetTick>
 8008d62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008d74:	887b      	ldrh	r3, [r7, #2]
 8008d76:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d00f      	beq.n	8008da0 <HAL_SPI_TransmitReceive+0x70>
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d86:	d107      	bne.n	8008d98 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d103      	bne.n	8008d98 <HAL_SPI_TransmitReceive+0x68>
 8008d90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d94:	2b04      	cmp	r3, #4
 8008d96:	d003      	beq.n	8008da0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008d98:	2302      	movs	r3, #2
 8008d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d9e:	e15b      	b.n	8009058 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d005      	beq.n	8008db2 <HAL_SPI_TransmitReceive+0x82>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d002      	beq.n	8008db2 <HAL_SPI_TransmitReceive+0x82>
 8008dac:	887b      	ldrh	r3, [r7, #2]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d103      	bne.n	8008dba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008db8:	e14e      	b.n	8009058 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b04      	cmp	r3, #4
 8008dc4:	d003      	beq.n	8008dce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2205      	movs	r2, #5
 8008dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	887a      	ldrh	r2, [r7, #2]
 8008dde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	887a      	ldrh	r2, [r7, #2]
 8008de4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	887a      	ldrh	r2, [r7, #2]
 8008df0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	887a      	ldrh	r2, [r7, #2]
 8008df6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e0e:	2b40      	cmp	r3, #64	; 0x40
 8008e10:	d007      	beq.n	8008e22 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e2a:	d178      	bne.n	8008f1e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d002      	beq.n	8008e3a <HAL_SPI_TransmitReceive+0x10a>
 8008e34:	8b7b      	ldrh	r3, [r7, #26]
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d166      	bne.n	8008f08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3e:	881a      	ldrh	r2, [r3, #0]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4a:	1c9a      	adds	r2, r3, #2
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	3b01      	subs	r3, #1
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e5e:	e053      	b.n	8008f08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	f003 0302 	and.w	r3, r3, #2
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d11b      	bne.n	8008ea6 <HAL_SPI_TransmitReceive+0x176>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d016      	beq.n	8008ea6 <HAL_SPI_TransmitReceive+0x176>
 8008e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d113      	bne.n	8008ea6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e82:	881a      	ldrh	r2, [r3, #0]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8e:	1c9a      	adds	r2, r3, #2
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d119      	bne.n	8008ee8 <HAL_SPI_TransmitReceive+0x1b8>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d014      	beq.n	8008ee8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68da      	ldr	r2, [r3, #12]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec8:	b292      	uxth	r2, r2
 8008eca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed0:	1c9a      	adds	r2, r3, #2
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	3b01      	subs	r3, #1
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ee8:	f7fc f8fa 	bl	80050e0 <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d807      	bhi.n	8008f08 <HAL_SPI_TransmitReceive+0x1d8>
 8008ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efe:	d003      	beq.n	8008f08 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008f00:	2303      	movs	r3, #3
 8008f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008f06:	e0a7      	b.n	8009058 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1a6      	bne.n	8008e60 <HAL_SPI_TransmitReceive+0x130>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1a1      	bne.n	8008e60 <HAL_SPI_TransmitReceive+0x130>
 8008f1c:	e07c      	b.n	8009018 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d002      	beq.n	8008f2c <HAL_SPI_TransmitReceive+0x1fc>
 8008f26:	8b7b      	ldrh	r3, [r7, #26]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d16b      	bne.n	8009004 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	330c      	adds	r3, #12
 8008f36:	7812      	ldrb	r2, [r2, #0]
 8008f38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3e:	1c5a      	adds	r2, r3, #1
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f52:	e057      	b.n	8009004 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f003 0302 	and.w	r3, r3, #2
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d11c      	bne.n	8008f9c <HAL_SPI_TransmitReceive+0x26c>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d017      	beq.n	8008f9c <HAL_SPI_TransmitReceive+0x26c>
 8008f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d114      	bne.n	8008f9c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	330c      	adds	r3, #12
 8008f7c:	7812      	ldrb	r2, [r2, #0]
 8008f7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f84:	1c5a      	adds	r2, r3, #1
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	3b01      	subs	r3, #1
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	f003 0301 	and.w	r3, r3, #1
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d119      	bne.n	8008fde <HAL_SPI_TransmitReceive+0x2ae>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d014      	beq.n	8008fde <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68da      	ldr	r2, [r3, #12]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbe:	b2d2      	uxtb	r2, r2
 8008fc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc6:	1c5a      	adds	r2, r3, #1
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008fde:	f7fc f87f 	bl	80050e0 <HAL_GetTick>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d803      	bhi.n	8008ff6 <HAL_SPI_TransmitReceive+0x2c6>
 8008fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff4:	d102      	bne.n	8008ffc <HAL_SPI_TransmitReceive+0x2cc>
 8008ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d103      	bne.n	8009004 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009002:	e029      	b.n	8009058 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009008:	b29b      	uxth	r3, r3
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1a2      	bne.n	8008f54 <HAL_SPI_TransmitReceive+0x224>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009012:	b29b      	uxth	r3, r3
 8009014:	2b00      	cmp	r3, #0
 8009016:	d19d      	bne.n	8008f54 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800901a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 f917 	bl	8009250 <SPI_EndRxTxTransaction>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d006      	beq.n	8009036 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2220      	movs	r2, #32
 8009032:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009034:	e010      	b.n	8009058 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d10b      	bne.n	8009056 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800903e:	2300      	movs	r3, #0
 8009040:	617b      	str	r3, [r7, #20]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	617b      	str	r3, [r7, #20]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	617b      	str	r3, [r7, #20]
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	e000      	b.n	8009058 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009056:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009068:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800906c:	4618      	mov	r0, r3
 800906e:	3730      	adds	r7, #48	; 0x30
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b088      	sub	sp, #32
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	603b      	str	r3, [r7, #0]
 8009080:	4613      	mov	r3, r2
 8009082:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009084:	f7fc f82c 	bl	80050e0 <HAL_GetTick>
 8009088:	4602      	mov	r2, r0
 800908a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908c:	1a9b      	subs	r3, r3, r2
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	4413      	add	r3, r2
 8009092:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009094:	f7fc f824 	bl	80050e0 <HAL_GetTick>
 8009098:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800909a:	4b39      	ldr	r3, [pc, #228]	; (8009180 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	015b      	lsls	r3, r3, #5
 80090a0:	0d1b      	lsrs	r3, r3, #20
 80090a2:	69fa      	ldr	r2, [r7, #28]
 80090a4:	fb02 f303 	mul.w	r3, r2, r3
 80090a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090aa:	e054      	b.n	8009156 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b2:	d050      	beq.n	8009156 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80090b4:	f7fc f814 	bl	80050e0 <HAL_GetTick>
 80090b8:	4602      	mov	r2, r0
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	1ad3      	subs	r3, r2, r3
 80090be:	69fa      	ldr	r2, [r7, #28]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d902      	bls.n	80090ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d13d      	bne.n	8009146 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	685a      	ldr	r2, [r3, #4]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80090d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090e2:	d111      	bne.n	8009108 <SPI_WaitFlagStateUntilTimeout+0x94>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090ec:	d004      	beq.n	80090f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090f6:	d107      	bne.n	8009108 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009106:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009110:	d10f      	bne.n	8009132 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009120:	601a      	str	r2, [r3, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009130:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2201      	movs	r2, #1
 8009136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009142:	2303      	movs	r3, #3
 8009144:	e017      	b.n	8009176 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d101      	bne.n	8009150 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	3b01      	subs	r3, #1
 8009154:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	689a      	ldr	r2, [r3, #8]
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	4013      	ands	r3, r2
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	429a      	cmp	r2, r3
 8009164:	bf0c      	ite	eq
 8009166:	2301      	moveq	r3, #1
 8009168:	2300      	movne	r3, #0
 800916a:	b2db      	uxtb	r3, r3
 800916c:	461a      	mov	r2, r3
 800916e:	79fb      	ldrb	r3, [r7, #7]
 8009170:	429a      	cmp	r2, r3
 8009172:	d19b      	bne.n	80090ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3720      	adds	r7, #32
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	20000390 	.word	0x20000390

08009184 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af02      	add	r7, sp, #8
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009198:	d111      	bne.n	80091be <SPI_EndRxTransaction+0x3a>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091a2:	d004      	beq.n	80091ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091ac:	d107      	bne.n	80091be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091c6:	d12a      	bne.n	800921e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091d0:	d012      	beq.n	80091f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2200      	movs	r2, #0
 80091da:	2180      	movs	r1, #128	; 0x80
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f7ff ff49 	bl	8009074 <SPI_WaitFlagStateUntilTimeout>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d02d      	beq.n	8009244 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ec:	f043 0220 	orr.w	r2, r3, #32
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e026      	b.n	8009246 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	2200      	movs	r2, #0
 8009200:	2101      	movs	r1, #1
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f7ff ff36 	bl	8009074 <SPI_WaitFlagStateUntilTimeout>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d01a      	beq.n	8009244 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009212:	f043 0220 	orr.w	r2, r3, #32
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e013      	b.n	8009246 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	2200      	movs	r2, #0
 8009226:	2101      	movs	r1, #1
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f7ff ff23 	bl	8009074 <SPI_WaitFlagStateUntilTimeout>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d007      	beq.n	8009244 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009238:	f043 0220 	orr.w	r2, r3, #32
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009240:	2303      	movs	r3, #3
 8009242:	e000      	b.n	8009246 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
	...

08009250 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af02      	add	r7, sp, #8
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800925c:	4b1b      	ldr	r3, [pc, #108]	; (80092cc <SPI_EndRxTxTransaction+0x7c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a1b      	ldr	r2, [pc, #108]	; (80092d0 <SPI_EndRxTxTransaction+0x80>)
 8009262:	fba2 2303 	umull	r2, r3, r2, r3
 8009266:	0d5b      	lsrs	r3, r3, #21
 8009268:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800926c:	fb02 f303 	mul.w	r3, r2, r3
 8009270:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800927a:	d112      	bne.n	80092a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	2200      	movs	r2, #0
 8009284:	2180      	movs	r1, #128	; 0x80
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f7ff fef4 	bl	8009074 <SPI_WaitFlagStateUntilTimeout>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d016      	beq.n	80092c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009296:	f043 0220 	orr.w	r2, r3, #32
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800929e:	2303      	movs	r3, #3
 80092a0:	e00f      	b.n	80092c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00a      	beq.n	80092be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	3b01      	subs	r3, #1
 80092ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092b8:	2b80      	cmp	r3, #128	; 0x80
 80092ba:	d0f2      	beq.n	80092a2 <SPI_EndRxTxTransaction+0x52>
 80092bc:	e000      	b.n	80092c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80092be:	bf00      	nop
  }

  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3718      	adds	r7, #24
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	20000390 	.word	0x20000390
 80092d0:	165e9f81 	.word	0x165e9f81

080092d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e041      	b.n	800936a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d106      	bne.n	8009300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7fb fd2c 	bl	8004d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2202      	movs	r2, #2
 8009304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	3304      	adds	r3, #4
 8009310:	4619      	mov	r1, r3
 8009312:	4610      	mov	r0, r2
 8009314:	f000 fd54 	bl	8009dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
	...

08009374 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009382:	b2db      	uxtb	r3, r3
 8009384:	2b01      	cmp	r3, #1
 8009386:	d001      	beq.n	800938c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	e03c      	b.n	8009406 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2202      	movs	r2, #2
 8009390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a1e      	ldr	r2, [pc, #120]	; (8009414 <HAL_TIM_Base_Start+0xa0>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d018      	beq.n	80093d0 <HAL_TIM_Base_Start+0x5c>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093a6:	d013      	beq.n	80093d0 <HAL_TIM_Base_Start+0x5c>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a1a      	ldr	r2, [pc, #104]	; (8009418 <HAL_TIM_Base_Start+0xa4>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d00e      	beq.n	80093d0 <HAL_TIM_Base_Start+0x5c>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a19      	ldr	r2, [pc, #100]	; (800941c <HAL_TIM_Base_Start+0xa8>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d009      	beq.n	80093d0 <HAL_TIM_Base_Start+0x5c>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a17      	ldr	r2, [pc, #92]	; (8009420 <HAL_TIM_Base_Start+0xac>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d004      	beq.n	80093d0 <HAL_TIM_Base_Start+0x5c>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a16      	ldr	r2, [pc, #88]	; (8009424 <HAL_TIM_Base_Start+0xb0>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d111      	bne.n	80093f4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f003 0307 	and.w	r3, r3, #7
 80093da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2b06      	cmp	r3, #6
 80093e0:	d010      	beq.n	8009404 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f042 0201 	orr.w	r2, r2, #1
 80093f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093f2:	e007      	b.n	8009404 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f042 0201 	orr.w	r2, r2, #1
 8009402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	40010000 	.word	0x40010000
 8009418:	40000400 	.word	0x40000400
 800941c:	40000800 	.word	0x40000800
 8009420:	40000c00 	.word	0x40000c00
 8009424:	40014000 	.word	0x40014000

08009428 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b01      	cmp	r3, #1
 800943a:	d001      	beq.n	8009440 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e044      	b.n	80094ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2202      	movs	r2, #2
 8009444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68da      	ldr	r2, [r3, #12]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f042 0201 	orr.w	r2, r2, #1
 8009456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a1e      	ldr	r2, [pc, #120]	; (80094d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d018      	beq.n	8009494 <HAL_TIM_Base_Start_IT+0x6c>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800946a:	d013      	beq.n	8009494 <HAL_TIM_Base_Start_IT+0x6c>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a1a      	ldr	r2, [pc, #104]	; (80094dc <HAL_TIM_Base_Start_IT+0xb4>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d00e      	beq.n	8009494 <HAL_TIM_Base_Start_IT+0x6c>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a19      	ldr	r2, [pc, #100]	; (80094e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d009      	beq.n	8009494 <HAL_TIM_Base_Start_IT+0x6c>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a17      	ldr	r2, [pc, #92]	; (80094e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d004      	beq.n	8009494 <HAL_TIM_Base_Start_IT+0x6c>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a16      	ldr	r2, [pc, #88]	; (80094e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d111      	bne.n	80094b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f003 0307 	and.w	r3, r3, #7
 800949e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2b06      	cmp	r3, #6
 80094a4:	d010      	beq.n	80094c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f042 0201 	orr.w	r2, r2, #1
 80094b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094b6:	e007      	b.n	80094c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f042 0201 	orr.w	r2, r2, #1
 80094c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	40010000 	.word	0x40010000
 80094dc:	40000400 	.word	0x40000400
 80094e0:	40000800 	.word	0x40000800
 80094e4:	40000c00 	.word	0x40000c00
 80094e8:	40014000 	.word	0x40014000

080094ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d101      	bne.n	80094fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e041      	b.n	8009582 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d106      	bne.n	8009518 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f839 	bl	800958a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2202      	movs	r2, #2
 800951c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	3304      	adds	r3, #4
 8009528:	4619      	mov	r1, r3
 800952a:	4610      	mov	r0, r2
 800952c:	f000 fc48 	bl	8009dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3708      	adds	r7, #8
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800958a:	b480      	push	{r7}
 800958c:	b083      	sub	sp, #12
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009592:	bf00      	nop
 8009594:	370c      	adds	r7, #12
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
	...

080095a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d109      	bne.n	80095c4 <HAL_TIM_PWM_Start+0x24>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	bf14      	ite	ne
 80095bc:	2301      	movne	r3, #1
 80095be:	2300      	moveq	r3, #0
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	e022      	b.n	800960a <HAL_TIM_PWM_Start+0x6a>
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	2b04      	cmp	r3, #4
 80095c8:	d109      	bne.n	80095de <HAL_TIM_PWM_Start+0x3e>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	bf14      	ite	ne
 80095d6:	2301      	movne	r3, #1
 80095d8:	2300      	moveq	r3, #0
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	e015      	b.n	800960a <HAL_TIM_PWM_Start+0x6a>
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	2b08      	cmp	r3, #8
 80095e2:	d109      	bne.n	80095f8 <HAL_TIM_PWM_Start+0x58>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	bf14      	ite	ne
 80095f0:	2301      	movne	r3, #1
 80095f2:	2300      	moveq	r3, #0
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	e008      	b.n	800960a <HAL_TIM_PWM_Start+0x6a>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	2b01      	cmp	r3, #1
 8009602:	bf14      	ite	ne
 8009604:	2301      	movne	r3, #1
 8009606:	2300      	moveq	r3, #0
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e068      	b.n	80096e4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d104      	bne.n	8009622 <HAL_TIM_PWM_Start+0x82>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2202      	movs	r2, #2
 800961c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009620:	e013      	b.n	800964a <HAL_TIM_PWM_Start+0xaa>
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	2b04      	cmp	r3, #4
 8009626:	d104      	bne.n	8009632 <HAL_TIM_PWM_Start+0x92>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2202      	movs	r2, #2
 800962c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009630:	e00b      	b.n	800964a <HAL_TIM_PWM_Start+0xaa>
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	2b08      	cmp	r3, #8
 8009636:	d104      	bne.n	8009642 <HAL_TIM_PWM_Start+0xa2>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2202      	movs	r2, #2
 800963c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009640:	e003      	b.n	800964a <HAL_TIM_PWM_Start+0xaa>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2202      	movs	r2, #2
 8009646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2201      	movs	r2, #1
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	4618      	mov	r0, r3
 8009654:	f000 fe5a 	bl	800a30c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a23      	ldr	r2, [pc, #140]	; (80096ec <HAL_TIM_PWM_Start+0x14c>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d107      	bne.n	8009672 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009670:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a1d      	ldr	r2, [pc, #116]	; (80096ec <HAL_TIM_PWM_Start+0x14c>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d018      	beq.n	80096ae <HAL_TIM_PWM_Start+0x10e>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009684:	d013      	beq.n	80096ae <HAL_TIM_PWM_Start+0x10e>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a19      	ldr	r2, [pc, #100]	; (80096f0 <HAL_TIM_PWM_Start+0x150>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d00e      	beq.n	80096ae <HAL_TIM_PWM_Start+0x10e>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a17      	ldr	r2, [pc, #92]	; (80096f4 <HAL_TIM_PWM_Start+0x154>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d009      	beq.n	80096ae <HAL_TIM_PWM_Start+0x10e>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a16      	ldr	r2, [pc, #88]	; (80096f8 <HAL_TIM_PWM_Start+0x158>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d004      	beq.n	80096ae <HAL_TIM_PWM_Start+0x10e>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a14      	ldr	r2, [pc, #80]	; (80096fc <HAL_TIM_PWM_Start+0x15c>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d111      	bne.n	80096d2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f003 0307 	and.w	r3, r3, #7
 80096b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2b06      	cmp	r3, #6
 80096be:	d010      	beq.n	80096e2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f042 0201 	orr.w	r2, r2, #1
 80096ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096d0:	e007      	b.n	80096e2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f042 0201 	orr.w	r2, r2, #1
 80096e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	40010000 	.word	0x40010000
 80096f0:	40000400 	.word	0x40000400
 80096f4:	40000800 	.word	0x40000800
 80096f8:	40000c00 	.word	0x40000c00
 80096fc:	40014000 	.word	0x40014000

08009700 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d101      	bne.n	8009714 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	e097      	b.n	8009844 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800971a:	b2db      	uxtb	r3, r3
 800971c:	2b00      	cmp	r3, #0
 800971e:	d106      	bne.n	800972e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f7fb fa99 	bl	8004c60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2202      	movs	r2, #2
 8009732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	6812      	ldr	r2, [r2, #0]
 8009740:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009744:	f023 0307 	bic.w	r3, r3, #7
 8009748:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	3304      	adds	r3, #4
 8009752:	4619      	mov	r1, r3
 8009754:	4610      	mov	r0, r2
 8009756:	f000 fb33 	bl	8009dc0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6a1b      	ldr	r3, [r3, #32]
 8009770:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	697a      	ldr	r2, [r7, #20]
 8009778:	4313      	orrs	r3, r2
 800977a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009782:	f023 0303 	bic.w	r3, r3, #3
 8009786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	689a      	ldr	r2, [r3, #8]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	021b      	lsls	r3, r3, #8
 8009792:	4313      	orrs	r3, r2
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	4313      	orrs	r3, r2
 8009798:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80097a0:	f023 030c 	bic.w	r3, r3, #12
 80097a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	68da      	ldr	r2, [r3, #12]
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	69db      	ldr	r3, [r3, #28]
 80097ba:	021b      	lsls	r3, r3, #8
 80097bc:	4313      	orrs	r3, r2
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	011a      	lsls	r2, r3, #4
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	031b      	lsls	r3, r3, #12
 80097d0:	4313      	orrs	r3, r2
 80097d2:	693a      	ldr	r2, [r7, #16]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80097de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80097e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	011b      	lsls	r3, r3, #4
 80097f2:	4313      	orrs	r3, r2
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	697a      	ldr	r2, [r7, #20]
 8009800:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2201      	movs	r2, #1
 8009836:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3718      	adds	r7, #24
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	f003 0302 	and.w	r3, r3, #2
 800985e:	2b02      	cmp	r3, #2
 8009860:	d122      	bne.n	80098a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	f003 0302 	and.w	r3, r3, #2
 800986c:	2b02      	cmp	r3, #2
 800986e:	d11b      	bne.n	80098a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f06f 0202 	mvn.w	r2, #2
 8009878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2201      	movs	r2, #1
 800987e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	f003 0303 	and.w	r3, r3, #3
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fa77 	bl	8009d82 <HAL_TIM_IC_CaptureCallback>
 8009894:	e005      	b.n	80098a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 fa69 	bl	8009d6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fa7a 	bl	8009d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	f003 0304 	and.w	r3, r3, #4
 80098b2:	2b04      	cmp	r3, #4
 80098b4:	d122      	bne.n	80098fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	f003 0304 	and.w	r3, r3, #4
 80098c0:	2b04      	cmp	r3, #4
 80098c2:	d11b      	bne.n	80098fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f06f 0204 	mvn.w	r2, #4
 80098cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2202      	movs	r2, #2
 80098d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d003      	beq.n	80098ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fa4d 	bl	8009d82 <HAL_TIM_IC_CaptureCallback>
 80098e8:	e005      	b.n	80098f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fa3f 	bl	8009d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 fa50 	bl	8009d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	f003 0308 	and.w	r3, r3, #8
 8009906:	2b08      	cmp	r3, #8
 8009908:	d122      	bne.n	8009950 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	f003 0308 	and.w	r3, r3, #8
 8009914:	2b08      	cmp	r3, #8
 8009916:	d11b      	bne.n	8009950 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f06f 0208 	mvn.w	r2, #8
 8009920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2204      	movs	r2, #4
 8009926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	69db      	ldr	r3, [r3, #28]
 800992e:	f003 0303 	and.w	r3, r3, #3
 8009932:	2b00      	cmp	r3, #0
 8009934:	d003      	beq.n	800993e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fa23 	bl	8009d82 <HAL_TIM_IC_CaptureCallback>
 800993c:	e005      	b.n	800994a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fa15 	bl	8009d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 fa26 	bl	8009d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	f003 0310 	and.w	r3, r3, #16
 800995a:	2b10      	cmp	r3, #16
 800995c:	d122      	bne.n	80099a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	f003 0310 	and.w	r3, r3, #16
 8009968:	2b10      	cmp	r3, #16
 800996a:	d11b      	bne.n	80099a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f06f 0210 	mvn.w	r2, #16
 8009974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2208      	movs	r2, #8
 800997a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	69db      	ldr	r3, [r3, #28]
 8009982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009986:	2b00      	cmp	r3, #0
 8009988:	d003      	beq.n	8009992 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f9f9 	bl	8009d82 <HAL_TIM_IC_CaptureCallback>
 8009990:	e005      	b.n	800999e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f9eb 	bl	8009d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f9fc 	bl	8009d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	f003 0301 	and.w	r3, r3, #1
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d10e      	bne.n	80099d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	f003 0301 	and.w	r3, r3, #1
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d107      	bne.n	80099d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f06f 0201 	mvn.w	r2, #1
 80099c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7f7 fd8a 	bl	80014e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099da:	2b80      	cmp	r3, #128	; 0x80
 80099dc:	d10e      	bne.n	80099fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099e8:	2b80      	cmp	r3, #128	; 0x80
 80099ea:	d107      	bne.n	80099fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80099f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 fd26 	bl	800a448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a06:	2b40      	cmp	r3, #64	; 0x40
 8009a08:	d10e      	bne.n	8009a28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a14:	2b40      	cmp	r3, #64	; 0x40
 8009a16:	d107      	bne.n	8009a28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f9c1 	bl	8009daa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	f003 0320 	and.w	r3, r3, #32
 8009a32:	2b20      	cmp	r3, #32
 8009a34:	d10e      	bne.n	8009a54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	f003 0320 	and.w	r3, r3, #32
 8009a40:	2b20      	cmp	r3, #32
 8009a42:	d107      	bne.n	8009a54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f06f 0220 	mvn.w	r2, #32
 8009a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fcf0 	bl	800a434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a54:	bf00      	nop
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d101      	bne.n	8009a7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009a76:	2302      	movs	r3, #2
 8009a78:	e0ae      	b.n	8009bd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2b0c      	cmp	r3, #12
 8009a86:	f200 809f 	bhi.w	8009bc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009a8a:	a201      	add	r2, pc, #4	; (adr r2, 8009a90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a90:	08009ac5 	.word	0x08009ac5
 8009a94:	08009bc9 	.word	0x08009bc9
 8009a98:	08009bc9 	.word	0x08009bc9
 8009a9c:	08009bc9 	.word	0x08009bc9
 8009aa0:	08009b05 	.word	0x08009b05
 8009aa4:	08009bc9 	.word	0x08009bc9
 8009aa8:	08009bc9 	.word	0x08009bc9
 8009aac:	08009bc9 	.word	0x08009bc9
 8009ab0:	08009b47 	.word	0x08009b47
 8009ab4:	08009bc9 	.word	0x08009bc9
 8009ab8:	08009bc9 	.word	0x08009bc9
 8009abc:	08009bc9 	.word	0x08009bc9
 8009ac0:	08009b87 	.word	0x08009b87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68b9      	ldr	r1, [r7, #8]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 f9f8 	bl	8009ec0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	699a      	ldr	r2, [r3, #24]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f042 0208 	orr.w	r2, r2, #8
 8009ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	699a      	ldr	r2, [r3, #24]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f022 0204 	bic.w	r2, r2, #4
 8009aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	6999      	ldr	r1, [r3, #24]
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	691a      	ldr	r2, [r3, #16]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	430a      	orrs	r2, r1
 8009b00:	619a      	str	r2, [r3, #24]
      break;
 8009b02:	e064      	b.n	8009bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68b9      	ldr	r1, [r7, #8]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f000 fa3e 	bl	8009f8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	699a      	ldr	r2, [r3, #24]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	699a      	ldr	r2, [r3, #24]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	6999      	ldr	r1, [r3, #24]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	021a      	lsls	r2, r3, #8
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	430a      	orrs	r2, r1
 8009b42:	619a      	str	r2, [r3, #24]
      break;
 8009b44:	e043      	b.n	8009bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	68b9      	ldr	r1, [r7, #8]
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f000 fa89 	bl	800a064 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	69da      	ldr	r2, [r3, #28]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f042 0208 	orr.w	r2, r2, #8
 8009b60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	69da      	ldr	r2, [r3, #28]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f022 0204 	bic.w	r2, r2, #4
 8009b70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	69d9      	ldr	r1, [r3, #28]
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	691a      	ldr	r2, [r3, #16]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	430a      	orrs	r2, r1
 8009b82:	61da      	str	r2, [r3, #28]
      break;
 8009b84:	e023      	b.n	8009bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68b9      	ldr	r1, [r7, #8]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f000 fad3 	bl	800a138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	69da      	ldr	r2, [r3, #28]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	69da      	ldr	r2, [r3, #28]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	69d9      	ldr	r1, [r3, #28]
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	021a      	lsls	r2, r3, #8
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	61da      	str	r2, [r3, #28]
      break;
 8009bc6:	e002      	b.n	8009bce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	75fb      	strb	r3, [r7, #23]
      break;
 8009bcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3718      	adds	r7, #24
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d101      	bne.n	8009bfc <HAL_TIM_ConfigClockSource+0x1c>
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	e0b4      	b.n	8009d66 <HAL_TIM_ConfigClockSource+0x186>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2202      	movs	r2, #2
 8009c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68ba      	ldr	r2, [r7, #8]
 8009c2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c34:	d03e      	beq.n	8009cb4 <HAL_TIM_ConfigClockSource+0xd4>
 8009c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c3a:	f200 8087 	bhi.w	8009d4c <HAL_TIM_ConfigClockSource+0x16c>
 8009c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c42:	f000 8086 	beq.w	8009d52 <HAL_TIM_ConfigClockSource+0x172>
 8009c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c4a:	d87f      	bhi.n	8009d4c <HAL_TIM_ConfigClockSource+0x16c>
 8009c4c:	2b70      	cmp	r3, #112	; 0x70
 8009c4e:	d01a      	beq.n	8009c86 <HAL_TIM_ConfigClockSource+0xa6>
 8009c50:	2b70      	cmp	r3, #112	; 0x70
 8009c52:	d87b      	bhi.n	8009d4c <HAL_TIM_ConfigClockSource+0x16c>
 8009c54:	2b60      	cmp	r3, #96	; 0x60
 8009c56:	d050      	beq.n	8009cfa <HAL_TIM_ConfigClockSource+0x11a>
 8009c58:	2b60      	cmp	r3, #96	; 0x60
 8009c5a:	d877      	bhi.n	8009d4c <HAL_TIM_ConfigClockSource+0x16c>
 8009c5c:	2b50      	cmp	r3, #80	; 0x50
 8009c5e:	d03c      	beq.n	8009cda <HAL_TIM_ConfigClockSource+0xfa>
 8009c60:	2b50      	cmp	r3, #80	; 0x50
 8009c62:	d873      	bhi.n	8009d4c <HAL_TIM_ConfigClockSource+0x16c>
 8009c64:	2b40      	cmp	r3, #64	; 0x40
 8009c66:	d058      	beq.n	8009d1a <HAL_TIM_ConfigClockSource+0x13a>
 8009c68:	2b40      	cmp	r3, #64	; 0x40
 8009c6a:	d86f      	bhi.n	8009d4c <HAL_TIM_ConfigClockSource+0x16c>
 8009c6c:	2b30      	cmp	r3, #48	; 0x30
 8009c6e:	d064      	beq.n	8009d3a <HAL_TIM_ConfigClockSource+0x15a>
 8009c70:	2b30      	cmp	r3, #48	; 0x30
 8009c72:	d86b      	bhi.n	8009d4c <HAL_TIM_ConfigClockSource+0x16c>
 8009c74:	2b20      	cmp	r3, #32
 8009c76:	d060      	beq.n	8009d3a <HAL_TIM_ConfigClockSource+0x15a>
 8009c78:	2b20      	cmp	r3, #32
 8009c7a:	d867      	bhi.n	8009d4c <HAL_TIM_ConfigClockSource+0x16c>
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d05c      	beq.n	8009d3a <HAL_TIM_ConfigClockSource+0x15a>
 8009c80:	2b10      	cmp	r3, #16
 8009c82:	d05a      	beq.n	8009d3a <HAL_TIM_ConfigClockSource+0x15a>
 8009c84:	e062      	b.n	8009d4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6818      	ldr	r0, [r3, #0]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	6899      	ldr	r1, [r3, #8]
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	685a      	ldr	r2, [r3, #4]
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	f000 fb19 	bl	800a2cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009ca8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	609a      	str	r2, [r3, #8]
      break;
 8009cb2:	e04f      	b.n	8009d54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6818      	ldr	r0, [r3, #0]
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	6899      	ldr	r1, [r3, #8]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	685a      	ldr	r2, [r3, #4]
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	f000 fb02 	bl	800a2cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	689a      	ldr	r2, [r3, #8]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009cd6:	609a      	str	r2, [r3, #8]
      break;
 8009cd8:	e03c      	b.n	8009d54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6818      	ldr	r0, [r3, #0]
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	6859      	ldr	r1, [r3, #4]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	f000 fa76 	bl	800a1d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2150      	movs	r1, #80	; 0x50
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f000 facf 	bl	800a296 <TIM_ITRx_SetConfig>
      break;
 8009cf8:	e02c      	b.n	8009d54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6818      	ldr	r0, [r3, #0]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	6859      	ldr	r1, [r3, #4]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	461a      	mov	r2, r3
 8009d08:	f000 fa95 	bl	800a236 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2160      	movs	r1, #96	; 0x60
 8009d12:	4618      	mov	r0, r3
 8009d14:	f000 fabf 	bl	800a296 <TIM_ITRx_SetConfig>
      break;
 8009d18:	e01c      	b.n	8009d54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6818      	ldr	r0, [r3, #0]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	6859      	ldr	r1, [r3, #4]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	461a      	mov	r2, r3
 8009d28:	f000 fa56 	bl	800a1d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2140      	movs	r1, #64	; 0x40
 8009d32:	4618      	mov	r0, r3
 8009d34:	f000 faaf 	bl	800a296 <TIM_ITRx_SetConfig>
      break;
 8009d38:	e00c      	b.n	8009d54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4619      	mov	r1, r3
 8009d44:	4610      	mov	r0, r2
 8009d46:	f000 faa6 	bl	800a296 <TIM_ITRx_SetConfig>
      break;
 8009d4a:	e003      	b.n	8009d54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8009d50:	e000      	b.n	8009d54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009d52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b083      	sub	sp, #12
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d76:	bf00      	nop
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d82:	b480      	push	{r7}
 8009d84:	b083      	sub	sp, #12
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d8a:	bf00      	nop
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b083      	sub	sp, #12
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d9e:	bf00      	nop
 8009da0:	370c      	adds	r7, #12
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009daa:	b480      	push	{r7}
 8009dac:	b083      	sub	sp, #12
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009db2:	bf00      	nop
 8009db4:	370c      	adds	r7, #12
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
	...

08009dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a34      	ldr	r2, [pc, #208]	; (8009ea4 <TIM_Base_SetConfig+0xe4>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d00f      	beq.n	8009df8 <TIM_Base_SetConfig+0x38>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dde:	d00b      	beq.n	8009df8 <TIM_Base_SetConfig+0x38>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a31      	ldr	r2, [pc, #196]	; (8009ea8 <TIM_Base_SetConfig+0xe8>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d007      	beq.n	8009df8 <TIM_Base_SetConfig+0x38>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a30      	ldr	r2, [pc, #192]	; (8009eac <TIM_Base_SetConfig+0xec>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d003      	beq.n	8009df8 <TIM_Base_SetConfig+0x38>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a2f      	ldr	r2, [pc, #188]	; (8009eb0 <TIM_Base_SetConfig+0xf0>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d108      	bne.n	8009e0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a25      	ldr	r2, [pc, #148]	; (8009ea4 <TIM_Base_SetConfig+0xe4>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d01b      	beq.n	8009e4a <TIM_Base_SetConfig+0x8a>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e18:	d017      	beq.n	8009e4a <TIM_Base_SetConfig+0x8a>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a22      	ldr	r2, [pc, #136]	; (8009ea8 <TIM_Base_SetConfig+0xe8>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d013      	beq.n	8009e4a <TIM_Base_SetConfig+0x8a>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a21      	ldr	r2, [pc, #132]	; (8009eac <TIM_Base_SetConfig+0xec>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d00f      	beq.n	8009e4a <TIM_Base_SetConfig+0x8a>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a20      	ldr	r2, [pc, #128]	; (8009eb0 <TIM_Base_SetConfig+0xf0>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d00b      	beq.n	8009e4a <TIM_Base_SetConfig+0x8a>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a1f      	ldr	r2, [pc, #124]	; (8009eb4 <TIM_Base_SetConfig+0xf4>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d007      	beq.n	8009e4a <TIM_Base_SetConfig+0x8a>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a1e      	ldr	r2, [pc, #120]	; (8009eb8 <TIM_Base_SetConfig+0xf8>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d003      	beq.n	8009e4a <TIM_Base_SetConfig+0x8a>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a1d      	ldr	r2, [pc, #116]	; (8009ebc <TIM_Base_SetConfig+0xfc>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d108      	bne.n	8009e5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	68fa      	ldr	r2, [r7, #12]
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	4313      	orrs	r3, r2
 8009e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	689a      	ldr	r2, [r3, #8]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a08      	ldr	r2, [pc, #32]	; (8009ea4 <TIM_Base_SetConfig+0xe4>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d103      	bne.n	8009e90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	691a      	ldr	r2, [r3, #16]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	615a      	str	r2, [r3, #20]
}
 8009e96:	bf00      	nop
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	40010000 	.word	0x40010000
 8009ea8:	40000400 	.word	0x40000400
 8009eac:	40000800 	.word	0x40000800
 8009eb0:	40000c00 	.word	0x40000c00
 8009eb4:	40014000 	.word	0x40014000
 8009eb8:	40014400 	.word	0x40014400
 8009ebc:	40014800 	.word	0x40014800

08009ec0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b087      	sub	sp, #28
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a1b      	ldr	r3, [r3, #32]
 8009ece:	f023 0201 	bic.w	r2, r3, #1
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f023 0303 	bic.w	r3, r3, #3
 8009ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	f023 0302 	bic.w	r3, r3, #2
 8009f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a1c      	ldr	r2, [pc, #112]	; (8009f88 <TIM_OC1_SetConfig+0xc8>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d10c      	bne.n	8009f36 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	f023 0308 	bic.w	r3, r3, #8
 8009f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	697a      	ldr	r2, [r7, #20]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	f023 0304 	bic.w	r3, r3, #4
 8009f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a13      	ldr	r2, [pc, #76]	; (8009f88 <TIM_OC1_SetConfig+0xc8>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d111      	bne.n	8009f62 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	695b      	ldr	r3, [r3, #20]
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	699b      	ldr	r3, [r3, #24]
 8009f5c:	693a      	ldr	r2, [r7, #16]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	693a      	ldr	r2, [r7, #16]
 8009f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	685a      	ldr	r2, [r3, #4]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	697a      	ldr	r2, [r7, #20]
 8009f7a:	621a      	str	r2, [r3, #32]
}
 8009f7c:	bf00      	nop
 8009f7e:	371c      	adds	r7, #28
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr
 8009f88:	40010000 	.word	0x40010000

08009f8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b087      	sub	sp, #28
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	f023 0210 	bic.w	r2, r3, #16
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	021b      	lsls	r3, r3, #8
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	f023 0320 	bic.w	r3, r3, #32
 8009fd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	011b      	lsls	r3, r3, #4
 8009fde:	697a      	ldr	r2, [r7, #20]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a1e      	ldr	r2, [pc, #120]	; (800a060 <TIM_OC2_SetConfig+0xd4>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d10d      	bne.n	800a008 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	011b      	lsls	r3, r3, #4
 8009ffa:	697a      	ldr	r2, [r7, #20]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a006:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a15      	ldr	r2, [pc, #84]	; (800a060 <TIM_OC2_SetConfig+0xd4>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d113      	bne.n	800a038 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a016:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a01e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	695b      	ldr	r3, [r3, #20]
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	4313      	orrs	r3, r2
 800a02a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	693a      	ldr	r2, [r7, #16]
 800a034:	4313      	orrs	r3, r2
 800a036:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	685a      	ldr	r2, [r3, #4]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	697a      	ldr	r2, [r7, #20]
 800a050:	621a      	str	r2, [r3, #32]
}
 800a052:	bf00      	nop
 800a054:	371c      	adds	r7, #28
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	40010000 	.word	0x40010000

0800a064 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a064:	b480      	push	{r7}
 800a066:	b087      	sub	sp, #28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a1b      	ldr	r3, [r3, #32]
 800a072:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f023 0303 	bic.w	r3, r3, #3
 800a09a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	021b      	lsls	r3, r3, #8
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a1d      	ldr	r2, [pc, #116]	; (800a134 <TIM_OC3_SetConfig+0xd0>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d10d      	bne.n	800a0de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	021b      	lsls	r3, r3, #8
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4a14      	ldr	r2, [pc, #80]	; (800a134 <TIM_OC3_SetConfig+0xd0>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d113      	bne.n	800a10e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	695b      	ldr	r3, [r3, #20]
 800a0fa:	011b      	lsls	r3, r3, #4
 800a0fc:	693a      	ldr	r2, [r7, #16]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	011b      	lsls	r3, r3, #4
 800a108:	693a      	ldr	r2, [r7, #16]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	693a      	ldr	r2, [r7, #16]
 800a112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	685a      	ldr	r2, [r3, #4]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	697a      	ldr	r2, [r7, #20]
 800a126:	621a      	str	r2, [r3, #32]
}
 800a128:	bf00      	nop
 800a12a:	371c      	adds	r7, #28
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr
 800a134:	40010000 	.word	0x40010000

0800a138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a138:	b480      	push	{r7}
 800a13a:	b087      	sub	sp, #28
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a1b      	ldr	r3, [r3, #32]
 800a146:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a1b      	ldr	r3, [r3, #32]
 800a152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	69db      	ldr	r3, [r3, #28]
 800a15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a16e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	021b      	lsls	r3, r3, #8
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	4313      	orrs	r3, r2
 800a17a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	031b      	lsls	r3, r3, #12
 800a18a:	693a      	ldr	r2, [r7, #16]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a10      	ldr	r2, [pc, #64]	; (800a1d4 <TIM_OC4_SetConfig+0x9c>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d109      	bne.n	800a1ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a19e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	695b      	ldr	r3, [r3, #20]
 800a1a4:	019b      	lsls	r3, r3, #6
 800a1a6:	697a      	ldr	r2, [r7, #20]
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	697a      	ldr	r2, [r7, #20]
 800a1b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	685a      	ldr	r2, [r3, #4]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	693a      	ldr	r2, [r7, #16]
 800a1c4:	621a      	str	r2, [r3, #32]
}
 800a1c6:	bf00      	nop
 800a1c8:	371c      	adds	r7, #28
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	40010000 	.word	0x40010000

0800a1d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b087      	sub	sp, #28
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6a1b      	ldr	r3, [r3, #32]
 800a1e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6a1b      	ldr	r3, [r3, #32]
 800a1ee:	f023 0201 	bic.w	r2, r3, #1
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	699b      	ldr	r3, [r3, #24]
 800a1fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	011b      	lsls	r3, r3, #4
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	f023 030a 	bic.w	r3, r3, #10
 800a214:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	693a      	ldr	r2, [r7, #16]
 800a222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	621a      	str	r2, [r3, #32]
}
 800a22a:	bf00      	nop
 800a22c:	371c      	adds	r7, #28
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr

0800a236 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a236:	b480      	push	{r7}
 800a238:	b087      	sub	sp, #28
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	60f8      	str	r0, [r7, #12]
 800a23e:	60b9      	str	r1, [r7, #8]
 800a240:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6a1b      	ldr	r3, [r3, #32]
 800a246:	f023 0210 	bic.w	r2, r3, #16
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6a1b      	ldr	r3, [r3, #32]
 800a258:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a260:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	031b      	lsls	r3, r3, #12
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	4313      	orrs	r3, r2
 800a26a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a272:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	011b      	lsls	r3, r3, #4
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	697a      	ldr	r2, [r7, #20]
 800a282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	621a      	str	r2, [r3, #32]
}
 800a28a:	bf00      	nop
 800a28c:	371c      	adds	r7, #28
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a296:	b480      	push	{r7}
 800a298:	b085      	sub	sp, #20
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
 800a29e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2ae:	683a      	ldr	r2, [r7, #0]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	f043 0307 	orr.w	r3, r3, #7
 800a2b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	609a      	str	r2, [r3, #8]
}
 800a2c0:	bf00      	nop
 800a2c2:	3714      	adds	r7, #20
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b087      	sub	sp, #28
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
 800a2d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	021a      	lsls	r2, r3, #8
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	431a      	orrs	r2, r3
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	697a      	ldr	r2, [r7, #20]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	609a      	str	r2, [r3, #8]
}
 800a300:	bf00      	nop
 800a302:	371c      	adds	r7, #28
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b087      	sub	sp, #28
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	f003 031f 	and.w	r3, r3, #31
 800a31e:	2201      	movs	r2, #1
 800a320:	fa02 f303 	lsl.w	r3, r2, r3
 800a324:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6a1a      	ldr	r2, [r3, #32]
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	43db      	mvns	r3, r3
 800a32e:	401a      	ands	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6a1a      	ldr	r2, [r3, #32]
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	f003 031f 	and.w	r3, r3, #31
 800a33e:	6879      	ldr	r1, [r7, #4]
 800a340:	fa01 f303 	lsl.w	r3, r1, r3
 800a344:	431a      	orrs	r2, r3
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	621a      	str	r2, [r3, #32]
}
 800a34a:	bf00      	nop
 800a34c:	371c      	adds	r7, #28
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
	...

0800a358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d101      	bne.n	800a370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a36c:	2302      	movs	r3, #2
 800a36e:	e050      	b.n	800a412 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2202      	movs	r2, #2
 800a37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a1c      	ldr	r2, [pc, #112]	; (800a420 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d018      	beq.n	800a3e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3bc:	d013      	beq.n	800a3e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a18      	ldr	r2, [pc, #96]	; (800a424 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d00e      	beq.n	800a3e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a16      	ldr	r2, [pc, #88]	; (800a428 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d009      	beq.n	800a3e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a15      	ldr	r2, [pc, #84]	; (800a42c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d004      	beq.n	800a3e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a13      	ldr	r2, [pc, #76]	; (800a430 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d10c      	bne.n	800a400 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68ba      	ldr	r2, [r7, #8]
 800a3fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3714      	adds	r7, #20
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	40010000 	.word	0x40010000
 800a424:	40000400 	.word	0x40000400
 800a428:	40000800 	.word	0x40000800
 800a42c:	40000c00 	.word	0x40000c00
 800a430:	40014000 	.word	0x40014000

0800a434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a43c:	bf00      	nop
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a450:	bf00      	nop
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e047      	b.n	800a4fe <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b00      	cmp	r3, #0
 800a478:	d106      	bne.n	800a488 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f7fa fcca 	bl	8004e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2224      	movs	r2, #36	; 0x24
 800a48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68da      	ldr	r2, [r3, #12]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a49e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 f931 	bl	800a708 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	691a      	ldr	r2, [r3, #16]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	695a      	ldr	r2, [r3, #20]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800a4c4:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	695a      	ldr	r2, [r3, #20]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f042 0208 	orr.w	r2, r2, #8
 800a4d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	68da      	ldr	r2, [r3, #12]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2220      	movs	r2, #32
 800a4f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b08a      	sub	sp, #40	; 0x28
 800a50a:	af02      	add	r7, sp, #8
 800a50c:	60f8      	str	r0, [r7, #12]
 800a50e:	60b9      	str	r1, [r7, #8]
 800a510:	603b      	str	r3, [r7, #0]
 800a512:	4613      	mov	r3, r2
 800a514:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a516:	2300      	movs	r3, #0
 800a518:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a520:	b2db      	uxtb	r3, r3
 800a522:	2b20      	cmp	r3, #32
 800a524:	d17c      	bne.n	800a620 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d002      	beq.n	800a532 <HAL_UART_Transmit+0x2c>
 800a52c:	88fb      	ldrh	r3, [r7, #6]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d101      	bne.n	800a536 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e075      	b.n	800a622 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d101      	bne.n	800a544 <HAL_UART_Transmit+0x3e>
 800a540:	2302      	movs	r3, #2
 800a542:	e06e      	b.n	800a622 <HAL_UART_Transmit+0x11c>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2221      	movs	r2, #33	; 0x21
 800a556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a55a:	f7fa fdc1 	bl	80050e0 <HAL_GetTick>
 800a55e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	88fa      	ldrh	r2, [r7, #6]
 800a564:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	88fa      	ldrh	r2, [r7, #6]
 800a56a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a574:	d108      	bne.n	800a588 <HAL_UART_Transmit+0x82>
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d104      	bne.n	800a588 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a57e:	2300      	movs	r3, #0
 800a580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	61bb      	str	r3, [r7, #24]
 800a586:	e003      	b.n	800a590 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a58c:	2300      	movs	r3, #0
 800a58e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a598:	e02a      	b.n	800a5f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	2180      	movs	r1, #128	; 0x80
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f000 f840 	bl	800a62a <UART_WaitOnFlagUntilTimeout>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d001      	beq.n	800a5b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	e036      	b.n	800a622 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d10b      	bne.n	800a5d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	881b      	ldrh	r3, [r3, #0]
 800a5be:	461a      	mov	r2, r3
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	3302      	adds	r3, #2
 800a5ce:	61bb      	str	r3, [r7, #24]
 800a5d0:	e007      	b.n	800a5e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	781a      	ldrb	r2, [r3, #0]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	b29a      	uxth	r2, r3
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1cf      	bne.n	800a59a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	9300      	str	r3, [sp, #0]
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	2200      	movs	r2, #0
 800a602:	2140      	movs	r1, #64	; 0x40
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f000 f810 	bl	800a62a <UART_WaitOnFlagUntilTimeout>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d001      	beq.n	800a614 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a610:	2303      	movs	r3, #3
 800a612:	e006      	b.n	800a622 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2220      	movs	r2, #32
 800a618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a61c:	2300      	movs	r3, #0
 800a61e:	e000      	b.n	800a622 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a620:	2302      	movs	r3, #2
  }
}
 800a622:	4618      	mov	r0, r3
 800a624:	3720      	adds	r7, #32
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b090      	sub	sp, #64	; 0x40
 800a62e:	af00      	add	r7, sp, #0
 800a630:	60f8      	str	r0, [r7, #12]
 800a632:	60b9      	str	r1, [r7, #8]
 800a634:	603b      	str	r3, [r7, #0]
 800a636:	4613      	mov	r3, r2
 800a638:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a63a:	e050      	b.n	800a6de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a63c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a63e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a642:	d04c      	beq.n	800a6de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a646:	2b00      	cmp	r3, #0
 800a648:	d007      	beq.n	800a65a <UART_WaitOnFlagUntilTimeout+0x30>
 800a64a:	f7fa fd49 	bl	80050e0 <HAL_GetTick>
 800a64e:	4602      	mov	r2, r0
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a656:	429a      	cmp	r2, r3
 800a658:	d241      	bcs.n	800a6de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	330c      	adds	r3, #12
 800a660:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a664:	e853 3f00 	ldrex	r3, [r3]
 800a668:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a670:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	330c      	adds	r3, #12
 800a678:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a67a:	637a      	str	r2, [r7, #52]	; 0x34
 800a67c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a682:	e841 2300 	strex	r3, r2, [r1]
 800a686:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1e5      	bne.n	800a65a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	3314      	adds	r3, #20
 800a694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	e853 3f00 	ldrex	r3, [r3]
 800a69c:	613b      	str	r3, [r7, #16]
   return(result);
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	f023 0301 	bic.w	r3, r3, #1
 800a6a4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3314      	adds	r3, #20
 800a6ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6ae:	623a      	str	r2, [r7, #32]
 800a6b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b2:	69f9      	ldr	r1, [r7, #28]
 800a6b4:	6a3a      	ldr	r2, [r7, #32]
 800a6b6:	e841 2300 	strex	r3, r2, [r1]
 800a6ba:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1e5      	bne.n	800a68e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2220      	movs	r2, #32
 800a6c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2220      	movs	r2, #32
 800a6ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a6da:	2303      	movs	r3, #3
 800a6dc:	e00f      	b.n	800a6fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	4013      	ands	r3, r2
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	bf0c      	ite	eq
 800a6ee:	2301      	moveq	r3, #1
 800a6f0:	2300      	movne	r3, #0
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	79fb      	ldrb	r3, [r7, #7]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d09f      	beq.n	800a63c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3740      	adds	r7, #64	; 0x40
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
	...

0800a708 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a70c:	b0c0      	sub	sp, #256	; 0x100
 800a70e:	af00      	add	r7, sp, #0
 800a710:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	691b      	ldr	r3, [r3, #16]
 800a71c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a724:	68d9      	ldr	r1, [r3, #12]
 800a726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	ea40 0301 	orr.w	r3, r0, r1
 800a730:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a736:	689a      	ldr	r2, [r3, #8]
 800a738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a73c:	691b      	ldr	r3, [r3, #16]
 800a73e:	431a      	orrs	r2, r3
 800a740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	431a      	orrs	r2, r3
 800a748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a74c:	69db      	ldr	r3, [r3, #28]
 800a74e:	4313      	orrs	r3, r2
 800a750:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a760:	f021 010c 	bic.w	r1, r1, #12
 800a764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a76e:	430b      	orrs	r3, r1
 800a770:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	695b      	ldr	r3, [r3, #20]
 800a77a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a77e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a782:	6999      	ldr	r1, [r3, #24]
 800a784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	ea40 0301 	orr.w	r3, r0, r1
 800a78e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	4b8f      	ldr	r3, [pc, #572]	; (800a9d4 <UART_SetConfig+0x2cc>)
 800a798:	429a      	cmp	r2, r3
 800a79a:	d005      	beq.n	800a7a8 <UART_SetConfig+0xa0>
 800a79c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	4b8d      	ldr	r3, [pc, #564]	; (800a9d8 <UART_SetConfig+0x2d0>)
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d104      	bne.n	800a7b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a7a8:	f7fd ffd8 	bl	800875c <HAL_RCC_GetPCLK2Freq>
 800a7ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a7b0:	e003      	b.n	800a7ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a7b2:	f7fd ffbf 	bl	8008734 <HAL_RCC_GetPCLK1Freq>
 800a7b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7be:	69db      	ldr	r3, [r3, #28]
 800a7c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7c4:	f040 810c 	bne.w	800a9e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a7c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a7d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a7d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a7da:	4622      	mov	r2, r4
 800a7dc:	462b      	mov	r3, r5
 800a7de:	1891      	adds	r1, r2, r2
 800a7e0:	65b9      	str	r1, [r7, #88]	; 0x58
 800a7e2:	415b      	adcs	r3, r3
 800a7e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a7ea:	4621      	mov	r1, r4
 800a7ec:	eb12 0801 	adds.w	r8, r2, r1
 800a7f0:	4629      	mov	r1, r5
 800a7f2:	eb43 0901 	adc.w	r9, r3, r1
 800a7f6:	f04f 0200 	mov.w	r2, #0
 800a7fa:	f04f 0300 	mov.w	r3, #0
 800a7fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a802:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a806:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a80a:	4690      	mov	r8, r2
 800a80c:	4699      	mov	r9, r3
 800a80e:	4623      	mov	r3, r4
 800a810:	eb18 0303 	adds.w	r3, r8, r3
 800a814:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a818:	462b      	mov	r3, r5
 800a81a:	eb49 0303 	adc.w	r3, r9, r3
 800a81e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a82e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a832:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a836:	460b      	mov	r3, r1
 800a838:	18db      	adds	r3, r3, r3
 800a83a:	653b      	str	r3, [r7, #80]	; 0x50
 800a83c:	4613      	mov	r3, r2
 800a83e:	eb42 0303 	adc.w	r3, r2, r3
 800a842:	657b      	str	r3, [r7, #84]	; 0x54
 800a844:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a848:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a84c:	f7f6 f802 	bl	8000854 <__aeabi_uldivmod>
 800a850:	4602      	mov	r2, r0
 800a852:	460b      	mov	r3, r1
 800a854:	4b61      	ldr	r3, [pc, #388]	; (800a9dc <UART_SetConfig+0x2d4>)
 800a856:	fba3 2302 	umull	r2, r3, r3, r2
 800a85a:	095b      	lsrs	r3, r3, #5
 800a85c:	011c      	lsls	r4, r3, #4
 800a85e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a862:	2200      	movs	r2, #0
 800a864:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a868:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a86c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a870:	4642      	mov	r2, r8
 800a872:	464b      	mov	r3, r9
 800a874:	1891      	adds	r1, r2, r2
 800a876:	64b9      	str	r1, [r7, #72]	; 0x48
 800a878:	415b      	adcs	r3, r3
 800a87a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a87c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a880:	4641      	mov	r1, r8
 800a882:	eb12 0a01 	adds.w	sl, r2, r1
 800a886:	4649      	mov	r1, r9
 800a888:	eb43 0b01 	adc.w	fp, r3, r1
 800a88c:	f04f 0200 	mov.w	r2, #0
 800a890:	f04f 0300 	mov.w	r3, #0
 800a894:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a898:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a89c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a8a0:	4692      	mov	sl, r2
 800a8a2:	469b      	mov	fp, r3
 800a8a4:	4643      	mov	r3, r8
 800a8a6:	eb1a 0303 	adds.w	r3, sl, r3
 800a8aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a8ae:	464b      	mov	r3, r9
 800a8b0:	eb4b 0303 	adc.w	r3, fp, r3
 800a8b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a8b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a8c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a8c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	18db      	adds	r3, r3, r3
 800a8d0:	643b      	str	r3, [r7, #64]	; 0x40
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	eb42 0303 	adc.w	r3, r2, r3
 800a8d8:	647b      	str	r3, [r7, #68]	; 0x44
 800a8da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a8de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a8e2:	f7f5 ffb7 	bl	8000854 <__aeabi_uldivmod>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	4611      	mov	r1, r2
 800a8ec:	4b3b      	ldr	r3, [pc, #236]	; (800a9dc <UART_SetConfig+0x2d4>)
 800a8ee:	fba3 2301 	umull	r2, r3, r3, r1
 800a8f2:	095b      	lsrs	r3, r3, #5
 800a8f4:	2264      	movs	r2, #100	; 0x64
 800a8f6:	fb02 f303 	mul.w	r3, r2, r3
 800a8fa:	1acb      	subs	r3, r1, r3
 800a8fc:	00db      	lsls	r3, r3, #3
 800a8fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a902:	4b36      	ldr	r3, [pc, #216]	; (800a9dc <UART_SetConfig+0x2d4>)
 800a904:	fba3 2302 	umull	r2, r3, r3, r2
 800a908:	095b      	lsrs	r3, r3, #5
 800a90a:	005b      	lsls	r3, r3, #1
 800a90c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a910:	441c      	add	r4, r3
 800a912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a916:	2200      	movs	r2, #0
 800a918:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a91c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a920:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a924:	4642      	mov	r2, r8
 800a926:	464b      	mov	r3, r9
 800a928:	1891      	adds	r1, r2, r2
 800a92a:	63b9      	str	r1, [r7, #56]	; 0x38
 800a92c:	415b      	adcs	r3, r3
 800a92e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a930:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a934:	4641      	mov	r1, r8
 800a936:	1851      	adds	r1, r2, r1
 800a938:	6339      	str	r1, [r7, #48]	; 0x30
 800a93a:	4649      	mov	r1, r9
 800a93c:	414b      	adcs	r3, r1
 800a93e:	637b      	str	r3, [r7, #52]	; 0x34
 800a940:	f04f 0200 	mov.w	r2, #0
 800a944:	f04f 0300 	mov.w	r3, #0
 800a948:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a94c:	4659      	mov	r1, fp
 800a94e:	00cb      	lsls	r3, r1, #3
 800a950:	4651      	mov	r1, sl
 800a952:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a956:	4651      	mov	r1, sl
 800a958:	00ca      	lsls	r2, r1, #3
 800a95a:	4610      	mov	r0, r2
 800a95c:	4619      	mov	r1, r3
 800a95e:	4603      	mov	r3, r0
 800a960:	4642      	mov	r2, r8
 800a962:	189b      	adds	r3, r3, r2
 800a964:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a968:	464b      	mov	r3, r9
 800a96a:	460a      	mov	r2, r1
 800a96c:	eb42 0303 	adc.w	r3, r2, r3
 800a970:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a980:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a984:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a988:	460b      	mov	r3, r1
 800a98a:	18db      	adds	r3, r3, r3
 800a98c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a98e:	4613      	mov	r3, r2
 800a990:	eb42 0303 	adc.w	r3, r2, r3
 800a994:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a996:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a99a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a99e:	f7f5 ff59 	bl	8000854 <__aeabi_uldivmod>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	4b0d      	ldr	r3, [pc, #52]	; (800a9dc <UART_SetConfig+0x2d4>)
 800a9a8:	fba3 1302 	umull	r1, r3, r3, r2
 800a9ac:	095b      	lsrs	r3, r3, #5
 800a9ae:	2164      	movs	r1, #100	; 0x64
 800a9b0:	fb01 f303 	mul.w	r3, r1, r3
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	00db      	lsls	r3, r3, #3
 800a9b8:	3332      	adds	r3, #50	; 0x32
 800a9ba:	4a08      	ldr	r2, [pc, #32]	; (800a9dc <UART_SetConfig+0x2d4>)
 800a9bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a9c0:	095b      	lsrs	r3, r3, #5
 800a9c2:	f003 0207 	and.w	r2, r3, #7
 800a9c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4422      	add	r2, r4
 800a9ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a9d0:	e105      	b.n	800abde <UART_SetConfig+0x4d6>
 800a9d2:	bf00      	nop
 800a9d4:	40011000 	.word	0x40011000
 800a9d8:	40011400 	.word	0x40011400
 800a9dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a9e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a9ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a9ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a9f2:	4642      	mov	r2, r8
 800a9f4:	464b      	mov	r3, r9
 800a9f6:	1891      	adds	r1, r2, r2
 800a9f8:	6239      	str	r1, [r7, #32]
 800a9fa:	415b      	adcs	r3, r3
 800a9fc:	627b      	str	r3, [r7, #36]	; 0x24
 800a9fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aa02:	4641      	mov	r1, r8
 800aa04:	1854      	adds	r4, r2, r1
 800aa06:	4649      	mov	r1, r9
 800aa08:	eb43 0501 	adc.w	r5, r3, r1
 800aa0c:	f04f 0200 	mov.w	r2, #0
 800aa10:	f04f 0300 	mov.w	r3, #0
 800aa14:	00eb      	lsls	r3, r5, #3
 800aa16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aa1a:	00e2      	lsls	r2, r4, #3
 800aa1c:	4614      	mov	r4, r2
 800aa1e:	461d      	mov	r5, r3
 800aa20:	4643      	mov	r3, r8
 800aa22:	18e3      	adds	r3, r4, r3
 800aa24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aa28:	464b      	mov	r3, r9
 800aa2a:	eb45 0303 	adc.w	r3, r5, r3
 800aa2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aa32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aa3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aa42:	f04f 0200 	mov.w	r2, #0
 800aa46:	f04f 0300 	mov.w	r3, #0
 800aa4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800aa4e:	4629      	mov	r1, r5
 800aa50:	008b      	lsls	r3, r1, #2
 800aa52:	4621      	mov	r1, r4
 800aa54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa58:	4621      	mov	r1, r4
 800aa5a:	008a      	lsls	r2, r1, #2
 800aa5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800aa60:	f7f5 fef8 	bl	8000854 <__aeabi_uldivmod>
 800aa64:	4602      	mov	r2, r0
 800aa66:	460b      	mov	r3, r1
 800aa68:	4b60      	ldr	r3, [pc, #384]	; (800abec <UART_SetConfig+0x4e4>)
 800aa6a:	fba3 2302 	umull	r2, r3, r3, r2
 800aa6e:	095b      	lsrs	r3, r3, #5
 800aa70:	011c      	lsls	r4, r3, #4
 800aa72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa76:	2200      	movs	r2, #0
 800aa78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aa7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aa80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800aa84:	4642      	mov	r2, r8
 800aa86:	464b      	mov	r3, r9
 800aa88:	1891      	adds	r1, r2, r2
 800aa8a:	61b9      	str	r1, [r7, #24]
 800aa8c:	415b      	adcs	r3, r3
 800aa8e:	61fb      	str	r3, [r7, #28]
 800aa90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aa94:	4641      	mov	r1, r8
 800aa96:	1851      	adds	r1, r2, r1
 800aa98:	6139      	str	r1, [r7, #16]
 800aa9a:	4649      	mov	r1, r9
 800aa9c:	414b      	adcs	r3, r1
 800aa9e:	617b      	str	r3, [r7, #20]
 800aaa0:	f04f 0200 	mov.w	r2, #0
 800aaa4:	f04f 0300 	mov.w	r3, #0
 800aaa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aaac:	4659      	mov	r1, fp
 800aaae:	00cb      	lsls	r3, r1, #3
 800aab0:	4651      	mov	r1, sl
 800aab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aab6:	4651      	mov	r1, sl
 800aab8:	00ca      	lsls	r2, r1, #3
 800aaba:	4610      	mov	r0, r2
 800aabc:	4619      	mov	r1, r3
 800aabe:	4603      	mov	r3, r0
 800aac0:	4642      	mov	r2, r8
 800aac2:	189b      	adds	r3, r3, r2
 800aac4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aac8:	464b      	mov	r3, r9
 800aaca:	460a      	mov	r2, r1
 800aacc:	eb42 0303 	adc.w	r3, r2, r3
 800aad0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	67bb      	str	r3, [r7, #120]	; 0x78
 800aade:	67fa      	str	r2, [r7, #124]	; 0x7c
 800aae0:	f04f 0200 	mov.w	r2, #0
 800aae4:	f04f 0300 	mov.w	r3, #0
 800aae8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800aaec:	4649      	mov	r1, r9
 800aaee:	008b      	lsls	r3, r1, #2
 800aaf0:	4641      	mov	r1, r8
 800aaf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aaf6:	4641      	mov	r1, r8
 800aaf8:	008a      	lsls	r2, r1, #2
 800aafa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800aafe:	f7f5 fea9 	bl	8000854 <__aeabi_uldivmod>
 800ab02:	4602      	mov	r2, r0
 800ab04:	460b      	mov	r3, r1
 800ab06:	4b39      	ldr	r3, [pc, #228]	; (800abec <UART_SetConfig+0x4e4>)
 800ab08:	fba3 1302 	umull	r1, r3, r3, r2
 800ab0c:	095b      	lsrs	r3, r3, #5
 800ab0e:	2164      	movs	r1, #100	; 0x64
 800ab10:	fb01 f303 	mul.w	r3, r1, r3
 800ab14:	1ad3      	subs	r3, r2, r3
 800ab16:	011b      	lsls	r3, r3, #4
 800ab18:	3332      	adds	r3, #50	; 0x32
 800ab1a:	4a34      	ldr	r2, [pc, #208]	; (800abec <UART_SetConfig+0x4e4>)
 800ab1c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab20:	095b      	lsrs	r3, r3, #5
 800ab22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab26:	441c      	add	r4, r3
 800ab28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	673b      	str	r3, [r7, #112]	; 0x70
 800ab30:	677a      	str	r2, [r7, #116]	; 0x74
 800ab32:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ab36:	4642      	mov	r2, r8
 800ab38:	464b      	mov	r3, r9
 800ab3a:	1891      	adds	r1, r2, r2
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	415b      	adcs	r3, r3
 800ab40:	60fb      	str	r3, [r7, #12]
 800ab42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab46:	4641      	mov	r1, r8
 800ab48:	1851      	adds	r1, r2, r1
 800ab4a:	6039      	str	r1, [r7, #0]
 800ab4c:	4649      	mov	r1, r9
 800ab4e:	414b      	adcs	r3, r1
 800ab50:	607b      	str	r3, [r7, #4]
 800ab52:	f04f 0200 	mov.w	r2, #0
 800ab56:	f04f 0300 	mov.w	r3, #0
 800ab5a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ab5e:	4659      	mov	r1, fp
 800ab60:	00cb      	lsls	r3, r1, #3
 800ab62:	4651      	mov	r1, sl
 800ab64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab68:	4651      	mov	r1, sl
 800ab6a:	00ca      	lsls	r2, r1, #3
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	4619      	mov	r1, r3
 800ab70:	4603      	mov	r3, r0
 800ab72:	4642      	mov	r2, r8
 800ab74:	189b      	adds	r3, r3, r2
 800ab76:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab78:	464b      	mov	r3, r9
 800ab7a:	460a      	mov	r2, r1
 800ab7c:	eb42 0303 	adc.w	r3, r2, r3
 800ab80:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	663b      	str	r3, [r7, #96]	; 0x60
 800ab8c:	667a      	str	r2, [r7, #100]	; 0x64
 800ab8e:	f04f 0200 	mov.w	r2, #0
 800ab92:	f04f 0300 	mov.w	r3, #0
 800ab96:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ab9a:	4649      	mov	r1, r9
 800ab9c:	008b      	lsls	r3, r1, #2
 800ab9e:	4641      	mov	r1, r8
 800aba0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aba4:	4641      	mov	r1, r8
 800aba6:	008a      	lsls	r2, r1, #2
 800aba8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800abac:	f7f5 fe52 	bl	8000854 <__aeabi_uldivmod>
 800abb0:	4602      	mov	r2, r0
 800abb2:	460b      	mov	r3, r1
 800abb4:	4b0d      	ldr	r3, [pc, #52]	; (800abec <UART_SetConfig+0x4e4>)
 800abb6:	fba3 1302 	umull	r1, r3, r3, r2
 800abba:	095b      	lsrs	r3, r3, #5
 800abbc:	2164      	movs	r1, #100	; 0x64
 800abbe:	fb01 f303 	mul.w	r3, r1, r3
 800abc2:	1ad3      	subs	r3, r2, r3
 800abc4:	011b      	lsls	r3, r3, #4
 800abc6:	3332      	adds	r3, #50	; 0x32
 800abc8:	4a08      	ldr	r2, [pc, #32]	; (800abec <UART_SetConfig+0x4e4>)
 800abca:	fba2 2303 	umull	r2, r3, r2, r3
 800abce:	095b      	lsrs	r3, r3, #5
 800abd0:	f003 020f 	and.w	r2, r3, #15
 800abd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4422      	add	r2, r4
 800abdc:	609a      	str	r2, [r3, #8]
}
 800abde:	bf00      	nop
 800abe0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800abe4:	46bd      	mov	sp, r7
 800abe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800abea:	bf00      	nop
 800abec:	51eb851f 	.word	0x51eb851f

0800abf0 <arm_sin_f32>:
 800abf0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800ac6c <arm_sin_f32+0x7c>
 800abf4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800abf8:	ee20 7a07 	vmul.f32	s14, s0, s14
 800abfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac00:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800ac04:	d42c      	bmi.n	800ac60 <arm_sin_f32+0x70>
 800ac06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac0a:	eddf 6a19 	vldr	s13, [pc, #100]	; 800ac70 <arm_sin_f32+0x80>
 800ac0e:	4a19      	ldr	r2, [pc, #100]	; (800ac74 <arm_sin_f32+0x84>)
 800ac10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac14:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ac18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ac1c:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ac20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac24:	bfa8      	it	ge
 800ac26:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800ac2a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ac2e:	ee17 3a10 	vmov	r3, s14
 800ac32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac36:	ee07 3a10 	vmov	s14, r3
 800ac3a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800ac3e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800ac42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac46:	edd1 6a01 	vldr	s13, [r1, #4]
 800ac4a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ac4e:	ed91 0a00 	vldr	s0, [r1]
 800ac52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ac56:	ee27 0a00 	vmul.f32	s0, s14, s0
 800ac5a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ac5e:	4770      	bx	lr
 800ac60:	ee17 3a90 	vmov	r3, s15
 800ac64:	3b01      	subs	r3, #1
 800ac66:	ee07 3a90 	vmov	s15, r3
 800ac6a:	e7cc      	b.n	800ac06 <arm_sin_f32+0x16>
 800ac6c:	3e22f983 	.word	0x3e22f983
 800ac70:	44000000 	.word	0x44000000
 800ac74:	0800c0e0 	.word	0x0800c0e0

0800ac78 <atoi>:
 800ac78:	220a      	movs	r2, #10
 800ac7a:	2100      	movs	r1, #0
 800ac7c:	f000 b8d6 	b.w	800ae2c <strtol>

0800ac80 <__errno>:
 800ac80:	4b01      	ldr	r3, [pc, #4]	; (800ac88 <__errno+0x8>)
 800ac82:	6818      	ldr	r0, [r3, #0]
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	2000039c 	.word	0x2000039c

0800ac8c <__libc_init_array>:
 800ac8c:	b570      	push	{r4, r5, r6, lr}
 800ac8e:	4d0d      	ldr	r5, [pc, #52]	; (800acc4 <__libc_init_array+0x38>)
 800ac90:	4c0d      	ldr	r4, [pc, #52]	; (800acc8 <__libc_init_array+0x3c>)
 800ac92:	1b64      	subs	r4, r4, r5
 800ac94:	10a4      	asrs	r4, r4, #2
 800ac96:	2600      	movs	r6, #0
 800ac98:	42a6      	cmp	r6, r4
 800ac9a:	d109      	bne.n	800acb0 <__libc_init_array+0x24>
 800ac9c:	4d0b      	ldr	r5, [pc, #44]	; (800accc <__libc_init_array+0x40>)
 800ac9e:	4c0c      	ldr	r4, [pc, #48]	; (800acd0 <__libc_init_array+0x44>)
 800aca0:	f000 f8ce 	bl	800ae40 <_init>
 800aca4:	1b64      	subs	r4, r4, r5
 800aca6:	10a4      	asrs	r4, r4, #2
 800aca8:	2600      	movs	r6, #0
 800acaa:	42a6      	cmp	r6, r4
 800acac:	d105      	bne.n	800acba <__libc_init_array+0x2e>
 800acae:	bd70      	pop	{r4, r5, r6, pc}
 800acb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800acb4:	4798      	blx	r3
 800acb6:	3601      	adds	r6, #1
 800acb8:	e7ee      	b.n	800ac98 <__libc_init_array+0xc>
 800acba:	f855 3b04 	ldr.w	r3, [r5], #4
 800acbe:	4798      	blx	r3
 800acc0:	3601      	adds	r6, #1
 800acc2:	e7f2      	b.n	800acaa <__libc_init_array+0x1e>
 800acc4:	0800c9f0 	.word	0x0800c9f0
 800acc8:	0800c9f0 	.word	0x0800c9f0
 800accc:	0800c9f0 	.word	0x0800c9f0
 800acd0:	0800c9f4 	.word	0x0800c9f4

0800acd4 <memcpy>:
 800acd4:	440a      	add	r2, r1
 800acd6:	4291      	cmp	r1, r2
 800acd8:	f100 33ff 	add.w	r3, r0, #4294967295
 800acdc:	d100      	bne.n	800ace0 <memcpy+0xc>
 800acde:	4770      	bx	lr
 800ace0:	b510      	push	{r4, lr}
 800ace2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ace6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acea:	4291      	cmp	r1, r2
 800acec:	d1f9      	bne.n	800ace2 <memcpy+0xe>
 800acee:	bd10      	pop	{r4, pc}

0800acf0 <memset>:
 800acf0:	4402      	add	r2, r0
 800acf2:	4603      	mov	r3, r0
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d100      	bne.n	800acfa <memset+0xa>
 800acf8:	4770      	bx	lr
 800acfa:	f803 1b01 	strb.w	r1, [r3], #1
 800acfe:	e7f9      	b.n	800acf4 <memset+0x4>

0800ad00 <strncmp>:
 800ad00:	b510      	push	{r4, lr}
 800ad02:	b17a      	cbz	r2, 800ad24 <strncmp+0x24>
 800ad04:	4603      	mov	r3, r0
 800ad06:	3901      	subs	r1, #1
 800ad08:	1884      	adds	r4, r0, r2
 800ad0a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ad0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ad12:	4290      	cmp	r0, r2
 800ad14:	d101      	bne.n	800ad1a <strncmp+0x1a>
 800ad16:	42a3      	cmp	r3, r4
 800ad18:	d101      	bne.n	800ad1e <strncmp+0x1e>
 800ad1a:	1a80      	subs	r0, r0, r2
 800ad1c:	bd10      	pop	{r4, pc}
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	d1f3      	bne.n	800ad0a <strncmp+0xa>
 800ad22:	e7fa      	b.n	800ad1a <strncmp+0x1a>
 800ad24:	4610      	mov	r0, r2
 800ad26:	e7f9      	b.n	800ad1c <strncmp+0x1c>

0800ad28 <_strtol_l.constprop.0>:
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad2e:	d001      	beq.n	800ad34 <_strtol_l.constprop.0+0xc>
 800ad30:	2b24      	cmp	r3, #36	; 0x24
 800ad32:	d906      	bls.n	800ad42 <_strtol_l.constprop.0+0x1a>
 800ad34:	f7ff ffa4 	bl	800ac80 <__errno>
 800ad38:	2316      	movs	r3, #22
 800ad3a:	6003      	str	r3, [r0, #0]
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ae28 <_strtol_l.constprop.0+0x100>
 800ad46:	460d      	mov	r5, r1
 800ad48:	462e      	mov	r6, r5
 800ad4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad4e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ad52:	f017 0708 	ands.w	r7, r7, #8
 800ad56:	d1f7      	bne.n	800ad48 <_strtol_l.constprop.0+0x20>
 800ad58:	2c2d      	cmp	r4, #45	; 0x2d
 800ad5a:	d132      	bne.n	800adc2 <_strtol_l.constprop.0+0x9a>
 800ad5c:	782c      	ldrb	r4, [r5, #0]
 800ad5e:	2701      	movs	r7, #1
 800ad60:	1cb5      	adds	r5, r6, #2
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d05b      	beq.n	800ae1e <_strtol_l.constprop.0+0xf6>
 800ad66:	2b10      	cmp	r3, #16
 800ad68:	d109      	bne.n	800ad7e <_strtol_l.constprop.0+0x56>
 800ad6a:	2c30      	cmp	r4, #48	; 0x30
 800ad6c:	d107      	bne.n	800ad7e <_strtol_l.constprop.0+0x56>
 800ad6e:	782c      	ldrb	r4, [r5, #0]
 800ad70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ad74:	2c58      	cmp	r4, #88	; 0x58
 800ad76:	d14d      	bne.n	800ae14 <_strtol_l.constprop.0+0xec>
 800ad78:	786c      	ldrb	r4, [r5, #1]
 800ad7a:	2310      	movs	r3, #16
 800ad7c:	3502      	adds	r5, #2
 800ad7e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ad82:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad86:	f04f 0c00 	mov.w	ip, #0
 800ad8a:	fbb8 f9f3 	udiv	r9, r8, r3
 800ad8e:	4666      	mov	r6, ip
 800ad90:	fb03 8a19 	mls	sl, r3, r9, r8
 800ad94:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ad98:	f1be 0f09 	cmp.w	lr, #9
 800ad9c:	d816      	bhi.n	800adcc <_strtol_l.constprop.0+0xa4>
 800ad9e:	4674      	mov	r4, lr
 800ada0:	42a3      	cmp	r3, r4
 800ada2:	dd24      	ble.n	800adee <_strtol_l.constprop.0+0xc6>
 800ada4:	f1bc 0f00 	cmp.w	ip, #0
 800ada8:	db1e      	blt.n	800ade8 <_strtol_l.constprop.0+0xc0>
 800adaa:	45b1      	cmp	r9, r6
 800adac:	d31c      	bcc.n	800ade8 <_strtol_l.constprop.0+0xc0>
 800adae:	d101      	bne.n	800adb4 <_strtol_l.constprop.0+0x8c>
 800adb0:	45a2      	cmp	sl, r4
 800adb2:	db19      	blt.n	800ade8 <_strtol_l.constprop.0+0xc0>
 800adb4:	fb06 4603 	mla	r6, r6, r3, r4
 800adb8:	f04f 0c01 	mov.w	ip, #1
 800adbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adc0:	e7e8      	b.n	800ad94 <_strtol_l.constprop.0+0x6c>
 800adc2:	2c2b      	cmp	r4, #43	; 0x2b
 800adc4:	bf04      	itt	eq
 800adc6:	782c      	ldrbeq	r4, [r5, #0]
 800adc8:	1cb5      	addeq	r5, r6, #2
 800adca:	e7ca      	b.n	800ad62 <_strtol_l.constprop.0+0x3a>
 800adcc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800add0:	f1be 0f19 	cmp.w	lr, #25
 800add4:	d801      	bhi.n	800adda <_strtol_l.constprop.0+0xb2>
 800add6:	3c37      	subs	r4, #55	; 0x37
 800add8:	e7e2      	b.n	800ada0 <_strtol_l.constprop.0+0x78>
 800adda:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800adde:	f1be 0f19 	cmp.w	lr, #25
 800ade2:	d804      	bhi.n	800adee <_strtol_l.constprop.0+0xc6>
 800ade4:	3c57      	subs	r4, #87	; 0x57
 800ade6:	e7db      	b.n	800ada0 <_strtol_l.constprop.0+0x78>
 800ade8:	f04f 3cff 	mov.w	ip, #4294967295
 800adec:	e7e6      	b.n	800adbc <_strtol_l.constprop.0+0x94>
 800adee:	f1bc 0f00 	cmp.w	ip, #0
 800adf2:	da05      	bge.n	800ae00 <_strtol_l.constprop.0+0xd8>
 800adf4:	2322      	movs	r3, #34	; 0x22
 800adf6:	6003      	str	r3, [r0, #0]
 800adf8:	4646      	mov	r6, r8
 800adfa:	b942      	cbnz	r2, 800ae0e <_strtol_l.constprop.0+0xe6>
 800adfc:	4630      	mov	r0, r6
 800adfe:	e79e      	b.n	800ad3e <_strtol_l.constprop.0+0x16>
 800ae00:	b107      	cbz	r7, 800ae04 <_strtol_l.constprop.0+0xdc>
 800ae02:	4276      	negs	r6, r6
 800ae04:	2a00      	cmp	r2, #0
 800ae06:	d0f9      	beq.n	800adfc <_strtol_l.constprop.0+0xd4>
 800ae08:	f1bc 0f00 	cmp.w	ip, #0
 800ae0c:	d000      	beq.n	800ae10 <_strtol_l.constprop.0+0xe8>
 800ae0e:	1e69      	subs	r1, r5, #1
 800ae10:	6011      	str	r1, [r2, #0]
 800ae12:	e7f3      	b.n	800adfc <_strtol_l.constprop.0+0xd4>
 800ae14:	2430      	movs	r4, #48	; 0x30
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d1b1      	bne.n	800ad7e <_strtol_l.constprop.0+0x56>
 800ae1a:	2308      	movs	r3, #8
 800ae1c:	e7af      	b.n	800ad7e <_strtol_l.constprop.0+0x56>
 800ae1e:	2c30      	cmp	r4, #48	; 0x30
 800ae20:	d0a5      	beq.n	800ad6e <_strtol_l.constprop.0+0x46>
 800ae22:	230a      	movs	r3, #10
 800ae24:	e7ab      	b.n	800ad7e <_strtol_l.constprop.0+0x56>
 800ae26:	bf00      	nop
 800ae28:	0800c8e5 	.word	0x0800c8e5

0800ae2c <strtol>:
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	460a      	mov	r2, r1
 800ae30:	4601      	mov	r1, r0
 800ae32:	4802      	ldr	r0, [pc, #8]	; (800ae3c <strtol+0x10>)
 800ae34:	6800      	ldr	r0, [r0, #0]
 800ae36:	f7ff bf77 	b.w	800ad28 <_strtol_l.constprop.0>
 800ae3a:	bf00      	nop
 800ae3c:	2000039c 	.word	0x2000039c

0800ae40 <_init>:
 800ae40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae42:	bf00      	nop
 800ae44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae46:	bc08      	pop	{r3}
 800ae48:	469e      	mov	lr, r3
 800ae4a:	4770      	bx	lr

0800ae4c <_fini>:
 800ae4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4e:	bf00      	nop
 800ae50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae52:	bc08      	pop	{r3}
 800ae54:	469e      	mov	lr, r3
 800ae56:	4770      	bx	lr
