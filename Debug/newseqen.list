
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a358  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015e4  0800a4f8  0800a4f8  0001a4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800badc  0800badc  0002075c  2**0
                  CONTENTS
  4 .ARM          00000008  0800badc  0800badc  0001badc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bae4  0800bae4  0002075c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bae4  0800bae4  0001bae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bae8  0800bae8  0001bae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000075c  20000000  0800baec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000295c  2000075c  0800c248  0002075c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200030b8  0800c248  000230b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002075c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014354  00000000  00000000  0002078c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000274e  00000000  00000000  00034ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00037230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  00038400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d1e  00000000  00000000  000394a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001524e  00000000  00000000  000521c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e8ae  00000000  00000000  00067414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00105cc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005484  00000000  00000000  00105d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  0010b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000075c 	.word	0x2000075c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a4e0 	.word	0x0800a4e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000760 	.word	0x20000760
 80001dc:	0800a4e0 	.word	0x0800a4e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b974 	b.w	8000bec <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468e      	mov	lr, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	d14d      	bne.n	80009c6 <__udivmoddi4+0xaa>
 800092a:	428a      	cmp	r2, r1
 800092c:	4694      	mov	ip, r2
 800092e:	d969      	bls.n	8000a04 <__udivmoddi4+0xe8>
 8000930:	fab2 f282 	clz	r2, r2
 8000934:	b152      	cbz	r2, 800094c <__udivmoddi4+0x30>
 8000936:	fa01 f302 	lsl.w	r3, r1, r2
 800093a:	f1c2 0120 	rsb	r1, r2, #32
 800093e:	fa20 f101 	lsr.w	r1, r0, r1
 8000942:	fa0c fc02 	lsl.w	ip, ip, r2
 8000946:	ea41 0e03 	orr.w	lr, r1, r3
 800094a:	4094      	lsls	r4, r2
 800094c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000950:	0c21      	lsrs	r1, r4, #16
 8000952:	fbbe f6f8 	udiv	r6, lr, r8
 8000956:	fa1f f78c 	uxth.w	r7, ip
 800095a:	fb08 e316 	mls	r3, r8, r6, lr
 800095e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000962:	fb06 f107 	mul.w	r1, r6, r7
 8000966:	4299      	cmp	r1, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x64>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000972:	f080 811f 	bcs.w	8000bb4 <__udivmoddi4+0x298>
 8000976:	4299      	cmp	r1, r3
 8000978:	f240 811c 	bls.w	8000bb4 <__udivmoddi4+0x298>
 800097c:	3e02      	subs	r6, #2
 800097e:	4463      	add	r3, ip
 8000980:	1a5b      	subs	r3, r3, r1
 8000982:	b2a4      	uxth	r4, r4
 8000984:	fbb3 f0f8 	udiv	r0, r3, r8
 8000988:	fb08 3310 	mls	r3, r8, r0, r3
 800098c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000990:	fb00 f707 	mul.w	r7, r0, r7
 8000994:	42a7      	cmp	r7, r4
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x92>
 8000998:	eb1c 0404 	adds.w	r4, ip, r4
 800099c:	f100 33ff 	add.w	r3, r0, #4294967295
 80009a0:	f080 810a 	bcs.w	8000bb8 <__udivmoddi4+0x29c>
 80009a4:	42a7      	cmp	r7, r4
 80009a6:	f240 8107 	bls.w	8000bb8 <__udivmoddi4+0x29c>
 80009aa:	4464      	add	r4, ip
 80009ac:	3802      	subs	r0, #2
 80009ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b2:	1be4      	subs	r4, r4, r7
 80009b4:	2600      	movs	r6, #0
 80009b6:	b11d      	cbz	r5, 80009c0 <__udivmoddi4+0xa4>
 80009b8:	40d4      	lsrs	r4, r2
 80009ba:	2300      	movs	r3, #0
 80009bc:	e9c5 4300 	strd	r4, r3, [r5]
 80009c0:	4631      	mov	r1, r6
 80009c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d909      	bls.n	80009de <__udivmoddi4+0xc2>
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	f000 80ef 	beq.w	8000bae <__udivmoddi4+0x292>
 80009d0:	2600      	movs	r6, #0
 80009d2:	e9c5 0100 	strd	r0, r1, [r5]
 80009d6:	4630      	mov	r0, r6
 80009d8:	4631      	mov	r1, r6
 80009da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009de:	fab3 f683 	clz	r6, r3
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d14a      	bne.n	8000a7c <__udivmoddi4+0x160>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d302      	bcc.n	80009f0 <__udivmoddi4+0xd4>
 80009ea:	4282      	cmp	r2, r0
 80009ec:	f200 80f9 	bhi.w	8000be2 <__udivmoddi4+0x2c6>
 80009f0:	1a84      	subs	r4, r0, r2
 80009f2:	eb61 0303 	sbc.w	r3, r1, r3
 80009f6:	2001      	movs	r0, #1
 80009f8:	469e      	mov	lr, r3
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d0e0      	beq.n	80009c0 <__udivmoddi4+0xa4>
 80009fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a02:	e7dd      	b.n	80009c0 <__udivmoddi4+0xa4>
 8000a04:	b902      	cbnz	r2, 8000a08 <__udivmoddi4+0xec>
 8000a06:	deff      	udf	#255	; 0xff
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	f040 8092 	bne.w	8000b36 <__udivmoddi4+0x21a>
 8000a12:	eba1 010c 	sub.w	r1, r1, ip
 8000a16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1a:	fa1f fe8c 	uxth.w	lr, ip
 8000a1e:	2601      	movs	r6, #1
 8000a20:	0c20      	lsrs	r0, r4, #16
 8000a22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a26:	fb07 1113 	mls	r1, r7, r3, r1
 8000a2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a2e:	fb0e f003 	mul.w	r0, lr, r3
 8000a32:	4288      	cmp	r0, r1
 8000a34:	d908      	bls.n	8000a48 <__udivmoddi4+0x12c>
 8000a36:	eb1c 0101 	adds.w	r1, ip, r1
 8000a3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a3e:	d202      	bcs.n	8000a46 <__udivmoddi4+0x12a>
 8000a40:	4288      	cmp	r0, r1
 8000a42:	f200 80cb 	bhi.w	8000bdc <__udivmoddi4+0x2c0>
 8000a46:	4643      	mov	r3, r8
 8000a48:	1a09      	subs	r1, r1, r0
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a50:	fb07 1110 	mls	r1, r7, r0, r1
 8000a54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a58:	fb0e fe00 	mul.w	lr, lr, r0
 8000a5c:	45a6      	cmp	lr, r4
 8000a5e:	d908      	bls.n	8000a72 <__udivmoddi4+0x156>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a68:	d202      	bcs.n	8000a70 <__udivmoddi4+0x154>
 8000a6a:	45a6      	cmp	lr, r4
 8000a6c:	f200 80bb 	bhi.w	8000be6 <__udivmoddi4+0x2ca>
 8000a70:	4608      	mov	r0, r1
 8000a72:	eba4 040e 	sub.w	r4, r4, lr
 8000a76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a7a:	e79c      	b.n	80009b6 <__udivmoddi4+0x9a>
 8000a7c:	f1c6 0720 	rsb	r7, r6, #32
 8000a80:	40b3      	lsls	r3, r6
 8000a82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a92:	431c      	orrs	r4, r3
 8000a94:	40f9      	lsrs	r1, r7
 8000a96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000aa2:	0c20      	lsrs	r0, r4, #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ab0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ab4:	4288      	cmp	r0, r1
 8000ab6:	fa02 f206 	lsl.w	r2, r2, r6
 8000aba:	d90b      	bls.n	8000ad4 <__udivmoddi4+0x1b8>
 8000abc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ac4:	f080 8088 	bcs.w	8000bd8 <__udivmoddi4+0x2bc>
 8000ac8:	4288      	cmp	r0, r1
 8000aca:	f240 8085 	bls.w	8000bd8 <__udivmoddi4+0x2bc>
 8000ace:	f1a8 0802 	sub.w	r8, r8, #2
 8000ad2:	4461      	add	r1, ip
 8000ad4:	1a09      	subs	r1, r1, r0
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000adc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ae0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ae4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ae8:	458e      	cmp	lr, r1
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x1e2>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000af4:	d26c      	bcs.n	8000bd0 <__udivmoddi4+0x2b4>
 8000af6:	458e      	cmp	lr, r1
 8000af8:	d96a      	bls.n	8000bd0 <__udivmoddi4+0x2b4>
 8000afa:	3802      	subs	r0, #2
 8000afc:	4461      	add	r1, ip
 8000afe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b02:	fba0 9402 	umull	r9, r4, r0, r2
 8000b06:	eba1 010e 	sub.w	r1, r1, lr
 8000b0a:	42a1      	cmp	r1, r4
 8000b0c:	46c8      	mov	r8, r9
 8000b0e:	46a6      	mov	lr, r4
 8000b10:	d356      	bcc.n	8000bc0 <__udivmoddi4+0x2a4>
 8000b12:	d053      	beq.n	8000bbc <__udivmoddi4+0x2a0>
 8000b14:	b15d      	cbz	r5, 8000b2e <__udivmoddi4+0x212>
 8000b16:	ebb3 0208 	subs.w	r2, r3, r8
 8000b1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b22:	fa22 f306 	lsr.w	r3, r2, r6
 8000b26:	40f1      	lsrs	r1, r6
 8000b28:	431f      	orrs	r7, r3
 8000b2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b2e:	2600      	movs	r6, #0
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	40d8      	lsrs	r0, r3
 8000b3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b40:	fa21 f303 	lsr.w	r3, r1, r3
 8000b44:	4091      	lsls	r1, r2
 8000b46:	4301      	orrs	r1, r0
 8000b48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4c:	fa1f fe8c 	uxth.w	lr, ip
 8000b50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b54:	fb07 3610 	mls	r6, r7, r0, r3
 8000b58:	0c0b      	lsrs	r3, r1, #16
 8000b5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b62:	429e      	cmp	r6, r3
 8000b64:	fa04 f402 	lsl.w	r4, r4, r2
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x260>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b72:	d22f      	bcs.n	8000bd4 <__udivmoddi4+0x2b8>
 8000b74:	429e      	cmp	r6, r3
 8000b76:	d92d      	bls.n	8000bd4 <__udivmoddi4+0x2b8>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	1b9b      	subs	r3, r3, r6
 8000b7e:	b289      	uxth	r1, r1
 8000b80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b84:	fb07 3316 	mls	r3, r7, r6, r3
 8000b88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d908      	bls.n	8000ba6 <__udivmoddi4+0x28a>
 8000b94:	eb1c 0101 	adds.w	r1, ip, r1
 8000b98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b9c:	d216      	bcs.n	8000bcc <__udivmoddi4+0x2b0>
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d914      	bls.n	8000bcc <__udivmoddi4+0x2b0>
 8000ba2:	3e02      	subs	r6, #2
 8000ba4:	4461      	add	r1, ip
 8000ba6:	1ac9      	subs	r1, r1, r3
 8000ba8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bac:	e738      	b.n	8000a20 <__udivmoddi4+0x104>
 8000bae:	462e      	mov	r6, r5
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	e705      	b.n	80009c0 <__udivmoddi4+0xa4>
 8000bb4:	4606      	mov	r6, r0
 8000bb6:	e6e3      	b.n	8000980 <__udivmoddi4+0x64>
 8000bb8:	4618      	mov	r0, r3
 8000bba:	e6f8      	b.n	80009ae <__udivmoddi4+0x92>
 8000bbc:	454b      	cmp	r3, r9
 8000bbe:	d2a9      	bcs.n	8000b14 <__udivmoddi4+0x1f8>
 8000bc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000bc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bc8:	3801      	subs	r0, #1
 8000bca:	e7a3      	b.n	8000b14 <__udivmoddi4+0x1f8>
 8000bcc:	4646      	mov	r6, r8
 8000bce:	e7ea      	b.n	8000ba6 <__udivmoddi4+0x28a>
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	e794      	b.n	8000afe <__udivmoddi4+0x1e2>
 8000bd4:	4640      	mov	r0, r8
 8000bd6:	e7d1      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bd8:	46d0      	mov	r8, sl
 8000bda:	e77b      	b.n	8000ad4 <__udivmoddi4+0x1b8>
 8000bdc:	3b02      	subs	r3, #2
 8000bde:	4461      	add	r1, ip
 8000be0:	e732      	b.n	8000a48 <__udivmoddi4+0x12c>
 8000be2:	4630      	mov	r0, r6
 8000be4:	e709      	b.n	80009fa <__udivmoddi4+0xde>
 8000be6:	4464      	add	r4, ip
 8000be8:	3802      	subs	r0, #2
 8000bea:	e742      	b.n	8000a72 <__udivmoddi4+0x156>

08000bec <__aeabi_idiv0>:
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bf8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bfc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d013      	beq.n	8000c30 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c0c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c10:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00b      	beq.n	8000c30 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c18:	e000      	b.n	8000c1c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c1a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0f9      	beq.n	8000c1a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c26:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c30:	687b      	ldr	r3, [r7, #4]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_write>:
uint16_t enc2_lut[180];   // lut to skip cells ,filled in on main
uint16_t feedback_line[17]={'F','o','o','d','b','a','c','k','g','_' ,'k',64, 278, 279, 280,64}; // this is variable , last display line for info
uint16_t feedback_pointer;  // pointer for feedback item start position , maybe bit search for less menu data ,dunno

int _write(int file, char *ptr, int len)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e009      	b.n	8000c64 <_write+0x26>
	{
	   ITM_SendChar( *ptr++ );
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ffc9 	bl	8000bf0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbf1      	blt.n	8000c50 <_write+0x12>
	}

	return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <SPI_command>:
void SPI_command(void){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <SPI_command+0x68>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d128      	bne.n	8000cd8 <SPI_command+0x60>
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <SPI_command+0x6c>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d124      	bne.n	8000cd8 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <SPI_command+0x70>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	0a1b      	lsrs	r3, r3, #8
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <SPI_command+0x2a>
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <SPI_command+0x74>)
 8000c9c:	22f8      	movs	r2, #248	; 0xf8
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e002      	b.n	8000ca8 <SPI_command+0x30>
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <SPI_command+0x74>)
 8000ca4:	22fa      	movs	r2, #250	; 0xfa
 8000ca6:	701a      	strb	r2, [r3, #0]
/*		bsrr_long=spi_byte<<16; // top byte for command 24-16, then 2 bytes of data 16-0
		spi_hold=(spi_hold&255);
		bsrr_long=bsrr_long+((spi_hold>>4)<<12); // 4 bits to top
		bsrr_long=bsrr_long+((spi_hold&15)<<4);	// 4 bits to top
*/
	spi_store[0]=spi_byte&255;
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <SPI_command+0x74>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <SPI_command+0x70>)
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	091b      	lsrs	r3, r3, #4
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <SPI_command+0x70>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	011b      	lsls	r3, r3, #4
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
		HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 100);  // working good
 8000cc6:	4639      	mov	r1, r7
 8000cc8:	2364      	movs	r3, #100	; 0x64
 8000cca:	2203      	movs	r2, #3
 8000ccc:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <SPI_command+0x78>)
 8000cce:	f006 fe12 	bl	80078f6 <HAL_SPI_Transmit>


//HAL_Delay(10);
	spi_enable=1; }
 8000cd2:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <SPI_command+0x68>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	801a      	strh	r2, [r3, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20002102 	.word	0x20002102
 8000ce4:	20002108 	.word	0x20002108
 8000ce8:	20002106 	.word	0x20002106
 8000cec:	20002104 	.word	0x20002104
 8000cf0:	20002f70 	.word	0x20002f70

08000cf4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

	sample_point=sample_point & 1023;// this is 1
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d0a:	801a      	strh	r2, [r3, #0]
	play_hold=play_sample[sample_point]; // this is 2
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000d16:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d1c:	801a      	strh	r2, [r3, #0]

		if(TIM3==htim->Instance)			// nothing here is consistent
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d10b      	bne.n	8000d40 <HAL_TIM_PeriodElapsedCallback+0x4c>
{


TIM3->CCR3=play_hold ;  // keep readin sample storage
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d30:	63da      	str	r2, [r3, #60]	; 0x3c


//if (bs_count==255
	//	)  { bs_count=0; menu_store=(menuSelect>>2); } else bs_count++; // menu select, higher count just spills over  159 chamge to 128 2*64
//}
sample_point++; //this needs to be here or too fast and wrong sample rate
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	3301      	adds	r3, #1
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d3e:	801a      	strh	r2, [r3, #0]

}

}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	20001446 	.word	0x20001446
 8000d50:	20000c44 	.word	0x20000c44
 8000d54:	20001448 	.word	0x20001448
 8000d58:	40000400 	.word	0x40000400

08000d5c <analoginputloopb>:
						}  // get value this this on e is blank
		//HAL_ADC_Stop(&hadc1);
//for (i=0;i<3;i++){ adc_values[i]= (adc_values[i]>>8) &15; } // reduce value to 4 bit
}
*/
void analoginputloopb(void){  //works fine still
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0


	//menuSelect = (7 - (adc_values[0] >>2))<<1;		//x *16  main menu select
	//menuSelect = (15 - (adc_values[0] >>1));		//x *7  main menu select
	//menuSelectX=(31 - adc_values[1])>>1;  // Y select inside page
	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 8000d62:	4b80      	ldr	r3, [pc, #512]	; (8000f64 <analoginputloopb+0x208>)
 8000d64:	889b      	ldrh	r3, [r3, #4]
 8000d66:	091b      	lsrs	r3, r3, #4
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b7e      	ldr	r3, [pc, #504]	; (8000f68 <analoginputloopb+0x20c>)
 8000d6e:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 8000d70:	4b7c      	ldr	r3, [pc, #496]	; (8000f64 <analoginputloopb+0x208>)
 8000d72:	889b      	ldrh	r3, [r3, #4]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b7b      	ldr	r3, [pc, #492]	; (8000f6c <analoginputloopb+0x210>)
 8000d7e:	701a      	strb	r2, [r3, #0]
	//	counterVarB = menuSelectX + menuSelect; // select mem page 10*8  and location pointer  77
//		if (adc_values[1]>15)	menu_holder=disp_lut [(menuSelect)	+1] [31-adc_values[1]]; // change back to 0-15
//	else menu_holder=disp_lut [(menuSelect)	] [15-adc_values[1]];  // grab disp lut value for pointer if valid then write for now

		//menu_holder=disp_lut [(menuSelect)	] [(15-adc_values[1])];   // value from disp lut
		menu_holder=disp_lut [menuSelect] [menuSelectX];   // value from disp lut
 8000d80:	4b79      	ldr	r3, [pc, #484]	; (8000f68 <analoginputloopb+0x20c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	4b79      	ldr	r3, [pc, #484]	; (8000f6c <analoginputloopb+0x210>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4a78      	ldr	r2, [pc, #480]	; (8000f70 <analoginputloopb+0x214>)
 8000d8e:	0103      	lsls	r3, r0, #4
 8000d90:	440b      	add	r3, r1
 8000d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d96:	80fb      	strh	r3, [r7, #6]
		cursor_menu[1]=0;
 8000d98:	4b72      	ldr	r3, [pc, #456]	; (8000f64 <analoginputloopb+0x208>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	805a      	strh	r2, [r3, #2]
		//cursor_menu[2]=cursor_lookup[enc2_dir];
		// cursor_menu[2]=cursor_lookup[enc2_dir]; //needed for correct line sequence ,obsolete
		cursor_menu[2]=enc2_dir;
 8000d9e:	4b75      	ldr	r3, [pc, #468]	; (8000f74 <analoginputloopb+0x218>)
 8000da0:	881a      	ldrh	r2, [r3, #0]
 8000da2:	4b70      	ldr	r3, [pc, #448]	; (8000f64 <analoginputloopb+0x208>)
 8000da4:	809a      	strh	r2, [r3, #4]

		//cursor_menu[2]=(16-adc_values[1]);



		if (menu_holder>127)	counterVarB=menu_holder-128; //  points to actual potvalues location from dsip_lut when value is higher than 127 , works ok problem with menu display
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	2b7f      	cmp	r3, #127	; 0x7f
 8000daa:	d904      	bls.n	8000db6 <analoginputloopb+0x5a>
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	3b80      	subs	r3, #128	; 0x80
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	4b71      	ldr	r3, [pc, #452]	; (8000f78 <analoginputloopb+0x21c>)
 8000db4:	801a      	strh	r2, [r3, #0]
		if (menu_holder>511)	counterVarB=menu_holder-384;		// text pointer , max potvalue address is 142 , fix second page issue later
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dbc:	d305      	bcc.n	8000dca <analoginputloopb+0x6e>
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	4b6c      	ldr	r3, [pc, #432]	; (8000f78 <analoginputloopb+0x21c>)
 8000dc8:	801a      	strh	r2, [r3, #0]


		enc_dir=potSource[counterVarB];
 8000dca:	4b6b      	ldr	r3, [pc, #428]	; (8000f78 <analoginputloopb+0x21c>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b6a      	ldr	r3, [pc, #424]	; (8000f7c <analoginputloopb+0x220>)
 8000dd2:	5c9b      	ldrb	r3, [r3, r2]
 8000dd4:	b21a      	sxth	r2, r3
 8000dd6:	4b6a      	ldr	r3, [pc, #424]	; (8000f80 <analoginputloopb+0x224>)
 8000dd8:	801a      	strh	r2, [r3, #0]


	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 8000dda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de0:	085b      	lsrs	r3, r3, #1
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	4b67      	ldr	r3, [pc, #412]	; (8000f84 <analoginputloopb+0x228>)
 8000de6:	801a      	strh	r2, [r3, #0]
	enc2_temp=(TIM4->CNT)>>1;  // read counter tim4
 8000de8:	4b67      	ldr	r3, [pc, #412]	; (8000f88 <analoginputloopb+0x22c>)
 8000dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dec:	085b      	lsrs	r3, r3, #1
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b66      	ldr	r3, [pc, #408]	; (8000f8c <analoginputloopb+0x230>)
 8000df2:	801a      	strh	r2, [r3, #0]
	enc2_temp=enc2_temp&127; // fix overflow ? , dont need a lot because of skip
 8000df4:	4b65      	ldr	r3, [pc, #404]	; (8000f8c <analoginputloopb+0x230>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	4b63      	ldr	r3, [pc, #396]	; (8000f8c <analoginputloopb+0x230>)
 8000e00:	801a      	strh	r2, [r3, #0]

	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite
 8000e02:	4b60      	ldr	r3, [pc, #384]	; (8000f84 <analoginputloopb+0x228>)
 8000e04:	881a      	ldrh	r2, [r3, #0]
 8000e06:	4b62      	ldr	r3, [pc, #392]	; (8000f90 <analoginputloopb+0x234>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d910      	bls.n	8000e30 <analoginputloopb+0xd4>
 8000e0e:	4b5c      	ldr	r3, [pc, #368]	; (8000f80 <analoginputloopb+0x224>)
 8000e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	4b57      	ldr	r3, [pc, #348]	; (8000f74 <analoginputloopb+0x218>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	091b      	lsrs	r3, r3, #4
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4b5c      	ldr	r3, [pc, #368]	; (8000f94 <analoginputloopb+0x238>)
 8000e22:	5c5b      	ldrb	r3, [r3, r1]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	4b54      	ldr	r3, [pc, #336]	; (8000f80 <analoginputloopb+0x224>)
 8000e2e:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite , step multiplier
 8000e30:	4b54      	ldr	r3, [pc, #336]	; (8000f84 <analoginputloopb+0x228>)
 8000e32:	881a      	ldrh	r2, [r3, #0]
 8000e34:	4b56      	ldr	r3, [pc, #344]	; (8000f90 <analoginputloopb+0x234>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d210      	bcs.n	8000e5e <analoginputloopb+0x102>
 8000e3c:	4b4d      	ldr	r3, [pc, #308]	; (8000f74 <analoginputloopb+0x218>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	091b      	lsrs	r3, r3, #4
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b53      	ldr	r3, [pc, #332]	; (8000f94 <analoginputloopb+0x238>)
 8000e48:	5c9b      	ldrb	r3, [r3, r2]
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	4b4c      	ldr	r3, [pc, #304]	; (8000f80 <analoginputloopb+0x224>)
 8000e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	4413      	add	r3, r2
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	4b49      	ldr	r3, [pc, #292]	; (8000f80 <analoginputloopb+0x224>)
 8000e5c:	801a      	strh	r2, [r3, #0]
	//if (enc_temp<enc_tempB)	 enc_dir++;

  enc2_temp=enc2_lut[enc2_temp];  // force alternative values for skip  , seems to work ok , disable temporarily
 8000e5e:	4b4b      	ldr	r3, [pc, #300]	; (8000f8c <analoginputloopb+0x230>)
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b4c      	ldr	r3, [pc, #304]	; (8000f98 <analoginputloopb+0x23c>)
 8000e66:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000e6a:	4b48      	ldr	r3, [pc, #288]	; (8000f8c <analoginputloopb+0x230>)
 8000e6c:	801a      	strh	r2, [r3, #0]
  if (enc2_temp>383) enc2_temp=383;  //mem overflow somewhere
 8000e6e:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <analoginputloopb+0x230>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000e76:	d303      	bcc.n	8000e80 <analoginputloopb+0x124>
 8000e78:	4b44      	ldr	r3, [pc, #272]	; (8000f8c <analoginputloopb+0x230>)
 8000e7a:	f240 127f 	movw	r2, #383	; 0x17f
 8000e7e:	801a      	strh	r2, [r3, #0]
	if (enc_dir>160) enc_dir=160;
 8000e80:	4b3f      	ldr	r3, [pc, #252]	; (8000f80 <analoginputloopb+0x224>)
 8000e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e86:	2ba0      	cmp	r3, #160	; 0xa0
 8000e88:	dd02      	ble.n	8000e90 <analoginputloopb+0x134>
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <analoginputloopb+0x224>)
 8000e8c:	22a0      	movs	r2, #160	; 0xa0
 8000e8e:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 8000e90:	4b3b      	ldr	r3, [pc, #236]	; (8000f80 <analoginputloopb+0x224>)
 8000e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	da02      	bge.n	8000ea0 <analoginputloopb+0x144>
 8000e9a:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <analoginputloopb+0x224>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	801a      	strh	r2, [r3, #0]
			//if (enc2_temp<16) enc_dir=(enc_dir<<2) & 127; // faster for notes on first row

			potSource[counterVarB]=enc_dir;       // enter data into potsource
 8000ea0:	4b37      	ldr	r3, [pc, #220]	; (8000f80 <analoginputloopb+0x224>)
 8000ea2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <analoginputloopb+0x21c>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	b2c9      	uxtb	r1, r1
 8000eae:	4b33      	ldr	r3, [pc, #204]	; (8000f7c <analoginputloopb+0x220>)
 8000eb0:	5499      	strb	r1, [r3, r2]
					enc_dir=0;
 8000eb2:	4b33      	ldr	r3, [pc, #204]	; (8000f80 <analoginputloopb+0x224>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	801a      	strh	r2, [r3, #0]
			enc_tempB=enc_temp;
 8000eb8:	4b32      	ldr	r3, [pc, #200]	; (8000f84 <analoginputloopb+0x228>)
 8000eba:	881a      	ldrh	r2, [r3, #0]
 8000ebc:	4b34      	ldr	r3, [pc, #208]	; (8000f90 <analoginputloopb+0x234>)
 8000ebe:	801a      	strh	r2, [r3, #0]
			//if (enc2_dir>383) enc2_dir=383;

			//if  (enc2_temp>enc2_tempB)	 enc2_dir++;   // start settle timer , will do 2 times per turn always
			//if (enc2_temp<enc2_tempB)	 enc2_dir--;
			enc2_dir=enc2_temp; //temp to try source data
 8000ec0:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <analoginputloopb+0x230>)
 8000ec2:	881a      	ldrh	r2, [r3, #0]
 8000ec4:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <analoginputloopb+0x218>)
 8000ec6:	801a      	strh	r2, [r3, #0]
		//	if (enc2_dir>127) menu_page[1]=127; else if (enc2_dir>255)   menu_page[1]=255;				else menu_page[1]=0;
		//	menu_page[1]= (enc2_dir >>7) <<7;

			menu_page[1]=enc2_dir&384;
 8000ec8:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <analoginputloopb+0x218>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	4b32      	ldr	r3, [pc, #200]	; (8000f9c <analoginputloopb+0x240>)
 8000ed4:	805a      	strh	r2, [r3, #2]


			//if (enc2_dir>255) {menu_page[1]=0;display_fill();}

					if ((enc2_temp>127) && (enc2_tempB<=127)) display_fill();    // need to optimize
 8000ed6:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <analoginputloopb+0x230>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	2b7f      	cmp	r3, #127	; 0x7f
 8000edc:	d905      	bls.n	8000eea <analoginputloopb+0x18e>
 8000ede:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <analoginputloopb+0x244>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ee4:	d801      	bhi.n	8000eea <analoginputloopb+0x18e>
 8000ee6:	f000 fa07 	bl	80012f8 <display_fill>
					if ((enc2_temp<=127) && (enc2_tempB>127)) display_fill();
 8000eea:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <analoginputloopb+0x230>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef0:	d805      	bhi.n	8000efe <analoginputloopb+0x1a2>
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <analoginputloopb+0x244>)
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef8:	d901      	bls.n	8000efe <analoginputloopb+0x1a2>
 8000efa:	f000 f9fd 	bl	80012f8 <display_fill>
					if ((enc2_temp>255) && (enc2_tempB<=255)) display_fill();
 8000efe:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <analoginputloopb+0x230>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	2bff      	cmp	r3, #255	; 0xff
 8000f04:	d905      	bls.n	8000f12 <analoginputloopb+0x1b6>
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <analoginputloopb+0x244>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	2bff      	cmp	r3, #255	; 0xff
 8000f0c:	d801      	bhi.n	8000f12 <analoginputloopb+0x1b6>
 8000f0e:	f000 f9f3 	bl	80012f8 <display_fill>
					if ((enc2_temp<=255) && (enc2_tempB>255)) display_fill();
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <analoginputloopb+0x230>)
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	2bff      	cmp	r3, #255	; 0xff
 8000f18:	d805      	bhi.n	8000f26 <analoginputloopb+0x1ca>
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <analoginputloopb+0x244>)
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	2bff      	cmp	r3, #255	; 0xff
 8000f20:	d901      	bls.n	8000f26 <analoginputloopb+0x1ca>
 8000f22:	f000 f9e9 	bl	80012f8 <display_fill>
					if ((enc2_temp>383) && (enc2_tempB<=383)) display_fill();
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <analoginputloopb+0x230>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000f2e:	d306      	bcc.n	8000f3e <analoginputloopb+0x1e2>
 8000f30:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <analoginputloopb+0x244>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000f38:	d201      	bcs.n	8000f3e <analoginputloopb+0x1e2>
 8000f3a:	f000 f9dd 	bl	80012f8 <display_fill>
					//if ((enc2_temp<=383) && (enc2_tempB>383)) display_fill();
					//if ((enc2_temp<127) && (enc2_tempB>384)) display_fill();
					//if ((enc2_temp<=511) && (enc2_tempB<127)) display_fill();


					enc2_tempB=enc2_temp; // to effective as counter not getting reset
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <analoginputloopb+0x230>)
 8000f40:	881a      	ldrh	r2, [r3, #0]
 8000f42:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <analoginputloopb+0x244>)
 8000f44:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <analoginputloopb+0x21c>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <analoginputloopb+0x220>)
 8000f4e:	5c9b      	ldrb	r3, [r3, r2]
 8000f50:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <analoginputloopb+0x21c>)
 8000f52:	8812      	ldrh	r2, [r2, #0]
 8000f54:	091b      	lsrs	r3, r3, #4
 8000f56:	b2d9      	uxtb	r1, r3
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <analoginputloopb+0x248>)
 8000f5a:	5499      	strb	r1, [r3, r2]

//potValues[counterVarB]=potSource[counterVarB] & 15 ;  // reduce values for now ,use original for others



}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2000210c 	.word	0x2000210c
 8000f68:	20000be8 	.word	0x20000be8
 8000f6c:	20000be9 	.word	0x20000be9
 8000f70:	0800a87c 	.word	0x0800a87c
 8000f74:	200020fa 	.word	0x200020fa
 8000f78:	20000bea 	.word	0x20000bea
 8000f7c:	20000a68 	.word	0x20000a68
 8000f80:	200020fc 	.word	0x200020fc
 8000f84:	200020f2 	.word	0x200020f2
 8000f88:	40000800 	.word	0x40000800
 8000f8c:	200020f6 	.word	0x200020f6
 8000f90:	200020f4 	.word	0x200020f4
 8000f94:	200006c4 	.word	0x200006c4
 8000f98:	20000778 	.word	0x20000778
 8000f9c:	2000211c 	.word	0x2000211c
 8000fa0:	200020f8 	.word	0x200020f8
 8000fa4:	200008e8 	.word	0x200008e8

08000fa8 <display_init>:
void display_init(void){
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);


		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd
 8000fae:	4b64      	ldr	r3, [pc, #400]	; (8001140 <display_init+0x198>)
 8000fb0:	1d3c      	adds	r4, r7, #4
 8000fb2:	461d      	mov	r5, r3
 8000fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbc:	682b      	ldr	r3, [r5, #0]
 8000fbe:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8000fc0:	4b60      	ldr	r3, [pc, #384]	; (8001144 <display_init+0x19c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f040 80b6 	bne.w	8001136 <display_init+0x18e>

/*if ((enc2_dir>63) && (menu_page[2]==0))  {init=4;menu_page[2]=1;}  //restart page draw for second page , might need home pos init
if  ((init==76) && (menu_page[2]==1)) menu_page[2]=2; //after drawing second page and finish
if ((enc2_dir<63) && (menu_page[2]==2))  {init=4;menu_page[2]=0;}
*/
switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded
 8000fca:	4b5f      	ldr	r3, [pc, #380]	; (8001148 <display_init+0x1a0>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	3b4d      	subs	r3, #77	; 0x4d
 8000fd0:	2b07      	cmp	r3, #7
 8000fd2:	d879      	bhi.n	80010c8 <display_init+0x120>
 8000fd4:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <display_init+0x34>)
 8000fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fda:	bf00      	nop
 8000fdc:	08000ffd 	.word	0x08000ffd
 8000fe0:	0800102d 	.word	0x0800102d
 8000fe4:	08001035 	.word	0x08001035
 8000fe8:	08001051 	.word	0x08001051
 8000fec:	08001065 	.word	0x08001065
 8000ff0:	08001073 	.word	0x08001073
 8000ff4:	08001087 	.word	0x08001087
 8000ff8:	0800109b 	.word	0x0800109b

case 77: spi_hold=384+(init_b>>1);init=init+((init_b&1)*2);break; // no delay ,jump to either blink sets
 8000ffc:	4b53      	ldr	r3, [pc, #332]	; (800114c <display_init+0x1a4>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	085b      	lsrs	r3, r3, #1
 8001002:	b29b      	uxth	r3, r3
 8001004:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001008:	b29a      	uxth	r2, r3
 800100a:	4b51      	ldr	r3, [pc, #324]	; (8001150 <display_init+0x1a8>)
 800100c:	801a      	strh	r2, [r3, #0]
 800100e:	4b4f      	ldr	r3, [pc, #316]	; (800114c <display_init+0x1a4>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b4a      	ldr	r3, [pc, #296]	; (8001148 <display_init+0x1a0>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	4413      	add	r3, r2
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b48      	ldr	r3, [pc, #288]	; (8001148 <display_init+0x1a0>)
 8001028:	701a      	strb	r2, [r3, #0]
 800102a:	e05f      	b.n	80010ec <display_init+0x144>

case 78: spi_hold=10;break; //write one set then jump
 800102c:	4b48      	ldr	r3, [pc, #288]	; (8001150 <display_init+0x1a8>)
 800102e:	220a      	movs	r2, #10
 8001030:	801a      	strh	r2, [r3, #0]
 8001032:	e05b      	b.n	80010ec <display_init+0x144>
case 79: spi_hold=spell[(init_b&62)+1];init=81;break;
 8001034:	4b45      	ldr	r3, [pc, #276]	; (800114c <display_init+0x1a4>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800103c:	3301      	adds	r3, #1
 800103e:	4a45      	ldr	r2, [pc, #276]	; (8001154 <display_init+0x1ac>)
 8001040:	5cd3      	ldrb	r3, [r2, r3]
 8001042:	b29a      	uxth	r2, r3
 8001044:	4b42      	ldr	r3, [pc, #264]	; (8001150 <display_init+0x1a8>)
 8001046:	801a      	strh	r2, [r3, #0]
 8001048:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <display_init+0x1a0>)
 800104a:	2251      	movs	r2, #81	; 0x51
 800104c:	701a      	strb	r2, [r3, #0]
 800104e:	e04d      	b.n	80010ec <display_init+0x144>
case 80: spi_hold=spell[init_b&62];break; // or write other set then jump
 8001050:	4b3e      	ldr	r3, [pc, #248]	; (800114c <display_init+0x1a4>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001058:	4a3e      	ldr	r2, [pc, #248]	; (8001154 <display_init+0x1ac>)
 800105a:	5cd3      	ldrb	r3, [r2, r3]
 800105c:	b29a      	uxth	r2, r3
 800105e:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <display_init+0x1a8>)
 8001060:	801a      	strh	r2, [r3, #0]
 8001062:	e043      	b.n	80010ec <display_init+0x144>
case 81: spi_hold=10;init=81;break;
 8001064:	4b3a      	ldr	r3, [pc, #232]	; (8001150 <display_init+0x1a8>)
 8001066:	220a      	movs	r2, #10
 8001068:	801a      	strh	r2, [r3, #0]
 800106a:	4b37      	ldr	r3, [pc, #220]	; (8001148 <display_init+0x1a0>)
 800106c:	2251      	movs	r2, #81	; 0x51
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	e03c      	b.n	80010ec <display_init+0x144>


case 82: spi_hold=384+(init_b>>1);break;  // finish writes
 8001072:	4b36      	ldr	r3, [pc, #216]	; (800114c <display_init+0x1a4>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	085b      	lsrs	r3, r3, #1
 8001078:	b29b      	uxth	r3, r3
 800107a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800107e:	b29a      	uxth	r2, r3
 8001080:	4b33      	ldr	r3, [pc, #204]	; (8001150 <display_init+0x1a8>)
 8001082:	801a      	strh	r2, [r3, #0]
 8001084:	e032      	b.n	80010ec <display_init+0x144>
case 83: spi_hold=spell[init_b&62];break;
 8001086:	4b31      	ldr	r3, [pc, #196]	; (800114c <display_init+0x1a4>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800108e:	4a31      	ldr	r2, [pc, #196]	; (8001154 <display_init+0x1ac>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	b29a      	uxth	r2, r3
 8001094:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <display_init+0x1a8>)
 8001096:	801a      	strh	r2, [r3, #0]
 8001098:	e028      	b.n	80010ec <display_init+0x144>
case 84 : spi_hold=spell[(init_b&62)+1];init_b=cursor_menu[2]&63;displayBuffer ();init=76; break; //update cursor and displaybuffer
 800109a:	4b2c      	ldr	r3, [pc, #176]	; (800114c <display_init+0x1a4>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80010a2:	3301      	adds	r3, #1
 80010a4:	4a2b      	ldr	r2, [pc, #172]	; (8001154 <display_init+0x1ac>)
 80010a6:	5cd3      	ldrb	r3, [r2, r3]
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	4b29      	ldr	r3, [pc, #164]	; (8001150 <display_init+0x1a8>)
 80010ac:	801a      	strh	r2, [r3, #0]
 80010ae:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <display_init+0x1b0>)
 80010b0:	889b      	ldrh	r3, [r3, #4]
 80010b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4b24      	ldr	r3, [pc, #144]	; (800114c <display_init+0x1a4>)
 80010ba:	801a      	strh	r2, [r3, #0]
 80010bc:	f000 f948 	bl	8001350 <displayBuffer>
 80010c0:	4b21      	ldr	r3, [pc, #132]	; (8001148 <display_init+0x1a0>)
 80010c2:	224c      	movs	r2, #76	; 0x4c
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e011      	b.n	80010ec <display_init+0x144>
default : init_b=init-6;displayBuffer ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <display_init+0x1a0>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	3b06      	subs	r3, #6
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	4b1e      	ldr	r3, [pc, #120]	; (800114c <display_init+0x1a4>)
 80010d4:	801a      	strh	r2, [r3, #0]
 80010d6:	f000 f93b 	bl	8001350 <displayBuffer>
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <display_init+0x1a4>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <display_init+0x1ac>)
 80010e2:	5c9b      	ldrb	r3, [r3, r2]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <display_init+0x1a8>)
 80010e8:	801a      	strh	r2, [r3, #0]
 80010ea:	bf00      	nop
}


if (init<6)	{HAL_Delay(30);spi_hold=disp[init] ;  init_b=cursor_menu[2]; } //delay needs to go
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <display_init+0x1a0>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	d80f      	bhi.n	8001114 <display_init+0x16c>
 80010f4:	201e      	movs	r0, #30
 80010f6:	f003 f843 	bl	8004180 <HAL_Delay>
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <display_init+0x1a0>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	3328      	adds	r3, #40	; 0x28
 8001102:	443b      	add	r3, r7
 8001104:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <display_init+0x1a8>)
 800110a:	801a      	strh	r2, [r3, #0]
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <display_init+0x1b0>)
 800110e:	889a      	ldrh	r2, [r3, #4]
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <display_init+0x1a4>)
 8001112:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <display_init+0x1a0>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	3301      	adds	r3, #1
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <display_init+0x1a0>)
 800111e:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <display_init+0x19c>)
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	f7ff fda7 	bl	8000c78 <SPI_command>
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <display_init+0x19c>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <display_init+0x1b4>)
 8001132:	2200      	movs	r2, #0
 8001134:	801a      	strh	r2, [r3, #0]
		  //if ((bsrr_counter==49) && (spi_send==2)) {bsrr_counter=0; spi_send=0;}
		  if (bsrr_counter==49)  {bsrr_counter=0; spi_send=0;}
		 }
*/

}
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	; 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bdb0      	pop	{r4, r5, r7, pc}
 800113e:	bf00      	nop
 8001140:	0800a76c 	.word	0x0800a76c
 8001144:	20002108 	.word	0x20002108
 8001148:	20002109 	.word	0x20002109
 800114c:	2000210a 	.word	0x2000210a
 8001150:	20002106 	.word	0x20002106
 8001154:	2000010c 	.word	0x2000010c
 8001158:	2000210c 	.word	0x2000210c
 800115c:	20002102 	.word	0x20002102

08001160 <display_update>:



}

void display_update(void){				//spi display updater code , all gfx , works pretty ok n doesn't need to be running always 18x 128 ,constant scanning
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0

	uint8_t spi_store[5];

switch (gfx_skip) { // 1-17  one row
 8001166:	4b5d      	ldr	r3, [pc, #372]	; (80012dc <display_update+0x17c>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d035      	beq.n	80011da <display_update+0x7a>
 800116e:	2b03      	cmp	r3, #3
 8001170:	dc3d      	bgt.n	80011ee <display_update+0x8e>
 8001172:	2b01      	cmp	r3, #1
 8001174:	d002      	beq.n	800117c <display_update+0x1c>
 8001176:	2b02      	cmp	r3, #2
 8001178:	d020      	beq.n	80011bc <display_update+0x5c>
 800117a:	e038      	b.n	80011ee <display_update+0x8e>


case 1 : {spi_hold=((gfx_counter[0])&31)+384;gfx_counter[4]=(gfx_counter[0]>>5);  gfx_counter[0]=(gfx_counter[0]+1)&63 ;gfx_skip++;break ;}  // count up positions
 800117c:	4b58      	ldr	r3, [pc, #352]	; (80012e0 <display_update+0x180>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	f003 031f 	and.w	r3, r3, #31
 8001184:	b29b      	uxth	r3, r3
 8001186:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800118a:	b29a      	uxth	r2, r3
 800118c:	4b55      	ldr	r3, [pc, #340]	; (80012e4 <display_update+0x184>)
 800118e:	801a      	strh	r2, [r3, #0]
 8001190:	4b53      	ldr	r3, [pc, #332]	; (80012e0 <display_update+0x180>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	095b      	lsrs	r3, r3, #5
 8001196:	b29a      	uxth	r2, r3
 8001198:	4b51      	ldr	r3, [pc, #324]	; (80012e0 <display_update+0x180>)
 800119a:	811a      	strh	r2, [r3, #8]
 800119c:	4b50      	ldr	r3, [pc, #320]	; (80012e0 <display_update+0x180>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	4b4d      	ldr	r3, [pc, #308]	; (80012e0 <display_update+0x180>)
 80011ac:	801a      	strh	r2, [r3, #0]
 80011ae:	4b4b      	ldr	r3, [pc, #300]	; (80012dc <display_update+0x17c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	3301      	adds	r3, #1
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4b49      	ldr	r3, [pc, #292]	; (80012dc <display_update+0x17c>)
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	e028      	b.n	800120e <display_update+0xae>
case 2  : {	spi_hold=384+(gfx_counter[4]*8);gfx_skip++;break ;  }
 80011bc:	4b48      	ldr	r3, [pc, #288]	; (80012e0 <display_update+0x180>)
 80011be:	891b      	ldrh	r3, [r3, #8]
 80011c0:	3330      	adds	r3, #48	; 0x30
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <display_update+0x184>)
 80011ca:	801a      	strh	r2, [r3, #0]
 80011cc:	4b43      	ldr	r3, [pc, #268]	; (80012dc <display_update+0x17c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b41      	ldr	r3, [pc, #260]	; (80012dc <display_update+0x17c>)
 80011d6:	701a      	strb	r2, [r3, #0]
 80011d8:	e019      	b.n	800120e <display_update+0xae>
case 3   : gfx_counter[3]=0; gfx_skip++;break;
 80011da:	4b41      	ldr	r3, [pc, #260]	; (80012e0 <display_update+0x180>)
 80011dc:	2200      	movs	r2, #0
 80011de:	80da      	strh	r2, [r3, #6]
 80011e0:	4b3e      	ldr	r3, [pc, #248]	; (80012dc <display_update+0x17c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <display_update+0x17c>)
 80011ea:	701a      	strb	r2, [r3, #0]
 80011ec:	e00f      	b.n	800120e <display_update+0xae>
//case 18 : gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;break;  //not ideal
default :  gfx_counter[3]=(gfx_counter[3]+1)&15;gfx_skip++;break;
 80011ee:	4b3c      	ldr	r3, [pc, #240]	; (80012e0 <display_update+0x180>)
 80011f0:	88db      	ldrh	r3, [r3, #6]
 80011f2:	3301      	adds	r3, #1
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <display_update+0x180>)
 80011fe:	80da      	strh	r2, [r3, #6]
 8001200:	4b36      	ldr	r3, [pc, #216]	; (80012dc <display_update+0x17c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b34      	ldr	r3, [pc, #208]	; (80012dc <display_update+0x17c>)
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	bf00      	nop

}


if ((gfx_skip==2) || (gfx_skip==3) || (gfx_skip==1)) spi_hold=spi_hold; else spi_hold=gfx_ram[gfx_counter[2]] [gfx_counter[3]] ; // write command or data
 800120e:	4b33      	ldr	r3, [pc, #204]	; (80012dc <display_update+0x17c>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d007      	beq.n	8001226 <display_update+0xc6>
 8001216:	4b31      	ldr	r3, [pc, #196]	; (80012dc <display_update+0x17c>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b03      	cmp	r3, #3
 800121c:	d003      	beq.n	8001226 <display_update+0xc6>
 800121e:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <display_update+0x17c>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d104      	bne.n	8001230 <display_update+0xd0>
 8001226:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <display_update+0x184>)
 8001228:	881a      	ldrh	r2, [r3, #0]
 800122a:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <display_update+0x184>)
 800122c:	801a      	strh	r2, [r3, #0]
 800122e:	e00d      	b.n	800124c <display_update+0xec>
 8001230:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <display_update+0x180>)
 8001232:	889b      	ldrh	r3, [r3, #4]
 8001234:	4618      	mov	r0, r3
 8001236:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <display_update+0x180>)
 8001238:	88db      	ldrh	r3, [r3, #6]
 800123a:	4619      	mov	r1, r3
 800123c:	4a2a      	ldr	r2, [pc, #168]	; (80012e8 <display_update+0x188>)
 800123e:	0103      	lsls	r3, r0, #4
 8001240:	4413      	add	r3, r2
 8001242:	440b      	add	r3, r1
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <display_update+0x184>)
 800124a:	801a      	strh	r2, [r3, #0]

if (gfx_skip==19)  {gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;}   // fixed last doubled char
 800124c:	4b23      	ldr	r3, [pc, #140]	; (80012dc <display_update+0x17c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b13      	cmp	r3, #19
 8001252:	d10e      	bne.n	8001272 <display_update+0x112>
 8001254:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <display_update+0x180>)
 8001256:	889b      	ldrh	r3, [r3, #4]
 8001258:	3301      	adds	r3, #1
 800125a:	b29b      	uxth	r3, r3
 800125c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001260:	b29a      	uxth	r2, r3
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <display_update+0x180>)
 8001264:	809a      	strh	r2, [r3, #4]
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <display_update+0x180>)
 8001268:	2200      	movs	r2, #0
 800126a:	80da      	strh	r2, [r3, #6]
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <display_update+0x17c>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]

		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <display_update+0x184>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	0a1b      	lsrs	r3, r3, #8
 8001278:	b29b      	uxth	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <display_update+0x126>
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <display_update+0x18c>)
 8001280:	22f8      	movs	r2, #248	; 0xf8
 8001282:	701a      	strb	r2, [r3, #0]
 8001284:	e002      	b.n	800128c <display_update+0x12c>
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <display_update+0x18c>)
 8001288:	22fa      	movs	r2, #250	; 0xfa
 800128a:	701a      	strb	r2, [r3, #0]

		spi_store[0]=spi_byte&255;
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <display_update+0x18c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	703b      	strb	r3, [r7, #0]
		spi_store[1]=((spi_hold>>4)<<4)&255;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <display_update+0x184>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	b29b      	uxth	r3, r3
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	b2db      	uxtb	r3, r3
 800129e:	707b      	strb	r3, [r7, #1]
		spi_store[2]=((spi_hold&15)<<4)&255;
 80012a0:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <display_update+0x184>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	70bb      	strb	r3, [r7, #2]

	// send this to spi for now
			HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 100);  // working good ,blocking
 80012aa:	4639      	mov	r1, r7
 80012ac:	2364      	movs	r3, #100	; 0x64
 80012ae:	2203      	movs	r2, #3
 80012b0:	480f      	ldr	r0, [pc, #60]	; (80012f0 <display_update+0x190>)
 80012b2:	f006 fb20 	bl	80078f6 <HAL_SPI_Transmit>


disp_end=gfx_skip+gfx_counter[2]+gfx_counter[3];			// vsynch for displaybuffer
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <display_update+0x180>)
 80012b8:	889b      	ldrh	r3, [r3, #4]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <display_update+0x17c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4413      	add	r3, r2
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <display_update+0x180>)
 80012c6:	88db      	ldrh	r3, [r3, #6]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <display_update+0x194>)
 80012d0:	701a      	strb	r2, [r3, #0]


}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200006c0 	.word	0x200006c0
 80012e0:	200029f4 	.word	0x200029f4
 80012e4:	20002106 	.word	0x20002106
 80012e8:	200025bc 	.word	0x200025bc
 80012ec:	20002104 	.word	0x20002104
 80012f0:	20002f70 	.word	0x20002f70
 80012f4:	20002a02 	.word	0x20002a02

080012f8 <display_fill>:
void display_fill(void)  {     // full update of gfx memory
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
loop_counter3=1;
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <display_fill+0x48>)
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
for (n=0;n<2048;n++)	{ //fills up gfx ram or not
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <display_fill+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	801a      	strh	r2, [r3, #0]
 8001308:	e011      	b.n	800132e <display_fill+0x36>

enc2_dir=(n>>4)+menu_page[1]; 												// 0-128         +      0,127,255,
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <display_fill+0x4c>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	b29a      	uxth	r2, r3
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <display_fill+0x50>)
 8001314:	885b      	ldrh	r3, [r3, #2]
 8001316:	4413      	add	r3, r2
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <display_fill+0x54>)
 800131c:	801a      	strh	r2, [r3, #0]

displayBuffer();
 800131e:	f000 f817 	bl	8001350 <displayBuffer>
for (n=0;n<2048;n++)	{ //fills up gfx ram or not
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <display_fill+0x4c>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	3301      	adds	r3, #1
 8001328:	b29a      	uxth	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <display_fill+0x4c>)
 800132c:	801a      	strh	r2, [r3, #0]
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <display_fill+0x4c>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001336:	d3e8      	bcc.n	800130a <display_fill+0x12>
}
//enc2_dir=menu_page[1];  // end clean
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20002a03 	.word	0x20002a03
 8001344:	20000c1e 	.word	0x20000c1e
 8001348:	2000211c 	.word	0x2000211c
 800134c:	200020fa 	.word	0x200020fa

08001350 <displayBuffer>:



void displayBuffer (void){        //  in a constant state of flux
 8001350:	b4b0      	push	{r4, r5, r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0

	if (disp_stepper==0) init_b=enc2_dir; else init_b=111+disp_stepper;  // fetch values for last line or cursor
 8001356:	4b39      	ldr	r3, [pc, #228]	; (800143c <displayBuffer+0xec>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d104      	bne.n	8001368 <displayBuffer+0x18>
 800135e:	4b38      	ldr	r3, [pc, #224]	; (8001440 <displayBuffer+0xf0>)
 8001360:	881a      	ldrh	r2, [r3, #0]
 8001362:	4b38      	ldr	r3, [pc, #224]	; (8001444 <displayBuffer+0xf4>)
 8001364:	801a      	strh	r2, [r3, #0]
 8001366:	e006      	b.n	8001376 <displayBuffer+0x26>
 8001368:	4b34      	ldr	r3, [pc, #208]	; (800143c <displayBuffer+0xec>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	b29b      	uxth	r3, r3
 800136e:	336f      	adds	r3, #111	; 0x6f
 8001370:	b29a      	uxth	r2, r3
 8001372:	4b34      	ldr	r3, [pc, #208]	; (8001444 <displayBuffer+0xf4>)
 8001374:	801a      	strh	r2, [r3, #0]

	uint8_t d_count;
uint16_t init_x=((init_b>>4)<<3);    // normal x8 , try other 64 x16
 8001376:	4b33      	ldr	r3, [pc, #204]	; (8001444 <displayBuffer+0xf4>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	b29b      	uxth	r3, r3
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	83bb      	strh	r3, [r7, #28]
uint8_t init_x2=init_x&63;  // 0-64  character address in gfx
 8001382:	8bbb      	ldrh	r3, [r7, #28]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800138a:	76fb      	strb	r3, [r7, #27]
uint8_t init_y=init_b&15;
 800138c:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <displayBuffer+0xf4>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	76bb      	strb	r3, [r7, #26]
uint16_t store_x;
uint8_t lfotarget_menu[20]={0,40,16,8,40,40,48,56,64,72,0,0,0,0,0,0,0,0,0,0};  // keep lfo target list here for now *8
 8001398:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <displayBuffer+0xf8>)
 800139a:	1d3c      	adds	r4, r7, #4
 800139c:	461d      	mov	r5, r3
 800139e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a2:	682b      	ldr	r3, [r5, #0]
 80013a4:	6023      	str	r3, [r4, #0]
// just to point the lfo number



//if (enc2_dir<128){
	if (disp_stepper==0) { store_c= disp_lut [init_b>>4]  [init_y] ; feedback_pointer=((enc2_dir>>4)<<3)&127; feedback_line[10]=((enc2_dir&15)>>1)+48;  // pointer and data , runs at every character drawn at cursor
 80013a6:	4b25      	ldr	r3, [pc, #148]	; (800143c <displayBuffer+0xec>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d17a      	bne.n	80014a4 <displayBuffer+0x154>
 80013ae:	4b25      	ldr	r3, [pc, #148]	; (8001444 <displayBuffer+0xf4>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	091b      	lsrs	r3, r3, #4
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	7ebb      	ldrb	r3, [r7, #26]
 80013ba:	4924      	ldr	r1, [pc, #144]	; (800144c <displayBuffer+0xfc>)
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	4413      	add	r3, r2
 80013c0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80013c4:	4b22      	ldr	r3, [pc, #136]	; (8001450 <displayBuffer+0x100>)
 80013c6:	801a      	strh	r2, [r3, #0]
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <displayBuffer+0xf0>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013d8:	b29a      	uxth	r2, r3
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <displayBuffer+0x104>)
 80013dc:	801a      	strh	r2, [r3, #0]
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <displayBuffer+0xf0>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	105b      	asrs	r3, r3, #1
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	3330      	adds	r3, #48	; 0x30
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <displayBuffer+0x108>)
 80013f2:	829a      	strh	r2, [r3, #20]


	menulength = sizeof(menu_items) / sizeof(menu_items[feedback_pointer]);  // get length of data on location
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <displayBuffer+0x10c>)
 80013f6:	2235      	movs	r2, #53	; 0x35
 80013f8:	701a      	strb	r2, [r3, #0]

	for (i = 0; i < 56; i++)
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <displayBuffer+0x110>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	801a      	strh	r2, [r3, #0]
 8001400:	e014      	b.n	800142c <displayBuffer+0xdc>
		{ if (menu_loc[i]==store_c){menu_locA=i;break;}    // gets disp_lut number that points in menu_items
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <displayBuffer+0x110>)
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <displayBuffer+0x114>)
 800140a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <displayBuffer+0x100>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d104      	bne.n	8001420 <displayBuffer+0xd0>
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <displayBuffer+0x110>)
 8001418:	881a      	ldrh	r2, [r3, #0]
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <displayBuffer+0x118>)
 800141c:	801a      	strh	r2, [r3, #0]
 800141e:	e009      	b.n	8001434 <displayBuffer+0xe4>
	for (i = 0; i < 56; i++)
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <displayBuffer+0x110>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	3301      	adds	r3, #1
 8001426:	b29a      	uxth	r2, r3
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <displayBuffer+0x110>)
 800142a:	801a      	strh	r2, [r3, #0]
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <displayBuffer+0x110>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	2b37      	cmp	r3, #55	; 0x37
 8001432:	d9e6      	bls.n	8001402 <displayBuffer+0xb2>

		}

	for (i = 0; i < menulength; i++)
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <displayBuffer+0x110>)
 8001436:	2200      	movs	r2, #0
 8001438:	801a      	strh	r2, [r3, #0]
 800143a:	e02c      	b.n	8001496 <displayBuffer+0x146>
 800143c:	200006e5 	.word	0x200006e5
 8001440:	200020fa 	.word	0x200020fa
 8001444:	2000210a 	.word	0x2000210a
 8001448:	0800a790 	.word	0x0800a790
 800144c:	0800a87c 	.word	0x0800a87c
 8001450:	20000c1c 	.word	0x20000c1c
 8001454:	200008e0 	.word	0x200008e0
 8001458:	20000000 	.word	0x20000000
 800145c:	200008e4 	.word	0x200008e4
 8001460:	20000c40 	.word	0x20000c40
 8001464:	0800ac7c 	.word	0x0800ac7c
 8001468:	200008e2 	.word	0x200008e2
	{ menulist_hold[i+1]=menu_items[menu_locA] [i];
 800146c:	4b84      	ldr	r3, [pc, #528]	; (8001680 <displayBuffer+0x330>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b84      	ldr	r3, [pc, #528]	; (8001684 <displayBuffer+0x334>)
 8001474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001478:	4a83      	ldr	r2, [pc, #524]	; (8001688 <displayBuffer+0x338>)
 800147a:	8812      	ldrh	r2, [r2, #0]
 800147c:	441a      	add	r2, r3
 800147e:	4b82      	ldr	r3, [pc, #520]	; (8001688 <displayBuffer+0x338>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	3301      	adds	r3, #1
 8001484:	7811      	ldrb	r1, [r2, #0]
 8001486:	4a81      	ldr	r2, [pc, #516]	; (800168c <displayBuffer+0x33c>)
 8001488:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < menulength; i++)
 800148a:	4b7f      	ldr	r3, [pc, #508]	; (8001688 <displayBuffer+0x338>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	3301      	adds	r3, #1
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b7d      	ldr	r3, [pc, #500]	; (8001688 <displayBuffer+0x338>)
 8001494:	801a      	strh	r2, [r3, #0]
 8001496:	4b7e      	ldr	r3, [pc, #504]	; (8001690 <displayBuffer+0x340>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b29a      	uxth	r2, r3
 800149c:	4b7a      	ldr	r3, [pc, #488]	; (8001688 <displayBuffer+0x338>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d8e3      	bhi.n	800146c <displayBuffer+0x11c>

	}   // grab item , this works but slower

	}

	if  ((disp_stepper<11) && (disp_stepper))   {      // 0-9 chars of line 8 , overhead is ok
 80014a4:	4b7b      	ldr	r3, [pc, #492]	; (8001694 <displayBuffer+0x344>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b0a      	cmp	r3, #10
 80014aa:	d817      	bhi.n	80014dc <displayBuffer+0x18c>
 80014ac:	4b79      	ldr	r3, [pc, #484]	; (8001694 <displayBuffer+0x344>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d013      	beq.n	80014dc <displayBuffer+0x18c>

//{	feedback_line[disp_stepper]=menuList[disp_stepper+feedback_pointer];  // feedback data info standard , per character 0-16

		feedback_line[disp_stepper]=menulist_hold[disp_stepper];  // feedback data modified 0-16
 80014b4:	4b77      	ldr	r3, [pc, #476]	; (8001694 <displayBuffer+0x344>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b74      	ldr	r3, [pc, #464]	; (800168c <displayBuffer+0x33c>)
 80014bc:	5c99      	ldrb	r1, [r3, r2]
 80014be:	4b75      	ldr	r3, [pc, #468]	; (8001694 <displayBuffer+0x344>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	b289      	uxth	r1, r1
 80014c6:	4b74      	ldr	r3, [pc, #464]	; (8001698 <displayBuffer+0x348>)
 80014c8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

store_c=feedback_line[disp_stepper];//gets potvalues pointer from menus or feedback line , per character
 80014cc:	4b71      	ldr	r3, [pc, #452]	; (8001694 <displayBuffer+0x344>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b71      	ldr	r3, [pc, #452]	; (8001698 <displayBuffer+0x348>)
 80014d4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80014d8:	4b70      	ldr	r3, [pc, #448]	; (800169c <displayBuffer+0x34c>)
 80014da:	801a      	strh	r2, [r3, #0]
	}

if (disp_stepper>10) store_c=feedback_line[disp_stepper];  /// just the lcd out  values at end of line 8
 80014dc:	4b6d      	ldr	r3, [pc, #436]	; (8001694 <displayBuffer+0x344>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b0a      	cmp	r3, #10
 80014e2:	d907      	bls.n	80014f4 <displayBuffer+0x1a4>
 80014e4:	4b6b      	ldr	r3, [pc, #428]	; (8001694 <displayBuffer+0x344>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b6b      	ldr	r3, [pc, #428]	; (8001698 <displayBuffer+0x348>)
 80014ec:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80014f0:	4b6a      	ldr	r3, [pc, #424]	; (800169c <displayBuffer+0x34c>)
 80014f2:	801a      	strh	r2, [r3, #0]


	// all this can be simplified
	 if (store_c==64) store_c=47;  //EMPTY SPACE
 80014f4:	4b69      	ldr	r3, [pc, #420]	; (800169c <displayBuffer+0x34c>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	2b40      	cmp	r3, #64	; 0x40
 80014fa:	d102      	bne.n	8001502 <displayBuffer+0x1b2>
 80014fc:	4b67      	ldr	r3, [pc, #412]	; (800169c <displayBuffer+0x34c>)
 80014fe:	222f      	movs	r2, #47	; 0x2f
 8001500:	801a      	strh	r2, [r3, #0]
	if ((store_c>127)&& (store_c<255))  {lcd_out3=potSource[store_c-128] ;     store_c= potValues[store_c&127]+48;															}		// NORMAL POTVALUES 0-127
 8001502:	4b66      	ldr	r3, [pc, #408]	; (800169c <displayBuffer+0x34c>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	2b7f      	cmp	r3, #127	; 0x7f
 8001508:	d916      	bls.n	8001538 <displayBuffer+0x1e8>
 800150a:	4b64      	ldr	r3, [pc, #400]	; (800169c <displayBuffer+0x34c>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	2bfe      	cmp	r3, #254	; 0xfe
 8001510:	d812      	bhi.n	8001538 <displayBuffer+0x1e8>
 8001512:	4b62      	ldr	r3, [pc, #392]	; (800169c <displayBuffer+0x34c>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	3b80      	subs	r3, #128	; 0x80
 8001518:	4a61      	ldr	r2, [pc, #388]	; (80016a0 <displayBuffer+0x350>)
 800151a:	5cd3      	ldrb	r3, [r2, r3]
 800151c:	b29a      	uxth	r2, r3
 800151e:	4b61      	ldr	r3, [pc, #388]	; (80016a4 <displayBuffer+0x354>)
 8001520:	801a      	strh	r2, [r3, #0]
 8001522:	4b5e      	ldr	r3, [pc, #376]	; (800169c <displayBuffer+0x34c>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800152a:	4a5f      	ldr	r2, [pc, #380]	; (80016a8 <displayBuffer+0x358>)
 800152c:	5cd3      	ldrb	r3, [r2, r3]
 800152e:	b29b      	uxth	r3, r3
 8001530:	3330      	adds	r3, #48	; 0x30
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b59      	ldr	r3, [pc, #356]	; (800169c <displayBuffer+0x34c>)
 8001536:	801a      	strh	r2, [r3, #0]
	if ((store_c>254)	&& (store_c<384)) 											{lcd_out3=potSource[store_c-128] ;store_c= potValues[store_c-128]+48;}  // POTVALUES 128+
 8001538:	4b58      	ldr	r3, [pc, #352]	; (800169c <displayBuffer+0x34c>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	2bfe      	cmp	r3, #254	; 0xfe
 800153e:	d916      	bls.n	800156e <displayBuffer+0x21e>
 8001540:	4b56      	ldr	r3, [pc, #344]	; (800169c <displayBuffer+0x34c>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001548:	d211      	bcs.n	800156e <displayBuffer+0x21e>
 800154a:	4b54      	ldr	r3, [pc, #336]	; (800169c <displayBuffer+0x34c>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	3b80      	subs	r3, #128	; 0x80
 8001550:	4a53      	ldr	r2, [pc, #332]	; (80016a0 <displayBuffer+0x350>)
 8001552:	5cd3      	ldrb	r3, [r2, r3]
 8001554:	b29a      	uxth	r2, r3
 8001556:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <displayBuffer+0x354>)
 8001558:	801a      	strh	r2, [r3, #0]
 800155a:	4b50      	ldr	r3, [pc, #320]	; (800169c <displayBuffer+0x34c>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	3b80      	subs	r3, #128	; 0x80
 8001560:	4a51      	ldr	r2, [pc, #324]	; (80016a8 <displayBuffer+0x358>)
 8001562:	5cd3      	ldrb	r3, [r2, r3]
 8001564:	b29b      	uxth	r3, r3
 8001566:	3330      	adds	r3, #48	; 0x30
 8001568:	b29a      	uxth	r2, r3
 800156a:	4b4c      	ldr	r3, [pc, #304]	; (800169c <displayBuffer+0x34c>)
 800156c:	801a      	strh	r2, [r3, #0]
//	if ((store_c>127)	&& (store_c<384)) 	{store_c= potValues[store_c&127]+48;}		// NORMAL POTVALUES
	if (store_c>511)		{store_c=store_c&127;			store_c= menuList2		[     (lfotarget_menu[   ((store_c>>3))  ])	+(store_c&7)]						; } // VARIABLE MENU ITEMS CHAR LUT
 800156e:	4b4b      	ldr	r3, [pc, #300]	; (800169c <displayBuffer+0x34c>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001576:	d319      	bcc.n	80015ac <displayBuffer+0x25c>
 8001578:	4b48      	ldr	r3, [pc, #288]	; (800169c <displayBuffer+0x34c>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001580:	b29a      	uxth	r2, r3
 8001582:	4b46      	ldr	r3, [pc, #280]	; (800169c <displayBuffer+0x34c>)
 8001584:	801a      	strh	r2, [r3, #0]
 8001586:	4b45      	ldr	r3, [pc, #276]	; (800169c <displayBuffer+0x34c>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	08db      	lsrs	r3, r3, #3
 800158c:	b29b      	uxth	r3, r3
 800158e:	3320      	adds	r3, #32
 8001590:	443b      	add	r3, r7
 8001592:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001596:	461a      	mov	r2, r3
 8001598:	4b40      	ldr	r3, [pc, #256]	; (800169c <displayBuffer+0x34c>)
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	4413      	add	r3, r2
 80015a2:	4a42      	ldr	r2, [pc, #264]	; (80016ac <displayBuffer+0x35c>)
 80015a4:	5cd3      	ldrb	r3, [r2, r3]
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	4b3c      	ldr	r3, [pc, #240]	; (800169c <displayBuffer+0x34c>)
 80015aa:	801a      	strh	r2, [r3, #0]

	store_c=store_c-47; store_c = store_c &127;	  // spell no longer ?, store_c changes		STARTS FROM 0
 80015ac:	4b3b      	ldr	r3, [pc, #236]	; (800169c <displayBuffer+0x34c>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	3b2f      	subs	r3, #47	; 0x2f
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4b39      	ldr	r3, [pc, #228]	; (800169c <displayBuffer+0x34c>)
 80015b6:	801a      	strh	r2, [r3, #0]
 80015b8:	4b38      	ldr	r3, [pc, #224]	; (800169c <displayBuffer+0x34c>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	4b36      	ldr	r3, [pc, #216]	; (800169c <displayBuffer+0x34c>)
 80015c4:	801a      	strh	r2, [r3, #0]

store_x=(store_c*8);  // i line characters , might shrink it and use extr for other  visuals
 80015c6:	4b35      	ldr	r3, [pc, #212]	; (800169c <displayBuffer+0x34c>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	833b      	strh	r3, [r7, #24]


if (( !loop_counter3) && (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 80015ce:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <displayBuffer+0x360>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d11f      	bne.n	8001616 <displayBuffer+0x2c6>
 80015d6:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <displayBuffer+0x344>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d11b      	bne.n	8001616 <displayBuffer+0x2c6>
	for (d_count=0;d_count<7;d_count++){
 80015de:	2300      	movs	r3, #0
 80015e0:	77fb      	strb	r3, [r7, #31]
 80015e2:	e014      	b.n	800160e <displayBuffer+0x2be>
						gfx_ram[d_count+init_x2] [init_y] = gfx_char[d_count+store_x]^127; //write character to ram ,should be elsewhere , blank is correct
 80015e4:	7ffa      	ldrb	r2, [r7, #31]
 80015e6:	8b3b      	ldrh	r3, [r7, #24]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a32      	ldr	r2, [pc, #200]	; (80016b4 <displayBuffer+0x364>)
 80015ec:	5cd1      	ldrb	r1, [r2, r3]
 80015ee:	7ffa      	ldrb	r2, [r7, #31]
 80015f0:	7efb      	ldrb	r3, [r7, #27]
 80015f2:	441a      	add	r2, r3
 80015f4:	7ebb      	ldrb	r3, [r7, #26]
 80015f6:	f081 017f 	eor.w	r1, r1, #127	; 0x7f
 80015fa:	b2c8      	uxtb	r0, r1
 80015fc:	492e      	ldr	r1, [pc, #184]	; (80016b8 <displayBuffer+0x368>)
 80015fe:	0112      	lsls	r2, r2, #4
 8001600:	440a      	add	r2, r1
 8001602:	4413      	add	r3, r2
 8001604:	4602      	mov	r2, r0
 8001606:	701a      	strb	r2, [r3, #0]
	for (d_count=0;d_count<7;d_count++){
 8001608:	7ffb      	ldrb	r3, [r7, #31]
 800160a:	3301      	adds	r3, #1
 800160c:	77fb      	strb	r3, [r7, #31]
 800160e:	7ffb      	ldrb	r3, [r7, #31]
 8001610:	2b06      	cmp	r3, #6
 8001612:	d9e7      	bls.n	80015e4 <displayBuffer+0x294>
if (( !loop_counter3) && (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 8001614:	e017      	b.n	8001646 <displayBuffer+0x2f6>
	}
else for (d_count=0;d_count<7;d_count++){
 8001616:	2300      	movs	r3, #0
 8001618:	77fb      	strb	r3, [r7, #31]
 800161a:	e011      	b.n	8001640 <displayBuffer+0x2f0>
	gfx_ram[d_count+init_x2] [init_y] = gfx_char[d_count+store_x]; //write character to ram ,should be elsewhere , seems affected by later stufff
 800161c:	7ffa      	ldrb	r2, [r7, #31]
 800161e:	8b3b      	ldrh	r3, [r7, #24]
 8001620:	18d1      	adds	r1, r2, r3
 8001622:	7ffa      	ldrb	r2, [r7, #31]
 8001624:	7efb      	ldrb	r3, [r7, #27]
 8001626:	441a      	add	r2, r3
 8001628:	7ebb      	ldrb	r3, [r7, #26]
 800162a:	4822      	ldr	r0, [pc, #136]	; (80016b4 <displayBuffer+0x364>)
 800162c:	5c40      	ldrb	r0, [r0, r1]
 800162e:	4922      	ldr	r1, [pc, #136]	; (80016b8 <displayBuffer+0x368>)
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	440a      	add	r2, r1
 8001634:	4413      	add	r3, r2
 8001636:	4602      	mov	r2, r0
 8001638:	701a      	strb	r2, [r3, #0]
else for (d_count=0;d_count<7;d_count++){
 800163a:	7ffb      	ldrb	r3, [r7, #31]
 800163c:	3301      	adds	r3, #1
 800163e:	77fb      	strb	r3, [r7, #31]
 8001640:	7ffb      	ldrb	r3, [r7, #31]
 8001642:	2b06      	cmp	r3, #6
 8001644:	d9ea      	bls.n	800161c <displayBuffer+0x2cc>





gfx_ram[7+init_x2] [init_y] = 0; // last line is blank between rows or whatever
 8001646:	7efb      	ldrb	r3, [r7, #27]
 8001648:	1dda      	adds	r2, r3, #7
 800164a:	7ebb      	ldrb	r3, [r7, #26]
 800164c:	491a      	ldr	r1, [pc, #104]	; (80016b8 <displayBuffer+0x368>)
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	440a      	add	r2, r1
 8001652:	4413      	add	r3, r2
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]



if (disp_stepper==15) disp_stepper=0; else disp_stepper++;				// count to 16
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <displayBuffer+0x344>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b0f      	cmp	r3, #15
 800165e:	d103      	bne.n	8001668 <displayBuffer+0x318>
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <displayBuffer+0x344>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]

}
 8001666:	e005      	b.n	8001674 <displayBuffer+0x324>
if (disp_stepper==15) disp_stepper=0; else disp_stepper++;				// count to 16
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <displayBuffer+0x344>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	b2da      	uxtb	r2, r3
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <displayBuffer+0x344>)
 8001672:	701a      	strb	r2, [r3, #0]
}
 8001674:	bf00      	nop
 8001676:	3724      	adds	r7, #36	; 0x24
 8001678:	46bd      	mov	sp, r7
 800167a:	bcb0      	pop	{r4, r5, r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	200008e2 	.word	0x200008e2
 8001684:	20000024 	.word	0x20000024
 8001688:	20000c40 	.word	0x20000c40
 800168c:	200000f8 	.word	0x200000f8
 8001690:	200008e4 	.word	0x200008e4
 8001694:	200006e5 	.word	0x200006e5
 8001698:	20000000 	.word	0x20000000
 800169c:	20000c1c 	.word	0x20000c1c
 80016a0:	20000a68 	.word	0x20000a68
 80016a4:	20002a00 	.word	0x20002a00
 80016a8:	200008e8 	.word	0x200008e8
 80016ac:	0800ace8 	.word	0x0800ace8
 80016b0:	20002a03 	.word	0x20002a03
 80016b4:	200002c0 	.word	0x200002c0
 80016b8:	200025bc 	.word	0x200025bc
 80016bc:	00000000 	.word	0x00000000

080016c0 <sampling>:


void sampling(void){						// 18 ms of data
 80016c0:	b5b0      	push	{r4, r5, r7, lr}
 80016c2:	f5ad 5d85 	sub.w	sp, sp, #4256	; 0x10a0
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
uint8_t mask_i;
uint8_t mask_k;
uint8_t adsr_mult[5];
//adc_read();
//uint16_t isr_tempo=isrMask; // get tempo value
sample_pointB=sample_pointD;
 80016ca:	4ba7      	ldr	r3, [pc, #668]	; (8001968 <sampling+0x2a8>)
 80016cc:	881a      	ldrh	r2, [r3, #0]
 80016ce:	4ba7      	ldr	r3, [pc, #668]	; (800196c <sampling+0x2ac>)
 80016d0:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80016d8:	f102 0204 	add.w	r2, r2, #4
 80016dc:	8013      	strh	r3, [r2, #0]
static unsigned short tempo_end=0;   // last count before note start
uint16_t i_total;
uint16_t tempo_mod=tempo_lut[potSource[109]];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 80016de:	4ba4      	ldr	r3, [pc, #656]	; (8001970 <sampling+0x2b0>)
 80016e0:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80016e4:	461a      	mov	r2, r3
 80016e6:	4ba3      	ldr	r3, [pc, #652]	; (8001974 <sampling+0x2b4>)
 80016e8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80016ec:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80016f0:	f102 0214 	add.w	r2, r2, #20
 80016f4:	8013      	strh	r3, [r2, #0]

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s
float freq_temp;	// (1/(bpm/60)) /0.00045712=tempo count ie 1093.8 for 120bpm
float freq2_temp;
float freq_adder;
float tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 80016f6:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80016fa:	f103 0314 	add.w	r3, r3, #20
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	da00      	bge.n	8001706 <sampling+0x46>
 8001704:	331f      	adds	r3, #31
 8001706:	115b      	asrs	r3, r3, #5
 8001708:	461a      	mov	r2, r3
 800170a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800170e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800171e:	f103 0310 	add.w	r3, r3, #16
 8001722:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 8001726:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800172a:	f103 0310 	add.w	r3, r3, #16
 800172e:	ed93 7a00 	vldr	s14, [r3]
 8001732:	eddf 6a91 	vldr	s13, [pc, #580]	; 8001978 <sampling+0x2b8>
 8001736:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800173a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800173e:	f103 0310 	add.w	r3, r3, #16
 8001742:	edc3 7a00 	vstr	s15, [r3]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 8001746:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800174a:	f103 0308 	add.w	r3, r3, #8
 800174e:	2244      	movs	r2, #68	; 0x44
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f007 ff2e 	bl	80095b4 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 8001758:	4b88      	ldr	r3, [pc, #544]	; (800197c <sampling+0x2bc>)
 800175a:	2200      	movs	r2, #0
 800175c:	801a      	strh	r2, [r3, #0]
 800175e:	e010      	b.n	8001782 <sampling+0xc2>
 8001760:	4b86      	ldr	r3, [pc, #536]	; (800197c <sampling+0x2bc>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800176a:	f103 0308 	add.w	r3, r3, #8
 800176e:	443b      	add	r3, r7
 8001770:	2200      	movs	r2, #0
 8001772:	f843 2c80 	str.w	r2, [r3, #-128]
 8001776:	4b81      	ldr	r3, [pc, #516]	; (800197c <sampling+0x2bc>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	3301      	adds	r3, #1
 800177c:	b29a      	uxth	r2, r3
 800177e:	4b7f      	ldr	r3, [pc, #508]	; (800197c <sampling+0x2bc>)
 8001780:	801a      	strh	r2, [r3, #0]
 8001782:	4b7e      	ldr	r3, [pc, #504]	; (800197c <sampling+0x2bc>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	2b0f      	cmp	r3, #15
 8001788:	d9ea      	bls.n	8001760 <sampling+0xa0>

//lcd_out3=menu_page[1]; // still goes to 15

//lcd_out3=adc_values[0]+adc_values[1]+adc_values[2]; // 3 digit read out , works ok,, [2] works but thats it
//lcd_out3=lcd_out3+180;
potSource[150]=(lcd_out3/100)*16;  // still works
 800178a:	4b7d      	ldr	r3, [pc, #500]	; (8001980 <sampling+0x2c0>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	4a7d      	ldr	r2, [pc, #500]	; (8001984 <sampling+0x2c4>)
 8001790:	fba2 2303 	umull	r2, r3, r2, r3
 8001794:	095b      	lsrs	r3, r3, #5
 8001796:	b29b      	uxth	r3, r3
 8001798:	b2db      	uxtb	r3, r3
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4b74      	ldr	r3, [pc, #464]	; (8001970 <sampling+0x2b0>)
 80017a0:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
potSource[151]=((lcd_out3 %100)/10)*16;		 // 0-160 to 0-10
 80017a4:	4b76      	ldr	r3, [pc, #472]	; (8001980 <sampling+0x2c0>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	4a76      	ldr	r2, [pc, #472]	; (8001984 <sampling+0x2c4>)
 80017aa:	fba2 1203 	umull	r1, r2, r2, r3
 80017ae:	0952      	lsrs	r2, r2, #5
 80017b0:	2164      	movs	r1, #100	; 0x64
 80017b2:	fb01 f202 	mul.w	r2, r1, r2
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	4a73      	ldr	r2, [pc, #460]	; (8001988 <sampling+0x2c8>)
 80017bc:	fba2 2303 	umull	r2, r3, r2, r3
 80017c0:	08db      	lsrs	r3, r3, #3
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b69      	ldr	r3, [pc, #420]	; (8001970 <sampling+0x2b0>)
 80017cc:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
potSource[152]=(lcd_out3%10)*16;
 80017d0:	4b6b      	ldr	r3, [pc, #428]	; (8001980 <sampling+0x2c0>)
 80017d2:	881a      	ldrh	r2, [r3, #0]
 80017d4:	4b6c      	ldr	r3, [pc, #432]	; (8001988 <sampling+0x2c8>)
 80017d6:	fba3 1302 	umull	r1, r3, r3, r2
 80017da:	08d9      	lsrs	r1, r3, #3
 80017dc:	460b      	mov	r3, r1
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4b60      	ldr	r3, [pc, #384]	; (8001970 <sampling+0x2b0>)
 80017f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98


unsigned short  sine_zero;  // zero cross
note_holdA=0;
 80017f4:	4b65      	ldr	r3, [pc, #404]	; (800198c <sampling+0x2cc>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
//printf ("crap \n");
//printf("%d|",adc_values[0] );printf("%d|",adc_values[1] );printf("%d|",adc_values[2] );printf("%d|\n",adc_values[3] );
uint8_t note_patterns[8]={1,4,2,2,1,4,2,1,4,2,1,4,4};   // creating beats
 80017fa:	4a65      	ldr	r2, [pc, #404]	; (8001990 <sampling+0x2d0>)
 80017fc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001804:	e883 0003 	stmia.w	r3, {r0, r1}
uint8_t note_lenght=5-note_patterns[seq_pos&7] ; // note length modifier , higher faster
 8001808:	4b62      	ldr	r3, [pc, #392]	; (8001994 <sampling+0x2d4>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8001814:	f103 0308 	add.w	r3, r3, #8
 8001818:	443b      	add	r3, r7
 800181a:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 800181e:	f1c3 0305 	rsb	r3, r3, #5
 8001822:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001826:	f102 020f 	add.w	r2, r2, #15
 800182a:	7013      	strb	r3, [r2, #0]
//tempo_mod=tempo_mod-63+(lfo_out[1]>>7);
//if (tempo_mod<450) tempo_mod=((tempo_mod-200)>>1) +200; // more res lower
uint8_t note_plain;
int8_t ring_mod=0;
 800182c:	2300      	movs	r3, #0
 800182e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001832:	f102 020e 	add.w	r2, r2, #14
 8001836:	7013      	strb	r3, [r2, #0]
//sample_Accu2=0;
//printf (adc_values[0]," ",adc_values[1]," ",adc_values[2]," ","crap \n");
// some good phasin and delays here
uint8_t cross_fade[2];
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 8001838:	4b57      	ldr	r3, [pc, #348]	; (8001998 <sampling+0x2d8>)
 800183a:	f507 5480 	add.w	r4, r7, #4096	; 0x1000
 800183e:	f104 0408 	add.w	r4, r4, #8
 8001842:	461d      	mov	r5, r3
 8001844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001848:	682b      	ldr	r3, [r5, #0]
 800184a:	7023      	strb	r3, [r4, #0]

if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader
 800184c:	4b53      	ldr	r3, [pc, #332]	; (800199c <sampling+0x2dc>)
 800184e:	889b      	ldrh	r3, [r3, #4]
 8001850:	f003 0310 	and.w	r3, r3, #16
 8001854:	2b00      	cmp	r3, #0
 8001856:	d019      	beq.n	800188c <sampling+0x1cc>
 8001858:	4b50      	ldr	r3, [pc, #320]	; (800199c <sampling+0x2dc>)
 800185a:	889b      	ldrh	r3, [r3, #4]
 800185c:	f003 030f 	and.w	r3, r3, #15
 8001860:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8001864:	f103 0308 	add.w	r3, r3, #8
 8001868:	443b      	add	r3, r7
 800186a:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
 800186e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001872:	b2db      	uxtb	r3, r3
 8001874:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001878:	f102 021d 	add.w	r2, r2, #29
 800187c:	7013      	strb	r3, [r2, #0]
 800187e:	237f      	movs	r3, #127	; 0x7f
 8001880:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001884:	f102 021e 	add.w	r2, r2, #30
 8001888:	7013      	strb	r3, [r2, #0]
 800188a:	e015      	b.n	80018b8 <sampling+0x1f8>
 800188c:	4b43      	ldr	r3, [pc, #268]	; (800199c <sampling+0x2dc>)
 800188e:	889b      	ldrh	r3, [r3, #4]
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8001898:	f103 0308 	add.w	r3, r3, #8
 800189c:	443b      	add	r3, r7
 800189e:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
 80018a2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80018a6:	f102 021e 	add.w	r2, r2, #30
 80018aa:	7013      	strb	r3, [r2, #0]
 80018ac:	237f      	movs	r3, #127	; 0x7f
 80018ae:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80018b2:	f102 021d 	add.w	r2, r2, #29
 80018b6:	7013      	strb	r3, [r2, #0]

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (adsr_temp==0) {		adsr_att=(161-potSource[20] ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 80018b8:	4b39      	ldr	r3, [pc, #228]	; (80019a0 <sampling+0x2e0>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d146      	bne.n	800194e <sampling+0x28e>
 80018c0:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <sampling+0x2b0>)
 80018c2:	7d1b      	ldrb	r3, [r3, #20]
 80018c4:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe ff55 	bl	8000778 <__aeabi_i2d>
 80018ce:	a322      	add	r3, pc, #136	; (adr r3, 8001958 <sampling+0x298>)
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7fe fcd4 	bl	8000280 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	f7fe ffb4 	bl	800084c <__aeabi_d2f>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4a2f      	ldr	r2, [pc, #188]	; (80019a4 <sampling+0x2e4>)
 80018e8:	6013      	str	r3, [r2, #0]
as_sustain=((161-potSource[21])*0.01);  // length and level this is ok is running 1/16 ish				as_attack=as_attack-as_sustain;
 80018ea:	4b21      	ldr	r3, [pc, #132]	; (8001970 <sampling+0x2b0>)
 80018ec:	7d5b      	ldrb	r3, [r3, #21]
 80018ee:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe ff40 	bl	8000778 <__aeabi_i2d>
 80018f8:	a319      	add	r3, pc, #100	; (adr r3, 8001960 <sampling+0x2a0>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe fcbf 	bl	8000280 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f7fe ff9f 	bl	800084c <__aeabi_d2f>
 800190e:	4603      	mov	r3, r0
 8001910:	4a25      	ldr	r2, [pc, #148]	; (80019a8 <sampling+0x2e8>)
 8001912:	6013      	str	r3, [r2, #0]
adsr_att=adsr_att*adsr_att;
 8001914:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <sampling+0x2e4>)
 8001916:	ed93 7a00 	vldr	s14, [r3]
 800191a:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <sampling+0x2e4>)
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001924:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <sampling+0x2e4>)
 8001926:	edc3 7a00 	vstr	s15, [r3]
as_sustain=as_sustain*as_sustain;
 800192a:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <sampling+0x2e8>)
 800192c:	ed93 7a00 	vldr	s14, [r3]
 8001930:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <sampling+0x2e8>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <sampling+0x2e8>)
 800193c:	edc3 7a00 	vstr	s15, [r3]

adsr_temp=1;
 8001940:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <sampling+0x2e0>)
 8001942:	2201      	movs	r2, #1
 8001944:	701a      	strb	r2, [r3, #0]
as_attack=0;
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <sampling+0x2ec>)
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
}

float lut_temp;

for (i=0;i<256;i++) {
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <sampling+0x2bc>)
 8001950:	2200      	movs	r2, #0
 8001952:	801a      	strh	r2, [r3, #0]
 8001954:	e0fd      	b.n	8001b52 <sampling+0x492>
 8001956:	bf00      	nop
 8001958:	47ae147b 	.word	0x47ae147b
 800195c:	3f947ae1 	.word	0x3f947ae1
 8001960:	47ae147b 	.word	0x47ae147b
 8001964:	3f847ae1 	.word	0x3f847ae1
 8001968:	2000144a 	.word	0x2000144a
 800196c:	20000c3e 	.word	0x20000c3e
 8001970:	20000a68 	.word	0x20000a68
 8001974:	20002478 	.word	0x20002478
 8001978:	42a00000 	.word	0x42a00000
 800197c:	20000c40 	.word	0x20000c40
 8001980:	20002a00 	.word	0x20002a00
 8001984:	51eb851f 	.word	0x51eb851f
 8001988:	cccccccd 	.word	0xcccccccd
 800198c:	200020b7 	.word	0x200020b7
 8001990:	0800a7a4 	.word	0x0800a7a4
 8001994:	20000c18 	.word	0x20000c18
 8001998:	0800a7ac 	.word	0x0800a7ac
 800199c:	200002b4 	.word	0x200002b4
 80019a0:	20002090 	.word	0x20002090
 80019a4:	200029f0 	.word	0x200029f0
 80019a8:	200029ec 	.word	0x200029ec
 80019ac:	200029e8 	.word	0x200029e8

	if     (as_attack<1000)    																		{as_attack=as_attack+adsr_att;					lut_temp=as_attack; } //0-1000
 80019b0:	4b8d      	ldr	r3, [pc, #564]	; (8001be8 <sampling+0x528>)
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8001bec <sampling+0x52c>
 80019ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c2:	d511      	bpl.n	80019e8 <sampling+0x328>
 80019c4:	4b88      	ldr	r3, [pc, #544]	; (8001be8 <sampling+0x528>)
 80019c6:	ed93 7a00 	vldr	s14, [r3]
 80019ca:	4b89      	ldr	r3, [pc, #548]	; (8001bf0 <sampling+0x530>)
 80019cc:	edd3 7a00 	vldr	s15, [r3]
 80019d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d4:	4b84      	ldr	r3, [pc, #528]	; (8001be8 <sampling+0x528>)
 80019d6:	edc3 7a00 	vstr	s15, [r3]
 80019da:	4b83      	ldr	r3, [pc, #524]	; (8001be8 <sampling+0x528>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80019e2:	f102 021c 	add.w	r2, r2, #28
 80019e6:	6013      	str	r3, [r2, #0]
	 if  ((as_attack<1500)  && (as_attack>999))  										{as_attack=as_attack+adsr_att;					lut_temp=1500-(as_attack-500);  }  // 1000-500
 80019e8:	4b7f      	ldr	r3, [pc, #508]	; (8001be8 <sampling+0x528>)
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001bf4 <sampling+0x534>
 80019f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fa:	d525      	bpl.n	8001a48 <sampling+0x388>
 80019fc:	4b7a      	ldr	r3, [pc, #488]	; (8001be8 <sampling+0x528>)
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001bf8 <sampling+0x538>
 8001a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0e:	dd1b      	ble.n	8001a48 <sampling+0x388>
 8001a10:	4b75      	ldr	r3, [pc, #468]	; (8001be8 <sampling+0x528>)
 8001a12:	ed93 7a00 	vldr	s14, [r3]
 8001a16:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <sampling+0x530>)
 8001a18:	edd3 7a00 	vldr	s15, [r3]
 8001a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a20:	4b71      	ldr	r3, [pc, #452]	; (8001be8 <sampling+0x528>)
 8001a22:	edc3 7a00 	vstr	s15, [r3]
 8001a26:	4b70      	ldr	r3, [pc, #448]	; (8001be8 <sampling+0x528>)
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001bfc <sampling+0x53c>
 8001a30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a34:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001bf4 <sampling+0x534>
 8001a38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a3c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001a40:	f103 031c 	add.w	r3, r3, #28
 8001a44:	edc3 7a00 	vstr	s15, [r3]
	 if ((as_attack>1499)   && 		(as_attack<2000)) 																{		lut_temp=500; 	as_attack=as_attack+as_sustain;}
 8001a48:	4b67      	ldr	r3, [pc, #412]	; (8001be8 <sampling+0x528>)
 8001a4a:	edd3 7a00 	vldr	s15, [r3]
 8001a4e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001c00 <sampling+0x540>
 8001a52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5a:	dd1a      	ble.n	8001a92 <sampling+0x3d2>
 8001a5c:	4b62      	ldr	r3, [pc, #392]	; (8001be8 <sampling+0x528>)
 8001a5e:	edd3 7a00 	vldr	s15, [r3]
 8001a62:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001c04 <sampling+0x544>
 8001a66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6e:	d510      	bpl.n	8001a92 <sampling+0x3d2>
 8001a70:	4b65      	ldr	r3, [pc, #404]	; (8001c08 <sampling+0x548>)
 8001a72:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001a76:	f102 021c 	add.w	r2, r2, #28
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b5a      	ldr	r3, [pc, #360]	; (8001be8 <sampling+0x528>)
 8001a7e:	ed93 7a00 	vldr	s14, [r3]
 8001a82:	4b62      	ldr	r3, [pc, #392]	; (8001c0c <sampling+0x54c>)
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8c:	4b56      	ldr	r3, [pc, #344]	; (8001be8 <sampling+0x528>)
 8001a8e:	edc3 7a00 	vstr	s15, [r3]
	if ((as_attack>1999)  &&  (as_attack<2500)	)																							{as_attack=as_attack+as_sustain	;	lut_temp=2500-as_attack; } //500-0;
 8001a92:	4b55      	ldr	r3, [pc, #340]	; (8001be8 <sampling+0x528>)
 8001a94:	edd3 7a00 	vldr	s15, [r3]
 8001a98:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001c10 <sampling+0x550>
 8001a9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa4:	dd21      	ble.n	8001aea <sampling+0x42a>
 8001aa6:	4b50      	ldr	r3, [pc, #320]	; (8001be8 <sampling+0x528>)
 8001aa8:	edd3 7a00 	vldr	s15, [r3]
 8001aac:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001c14 <sampling+0x554>
 8001ab0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab8:	d517      	bpl.n	8001aea <sampling+0x42a>
 8001aba:	4b4b      	ldr	r3, [pc, #300]	; (8001be8 <sampling+0x528>)
 8001abc:	ed93 7a00 	vldr	s14, [r3]
 8001ac0:	4b52      	ldr	r3, [pc, #328]	; (8001c0c <sampling+0x54c>)
 8001ac2:	edd3 7a00 	vldr	s15, [r3]
 8001ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aca:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <sampling+0x528>)
 8001acc:	edc3 7a00 	vstr	s15, [r3]
 8001ad0:	4b45      	ldr	r3, [pc, #276]	; (8001be8 <sampling+0x528>)
 8001ad2:	edd3 7a00 	vldr	s15, [r3]
 8001ad6:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001c14 <sampling+0x554>
 8001ada:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ade:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001ae2:	f103 031c 	add.w	r3, r3, #28
 8001ae6:	edc3 7a00 	vstr	s15, [r3]
	if (as_attack>3000)   																																			{lut_temp=1; as_attack=4000; }     // THE END
 8001aea:	4b3f      	ldr	r3, [pc, #252]	; (8001be8 <sampling+0x528>)
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001c18 <sampling+0x558>
 8001af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afc:	dd09      	ble.n	8001b12 <sampling+0x452>
 8001afe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b02:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001b06:	f102 021c 	add.w	r2, r2, #28
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <sampling+0x528>)
 8001b0e:	4a43      	ldr	r2, [pc, #268]	; (8001c1c <sampling+0x55c>)
 8001b10:	601a      	str	r2, [r3, #0]

adsr_lut[i]= lut_temp*0.001;
 8001b12:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001b16:	f103 031c 	add.w	r3, r3, #28
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	f7fe fe3e 	bl	800079c <__aeabi_f2d>
 8001b20:	a32f      	add	r3, pc, #188	; (adr r3, 8001be0 <sampling+0x520>)
 8001b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b26:	f7fe fbab 	bl	8000280 <__aeabi_dmul>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	493c      	ldr	r1, [pc, #240]	; (8001c20 <sampling+0x560>)
 8001b30:	8809      	ldrh	r1, [r1, #0]
 8001b32:	460c      	mov	r4, r1
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	f7fe fe88 	bl	800084c <__aeabi_d2f>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4939      	ldr	r1, [pc, #228]	; (8001c24 <sampling+0x564>)
 8001b40:	00a3      	lsls	r3, r4, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	601a      	str	r2, [r3, #0]
for (i=0;i<256;i++) {
 8001b46:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <sampling+0x560>)
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <sampling+0x560>)
 8001b50:	801a      	strh	r2, [r3, #0]
 8001b52:	4b33      	ldr	r3, [pc, #204]	; (8001c20 <sampling+0x560>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	2bff      	cmp	r3, #255	; 0xff
 8001b58:	f67f af2a 	bls.w	80019b0 <sampling+0x2f0>
}


///////////////////////////////////////////////////////////////

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8001b5c:	4b30      	ldr	r3, [pc, #192]	; (8001c20 <sampling+0x560>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	801a      	strh	r2, [r3, #0]
 8001b62:	e357      	b.n	8002214 <sampling+0xb54>

	i_total=i+sample_pointB;
 8001b64:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <sampling+0x560>)
 8001b66:	881a      	ldrh	r2, [r3, #0]
 8001b68:	4b2f      	ldr	r3, [pc, #188]	; (8001c28 <sampling+0x568>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001b72:	f102 0202 	add.w	r2, r2, #2
 8001b76:	8013      	strh	r3, [r2, #0]
	i_frac=i>>6;
 8001b78:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <sampling+0x560>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	099b      	lsrs	r3, r3, #6
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <sampling+0x56c>)
 8001b84:	701a      	strb	r2, [r3, #0]
	note_plain=potValues[seq_pos & 7 ];
 8001b86:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <sampling+0x570>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	4a29      	ldr	r2, [pc, #164]	; (8001c34 <sampling+0x574>)
 8001b90:	5cd3      	ldrb	r3, [r2, r3]
 8001b92:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001b96:	f102 021f 	add.w	r2, r2, #31
 8001b9a:	7013      	strb	r3, [r2, #0]
potValues[i&255]=potSource[i&255]>>4; //just to update values
 8001b9c:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <sampling+0x560>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	4a25      	ldr	r2, [pc, #148]	; (8001c38 <sampling+0x578>)
 8001ba4:	5cd2      	ldrb	r2, [r2, r3]
 8001ba6:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <sampling+0x560>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	0912      	lsrs	r2, r2, #4
 8001bae:	b2d1      	uxtb	r1, r2
 8001bb0:	4a20      	ldr	r2, [pc, #128]	; (8001c34 <sampling+0x574>)
 8001bb2:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 8001bb4:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <sampling+0x57c>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001bbc:	f102 0214 	add.w	r2, r2, #20
 8001bc0:	8812      	ldrh	r2, [r2, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d83e      	bhi.n	8001c44 <sampling+0x584>
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <sampling+0x580>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <sampling+0x580>)
 8001bd6:	801a      	strh	r2, [r3, #0]
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <sampling+0x57c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	801a      	strh	r2, [r3, #0]
 8001bde:	e037      	b.n	8001c50 <sampling+0x590>
 8001be0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001be4:	3f50624d 	.word	0x3f50624d
 8001be8:	200029e8 	.word	0x200029e8
 8001bec:	447a0000 	.word	0x447a0000
 8001bf0:	200029f0 	.word	0x200029f0
 8001bf4:	44bb8000 	.word	0x44bb8000
 8001bf8:	4479c000 	.word	0x4479c000
 8001bfc:	43fa0000 	.word	0x43fa0000
 8001c00:	44bb6000 	.word	0x44bb6000
 8001c04:	44fa0000 	.word	0x44fa0000
 8001c08:	43fa0000 	.word	0x43fa0000
 8001c0c:	200029ec 	.word	0x200029ec
 8001c10:	44f9e000 	.word	0x44f9e000
 8001c14:	451c4000 	.word	0x451c4000
 8001c18:	453b8000 	.word	0x453b8000
 8001c1c:	457a0000 	.word	0x457a0000
 8001c20:	20000c40 	.word	0x20000c40
 8001c24:	20001c90 	.word	0x20001c90
 8001c28:	20000c3e 	.word	0x20000c3e
 8001c2c:	2000221c 	.word	0x2000221c
 8001c30:	20000c18 	.word	0x20000c18
 8001c34:	200008e8 	.word	0x200008e8
 8001c38:	20000a68 	.word	0x20000a68
 8001c3c:	200020fe 	.word	0x200020fe
 8001c40:	200020aa 	.word	0x200020aa
 8001c44:	4b7e      	ldr	r3, [pc, #504]	; (8001e40 <sampling+0x780>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	4b7c      	ldr	r3, [pc, #496]	; (8001e40 <sampling+0x780>)
 8001c4e:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001c56:	f102 0204 	add.w	r2, r2, #4
 8001c5a:	8013      	strh	r3, [r2, #0]
	if ((next_isr>>4) != (seq_pos)) { 					// next note step 140ms
 8001c5c:	4b79      	ldr	r3, [pc, #484]	; (8001e44 <sampling+0x784>)
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	4b78      	ldr	r3, [pc, #480]	; (8001e48 <sampling+0x788>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d00c      	beq.n	8001c88 <sampling+0x5c8>
		seq_pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8001c6e:	4b75      	ldr	r3, [pc, #468]	; (8001e44 <sampling+0x784>)
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	4b73      	ldr	r3, [pc, #460]	; (8001e48 <sampling+0x788>)
 8001c7a:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001c82:	f102 0204 	add.w	r2, r2, #4
 8001c86:	8013      	strh	r3, [r2, #0]
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq_pos somehow  , only activates when change in seq pos
 8001c88:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001c8c:	f103 0304 	add.w	r3, r3, #4
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 8131 	beq.w	8001efa <sampling+0x83a>
	{
	//printf("\n");//	ITM_SendChar( 65 );   //  Send ASCII code 65 = ’A’
	//printf("%d" ,note_channel[10]);


		potValues[32]=(adc_values[0]>>2)&15; //assigned pots to start of loopers 0-16,works
 8001c98:	4b6c      	ldr	r3, [pc, #432]	; (8001e4c <sampling+0x78c>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	4b69      	ldr	r3, [pc, #420]	; (8001e50 <sampling+0x790>)
 8001caa:	f883 2020 	strb.w	r2, [r3, #32]
		potValues[33]=(adc_values[1]>>2)&15;
 8001cae:	4b67      	ldr	r3, [pc, #412]	; (8001e4c <sampling+0x78c>)
 8001cb0:	885b      	ldrh	r3, [r3, #2]
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b64      	ldr	r3, [pc, #400]	; (8001e50 <sampling+0x790>)
 8001cc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


		seq_loop[2]=((potValues[32]+(seq_pos&7))&15); // calc  8 note loop positions sets looping point in sequence
 8001cc4:	4b62      	ldr	r3, [pc, #392]	; (8001e50 <sampling+0x790>)
 8001cc6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001cca:	4b5f      	ldr	r3, [pc, #380]	; (8001e48 <sampling+0x788>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4b5d      	ldr	r3, [pc, #372]	; (8001e54 <sampling+0x794>)
 8001ce0:	709a      	strb	r2, [r3, #2]

		//seq_loop[3]=(potValues[33]+(( seq_pos&31 ) >>2)) & 15;  // quater speed
			seq_loop[3]=((potValues[33]+(seq_pos&15))&15); //sets looping point in sequence this is full 16 note
 8001ce2:	4b5b      	ldr	r3, [pc, #364]	; (8001e50 <sampling+0x790>)
 8001ce4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001ce8:	4b57      	ldr	r3, [pc, #348]	; (8001e48 <sampling+0x788>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4413      	add	r3, r2
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f003 030f 	and.w	r3, r3, #15
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4b57      	ldr	r3, [pc, #348]	; (8001e54 <sampling+0x794>)
 8001cf8:	70da      	strb	r2, [r3, #3]

			seq_loop[4]=((potValues[32]+(seq_pos&7))&15);
 8001cfa:	4b55      	ldr	r3, [pc, #340]	; (8001e50 <sampling+0x790>)
 8001cfc:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001d00:	4b51      	ldr	r3, [pc, #324]	; (8001e48 <sampling+0x788>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	4b4f      	ldr	r3, [pc, #316]	; (8001e54 <sampling+0x794>)
 8001d16:	711a      	strb	r2, [r3, #4]

		//seq_loop[4]=((potValues[32]+((seq_pos&15)>>1))&15); // half speed

		note_channel[2]=potValues[80+seq_loop[2]]+potValues[72];  //loop 8 notes from pos and x times
 8001d18:	4b4e      	ldr	r3, [pc, #312]	; (8001e54 <sampling+0x794>)
 8001d1a:	789b      	ldrb	r3, [r3, #2]
 8001d1c:	3350      	adds	r3, #80	; 0x50
 8001d1e:	4a4c      	ldr	r2, [pc, #304]	; (8001e50 <sampling+0x790>)
 8001d20:	5cd3      	ldrb	r3, [r2, r3]
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	4b4a      	ldr	r3, [pc, #296]	; (8001e50 <sampling+0x790>)
 8001d26:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	4b49      	ldr	r3, [pc, #292]	; (8001e58 <sampling+0x798>)
 8001d32:	809a      	strh	r2, [r3, #4]
		note_channel[3]=potValues[seq_loop[3]];  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8001d34:	4b47      	ldr	r3, [pc, #284]	; (8001e54 <sampling+0x794>)
 8001d36:	78db      	ldrb	r3, [r3, #3]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b45      	ldr	r3, [pc, #276]	; (8001e50 <sampling+0x790>)
 8001d3c:	5c9b      	ldrb	r3, [r3, r2]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	4b45      	ldr	r3, [pc, #276]	; (8001e58 <sampling+0x798>)
 8001d42:	80da      	strh	r2, [r3, #6]
	if (note_channel[3]) 		{note_channel[3]=note_channel[3]+potValues[73];	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off
 8001d44:	4b44      	ldr	r3, [pc, #272]	; (8001e58 <sampling+0x798>)
 8001d46:	88db      	ldrh	r3, [r3, #6]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01e      	beq.n	8001d8a <sampling+0x6ca>
 8001d4c:	4b42      	ldr	r3, [pc, #264]	; (8001e58 <sampling+0x798>)
 8001d4e:	88da      	ldrh	r2, [r3, #6]
 8001d50:	4b3f      	ldr	r3, [pc, #252]	; (8001e50 <sampling+0x790>)
 8001d52:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	4413      	add	r3, r2
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	4b3e      	ldr	r3, [pc, #248]	; (8001e58 <sampling+0x798>)
 8001d5e:	80da      	strh	r2, [r3, #6]
 8001d60:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <sampling+0x79c>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	80da      	strh	r2, [r3, #6]
 8001d66:	4b3e      	ldr	r3, [pc, #248]	; (8001e60 <sampling+0x7a0>)
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	2201      	movs	r2, #1
 8001d70:	409a      	lsls	r2, r3
 8001d72:	4b3b      	ldr	r3, [pc, #236]	; (8001e60 <sampling+0x7a0>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8001d80:	f103 0308 	add.w	r3, r3, #8
 8001d84:	443b      	add	r3, r7
 8001d86:	f843 2c80 	str.w	r2, [r3, #-128]
	//note_channel[3]=(note_channel[3]-4)+(lfo_out[2]>>11);

	//if (((seq_pos&7)==0) && (adsr_toggle[6]==2))		{adsr_retrigger[6]=1; } else adsr_retrigger[6]=0; // delete


	note_channel[5]=potValues[80+(seq_pos&15)];  // sample
 8001d8a:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <sampling+0x788>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	3350      	adds	r3, #80	; 0x50
 8001d94:	4a2e      	ldr	r2, [pc, #184]	; (8001e50 <sampling+0x790>)
 8001d96:	5cd3      	ldrb	r3, [r2, r3]
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <sampling+0x798>)
 8001d9c:	815a      	strh	r2, [r3, #10]


	if ((note_channel[5]) && (adsr_toggle[5]==2)) {note_holdB=note_channel[5]; one_shot=0;}  // grab note when on ,one shot also , also delete
 8001d9e:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <sampling+0x798>)
 8001da0:	895b      	ldrh	r3, [r3, #10]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00b      	beq.n	8001dbe <sampling+0x6fe>
 8001da6:	4b2f      	ldr	r3, [pc, #188]	; (8001e64 <sampling+0x7a4>)
 8001da8:	795b      	ldrb	r3, [r3, #5]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d107      	bne.n	8001dbe <sampling+0x6fe>
 8001dae:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <sampling+0x798>)
 8001db0:	895b      	ldrh	r3, [r3, #10]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	4b2c      	ldr	r3, [pc, #176]	; (8001e68 <sampling+0x7a8>)
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <sampling+0x7ac>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]


	note_holdB=potValues[80+seq_loop[2]]+(potValues[74]);  //
 8001dbe:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <sampling+0x794>)
 8001dc0:	789b      	ldrb	r3, [r3, #2]
 8001dc2:	3350      	adds	r3, #80	; 0x50
 8001dc4:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <sampling+0x790>)
 8001dc6:	5cd2      	ldrb	r2, [r2, r3]
 8001dc8:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <sampling+0x790>)
 8001dca:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001dce:	4413      	add	r3, r2
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <sampling+0x7a8>)
 8001dd4:	701a      	strb	r2, [r3, #0]

	note_holdB=(note_holdB-4)+(lfo_out[2][i_frac]>>11);  //no go with float
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <sampling+0x7b0>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	4a26      	ldr	r2, [pc, #152]	; (8001e74 <sampling+0x7b4>)
 8001ddc:	3314      	adds	r3, #20
 8001dde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001de2:	0adb      	lsrs	r3, r3, #11
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <sampling+0x7a8>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4413      	add	r3, r2
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	3b04      	subs	r3, #4
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <sampling+0x7a8>)
 8001df6:	701a      	strb	r2, [r3, #0]



	note_holdB=MajorNote[note_holdB];
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <sampling+0x7a8>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <sampling+0x7b8>)
 8001e00:	5c9a      	ldrb	r2, [r3, r2]
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <sampling+0x7a8>)
 8001e04:	701a      	strb	r2, [r3, #0]

	sine_adder=sine_lut[note_holdB];	//sets freq ,1.0594  * 16536 =17518  ,
 8001e06:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <sampling+0x7a8>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <sampling+0x7bc>)
 8001e0e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001e12:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <sampling+0x7c0>)
 8001e14:	801a      	strh	r2, [r3, #0]
	sine_adder= (sine_adder*1200)>>10;  // modify different sample size , just need single cycle length and thats it
 8001e16:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <sampling+0x7c0>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001e20:	fb02 f303 	mul.w	r3, r2, r3
 8001e24:	129b      	asrs	r3, r3, #10
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <sampling+0x7c0>)
 8001e2a:	801a      	strh	r2, [r3, #0]
		mask_result =0;
 8001e2c:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <sampling+0x7c4>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	801a      	strh	r2, [r3, #0]
		sample_Accu[3]=0; // reset to 0 mani sample hold
		sample_Accu[4]=0; // reset to 0 mani sample hold
		sample_Accu[5]=0; // reset to 0 mani sample hold
*/

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8001e32:	2300      	movs	r3, #0
 8001e34:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001e38:	f102 0207 	add.w	r2, r2, #7
 8001e3c:	7013      	strb	r3, [r2, #0]
 8001e3e:	e055      	b.n	8001eec <sampling+0x82c>
 8001e40:	200020fe 	.word	0x200020fe
 8001e44:	200020aa 	.word	0x200020aa
 8001e48:	20000c18 	.word	0x20000c18
 8001e4c:	200002b4 	.word	0x200002b4
 8001e50:	200008e8 	.word	0x200008e8
 8001e54:	20002124 	.word	0x20002124
 8001e58:	2000144c 	.word	0x2000144c
 8001e5c:	20002094 	.word	0x20002094
 8001e60:	20000c40 	.word	0x20000c40
 8001e64:	200020ac 	.word	0x200020ac
 8001e68:	200020b8 	.word	0x200020b8
 8001e6c:	200020f0 	.word	0x200020f0
 8001e70:	2000221c 	.word	0x2000221c
 8001e74:	200023b0 	.word	0x200023b0
 8001e78:	0800a7fc 	.word	0x0800a7fc
 8001e7c:	20000250 	.word	0x20000250
 8001e80:	20000c1a 	.word	0x20000c1a
 8001e84:	2000148a 	.word	0x2000148a

		if (note_channel[mask_i]) {tune_Accu=sample_Noteadd[MajorNote[note_channel[mask_i]]];   note_tuned[mask_i]=(tune_Accu);       } // relies on note channel clear , not good , clear not channel straight after
 8001e88:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001e8c:	f103 0307 	add.w	r3, r3, #7
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	4a60      	ldr	r2, [pc, #384]	; (8002014 <sampling+0x954>)
 8001e94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d01c      	beq.n	8001ed6 <sampling+0x816>
 8001e9c:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001ea0:	f103 0307 	add.w	r3, r3, #7
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	4a5b      	ldr	r2, [pc, #364]	; (8002014 <sampling+0x954>)
 8001ea8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b5a      	ldr	r3, [pc, #360]	; (8002018 <sampling+0x958>)
 8001eb0:	5c9b      	ldrb	r3, [r3, r2]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4b59      	ldr	r3, [pc, #356]	; (800201c <sampling+0x95c>)
 8001eb6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	4b58      	ldr	r3, [pc, #352]	; (8002020 <sampling+0x960>)
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	4b57      	ldr	r3, [pc, #348]	; (8002020 <sampling+0x960>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001ec8:	f103 0307 	add.w	r3, r3, #7
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	b291      	uxth	r1, r2
 8001ed0:	4a54      	ldr	r2, [pc, #336]	; (8002024 <sampling+0x964>)
 8001ed2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8001ed6:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001eda:	f103 0307 	add.w	r3, r3, #7
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001ee6:	f102 0207 	add.w	r2, r2, #7
 8001eea:	7013      	strb	r3, [r2, #0]
 8001eec:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001ef0:	f103 0307 	add.w	r3, r3, #7
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d9c6      	bls.n	8001e88 <sampling+0x7c8>

  // calc freq 1/isr or 1/16 per note ,need for pitch bend and so on , change depending on decay

// lfo section

	if ((i&63)==0) {   // calculate lfo maybe 8 times for now , seems to fill up
 8001efa:	4b4b      	ldr	r3, [pc, #300]	; (8002028 <sampling+0x968>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f040 8180 	bne.w	8002208 <sampling+0xb48>
freq_temp=0;
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001f10:	f102 0218 	add.w	r2, r2, #24
 8001f14:	6013      	str	r3, [r2, #0]
freq2_temp=0;
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001f1e:	f102 0214 	add.w	r2, r2, #20
 8001f22:	6013      	str	r3, [r2, #0]

//uint8_t i_frac2=(i_frac+7)&7;  //previous value can change shape  , not  bad effect

		for (l=0;l<10;l++){   //current lfo setup , messy
 8001f24:	2300      	movs	r3, #0
 8001f26:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001f2a:	f102 0203 	add.w	r2, r2, #3
 8001f2e:	7013      	strb	r3, [r2, #0]
 8001f30:	e128      	b.n	8002184 <sampling+0xac4>

			freq_temp=potSource[130+l];
 8001f32:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001f36:	f103 0303 	add.w	r3, r3, #3
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	3382      	adds	r3, #130	; 0x82
 8001f3e:	4a3b      	ldr	r2, [pc, #236]	; (800202c <sampling+0x96c>)
 8001f40:	5cd3      	ldrb	r3, [r2, r3]
 8001f42:	ee07 3a90 	vmov	s15, r3
 8001f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f4a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f4e:	f103 0318 	add.w	r3, r3, #24
 8001f52:	edc3 7a00 	vstr	s15, [r3]
			freq2_temp=freq_temp*tempo_sync ; //correction to one note per cycle ,fixed , maybe loose this
 8001f56:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f5a:	f103 0318 	add.w	r3, r3, #24
 8001f5e:	ed93 7a00 	vldr	s14, [r3]
 8001f62:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001f66:	f103 0310 	add.w	r3, r3, #16
 8001f6a:	edd3 7a00 	vldr	s15, [r3]
 8001f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f72:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f76:	f103 0314 	add.w	r3, r3, #20
 8001f7a:	edc3 7a00 	vstr	s15, [r3]

			freq_temp=lfo_accu[l][i_frac]+ freq2_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8001f7e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001f82:	f103 0303 	add.w	r3, r3, #3
 8001f86:	781a      	ldrb	r2, [r3, #0]
 8001f88:	4b29      	ldr	r3, [pc, #164]	; (8002030 <sampling+0x970>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	4929      	ldr	r1, [pc, #164]	; (8002034 <sampling+0x974>)
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4403      	add	r3, r0
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	edd3 7a00 	vldr	s15, [r3]
 8001fa2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001fa6:	f103 0314 	add.w	r3, r3, #20
 8001faa:	ed93 7a00 	vldr	s14, [r3]
 8001fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001fb6:	f103 0318 	add.w	r3, r3, #24
 8001fba:	edc3 7a00 	vstr	s15, [r3]


//			if ((tempo_count<50) && ((next_isr&15)==15)) freq_temp=0;   // trying retrigger
		if (freq_temp>16384) lfo_accu[l][i_frac]=freq_temp-16384; else lfo_accu[l][i_frac]=freq_temp; // write back value
 8001fbe:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001fc2:	f103 0318 	add.w	r3, r3, #24
 8001fc6:	edd3 7a00 	vldr	s15, [r3]
 8001fca:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002038 <sampling+0x978>
 8001fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd6:	dd31      	ble.n	800203c <sampling+0x97c>
 8001fd8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001fdc:	f103 0303 	add.w	r3, r3, #3
 8001fe0:	781a      	ldrb	r2, [r3, #0]
 8001fe2:	4b13      	ldr	r3, [pc, #76]	; (8002030 <sampling+0x970>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001fec:	f103 0318 	add.w	r3, r3, #24
 8001ff0:	edd3 7a00 	vldr	s15, [r3]
 8001ff4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002038 <sampling+0x978>
 8001ff8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ffc:	490d      	ldr	r1, [pc, #52]	; (8002034 <sampling+0x974>)
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4403      	add	r3, r0
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	edc3 7a00 	vstr	s15, [r3]
 8002010:	e02a      	b.n	8002068 <sampling+0x9a8>
 8002012:	bf00      	nop
 8002014:	2000144c 	.word	0x2000144c
 8002018:	0800a7fc 	.word	0x0800a7fc
 800201c:	0800a818 	.word	0x0800a818
 8002020:	20000c14 	.word	0x20000c14
 8002024:	20000bfc 	.word	0x20000bfc
 8002028:	20000c40 	.word	0x20000c40
 800202c:	20000a68 	.word	0x20000a68
 8002030:	2000221c 	.word	0x2000221c
 8002034:	20002220 	.word	0x20002220
 8002038:	46800000 	.word	0x46800000
 800203c:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002040:	f103 0303 	add.w	r3, r3, #3
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	4b7c      	ldr	r3, [pc, #496]	; (8002238 <sampling+0xb78>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	497b      	ldr	r1, [pc, #492]	; (800223c <sampling+0xb7c>)
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4403      	add	r3, r0
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002060:	f102 0218 	add.w	r2, r2, #24
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	601a      	str	r2, [r3, #0]
		freq_temp=lfo_accu[l][i_frac]; // 0-255 limit + above zero
 8002068:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800206c:	f103 0303 	add.w	r3, r3, #3
 8002070:	781a      	ldrb	r2, [r3, #0]
 8002072:	4b71      	ldr	r3, [pc, #452]	; (8002238 <sampling+0xb78>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	4970      	ldr	r1, [pc, #448]	; (800223c <sampling+0xb7c>)
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4403      	add	r3, r0
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800208e:	f102 0218 	add.w	r2, r2, #24
 8002092:	6013      	str	r3, [r2, #0]
		freq_temp=freq_temp*0.000383495;  // 0-255 , chang this for depth
 8002094:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002098:	f103 0318 	add.w	r3, r3, #24
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	f7fe fb7d 	bl	800079c <__aeabi_f2d>
 80020a2:	a361      	add	r3, pc, #388	; (adr r3, 8002228 <sampling+0xb68>)
 80020a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a8:	f7fe f8ea 	bl	8000280 <__aeabi_dmul>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	f7fe fbca 	bl	800084c <__aeabi_d2f>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80020be:	f102 0218 	add.w	r2, r2, #24
 80020c2:	6013      	str	r3, [r2, #0]
		freq2_temp =arm_sin_f32(freq_temp); // seems to be working ok till here , not doing right here now
 80020c4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020c8:	f103 0318 	add.w	r3, r3, #24
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	f7fe fb65 	bl	800079c <__aeabi_f2d>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	ec43 2b10 	vmov	d0, r2, r3
 80020da:	f007 f9ef 	bl	80094bc <arm_sin_f32>
 80020de:	ee07 0a90 	vmov	s15, r0
 80020e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020ea:	f103 0314 	add.w	r3, r3, #20
 80020ee:	edc3 7a00 	vstr	s15, [r3]
		freq_temp=freq2_temp*potSource[140+l]*51;   // not working  proper something with angles i think
 80020f2:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80020f6:	f103 0303 	add.w	r3, r3, #3
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	338c      	adds	r3, #140	; 0x8c
 80020fe:	4a50      	ldr	r2, [pc, #320]	; (8002240 <sampling+0xb80>)
 8002100:	5cd3      	ldrb	r3, [r2, r3]
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800210a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800210e:	f103 0314 	add.w	r3, r3, #20
 8002112:	edd3 7a00 	vldr	s15, [r3]
 8002116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211a:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002244 <sampling+0xb84>
 800211e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002122:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002126:	f103 0318 	add.w	r3, r3, #24
 800212a:	edc3 7a00 	vstr	s15, [r3]

		lfo_out[l] [i_frac]=freq_temp+8195; // ok now
 800212e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002132:	f103 0318 	add.w	r3, r3, #24
 8002136:	edd3 7a00 	vldr	s15, [r3]
 800213a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002248 <sampling+0xb88>
 800213e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002142:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002146:	f103 0303 	add.w	r3, r3, #3
 800214a:	781a      	ldrb	r2, [r3, #0]
 800214c:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <sampling+0xb78>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	461c      	mov	r4, r3
 8002152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002156:	ee17 3a90 	vmov	r3, s15
 800215a:	b298      	uxth	r0, r3
 800215c:	493b      	ldr	r1, [pc, #236]	; (800224c <sampling+0xb8c>)
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4423      	add	r3, r4
 8002168:	4602      	mov	r2, r0
 800216a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (l=0;l<10;l++){   //current lfo setup , messy
 800216e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002172:	f103 0303 	add.w	r3, r3, #3
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	3301      	adds	r3, #1
 800217a:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800217e:	f102 0203 	add.w	r2, r2, #3
 8002182:	7013      	strb	r3, [r2, #0]
 8002184:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002188:	f103 0303 	add.w	r3, r3, #3
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b09      	cmp	r3, #9
 8002190:	f67f aecf 	bls.w	8001f32 <sampling+0x872>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch


			freq_pointer[0] [i_frac]=lfo_out [0][i_frac]*0.00006435; // problem was selecting accu instead of out , good now
 8002194:	4b28      	ldr	r3, [pc, #160]	; (8002238 <sampling+0xb78>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	4b2c      	ldr	r3, [pc, #176]	; (800224c <sampling+0xb8c>)
 800219c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe fae9 	bl	8000778 <__aeabi_i2d>
 80021a6:	a322      	add	r3, pc, #136	; (adr r3, 8002230 <sampling+0xb70>)
 80021a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ac:	f7fe f868 	bl	8000280 <__aeabi_dmul>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4920      	ldr	r1, [pc, #128]	; (8002238 <sampling+0xb78>)
 80021b6:	7809      	ldrb	r1, [r1, #0]
 80021b8:	460c      	mov	r4, r1
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	f7fe fb45 	bl	800084c <__aeabi_d2f>
 80021c2:	4602      	mov	r2, r0
 80021c4:	4922      	ldr	r1, [pc, #136]	; (8002250 <sampling+0xb90>)
 80021c6:	00a3      	lsls	r3, r4, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	601a      	str	r2, [r3, #0]
		freq_pointer[2] [i_frac] =lfo_out [3][i_frac]*0.00006435;; // filter lfos
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <sampling+0xb78>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4a1e      	ldr	r2, [pc, #120]	; (800224c <sampling+0xb8c>)
 80021d2:	331e      	adds	r3, #30
 80021d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe facd 	bl	8000778 <__aeabi_i2d>
 80021de:	a314      	add	r3, pc, #80	; (adr r3, 8002230 <sampling+0xb70>)
 80021e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e4:	f7fe f84c 	bl	8000280 <__aeabi_dmul>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4912      	ldr	r1, [pc, #72]	; (8002238 <sampling+0xb78>)
 80021ee:	7809      	ldrb	r1, [r1, #0]
 80021f0:	460c      	mov	r4, r1
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	f7fe fb29 	bl	800084c <__aeabi_d2f>
 80021fa:	4602      	mov	r2, r0
 80021fc:	4914      	ldr	r1, [pc, #80]	; (8002250 <sampling+0xb90>)
 80021fe:	f104 0312 	add.w	r3, r4, #18
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	601a      	str	r2, [r3, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <sampling+0xb94>)
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	3301      	adds	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	4b10      	ldr	r3, [pc, #64]	; (8002254 <sampling+0xb94>)
 8002212:	801a      	strh	r2, [r3, #0]
 8002214:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <sampling+0xb94>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800221c:	f4ff aca2 	bcc.w	8001b64 <sampling+0x4a4>
// filter loop
int32_t play_holder1[512];    // data banks
int32_t play_holder2[512];


for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <sampling+0xb94>)
 8002222:	2200      	movs	r2, #0
 8002224:	801a      	strh	r2, [r3, #0]
 8002226:	e0f3      	b.n	8002410 <sampling+0xd50>
 8002228:	7bb1a72c 	.word	0x7bb1a72c
 800222c:	3f3921fa 	.word	0x3f3921fa
 8002230:	94fd52a7 	.word	0x94fd52a7
 8002234:	3f10de74 	.word	0x3f10de74
 8002238:	2000221c 	.word	0x2000221c
 800223c:	20002220 	.word	0x20002220
 8002240:	20000a68 	.word	0x20000a68
 8002244:	424c0000 	.word	0x424c0000
 8002248:	46000c00 	.word	0x46000c00
 800224c:	200023b0 	.word	0x200023b0
 8002250:	2000218c 	.word	0x2000218c
 8002254:	20000c40 	.word	0x20000c40
	i_total=i+sample_pointB;
 8002258:	4b81      	ldr	r3, [pc, #516]	; (8002460 <sampling+0xda0>)
 800225a:	881a      	ldrh	r2, [r3, #0]
 800225c:	4b81      	ldr	r3, [pc, #516]	; (8002464 <sampling+0xda4>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	4413      	add	r3, r2
 8002262:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002266:	f102 0202 	add.w	r2, r2, #2
 800226a:	8013      	strh	r3, [r2, #0]
	i_frac=(i>>6);
 800226c:	4b7c      	ldr	r3, [pc, #496]	; (8002460 <sampling+0xda0>)
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	099b      	lsrs	r3, r3, #6
 8002272:	b29b      	uxth	r3, r3
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4b7c      	ldr	r3, [pc, #496]	; (8002468 <sampling+0xda8>)
 8002278:	701a      	strb	r2, [r3, #0]
// every step   1,110,928   >>20  ,per note
// New oscillators , sync, trigger input , waveshape ,zero cross
	sample_accus[0] = sample_accus[0] + note_tuned[0]; //careful with signed bit shift,better compare
 800227a:	4b7c      	ldr	r3, [pc, #496]	; (800246c <sampling+0xdac>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a7c      	ldr	r2, [pc, #496]	; (8002470 <sampling+0xdb0>)
 8002280:	8812      	ldrh	r2, [r2, #0]
 8002282:	4413      	add	r3, r2
 8002284:	4a79      	ldr	r2, [pc, #484]	; (800246c <sampling+0xdac>)
 8002286:	6013      	str	r3, [r2, #0]

	if (sample_accus[0]>524287) sample_accus[0] =-sample_accus[0] ; // faster >  than &  ,strange
 8002288:	4b78      	ldr	r3, [pc, #480]	; (800246c <sampling+0xdac>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002290:	db04      	blt.n	800229c <sampling+0xbdc>
 8002292:	4b76      	ldr	r3, [pc, #472]	; (800246c <sampling+0xdac>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	425b      	negs	r3, r3
 8002298:	4a74      	ldr	r2, [pc, #464]	; (800246c <sampling+0xdac>)
 800229a:	6013      	str	r3, [r2, #0]



	sample_accus[1] = sample_accus[1] + note_tuned[1];  // normal adder full volume
 800229c:	4b73      	ldr	r3, [pc, #460]	; (800246c <sampling+0xdac>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a73      	ldr	r2, [pc, #460]	; (8002470 <sampling+0xdb0>)
 80022a2:	8852      	ldrh	r2, [r2, #2]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a71      	ldr	r2, [pc, #452]	; (800246c <sampling+0xdac>)
 80022a8:	6053      	str	r3, [r2, #4]
		//	if (!(note_channel[0]))   sample_accus[1] =0;  // turn off with vel now , maybe use mask
			if (sample_accus[1]>524287) sample_accus[1] =-sample_accus[1] ; // faster >  than &  ,strange
 80022aa:	4b70      	ldr	r3, [pc, #448]	; (800246c <sampling+0xdac>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022b2:	db04      	blt.n	80022be <sampling+0xbfe>
 80022b4:	4b6d      	ldr	r3, [pc, #436]	; (800246c <sampling+0xdac>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	425b      	negs	r3, r3
 80022ba:	4a6c      	ldr	r2, [pc, #432]	; (800246c <sampling+0xdac>)
 80022bc:	6053      	str	r3, [r2, #4]

			sample_accus[2] = sample_accus[2] + note_tuned[2];
 80022be:	4b6b      	ldr	r3, [pc, #428]	; (800246c <sampling+0xdac>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	4a6b      	ldr	r2, [pc, #428]	; (8002470 <sampling+0xdb0>)
 80022c4:	8892      	ldrh	r2, [r2, #4]
 80022c6:	4413      	add	r3, r2
 80022c8:	4a68      	ldr	r2, [pc, #416]	; (800246c <sampling+0xdac>)
 80022ca:	6093      	str	r3, [r2, #8]
			//		if (!(note_channel[0]))   sample_accus[2] =0;  // turn off with vel now , maybe use mask
					if (sample_accus[2]>524287) sample_accus[2] =-sample_accus[2] ; // faster >  than &  ,strange
 80022cc:	4b67      	ldr	r3, [pc, #412]	; (800246c <sampling+0xdac>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022d4:	db04      	blt.n	80022e0 <sampling+0xc20>
 80022d6:	4b65      	ldr	r3, [pc, #404]	; (800246c <sampling+0xdac>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	425b      	negs	r3, r3
 80022dc:	4a63      	ldr	r2, [pc, #396]	; (800246c <sampling+0xdac>)
 80022de:	6093      	str	r3, [r2, #8]

					sample_accus[3] = sample_accus[3] + note_tuned[3]; // bouncing somewhere
 80022e0:	4b62      	ldr	r3, [pc, #392]	; (800246c <sampling+0xdac>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4a62      	ldr	r2, [pc, #392]	; (8002470 <sampling+0xdb0>)
 80022e6:	88d2      	ldrh	r2, [r2, #6]
 80022e8:	4413      	add	r3, r2
 80022ea:	4a60      	ldr	r2, [pc, #384]	; (800246c <sampling+0xdac>)
 80022ec:	60d3      	str	r3, [r2, #12]
					//sample_accus[3] = sample_accus[3] +4000;
					//	if (!(note_channel[0]))   sample_accus[3] =0;  // turn off with vel now , maybe use mask
							if (sample_accus[3]>524287) sample_accus[3] =-sample_accus[3] ; // faster >  than &  ,strange
 80022ee:	4b5f      	ldr	r3, [pc, #380]	; (800246c <sampling+0xdac>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022f6:	db04      	blt.n	8002302 <sampling+0xc42>
 80022f8:	4b5c      	ldr	r3, [pc, #368]	; (800246c <sampling+0xdac>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	425b      	negs	r3, r3
 80022fe:	4a5b      	ldr	r2, [pc, #364]	; (800246c <sampling+0xdac>)
 8002300:	60d3      	str	r3, [r2, #12]

							sample_accus[4] = sample_accus[4] + note_tuned[4];
 8002302:	4b5a      	ldr	r3, [pc, #360]	; (800246c <sampling+0xdac>)
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	4a5a      	ldr	r2, [pc, #360]	; (8002470 <sampling+0xdb0>)
 8002308:	8912      	ldrh	r2, [r2, #8]
 800230a:	4413      	add	r3, r2
 800230c:	4a57      	ldr	r2, [pc, #348]	; (800246c <sampling+0xdac>)
 800230e:	6113      	str	r3, [r2, #16]
								//	if (!(note_channel[4]))   sample_accus[4] =0;  // turn off with vel now , maybe use mask
									if (sample_accus[4]>524287) sample_accus[4] =-sample_accus[4] ; // faster >  than &  ,strange
 8002310:	4b56      	ldr	r3, [pc, #344]	; (800246c <sampling+0xdac>)
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002318:	db04      	blt.n	8002324 <sampling+0xc64>
 800231a:	4b54      	ldr	r3, [pc, #336]	; (800246c <sampling+0xdac>)
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	425b      	negs	r3, r3
 8002320:	4a52      	ldr	r2, [pc, #328]	; (800246c <sampling+0xdac>)
 8002322:	6113      	str	r3, [r2, #16]

									sample_Accu[2] = 0;sample_Accu[0] =0;sample_Accu[3] =0; //all zeroed
 8002324:	4b53      	ldr	r3, [pc, #332]	; (8002474 <sampling+0xdb4>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	4b52      	ldr	r3, [pc, #328]	; (8002474 <sampling+0xdb4>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	4b50      	ldr	r3, [pc, #320]	; (8002474 <sampling+0xdb4>)
 8002332:	2200      	movs	r2, #0
 8002334:	60da      	str	r2, [r3, #12]
									//if (sample_accus[2]<0) sample_Accu[2]=+sample_accus[2]; else sample_Accu[2]=sample_accus[2]; // convert to triangle ?
									sample_Accu[0]=sample_accus[2]>>7; // needs cut a bit
 8002336:	4b4d      	ldr	r3, [pc, #308]	; (800246c <sampling+0xdac>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	11db      	asrs	r3, r3, #7
 800233c:	4a4d      	ldr	r2, [pc, #308]	; (8002474 <sampling+0xdb4>)
 800233e:	6013      	str	r3, [r2, #0]

							sample_Accu[0] = ((sine_out+sample_Accu[0])*cross_fade[1]);   // sine input
 8002340:	4b4c      	ldr	r3, [pc, #304]	; (8002474 <sampling+0xdb4>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4b4c      	ldr	r3, [pc, #304]	; (8002478 <sampling+0xdb8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4413      	add	r3, r2
 800234a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800234e:	f102 021d 	add.w	r2, r2, #29
 8002352:	7812      	ldrb	r2, [r2, #0]
 8002354:	fb02 f303 	mul.w	r3, r2, r3
 8002358:	4a46      	ldr	r2, [pc, #280]	; (8002474 <sampling+0xdb4>)
 800235a:	6013      	str	r3, [r2, #0]

									//if (sample_accus[3]<0) sample_Accu[3]=+sample_accus[3]; else sample_Accu[3]=sample_accus[3]; // convert to triangle
									sample_Accu[3]=sample_accus[3];
 800235c:	4b43      	ldr	r3, [pc, #268]	; (800246c <sampling+0xdac>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4a44      	ldr	r2, [pc, #272]	; (8002474 <sampling+0xdb4>)
 8002362:	60d3      	str	r3, [r2, #12]
									sample_Accu[2] = (sample_Accu[3]*cross_fade[2]);			//27b, 2 out f2  might do a crossfade here using pot 3
 8002364:	4b43      	ldr	r3, [pc, #268]	; (8002474 <sampling+0xdb4>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800236c:	f102 021e 	add.w	r2, r2, #30
 8002370:	7812      	ldrb	r2, [r2, #0]
 8002372:	fb02 f303 	mul.w	r3, r2, r3
 8002376:	4a3f      	ldr	r2, [pc, #252]	; (8002474 <sampling+0xdb4>)
 8002378:	6093      	str	r3, [r2, #8]
									//	sample_Accu[5] = sample_Accu[4]+ (sample_accus[4]*4);			// drum and envelope

	//	sample_Accu=sample_Accu-(1<<21);


if (sine_counterB==0) 	sine_temp2=sine_adder;
 800237a:	4b40      	ldr	r3, [pc, #256]	; (800247c <sampling+0xdbc>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d103      	bne.n	800238a <sampling+0xcca>
 8002382:	4b3f      	ldr	r3, [pc, #252]	; (8002480 <sampling+0xdc0>)
 8002384:	881a      	ldrh	r2, [r3, #0]
 8002386:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <sampling+0xdc4>)
 8002388:	801a      	strh	r2, [r3, #0]

	sine_counterB=sine_counterB+sine_temp2 ;  // sine up counter per cycle , however sine adder nees to wait
 800238a:	4b3c      	ldr	r3, [pc, #240]	; (800247c <sampling+0xdbc>)
 800238c:	881a      	ldrh	r2, [r3, #0]
 800238e:	4b3d      	ldr	r3, [pc, #244]	; (8002484 <sampling+0xdc4>)
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	4413      	add	r3, r2
 8002394:	b29a      	uxth	r2, r3
 8002396:	4b39      	ldr	r3, [pc, #228]	; (800247c <sampling+0xdbc>)
 8002398:	801a      	strh	r2, [r3, #0]
	if (sine_counterB>>7) sine_zero=0; else sine_zero=1;
 800239a:	4b38      	ldr	r3, [pc, #224]	; (800247c <sampling+0xdbc>)
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	09db      	lsrs	r3, r3, #7
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d004      	beq.n	80023b0 <sampling+0xcf0>
 80023a6:	2300      	movs	r3, #0
 80023a8:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80023ac:	8013      	strh	r3, [r2, #0]
 80023ae:	e003      	b.n	80023b8 <sampling+0xcf8>
 80023b0:	2301      	movs	r3, #1
 80023b2:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80023b6:	8013      	strh	r3, [r2, #0]

if (sine_counterB>(sine_length<<5)) sine_counterB=0; //fixed for now
 80023b8:	4b30      	ldr	r3, [pc, #192]	; (800247c <sampling+0xdbc>)
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	4b32      	ldr	r3, [pc, #200]	; (8002488 <sampling+0xdc8>)
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	015b      	lsls	r3, r3, #5
 80023c4:	429a      	cmp	r2, r3
 80023c6:	dd02      	ble.n	80023ce <sampling+0xd0e>
 80023c8:	4b2c      	ldr	r3, [pc, #176]	; (800247c <sampling+0xdbc>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	801a      	strh	r2, [r3, #0]
sine_count(); // calc sine
 80023ce:	f000 fae5 	bl	800299c <sine_count>
play_holder1[i]=sample_Accu[0];  // write to bank
 80023d2:	4b23      	ldr	r3, [pc, #140]	; (8002460 <sampling+0xda0>)
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	4619      	mov	r1, r3
 80023d8:	4b26      	ldr	r3, [pc, #152]	; (8002474 <sampling+0xdb4>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80023e0:	f103 0308 	add.w	r3, r3, #8
 80023e4:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 80023e8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
play_holder2[i]=sample_Accu[2];
 80023ec:	4b1c      	ldr	r3, [pc, #112]	; (8002460 <sampling+0xda0>)
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	4b20      	ldr	r3, [pc, #128]	; (8002474 <sampling+0xdb4>)
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80023fa:	4619      	mov	r1, r3
 80023fc:	0083      	lsls	r3, r0, #2
 80023fe:	440b      	add	r3, r1
 8002400:	f843 2ca0 	str.w	r2, [r3, #-160]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002404:	4b16      	ldr	r3, [pc, #88]	; (8002460 <sampling+0xda0>)
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	3301      	adds	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	4b14      	ldr	r3, [pc, #80]	; (8002460 <sampling+0xda0>)
 800240e:	801a      	strh	r2, [r3, #0]
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <sampling+0xda0>)
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002418:	f4ff af1e 	bcc.w	8002258 <sampling+0xb98>



int32_t filter_Accu;

uint16_t temp3_hold[3]={2000,2000,2000};
 800241c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002420:	4a1a      	ldr	r2, [pc, #104]	; (800248c <sampling+0xdcc>)
 8002422:	3ba8      	subs	r3, #168	; 0xa8
 8002424:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002428:	6018      	str	r0, [r3, #0]
 800242a:	3304      	adds	r3, #4
 800242c:	8019      	strh	r1, [r3, #0]

//uint16_t* click=&input_holder[0];

uint16_t crap_hold=2000;
 800242e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002432:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002436:	f102 020c 	add.w	r2, r2, #12
 800243a:	8013      	strh	r3, [r2, #0]

				uint16_t crap_hold1=2000;
 800243c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002440:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002444:	f102 0216 	add.w	r2, r2, #22
 8002448:	8013      	strh	r3, [r2, #0]
				uint16_t crap_hold2=2000;
 800244a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800244e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002452:	f102 020a 	add.w	r2, r2, #10
 8002456:	8013      	strh	r3, [r2, #0]




for (i=0;i<512;i++)
 8002458:	4b01      	ldr	r3, [pc, #4]	; (8002460 <sampling+0xda0>)
 800245a:	2200      	movs	r2, #0
 800245c:	801a      	strh	r2, [r3, #0]
 800245e:	e05d      	b.n	800251c <sampling+0xe5c>
 8002460:	20000c40 	.word	0x20000c40
 8002464:	20000c3e 	.word	0x20000c3e
 8002468:	2000221c 	.word	0x2000221c
 800246c:	200020d8 	.word	0x200020d8
 8002470:	20000bfc 	.word	0x20000bfc
 8002474:	20000c20 	.word	0x20000c20
 8002478:	20000bf4 	.word	0x20000bf4
 800247c:	20000bf2 	.word	0x20000bf2
 8002480:	20000c1a 	.word	0x20000c1a
 8002484:	20000bf8 	.word	0x20000bf8
 8002488:	2000024e 	.word	0x2000024e
 800248c:	0800a7c0 	.word	0x0800a7c0
			{




				crap_hold=((input_holder[i]*7)+crap_hold2)>>3;
 8002490:	4b62      	ldr	r3, [pc, #392]	; (800261c <sampling+0xf5c>)
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	461a      	mov	r2, r3
 8002496:	4b62      	ldr	r3, [pc, #392]	; (8002620 <sampling+0xf60>)
 8002498:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800249c:	461a      	mov	r2, r3
 800249e:	4613      	mov	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	1a9a      	subs	r2, r3, r2
 80024a4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80024a8:	f103 030a 	add.w	r3, r3, #10
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	10db      	asrs	r3, r3, #3
 80024b2:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80024b6:	f102 020c 	add.w	r2, r2, #12
 80024ba:	8013      	strh	r3, [r2, #0]
					crap_hold1=((crap_hold*7)+crap_hold1)>>3;
 80024bc:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80024c0:	f103 030c 	add.w	r3, r3, #12
 80024c4:	881a      	ldrh	r2, [r3, #0]
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	1a9a      	subs	r2, r3, r2
 80024cc:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80024d0:	f103 0316 	add.w	r3, r3, #22
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	4413      	add	r3, r2
 80024d8:	10db      	asrs	r3, r3, #3
 80024da:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80024de:	f102 0216 	add.w	r2, r2, #22
 80024e2:	8013      	strh	r3, [r2, #0]
					input_holder[i] =((crap_hold1*7)+crap_hold2)>>3;
 80024e4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80024e8:	f103 0316 	add.w	r3, r3, #22
 80024ec:	881a      	ldrh	r2, [r3, #0]
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	1a9a      	subs	r2, r3, r2
 80024f4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80024f8:	f103 030a 	add.w	r3, r3, #10
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	10d9      	asrs	r1, r3, #3
 8002502:	4b46      	ldr	r3, [pc, #280]	; (800261c <sampling+0xf5c>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	b289      	uxth	r1, r1
 800250a:	4b45      	ldr	r3, [pc, #276]	; (8002620 <sampling+0xf60>)
 800250c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<512;i++)
 8002510:	4b42      	ldr	r3, [pc, #264]	; (800261c <sampling+0xf5c>)
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	3301      	adds	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	4b40      	ldr	r3, [pc, #256]	; (800261c <sampling+0xf5c>)
 800251a:	801a      	strh	r2, [r3, #0]
 800251c:	4b3f      	ldr	r3, [pc, #252]	; (800261c <sampling+0xf5c>)
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002524:	d3b4      	bcc.n	8002490 <sampling+0xdd0>

}
*/


int32_t feedback_out=filter_out[3];
 8002526:	4b3f      	ldr	r3, [pc, #252]	; (8002624 <sampling+0xf64>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800252e:	f102 0204 	add.w	r2, r2, #4
 8002532:	6013      	str	r3, [r2, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 8002534:	4b39      	ldr	r3, [pc, #228]	; (800261c <sampling+0xf5c>)
 8002536:	2200      	movs	r2, #0
 8002538:	801a      	strh	r2, [r3, #0]
 800253a:	e217      	b.n	800296c <sampling+0x12ac>
	i_total=i+sample_pointB;
 800253c:	4b37      	ldr	r3, [pc, #220]	; (800261c <sampling+0xf5c>)
 800253e:	881a      	ldrh	r2, [r3, #0]
 8002540:	4b39      	ldr	r3, [pc, #228]	; (8002628 <sampling+0xf68>)
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	4413      	add	r3, r2
 8002546:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800254a:	f102 0202 	add.w	r2, r2, #2
 800254e:	8013      	strh	r3, [r2, #0]
i_frac=(i>>6);
 8002550:	4b32      	ldr	r3, [pc, #200]	; (800261c <sampling+0xf5c>)
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	099b      	lsrs	r3, r3, #6
 8002556:	b29b      	uxth	r3, r3
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4b34      	ldr	r3, [pc, #208]	; (800262c <sampling+0xf6c>)
 800255c:	701a      	strb	r2, [r3, #0]

// filter 1
if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{adsr_temp =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 800255e:	4b2f      	ldr	r3, [pc, #188]	; (800261c <sampling+0xf5c>)
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	b29b      	uxth	r3, r3
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800256c:	f103 0308 	add.w	r3, r3, #8
 8002570:	443b      	add	r3, r7
 8002572:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8002576:	4a29      	ldr	r2, [pc, #164]	; (800261c <sampling+0xf5c>)
 8002578:	8812      	ldrh	r2, [r2, #0]
 800257a:	f002 021f 	and.w	r2, r2, #31
 800257e:	2101      	movs	r1, #1
 8002580:	fa01 f202 	lsl.w	r2, r1, r2
 8002584:	4293      	cmp	r3, r2
 8002586:	d10f      	bne.n	80025a8 <sampling+0xee8>
 8002588:	4b29      	ldr	r3, [pc, #164]	; (8002630 <sampling+0xf70>)
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
 800258e:	4b29      	ldr	r3, [pc, #164]	; (8002634 <sampling+0xf74>)
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	4b27      	ldr	r3, [pc, #156]	; (8002634 <sampling+0xf74>)
 8002598:	801a      	strh	r2, [r3, #0]
 800259a:	4b26      	ldr	r3, [pc, #152]	; (8002634 <sampling+0xf74>)
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	4b23      	ldr	r3, [pc, #140]	; (8002634 <sampling+0xf74>)
 80025a6:	801a      	strh	r2, [r3, #0]

//if (feedback_out>0xFFFF) feedback_out=0xFFFF; else if (feedback_out<-65535) feedback_out=-65535;  // limiter to 16 bits
sample_Accu[1]=input_holder[i];
 80025a8:	4b1c      	ldr	r3, [pc, #112]	; (800261c <sampling+0xf5c>)
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <sampling+0xf60>)
 80025b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b20      	ldr	r3, [pc, #128]	; (8002638 <sampling+0xf78>)
 80025b8:	605a      	str	r2, [r3, #4]



sample_Accu[1]=(sample_Accu[1]-2020)<<14; // shift to correct level
 80025ba:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <sampling+0xf78>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 80025c2:	039b      	lsls	r3, r3, #14
 80025c4:	4a1c      	ldr	r2, [pc, #112]	; (8002638 <sampling+0xf78>)
 80025c6:	6053      	str	r3, [r2, #4]


//sample_Accu[1]=sample_Accu[1]-60000;
//sample_Accu[1]=play_holder1[i];  // sine input

freq_point[0]=freq_pointer[0] [i_frac];; // load up coeffs
 80025c8:	4b18      	ldr	r3, [pc, #96]	; (800262c <sampling+0xf6c>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	4a1b      	ldr	r2, [pc, #108]	; (800263c <sampling+0xf7c>)
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a1a      	ldr	r2, [pc, #104]	; (8002640 <sampling+0xf80>)
 80025d6:	6013      	str	r3, [r2, #0]
//freq_point[1]=freq_pointer[1] [i_frac];
freq_point[2]=freq_pointer[2] [i_frac];  // ok , array was too short
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <sampling+0xf6c>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	4a17      	ldr	r2, [pc, #92]	; (800263c <sampling+0xf7c>)
 80025de:	3312      	adds	r3, #18
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a16      	ldr	r2, [pc, #88]	; (8002640 <sampling+0xf80>)
 80025e8:	6093      	str	r3, [r2, #8]
//freq_point[3]=freq_pointer[3] [i_frac];
//freq_point[0]=0.5;  //was ok with this
	//	freq_point[2]=0.5;


adsr_level[3] = adsr_lut	[i>>1];
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <sampling+0xf5c>)
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	085b      	lsrs	r3, r3, #1
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	4a14      	ldr	r2, [pc, #80]	; (8002644 <sampling+0xf84>)
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a13      	ldr	r2, [pc, #76]	; (8002648 <sampling+0xf88>)
 80025fc:	60d3      	str	r3, [r2, #12]


if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <sampling+0xf80>)
 8002600:	edd3 7a00 	vldr	s15, [r3]
 8002604:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002610:	dd1c      	ble.n	800264c <sampling+0xf8c>
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <sampling+0xf80>)
 8002614:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	e023      	b.n	8002664 <sampling+0xfa4>
 800261c:	20000c40 	.word	0x20000c40
 8002620:	20002a08 	.word	0x20002a08
 8002624:	200020bc 	.word	0x200020bc
 8002628:	20000c3e 	.word	0x20000c3e
 800262c:	2000221c 	.word	0x2000221c
 8002630:	20002090 	.word	0x20002090
 8002634:	2000221e 	.word	0x2000221e
 8002638:	20000c20 	.word	0x20000c20
 800263c:	2000218c 	.word	0x2000218c
 8002640:	2000217c 	.word	0x2000217c
 8002644:	20001c90 	.word	0x20001c90
 8002648:	200029bc 	.word	0x200029bc
 800264c:	4bae      	ldr	r3, [pc, #696]	; (8002908 <sampling+0x1248>)
 800264e:	edd3 7a00 	vldr	s15, [r3]
 8002652:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265a:	d503      	bpl.n	8002664 <sampling+0xfa4>
 800265c:	4baa      	ldr	r3, [pc, #680]	; (8002908 <sampling+0x1248>)
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
		//freq_point[0]=0.50;
		freq_point[1]=1-freq_point[0];
 8002664:	4ba8      	ldr	r3, [pc, #672]	; (8002908 <sampling+0x1248>)
 8002666:	edd3 7a00 	vldr	s15, [r3]
 800266a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800266e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002672:	4ba5      	ldr	r3, [pc, #660]	; (8002908 <sampling+0x1248>)
 8002674:	edc3 7a01 	vstr	s15, [r3, #4]
		filter_accus[1]=sample_Accu[1];
 8002678:	4ba4      	ldr	r3, [pc, #656]	; (800290c <sampling+0x124c>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	ee07 3a90 	vmov	s15, r3
 8002680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002684:	4ba2      	ldr	r3, [pc, #648]	; (8002910 <sampling+0x1250>)
 8002686:	edc3 7a01 	vstr	s15, [r3, #4]
	//	filter_accus[1]=sample_Accu[1]+((filter_hold[0])*0.5); // saw
	//	filter_accus[1]=	filter_accus[1]*adsr_level[3][i_frac];
		filter_accus[1]=	filter_accus[1]*adsr_level[3];
 800268a:	4ba1      	ldr	r3, [pc, #644]	; (8002910 <sampling+0x1250>)
 800268c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002690:	4ba0      	ldr	r3, [pc, #640]	; (8002914 <sampling+0x1254>)
 8002692:	edd3 7a03 	vldr	s15, [r3, #12]
 8002696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269a:	4b9d      	ldr	r3, [pc, #628]	; (8002910 <sampling+0x1250>)
 800269c:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);					// maybe allow bandpass insted of lpf
 80026a0:	4b9b      	ldr	r3, [pc, #620]	; (8002910 <sampling+0x1250>)
 80026a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80026a6:	4b98      	ldr	r3, [pc, #608]	; (8002908 <sampling+0x1248>)
 80026a8:	edd3 7a00 	vldr	s15, [r3]
 80026ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026b0:	4b97      	ldr	r3, [pc, #604]	; (8002910 <sampling+0x1250>)
 80026b2:	edd3 6a02 	vldr	s13, [r3, #8]
 80026b6:	4b94      	ldr	r3, [pc, #592]	; (8002908 <sampling+0x1248>)
 80026b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80026bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c4:	4b92      	ldr	r3, [pc, #584]	; (8002910 <sampling+0x1250>)
 80026c6:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);
 80026ca:	4b91      	ldr	r3, [pc, #580]	; (8002910 <sampling+0x1250>)
 80026cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80026d0:	4b8d      	ldr	r3, [pc, #564]	; (8002908 <sampling+0x1248>)
 80026d2:	edd3 7a00 	vldr	s15, [r3]
 80026d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026da:	4b8d      	ldr	r3, [pc, #564]	; (8002910 <sampling+0x1250>)
 80026dc:	edd3 6a03 	vldr	s13, [r3, #12]
 80026e0:	4b89      	ldr	r3, [pc, #548]	; (8002908 <sampling+0x1248>)
 80026e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80026e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ee:	4b88      	ldr	r3, [pc, #544]	; (8002910 <sampling+0x1250>)
 80026f0:	edc3 7a03 	vstr	s15, [r3, #12]
		filter_accus[4]=(filter_accus[3]*freq_point[0])+(filter_accus[4]*freq_point[1]);
 80026f4:	4b86      	ldr	r3, [pc, #536]	; (8002910 <sampling+0x1250>)
 80026f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80026fa:	4b83      	ldr	r3, [pc, #524]	; (8002908 <sampling+0x1248>)
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002704:	4b82      	ldr	r3, [pc, #520]	; (8002910 <sampling+0x1250>)
 8002706:	edd3 6a04 	vldr	s13, [r3, #16]
 800270a:	4b7f      	ldr	r3, [pc, #508]	; (8002908 <sampling+0x1248>)
 800270c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002718:	4b7d      	ldr	r3, [pc, #500]	; (8002910 <sampling+0x1250>)
 800271a:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[0])+(filter_accus[5]*freq_point[1]);
 800271e:	4b7c      	ldr	r3, [pc, #496]	; (8002910 <sampling+0x1250>)
 8002720:	ed93 7a04 	vldr	s14, [r3, #16]
 8002724:	4b78      	ldr	r3, [pc, #480]	; (8002908 <sampling+0x1248>)
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800272e:	4b78      	ldr	r3, [pc, #480]	; (8002910 <sampling+0x1250>)
 8002730:	edd3 6a05 	vldr	s13, [r3, #20]
 8002734:	4b74      	ldr	r3, [pc, #464]	; (8002908 <sampling+0x1248>)
 8002736:	edd3 7a01 	vldr	s15, [r3, #4]
 800273a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800273e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002742:	4b73      	ldr	r3, [pc, #460]	; (8002910 <sampling+0x1250>)
 8002744:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_hold[0]=(filter_accus[5]+filter_accus[11])*0.5; //half sample , nice
 8002748:	4b71      	ldr	r3, [pc, #452]	; (8002910 <sampling+0x1250>)
 800274a:	ed93 7a05 	vldr	s14, [r3, #20]
 800274e:	4b70      	ldr	r3, [pc, #448]	; (8002910 <sampling+0x1250>)
 8002750:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002758:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800275c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002760:	4b6d      	ldr	r3, [pc, #436]	; (8002918 <sampling+0x1258>)
 8002762:	edc3 7a00 	vstr	s15, [r3]
		sample_Accu[0] =filter_accus[5]; // out
 8002766:	4b6a      	ldr	r3, [pc, #424]	; (8002910 <sampling+0x1250>)
 8002768:	edd3 7a05 	vldr	s15, [r3, #20]
 800276c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002770:	ee17 2a90 	vmov	r2, s15
 8002774:	4b65      	ldr	r3, [pc, #404]	; (800290c <sampling+0x124c>)
 8002776:	601a      	str	r2, [r3, #0]
		filter_accus[11]=filter_accus[5]; //write back new value
 8002778:	4b65      	ldr	r3, [pc, #404]	; (8002910 <sampling+0x1250>)
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	4a64      	ldr	r2, [pc, #400]	; (8002910 <sampling+0x1250>)
 800277e:	62d3      	str	r3, [r2, #44]	; 0x2c

		//filter 2
		//sample_Accu[3]=play_holder2[i] >>5; // sine


				if (freq_point[2]>1) freq_point[2]=1;
 8002780:	4b61      	ldr	r3, [pc, #388]	; (8002908 <sampling+0x1248>)
 8002782:	edd3 7a02 	vldr	s15, [r3, #8]
 8002786:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800278a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800278e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002792:	dd03      	ble.n	800279c <sampling+0x10dc>
 8002794:	4b5c      	ldr	r3, [pc, #368]	; (8002908 <sampling+0x1248>)
 8002796:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800279a:	609a      	str	r2, [r3, #8]

				freq_point[3]=1-freq_point[2];
 800279c:	4b5a      	ldr	r3, [pc, #360]	; (8002908 <sampling+0x1248>)
 800279e:	edd3 7a02 	vldr	s15, [r3, #8]
 80027a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027aa:	4b57      	ldr	r3, [pc, #348]	; (8002908 <sampling+0x1248>)
 80027ac:	edc3 7a03 	vstr	s15, [r3, #12]
				filter_accus[6]=sample_Accu[3];
 80027b0:	4b56      	ldr	r3, [pc, #344]	; (800290c <sampling+0x124c>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	ee07 3a90 	vmov	s15, r3
 80027b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027bc:	4b54      	ldr	r3, [pc, #336]	; (8002910 <sampling+0x1250>)
 80027be:	edc3 7a06 	vstr	s15, [r3, #24]
				filter_accus[6]= filter_accus[6]*adsr_level[3]; // add adsr envelope
 80027c2:	4b53      	ldr	r3, [pc, #332]	; (8002910 <sampling+0x1250>)
 80027c4:	ed93 7a06 	vldr	s14, [r3, #24]
 80027c8:	4b52      	ldr	r3, [pc, #328]	; (8002914 <sampling+0x1254>)
 80027ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80027ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d2:	4b4f      	ldr	r3, [pc, #316]	; (8002910 <sampling+0x1250>)
 80027d4:	edc3 7a06 	vstr	s15, [r3, #24]

				filter_accus[7]=(filter_accus[6]*freq_point[2])+(filter_accus[7]*freq_point[3]);
 80027d8:	4b4d      	ldr	r3, [pc, #308]	; (8002910 <sampling+0x1250>)
 80027da:	ed93 7a06 	vldr	s14, [r3, #24]
 80027de:	4b4a      	ldr	r3, [pc, #296]	; (8002908 <sampling+0x1248>)
 80027e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80027e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027e8:	4b49      	ldr	r3, [pc, #292]	; (8002910 <sampling+0x1250>)
 80027ea:	edd3 6a07 	vldr	s13, [r3, #28]
 80027ee:	4b46      	ldr	r3, [pc, #280]	; (8002908 <sampling+0x1248>)
 80027f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80027f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027fc:	4b44      	ldr	r3, [pc, #272]	; (8002910 <sampling+0x1250>)
 80027fe:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[2])+(filter_accus[8]*freq_point[3]);
 8002802:	4b43      	ldr	r3, [pc, #268]	; (8002910 <sampling+0x1250>)
 8002804:	ed93 7a07 	vldr	s14, [r3, #28]
 8002808:	4b3f      	ldr	r3, [pc, #252]	; (8002908 <sampling+0x1248>)
 800280a:	edd3 7a02 	vldr	s15, [r3, #8]
 800280e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002812:	4b3f      	ldr	r3, [pc, #252]	; (8002910 <sampling+0x1250>)
 8002814:	edd3 6a08 	vldr	s13, [r3, #32]
 8002818:	4b3b      	ldr	r3, [pc, #236]	; (8002908 <sampling+0x1248>)
 800281a:	edd3 7a03 	vldr	s15, [r3, #12]
 800281e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002826:	4b3a      	ldr	r3, [pc, #232]	; (8002910 <sampling+0x1250>)
 8002828:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[2])+(filter_accus[9]*freq_point[3]);
 800282c:	4b38      	ldr	r3, [pc, #224]	; (8002910 <sampling+0x1250>)
 800282e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002832:	4b35      	ldr	r3, [pc, #212]	; (8002908 <sampling+0x1248>)
 8002834:	edd3 7a02 	vldr	s15, [r3, #8]
 8002838:	ee27 7a27 	vmul.f32	s14, s14, s15
 800283c:	4b34      	ldr	r3, [pc, #208]	; (8002910 <sampling+0x1250>)
 800283e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002842:	4b31      	ldr	r3, [pc, #196]	; (8002908 <sampling+0x1248>)
 8002844:	edd3 7a03 	vldr	s15, [r3, #12]
 8002848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800284c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002850:	4b2f      	ldr	r3, [pc, #188]	; (8002910 <sampling+0x1250>)
 8002852:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				filter_accus[10]=(filter_accus[9]*freq_point[2])+(filter_accus[10]*freq_point[3]);
 8002856:	4b2e      	ldr	r3, [pc, #184]	; (8002910 <sampling+0x1250>)
 8002858:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800285c:	4b2a      	ldr	r3, [pc, #168]	; (8002908 <sampling+0x1248>)
 800285e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002862:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002866:	4b2a      	ldr	r3, [pc, #168]	; (8002910 <sampling+0x1250>)
 8002868:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800286c:	4b26      	ldr	r3, [pc, #152]	; (8002908 <sampling+0x1248>)
 800286e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800287a:	4b25      	ldr	r3, [pc, #148]	; (8002910 <sampling+0x1250>)
 800287c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_hold[1]=(filter_accus[10]+filter_accus[12])*0.5; //half sample
 8002880:	4b23      	ldr	r3, [pc, #140]	; (8002910 <sampling+0x1250>)
 8002882:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002886:	4b22      	ldr	r3, [pc, #136]	; (8002910 <sampling+0x1250>)
 8002888:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800288c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002890:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002898:	4b1f      	ldr	r3, [pc, #124]	; (8002918 <sampling+0x1258>)
 800289a:	edc3 7a01 	vstr	s15, [r3, #4]
				sample_Accu[2] =filter_accus[10]; //out
 800289e:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <sampling+0x1250>)
 80028a0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80028a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028a8:	ee17 2a90 	vmov	r2, s15
 80028ac:	4b17      	ldr	r3, [pc, #92]	; (800290c <sampling+0x124c>)
 80028ae:	609a      	str	r2, [r3, #8]
				filter_accus[12]=filter_accus[10]; //write back new value
 80028b0:	4b17      	ldr	r3, [pc, #92]	; (8002910 <sampling+0x1250>)
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	4a16      	ldr	r2, [pc, #88]	; (8002910 <sampling+0x1250>)
 80028b6:	6313      	str	r3, [r2, #48]	; 0x30


filter_Accu=0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80028be:	f102 0218 	add.w	r2, r2, #24
 80028c2:	6013      	str	r3, [r2, #0]
//filter_Accu=(sample_Accu[0]+sample_Accu[2])>>8; //filter + drum out


//filter_Accu=(sample_Accu[1]+sample_Accu[3])>>8; //filter + drum out ,clean out
 filter_Accu=sample_Accu[1]>>8;
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <sampling+0x124c>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	121b      	asrs	r3, r3, #8
 80028ca:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80028ce:	f102 0218 	add.w	r2, r2, #24
 80028d2:	6013      	str	r3, [r2, #0]
//filter_Accu=(sample_Accu[1]>>7)+(sample_Accu[3]>>8); //filter + drum out
 if (one_shot!=199)   one_shot++;  //play one attack then stop
 80028d4:	4b11      	ldr	r3, [pc, #68]	; (800291c <sampling+0x125c>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2bc7      	cmp	r3, #199	; 0xc7
 80028da:	d005      	beq.n	80028e8 <sampling+0x1228>
 80028dc:	4b0f      	ldr	r3, [pc, #60]	; (800291c <sampling+0x125c>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	3301      	adds	r3, #1
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	4b0d      	ldr	r3, [pc, #52]	; (800291c <sampling+0x125c>)
 80028e6:	701a      	strb	r2, [r3, #0]

 if (filter_Accu>0xFFFF) filter_Accu=0xFFFF; else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 80028e8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80028ec:	f103 0318 	add.w	r3, r3, #24
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f6:	db13      	blt.n	8002920 <sampling+0x1260>
 80028f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028fc:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002900:	f102 0218 	add.w	r2, r2, #24
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	e019      	b.n	800293c <sampling+0x127c>
 8002908:	2000217c 	.word	0x2000217c
 800290c:	20000c20 	.word	0x20000c20
 8002910:	2000212c 	.word	0x2000212c
 8002914:	200029bc 	.word	0x200029bc
 8002918:	20002168 	.word	0x20002168
 800291c:	200020f0 	.word	0x200020f0
 8002920:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002924:	f103 0318 	add.w	r3, r3, #24
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800292e:	dc05      	bgt.n	800293c <sampling+0x127c>
 8002930:	4b16      	ldr	r3, [pc, #88]	; (800298c <sampling+0x12cc>)
 8002932:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002936:	f102 0218 	add.w	r2, r2, #24
 800293a:	6013      	str	r3, [r2, #0]


 play_sample[i_total]=(filter_Accu>>6)+1272;   // final output disable for now 2544
 800293c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002940:	f103 0318 	add.w	r3, r3, #24
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	119b      	asrs	r3, r3, #6
 8002948:	b29a      	uxth	r2, r3
 800294a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800294e:	f103 0302 	add.w	r3, r3, #2
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	f502 629f 	add.w	r2, r2, #1272	; 0x4f8
 8002958:	b291      	uxth	r1, r2
 800295a:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <sampling+0x12d0>)
 800295c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <sampling+0x12d4>)
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	3301      	adds	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <sampling+0x12d4>)
 800296a:	801a      	strh	r2, [r3, #0]
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <sampling+0x12d4>)
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002974:	f4ff ade2 	bcc.w	800253c <sampling+0xe7c>
 //play_sample[i_total]=(input_holder[i]);  // works good

} // end of filer


bank_write=0;
 8002978:	4b07      	ldr	r3, [pc, #28]	; (8002998 <sampling+0x12d8>)
 800297a:	2200      	movs	r2, #0
 800297c:	801a      	strh	r2, [r3, #0]
}
 800297e:	bf00      	nop
 8002980:	f507 5785 	add.w	r7, r7, #4256	; 0x10a0
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bdb0      	pop	{r4, r5, r7, pc}
 800298a:	bf00      	nop
 800298c:	ffff0001 	.word	0xffff0001
 8002990:	20000c44 	.word	0x20000c44
 8002994:	20000c40 	.word	0x20000c40
 8002998:	200002be 	.word	0x200002be

0800299c <sine_count>:
mask_result=mask_tempB &1;


}

void sine_count(void) {         // sine_out is the output 9  bit  , works
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
int32_t sine_tempA;
int32_t sine_tempB;
int8_t sine_frac;


sine_counter=(sine_counterB>>5);  // up countr controlled by counter
 80029a2:	4b2f      	ldr	r3, [pc, #188]	; (8002a60 <sine_count+0xc4>)
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	095b      	lsrs	r3, r3, #5
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	4b2e      	ldr	r3, [pc, #184]	; (8002a64 <sine_count+0xc8>)
 80029ac:	801a      	strh	r2, [r3, #0]
sine_frac=sine_counterB & 31;  // grab last 5 bits, actual position for linear interpol,fractional
 80029ae:	4b2c      	ldr	r3, [pc, #176]	; (8002a60 <sine_count+0xc4>)
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	b25b      	sxtb	r3, r3
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	73fb      	strb	r3, [r7, #15]

	if (sine_counter>sine_length) sine_counter = sine_length;		// seems to be faster than using a for loop to calculate both values
 80029ba:	4b2a      	ldr	r3, [pc, #168]	; (8002a64 <sine_count+0xc8>)
 80029bc:	881a      	ldrh	r2, [r3, #0]
 80029be:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <sine_count+0xcc>)
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d903      	bls.n	80029ce <sine_count+0x32>
 80029c6:	4b28      	ldr	r3, [pc, #160]	; (8002a68 <sine_count+0xcc>)
 80029c8:	881a      	ldrh	r2, [r3, #0]
 80029ca:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <sine_count+0xc8>)
 80029cc:	801a      	strh	r2, [r3, #0]

	sine_out = sine_block[sine_counter];  // 0- 40000
 80029ce:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <sine_count+0xc8>)
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <sine_count+0xd0>)
 80029d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80029da:	461a      	mov	r2, r3
 80029dc:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <sine_count+0xd4>)
 80029de:	601a      	str	r2, [r3, #0]
	sine_tempA=sine_out; // grab first value , needs to be always plus
 80029e0:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <sine_count+0xd4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60bb      	str	r3, [r7, #8]
	sine_tempA=sine_tempA-20000; //convert to signed
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 80029ec:	3b20      	subs	r3, #32
 80029ee:	60bb      	str	r3, [r7, #8]

	sine_counter++;
 80029f0:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <sine_count+0xc8>)
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	3301      	adds	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <sine_count+0xc8>)
 80029fa:	801a      	strh	r2, [r3, #0]
	if (sine_counter>=sine_length)  sine_counter=0; // set to sample length
 80029fc:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <sine_count+0xc8>)
 80029fe:	881a      	ldrh	r2, [r3, #0]
 8002a00:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <sine_count+0xcc>)
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d302      	bcc.n	8002a0e <sine_count+0x72>
 8002a08:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <sine_count+0xc8>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	801a      	strh	r2, [r3, #0]

			sine_out = sine_block[sine_counter];  // grab second value
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <sine_count+0xc8>)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <sine_count+0xd0>)
 8002a16:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <sine_count+0xd4>)
 8002a1e:	601a      	str	r2, [r3, #0]

		sine_tempB=sine_out; // grab first value
 8002a20:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <sine_count+0xd4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB-20000;  // convert to signed and +256 to -256
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002a2c:	3b20      	subs	r3, #32
 8002a2e:	607b      	str	r3, [r7, #4]

			sine_tempB=	sine_tempB-sine_tempA;   // calculate fraction then add
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB>>5; // div 32 or 32 upsample
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	115b      	asrs	r3, r3, #5
 8002a3c:	607b      	str	r3, [r7, #4]

			sine_tempB=sine_tempB*sine_frac; // mult by steps , can overshoot !!
 8002a3e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	fb02 f303 	mul.w	r3, r2, r3
 8002a48:	607b      	str	r3, [r7, #4]

			sine_out=(sine_tempA+sine_tempB);   // add back to start value
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4413      	add	r3, r2
 8002a50:	4a07      	ldr	r2, [pc, #28]	; (8002a70 <sine_count+0xd4>)
 8002a52:	6013      	str	r3, [r2, #0]
			//sine_tempA=sine_tempA; //needs

			//sine_out=sine_tempA;


}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	20000bf2 	.word	0x20000bf2
 8002a64:	20000bf0 	.word	0x20000bf0
 8002a68:	2000024e 	.word	0x2000024e
 8002a6c:	0800ad6c 	.word	0x0800ad6c
 8002a70:	20000bf4 	.word	0x20000bf4
 8002a74:	00000000 	.word	0x00000000

08002a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a78:	b5b0      	push	{r4, r5, r7, lr}
 8002a7a:	b0b4      	sub	sp, #208	; 0xd0
 8002a7c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a7e:	f001 fb0d 	bl	800409c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a82:	f000 fc4d 	bl	8003320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a86:	f000 ff13 	bl	80038b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a8a:	f000 fef1 	bl	8003870 <MX_DMA_Init>
  MX_ADC1_Init();
 8002a8e:	f000 fcb1 	bl	80033f4 <MX_ADC1_Init>
  MX_SPI2_Init();
 8002a92:	f000 fd99 	bl	80035c8 <MX_SPI2_Init>
  MX_TIM3_Init();
 8002a96:	f000 fe21 	bl	80036dc <MX_TIM3_Init>
  MX_TIM4_Init();
 8002a9a:	f000 fe95 	bl	80037c8 <MX_TIM4_Init>
  MX_I2C2_Init();
 8002a9e:	f000 fd2f 	bl	8003500 <MX_I2C2_Init>
  MX_TIM2_Init();
 8002aa2:	f000 fdc7 	bl	8003634 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002aa6:	f000 fd59 	bl	800355c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8002aaa:	4bc5      	ldr	r3, [pc, #788]	; (8002dc0 <main+0x348>)
 8002aac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2); // write to register hspi2
 8002ab0:	48c4      	ldr	r0, [pc, #784]	; (8002dc4 <main+0x34c>)
 8002ab2:	f004 fe97 	bl	80077e4 <HAL_SPI_Init>
  HAL_SPI_Init(&hspi1); // write to register hspi2
 8002ab6:	48c4      	ldr	r0, [pc, #784]	; (8002dc8 <main+0x350>)
 8002ab8:	f004 fe94 	bl	80077e4 <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8002abc:	48c3      	ldr	r0, [pc, #780]	; (8002dcc <main+0x354>)
 8002abe:	f005 fce3 	bl	8008488 <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 8002ac2:	4bc3      	ldr	r3, [pc, #780]	; (8002dd0 <main+0x358>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 8002ac8:	48c2      	ldr	r0, [pc, #776]	; (8002dd4 <main+0x35c>)
 8002aca:	f005 fc83 	bl	80083d4 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 8002ace:	48c2      	ldr	r0, [pc, #776]	; (8002dd8 <main+0x360>)
 8002ad0:	f005 fc80 	bl	80083d4 <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8002ad4:	2108      	movs	r1, #8
 8002ad6:	48bd      	ldr	r0, [pc, #756]	; (8002dcc <main+0x354>)
 8002ad8:	f005 fd92 	bl	8008600 <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 8002adc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ae0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 8002ae6:	48bd      	ldr	r0, [pc, #756]	; (8002ddc <main+0x364>)
 8002ae8:	f001 fbb2 	bl	8004250 <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8002aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002af0:	49bb      	ldr	r1, [pc, #748]	; (8002de0 <main+0x368>)
 8002af2:	48ba      	ldr	r0, [pc, #744]	; (8002ddc <main+0x364>)
 8002af4:	f001 fcec 	bl	80044d0 <HAL_ADC_Start_DMA>


HAL_I2C_MspInit(&hi2c2);
 8002af8:	48ba      	ldr	r0, [pc, #744]	; (8002de4 <main+0x36c>)
 8002afa:	f001 f813 	bl	8003b24 <HAL_I2C_MspInit>
uint8_t send_spi1[5]={0x90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
 8002afe:	4aba      	ldr	r2, [pc, #744]	; (8002de8 <main+0x370>)
 8002b00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b08:	6018      	str	r0, [r3, #0]
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	7019      	strb	r1, [r3, #0]





HAL_Delay(5);
 8002b0e:	2005      	movs	r0, #5
 8002b10:	f001 fb36 	bl	8004180 <HAL_Delay>


send_spi1[0]=0x06; //enable write  , only lasts for single operation
 8002b14:	2306      	movs	r3, #6
 8002b16:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2110      	movs	r1, #16
 8002b1e:	48b3      	ldr	r0, [pc, #716]	; (8002dec <main+0x374>)
 8002b20:	f003 fa42 	bl	8005fa8 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002b24:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002b28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	48a6      	ldr	r0, [pc, #664]	; (8002dc8 <main+0x350>)
 8002b30:	f004 fee1 	bl	80078f6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002b34:	2201      	movs	r2, #1
 8002b36:	2110      	movs	r1, #16
 8002b38:	48ac      	ldr	r0, [pc, #688]	; (8002dec <main+0x374>)
 8002b3a:	f003 fa35 	bl	8005fa8 <HAL_GPIO_WritePin>
HAL_Delay(5);
 8002b3e:	2005      	movs	r0, #5
 8002b40:	f001 fb1e 	bl	8004180 <HAL_Delay>
send_spi1[0]=0x20; //sector erase
 8002b44:	2320      	movs	r3, #32
 8002b46:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
send_spi1[1]=0; //24bit address msb
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
send_spi1[2]=0; //24bit address
 8002b50:	2300      	movs	r3, #0
 8002b52:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
send_spi1[3]=1; //24bit address lsb
 8002b56:	2301      	movs	r3, #1
 8002b58:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2110      	movs	r1, #16
 8002b60:	48a2      	ldr	r0, [pc, #648]	; (8002dec <main+0x374>)
 8002b62:	f003 fa21 	bl	8005fa8 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works
 8002b66:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b6e:	2204      	movs	r2, #4
 8002b70:	4895      	ldr	r0, [pc, #596]	; (8002dc8 <main+0x350>)
 8002b72:	f004 fec0 	bl	80078f6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002b76:	2201      	movs	r2, #1
 8002b78:	2110      	movs	r1, #16
 8002b7a:	489c      	ldr	r0, [pc, #624]	; (8002dec <main+0x374>)
 8002b7c:	f003 fa14 	bl	8005fa8 <HAL_GPIO_WritePin>


send_spi1[0]=0x05; //read status register  if writing
 8002b80:	2305      	movs	r3, #5
 8002b82:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
send_spi1[1]=0; //24bit address msb
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
status_reg[1]=1; // set busy on
 8002b8c:	4b98      	ldr	r3, [pc, #608]	; (8002df0 <main+0x378>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	705a      	strb	r2, [r3, #1]

while (status_reg[1]&1){								// check if write busy
 8002b92:	e012      	b.n	8002bba <main+0x142>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002b94:	2200      	movs	r2, #0
 8002b96:	2110      	movs	r1, #16
 8002b98:	4894      	ldr	r0, [pc, #592]	; (8002dec <main+0x374>)
 8002b9a:	f003 fa05 	bl	8005fa8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 8002b9e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002ba2:	23c8      	movs	r3, #200	; 0xc8
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	4a91      	ldr	r2, [pc, #580]	; (8002df0 <main+0x378>)
 8002baa:	4887      	ldr	r0, [pc, #540]	; (8002dc8 <main+0x350>)
 8002bac:	f005 f8f0 	bl	8007d90 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	2110      	movs	r1, #16
 8002bb4:	488d      	ldr	r0, [pc, #564]	; (8002dec <main+0x374>)
 8002bb6:	f003 f9f7 	bl	8005fa8 <HAL_GPIO_WritePin>
while (status_reg[1]&1){								// check if write busy
 8002bba:	4b8d      	ldr	r3, [pc, #564]	; (8002df0 <main+0x378>)
 8002bbc:	785b      	ldrb	r3, [r3, #1]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1e6      	bne.n	8002b94 <main+0x11c>
}

send_spi1[0]=0x06; //enable write again
 8002bc6:	2306      	movs	r3, #6
 8002bc8:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2110      	movs	r1, #16
 8002bd0:	4886      	ldr	r0, [pc, #536]	; (8002dec <main+0x374>)
 8002bd2:	f003 f9e9 	bl	8005fa8 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002bd6:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bde:	2201      	movs	r2, #1
 8002be0:	4879      	ldr	r0, [pc, #484]	; (8002dc8 <main+0x350>)
 8002be2:	f004 fe88 	bl	80078f6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002be6:	2201      	movs	r2, #1
 8002be8:	2110      	movs	r1, #16
 8002bea:	4880      	ldr	r0, [pc, #512]	; (8002dec <main+0x374>)
 8002bec:	f003 f9dc 	bl	8005fa8 <HAL_GPIO_WritePin>
HAL_Delay(5);
 8002bf0:	2005      	movs	r0, #5
 8002bf2:	f001 fac5 	bl	8004180 <HAL_Delay>




//uint8_t temp_spi1[]={0x02,0,0,1,"H","E","L","L","O"," ","W","O","R","L","D",250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
uint8_t temp_spi1[]={0x02,0,0,1,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
 8002bf6:	4b7f      	ldr	r3, [pc, #508]	; (8002df4 <main+0x37c>)
 8002bf8:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8002bfc:	461d      	mov	r5, r3
 8002bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c02:	682b      	ldr	r3, [r5, #0]
 8002c04:	8023      	strh	r3, [r4, #0]
memcpy  (send_spi1,temp_spi1, 14);   // copy new array over old
 8002c06:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8002c0a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c0e:	220e      	movs	r2, #14
 8002c10:	4618      	mov	r0, r3
 8002c12:	f006 fcc1 	bl	8009598 <memcpy>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	2110      	movs	r1, #16
 8002c1a:	4874      	ldr	r0, [pc, #464]	; (8002dec <main+0x374>)
 8002c1c:	f003 f9c4 	bl	8005fa8 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 14, 1000);  //address,page program
 8002c20:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c28:	220e      	movs	r2, #14
 8002c2a:	4867      	ldr	r0, [pc, #412]	; (8002dc8 <main+0x350>)
 8002c2c:	f004 fe63 	bl	80078f6 <HAL_SPI_Transmit>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002c30:	2201      	movs	r2, #1
 8002c32:	2110      	movs	r1, #16
 8002c34:	486d      	ldr	r0, [pc, #436]	; (8002dec <main+0x374>)
 8002c36:	f003 f9b7 	bl	8005fa8 <HAL_GPIO_WritePin>




HAL_Delay(25);
 8002c3a:	2019      	movs	r0, #25
 8002c3c:	f001 faa0 	bl	8004180 <HAL_Delay>
send_spi1[0]=0x04; //disable write
 8002c40:	2304      	movs	r3, #4
 8002c42:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002c46:	2200      	movs	r2, #0
 8002c48:	2110      	movs	r1, #16
 8002c4a:	4868      	ldr	r0, [pc, #416]	; (8002dec <main+0x374>)
 8002c4c:	f003 f9ac 	bl	8005fa8 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002c50:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002c54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c58:	2201      	movs	r2, #1
 8002c5a:	485b      	ldr	r0, [pc, #364]	; (8002dc8 <main+0x350>)
 8002c5c:	f004 fe4b 	bl	80078f6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002c60:	2201      	movs	r2, #1
 8002c62:	2110      	movs	r1, #16
 8002c64:	4861      	ldr	r0, [pc, #388]	; (8002dec <main+0x374>)
 8002c66:	f003 f99f 	bl	8005fa8 <HAL_GPIO_WritePin>

HAL_Delay(5);
 8002c6a:	2005      	movs	r0, #5
 8002c6c:	f001 fa88 	bl	8004180 <HAL_Delay>
memcpy  (send_spi1,return_spi1, 14);   // clear out
 8002c70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c74:	220e      	movs	r2, #14
 8002c76:	4960      	ldr	r1, [pc, #384]	; (8002df8 <main+0x380>)
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f006 fc8d 	bl	8009598 <memcpy>
send_spi1[0]=0x03; //read page 1
 8002c7e:	2303      	movs	r3, #3
 8002c80:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
send_spi1[1]=0; //24bit address msb
 8002c84:	2300      	movs	r3, #0
 8002c86:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
send_spi1[2]=0; //24bit address
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
send_spi1[3]=1; //24bit address lsb
 8002c90:	2301      	movs	r3, #1
 8002c92:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8002c96:	2200      	movs	r2, #0
 8002c98:	2110      	movs	r1, #16
 8002c9a:	4854      	ldr	r0, [pc, #336]	; (8002dec <main+0x374>)
 8002c9c:	f003 f984 	bl	8005fa8 <HAL_GPIO_WritePin>

HAL_SPI_Transmit (&hspi1, send_spi1, 4, 100);
 8002ca0:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002ca4:	2364      	movs	r3, #100	; 0x64
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	4847      	ldr	r0, [pc, #284]	; (8002dc8 <main+0x350>)
 8002caa:	f004 fe24 	bl	80078f6 <HAL_SPI_Transmit>
HAL_SPI_Receive (&hspi1, return_spi1, 10, 100);
 8002cae:	2364      	movs	r3, #100	; 0x64
 8002cb0:	220a      	movs	r2, #10
 8002cb2:	4951      	ldr	r1, [pc, #324]	; (8002df8 <main+0x380>)
 8002cb4:	4844      	ldr	r0, [pc, #272]	; (8002dc8 <main+0x350>)
 8002cb6:	f004 ff5a 	bl	8007b6e <HAL_SPI_Receive>

//HAL_SPI_TransmitReceive(&hspi1, send_spi1, return_spi1,14, 100);  // better in case skip , 4 bytes is null then data , hex is good
//HAL_Delay(5);

//HAL_SPI_Receive(&hspi1, return_spi1, 12, 1000);  // reverse msb ?
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002cba:	2201      	movs	r2, #1
 8002cbc:	2110      	movs	r1, #16
 8002cbe:	484b      	ldr	r0, [pc, #300]	; (8002dec <main+0x374>)
 8002cc0:	f003 f972 	bl	8005fa8 <HAL_GPIO_WritePin>
send_spi1[1]=0; //24bit address lsb
HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector
*/


HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002cc4:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002cc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ccc:	2201      	movs	r2, #1
 8002cce:	483e      	ldr	r0, [pc, #248]	; (8002dc8 <main+0x350>)
 8002cd0:	f004 fe11 	bl	80078f6 <HAL_SPI_Transmit>
} // reads stored values for potvalues
*/

uint8_t potSource2[65];
uint8_t potSource3[65];
HAL_I2C_Mem_Read(&hi2c2, 160, (1<<6), 2,&potSource, 64,1000);		// all good
 8002cd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cd8:	9302      	str	r3, [sp, #8]
 8002cda:	2340      	movs	r3, #64	; 0x40
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	4b47      	ldr	r3, [pc, #284]	; (8002dfc <main+0x384>)
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	2240      	movs	r2, #64	; 0x40
 8002ce6:	21a0      	movs	r1, #160	; 0xa0
 8002ce8:	483e      	ldr	r0, [pc, #248]	; (8002de4 <main+0x36c>)
 8002cea:	f003 fbb5 	bl	8006458 <HAL_I2C_Mem_Read>
HAL_I2C_Mem_Read(&hi2c2, 160, (2<<6), 2,&potSource2,64,1000);
 8002cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cf2:	9302      	str	r3, [sp, #8]
 8002cf4:	2340      	movs	r3, #64	; 0x40
 8002cf6:	9301      	str	r3, [sp, #4]
 8002cf8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	2302      	movs	r3, #2
 8002d00:	2280      	movs	r2, #128	; 0x80
 8002d02:	21a0      	movs	r1, #160	; 0xa0
 8002d04:	4837      	ldr	r0, [pc, #220]	; (8002de4 <main+0x36c>)
 8002d06:	f003 fba7 	bl	8006458 <HAL_I2C_Mem_Read>
HAL_I2C_Mem_Read(&hi2c2, 160, (3<<6), 2,&potSource3,64,1000);
 8002d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d0e:	9302      	str	r3, [sp, #8]
 8002d10:	2340      	movs	r3, #64	; 0x40
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	f107 0308 	add.w	r3, r7, #8
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	22c0      	movs	r2, #192	; 0xc0
 8002d1e:	21a0      	movs	r1, #160	; 0xa0
 8002d20:	4830      	ldr	r0, [pc, #192]	; (8002de4 <main+0x36c>)
 8002d22:	f003 fb99 	bl	8006458 <HAL_I2C_Mem_Read>

for(i=0;i<1024;i++){
 8002d26:	4b36      	ldr	r3, [pc, #216]	; (8002e00 <main+0x388>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	801a      	strh	r2, [r3, #0]
 8002d2c:	e024      	b.n	8002d78 <main+0x300>
//	gfx_ram[i]=gfx_char[((i>>5)&7)+((i>>8)<<3)]; // test input fill  8*128 v+h just normal characters
	gfx_ram[i&63] [i>>6]  =gfx_char[8+(i&7)+(((i>>3)*8)&63)];
 8002d2e:	4b34      	ldr	r3, [pc, #208]	; (8002e00 <main+0x388>)
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	f103 0208 	add.w	r2, r3, #8
 8002d3a:	4b31      	ldr	r3, [pc, #196]	; (8002e00 <main+0x388>)
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	08db      	lsrs	r3, r3, #3
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d48:	441a      	add	r2, r3
 8002d4a:	4b2d      	ldr	r3, [pc, #180]	; (8002e00 <main+0x388>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d52:	492b      	ldr	r1, [pc, #172]	; (8002e00 <main+0x388>)
 8002d54:	8809      	ldrh	r1, [r1, #0]
 8002d56:	0989      	lsrs	r1, r1, #6
 8002d58:	b289      	uxth	r1, r1
 8002d5a:	4608      	mov	r0, r1
 8002d5c:	4929      	ldr	r1, [pc, #164]	; (8002e04 <main+0x38c>)
 8002d5e:	5c89      	ldrb	r1, [r1, r2]
 8002d60:	4a29      	ldr	r2, [pc, #164]	; (8002e08 <main+0x390>)
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	4413      	add	r3, r2
 8002d66:	4403      	add	r3, r0
 8002d68:	460a      	mov	r2, r1
 8002d6a:	701a      	strb	r2, [r3, #0]
for(i=0;i<1024;i++){
 8002d6c:	4b24      	ldr	r3, [pc, #144]	; (8002e00 <main+0x388>)
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	3301      	adds	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <main+0x388>)
 8002d76:	801a      	strh	r2, [r3, #0]
 8002d78:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <main+0x388>)
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d80:	d3d5      	bcc.n	8002d2e <main+0x2b6>
//gfx_ram[i&63] [i>>6]  =250;
}

for(i=0;i<64;i++){
 8002d82:	4b1f      	ldr	r3, [pc, #124]	; (8002e00 <main+0x388>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	801a      	strh	r2, [r3, #0]
 8002d88:	e011      	b.n	8002dae <main+0x336>
	potSource[i+64]=potSource2[i];  //load up from eeprom
 8002d8a:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <main+0x388>)
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <main+0x388>)
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	3340      	adds	r3, #64	; 0x40
 8002d96:	32c0      	adds	r2, #192	; 0xc0
 8002d98:	443a      	add	r2, r7
 8002d9a:	f812 1c74 	ldrb.w	r1, [r2, #-116]
 8002d9e:	4a17      	ldr	r2, [pc, #92]	; (8002dfc <main+0x384>)
 8002da0:	54d1      	strb	r1, [r2, r3]
for(i=0;i<64;i++){
 8002da2:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <main+0x388>)
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	3301      	adds	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <main+0x388>)
 8002dac:	801a      	strh	r2, [r3, #0]
 8002dae:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <main+0x388>)
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	2b3f      	cmp	r3, #63	; 0x3f
 8002db4:	d9e9      	bls.n	8002d8a <main+0x312>
}

for(i=0;i<64;i++){
 8002db6:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <main+0x388>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	801a      	strh	r2, [r3, #0]
 8002dbc:	e038      	b.n	8002e30 <main+0x3b8>
 8002dbe:	bf00      	nop
 8002dc0:	0800d2f0 	.word	0x0800d2f0
 8002dc4:	20002f70 	.word	0x20002f70
 8002dc8:	20002f18 	.word	0x20002f18
 8002dcc:	20003010 	.word	0x20003010
 8002dd0:	40000400 	.word	0x40000400
 8002dd4:	20002fc8 	.word	0x20002fc8
 8002dd8:	20003058 	.word	0x20003058
 8002ddc:	20002e1c 	.word	0x20002e1c
 8002de0:	2000148c 	.word	0x2000148c
 8002de4:	20002ec4 	.word	0x20002ec4
 8002de8:	0800a7e0 	.word	0x0800a7e0
 8002dec:	40020000 	.word	0x40020000
 8002df0:	200006e8 	.word	0x200006e8
 8002df4:	0800a7e8 	.word	0x0800a7e8
 8002df8:	20002e0c 	.word	0x20002e0c
 8002dfc:	20000a68 	.word	0x20000a68
 8002e00:	20000c40 	.word	0x20000c40
 8002e04:	200002c0 	.word	0x200002c0
 8002e08:	200025bc 	.word	0x200025bc
	potSource[i+128]=potSource3[i];
 8002e0c:	4ba0      	ldr	r3, [pc, #640]	; (8003090 <main+0x618>)
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	461a      	mov	r2, r3
 8002e12:	4b9f      	ldr	r3, [pc, #636]	; (8003090 <main+0x618>)
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	3380      	adds	r3, #128	; 0x80
 8002e18:	32c0      	adds	r2, #192	; 0xc0
 8002e1a:	443a      	add	r2, r7
 8002e1c:	f812 1cb8 	ldrb.w	r1, [r2, #-184]
 8002e20:	4a9c      	ldr	r2, [pc, #624]	; (8003094 <main+0x61c>)
 8002e22:	54d1      	strb	r1, [r2, r3]
for(i=0;i<64;i++){
 8002e24:	4b9a      	ldr	r3, [pc, #616]	; (8003090 <main+0x618>)
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	4b98      	ldr	r3, [pc, #608]	; (8003090 <main+0x618>)
 8002e2e:	801a      	strh	r2, [r3, #0]
 8002e30:	4b97      	ldr	r3, [pc, #604]	; (8003090 <main+0x618>)
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	2b3f      	cmp	r3, #63	; 0x3f
 8002e36:	d9e9      	bls.n	8002e0c <main+0x394>
}

for(i=0;i<180;i++){
 8002e38:	4b95      	ldr	r3, [pc, #596]	; (8003090 <main+0x618>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	801a      	strh	r2, [r3, #0]
 8002e3e:	e010      	b.n	8002e62 <main+0x3ea>
	potValues[i]=potSource[i]>>4;
 8002e40:	4b93      	ldr	r3, [pc, #588]	; (8003090 <main+0x618>)
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b93      	ldr	r3, [pc, #588]	; (8003094 <main+0x61c>)
 8002e48:	5c9b      	ldrb	r3, [r3, r2]
 8002e4a:	4a91      	ldr	r2, [pc, #580]	; (8003090 <main+0x618>)
 8002e4c:	8812      	ldrh	r2, [r2, #0]
 8002e4e:	091b      	lsrs	r3, r3, #4
 8002e50:	b2d9      	uxtb	r1, r3
 8002e52:	4b91      	ldr	r3, [pc, #580]	; (8003098 <main+0x620>)
 8002e54:	5499      	strb	r1, [r3, r2]
for(i=0;i<180;i++){
 8002e56:	4b8e      	ldr	r3, [pc, #568]	; (8003090 <main+0x618>)
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	4b8c      	ldr	r3, [pc, #560]	; (8003090 <main+0x618>)
 8002e60:	801a      	strh	r2, [r3, #0]
 8002e62:	4b8b      	ldr	r3, [pc, #556]	; (8003090 <main+0x618>)
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	2bb3      	cmp	r3, #179	; 0xb3
 8002e68:	d9ea      	bls.n	8002e40 <main+0x3c8>
}

float tempo_hold;  // calculate tempo look up
for (i=0;i<161;i++) {
 8002e6a:	4b89      	ldr	r3, [pc, #548]	; (8003090 <main+0x618>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	801a      	strh	r2, [r3, #0]
 8002e70:	e040      	b.n	8002ef4 <main+0x47c>

tempo_hold=(i+180)*0.0166666666;
 8002e72:	4b87      	ldr	r3, [pc, #540]	; (8003090 <main+0x618>)
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	33b4      	adds	r3, #180	; 0xb4
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd fc7d 	bl	8000778 <__aeabi_i2d>
 8002e7e:	a380      	add	r3, pc, #512	; (adr r3, 8003080 <main+0x608>)
 8002e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e84:	f7fd f9fc 	bl	8000280 <__aeabi_dmul>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	4619      	mov	r1, r3
 8002e90:	f7fd fcdc 	bl	800084c <__aeabi_d2f>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

tempo_hold=	1/tempo_hold;
 8002e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e9e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ea6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
//tempo_hold=	tempo_hold*2187.6*4;      // change for the sake of note length
tempo_hold=	tempo_hold*2187.6*1;      // change for the sake of note length
 8002eaa:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8002eae:	f7fd fc75 	bl	800079c <__aeabi_f2d>
 8002eb2:	a375      	add	r3, pc, #468	; (adr r3, 8003088 <main+0x610>)
 8002eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb8:	f7fd f9e2 	bl	8000280 <__aeabi_dmul>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	f7fd fcc2 	bl	800084c <__aeabi_d2f>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
tempo_lut[i]=tempo_hold;
 8002ece:	4b70      	ldr	r3, [pc, #448]	; (8003090 <main+0x618>)
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002edc:	ee17 3a90 	vmov	r3, s15
 8002ee0:	b299      	uxth	r1, r3
 8002ee2:	4b6e      	ldr	r3, [pc, #440]	; (800309c <main+0x624>)
 8002ee4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<161;i++) {
 8002ee8:	4b69      	ldr	r3, [pc, #420]	; (8003090 <main+0x618>)
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	3301      	adds	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <main+0x618>)
 8002ef2:	801a      	strh	r2, [r3, #0]
 8002ef4:	4b66      	ldr	r3, [pc, #408]	; (8003090 <main+0x618>)
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	2ba0      	cmp	r3, #160	; 0xa0
 8002efa:	d9ba      	bls.n	8002e72 <main+0x3fa>
}
isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount
 8002efc:	4b68      	ldr	r3, [pc, #416]	; (80030a0 <main+0x628>)
 8002efe:	f240 223b 	movw	r2, #571	; 0x23b
 8002f02:	801a      	strh	r2, [r3, #0]

noteTiming=24;
 8002f04:	4b67      	ldr	r3, [pc, #412]	; (80030a4 <main+0x62c>)
 8002f06:	2218      	movs	r2, #24
 8002f08:	701a      	strb	r2, [r3, #0]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8002f0a:	4b61      	ldr	r3, [pc, #388]	; (8003090 <main+0x618>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	801a      	strh	r2, [r3, #0]
 8002f10:	e00b      	b.n	8002f2a <main+0x4b2>
	spell[i]=67;
 8002f12:	4b5f      	ldr	r3, [pc, #380]	; (8003090 <main+0x618>)
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	4b63      	ldr	r3, [pc, #396]	; (80030a8 <main+0x630>)
 8002f1a:	2143      	movs	r1, #67	; 0x43
 8002f1c:	5499      	strb	r1, [r3, r2]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8002f1e:	4b5c      	ldr	r3, [pc, #368]	; (8003090 <main+0x618>)
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	4b5a      	ldr	r3, [pc, #360]	; (8003090 <main+0x618>)
 8002f28:	801a      	strh	r2, [r3, #0]
 8002f2a:	4b59      	ldr	r3, [pc, #356]	; (8003090 <main+0x618>)
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002f32:	d3ee      	bcc.n	8002f12 <main+0x49a>

}

display_fill();
 8002f34:	f7fe f9e0 	bl	80012f8 <display_fill>
// build display, enc_lut2, works good

for (i=0;i<512;i++)	{gfx_char[i]=gfx_char[i];
 8002f38:	4b55      	ldr	r3, [pc, #340]	; (8003090 <main+0x618>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	801a      	strh	r2, [r3, #0]
 8002f3e:	e00f      	b.n	8002f60 <main+0x4e8>
 8002f40:	4b53      	ldr	r3, [pc, #332]	; (8003090 <main+0x618>)
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	4619      	mov	r1, r3
 8002f46:	4b52      	ldr	r3, [pc, #328]	; (8003090 <main+0x618>)
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4b57      	ldr	r3, [pc, #348]	; (80030ac <main+0x634>)
 8002f4e:	5c59      	ldrb	r1, [r3, r1]
 8002f50:	4b56      	ldr	r3, [pc, #344]	; (80030ac <main+0x634>)
 8002f52:	5499      	strb	r1, [r3, r2]
 8002f54:	4b4e      	ldr	r3, [pc, #312]	; (8003090 <main+0x618>)
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	4b4c      	ldr	r3, [pc, #304]	; (8003090 <main+0x618>)
 8002f5e:	801a      	strh	r2, [r3, #0]
 8002f60:	4b4b      	ldr	r3, [pc, #300]	; (8003090 <main+0x618>)
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f68:	d3ea      	bcc.n	8002f40 <main+0x4c8>




//   produce extra menu pages here /////////////////////////////////////////////////////////////////////////////////
uint16_t lut_temp2=0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
uint16_t lut_temp3=0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
for  (i=0;i<390;i++){					// get a few more pages
 8002f76:	4b46      	ldr	r3, [pc, #280]	; (8003090 <main+0x618>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	801a      	strh	r2, [r3, #0]
 8002f7c:	e027      	b.n	8002fce <main+0x556>

	if (disp_lut [i>>4] [i&15] <95) lut_temp2=lut_temp2+1;    // skip space or characters
 8002f7e:	4b44      	ldr	r3, [pc, #272]	; (8003090 <main+0x618>)
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	091b      	lsrs	r3, r3, #4
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <main+0x618>)
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	4947      	ldr	r1, [pc, #284]	; (80030b0 <main+0x638>)
 8002f92:	0112      	lsls	r2, r2, #4
 8002f94:	4413      	add	r3, r2
 8002f96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002f9a:	2b5e      	cmp	r3, #94	; 0x5e
 8002f9c:	d805      	bhi.n	8002faa <main+0x532>
 8002f9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8002fa8:	e00b      	b.n	8002fc2 <main+0x54a>

	else {enc2_lut[lut_temp3] =i;  lut_temp3++;}     // goes to 511
 8002faa:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8002fae:	4a38      	ldr	r2, [pc, #224]	; (8003090 <main+0x618>)
 8002fb0:	8811      	ldrh	r1, [r2, #0]
 8002fb2:	4a40      	ldr	r2, [pc, #256]	; (80030b4 <main+0x63c>)
 8002fb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002fb8:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
for  (i=0;i<390;i++){					// get a few more pages
 8002fc2:	4b33      	ldr	r3, [pc, #204]	; (8003090 <main+0x618>)
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	4b31      	ldr	r3, [pc, #196]	; (8003090 <main+0x618>)
 8002fcc:	801a      	strh	r2, [r3, #0]
 8002fce:	4b30      	ldr	r3, [pc, #192]	; (8003090 <main+0x618>)
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8002fd6:	d3d2      	bcc.n	8002f7e <main+0x506>
}


menuSelect=0;
 8002fd8:	4b37      	ldr	r3, [pc, #220]	; (80030b8 <main+0x640>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 8002fde:	4b37      	ldr	r3, [pc, #220]	; (80030bc <main+0x644>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
printf("Hello everybody");
 8002fe4:	4836      	ldr	r0, [pc, #216]	; (80030c0 <main+0x648>)
 8002fe6:	f006 faed 	bl	80095c4 <iprintf>
  while (1)																																																		//   while loop
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 8002fea:	4b36      	ldr	r3, [pc, #216]	; (80030c4 <main+0x64c>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	4b34      	ldr	r3, [pc, #208]	; (80030c4 <main+0x64c>)
 8002ff4:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;//
 8002ff6:	4b34      	ldr	r3, [pc, #208]	; (80030c8 <main+0x650>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	4a32      	ldr	r2, [pc, #200]	; (80030c8 <main+0x650>)
 8002ffe:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing
if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick
 8003000:	4b31      	ldr	r3, [pc, #196]	; (80030c8 <main+0x650>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	2b06      	cmp	r3, #6
 800300a:	d101      	bne.n	8003010 <main+0x598>
 800300c:	f7fd fea6 	bl	8000d5c <analoginputloopb>
if (loop_counter2==9096) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour
 8003010:	4b2d      	ldr	r3, [pc, #180]	; (80030c8 <main+0x650>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f242 3288 	movw	r2, #9096	; 0x2388
 8003018:	4293      	cmp	r3, r2
 800301a:	d166      	bne.n	80030ea <main+0x672>

	mem_buf=potSource[mem_count];
 800301c:	4b2b      	ldr	r3, [pc, #172]	; (80030cc <main+0x654>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <main+0x61c>)
 8003024:	5c9a      	ldrb	r2, [r3, r2]
 8003026:	4b2a      	ldr	r3, [pc, #168]	; (80030d0 <main+0x658>)
 8003028:	701a      	strb	r2, [r3, #0]
	// read values from stored
	HAL_I2C_Mem_Write(&hi2c2, 160, ((1+(mem_count>>6))<<6)+(mem_count&63), 2, &mem_buf, 1, 1000);  // "&hi2c2"  actual register address
 800302a:	4b28      	ldr	r3, [pc, #160]	; (80030cc <main+0x654>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	099b      	lsrs	r3, r3, #6
 8003030:	b2db      	uxtb	r3, r3
 8003032:	b29b      	uxth	r3, r3
 8003034:	3301      	adds	r3, #1
 8003036:	b29b      	uxth	r3, r3
 8003038:	019b      	lsls	r3, r3, #6
 800303a:	b29a      	uxth	r2, r3
 800303c:	4b23      	ldr	r3, [pc, #140]	; (80030cc <main+0x654>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003046:	b29b      	uxth	r3, r3
 8003048:	4413      	add	r3, r2
 800304a:	b29a      	uxth	r2, r3
 800304c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003050:	9302      	str	r3, [sp, #8]
 8003052:	2301      	movs	r3, #1
 8003054:	9301      	str	r3, [sp, #4]
 8003056:	4b1e      	ldr	r3, [pc, #120]	; (80030d0 <main+0x658>)
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	2302      	movs	r3, #2
 800305c:	21a0      	movs	r1, #160	; 0xa0
 800305e:	481d      	ldr	r0, [pc, #116]	; (80030d4 <main+0x65c>)
 8003060:	f003 f900 	bl	8006264 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8003064:	2005      	movs	r0, #5
 8003066:	f001 f88b 	bl	8004180 <HAL_Delay>
	if (mem_count==255) mem_count=0; else mem_count++;  // write to first
 800306a:	4b18      	ldr	r3, [pc, #96]	; (80030cc <main+0x654>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2bff      	cmp	r3, #255	; 0xff
 8003070:	d132      	bne.n	80030d8 <main+0x660>
 8003072:	4b16      	ldr	r3, [pc, #88]	; (80030cc <main+0x654>)
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
 8003078:	e034      	b.n	80030e4 <main+0x66c>
 800307a:	bf00      	nop
 800307c:	f3af 8000 	nop.w
 8003080:	0febdd13 	.word	0x0febdd13
 8003084:	3f911111 	.word	0x3f911111
 8003088:	33333333 	.word	0x33333333
 800308c:	40a11733 	.word	0x40a11733
 8003090:	20000c40 	.word	0x20000c40
 8003094:	20000a68 	.word	0x20000a68
 8003098:	200008e8 	.word	0x200008e8
 800309c:	20002478 	.word	0x20002478
 80030a0:	20000bee 	.word	0x20000bee
 80030a4:	20000be7 	.word	0x20000be7
 80030a8:	2000010c 	.word	0x2000010c
 80030ac:	200002c0 	.word	0x200002c0
 80030b0:	0800a87c 	.word	0x0800a87c
 80030b4:	20000778 	.word	0x20000778
 80030b8:	20000be8 	.word	0x20000be8
 80030bc:	20000bec 	.word	0x20000bec
 80030c0:	0800a7d0 	.word	0x0800a7d0
 80030c4:	20000c3c 	.word	0x20000c3c
 80030c8:	20002114 	.word	0x20002114
 80030cc:	20002112 	.word	0x20002112
 80030d0:	20002118 	.word	0x20002118
 80030d4:	20002ec4 	.word	0x20002ec4
 80030d8:	4b7c      	ldr	r3, [pc, #496]	; (80032cc <main+0x854>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	3301      	adds	r3, #1
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	4b7a      	ldr	r3, [pc, #488]	; (80032cc <main+0x854>)
 80030e2:	701a      	strb	r2, [r3, #0]
	loop_counter2=0; //reset
 80030e4:	4b7a      	ldr	r3, [pc, #488]	; (80032d0 <main+0x858>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]

}


	  if (disp_end==1)	 {  // displaybuffer after each full screen update on spi
 80030ea:	4b7a      	ldr	r3, [pc, #488]	; (80032d4 <main+0x85c>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d12a      	bne.n	8003148 <main+0x6d0>

		  { if (loop_counter3)  enc2_tempc=enc2_dir; else enc2_dir=enc2_tempc; }    //hold enc till finished , this to clean up characters for now ,works ok
 80030f2:	4b79      	ldr	r3, [pc, #484]	; (80032d8 <main+0x860>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d004      	beq.n	8003104 <main+0x68c>
 80030fa:	4b78      	ldr	r3, [pc, #480]	; (80032dc <main+0x864>)
 80030fc:	881a      	ldrh	r2, [r3, #0]
 80030fe:	4b78      	ldr	r3, [pc, #480]	; (80032e0 <main+0x868>)
 8003100:	801a      	strh	r2, [r3, #0]
 8003102:	e003      	b.n	800310c <main+0x694>
 8003104:	4b76      	ldr	r3, [pc, #472]	; (80032e0 <main+0x868>)
 8003106:	881a      	ldrh	r2, [r3, #0]
 8003108:	4b74      	ldr	r3, [pc, #464]	; (80032dc <main+0x864>)
 800310a:	801a      	strh	r2, [r3, #0]
		  loop_counter3=!loop_counter3;  //blinker flips on each full page refresh
 800310c:	4b72      	ldr	r3, [pc, #456]	; (80032d8 <main+0x860>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	4b6e      	ldr	r3, [pc, #440]	; (80032d8 <main+0x860>)
 800311e:	701a      	strb	r2, [r3, #0]

		  for (i=0;i<16;i++) {   displayBuffer();}
 8003120:	4b70      	ldr	r3, [pc, #448]	; (80032e4 <main+0x86c>)
 8003122:	2200      	movs	r2, #0
 8003124:	801a      	strh	r2, [r3, #0]
 8003126:	e007      	b.n	8003138 <main+0x6c0>
 8003128:	f7fe f912 	bl	8001350 <displayBuffer>
 800312c:	4b6d      	ldr	r3, [pc, #436]	; (80032e4 <main+0x86c>)
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	3301      	adds	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	4b6b      	ldr	r3, [pc, #428]	; (80032e4 <main+0x86c>)
 8003136:	801a      	strh	r2, [r3, #0]
 8003138:	4b6a      	ldr	r3, [pc, #424]	; (80032e4 <main+0x86c>)
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	2b0f      	cmp	r3, #15
 800313e:	d9f3      	bls.n	8003128 <main+0x6b0>
		  enc2_dir=enc2_tempc;
 8003140:	4b67      	ldr	r3, [pc, #412]	; (80032e0 <main+0x868>)
 8003142:	881a      	ldrh	r2, [r3, #0]
 8003144:	4b65      	ldr	r3, [pc, #404]	; (80032dc <main+0x864>)
 8003146:	801a      	strh	r2, [r3, #0]

	  }


	  if (init<6)				// after 6 its done for good
 8003148:	4b67      	ldr	r3, [pc, #412]	; (80032e8 <main+0x870>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b05      	cmp	r3, #5
 800314e:	d810      	bhi.n	8003172 <main+0x6fa>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8003150:	4b64      	ldr	r3, [pc, #400]	; (80032e4 <main+0x86c>)
 8003152:	2200      	movs	r2, #0
 8003154:	801a      	strh	r2, [r3, #0]
 8003156:	e007      	b.n	8003168 <main+0x6f0>
 8003158:	f7fd ff26 	bl	8000fa8 <display_init>
 800315c:	4b61      	ldr	r3, [pc, #388]	; (80032e4 <main+0x86c>)
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	4b5f      	ldr	r3, [pc, #380]	; (80032e4 <main+0x86c>)
 8003166:	801a      	strh	r2, [r3, #0]
 8003168:	4b5e      	ldr	r3, [pc, #376]	; (80032e4 <main+0x86c>)
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	2b05      	cmp	r3, #5
 800316e:	d9f3      	bls.n	8003158 <main+0x6e0>
 8003170:	e001      	b.n	8003176 <main+0x6fe>
} else {display_update(); }  // send spi line data every loop cycle , self contained, single 8pixel line 18*256steps
 8003172:	f7fd fff5 	bl	8001160 <display_update>

	  ///////////////////////////////////////////////////////////////////////////////

	  if (loop_counter == 255)	{ // grab adc readings + 3ms , 32 step
 8003176:	4b5d      	ldr	r3, [pc, #372]	; (80032ec <main+0x874>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2bff      	cmp	r3, #255	; 0xff
 800317c:	d128      	bne.n	80031d0 <main+0x758>



		  //HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

		  HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 800317e:	485c      	ldr	r0, [pc, #368]	; (80032f0 <main+0x878>)
 8003180:	f001 fdb4 	bl	8004cec <HAL_ADCEx_InjectedStart>
		  uint16_t adc_temp1[4]={0,0,0,0};
 8003184:	463b      	mov	r3, r7
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	605a      	str	r2, [r3, #4]

		  HAL_ADC_PollForConversion(&hadc1,10);  // works but  slow ,blocking
 800318c:	210a      	movs	r1, #10
 800318e:	4858      	ldr	r0, [pc, #352]	; (80032f0 <main+0x878>)
 8003190:	f001 f912 	bl	80043b8 <HAL_ADC_PollForConversion>

		  adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8003194:	2101      	movs	r1, #1
 8003196:	4856      	ldr	r0, [pc, #344]	; (80032f0 <main+0x878>)
 8003198:	f001 febe 	bl	8004f18 <HAL_ADCEx_InjectedGetValue>
 800319c:	4603      	mov	r3, r0
 800319e:	b29b      	uxth	r3, r3
 80031a0:	803b      	strh	r3, [r7, #0]
		  adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 80031a2:	2102      	movs	r1, #2
 80031a4:	4852      	ldr	r0, [pc, #328]	; (80032f0 <main+0x878>)
 80031a6:	f001 feb7 	bl	8004f18 <HAL_ADCEx_InjectedGetValue>
 80031aa:	4603      	mov	r3, r0
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	807b      	strh	r3, [r7, #2]
		//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
		  adc_values[0]=	  adc_temp1[0]>>7;
 80031b0:	883b      	ldrh	r3, [r7, #0]
 80031b2:	09db      	lsrs	r3, r3, #7
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	4b4f      	ldr	r3, [pc, #316]	; (80032f4 <main+0x87c>)
 80031b8:	801a      	strh	r2, [r3, #0]
		  adc_values[1]=	  adc_temp1[1]>>7;
 80031ba:	887b      	ldrh	r3, [r7, #2]
 80031bc:	09db      	lsrs	r3, r3, #7
 80031be:	b29a      	uxth	r2, r3
 80031c0:	4b4c      	ldr	r3, [pc, #304]	; (80032f4 <main+0x87c>)
 80031c2:	805a      	strh	r2, [r3, #2]
		//  adc_values[2]=	  adc_temp1[2]>>7;
		  HAL_ADCEx_InjectedStop(&hadc1) ;
 80031c4:	484a      	ldr	r0, [pc, #296]	; (80032f0 <main+0x878>)
 80031c6:	f001 fe5b 	bl	8004e80 <HAL_ADCEx_InjectedStop>


		  //HAL_ADC_Start_DMA(&hadc1, adc_source, 512);


	  	loop_counter=0;
 80031ca:	4b48      	ldr	r3, [pc, #288]	; (80032ec <main+0x874>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq_pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 80031d0:	4b49      	ldr	r3, [pc, #292]	; (80032f8 <main+0x880>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b07      	cmp	r3, #7
 80031d6:	d106      	bne.n	80031e6 <main+0x76e>
 80031d8:	4b48      	ldr	r3, [pc, #288]	; (80032fc <main+0x884>)
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d102      	bne.n	80031e6 <main+0x76e>
 80031e0:	4b46      	ldr	r3, [pc, #280]	; (80032fc <main+0x884>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	801a      	strh	r2, [r3, #0]
	   if (promValue<64) promValue=promValue+1 ; else promValue=0;  // fetch eeprom   nogo
	  	  if ((promValues[promValue] ) !=(potValues[promValue]))  EEPROM.write(promValue,(potValues[promValue]));   //  not too happy can totally kill speed  will have to put elsewhere
	  	  promValues[promValue] =potValues[promValue];
	  	   */

	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq_pos & 1)); // easy skip ?
 80031e6:	4b44      	ldr	r3, [pc, #272]	; (80032f8 <main+0x880>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031f6:	4842      	ldr	r0, [pc, #264]	; (8003300 <main+0x888>)
 80031f8:	f002 fed6 	bl	8005fa8 <HAL_GPIO_WritePin>
	  	    // very inconsistent

	  if (sample_point>511) sample_pointD=0; // loop when zero cross , good but limited, works ok
 80031fc:	4b41      	ldr	r3, [pc, #260]	; (8003304 <main+0x88c>)
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	b29b      	uxth	r3, r3
 8003202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003206:	d302      	bcc.n	800320e <main+0x796>
 8003208:	4b3f      	ldr	r3, [pc, #252]	; (8003308 <main+0x890>)
 800320a:	2200      	movs	r2, #0
 800320c:	801a      	strh	r2, [r3, #0]
	  if (sample_point<511)  sample_pointD=512;
 800320e:	4b3d      	ldr	r3, [pc, #244]	; (8003304 <main+0x88c>)
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8003218:	d803      	bhi.n	8003222 <main+0x7aa>
 800321a:	4b3b      	ldr	r3, [pc, #236]	; (8003308 <main+0x890>)
 800321c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003220:	801a      	strh	r2, [r3, #0]


	  if (sample_pointB!=sample_pointD) bank_write=1; // set start of buffer ,grab , works ok
 8003222:	4b3a      	ldr	r3, [pc, #232]	; (800330c <main+0x894>)
 8003224:	881a      	ldrh	r2, [r3, #0]
 8003226:	4b38      	ldr	r3, [pc, #224]	; (8003308 <main+0x890>)
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d002      	beq.n	8003234 <main+0x7bc>
 800322e:	4b38      	ldr	r3, [pc, #224]	; (8003310 <main+0x898>)
 8003230:	2201      	movs	r2, #1
 8003232:	801a      	strh	r2, [r3, #0]


	  	if (adc_flag) {
 8003234:	4b37      	ldr	r3, [pc, #220]	; (8003314 <main+0x89c>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	f43f aed6 	beq.w	8002fea <main+0x572>
	  		HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go
 800323e:	482c      	ldr	r0, [pc, #176]	; (80032f0 <main+0x878>)
 8003240:	f001 fa36 	bl	80046b0 <HAL_ADC_Stop_DMA>
	  		HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time
 8003244:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003248:	4933      	ldr	r1, [pc, #204]	; (8003318 <main+0x8a0>)
 800324a:	4829      	ldr	r0, [pc, #164]	; (80032f0 <main+0x878>)
 800324c:	f001 f940 	bl	80044d0 <HAL_ADC_Start_DMA>

	  			uint16_t* click=&adc_source[0];
 8003250:	4b31      	ldr	r3, [pc, #196]	; (8003318 <main+0x8a0>)
 8003252:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	  			for (i=0;i<512;i++)
 8003256:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <main+0x86c>)
 8003258:	2200      	movs	r2, #0
 800325a:	801a      	strh	r2, [r3, #0]
 800325c:	e029      	b.n	80032b2 <main+0x83a>
	  			{

	  				uint16_t crap_hold=*click;
 800325e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2

	  			uint16_t crap_hold1=*(++click);
 8003268:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800326c:	3302      	adds	r3, #2
 800326e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003272:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	  		click++;
 800327c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003280:	3302      	adds	r3, #2
 8003282:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	  				 // 				uint16_t crap_hold1=adc_source[(i*2)+1];




	  				input_holder[i] = (crap_hold+crap_hold1 )>>1;
 8003286:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 800328a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800328e:	4413      	add	r3, r2
 8003290:	1059      	asrs	r1, r3, #1
 8003292:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <main+0x86c>)
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	b289      	uxth	r1, r1
 800329a:	4b20      	ldr	r3, [pc, #128]	; (800331c <main+0x8a4>)
 800329c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  				adc_flag=0;
 80032a0:	4b1c      	ldr	r3, [pc, #112]	; (8003314 <main+0x89c>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
	  			for (i=0;i<512;i++)
 80032a6:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <main+0x86c>)
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	3301      	adds	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	4b0d      	ldr	r3, [pc, #52]	; (80032e4 <main+0x86c>)
 80032b0:	801a      	strh	r2, [r3, #0]
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <main+0x86c>)
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ba:	d3d0      	bcc.n	800325e <main+0x7e6>





	  if (bank_write){							// wait for adc
 80032bc:	4b14      	ldr	r3, [pc, #80]	; (8003310 <main+0x898>)
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f43f ae92 	beq.w	8002fea <main+0x572>




	  		//sample_point=sample_point&768 ;
	  		sampling();
 80032c6:	f7fe f9fb 	bl	80016c0 <sampling>
	  loop_counter++ ;
 80032ca:	e68e      	b.n	8002fea <main+0x572>
 80032cc:	20002112 	.word	0x20002112
 80032d0:	20002114 	.word	0x20002114
 80032d4:	20002a02 	.word	0x20002a02
 80032d8:	20002a03 	.word	0x20002a03
 80032dc:	200020fa 	.word	0x200020fa
 80032e0:	20002a04 	.word	0x20002a04
 80032e4:	20000c40 	.word	0x20000c40
 80032e8:	20002109 	.word	0x20002109
 80032ec:	20000c3c 	.word	0x20000c3c
 80032f0:	20002e1c 	.word	0x20002e1c
 80032f4:	200002b4 	.word	0x200002b4
 80032f8:	20000c18 	.word	0x20000c18
 80032fc:	20002100 	.word	0x20002100
 8003300:	40020800 	.word	0x40020800
 8003304:	20001446 	.word	0x20001446
 8003308:	2000144a 	.word	0x2000144a
 800330c:	20000c3e 	.word	0x20000c3e
 8003310:	200002be 	.word	0x200002be
 8003314:	20002e08 	.word	0x20002e08
 8003318:	2000148c 	.word	0x2000148c
 800331c:	20002a08 	.word	0x20002a08

08003320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b094      	sub	sp, #80	; 0x50
 8003324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003326:	f107 0320 	add.w	r3, r7, #32
 800332a:	2230      	movs	r2, #48	; 0x30
 800332c:	2100      	movs	r1, #0
 800332e:	4618      	mov	r0, r3
 8003330:	f006 f940 	bl	80095b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003334:	f107 030c 	add.w	r3, r7, #12
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	60da      	str	r2, [r3, #12]
 8003342:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003344:	2300      	movs	r3, #0
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	4b28      	ldr	r3, [pc, #160]	; (80033ec <SystemClock_Config+0xcc>)
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	4a27      	ldr	r2, [pc, #156]	; (80033ec <SystemClock_Config+0xcc>)
 800334e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003352:	6413      	str	r3, [r2, #64]	; 0x40
 8003354:	4b25      	ldr	r3, [pc, #148]	; (80033ec <SystemClock_Config+0xcc>)
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003360:	2300      	movs	r3, #0
 8003362:	607b      	str	r3, [r7, #4]
 8003364:	4b22      	ldr	r3, [pc, #136]	; (80033f0 <SystemClock_Config+0xd0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a21      	ldr	r2, [pc, #132]	; (80033f0 <SystemClock_Config+0xd0>)
 800336a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	4b1f      	ldr	r3, [pc, #124]	; (80033f0 <SystemClock_Config+0xd0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800337c:	2302      	movs	r3, #2
 800337e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003380:	2301      	movs	r3, #1
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003384:	2310      	movs	r3, #16
 8003386:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003388:	2302      	movs	r3, #2
 800338a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800338c:	2300      	movs	r3, #0
 800338e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003390:	2308      	movs	r3, #8
 8003392:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003394:	2364      	movs	r3, #100	; 0x64
 8003396:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003398:	2302      	movs	r3, #2
 800339a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800339c:	2304      	movs	r3, #4
 800339e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033a0:	f107 0320 	add.w	r3, r7, #32
 80033a4:	4618      	mov	r0, r3
 80033a6:	f003 fdd9 	bl	8006f5c <HAL_RCC_OscConfig>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80033b0:	f000 faf6 	bl	80039a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033b4:	230f      	movs	r3, #15
 80033b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033b8:	2302      	movs	r3, #2
 80033ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80033c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80033cc:	f107 030c 	add.w	r3, r7, #12
 80033d0:	2103      	movs	r1, #3
 80033d2:	4618      	mov	r0, r3
 80033d4:	f004 f83a 	bl	800744c <HAL_RCC_ClockConfig>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80033de:	f000 fadf 	bl	80039a0 <Error_Handler>
  }
}
 80033e2:	bf00      	nop
 80033e4:	3750      	adds	r7, #80	; 0x50
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40007000 	.word	0x40007000

080033f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08c      	sub	sp, #48	; 0x30
 80033f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033fa:	f107 0320 	add.w	r3, r7, #32
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	605a      	str	r2, [r3, #4]
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003408:	463b      	mov	r3, r7
 800340a:	2220      	movs	r2, #32
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f006 f8d0 	bl	80095b4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003414:	4b36      	ldr	r3, [pc, #216]	; (80034f0 <MX_ADC1_Init+0xfc>)
 8003416:	4a37      	ldr	r2, [pc, #220]	; (80034f4 <MX_ADC1_Init+0x100>)
 8003418:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800341a:	4b35      	ldr	r3, [pc, #212]	; (80034f0 <MX_ADC1_Init+0xfc>)
 800341c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003420:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003422:	4b33      	ldr	r3, [pc, #204]	; (80034f0 <MX_ADC1_Init+0xfc>)
 8003424:	2200      	movs	r2, #0
 8003426:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003428:	4b31      	ldr	r3, [pc, #196]	; (80034f0 <MX_ADC1_Init+0xfc>)
 800342a:	2201      	movs	r2, #1
 800342c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800342e:	4b30      	ldr	r3, [pc, #192]	; (80034f0 <MX_ADC1_Init+0xfc>)
 8003430:	2201      	movs	r2, #1
 8003432:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003434:	4b2e      	ldr	r3, [pc, #184]	; (80034f0 <MX_ADC1_Init+0xfc>)
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800343c:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <MX_ADC1_Init+0xfc>)
 800343e:	2200      	movs	r2, #0
 8003440:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003442:	4b2b      	ldr	r3, [pc, #172]	; (80034f0 <MX_ADC1_Init+0xfc>)
 8003444:	4a2c      	ldr	r2, [pc, #176]	; (80034f8 <MX_ADC1_Init+0x104>)
 8003446:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003448:	4b29      	ldr	r3, [pc, #164]	; (80034f0 <MX_ADC1_Init+0xfc>)
 800344a:	2200      	movs	r2, #0
 800344c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800344e:	4b28      	ldr	r3, [pc, #160]	; (80034f0 <MX_ADC1_Init+0xfc>)
 8003450:	2201      	movs	r2, #1
 8003452:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003454:	4b26      	ldr	r3, [pc, #152]	; (80034f0 <MX_ADC1_Init+0xfc>)
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800345c:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <MX_ADC1_Init+0xfc>)
 800345e:	2200      	movs	r2, #0
 8003460:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003462:	4823      	ldr	r0, [pc, #140]	; (80034f0 <MX_ADC1_Init+0xfc>)
 8003464:	f000 feb0 	bl	80041c8 <HAL_ADC_Init>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 800346e:	f000 fa97 	bl	80039a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003472:	2309      	movs	r3, #9
 8003474:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8003476:	2301      	movs	r3, #1
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800347a:	2306      	movs	r3, #6
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800347e:	f107 0320 	add.w	r3, r7, #32
 8003482:	4619      	mov	r1, r3
 8003484:	481a      	ldr	r0, [pc, #104]	; (80034f0 <MX_ADC1_Init+0xfc>)
 8003486:	f001 f981 	bl	800478c <HAL_ADC_ConfigChannel>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003490:	f000 fa86 	bl	80039a0 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8003494:	2300      	movs	r3, #0
 8003496:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8003498:	2301      	movs	r3, #1
 800349a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800349c:	2302      	movs	r3, #2
 800349e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 80034a0:	2303      	movs	r3, #3
 80034a2:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80034a8:	4b14      	ldr	r3, [pc, #80]	; (80034fc <MX_ADC1_Init+0x108>)
 80034aa:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80034ac:	2300      	movs	r3, #0
 80034ae:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80034b0:	2300      	movs	r3, #0
 80034b2:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80034b8:	463b      	mov	r3, r7
 80034ba:	4619      	mov	r1, r3
 80034bc:	480c      	ldr	r0, [pc, #48]	; (80034f0 <MX_ADC1_Init+0xfc>)
 80034be:	f001 fd63 	bl	8004f88 <HAL_ADCEx_InjectedConfigChannel>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80034c8:	f000 fa6a 	bl	80039a0 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80034cc:	2302      	movs	r3, #2
 80034ce:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80034d0:	2302      	movs	r3, #2
 80034d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80034d4:	463b      	mov	r3, r7
 80034d6:	4619      	mov	r1, r3
 80034d8:	4805      	ldr	r0, [pc, #20]	; (80034f0 <MX_ADC1_Init+0xfc>)
 80034da:	f001 fd55 	bl	8004f88 <HAL_ADCEx_InjectedConfigChannel>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80034e4:	f000 fa5c 	bl	80039a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80034e8:	bf00      	nop
 80034ea:	3730      	adds	r7, #48	; 0x30
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	20002e1c 	.word	0x20002e1c
 80034f4:	40012000 	.word	0x40012000
 80034f8:	0f000001 	.word	0x0f000001
 80034fc:	000f0001 	.word	0x000f0001

08003500 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003504:	4b12      	ldr	r3, [pc, #72]	; (8003550 <MX_I2C2_Init+0x50>)
 8003506:	4a13      	ldr	r2, [pc, #76]	; (8003554 <MX_I2C2_Init+0x54>)
 8003508:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800350a:	4b11      	ldr	r3, [pc, #68]	; (8003550 <MX_I2C2_Init+0x50>)
 800350c:	4a12      	ldr	r2, [pc, #72]	; (8003558 <MX_I2C2_Init+0x58>)
 800350e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003510:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <MX_I2C2_Init+0x50>)
 8003512:	2200      	movs	r2, #0
 8003514:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003516:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <MX_I2C2_Init+0x50>)
 8003518:	2200      	movs	r2, #0
 800351a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <MX_I2C2_Init+0x50>)
 800351e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003522:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003524:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <MX_I2C2_Init+0x50>)
 8003526:	2200      	movs	r2, #0
 8003528:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <MX_I2C2_Init+0x50>)
 800352c:	2200      	movs	r2, #0
 800352e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003530:	4b07      	ldr	r3, [pc, #28]	; (8003550 <MX_I2C2_Init+0x50>)
 8003532:	2200      	movs	r2, #0
 8003534:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003536:	4b06      	ldr	r3, [pc, #24]	; (8003550 <MX_I2C2_Init+0x50>)
 8003538:	2200      	movs	r2, #0
 800353a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800353c:	4804      	ldr	r0, [pc, #16]	; (8003550 <MX_I2C2_Init+0x50>)
 800353e:	f002 fd4d 	bl	8005fdc <HAL_I2C_Init>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003548:	f000 fa2a 	bl	80039a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800354c:	bf00      	nop
 800354e:	bd80      	pop	{r7, pc}
 8003550:	20002ec4 	.word	0x20002ec4
 8003554:	40005800 	.word	0x40005800
 8003558:	00061a80 	.word	0x00061a80

0800355c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003560:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <MX_SPI1_Init+0x64>)
 8003562:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <MX_SPI1_Init+0x68>)
 8003564:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003566:	4b16      	ldr	r3, [pc, #88]	; (80035c0 <MX_SPI1_Init+0x64>)
 8003568:	f44f 7282 	mov.w	r2, #260	; 0x104
 800356c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800356e:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <MX_SPI1_Init+0x64>)
 8003570:	2200      	movs	r2, #0
 8003572:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003574:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <MX_SPI1_Init+0x64>)
 8003576:	2200      	movs	r2, #0
 8003578:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800357a:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <MX_SPI1_Init+0x64>)
 800357c:	2200      	movs	r2, #0
 800357e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003580:	4b0f      	ldr	r3, [pc, #60]	; (80035c0 <MX_SPI1_Init+0x64>)
 8003582:	2200      	movs	r2, #0
 8003584:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003586:	4b0e      	ldr	r3, [pc, #56]	; (80035c0 <MX_SPI1_Init+0x64>)
 8003588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800358c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800358e:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <MX_SPI1_Init+0x64>)
 8003590:	2208      	movs	r2, #8
 8003592:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003594:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <MX_SPI1_Init+0x64>)
 8003596:	2200      	movs	r2, #0
 8003598:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800359a:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <MX_SPI1_Init+0x64>)
 800359c:	2200      	movs	r2, #0
 800359e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035a0:	4b07      	ldr	r3, [pc, #28]	; (80035c0 <MX_SPI1_Init+0x64>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80035a6:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <MX_SPI1_Init+0x64>)
 80035a8:	220a      	movs	r2, #10
 80035aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035ac:	4804      	ldr	r0, [pc, #16]	; (80035c0 <MX_SPI1_Init+0x64>)
 80035ae:	f004 f919 	bl	80077e4 <HAL_SPI_Init>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80035b8:	f000 f9f2 	bl	80039a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80035bc:	bf00      	nop
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	20002f18 	.word	0x20002f18
 80035c4:	40013000 	.word	0x40013000

080035c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80035cc:	4b17      	ldr	r3, [pc, #92]	; (800362c <MX_SPI2_Init+0x64>)
 80035ce:	4a18      	ldr	r2, [pc, #96]	; (8003630 <MX_SPI2_Init+0x68>)
 80035d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80035d2:	4b16      	ldr	r3, [pc, #88]	; (800362c <MX_SPI2_Init+0x64>)
 80035d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80035da:	4b14      	ldr	r3, [pc, #80]	; (800362c <MX_SPI2_Init+0x64>)
 80035dc:	2200      	movs	r2, #0
 80035de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80035e0:	4b12      	ldr	r3, [pc, #72]	; (800362c <MX_SPI2_Init+0x64>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035e6:	4b11      	ldr	r3, [pc, #68]	; (800362c <MX_SPI2_Init+0x64>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035ec:	4b0f      	ldr	r3, [pc, #60]	; (800362c <MX_SPI2_Init+0x64>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80035f2:	4b0e      	ldr	r3, [pc, #56]	; (800362c <MX_SPI2_Init+0x64>)
 80035f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80035fa:	4b0c      	ldr	r3, [pc, #48]	; (800362c <MX_SPI2_Init+0x64>)
 80035fc:	2230      	movs	r2, #48	; 0x30
 80035fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003600:	4b0a      	ldr	r3, [pc, #40]	; (800362c <MX_SPI2_Init+0x64>)
 8003602:	2200      	movs	r2, #0
 8003604:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <MX_SPI2_Init+0x64>)
 8003608:	2200      	movs	r2, #0
 800360a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800360c:	4b07      	ldr	r3, [pc, #28]	; (800362c <MX_SPI2_Init+0x64>)
 800360e:	2200      	movs	r2, #0
 8003610:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003612:	4b06      	ldr	r3, [pc, #24]	; (800362c <MX_SPI2_Init+0x64>)
 8003614:	220a      	movs	r2, #10
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003618:	4804      	ldr	r0, [pc, #16]	; (800362c <MX_SPI2_Init+0x64>)
 800361a:	f004 f8e3 	bl	80077e4 <HAL_SPI_Init>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003624:	f000 f9bc 	bl	80039a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003628:	bf00      	nop
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20002f70 	.word	0x20002f70
 8003630:	40003800 	.word	0x40003800

08003634 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08c      	sub	sp, #48	; 0x30
 8003638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800363a:	f107 030c 	add.w	r3, r7, #12
 800363e:	2224      	movs	r2, #36	; 0x24
 8003640:	2100      	movs	r1, #0
 8003642:	4618      	mov	r0, r3
 8003644:	f005 ffb6 	bl	80095b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003648:	1d3b      	adds	r3, r7, #4
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003650:	4b21      	ldr	r3, [pc, #132]	; (80036d8 <MX_TIM2_Init+0xa4>)
 8003652:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003656:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003658:	4b1f      	ldr	r3, [pc, #124]	; (80036d8 <MX_TIM2_Init+0xa4>)
 800365a:	2200      	movs	r2, #0
 800365c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800365e:	4b1e      	ldr	r3, [pc, #120]	; (80036d8 <MX_TIM2_Init+0xa4>)
 8003660:	2200      	movs	r2, #0
 8003662:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003664:	4b1c      	ldr	r3, [pc, #112]	; (80036d8 <MX_TIM2_Init+0xa4>)
 8003666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800366a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800366c:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <MX_TIM2_Init+0xa4>)
 800366e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003672:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003674:	4b18      	ldr	r3, [pc, #96]	; (80036d8 <MX_TIM2_Init+0xa4>)
 8003676:	2200      	movs	r2, #0
 8003678:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800367a:	2301      	movs	r3, #1
 800367c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800367e:	2302      	movs	r3, #2
 8003680:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003682:	2301      	movs	r3, #1
 8003684:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003686:	2300      	movs	r3, #0
 8003688:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 800368a:	2302      	movs	r3, #2
 800368c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800368e:	2302      	movs	r3, #2
 8003690:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003692:	2301      	movs	r3, #1
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003696:	2300      	movs	r3, #0
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 800369a:	2302      	movs	r3, #2
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800369e:	f107 030c 	add.w	r3, r7, #12
 80036a2:	4619      	mov	r1, r3
 80036a4:	480c      	ldr	r0, [pc, #48]	; (80036d8 <MX_TIM2_Init+0xa4>)
 80036a6:	f005 f85b 	bl	8008760 <HAL_TIM_Encoder_Init>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80036b0:	f000 f976 	bl	80039a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036b4:	2300      	movs	r3, #0
 80036b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036bc:	1d3b      	adds	r3, r7, #4
 80036be:	4619      	mov	r1, r3
 80036c0:	4805      	ldr	r0, [pc, #20]	; (80036d8 <MX_TIM2_Init+0xa4>)
 80036c2:	f005 fe79 	bl	80093b8 <HAL_TIMEx_MasterConfigSynchronization>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80036cc:	f000 f968 	bl	80039a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80036d0:	bf00      	nop
 80036d2:	3730      	adds	r7, #48	; 0x30
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	20002fc8 	.word	0x20002fc8

080036dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08e      	sub	sp, #56	; 0x38
 80036e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	605a      	str	r2, [r3, #4]
 80036ec:	609a      	str	r2, [r3, #8]
 80036ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f0:	f107 0320 	add.w	r3, r7, #32
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036fa:	1d3b      	adds	r3, r7, #4
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	60da      	str	r2, [r3, #12]
 8003706:	611a      	str	r2, [r3, #16]
 8003708:	615a      	str	r2, [r3, #20]
 800370a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800370c:	4b2c      	ldr	r3, [pc, #176]	; (80037c0 <MX_TIM3_Init+0xe4>)
 800370e:	4a2d      	ldr	r2, [pc, #180]	; (80037c4 <MX_TIM3_Init+0xe8>)
 8003710:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003712:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <MX_TIM3_Init+0xe4>)
 8003714:	2200      	movs	r2, #0
 8003716:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003718:	4b29      	ldr	r3, [pc, #164]	; (80037c0 <MX_TIM3_Init+0xe4>)
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2544;
 800371e:	4b28      	ldr	r3, [pc, #160]	; (80037c0 <MX_TIM3_Init+0xe4>)
 8003720:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 8003724:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003726:	4b26      	ldr	r3, [pc, #152]	; (80037c0 <MX_TIM3_Init+0xe4>)
 8003728:	2200      	movs	r2, #0
 800372a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800372c:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <MX_TIM3_Init+0xe4>)
 800372e:	2280      	movs	r2, #128	; 0x80
 8003730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003732:	4823      	ldr	r0, [pc, #140]	; (80037c0 <MX_TIM3_Init+0xe4>)
 8003734:	f004 fdfe 	bl	8008334 <HAL_TIM_Base_Init>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800373e:	f000 f92f 	bl	80039a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003746:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003748:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800374c:	4619      	mov	r1, r3
 800374e:	481c      	ldr	r0, [pc, #112]	; (80037c0 <MX_TIM3_Init+0xe4>)
 8003750:	f005 fa76 	bl	8008c40 <HAL_TIM_ConfigClockSource>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800375a:	f000 f921 	bl	80039a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800375e:	4818      	ldr	r0, [pc, #96]	; (80037c0 <MX_TIM3_Init+0xe4>)
 8003760:	f004 fef4 	bl	800854c <HAL_TIM_PWM_Init>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800376a:	f000 f919 	bl	80039a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800376e:	2300      	movs	r3, #0
 8003770:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003772:	2300      	movs	r3, #0
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003776:	f107 0320 	add.w	r3, r7, #32
 800377a:	4619      	mov	r1, r3
 800377c:	4810      	ldr	r0, [pc, #64]	; (80037c0 <MX_TIM3_Init+0xe4>)
 800377e:	f005 fe1b 	bl	80093b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003788:	f000 f90a 	bl	80039a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800378c:	2370      	movs	r3, #112	; 0x70
 800378e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003790:	2300      	movs	r3, #0
 8003792:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800379c:	1d3b      	adds	r3, r7, #4
 800379e:	2208      	movs	r2, #8
 80037a0:	4619      	mov	r1, r3
 80037a2:	4807      	ldr	r0, [pc, #28]	; (80037c0 <MX_TIM3_Init+0xe4>)
 80037a4:	f005 f98a 	bl	8008abc <HAL_TIM_PWM_ConfigChannel>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80037ae:	f000 f8f7 	bl	80039a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80037b2:	4803      	ldr	r0, [pc, #12]	; (80037c0 <MX_TIM3_Init+0xe4>)
 80037b4:	f000 fb32 	bl	8003e1c <HAL_TIM_MspPostInit>

}
 80037b8:	bf00      	nop
 80037ba:	3738      	adds	r7, #56	; 0x38
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20003010 	.word	0x20003010
 80037c4:	40000400 	.word	0x40000400

080037c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08c      	sub	sp, #48	; 0x30
 80037cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80037ce:	f107 030c 	add.w	r3, r7, #12
 80037d2:	2224      	movs	r2, #36	; 0x24
 80037d4:	2100      	movs	r1, #0
 80037d6:	4618      	mov	r0, r3
 80037d8:	f005 feec 	bl	80095b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037dc:	1d3b      	adds	r3, r7, #4
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80037e4:	4b20      	ldr	r3, [pc, #128]	; (8003868 <MX_TIM4_Init+0xa0>)
 80037e6:	4a21      	ldr	r2, [pc, #132]	; (800386c <MX_TIM4_Init+0xa4>)
 80037e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80037ea:	4b1f      	ldr	r3, [pc, #124]	; (8003868 <MX_TIM4_Init+0xa0>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037f0:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <MX_TIM4_Init+0xa0>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80037f6:	4b1c      	ldr	r3, [pc, #112]	; (8003868 <MX_TIM4_Init+0xa0>)
 80037f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037fe:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <MX_TIM4_Init+0xa0>)
 8003800:	2200      	movs	r2, #0
 8003802:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003804:	4b18      	ldr	r3, [pc, #96]	; (8003868 <MX_TIM4_Init+0xa0>)
 8003806:	2200      	movs	r2, #0
 8003808:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800380a:	2301      	movs	r3, #1
 800380c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800380e:	2302      	movs	r3, #2
 8003810:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003812:	2301      	movs	r3, #1
 8003814:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003816:	2300      	movs	r3, #0
 8003818:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 800381a:	2302      	movs	r3, #2
 800381c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800381e:	2302      	movs	r3, #2
 8003820:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003822:	2301      	movs	r3, #1
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003826:	2300      	movs	r3, #0
 8003828:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 800382a:	2302      	movs	r3, #2
 800382c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800382e:	f107 030c 	add.w	r3, r7, #12
 8003832:	4619      	mov	r1, r3
 8003834:	480c      	ldr	r0, [pc, #48]	; (8003868 <MX_TIM4_Init+0xa0>)
 8003836:	f004 ff93 	bl	8008760 <HAL_TIM_Encoder_Init>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003840:	f000 f8ae 	bl	80039a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003844:	2300      	movs	r3, #0
 8003846:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003848:	2300      	movs	r3, #0
 800384a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800384c:	1d3b      	adds	r3, r7, #4
 800384e:	4619      	mov	r1, r3
 8003850:	4805      	ldr	r0, [pc, #20]	; (8003868 <MX_TIM4_Init+0xa0>)
 8003852:	f005 fdb1 	bl	80093b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800385c:	f000 f8a0 	bl	80039a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003860:	bf00      	nop
 8003862:	3730      	adds	r7, #48	; 0x30
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20003058 	.word	0x20003058
 800386c:	40000800 	.word	0x40000800

08003870 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	607b      	str	r3, [r7, #4]
 800387a:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <MX_DMA_Init+0x3c>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	4a0b      	ldr	r2, [pc, #44]	; (80038ac <MX_DMA_Init+0x3c>)
 8003880:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003884:	6313      	str	r3, [r2, #48]	; 0x30
 8003886:	4b09      	ldr	r3, [pc, #36]	; (80038ac <MX_DMA_Init+0x3c>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800388e:	607b      	str	r3, [r7, #4]
 8003890:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8003892:	2200      	movs	r2, #0
 8003894:	2100      	movs	r1, #0
 8003896:	203c      	movs	r0, #60	; 0x3c
 8003898:	f001 fdeb 	bl	8005472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800389c:	203c      	movs	r0, #60	; 0x3c
 800389e:	f001 fe04 	bl	80054aa <HAL_NVIC_EnableIRQ>

}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40023800 	.word	0x40023800

080038b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b6:	f107 030c 	add.w	r3, r7, #12
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	605a      	str	r2, [r3, #4]
 80038c0:	609a      	str	r2, [r3, #8]
 80038c2:	60da      	str	r2, [r3, #12]
 80038c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	4b2a      	ldr	r3, [pc, #168]	; (8003974 <MX_GPIO_Init+0xc4>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	4a29      	ldr	r2, [pc, #164]	; (8003974 <MX_GPIO_Init+0xc4>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	6313      	str	r3, [r2, #48]	; 0x30
 80038d6:	4b27      	ldr	r3, [pc, #156]	; (8003974 <MX_GPIO_Init+0xc4>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	4b23      	ldr	r3, [pc, #140]	; (8003974 <MX_GPIO_Init+0xc4>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	4a22      	ldr	r2, [pc, #136]	; (8003974 <MX_GPIO_Init+0xc4>)
 80038ec:	f043 0302 	orr.w	r3, r3, #2
 80038f0:	6313      	str	r3, [r2, #48]	; 0x30
 80038f2:	4b20      	ldr	r3, [pc, #128]	; (8003974 <MX_GPIO_Init+0xc4>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	607b      	str	r3, [r7, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	603b      	str	r3, [r7, #0]
 8003902:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <MX_GPIO_Init+0xc4>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	4a1b      	ldr	r2, [pc, #108]	; (8003974 <MX_GPIO_Init+0xc4>)
 8003908:	f043 0304 	orr.w	r3, r3, #4
 800390c:	6313      	str	r3, [r2, #48]	; 0x30
 800390e:	4b19      	ldr	r3, [pc, #100]	; (8003974 <MX_GPIO_Init+0xc4>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800391a:	2200      	movs	r2, #0
 800391c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003920:	4815      	ldr	r0, [pc, #84]	; (8003978 <MX_GPIO_Init+0xc8>)
 8003922:	f002 fb41 	bl	8005fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8003926:	2201      	movs	r2, #1
 8003928:	2110      	movs	r1, #16
 800392a:	4814      	ldr	r0, [pc, #80]	; (800397c <MX_GPIO_Init+0xcc>)
 800392c:	f002 fb3c 	bl	8005fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003934:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003936:	2301      	movs	r3, #1
 8003938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003942:	f107 030c 	add.w	r3, r7, #12
 8003946:	4619      	mov	r1, r3
 8003948:	480b      	ldr	r0, [pc, #44]	; (8003978 <MX_GPIO_Init+0xc8>)
 800394a:	f002 f9a9 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 800394e:	2310      	movs	r3, #16
 8003950:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003952:	2301      	movs	r3, #1
 8003954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800395a:	2303      	movs	r3, #3
 800395c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 800395e:	f107 030c 	add.w	r3, r7, #12
 8003962:	4619      	mov	r1, r3
 8003964:	4805      	ldr	r0, [pc, #20]	; (800397c <MX_GPIO_Init+0xcc>)
 8003966:	f002 f99b 	bl	8005ca0 <HAL_GPIO_Init>

}
 800396a:	bf00      	nop
 800396c:	3720      	adds	r7, #32
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800
 8003978:	40020800 	.word	0x40020800
 800397c:	40020000 	.word	0x40020000

08003980 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
adc_flag=1;
 8003988:	4b04      	ldr	r3, [pc, #16]	; (800399c <HAL_ADC_ConvCpltCallback+0x1c>)
 800398a:	2201      	movs	r2, #1
 800398c:	701a      	strb	r2, [r3, #0]


}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	20002e08 	.word	0x20002e08

080039a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039a4:	b672      	cpsid	i
}
 80039a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039a8:	e7fe      	b.n	80039a8 <Error_Handler+0x8>
	...

080039ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	607b      	str	r3, [r7, #4]
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <HAL_MspInit+0x4c>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	4a0f      	ldr	r2, [pc, #60]	; (80039f8 <HAL_MspInit+0x4c>)
 80039bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c0:	6453      	str	r3, [r2, #68]	; 0x44
 80039c2:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <HAL_MspInit+0x4c>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ca:	607b      	str	r3, [r7, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	603b      	str	r3, [r7, #0]
 80039d2:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <HAL_MspInit+0x4c>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	4a08      	ldr	r2, [pc, #32]	; (80039f8 <HAL_MspInit+0x4c>)
 80039d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039dc:	6413      	str	r3, [r2, #64]	; 0x40
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_MspInit+0x4c>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800

080039fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a04:	f107 0314 	add.w	r3, r7, #20
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a3c      	ldr	r2, [pc, #240]	; (8003b0c <HAL_ADC_MspInit+0x110>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d171      	bne.n	8003b02 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	4b3b      	ldr	r3, [pc, #236]	; (8003b10 <HAL_ADC_MspInit+0x114>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	4a3a      	ldr	r2, [pc, #232]	; (8003b10 <HAL_ADC_MspInit+0x114>)
 8003a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a2e:	4b38      	ldr	r3, [pc, #224]	; (8003b10 <HAL_ADC_MspInit+0x114>)
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	4b34      	ldr	r3, [pc, #208]	; (8003b10 <HAL_ADC_MspInit+0x114>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	4a33      	ldr	r2, [pc, #204]	; (8003b10 <HAL_ADC_MspInit+0x114>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4a:	4b31      	ldr	r3, [pc, #196]	; (8003b10 <HAL_ADC_MspInit+0x114>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	60bb      	str	r3, [r7, #8]
 8003a5a:	4b2d      	ldr	r3, [pc, #180]	; (8003b10 <HAL_ADC_MspInit+0x114>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	4a2c      	ldr	r2, [pc, #176]	; (8003b10 <HAL_ADC_MspInit+0x114>)
 8003a60:	f043 0302 	orr.w	r3, r3, #2
 8003a64:	6313      	str	r3, [r2, #48]	; 0x30
 8003a66:	4b2a      	ldr	r3, [pc, #168]	; (8003b10 <HAL_ADC_MspInit+0x114>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 8003a72:	2305      	movs	r3, #5
 8003a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a76:	2303      	movs	r3, #3
 8003a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a7e:	f107 0314 	add.w	r3, r7, #20
 8003a82:	4619      	mov	r1, r3
 8003a84:	4823      	ldr	r0, [pc, #140]	; (8003b14 <HAL_ADC_MspInit+0x118>)
 8003a86:	f002 f90b 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a96:	f107 0314 	add.w	r3, r7, #20
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	481e      	ldr	r0, [pc, #120]	; (8003b18 <HAL_ADC_MspInit+0x11c>)
 8003a9e:	f002 f8ff 	bl	8005ca0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <HAL_ADC_MspInit+0x120>)
 8003aa4:	4a1e      	ldr	r2, [pc, #120]	; (8003b20 <HAL_ADC_MspInit+0x124>)
 8003aa6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003aa8:	4b1c      	ldr	r3, [pc, #112]	; (8003b1c <HAL_ADC_MspInit+0x120>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aae:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <HAL_ADC_MspInit+0x120>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ab4:	4b19      	ldr	r3, [pc, #100]	; (8003b1c <HAL_ADC_MspInit+0x120>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003aba:	4b18      	ldr	r3, [pc, #96]	; (8003b1c <HAL_ADC_MspInit+0x120>)
 8003abc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ac0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ac2:	4b16      	ldr	r3, [pc, #88]	; (8003b1c <HAL_ADC_MspInit+0x120>)
 8003ac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ac8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003aca:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <HAL_ADC_MspInit+0x120>)
 8003acc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ad0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003ad2:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <HAL_ADC_MspInit+0x120>)
 8003ad4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ad8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003ada:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <HAL_ADC_MspInit+0x120>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ae0:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <HAL_ADC_MspInit+0x120>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003ae6:	480d      	ldr	r0, [pc, #52]	; (8003b1c <HAL_ADC_MspInit+0x120>)
 8003ae8:	f001 fcfa 	bl	80054e0 <HAL_DMA_Init>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003af2:	f7ff ff55 	bl	80039a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a08      	ldr	r2, [pc, #32]	; (8003b1c <HAL_ADC_MspInit+0x120>)
 8003afa:	639a      	str	r2, [r3, #56]	; 0x38
 8003afc:	4a07      	ldr	r2, [pc, #28]	; (8003b1c <HAL_ADC_MspInit+0x120>)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003b02:	bf00      	nop
 8003b04:	3728      	adds	r7, #40	; 0x28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40012000 	.word	0x40012000
 8003b10:	40023800 	.word	0x40023800
 8003b14:	40020000 	.word	0x40020000
 8003b18:	40020400 	.word	0x40020400
 8003b1c:	20002e64 	.word	0x20002e64
 8003b20:	40026470 	.word	0x40026470

08003b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	; 0x28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b2c:	f107 0314 	add.w	r3, r7, #20
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	609a      	str	r2, [r3, #8]
 8003b38:	60da      	str	r2, [r3, #12]
 8003b3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a22      	ldr	r2, [pc, #136]	; (8003bcc <HAL_I2C_MspInit+0xa8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d13d      	bne.n	8003bc2 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <HAL_I2C_MspInit+0xac>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	4a20      	ldr	r2, [pc, #128]	; (8003bd0 <HAL_I2C_MspInit+0xac>)
 8003b50:	f043 0302 	orr.w	r3, r3, #2
 8003b54:	6313      	str	r3, [r2, #48]	; 0x30
 8003b56:	4b1e      	ldr	r3, [pc, #120]	; (8003bd0 <HAL_I2C_MspInit+0xac>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b68:	2312      	movs	r3, #18
 8003b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b70:	2303      	movs	r3, #3
 8003b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003b74:	2309      	movs	r3, #9
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b78:	f107 0314 	add.w	r3, r7, #20
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4815      	ldr	r0, [pc, #84]	; (8003bd4 <HAL_I2C_MspInit+0xb0>)
 8003b80:	f002 f88e 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b8a:	2312      	movs	r3, #18
 8003b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b92:	2303      	movs	r3, #3
 8003b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003b96:	2304      	movs	r3, #4
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b9a:	f107 0314 	add.w	r3, r7, #20
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	480c      	ldr	r0, [pc, #48]	; (8003bd4 <HAL_I2C_MspInit+0xb0>)
 8003ba2:	f002 f87d 	bl	8005ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_I2C_MspInit+0xac>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	4a08      	ldr	r2, [pc, #32]	; (8003bd0 <HAL_I2C_MspInit+0xac>)
 8003bb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_I2C_MspInit+0xac>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003bc2:	bf00      	nop
 8003bc4:	3728      	adds	r7, #40	; 0x28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40005800 	.word	0x40005800
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	40020400 	.word	0x40020400

08003bd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08c      	sub	sp, #48	; 0x30
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be0:	f107 031c 	add.w	r3, r7, #28
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	60da      	str	r2, [r3, #12]
 8003bee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a32      	ldr	r2, [pc, #200]	; (8003cc0 <HAL_SPI_MspInit+0xe8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d12c      	bne.n	8003c54 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	4b31      	ldr	r3, [pc, #196]	; (8003cc4 <HAL_SPI_MspInit+0xec>)
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	4a30      	ldr	r2, [pc, #192]	; (8003cc4 <HAL_SPI_MspInit+0xec>)
 8003c04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c08:	6453      	str	r3, [r2, #68]	; 0x44
 8003c0a:	4b2e      	ldr	r3, [pc, #184]	; (8003cc4 <HAL_SPI_MspInit+0xec>)
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c12:	61bb      	str	r3, [r7, #24]
 8003c14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	4b2a      	ldr	r3, [pc, #168]	; (8003cc4 <HAL_SPI_MspInit+0xec>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	4a29      	ldr	r2, [pc, #164]	; (8003cc4 <HAL_SPI_MspInit+0xec>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	6313      	str	r3, [r2, #48]	; 0x30
 8003c26:	4b27      	ldr	r3, [pc, #156]	; (8003cc4 <HAL_SPI_MspInit+0xec>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8003c32:	23e0      	movs	r3, #224	; 0xe0
 8003c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c36:	2302      	movs	r3, #2
 8003c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c42:	2305      	movs	r3, #5
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c46:	f107 031c 	add.w	r3, r7, #28
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	481e      	ldr	r0, [pc, #120]	; (8003cc8 <HAL_SPI_MspInit+0xf0>)
 8003c4e:	f002 f827 	bl	8005ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003c52:	e031      	b.n	8003cb8 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a1c      	ldr	r2, [pc, #112]	; (8003ccc <HAL_SPI_MspInit+0xf4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d12c      	bne.n	8003cb8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	4b18      	ldr	r3, [pc, #96]	; (8003cc4 <HAL_SPI_MspInit+0xec>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	4a17      	ldr	r2, [pc, #92]	; (8003cc4 <HAL_SPI_MspInit+0xec>)
 8003c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c6e:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <HAL_SPI_MspInit+0xec>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <HAL_SPI_MspInit+0xec>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	4a10      	ldr	r2, [pc, #64]	; (8003cc4 <HAL_SPI_MspInit+0xec>)
 8003c84:	f043 0302 	orr.w	r3, r3, #2
 8003c88:	6313      	str	r3, [r2, #48]	; 0x30
 8003c8a:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <HAL_SPI_MspInit+0xec>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8003c96:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ca8:	2305      	movs	r3, #5
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cac:	f107 031c 	add.w	r3, r7, #28
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4807      	ldr	r0, [pc, #28]	; (8003cd0 <HAL_SPI_MspInit+0xf8>)
 8003cb4:	f001 fff4 	bl	8005ca0 <HAL_GPIO_Init>
}
 8003cb8:	bf00      	nop
 8003cba:	3730      	adds	r7, #48	; 0x30
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40013000 	.word	0x40013000
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	40020000 	.word	0x40020000
 8003ccc:	40003800 	.word	0x40003800
 8003cd0:	40020400 	.word	0x40020400

08003cd4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08c      	sub	sp, #48	; 0x30
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cdc:	f107 031c 	add.w	r3, r7, #28
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	60da      	str	r2, [r3, #12]
 8003cea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf4:	d12d      	bne.n	8003d52 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	4b30      	ldr	r3, [pc, #192]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	4a2f      	ldr	r2, [pc, #188]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	6413      	str	r3, [r2, #64]	; 0x40
 8003d06:	4b2d      	ldr	r3, [pc, #180]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	61bb      	str	r3, [r7, #24]
 8003d10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	4b29      	ldr	r3, [pc, #164]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	4a28      	ldr	r2, [pc, #160]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	6313      	str	r3, [r2, #48]	; 0x30
 8003d22:	4b26      	ldr	r3, [pc, #152]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8003d2e:	f248 0302 	movw	r3, #32770	; 0x8002
 8003d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d34:	2302      	movs	r3, #2
 8003d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d40:	2301      	movs	r3, #1
 8003d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d44:	f107 031c 	add.w	r3, r7, #28
 8003d48:	4619      	mov	r1, r3
 8003d4a:	481d      	ldr	r0, [pc, #116]	; (8003dc0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003d4c:	f001 ffa8 	bl	8005ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003d50:	e030      	b.n	8003db4 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1b      	ldr	r2, [pc, #108]	; (8003dc4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d12b      	bne.n	8003db4 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	4b16      	ldr	r3, [pc, #88]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	4a15      	ldr	r2, [pc, #84]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003d66:	f043 0304 	orr.w	r3, r3, #4
 8003d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6c:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	4a0e      	ldr	r2, [pc, #56]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003d82:	f043 0302 	orr.w	r3, r3, #2
 8003d86:	6313      	str	r3, [r2, #48]	; 0x30
 8003d88:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d94:	23c0      	movs	r3, #192	; 0xc0
 8003d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d98:	2302      	movs	r3, #2
 8003d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003da0:	2300      	movs	r3, #0
 8003da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003da4:	2302      	movs	r3, #2
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003da8:	f107 031c 	add.w	r3, r7, #28
 8003dac:	4619      	mov	r1, r3
 8003dae:	4806      	ldr	r0, [pc, #24]	; (8003dc8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003db0:	f001 ff76 	bl	8005ca0 <HAL_GPIO_Init>
}
 8003db4:	bf00      	nop
 8003db6:	3730      	adds	r7, #48	; 0x30
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	40020000 	.word	0x40020000
 8003dc4:	40000800 	.word	0x40000800
 8003dc8:	40020400 	.word	0x40020400

08003dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a0e      	ldr	r2, [pc, #56]	; (8003e14 <HAL_TIM_Base_MspInit+0x48>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d115      	bne.n	8003e0a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <HAL_TIM_Base_MspInit+0x4c>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	4a0c      	ldr	r2, [pc, #48]	; (8003e18 <HAL_TIM_Base_MspInit+0x4c>)
 8003de8:	f043 0302 	orr.w	r3, r3, #2
 8003dec:	6413      	str	r3, [r2, #64]	; 0x40
 8003dee:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <HAL_TIM_Base_MspInit+0x4c>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	201d      	movs	r0, #29
 8003e00:	f001 fb37 	bl	8005472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003e04:	201d      	movs	r0, #29
 8003e06:	f001 fb50 	bl	80054aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40023800 	.word	0x40023800

08003e1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e24:	f107 030c 	add.w	r3, r7, #12
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	605a      	str	r2, [r3, #4]
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	60da      	str	r2, [r3, #12]
 8003e32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a12      	ldr	r2, [pc, #72]	; (8003e84 <HAL_TIM_MspPostInit+0x68>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d11d      	bne.n	8003e7a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <HAL_TIM_MspPostInit+0x6c>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	4a10      	ldr	r2, [pc, #64]	; (8003e88 <HAL_TIM_MspPostInit+0x6c>)
 8003e48:	f043 0302 	orr.w	r3, r3, #2
 8003e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4e:	4b0e      	ldr	r3, [pc, #56]	; (8003e88 <HAL_TIM_MspPostInit+0x6c>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5e:	2302      	movs	r3, #2
 8003e60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e6e:	f107 030c 	add.w	r3, r7, #12
 8003e72:	4619      	mov	r1, r3
 8003e74:	4805      	ldr	r0, [pc, #20]	; (8003e8c <HAL_TIM_MspPostInit+0x70>)
 8003e76:	f001 ff13 	bl	8005ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003e7a:	bf00      	nop
 8003e7c:	3720      	adds	r7, #32
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40000400 	.word	0x40000400
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40020400 	.word	0x40020400

08003e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e94:	e7fe      	b.n	8003e94 <NMI_Handler+0x4>

08003e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e96:	b480      	push	{r7}
 8003e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e9a:	e7fe      	b.n	8003e9a <HardFault_Handler+0x4>

08003e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ea0:	e7fe      	b.n	8003ea0 <MemManage_Handler+0x4>

08003ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ea6:	e7fe      	b.n	8003ea6 <BusFault_Handler+0x4>

08003ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003eac:	e7fe      	b.n	8003eac <UsageFault_Handler+0x4>

08003eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003eb2:	bf00      	nop
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ec0:	bf00      	nop
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003edc:	f000 f930 	bl	8004140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ee0:	bf00      	nop
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ee8:	4802      	ldr	r0, [pc, #8]	; (8003ef4 <TIM3_IRQHandler+0x10>)
 8003eea:	f004 fcdf 	bl	80088ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003eee:	bf00      	nop
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20003010 	.word	0x20003010

08003ef8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003efc:	4802      	ldr	r0, [pc, #8]	; (8003f08 <DMA2_Stream4_IRQHandler+0x10>)
 8003efe:	f001 fc65 	bl	80057cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003f02:	bf00      	nop
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20002e64 	.word	0x20002e64

08003f0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	e00a      	b.n	8003f34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f1e:	f3af 8000 	nop.w
 8003f22:	4601      	mov	r1, r0
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	60ba      	str	r2, [r7, #8]
 8003f2a:	b2ca      	uxtb	r2, r1
 8003f2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	3301      	adds	r3, #1
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	dbf0      	blt.n	8003f1e <_read+0x12>
	}

return len;
 8003f3c:	687b      	ldr	r3, [r7, #4]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
	return -1;
 8003f4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f6e:	605a      	str	r2, [r3, #4]
	return 0;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <_isatty>:

int _isatty(int file)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
	return 1;
 8003f86:	2301      	movs	r3, #1
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
	return 0;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fb8:	4a14      	ldr	r2, [pc, #80]	; (800400c <_sbrk+0x5c>)
 8003fba:	4b15      	ldr	r3, [pc, #84]	; (8004010 <_sbrk+0x60>)
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fc4:	4b13      	ldr	r3, [pc, #76]	; (8004014 <_sbrk+0x64>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d102      	bne.n	8003fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fcc:	4b11      	ldr	r3, [pc, #68]	; (8004014 <_sbrk+0x64>)
 8003fce:	4a12      	ldr	r2, [pc, #72]	; (8004018 <_sbrk+0x68>)
 8003fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fd2:	4b10      	ldr	r3, [pc, #64]	; (8004014 <_sbrk+0x64>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4413      	add	r3, r2
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d207      	bcs.n	8003ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fe0:	f005 fab0 	bl	8009544 <__errno>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	220c      	movs	r2, #12
 8003fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fea:	f04f 33ff 	mov.w	r3, #4294967295
 8003fee:	e009      	b.n	8004004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ff0:	4b08      	ldr	r3, [pc, #32]	; (8004014 <_sbrk+0x64>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ff6:	4b07      	ldr	r3, [pc, #28]	; (8004014 <_sbrk+0x64>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	4a05      	ldr	r2, [pc, #20]	; (8004014 <_sbrk+0x64>)
 8004000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004002:	68fb      	ldr	r3, [r7, #12]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	20020000 	.word	0x20020000
 8004010:	00000400 	.word	0x00000400
 8004014:	200030a0 	.word	0x200030a0
 8004018:	200030b8 	.word	0x200030b8

0800401c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004020:	4b08      	ldr	r3, [pc, #32]	; (8004044 <SystemInit+0x28>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	4a07      	ldr	r2, [pc, #28]	; (8004044 <SystemInit+0x28>)
 8004028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800402c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004030:	4b04      	ldr	r3, [pc, #16]	; (8004044 <SystemInit+0x28>)
 8004032:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004036:	609a      	str	r2, [r3, #8]
#endif
}
 8004038:	bf00      	nop
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	e000ed00 	.word	0xe000ed00

08004048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004080 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800404c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800404e:	e003      	b.n	8004058 <LoopCopyDataInit>

08004050 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004050:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004052:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004054:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004056:	3104      	adds	r1, #4

08004058 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004058:	480b      	ldr	r0, [pc, #44]	; (8004088 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800405a:	4b0c      	ldr	r3, [pc, #48]	; (800408c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800405c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800405e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004060:	d3f6      	bcc.n	8004050 <CopyDataInit>
  ldr  r2, =_sbss
 8004062:	4a0b      	ldr	r2, [pc, #44]	; (8004090 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004064:	e002      	b.n	800406c <LoopFillZerobss>

08004066 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004066:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004068:	f842 3b04 	str.w	r3, [r2], #4

0800406c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800406c:	4b09      	ldr	r3, [pc, #36]	; (8004094 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800406e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004070:	d3f9      	bcc.n	8004066 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004072:	f7ff ffd3 	bl	800401c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004076:	f005 fa6b 	bl	8009550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800407a:	f7fe fcfd 	bl	8002a78 <main>
  bx  lr    
 800407e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004080:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004084:	0800baec 	.word	0x0800baec
  ldr  r0, =_sdata
 8004088:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800408c:	2000075c 	.word	0x2000075c
  ldr  r2, =_sbss
 8004090:	2000075c 	.word	0x2000075c
  ldr  r3, = _ebss
 8004094:	200030b8 	.word	0x200030b8

08004098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004098:	e7fe      	b.n	8004098 <ADC_IRQHandler>
	...

0800409c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040a0:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <HAL_Init+0x40>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a0d      	ldr	r2, [pc, #52]	; (80040dc <HAL_Init+0x40>)
 80040a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040ac:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <HAL_Init+0x40>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <HAL_Init+0x40>)
 80040b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040b8:	4b08      	ldr	r3, [pc, #32]	; (80040dc <HAL_Init+0x40>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a07      	ldr	r2, [pc, #28]	; (80040dc <HAL_Init+0x40>)
 80040be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040c4:	2003      	movs	r0, #3
 80040c6:	f001 f9c9 	bl	800545c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040ca:	2000      	movs	r0, #0
 80040cc:	f000 f808 	bl	80040e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040d0:	f7ff fc6c 	bl	80039ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40023c00 	.word	0x40023c00

080040e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040e8:	4b12      	ldr	r3, [pc, #72]	; (8004134 <HAL_InitTick+0x54>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	4b12      	ldr	r3, [pc, #72]	; (8004138 <HAL_InitTick+0x58>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	4619      	mov	r1, r3
 80040f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80040fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fe:	4618      	mov	r0, r3
 8004100:	f001 f9e1 	bl	80054c6 <HAL_SYSTICK_Config>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e00e      	b.n	800412c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b0f      	cmp	r3, #15
 8004112:	d80a      	bhi.n	800412a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004114:	2200      	movs	r2, #0
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	f04f 30ff 	mov.w	r0, #4294967295
 800411c:	f001 f9a9 	bl	8005472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004120:	4a06      	ldr	r2, [pc, #24]	; (800413c <HAL_InitTick+0x5c>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	e000      	b.n	800412c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	200006ec 	.word	0x200006ec
 8004138:	200006f4 	.word	0x200006f4
 800413c:	200006f0 	.word	0x200006f0

08004140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004144:	4b06      	ldr	r3, [pc, #24]	; (8004160 <HAL_IncTick+0x20>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	4b06      	ldr	r3, [pc, #24]	; (8004164 <HAL_IncTick+0x24>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4413      	add	r3, r2
 8004150:	4a04      	ldr	r2, [pc, #16]	; (8004164 <HAL_IncTick+0x24>)
 8004152:	6013      	str	r3, [r2, #0]
}
 8004154:	bf00      	nop
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	200006f4 	.word	0x200006f4
 8004164:	200030a4 	.word	0x200030a4

08004168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  return uwTick;
 800416c:	4b03      	ldr	r3, [pc, #12]	; (800417c <HAL_GetTick+0x14>)
 800416e:	681b      	ldr	r3, [r3, #0]
}
 8004170:	4618      	mov	r0, r3
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	200030a4 	.word	0x200030a4

08004180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004188:	f7ff ffee 	bl	8004168 <HAL_GetTick>
 800418c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d005      	beq.n	80041a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800419a:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <HAL_Delay+0x44>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4413      	add	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041a6:	bf00      	nop
 80041a8:	f7ff ffde 	bl	8004168 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d8f7      	bhi.n	80041a8 <HAL_Delay+0x28>
  {
  }
}
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	200006f4 	.word	0x200006f4

080041c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e033      	b.n	8004246 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d109      	bne.n	80041fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff fc08 	bl	80039fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	2b00      	cmp	r3, #0
 8004204:	d118      	bne.n	8004238 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800420e:	f023 0302 	bic.w	r3, r3, #2
 8004212:	f043 0202 	orr.w	r2, r3, #2
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fbe8 	bl	80049f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f023 0303 	bic.w	r3, r3, #3
 800422e:	f043 0201 	orr.w	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	641a      	str	r2, [r3, #64]	; 0x40
 8004236:	e001      	b.n	800423c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004244:	7bfb      	ldrb	r3, [r7, #15]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <HAL_ADC_Start+0x1a>
 8004266:	2302      	movs	r3, #2
 8004268:	e097      	b.n	800439a <HAL_ADC_Start+0x14a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	d018      	beq.n	80042b2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004290:	4b45      	ldr	r3, [pc, #276]	; (80043a8 <HAL_ADC_Start+0x158>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a45      	ldr	r2, [pc, #276]	; (80043ac <HAL_ADC_Start+0x15c>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	0c9a      	lsrs	r2, r3, #18
 800429c:	4613      	mov	r3, r2
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	4413      	add	r3, r2
 80042a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80042a4:	e002      	b.n	80042ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f9      	bne.n	80042a6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d15f      	bne.n	8004380 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d007      	beq.n	80042f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80042ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fe:	d106      	bne.n	800430e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004304:	f023 0206 	bic.w	r2, r3, #6
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	645a      	str	r2, [r3, #68]	; 0x44
 800430c:	e002      	b.n	8004314 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800431c:	4b24      	ldr	r3, [pc, #144]	; (80043b0 <HAL_ADC_Start+0x160>)
 800431e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004328:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f003 031f 	and.w	r3, r3, #31
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10f      	bne.n	8004356 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d129      	bne.n	8004398 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004352:	609a      	str	r2, [r3, #8]
 8004354:	e020      	b.n	8004398 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a16      	ldr	r2, [pc, #88]	; (80043b4 <HAL_ADC_Start+0x164>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d11b      	bne.n	8004398 <HAL_ADC_Start+0x148>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d114      	bne.n	8004398 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800437c:	609a      	str	r2, [r3, #8]
 800437e:	e00b      	b.n	8004398 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	f043 0210 	orr.w	r2, r3, #16
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004390:	f043 0201 	orr.w	r2, r3, #1
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	200006ec 	.word	0x200006ec
 80043ac:	431bde83 	.word	0x431bde83
 80043b0:	40012300 	.word	0x40012300
 80043b4:	40012000 	.word	0x40012000

080043b8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d4:	d113      	bne.n	80043fe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80043e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e4:	d10b      	bne.n	80043fe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	f043 0220 	orr.w	r2, r3, #32
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e063      	b.n	80044c6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80043fe:	f7ff feb3 	bl	8004168 <HAL_GetTick>
 8004402:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004404:	e021      	b.n	800444a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440c:	d01d      	beq.n	800444a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d007      	beq.n	8004424 <HAL_ADC_PollForConversion+0x6c>
 8004414:	f7ff fea8 	bl	8004168 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d212      	bcs.n	800444a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b02      	cmp	r3, #2
 8004430:	d00b      	beq.n	800444a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f043 0204 	orr.w	r2, r3, #4
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e03d      	b.n	80044c6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b02      	cmp	r3, #2
 8004456:	d1d6      	bne.n	8004406 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0212 	mvn.w	r2, #18
 8004460:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d123      	bne.n	80044c4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004480:	2b00      	cmp	r3, #0
 8004482:	d11f      	bne.n	80044c4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800448e:	2b00      	cmp	r3, #0
 8004490:	d006      	beq.n	80044a0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800449c:	2b00      	cmp	r3, #0
 800449e:	d111      	bne.n	80044c4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d105      	bne.n	80044c4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	f043 0201 	orr.w	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_ADC_Start_DMA+0x1e>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e0ce      	b.n	800468c <HAL_ADC_Start_DMA+0x1bc>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b01      	cmp	r3, #1
 8004502:	d018      	beq.n	8004536 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004514:	4b5f      	ldr	r3, [pc, #380]	; (8004694 <HAL_ADC_Start_DMA+0x1c4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a5f      	ldr	r2, [pc, #380]	; (8004698 <HAL_ADC_Start_DMA+0x1c8>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	0c9a      	lsrs	r2, r3, #18
 8004520:	4613      	mov	r3, r2
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	4413      	add	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004528:	e002      	b.n	8004530 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	3b01      	subs	r3, #1
 800452e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1f9      	bne.n	800452a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004544:	d107      	bne.n	8004556 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004554:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b01      	cmp	r3, #1
 8004562:	f040 8086 	bne.w	8004672 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800456e:	f023 0301 	bic.w	r3, r3, #1
 8004572:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004584:	2b00      	cmp	r3, #0
 8004586:	d007      	beq.n	8004598 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004590:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a4:	d106      	bne.n	80045b4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045aa:	f023 0206 	bic.w	r2, r3, #6
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	645a      	str	r2, [r3, #68]	; 0x44
 80045b2:	e002      	b.n	80045ba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045c2:	4b36      	ldr	r3, [pc, #216]	; (800469c <HAL_ADC_Start_DMA+0x1cc>)
 80045c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	4a35      	ldr	r2, [pc, #212]	; (80046a0 <HAL_ADC_Start_DMA+0x1d0>)
 80045cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	4a34      	ldr	r2, [pc, #208]	; (80046a4 <HAL_ADC_Start_DMA+0x1d4>)
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	4a33      	ldr	r2, [pc, #204]	; (80046a8 <HAL_ADC_Start_DMA+0x1d8>)
 80045dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80045e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80045f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004606:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	334c      	adds	r3, #76	; 0x4c
 8004612:	4619      	mov	r1, r3
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f001 f810 	bl	800563c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10f      	bne.n	8004648 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d129      	bne.n	800468a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004644:	609a      	str	r2, [r3, #8]
 8004646:	e020      	b.n	800468a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a17      	ldr	r2, [pc, #92]	; (80046ac <HAL_ADC_Start_DMA+0x1dc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d11b      	bne.n	800468a <HAL_ADC_Start_DMA+0x1ba>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d114      	bne.n	800468a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800466e:	609a      	str	r2, [r3, #8]
 8004670:	e00b      	b.n	800468a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f043 0210 	orr.w	r2, r3, #16
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	f043 0201 	orr.w	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	200006ec 	.word	0x200006ec
 8004698:	431bde83 	.word	0x431bde83
 800469c:	40012300 	.word	0x40012300
 80046a0:	08004be9 	.word	0x08004be9
 80046a4:	08004ca3 	.word	0x08004ca3
 80046a8:	08004cbf 	.word	0x08004cbf
 80046ac:	40012000 	.word	0x40012000

080046b0 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_ADC_Stop_DMA+0x1a>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e048      	b.n	800475c <HAL_ADC_Stop_DMA+0xac>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0201 	bic.w	r2, r2, #1
 80046e0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d130      	bne.n	8004752 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046fe:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d10f      	bne.n	800472e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004712:	4618      	mov	r0, r3
 8004714:	f000 ffea 	bl	80056ec <HAL_DMA_Abort>
 8004718:	4603      	mov	r3, r0
 800471a:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800473c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004746:	f023 0301 	bic.w	r3, r3, #1
 800474a:	f043 0201 	orr.w	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800475a:	7bfb      	ldrb	r3, [r7, #15]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x1c>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e113      	b.n	80049d0 <HAL_ADC_ConfigChannel+0x244>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b09      	cmp	r3, #9
 80047b6:	d925      	bls.n	8004804 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68d9      	ldr	r1, [r3, #12]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	4613      	mov	r3, r2
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	4413      	add	r3, r2
 80047cc:	3b1e      	subs	r3, #30
 80047ce:	2207      	movs	r2, #7
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	43da      	mvns	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	400a      	ands	r2, r1
 80047dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68d9      	ldr	r1, [r3, #12]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	4618      	mov	r0, r3
 80047f0:	4603      	mov	r3, r0
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	4403      	add	r3, r0
 80047f6:	3b1e      	subs	r3, #30
 80047f8:	409a      	lsls	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	60da      	str	r2, [r3, #12]
 8004802:	e022      	b.n	800484a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6919      	ldr	r1, [r3, #16]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	b29b      	uxth	r3, r3
 8004810:	461a      	mov	r2, r3
 8004812:	4613      	mov	r3, r2
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	4413      	add	r3, r2
 8004818:	2207      	movs	r2, #7
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43da      	mvns	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	400a      	ands	r2, r1
 8004826:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6919      	ldr	r1, [r3, #16]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	4618      	mov	r0, r3
 800483a:	4603      	mov	r3, r0
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	4403      	add	r3, r0
 8004840:	409a      	lsls	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b06      	cmp	r3, #6
 8004850:	d824      	bhi.n	800489c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	3b05      	subs	r3, #5
 8004864:	221f      	movs	r2, #31
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43da      	mvns	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	400a      	ands	r2, r1
 8004872:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	4618      	mov	r0, r3
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	3b05      	subs	r3, #5
 800488e:	fa00 f203 	lsl.w	r2, r0, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	635a      	str	r2, [r3, #52]	; 0x34
 800489a:	e04c      	b.n	8004936 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2b0c      	cmp	r3, #12
 80048a2:	d824      	bhi.n	80048ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	4613      	mov	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	3b23      	subs	r3, #35	; 0x23
 80048b6:	221f      	movs	r2, #31
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	43da      	mvns	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	400a      	ands	r2, r1
 80048c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	4618      	mov	r0, r3
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	4613      	mov	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	3b23      	subs	r3, #35	; 0x23
 80048e0:	fa00 f203 	lsl.w	r2, r0, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	631a      	str	r2, [r3, #48]	; 0x30
 80048ec:	e023      	b.n	8004936 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	4613      	mov	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	3b41      	subs	r3, #65	; 0x41
 8004900:	221f      	movs	r2, #31
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43da      	mvns	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	400a      	ands	r2, r1
 800490e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	b29b      	uxth	r3, r3
 800491c:	4618      	mov	r0, r3
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	3b41      	subs	r3, #65	; 0x41
 800492a:	fa00 f203 	lsl.w	r2, r0, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004936:	4b29      	ldr	r3, [pc, #164]	; (80049dc <HAL_ADC_ConfigChannel+0x250>)
 8004938:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a28      	ldr	r2, [pc, #160]	; (80049e0 <HAL_ADC_ConfigChannel+0x254>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d10f      	bne.n	8004964 <HAL_ADC_ConfigChannel+0x1d8>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b12      	cmp	r3, #18
 800494a:	d10b      	bne.n	8004964 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1d      	ldr	r2, [pc, #116]	; (80049e0 <HAL_ADC_ConfigChannel+0x254>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d12b      	bne.n	80049c6 <HAL_ADC_ConfigChannel+0x23a>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1c      	ldr	r2, [pc, #112]	; (80049e4 <HAL_ADC_ConfigChannel+0x258>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d003      	beq.n	8004980 <HAL_ADC_ConfigChannel+0x1f4>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b11      	cmp	r3, #17
 800497e:	d122      	bne.n	80049c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a11      	ldr	r2, [pc, #68]	; (80049e4 <HAL_ADC_ConfigChannel+0x258>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d111      	bne.n	80049c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80049a2:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <HAL_ADC_ConfigChannel+0x25c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a11      	ldr	r2, [pc, #68]	; (80049ec <HAL_ADC_ConfigChannel+0x260>)
 80049a8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ac:	0c9a      	lsrs	r2, r3, #18
 80049ae:	4613      	mov	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049b8:	e002      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	3b01      	subs	r3, #1
 80049be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f9      	bne.n	80049ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	40012300 	.word	0x40012300
 80049e0:	40012000 	.word	0x40012000
 80049e4:	10000012 	.word	0x10000012
 80049e8:	200006ec 	.word	0x200006ec
 80049ec:	431bde83 	.word	0x431bde83

080049f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049f8:	4b79      	ldr	r3, [pc, #484]	; (8004be0 <ADC_Init+0x1f0>)
 80049fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	431a      	orrs	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6859      	ldr	r1, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	021a      	lsls	r2, r3, #8
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6859      	ldr	r1, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6899      	ldr	r1, [r3, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a82:	4a58      	ldr	r2, [pc, #352]	; (8004be4 <ADC_Init+0x1f4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d022      	beq.n	8004ace <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6899      	ldr	r1, [r3, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ab8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6899      	ldr	r1, [r3, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	e00f      	b.n	8004aee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004adc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004aec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0202 	bic.w	r2, r2, #2
 8004afc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6899      	ldr	r1, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	7e1b      	ldrb	r3, [r3, #24]
 8004b08:	005a      	lsls	r2, r3, #1
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01b      	beq.n	8004b54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6859      	ldr	r1, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	3b01      	subs	r3, #1
 8004b48:	035a      	lsls	r2, r3, #13
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
 8004b52:	e007      	b.n	8004b64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004b72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	051a      	lsls	r2, r3, #20
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6899      	ldr	r1, [r3, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ba6:	025a      	lsls	r2, r3, #9
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6899      	ldr	r1, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	029a      	lsls	r2, r3, #10
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	609a      	str	r2, [r3, #8]
}
 8004bd4:	bf00      	nop
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	40012300 	.word	0x40012300
 8004be4:	0f000001 	.word	0x0f000001

08004be8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d13c      	bne.n	8004c7c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d12b      	bne.n	8004c74 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d127      	bne.n	8004c74 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d006      	beq.n	8004c40 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d119      	bne.n	8004c74 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0220 	bic.w	r2, r2, #32
 8004c4e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d105      	bne.n	8004c74 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	f043 0201 	orr.w	r2, r3, #1
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f7fe fe83 	bl	8003980 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c7a:	e00e      	b.n	8004c9a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f7ff fd75 	bl	8004778 <HAL_ADC_ErrorCallback>
}
 8004c8e:	e004      	b.n	8004c9a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	4798      	blx	r3
}
 8004c9a:	bf00      	nop
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f7ff fd57 	bl	8004764 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cb6:	bf00      	nop
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b084      	sub	sp, #16
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2240      	movs	r2, #64	; 0x40
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd6:	f043 0204 	orr.w	r2, r3, #4
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f7ff fd4a 	bl	8004778 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ce4:	bf00      	nop
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <HAL_ADCEx_InjectedStart+0x22>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e0aa      	b.n	8004e64 <HAL_ADCEx_InjectedStart+0x178>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d018      	beq.n	8004d56 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0201 	orr.w	r2, r2, #1
 8004d32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d34:	4b4e      	ldr	r3, [pc, #312]	; (8004e70 <HAL_ADCEx_InjectedStart+0x184>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a4e      	ldr	r2, [pc, #312]	; (8004e74 <HAL_ADCEx_InjectedStart+0x188>)
 8004d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3e:	0c9a      	lsrs	r2, r3, #18
 8004d40:	4613      	mov	r3, r2
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	4413      	add	r3, r2
 8004d46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004d48:	e002      	b.n	8004d50 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1f9      	bne.n	8004d4a <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d172      	bne.n	8004e4a <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d6c:	f023 0301 	bic.w	r3, r3, #1
 8004d70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d102      	bne.n	8004d8a <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f06f 0204 	mvn.w	r2, #4
 8004d9a:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d9c:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <HAL_ADCEx_InjectedStart+0x18c>)
 8004d9e:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f003 031f 	and.w	r3, r3, #31
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d124      	bne.n	8004df6 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	bf0c      	ite	eq
 8004dba:	2301      	moveq	r3, #1
 8004dbc:	2300      	movne	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	bf0c      	ite	eq
 8004dd0:	2301      	moveq	r3, #1
 8004dd2:	2300      	movne	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d041      	beq.n	8004e62 <HAL_ADCEx_InjectedStart+0x176>
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d03e      	beq.n	8004e62 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004df2:	609a      	str	r2, [r3, #8]
 8004df4:	e035      	b.n	8004e62 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bf0c      	ite	eq
 8004e04:	2301      	moveq	r3, #1
 8004e06:	2300      	movne	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	bf0c      	ite	eq
 8004e1a:	2301      	moveq	r3, #1
 8004e1c:	2300      	movne	r3, #0
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a15      	ldr	r2, [pc, #84]	; (8004e7c <HAL_ADCEx_InjectedStart+0x190>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d11a      	bne.n	8004e62 <HAL_ADCEx_InjectedStart+0x176>
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d017      	beq.n	8004e62 <HAL_ADCEx_InjectedStart+0x176>
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d014      	beq.n	8004e62 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004e46:	609a      	str	r2, [r3, #8]
 8004e48:	e00b      	b.n	8004e62 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	f043 0210 	orr.w	r2, r3, #16
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5a:	f043 0201 	orr.w	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	200006ec 	.word	0x200006ec
 8004e74:	431bde83 	.word	0x431bde83
 8004e78:	40012300 	.word	0x40012300
 8004e7c:	40012000 	.word	0x40012000

08004e80 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_ADCEx_InjectedStop+0x1a>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e037      	b.n	8004f0a <HAL_ADCEx_InjectedStop+0x8a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d120      	bne.n	8004ef0 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d119      	bne.n	8004ef0 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0201 	bic.w	r2, r2, #1
 8004eca:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d112      	bne.n	8004f00 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004ee2:	f023 0301 	bic.w	r3, r3, #1
 8004ee6:	f043 0201 	orr.w	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004eee:	e007      	b.n	8004f00 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef4:	f043 0220 	orr.w	r2, r3, #32
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
	...

08004f18 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f06f 0204 	mvn.w	r2, #4
 8004f2e:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d81f      	bhi.n	8004f78 <HAL_ADCEx_InjectedGetValue+0x60>
 8004f38:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <HAL_ADCEx_InjectedGetValue+0x28>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004f6f 	.word	0x08004f6f
 8004f44:	08004f65 	.word	0x08004f65
 8004f48:	08004f5b 	.word	0x08004f5b
 8004f4c:	08004f51 	.word	0x08004f51
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f56:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8004f58:	e00f      	b.n	8004f7a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f60:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8004f62:	e00a      	b.n	8004f7a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004f6c:	e005      	b.n	8004f7a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f74:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004f76:	e000      	b.n	8004f7a <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8004f78:	bf00      	nop
  }
  return tmp;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e17e      	b.n	800529e <HAL_ADCEx_InjectedConfigChannel+0x316>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b09      	cmp	r3, #9
 8004fae:	d925      	bls.n	8004ffc <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68d9      	ldr	r1, [r3, #12]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	4413      	add	r3, r2
 8004fc4:	3b1e      	subs	r3, #30
 8004fc6:	2207      	movs	r2, #7
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	43da      	mvns	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	400a      	ands	r2, r1
 8004fd4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68d9      	ldr	r1, [r3, #12]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	4603      	mov	r3, r0
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	4403      	add	r3, r0
 8004fee:	3b1e      	subs	r3, #30
 8004ff0:	409a      	lsls	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	60da      	str	r2, [r3, #12]
 8004ffa:	e022      	b.n	8005042 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6919      	ldr	r1, [r3, #16]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	b29b      	uxth	r3, r3
 8005008:	461a      	mov	r2, r3
 800500a:	4613      	mov	r3, r2
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	4413      	add	r3, r2
 8005010:	2207      	movs	r2, #7
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	43da      	mvns	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	400a      	ands	r2, r1
 800501e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6919      	ldr	r1, [r3, #16]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	4618      	mov	r0, r3
 8005032:	4603      	mov	r3, r0
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	4403      	add	r3, r0
 8005038:	409a      	lsls	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005050:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	3b01      	subs	r3, #1
 800505e:	051a      	lsls	r2, r3, #20
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	b2da      	uxtb	r2, r3
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	b2db      	uxtb	r3, r3
 800507e:	3303      	adds	r3, #3
 8005080:	b2db      	uxtb	r3, r3
 8005082:	461a      	mov	r2, r3
 8005084:	4613      	mov	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	221f      	movs	r2, #31
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	43da      	mvns	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	400a      	ands	r2, r1
 8005098:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	4618      	mov	r0, r3
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	3303      	adds	r3, #3
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	fa00 f203 	lsl.w	r2, r0, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	4a75      	ldr	r2, [pc, #468]	; (80052ac <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d022      	beq.n	8005120 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80050e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6899      	ldr	r1, [r3, #8]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	699a      	ldr	r2, [r3, #24]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800510a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6899      	ldr	r1, [r3, #8]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	69da      	ldr	r2, [r3, #28]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	609a      	str	r2, [r3, #8]
 800511e:	e00f      	b.n	8005140 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800512e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800513e:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	7d5b      	ldrb	r3, [r3, #21]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d008      	beq.n	800515a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005156:	605a      	str	r2, [r3, #4]
 8005158:	e007      	b.n	800516a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005168:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	7d1b      	ldrb	r3, [r3, #20]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d008      	beq.n	8005184 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005180:	605a      	str	r2, [r3, #4]
 8005182:	e007      	b.n	8005194 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005192:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2b03      	cmp	r3, #3
 800519a:	d02e      	beq.n	80051fa <HAL_ADCEx_InjectedConfigChannel+0x272>
 800519c:	2b03      	cmp	r3, #3
 800519e:	d840      	bhi.n	8005222 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d002      	beq.n	80051aa <HAL_ADCEx_InjectedConfigChannel+0x222>
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d014      	beq.n	80051d2 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80051a8:	e03b      	b.n	8005222 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6812      	ldr	r2, [r2, #0]
 80051b4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80051b8:	f023 030f 	bic.w	r3, r3, #15
 80051bc:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6959      	ldr	r1, [r3, #20]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	68da      	ldr	r2, [r3, #12]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	615a      	str	r2, [r3, #20]
      break;
 80051d0:	e03b      	b.n	800524a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6812      	ldr	r2, [r2, #0]
 80051dc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80051e0:	f023 030f 	bic.w	r3, r3, #15
 80051e4:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6999      	ldr	r1, [r3, #24]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	619a      	str	r2, [r3, #24]
      break;
 80051f8:	e027      	b.n	800524a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005208:	f023 030f 	bic.w	r3, r3, #15
 800520c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69d9      	ldr	r1, [r3, #28]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	61da      	str	r2, [r3, #28]
      break;
 8005220:	e013      	b.n	800524a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6812      	ldr	r2, [r2, #0]
 800522c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005230:	f023 030f 	bic.w	r3, r3, #15
 8005234:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6a19      	ldr	r1, [r3, #32]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	68da      	ldr	r2, [r3, #12]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	621a      	str	r2, [r3, #32]
      break;
 8005248:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800524a:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800524c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a18      	ldr	r2, [pc, #96]	; (80052b4 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d109      	bne.n	800526c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b12      	cmp	r3, #18
 800525e:	d105      	bne.n	800526c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a10      	ldr	r2, [pc, #64]	; (80052b4 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d10e      	bne.n	8005294 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a0f      	ldr	r2, [pc, #60]	; (80052b8 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d003      	beq.n	8005288 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b11      	cmp	r3, #17
 8005286:	d105      	bne.n	8005294 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	000f0001 	.word	0x000f0001
 80052b0:	40012300 	.word	0x40012300
 80052b4:	40012000 	.word	0x40012000
 80052b8:	10000012 	.word	0x10000012

080052bc <__NVIC_SetPriorityGrouping>:
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052cc:	4b0c      	ldr	r3, [pc, #48]	; (8005300 <__NVIC_SetPriorityGrouping+0x44>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052d8:	4013      	ands	r3, r2
 80052da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80052e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052ee:	4a04      	ldr	r2, [pc, #16]	; (8005300 <__NVIC_SetPriorityGrouping+0x44>)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	60d3      	str	r3, [r2, #12]
}
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	e000ed00 	.word	0xe000ed00

08005304 <__NVIC_GetPriorityGrouping>:
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005308:	4b04      	ldr	r3, [pc, #16]	; (800531c <__NVIC_GetPriorityGrouping+0x18>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	0a1b      	lsrs	r3, r3, #8
 800530e:	f003 0307 	and.w	r3, r3, #7
}
 8005312:	4618      	mov	r0, r3
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	e000ed00 	.word	0xe000ed00

08005320 <__NVIC_EnableIRQ>:
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800532a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800532e:	2b00      	cmp	r3, #0
 8005330:	db0b      	blt.n	800534a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	f003 021f 	and.w	r2, r3, #31
 8005338:	4907      	ldr	r1, [pc, #28]	; (8005358 <__NVIC_EnableIRQ+0x38>)
 800533a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	2001      	movs	r0, #1
 8005342:	fa00 f202 	lsl.w	r2, r0, r2
 8005346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	e000e100 	.word	0xe000e100

0800535c <__NVIC_SetPriority>:
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	4603      	mov	r3, r0
 8005364:	6039      	str	r1, [r7, #0]
 8005366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800536c:	2b00      	cmp	r3, #0
 800536e:	db0a      	blt.n	8005386 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	b2da      	uxtb	r2, r3
 8005374:	490c      	ldr	r1, [pc, #48]	; (80053a8 <__NVIC_SetPriority+0x4c>)
 8005376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800537a:	0112      	lsls	r2, r2, #4
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	440b      	add	r3, r1
 8005380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005384:	e00a      	b.n	800539c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	b2da      	uxtb	r2, r3
 800538a:	4908      	ldr	r1, [pc, #32]	; (80053ac <__NVIC_SetPriority+0x50>)
 800538c:	79fb      	ldrb	r3, [r7, #7]
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	3b04      	subs	r3, #4
 8005394:	0112      	lsls	r2, r2, #4
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	440b      	add	r3, r1
 800539a:	761a      	strb	r2, [r3, #24]
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	e000e100 	.word	0xe000e100
 80053ac:	e000ed00 	.word	0xe000ed00

080053b0 <NVIC_EncodePriority>:
{
 80053b0:	b480      	push	{r7}
 80053b2:	b089      	sub	sp, #36	; 0x24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	f1c3 0307 	rsb	r3, r3, #7
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	bf28      	it	cs
 80053ce:	2304      	movcs	r3, #4
 80053d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	3304      	adds	r3, #4
 80053d6:	2b06      	cmp	r3, #6
 80053d8:	d902      	bls.n	80053e0 <NVIC_EncodePriority+0x30>
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	3b03      	subs	r3, #3
 80053de:	e000      	b.n	80053e2 <NVIC_EncodePriority+0x32>
 80053e0:	2300      	movs	r3, #0
 80053e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053e4:	f04f 32ff 	mov.w	r2, #4294967295
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	fa02 f303 	lsl.w	r3, r2, r3
 80053ee:	43da      	mvns	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	401a      	ands	r2, r3
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053f8:	f04f 31ff 	mov.w	r1, #4294967295
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005402:	43d9      	mvns	r1, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005408:	4313      	orrs	r3, r2
}
 800540a:	4618      	mov	r0, r3
 800540c:	3724      	adds	r7, #36	; 0x24
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
	...

08005418 <SysTick_Config>:
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3b01      	subs	r3, #1
 8005424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005428:	d301      	bcc.n	800542e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800542a:	2301      	movs	r3, #1
 800542c:	e00f      	b.n	800544e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800542e:	4a0a      	ldr	r2, [pc, #40]	; (8005458 <SysTick_Config+0x40>)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3b01      	subs	r3, #1
 8005434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005436:	210f      	movs	r1, #15
 8005438:	f04f 30ff 	mov.w	r0, #4294967295
 800543c:	f7ff ff8e 	bl	800535c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005440:	4b05      	ldr	r3, [pc, #20]	; (8005458 <SysTick_Config+0x40>)
 8005442:	2200      	movs	r2, #0
 8005444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005446:	4b04      	ldr	r3, [pc, #16]	; (8005458 <SysTick_Config+0x40>)
 8005448:	2207      	movs	r2, #7
 800544a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	e000e010 	.word	0xe000e010

0800545c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7ff ff29 	bl	80052bc <__NVIC_SetPriorityGrouping>
}
 800546a:	bf00      	nop
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005472:	b580      	push	{r7, lr}
 8005474:	b086      	sub	sp, #24
 8005476:	af00      	add	r7, sp, #0
 8005478:	4603      	mov	r3, r0
 800547a:	60b9      	str	r1, [r7, #8]
 800547c:	607a      	str	r2, [r7, #4]
 800547e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005484:	f7ff ff3e 	bl	8005304 <__NVIC_GetPriorityGrouping>
 8005488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	6978      	ldr	r0, [r7, #20]
 8005490:	f7ff ff8e 	bl	80053b0 <NVIC_EncodePriority>
 8005494:	4602      	mov	r2, r0
 8005496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800549a:	4611      	mov	r1, r2
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff ff5d 	bl	800535c <__NVIC_SetPriority>
}
 80054a2:	bf00      	nop
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b082      	sub	sp, #8
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	4603      	mov	r3, r0
 80054b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff ff31 	bl	8005320 <__NVIC_EnableIRQ>
}
 80054be:	bf00      	nop
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b082      	sub	sp, #8
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff ffa2 	bl	8005418 <SysTick_Config>
 80054d4:	4603      	mov	r3, r0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80054ec:	f7fe fe3c 	bl	8004168 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e099      	b.n	8005630 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0201 	bic.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800551c:	e00f      	b.n	800553e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800551e:	f7fe fe23 	bl	8004168 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b05      	cmp	r3, #5
 800552a:	d908      	bls.n	800553e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2203      	movs	r2, #3
 8005536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e078      	b.n	8005630 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1e8      	bne.n	800551e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4b38      	ldr	r3, [pc, #224]	; (8005638 <HAL_DMA_Init+0x158>)
 8005558:	4013      	ands	r3, r2
 800555a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800556a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005576:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005582:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4313      	orrs	r3, r2
 800558e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	2b04      	cmp	r3, #4
 8005596:	d107      	bne.n	80055a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	4313      	orrs	r3, r2
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f023 0307 	bic.w	r3, r3, #7
 80055be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d117      	bne.n	8005602 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00e      	beq.n	8005602 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fadf 	bl	8005ba8 <DMA_CheckFifoParam>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2240      	movs	r2, #64	; 0x40
 80055f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80055fe:	2301      	movs	r3, #1
 8005600:	e016      	b.n	8005630 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fa96 	bl	8005b3c <DMA_CalcBaseAndBitshift>
 8005610:	4603      	mov	r3, r0
 8005612:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005618:	223f      	movs	r2, #63	; 0x3f
 800561a:	409a      	lsls	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	f010803f 	.word	0xf010803f

0800563c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
 8005648:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005652:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <HAL_DMA_Start_IT+0x26>
 800565e:	2302      	movs	r3, #2
 8005660:	e040      	b.n	80056e4 <HAL_DMA_Start_IT+0xa8>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b01      	cmp	r3, #1
 8005674:	d12f      	bne.n	80056d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2202      	movs	r2, #2
 800567a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 fa28 	bl	8005ae0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005694:	223f      	movs	r2, #63	; 0x3f
 8005696:	409a      	lsls	r2, r3
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0216 	orr.w	r2, r2, #22
 80056aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d007      	beq.n	80056c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0208 	orr.w	r2, r2, #8
 80056c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0201 	orr.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	e005      	b.n	80056e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80056de:	2302      	movs	r3, #2
 80056e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80056e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3718      	adds	r7, #24
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80056fa:	f7fe fd35 	bl	8004168 <HAL_GetTick>
 80056fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d008      	beq.n	800571e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2280      	movs	r2, #128	; 0x80
 8005710:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e052      	b.n	80057c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0216 	bic.w	r2, r2, #22
 800572c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695a      	ldr	r2, [r3, #20]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800573c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d103      	bne.n	800574e <HAL_DMA_Abort+0x62>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800574a:	2b00      	cmp	r3, #0
 800574c:	d007      	beq.n	800575e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0208 	bic.w	r2, r2, #8
 800575c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0201 	bic.w	r2, r2, #1
 800576c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800576e:	e013      	b.n	8005798 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005770:	f7fe fcfa 	bl	8004168 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b05      	cmp	r3, #5
 800577c:	d90c      	bls.n	8005798 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2203      	movs	r2, #3
 8005788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e015      	b.n	80057c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e4      	bne.n	8005770 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057aa:	223f      	movs	r2, #63	; 0x3f
 80057ac:	409a      	lsls	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057d8:	4b8e      	ldr	r3, [pc, #568]	; (8005a14 <HAL_DMA_IRQHandler+0x248>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a8e      	ldr	r2, [pc, #568]	; (8005a18 <HAL_DMA_IRQHandler+0x24c>)
 80057de:	fba2 2303 	umull	r2, r3, r2, r3
 80057e2:	0a9b      	lsrs	r3, r3, #10
 80057e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f6:	2208      	movs	r2, #8
 80057f8:	409a      	lsls	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4013      	ands	r3, r2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d01a      	beq.n	8005838 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d013      	beq.n	8005838 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0204 	bic.w	r2, r2, #4
 800581e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005824:	2208      	movs	r2, #8
 8005826:	409a      	lsls	r2, r3
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005830:	f043 0201 	orr.w	r2, r3, #1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583c:	2201      	movs	r2, #1
 800583e:	409a      	lsls	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4013      	ands	r3, r2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d012      	beq.n	800586e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00b      	beq.n	800586e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585a:	2201      	movs	r2, #1
 800585c:	409a      	lsls	r2, r3
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005866:	f043 0202 	orr.w	r2, r3, #2
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005872:	2204      	movs	r2, #4
 8005874:	409a      	lsls	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4013      	ands	r3, r2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d012      	beq.n	80058a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00b      	beq.n	80058a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005890:	2204      	movs	r2, #4
 8005892:	409a      	lsls	r2, r3
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589c:	f043 0204 	orr.w	r2, r3, #4
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a8:	2210      	movs	r2, #16
 80058aa:	409a      	lsls	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4013      	ands	r3, r2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d043      	beq.n	800593c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d03c      	beq.n	800593c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c6:	2210      	movs	r2, #16
 80058c8:	409a      	lsls	r2, r3
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d018      	beq.n	800590e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d108      	bne.n	80058fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d024      	beq.n	800593c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	4798      	blx	r3
 80058fa:	e01f      	b.n	800593c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01b      	beq.n	800593c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	4798      	blx	r3
 800590c:	e016      	b.n	800593c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005918:	2b00      	cmp	r3, #0
 800591a:	d107      	bne.n	800592c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0208 	bic.w	r2, r2, #8
 800592a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005940:	2220      	movs	r2, #32
 8005942:	409a      	lsls	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4013      	ands	r3, r2
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 808f 	beq.w	8005a6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0310 	and.w	r3, r3, #16
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8087 	beq.w	8005a6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005962:	2220      	movs	r2, #32
 8005964:	409a      	lsls	r2, r3
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b05      	cmp	r3, #5
 8005974:	d136      	bne.n	80059e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0216 	bic.w	r2, r2, #22
 8005984:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695a      	ldr	r2, [r3, #20]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005994:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d103      	bne.n	80059a6 <HAL_DMA_IRQHandler+0x1da>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d007      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0208 	bic.w	r2, r2, #8
 80059b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ba:	223f      	movs	r2, #63	; 0x3f
 80059bc:	409a      	lsls	r2, r3
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d07e      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	4798      	blx	r3
        }
        return;
 80059e2:	e079      	b.n	8005ad8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d01d      	beq.n	8005a2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10d      	bne.n	8005a1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d031      	beq.n	8005a6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	4798      	blx	r3
 8005a10:	e02c      	b.n	8005a6c <HAL_DMA_IRQHandler+0x2a0>
 8005a12:	bf00      	nop
 8005a14:	200006ec 	.word	0x200006ec
 8005a18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d023      	beq.n	8005a6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	4798      	blx	r3
 8005a2c:	e01e      	b.n	8005a6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10f      	bne.n	8005a5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0210 	bic.w	r2, r2, #16
 8005a4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d032      	beq.n	8005ada <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d022      	beq.n	8005ac6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2205      	movs	r2, #5
 8005a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0201 	bic.w	r2, r2, #1
 8005a96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	60bb      	str	r3, [r7, #8]
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d307      	bcc.n	8005ab4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1f2      	bne.n	8005a98 <HAL_DMA_IRQHandler+0x2cc>
 8005ab2:	e000      	b.n	8005ab6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005ab4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d005      	beq.n	8005ada <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	4798      	blx	r3
 8005ad6:	e000      	b.n	8005ada <HAL_DMA_IRQHandler+0x30e>
        return;
 8005ad8:	bf00      	nop
    }
  }
}
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005afc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2b40      	cmp	r3, #64	; 0x40
 8005b0c:	d108      	bne.n	8005b20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b1e:	e007      	b.n	8005b30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	60da      	str	r2, [r3, #12]
}
 8005b30:	bf00      	nop
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	3b10      	subs	r3, #16
 8005b4c:	4a14      	ldr	r2, [pc, #80]	; (8005ba0 <DMA_CalcBaseAndBitshift+0x64>)
 8005b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b52:	091b      	lsrs	r3, r3, #4
 8005b54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b56:	4a13      	ldr	r2, [pc, #76]	; (8005ba4 <DMA_CalcBaseAndBitshift+0x68>)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d909      	bls.n	8005b7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b72:	f023 0303 	bic.w	r3, r3, #3
 8005b76:	1d1a      	adds	r2, r3, #4
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	659a      	str	r2, [r3, #88]	; 0x58
 8005b7c:	e007      	b.n	8005b8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b86:	f023 0303 	bic.w	r3, r3, #3
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	aaaaaaab 	.word	0xaaaaaaab
 8005ba4:	0800b238 	.word	0x0800b238

08005ba8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d11f      	bne.n	8005c02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d856      	bhi.n	8005c76 <DMA_CheckFifoParam+0xce>
 8005bc8:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <DMA_CheckFifoParam+0x28>)
 8005bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bce:	bf00      	nop
 8005bd0:	08005be1 	.word	0x08005be1
 8005bd4:	08005bf3 	.word	0x08005bf3
 8005bd8:	08005be1 	.word	0x08005be1
 8005bdc:	08005c77 	.word	0x08005c77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d046      	beq.n	8005c7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bf0:	e043      	b.n	8005c7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bfa:	d140      	bne.n	8005c7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c00:	e03d      	b.n	8005c7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c0a:	d121      	bne.n	8005c50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d837      	bhi.n	8005c82 <DMA_CheckFifoParam+0xda>
 8005c12:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <DMA_CheckFifoParam+0x70>)
 8005c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c18:	08005c29 	.word	0x08005c29
 8005c1c:	08005c2f 	.word	0x08005c2f
 8005c20:	08005c29 	.word	0x08005c29
 8005c24:	08005c41 	.word	0x08005c41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c2c:	e030      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d025      	beq.n	8005c86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c3e:	e022      	b.n	8005c86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c48:	d11f      	bne.n	8005c8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c4e:	e01c      	b.n	8005c8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d903      	bls.n	8005c5e <DMA_CheckFifoParam+0xb6>
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d003      	beq.n	8005c64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c5c:	e018      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	73fb      	strb	r3, [r7, #15]
      break;
 8005c62:	e015      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00e      	beq.n	8005c8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	73fb      	strb	r3, [r7, #15]
      break;
 8005c74:	e00b      	b.n	8005c8e <DMA_CheckFifoParam+0xe6>
      break;
 8005c76:	bf00      	nop
 8005c78:	e00a      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
      break;
 8005c7a:	bf00      	nop
 8005c7c:	e008      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
      break;
 8005c7e:	bf00      	nop
 8005c80:	e006      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
      break;
 8005c82:	bf00      	nop
 8005c84:	e004      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
      break;
 8005c86:	bf00      	nop
 8005c88:	e002      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
      break;   
 8005c8a:	bf00      	nop
 8005c8c:	e000      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
      break;
 8005c8e:	bf00      	nop
    }
  } 
  
  return status; 
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop

08005ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b089      	sub	sp, #36	; 0x24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	61fb      	str	r3, [r7, #28]
 8005cba:	e159      	b.n	8005f70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	f040 8148 	bne.w	8005f6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d005      	beq.n	8005cf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d130      	bne.n	8005d54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	2203      	movs	r2, #3
 8005cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005d02:	43db      	mvns	r3, r3
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	4013      	ands	r3, r2
 8005d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	fa02 f303 	lsl.w	r3, r2, r3
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d28:	2201      	movs	r2, #1
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d30:	43db      	mvns	r3, r3
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	4013      	ands	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	091b      	lsrs	r3, r3, #4
 8005d3e:	f003 0201 	and.w	r2, r3, #1
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f003 0303 	and.w	r3, r3, #3
 8005d5c:	2b03      	cmp	r3, #3
 8005d5e:	d017      	beq.n	8005d90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	2203      	movs	r2, #3
 8005d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d70:	43db      	mvns	r3, r3
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	4013      	ands	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f003 0303 	and.w	r3, r3, #3
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d123      	bne.n	8005de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	08da      	lsrs	r2, r3, #3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3208      	adds	r2, #8
 8005da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	f003 0307 	and.w	r3, r3, #7
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	220f      	movs	r2, #15
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	43db      	mvns	r3, r3
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	08da      	lsrs	r2, r3, #3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3208      	adds	r2, #8
 8005dde:	69b9      	ldr	r1, [r7, #24]
 8005de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	2203      	movs	r2, #3
 8005df0:	fa02 f303 	lsl.w	r3, r2, r3
 8005df4:	43db      	mvns	r3, r3
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f003 0203 	and.w	r2, r3, #3
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80a2 	beq.w	8005f6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e26:	2300      	movs	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	4b57      	ldr	r3, [pc, #348]	; (8005f88 <HAL_GPIO_Init+0x2e8>)
 8005e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2e:	4a56      	ldr	r2, [pc, #344]	; (8005f88 <HAL_GPIO_Init+0x2e8>)
 8005e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e34:	6453      	str	r3, [r2, #68]	; 0x44
 8005e36:	4b54      	ldr	r3, [pc, #336]	; (8005f88 <HAL_GPIO_Init+0x2e8>)
 8005e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e42:	4a52      	ldr	r2, [pc, #328]	; (8005f8c <HAL_GPIO_Init+0x2ec>)
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	089b      	lsrs	r3, r3, #2
 8005e48:	3302      	adds	r3, #2
 8005e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	220f      	movs	r2, #15
 8005e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4013      	ands	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a49      	ldr	r2, [pc, #292]	; (8005f90 <HAL_GPIO_Init+0x2f0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d019      	beq.n	8005ea2 <HAL_GPIO_Init+0x202>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a48      	ldr	r2, [pc, #288]	; (8005f94 <HAL_GPIO_Init+0x2f4>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d013      	beq.n	8005e9e <HAL_GPIO_Init+0x1fe>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a47      	ldr	r2, [pc, #284]	; (8005f98 <HAL_GPIO_Init+0x2f8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d00d      	beq.n	8005e9a <HAL_GPIO_Init+0x1fa>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a46      	ldr	r2, [pc, #280]	; (8005f9c <HAL_GPIO_Init+0x2fc>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d007      	beq.n	8005e96 <HAL_GPIO_Init+0x1f6>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a45      	ldr	r2, [pc, #276]	; (8005fa0 <HAL_GPIO_Init+0x300>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d101      	bne.n	8005e92 <HAL_GPIO_Init+0x1f2>
 8005e8e:	2304      	movs	r3, #4
 8005e90:	e008      	b.n	8005ea4 <HAL_GPIO_Init+0x204>
 8005e92:	2307      	movs	r3, #7
 8005e94:	e006      	b.n	8005ea4 <HAL_GPIO_Init+0x204>
 8005e96:	2303      	movs	r3, #3
 8005e98:	e004      	b.n	8005ea4 <HAL_GPIO_Init+0x204>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e002      	b.n	8005ea4 <HAL_GPIO_Init+0x204>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <HAL_GPIO_Init+0x204>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	69fa      	ldr	r2, [r7, #28]
 8005ea6:	f002 0203 	and.w	r2, r2, #3
 8005eaa:	0092      	lsls	r2, r2, #2
 8005eac:	4093      	lsls	r3, r2
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005eb4:	4935      	ldr	r1, [pc, #212]	; (8005f8c <HAL_GPIO_Init+0x2ec>)
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	089b      	lsrs	r3, r3, #2
 8005eba:	3302      	adds	r3, #2
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ec2:	4b38      	ldr	r3, [pc, #224]	; (8005fa4 <HAL_GPIO_Init+0x304>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	43db      	mvns	r3, r3
 8005ecc:	69ba      	ldr	r2, [r7, #24]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ee6:	4a2f      	ldr	r2, [pc, #188]	; (8005fa4 <HAL_GPIO_Init+0x304>)
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005eec:	4b2d      	ldr	r3, [pc, #180]	; (8005fa4 <HAL_GPIO_Init+0x304>)
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f10:	4a24      	ldr	r2, [pc, #144]	; (8005fa4 <HAL_GPIO_Init+0x304>)
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005f16:	4b23      	ldr	r3, [pc, #140]	; (8005fa4 <HAL_GPIO_Init+0x304>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	43db      	mvns	r3, r3
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	4013      	ands	r3, r2
 8005f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f3a:	4a1a      	ldr	r2, [pc, #104]	; (8005fa4 <HAL_GPIO_Init+0x304>)
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f40:	4b18      	ldr	r3, [pc, #96]	; (8005fa4 <HAL_GPIO_Init+0x304>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	43db      	mvns	r3, r3
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f64:	4a0f      	ldr	r2, [pc, #60]	; (8005fa4 <HAL_GPIO_Init+0x304>)
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	61fb      	str	r3, [r7, #28]
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	2b0f      	cmp	r3, #15
 8005f74:	f67f aea2 	bls.w	8005cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f78:	bf00      	nop
 8005f7a:	bf00      	nop
 8005f7c:	3724      	adds	r7, #36	; 0x24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40023800 	.word	0x40023800
 8005f8c:	40013800 	.word	0x40013800
 8005f90:	40020000 	.word	0x40020000
 8005f94:	40020400 	.word	0x40020400
 8005f98:	40020800 	.word	0x40020800
 8005f9c:	40020c00 	.word	0x40020c00
 8005fa0:	40021000 	.word	0x40021000
 8005fa4:	40013c00 	.word	0x40013c00

08005fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	807b      	strh	r3, [r7, #2]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fb8:	787b      	ldrb	r3, [r7, #1]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fbe:	887a      	ldrh	r2, [r7, #2]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005fc4:	e003      	b.n	8005fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005fc6:	887b      	ldrh	r3, [r7, #2]
 8005fc8:	041a      	lsls	r2, r3, #16
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	619a      	str	r2, [r3, #24]
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
	...

08005fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e12b      	b.n	8006246 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d106      	bne.n	8006008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fd fd8e 	bl	8003b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2224      	movs	r2, #36	; 0x24
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0201 	bic.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800602e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800603e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006040:	f001 fbbc 	bl	80077bc <HAL_RCC_GetPCLK1Freq>
 8006044:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	4a81      	ldr	r2, [pc, #516]	; (8006250 <HAL_I2C_Init+0x274>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d807      	bhi.n	8006060 <HAL_I2C_Init+0x84>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4a80      	ldr	r2, [pc, #512]	; (8006254 <HAL_I2C_Init+0x278>)
 8006054:	4293      	cmp	r3, r2
 8006056:	bf94      	ite	ls
 8006058:	2301      	movls	r3, #1
 800605a:	2300      	movhi	r3, #0
 800605c:	b2db      	uxtb	r3, r3
 800605e:	e006      	b.n	800606e <HAL_I2C_Init+0x92>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4a7d      	ldr	r2, [pc, #500]	; (8006258 <HAL_I2C_Init+0x27c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	bf94      	ite	ls
 8006068:	2301      	movls	r3, #1
 800606a:	2300      	movhi	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e0e7      	b.n	8006246 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	4a78      	ldr	r2, [pc, #480]	; (800625c <HAL_I2C_Init+0x280>)
 800607a:	fba2 2303 	umull	r2, r3, r2, r3
 800607e:	0c9b      	lsrs	r3, r3, #18
 8006080:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	430a      	orrs	r2, r1
 8006094:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	4a6a      	ldr	r2, [pc, #424]	; (8006250 <HAL_I2C_Init+0x274>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d802      	bhi.n	80060b0 <HAL_I2C_Init+0xd4>
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	3301      	adds	r3, #1
 80060ae:	e009      	b.n	80060c4 <HAL_I2C_Init+0xe8>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80060b6:	fb02 f303 	mul.w	r3, r2, r3
 80060ba:	4a69      	ldr	r2, [pc, #420]	; (8006260 <HAL_I2C_Init+0x284>)
 80060bc:	fba2 2303 	umull	r2, r3, r2, r3
 80060c0:	099b      	lsrs	r3, r3, #6
 80060c2:	3301      	adds	r3, #1
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	6812      	ldr	r2, [r2, #0]
 80060c8:	430b      	orrs	r3, r1
 80060ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80060d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	495c      	ldr	r1, [pc, #368]	; (8006250 <HAL_I2C_Init+0x274>)
 80060e0:	428b      	cmp	r3, r1
 80060e2:	d819      	bhi.n	8006118 <HAL_I2C_Init+0x13c>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	1e59      	subs	r1, r3, #1
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80060f2:	1c59      	adds	r1, r3, #1
 80060f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80060f8:	400b      	ands	r3, r1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <HAL_I2C_Init+0x138>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	1e59      	subs	r1, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	fbb1 f3f3 	udiv	r3, r1, r3
 800610c:	3301      	adds	r3, #1
 800610e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006112:	e051      	b.n	80061b8 <HAL_I2C_Init+0x1dc>
 8006114:	2304      	movs	r3, #4
 8006116:	e04f      	b.n	80061b8 <HAL_I2C_Init+0x1dc>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d111      	bne.n	8006144 <HAL_I2C_Init+0x168>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	1e58      	subs	r0, r3, #1
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6859      	ldr	r1, [r3, #4]
 8006128:	460b      	mov	r3, r1
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	440b      	add	r3, r1
 800612e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006132:	3301      	adds	r3, #1
 8006134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006138:	2b00      	cmp	r3, #0
 800613a:	bf0c      	ite	eq
 800613c:	2301      	moveq	r3, #1
 800613e:	2300      	movne	r3, #0
 8006140:	b2db      	uxtb	r3, r3
 8006142:	e012      	b.n	800616a <HAL_I2C_Init+0x18e>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	1e58      	subs	r0, r3, #1
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6859      	ldr	r1, [r3, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	440b      	add	r3, r1
 8006152:	0099      	lsls	r1, r3, #2
 8006154:	440b      	add	r3, r1
 8006156:	fbb0 f3f3 	udiv	r3, r0, r3
 800615a:	3301      	adds	r3, #1
 800615c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006160:	2b00      	cmp	r3, #0
 8006162:	bf0c      	ite	eq
 8006164:	2301      	moveq	r3, #1
 8006166:	2300      	movne	r3, #0
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <HAL_I2C_Init+0x196>
 800616e:	2301      	movs	r3, #1
 8006170:	e022      	b.n	80061b8 <HAL_I2C_Init+0x1dc>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10e      	bne.n	8006198 <HAL_I2C_Init+0x1bc>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	1e58      	subs	r0, r3, #1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6859      	ldr	r1, [r3, #4]
 8006182:	460b      	mov	r3, r1
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	440b      	add	r3, r1
 8006188:	fbb0 f3f3 	udiv	r3, r0, r3
 800618c:	3301      	adds	r3, #1
 800618e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006196:	e00f      	b.n	80061b8 <HAL_I2C_Init+0x1dc>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	1e58      	subs	r0, r3, #1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6859      	ldr	r1, [r3, #4]
 80061a0:	460b      	mov	r3, r1
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	0099      	lsls	r1, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80061ae:	3301      	adds	r3, #1
 80061b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	6809      	ldr	r1, [r1, #0]
 80061bc:	4313      	orrs	r3, r2
 80061be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	69da      	ldr	r2, [r3, #28]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80061e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6911      	ldr	r1, [r2, #16]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	68d2      	ldr	r2, [r2, #12]
 80061f2:	4311      	orrs	r1, r2
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	6812      	ldr	r2, [r2, #0]
 80061f8:	430b      	orrs	r3, r1
 80061fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695a      	ldr	r2, [r3, #20]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0201 	orr.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2220      	movs	r2, #32
 8006232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	000186a0 	.word	0x000186a0
 8006254:	001e847f 	.word	0x001e847f
 8006258:	003d08ff 	.word	0x003d08ff
 800625c:	431bde83 	.word	0x431bde83
 8006260:	10624dd3 	.word	0x10624dd3

08006264 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af02      	add	r7, sp, #8
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	4608      	mov	r0, r1
 800626e:	4611      	mov	r1, r2
 8006270:	461a      	mov	r2, r3
 8006272:	4603      	mov	r3, r0
 8006274:	817b      	strh	r3, [r7, #10]
 8006276:	460b      	mov	r3, r1
 8006278:	813b      	strh	r3, [r7, #8]
 800627a:	4613      	mov	r3, r2
 800627c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800627e:	f7fd ff73 	bl	8004168 <HAL_GetTick>
 8006282:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b20      	cmp	r3, #32
 800628e:	f040 80d9 	bne.w	8006444 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	2319      	movs	r3, #25
 8006298:	2201      	movs	r2, #1
 800629a:	496d      	ldr	r1, [pc, #436]	; (8006450 <HAL_I2C_Mem_Write+0x1ec>)
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 fc7f 	bl	8006ba0 <I2C_WaitOnFlagUntilTimeout>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80062a8:	2302      	movs	r3, #2
 80062aa:	e0cc      	b.n	8006446 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d101      	bne.n	80062ba <HAL_I2C_Mem_Write+0x56>
 80062b6:	2302      	movs	r3, #2
 80062b8:	e0c5      	b.n	8006446 <HAL_I2C_Mem_Write+0x1e2>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d007      	beq.n	80062e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2221      	movs	r2, #33	; 0x21
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2240      	movs	r2, #64	; 0x40
 80062fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6a3a      	ldr	r2, [r7, #32]
 800630a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006310:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006316:	b29a      	uxth	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4a4d      	ldr	r2, [pc, #308]	; (8006454 <HAL_I2C_Mem_Write+0x1f0>)
 8006320:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006322:	88f8      	ldrh	r0, [r7, #6]
 8006324:	893a      	ldrh	r2, [r7, #8]
 8006326:	8979      	ldrh	r1, [r7, #10]
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	9301      	str	r3, [sp, #4]
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	4603      	mov	r3, r0
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 fab6 	bl	80068a4 <I2C_RequestMemoryWrite>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d052      	beq.n	80063e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e081      	b.n	8006446 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 fd00 	bl	8006d4c <I2C_WaitOnTXEFlagUntilTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00d      	beq.n	800636e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	2b04      	cmp	r3, #4
 8006358:	d107      	bne.n	800636a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006368:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e06b      	b.n	8006446 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	781a      	ldrb	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	1c5a      	adds	r2, r3, #1
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006388:	3b01      	subs	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006394:	b29b      	uxth	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	d11b      	bne.n	80063e4 <HAL_I2C_Mem_Write+0x180>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d017      	beq.n	80063e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	781a      	ldrb	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063da:	b29b      	uxth	r3, r3
 80063dc:	3b01      	subs	r3, #1
 80063de:	b29a      	uxth	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1aa      	bne.n	8006342 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 fcec 	bl	8006dce <I2C_WaitOnBTFFlagUntilTimeout>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00d      	beq.n	8006418 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006400:	2b04      	cmp	r3, #4
 8006402:	d107      	bne.n	8006414 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006412:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e016      	b.n	8006446 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2220      	movs	r2, #32
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006440:	2300      	movs	r3, #0
 8006442:	e000      	b.n	8006446 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006444:	2302      	movs	r3, #2
  }
}
 8006446:	4618      	mov	r0, r3
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	00100002 	.word	0x00100002
 8006454:	ffff0000 	.word	0xffff0000

08006458 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b08c      	sub	sp, #48	; 0x30
 800645c:	af02      	add	r7, sp, #8
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	4608      	mov	r0, r1
 8006462:	4611      	mov	r1, r2
 8006464:	461a      	mov	r2, r3
 8006466:	4603      	mov	r3, r0
 8006468:	817b      	strh	r3, [r7, #10]
 800646a:	460b      	mov	r3, r1
 800646c:	813b      	strh	r3, [r7, #8]
 800646e:	4613      	mov	r3, r2
 8006470:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006472:	f7fd fe79 	bl	8004168 <HAL_GetTick>
 8006476:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b20      	cmp	r3, #32
 8006482:	f040 8208 	bne.w	8006896 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	2319      	movs	r3, #25
 800648c:	2201      	movs	r2, #1
 800648e:	497b      	ldr	r1, [pc, #492]	; (800667c <HAL_I2C_Mem_Read+0x224>)
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 fb85 	bl	8006ba0 <I2C_WaitOnFlagUntilTimeout>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800649c:	2302      	movs	r3, #2
 800649e:	e1fb      	b.n	8006898 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d101      	bne.n	80064ae <HAL_I2C_Mem_Read+0x56>
 80064aa:	2302      	movs	r3, #2
 80064ac:	e1f4      	b.n	8006898 <HAL_I2C_Mem_Read+0x440>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d007      	beq.n	80064d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f042 0201 	orr.w	r2, r2, #1
 80064d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2222      	movs	r2, #34	; 0x22
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2240      	movs	r2, #64	; 0x40
 80064f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006504:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650a:	b29a      	uxth	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4a5b      	ldr	r2, [pc, #364]	; (8006680 <HAL_I2C_Mem_Read+0x228>)
 8006514:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006516:	88f8      	ldrh	r0, [r7, #6]
 8006518:	893a      	ldrh	r2, [r7, #8]
 800651a:	8979      	ldrh	r1, [r7, #10]
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	9301      	str	r3, [sp, #4]
 8006520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	4603      	mov	r3, r0
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 fa52 	bl	80069d0 <I2C_RequestMemoryRead>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e1b0      	b.n	8006898 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653a:	2b00      	cmp	r3, #0
 800653c:	d113      	bne.n	8006566 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800653e:	2300      	movs	r3, #0
 8006540:	623b      	str	r3, [r7, #32]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	623b      	str	r3, [r7, #32]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	623b      	str	r3, [r7, #32]
 8006552:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	e184      	b.n	8006870 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656a:	2b01      	cmp	r3, #1
 800656c:	d11b      	bne.n	80065a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800657c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800657e:	2300      	movs	r3, #0
 8006580:	61fb      	str	r3, [r7, #28]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	61fb      	str	r3, [r7, #28]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	61fb      	str	r3, [r7, #28]
 8006592:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	e164      	b.n	8006870 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d11b      	bne.n	80065e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ce:	2300      	movs	r3, #0
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	61bb      	str	r3, [r7, #24]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	61bb      	str	r3, [r7, #24]
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	e144      	b.n	8006870 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065e6:	2300      	movs	r3, #0
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80065fc:	e138      	b.n	8006870 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006602:	2b03      	cmp	r3, #3
 8006604:	f200 80f1 	bhi.w	80067ea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800660c:	2b01      	cmp	r3, #1
 800660e:	d123      	bne.n	8006658 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006612:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 fc1b 	bl	8006e50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e139      	b.n	8006898 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691a      	ldr	r2, [r3, #16]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006656:	e10b      	b.n	8006870 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665c:	2b02      	cmp	r3, #2
 800665e:	d14e      	bne.n	80066fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	2200      	movs	r2, #0
 8006668:	4906      	ldr	r1, [pc, #24]	; (8006684 <HAL_I2C_Mem_Read+0x22c>)
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 fa98 	bl	8006ba0 <I2C_WaitOnFlagUntilTimeout>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d008      	beq.n	8006688 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e10e      	b.n	8006898 <HAL_I2C_Mem_Read+0x440>
 800667a:	bf00      	nop
 800667c:	00100002 	.word	0x00100002
 8006680:	ffff0000 	.word	0xffff0000
 8006684:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006696:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	3b01      	subs	r3, #1
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	b2d2      	uxtb	r2, r2
 80066d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e6:	3b01      	subs	r3, #1
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066fc:	e0b8      	b.n	8006870 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006704:	2200      	movs	r2, #0
 8006706:	4966      	ldr	r1, [pc, #408]	; (80068a0 <HAL_I2C_Mem_Read+0x448>)
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f000 fa49 	bl	8006ba0 <I2C_WaitOnFlagUntilTimeout>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e0bf      	b.n	8006898 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	691a      	ldr	r2, [r3, #16]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006744:	3b01      	subs	r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006760:	2200      	movs	r2, #0
 8006762:	494f      	ldr	r1, [pc, #316]	; (80068a0 <HAL_I2C_Mem_Read+0x448>)
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 fa1b 	bl	8006ba0 <I2C_WaitOnFlagUntilTimeout>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e091      	b.n	8006898 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006782:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691a      	ldr	r2, [r3, #16]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a0:	3b01      	subs	r3, #1
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	3b01      	subs	r3, #1
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	1c5a      	adds	r2, r3, #1
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067de:	b29b      	uxth	r3, r3
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067e8:	e042      	b.n	8006870 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 fb2e 	bl	8006e50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e04c      	b.n	8006898 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	b2d2      	uxtb	r2, r2
 800680a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681a:	3b01      	subs	r3, #1
 800681c:	b29a      	uxth	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006826:	b29b      	uxth	r3, r3
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	f003 0304 	and.w	r3, r3, #4
 800683a:	2b04      	cmp	r3, #4
 800683c:	d118      	bne.n	8006870 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	b2d2      	uxtb	r2, r2
 800684a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685a:	3b01      	subs	r3, #1
 800685c:	b29a      	uxth	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	b29a      	uxth	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006874:	2b00      	cmp	r3, #0
 8006876:	f47f aec2 	bne.w	80065fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	e000      	b.n	8006898 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006896:	2302      	movs	r3, #2
  }
}
 8006898:	4618      	mov	r0, r3
 800689a:	3728      	adds	r7, #40	; 0x28
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	00010004 	.word	0x00010004

080068a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af02      	add	r7, sp, #8
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	4608      	mov	r0, r1
 80068ae:	4611      	mov	r1, r2
 80068b0:	461a      	mov	r2, r3
 80068b2:	4603      	mov	r3, r0
 80068b4:	817b      	strh	r3, [r7, #10]
 80068b6:	460b      	mov	r3, r1
 80068b8:	813b      	strh	r3, [r7, #8]
 80068ba:	4613      	mov	r3, r2
 80068bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 f960 	bl	8006ba0 <I2C_WaitOnFlagUntilTimeout>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00d      	beq.n	8006902 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f4:	d103      	bne.n	80068fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e05f      	b.n	80069c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006902:	897b      	ldrh	r3, [r7, #10]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	461a      	mov	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006910:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	6a3a      	ldr	r2, [r7, #32]
 8006916:	492d      	ldr	r1, [pc, #180]	; (80069cc <I2C_RequestMemoryWrite+0x128>)
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f000 f998 	bl	8006c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e04c      	b.n	80069c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006928:	2300      	movs	r3, #0
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800693e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006940:	6a39      	ldr	r1, [r7, #32]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 fa02 	bl	8006d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00d      	beq.n	800696a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	2b04      	cmp	r3, #4
 8006954:	d107      	bne.n	8006966 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006964:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e02b      	b.n	80069c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800696a:	88fb      	ldrh	r3, [r7, #6]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d105      	bne.n	800697c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006970:	893b      	ldrh	r3, [r7, #8]
 8006972:	b2da      	uxtb	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	611a      	str	r2, [r3, #16]
 800697a:	e021      	b.n	80069c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800697c:	893b      	ldrh	r3, [r7, #8]
 800697e:	0a1b      	lsrs	r3, r3, #8
 8006980:	b29b      	uxth	r3, r3
 8006982:	b2da      	uxtb	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800698a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800698c:	6a39      	ldr	r1, [r7, #32]
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 f9dc 	bl	8006d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00d      	beq.n	80069b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d107      	bne.n	80069b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e005      	b.n	80069c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069b6:	893b      	ldrh	r3, [r7, #8]
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	00010002 	.word	0x00010002

080069d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b088      	sub	sp, #32
 80069d4:	af02      	add	r7, sp, #8
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	4608      	mov	r0, r1
 80069da:	4611      	mov	r1, r2
 80069dc:	461a      	mov	r2, r3
 80069de:	4603      	mov	r3, r0
 80069e0:	817b      	strh	r3, [r7, #10]
 80069e2:	460b      	mov	r3, r1
 80069e4:	813b      	strh	r3, [r7, #8]
 80069e6:	4613      	mov	r3, r2
 80069e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 f8c2 	bl	8006ba0 <I2C_WaitOnFlagUntilTimeout>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00d      	beq.n	8006a3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a30:	d103      	bne.n	8006a3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e0aa      	b.n	8006b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a3e:	897b      	ldrh	r3, [r7, #10]
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	461a      	mov	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a50:	6a3a      	ldr	r2, [r7, #32]
 8006a52:	4952      	ldr	r1, [pc, #328]	; (8006b9c <I2C_RequestMemoryRead+0x1cc>)
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 f8fa 	bl	8006c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e097      	b.n	8006b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a64:	2300      	movs	r3, #0
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	617b      	str	r3, [r7, #20]
 8006a78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a7c:	6a39      	ldr	r1, [r7, #32]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 f964 	bl	8006d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00d      	beq.n	8006aa6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d107      	bne.n	8006aa2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aa0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e076      	b.n	8006b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006aa6:	88fb      	ldrh	r3, [r7, #6]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d105      	bne.n	8006ab8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006aac:	893b      	ldrh	r3, [r7, #8]
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	611a      	str	r2, [r3, #16]
 8006ab6:	e021      	b.n	8006afc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ab8:	893b      	ldrh	r3, [r7, #8]
 8006aba:	0a1b      	lsrs	r3, r3, #8
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac8:	6a39      	ldr	r1, [r7, #32]
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 f93e 	bl	8006d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00d      	beq.n	8006af2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d107      	bne.n	8006aee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e050      	b.n	8006b94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006af2:	893b      	ldrh	r3, [r7, #8]
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006afe:	6a39      	ldr	r1, [r7, #32]
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 f923 	bl	8006d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00d      	beq.n	8006b28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d107      	bne.n	8006b24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e035      	b.n	8006b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 f82b 	bl	8006ba0 <I2C_WaitOnFlagUntilTimeout>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00d      	beq.n	8006b6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b5e:	d103      	bne.n	8006b68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e013      	b.n	8006b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006b6c:	897b      	ldrh	r3, [r7, #10]
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	f043 0301 	orr.w	r3, r3, #1
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	6a3a      	ldr	r2, [r7, #32]
 8006b80:	4906      	ldr	r1, [pc, #24]	; (8006b9c <I2C_RequestMemoryRead+0x1cc>)
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f000 f863 	bl	8006c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e000      	b.n	8006b94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	00010002 	.word	0x00010002

08006ba0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	603b      	str	r3, [r7, #0]
 8006bac:	4613      	mov	r3, r2
 8006bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bb0:	e025      	b.n	8006bfe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb8:	d021      	beq.n	8006bfe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bba:	f7fd fad5 	bl	8004168 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d302      	bcc.n	8006bd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d116      	bne.n	8006bfe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	f043 0220 	orr.w	r2, r3, #32
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e023      	b.n	8006c46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	0c1b      	lsrs	r3, r3, #16
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d10d      	bne.n	8006c24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	43da      	mvns	r2, r3
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	4013      	ands	r3, r2
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	bf0c      	ite	eq
 8006c1a:	2301      	moveq	r3, #1
 8006c1c:	2300      	movne	r3, #0
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	461a      	mov	r2, r3
 8006c22:	e00c      	b.n	8006c3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	43da      	mvns	r2, r3
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	bf0c      	ite	eq
 8006c36:	2301      	moveq	r3, #1
 8006c38:	2300      	movne	r3, #0
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	79fb      	ldrb	r3, [r7, #7]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d0b6      	beq.n	8006bb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	607a      	str	r2, [r7, #4]
 8006c5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c5c:	e051      	b.n	8006d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c6c:	d123      	bne.n	8006cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	f043 0204 	orr.w	r2, r3, #4
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e046      	b.n	8006d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbc:	d021      	beq.n	8006d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cbe:	f7fd fa53 	bl	8004168 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d302      	bcc.n	8006cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d116      	bne.n	8006d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cee:	f043 0220 	orr.w	r2, r3, #32
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e020      	b.n	8006d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	0c1b      	lsrs	r3, r3, #16
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d10c      	bne.n	8006d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	43da      	mvns	r2, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	4013      	ands	r3, r2
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	bf14      	ite	ne
 8006d1e:	2301      	movne	r3, #1
 8006d20:	2300      	moveq	r3, #0
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	e00b      	b.n	8006d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	43da      	mvns	r2, r3
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	4013      	ands	r3, r2
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	bf14      	ite	ne
 8006d38:	2301      	movne	r3, #1
 8006d3a:	2300      	moveq	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d18d      	bne.n	8006c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d58:	e02d      	b.n	8006db6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 f8ce 	bl	8006efc <I2C_IsAcknowledgeFailed>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e02d      	b.n	8006dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d70:	d021      	beq.n	8006db6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d72:	f7fd f9f9 	bl	8004168 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d302      	bcc.n	8006d88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d116      	bne.n	8006db6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	f043 0220 	orr.w	r2, r3, #32
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e007      	b.n	8006dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc0:	2b80      	cmp	r3, #128	; 0x80
 8006dc2:	d1ca      	bne.n	8006d5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	60b9      	str	r1, [r7, #8]
 8006dd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006dda:	e02d      	b.n	8006e38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 f88d 	bl	8006efc <I2C_IsAcknowledgeFailed>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e02d      	b.n	8006e48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df2:	d021      	beq.n	8006e38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006df4:	f7fd f9b8 	bl	8004168 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d302      	bcc.n	8006e0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d116      	bne.n	8006e38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2220      	movs	r2, #32
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e24:	f043 0220 	orr.w	r2, r3, #32
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e007      	b.n	8006e48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	f003 0304 	and.w	r3, r3, #4
 8006e42:	2b04      	cmp	r3, #4
 8006e44:	d1ca      	bne.n	8006ddc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e5c:	e042      	b.n	8006ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	f003 0310 	and.w	r3, r3, #16
 8006e68:	2b10      	cmp	r3, #16
 8006e6a:	d119      	bne.n	8006ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f06f 0210 	mvn.w	r2, #16
 8006e74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e029      	b.n	8006ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea0:	f7fd f962 	bl	8004168 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d302      	bcc.n	8006eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d116      	bne.n	8006ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed0:	f043 0220 	orr.w	r2, r3, #32
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e007      	b.n	8006ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eee:	2b40      	cmp	r3, #64	; 0x40
 8006ef0:	d1b5      	bne.n	8006e5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f12:	d11b      	bne.n	8006f4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f38:	f043 0204 	orr.w	r2, r3, #4
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e000      	b.n	8006f4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
	...

08006f5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e267      	b.n	800743e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d075      	beq.n	8007066 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f7a:	4b88      	ldr	r3, [pc, #544]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f003 030c 	and.w	r3, r3, #12
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	d00c      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f86:	4b85      	ldr	r3, [pc, #532]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f8e:	2b08      	cmp	r3, #8
 8006f90:	d112      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f92:	4b82      	ldr	r3, [pc, #520]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f9e:	d10b      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fa0:	4b7e      	ldr	r3, [pc, #504]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d05b      	beq.n	8007064 <HAL_RCC_OscConfig+0x108>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d157      	bne.n	8007064 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e242      	b.n	800743e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc0:	d106      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x74>
 8006fc2:	4b76      	ldr	r3, [pc, #472]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a75      	ldr	r2, [pc, #468]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8006fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	e01d      	b.n	800700c <HAL_RCC_OscConfig+0xb0>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fd8:	d10c      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x98>
 8006fda:	4b70      	ldr	r3, [pc, #448]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a6f      	ldr	r2, [pc, #444]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8006fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fe4:	6013      	str	r3, [r2, #0]
 8006fe6:	4b6d      	ldr	r3, [pc, #436]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a6c      	ldr	r2, [pc, #432]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8006fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	e00b      	b.n	800700c <HAL_RCC_OscConfig+0xb0>
 8006ff4:	4b69      	ldr	r3, [pc, #420]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a68      	ldr	r2, [pc, #416]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8006ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ffe:	6013      	str	r3, [r2, #0]
 8007000:	4b66      	ldr	r3, [pc, #408]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a65      	ldr	r2, [pc, #404]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8007006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800700a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d013      	beq.n	800703c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007014:	f7fd f8a8 	bl	8004168 <HAL_GetTick>
 8007018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800701a:	e008      	b.n	800702e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800701c:	f7fd f8a4 	bl	8004168 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	2b64      	cmp	r3, #100	; 0x64
 8007028:	d901      	bls.n	800702e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e207      	b.n	800743e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800702e:	4b5b      	ldr	r3, [pc, #364]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0f0      	beq.n	800701c <HAL_RCC_OscConfig+0xc0>
 800703a:	e014      	b.n	8007066 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800703c:	f7fd f894 	bl	8004168 <HAL_GetTick>
 8007040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007042:	e008      	b.n	8007056 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007044:	f7fd f890 	bl	8004168 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	2b64      	cmp	r3, #100	; 0x64
 8007050:	d901      	bls.n	8007056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e1f3      	b.n	800743e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007056:	4b51      	ldr	r3, [pc, #324]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1f0      	bne.n	8007044 <HAL_RCC_OscConfig+0xe8>
 8007062:	e000      	b.n	8007066 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d063      	beq.n	800713a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007072:	4b4a      	ldr	r3, [pc, #296]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f003 030c 	and.w	r3, r3, #12
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00b      	beq.n	8007096 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800707e:	4b47      	ldr	r3, [pc, #284]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007086:	2b08      	cmp	r3, #8
 8007088:	d11c      	bne.n	80070c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800708a:	4b44      	ldr	r3, [pc, #272]	; (800719c <HAL_RCC_OscConfig+0x240>)
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d116      	bne.n	80070c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007096:	4b41      	ldr	r3, [pc, #260]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d005      	beq.n	80070ae <HAL_RCC_OscConfig+0x152>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d001      	beq.n	80070ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e1c7      	b.n	800743e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ae:	4b3b      	ldr	r3, [pc, #236]	; (800719c <HAL_RCC_OscConfig+0x240>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	4937      	ldr	r1, [pc, #220]	; (800719c <HAL_RCC_OscConfig+0x240>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070c2:	e03a      	b.n	800713a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d020      	beq.n	800710e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070cc:	4b34      	ldr	r3, [pc, #208]	; (80071a0 <HAL_RCC_OscConfig+0x244>)
 80070ce:	2201      	movs	r2, #1
 80070d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d2:	f7fd f849 	bl	8004168 <HAL_GetTick>
 80070d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070d8:	e008      	b.n	80070ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070da:	f7fd f845 	bl	8004168 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d901      	bls.n	80070ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e1a8      	b.n	800743e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070ec:	4b2b      	ldr	r3, [pc, #172]	; (800719c <HAL_RCC_OscConfig+0x240>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0302 	and.w	r3, r3, #2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0f0      	beq.n	80070da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070f8:	4b28      	ldr	r3, [pc, #160]	; (800719c <HAL_RCC_OscConfig+0x240>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	00db      	lsls	r3, r3, #3
 8007106:	4925      	ldr	r1, [pc, #148]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8007108:	4313      	orrs	r3, r2
 800710a:	600b      	str	r3, [r1, #0]
 800710c:	e015      	b.n	800713a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800710e:	4b24      	ldr	r3, [pc, #144]	; (80071a0 <HAL_RCC_OscConfig+0x244>)
 8007110:	2200      	movs	r2, #0
 8007112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007114:	f7fd f828 	bl	8004168 <HAL_GetTick>
 8007118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800711a:	e008      	b.n	800712e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800711c:	f7fd f824 	bl	8004168 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	2b02      	cmp	r3, #2
 8007128:	d901      	bls.n	800712e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e187      	b.n	800743e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800712e:	4b1b      	ldr	r3, [pc, #108]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1f0      	bne.n	800711c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0308 	and.w	r3, r3, #8
 8007142:	2b00      	cmp	r3, #0
 8007144:	d036      	beq.n	80071b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d016      	beq.n	800717c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800714e:	4b15      	ldr	r3, [pc, #84]	; (80071a4 <HAL_RCC_OscConfig+0x248>)
 8007150:	2201      	movs	r2, #1
 8007152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007154:	f7fd f808 	bl	8004168 <HAL_GetTick>
 8007158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800715c:	f7fd f804 	bl	8004168 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e167      	b.n	800743e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800716e:	4b0b      	ldr	r3, [pc, #44]	; (800719c <HAL_RCC_OscConfig+0x240>)
 8007170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0f0      	beq.n	800715c <HAL_RCC_OscConfig+0x200>
 800717a:	e01b      	b.n	80071b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800717c:	4b09      	ldr	r3, [pc, #36]	; (80071a4 <HAL_RCC_OscConfig+0x248>)
 800717e:	2200      	movs	r2, #0
 8007180:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007182:	f7fc fff1 	bl	8004168 <HAL_GetTick>
 8007186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007188:	e00e      	b.n	80071a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800718a:	f7fc ffed 	bl	8004168 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d907      	bls.n	80071a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e150      	b.n	800743e <HAL_RCC_OscConfig+0x4e2>
 800719c:	40023800 	.word	0x40023800
 80071a0:	42470000 	.word	0x42470000
 80071a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071a8:	4b88      	ldr	r3, [pc, #544]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 80071aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1ea      	bne.n	800718a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0304 	and.w	r3, r3, #4
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 8097 	beq.w	80072f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071c2:	2300      	movs	r3, #0
 80071c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071c6:	4b81      	ldr	r3, [pc, #516]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10f      	bne.n	80071f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071d2:	2300      	movs	r3, #0
 80071d4:	60bb      	str	r3, [r7, #8]
 80071d6:	4b7d      	ldr	r3, [pc, #500]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	4a7c      	ldr	r2, [pc, #496]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 80071dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071e0:	6413      	str	r3, [r2, #64]	; 0x40
 80071e2:	4b7a      	ldr	r3, [pc, #488]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ea:	60bb      	str	r3, [r7, #8]
 80071ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071ee:	2301      	movs	r3, #1
 80071f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071f2:	4b77      	ldr	r3, [pc, #476]	; (80073d0 <HAL_RCC_OscConfig+0x474>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d118      	bne.n	8007230 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071fe:	4b74      	ldr	r3, [pc, #464]	; (80073d0 <HAL_RCC_OscConfig+0x474>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a73      	ldr	r2, [pc, #460]	; (80073d0 <HAL_RCC_OscConfig+0x474>)
 8007204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800720a:	f7fc ffad 	bl	8004168 <HAL_GetTick>
 800720e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007210:	e008      	b.n	8007224 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007212:	f7fc ffa9 	bl	8004168 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	2b02      	cmp	r3, #2
 800721e:	d901      	bls.n	8007224 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e10c      	b.n	800743e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007224:	4b6a      	ldr	r3, [pc, #424]	; (80073d0 <HAL_RCC_OscConfig+0x474>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800722c:	2b00      	cmp	r3, #0
 800722e:	d0f0      	beq.n	8007212 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d106      	bne.n	8007246 <HAL_RCC_OscConfig+0x2ea>
 8007238:	4b64      	ldr	r3, [pc, #400]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 800723a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723c:	4a63      	ldr	r2, [pc, #396]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 800723e:	f043 0301 	orr.w	r3, r3, #1
 8007242:	6713      	str	r3, [r2, #112]	; 0x70
 8007244:	e01c      	b.n	8007280 <HAL_RCC_OscConfig+0x324>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	2b05      	cmp	r3, #5
 800724c:	d10c      	bne.n	8007268 <HAL_RCC_OscConfig+0x30c>
 800724e:	4b5f      	ldr	r3, [pc, #380]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 8007250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007252:	4a5e      	ldr	r2, [pc, #376]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 8007254:	f043 0304 	orr.w	r3, r3, #4
 8007258:	6713      	str	r3, [r2, #112]	; 0x70
 800725a:	4b5c      	ldr	r3, [pc, #368]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 800725c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725e:	4a5b      	ldr	r2, [pc, #364]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 8007260:	f043 0301 	orr.w	r3, r3, #1
 8007264:	6713      	str	r3, [r2, #112]	; 0x70
 8007266:	e00b      	b.n	8007280 <HAL_RCC_OscConfig+0x324>
 8007268:	4b58      	ldr	r3, [pc, #352]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 800726a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726c:	4a57      	ldr	r2, [pc, #348]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 800726e:	f023 0301 	bic.w	r3, r3, #1
 8007272:	6713      	str	r3, [r2, #112]	; 0x70
 8007274:	4b55      	ldr	r3, [pc, #340]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 8007276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007278:	4a54      	ldr	r2, [pc, #336]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 800727a:	f023 0304 	bic.w	r3, r3, #4
 800727e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d015      	beq.n	80072b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007288:	f7fc ff6e 	bl	8004168 <HAL_GetTick>
 800728c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800728e:	e00a      	b.n	80072a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007290:	f7fc ff6a 	bl	8004168 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	f241 3288 	movw	r2, #5000	; 0x1388
 800729e:	4293      	cmp	r3, r2
 80072a0:	d901      	bls.n	80072a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e0cb      	b.n	800743e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072a6:	4b49      	ldr	r3, [pc, #292]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 80072a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072aa:	f003 0302 	and.w	r3, r3, #2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0ee      	beq.n	8007290 <HAL_RCC_OscConfig+0x334>
 80072b2:	e014      	b.n	80072de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072b4:	f7fc ff58 	bl	8004168 <HAL_GetTick>
 80072b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072ba:	e00a      	b.n	80072d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072bc:	f7fc ff54 	bl	8004168 <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d901      	bls.n	80072d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e0b5      	b.n	800743e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072d2:	4b3e      	ldr	r3, [pc, #248]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 80072d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1ee      	bne.n	80072bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072de:	7dfb      	ldrb	r3, [r7, #23]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d105      	bne.n	80072f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072e4:	4b39      	ldr	r3, [pc, #228]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 80072e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e8:	4a38      	ldr	r2, [pc, #224]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 80072ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 80a1 	beq.w	800743c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072fa:	4b34      	ldr	r3, [pc, #208]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f003 030c 	and.w	r3, r3, #12
 8007302:	2b08      	cmp	r3, #8
 8007304:	d05c      	beq.n	80073c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	2b02      	cmp	r3, #2
 800730c:	d141      	bne.n	8007392 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800730e:	4b31      	ldr	r3, [pc, #196]	; (80073d4 <HAL_RCC_OscConfig+0x478>)
 8007310:	2200      	movs	r2, #0
 8007312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007314:	f7fc ff28 	bl	8004168 <HAL_GetTick>
 8007318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800731a:	e008      	b.n	800732e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800731c:	f7fc ff24 	bl	8004168 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	2b02      	cmp	r3, #2
 8007328:	d901      	bls.n	800732e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e087      	b.n	800743e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800732e:	4b27      	ldr	r3, [pc, #156]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1f0      	bne.n	800731c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69da      	ldr	r2, [r3, #28]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	019b      	lsls	r3, r3, #6
 800734a:	431a      	orrs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007350:	085b      	lsrs	r3, r3, #1
 8007352:	3b01      	subs	r3, #1
 8007354:	041b      	lsls	r3, r3, #16
 8007356:	431a      	orrs	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735c:	061b      	lsls	r3, r3, #24
 800735e:	491b      	ldr	r1, [pc, #108]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 8007360:	4313      	orrs	r3, r2
 8007362:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007364:	4b1b      	ldr	r3, [pc, #108]	; (80073d4 <HAL_RCC_OscConfig+0x478>)
 8007366:	2201      	movs	r2, #1
 8007368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800736a:	f7fc fefd 	bl	8004168 <HAL_GetTick>
 800736e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007370:	e008      	b.n	8007384 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007372:	f7fc fef9 	bl	8004168 <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d901      	bls.n	8007384 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e05c      	b.n	800743e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007384:	4b11      	ldr	r3, [pc, #68]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0f0      	beq.n	8007372 <HAL_RCC_OscConfig+0x416>
 8007390:	e054      	b.n	800743c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007392:	4b10      	ldr	r3, [pc, #64]	; (80073d4 <HAL_RCC_OscConfig+0x478>)
 8007394:	2200      	movs	r2, #0
 8007396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007398:	f7fc fee6 	bl	8004168 <HAL_GetTick>
 800739c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800739e:	e008      	b.n	80073b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073a0:	f7fc fee2 	bl	8004168 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e045      	b.n	800743e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073b2:	4b06      	ldr	r3, [pc, #24]	; (80073cc <HAL_RCC_OscConfig+0x470>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1f0      	bne.n	80073a0 <HAL_RCC_OscConfig+0x444>
 80073be:	e03d      	b.n	800743c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d107      	bne.n	80073d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e038      	b.n	800743e <HAL_RCC_OscConfig+0x4e2>
 80073cc:	40023800 	.word	0x40023800
 80073d0:	40007000 	.word	0x40007000
 80073d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073d8:	4b1b      	ldr	r3, [pc, #108]	; (8007448 <HAL_RCC_OscConfig+0x4ec>)
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d028      	beq.n	8007438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d121      	bne.n	8007438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073fe:	429a      	cmp	r2, r3
 8007400:	d11a      	bne.n	8007438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007408:	4013      	ands	r3, r2
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800740e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007410:	4293      	cmp	r3, r2
 8007412:	d111      	bne.n	8007438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741e:	085b      	lsrs	r3, r3, #1
 8007420:	3b01      	subs	r3, #1
 8007422:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007424:	429a      	cmp	r2, r3
 8007426:	d107      	bne.n	8007438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007432:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007434:	429a      	cmp	r2, r3
 8007436:	d001      	beq.n	800743c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e000      	b.n	800743e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	40023800 	.word	0x40023800

0800744c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e0cc      	b.n	80075fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007460:	4b68      	ldr	r3, [pc, #416]	; (8007604 <HAL_RCC_ClockConfig+0x1b8>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0307 	and.w	r3, r3, #7
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	429a      	cmp	r2, r3
 800746c:	d90c      	bls.n	8007488 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800746e:	4b65      	ldr	r3, [pc, #404]	; (8007604 <HAL_RCC_ClockConfig+0x1b8>)
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007476:	4b63      	ldr	r3, [pc, #396]	; (8007604 <HAL_RCC_ClockConfig+0x1b8>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0307 	and.w	r3, r3, #7
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d001      	beq.n	8007488 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e0b8      	b.n	80075fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d020      	beq.n	80074d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0304 	and.w	r3, r3, #4
 800749c:	2b00      	cmp	r3, #0
 800749e:	d005      	beq.n	80074ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074a0:	4b59      	ldr	r3, [pc, #356]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	4a58      	ldr	r2, [pc, #352]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80074a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80074aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0308 	and.w	r3, r3, #8
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d005      	beq.n	80074c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074b8:	4b53      	ldr	r3, [pc, #332]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	4a52      	ldr	r2, [pc, #328]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80074be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80074c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074c4:	4b50      	ldr	r3, [pc, #320]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	494d      	ldr	r1, [pc, #308]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d044      	beq.n	800756c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d107      	bne.n	80074fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ea:	4b47      	ldr	r3, [pc, #284]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d119      	bne.n	800752a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e07f      	b.n	80075fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d003      	beq.n	800750a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007506:	2b03      	cmp	r3, #3
 8007508:	d107      	bne.n	800751a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800750a:	4b3f      	ldr	r3, [pc, #252]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d109      	bne.n	800752a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e06f      	b.n	80075fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800751a:	4b3b      	ldr	r3, [pc, #236]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e067      	b.n	80075fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800752a:	4b37      	ldr	r3, [pc, #220]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f023 0203 	bic.w	r2, r3, #3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	4934      	ldr	r1, [pc, #208]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 8007538:	4313      	orrs	r3, r2
 800753a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800753c:	f7fc fe14 	bl	8004168 <HAL_GetTick>
 8007540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007542:	e00a      	b.n	800755a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007544:	f7fc fe10 	bl	8004168 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007552:	4293      	cmp	r3, r2
 8007554:	d901      	bls.n	800755a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e04f      	b.n	80075fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800755a:	4b2b      	ldr	r3, [pc, #172]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f003 020c 	and.w	r2, r3, #12
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	429a      	cmp	r2, r3
 800756a:	d1eb      	bne.n	8007544 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800756c:	4b25      	ldr	r3, [pc, #148]	; (8007604 <HAL_RCC_ClockConfig+0x1b8>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0307 	and.w	r3, r3, #7
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	429a      	cmp	r2, r3
 8007578:	d20c      	bcs.n	8007594 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800757a:	4b22      	ldr	r3, [pc, #136]	; (8007604 <HAL_RCC_ClockConfig+0x1b8>)
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	b2d2      	uxtb	r2, r2
 8007580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007582:	4b20      	ldr	r3, [pc, #128]	; (8007604 <HAL_RCC_ClockConfig+0x1b8>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0307 	and.w	r3, r3, #7
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	429a      	cmp	r2, r3
 800758e:	d001      	beq.n	8007594 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e032      	b.n	80075fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0304 	and.w	r3, r3, #4
 800759c:	2b00      	cmp	r3, #0
 800759e:	d008      	beq.n	80075b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075a0:	4b19      	ldr	r3, [pc, #100]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	4916      	ldr	r1, [pc, #88]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0308 	and.w	r3, r3, #8
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d009      	beq.n	80075d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075be:	4b12      	ldr	r3, [pc, #72]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	00db      	lsls	r3, r3, #3
 80075cc:	490e      	ldr	r1, [pc, #56]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80075d2:	f000 f821 	bl	8007618 <HAL_RCC_GetSysClockFreq>
 80075d6:	4602      	mov	r2, r0
 80075d8:	4b0b      	ldr	r3, [pc, #44]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	091b      	lsrs	r3, r3, #4
 80075de:	f003 030f 	and.w	r3, r3, #15
 80075e2:	490a      	ldr	r1, [pc, #40]	; (800760c <HAL_RCC_ClockConfig+0x1c0>)
 80075e4:	5ccb      	ldrb	r3, [r1, r3]
 80075e6:	fa22 f303 	lsr.w	r3, r2, r3
 80075ea:	4a09      	ldr	r2, [pc, #36]	; (8007610 <HAL_RCC_ClockConfig+0x1c4>)
 80075ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80075ee:	4b09      	ldr	r3, [pc, #36]	; (8007614 <HAL_RCC_ClockConfig+0x1c8>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fc fd74 	bl	80040e0 <HAL_InitTick>

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	40023c00 	.word	0x40023c00
 8007608:	40023800 	.word	0x40023800
 800760c:	0800b220 	.word	0x0800b220
 8007610:	200006ec 	.word	0x200006ec
 8007614:	200006f0 	.word	0x200006f0

08007618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800761c:	b090      	sub	sp, #64	; 0x40
 800761e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007620:	2300      	movs	r3, #0
 8007622:	637b      	str	r3, [r7, #52]	; 0x34
 8007624:	2300      	movs	r3, #0
 8007626:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007628:	2300      	movs	r3, #0
 800762a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007630:	4b59      	ldr	r3, [pc, #356]	; (8007798 <HAL_RCC_GetSysClockFreq+0x180>)
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f003 030c 	and.w	r3, r3, #12
 8007638:	2b08      	cmp	r3, #8
 800763a:	d00d      	beq.n	8007658 <HAL_RCC_GetSysClockFreq+0x40>
 800763c:	2b08      	cmp	r3, #8
 800763e:	f200 80a1 	bhi.w	8007784 <HAL_RCC_GetSysClockFreq+0x16c>
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <HAL_RCC_GetSysClockFreq+0x34>
 8007646:	2b04      	cmp	r3, #4
 8007648:	d003      	beq.n	8007652 <HAL_RCC_GetSysClockFreq+0x3a>
 800764a:	e09b      	b.n	8007784 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800764c:	4b53      	ldr	r3, [pc, #332]	; (800779c <HAL_RCC_GetSysClockFreq+0x184>)
 800764e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007650:	e09b      	b.n	800778a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007652:	4b53      	ldr	r3, [pc, #332]	; (80077a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007654:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007656:	e098      	b.n	800778a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007658:	4b4f      	ldr	r3, [pc, #316]	; (8007798 <HAL_RCC_GetSysClockFreq+0x180>)
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007660:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007662:	4b4d      	ldr	r3, [pc, #308]	; (8007798 <HAL_RCC_GetSysClockFreq+0x180>)
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d028      	beq.n	80076c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800766e:	4b4a      	ldr	r3, [pc, #296]	; (8007798 <HAL_RCC_GetSysClockFreq+0x180>)
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	099b      	lsrs	r3, r3, #6
 8007674:	2200      	movs	r2, #0
 8007676:	623b      	str	r3, [r7, #32]
 8007678:	627a      	str	r2, [r7, #36]	; 0x24
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007680:	2100      	movs	r1, #0
 8007682:	4b47      	ldr	r3, [pc, #284]	; (80077a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007684:	fb03 f201 	mul.w	r2, r3, r1
 8007688:	2300      	movs	r3, #0
 800768a:	fb00 f303 	mul.w	r3, r0, r3
 800768e:	4413      	add	r3, r2
 8007690:	4a43      	ldr	r2, [pc, #268]	; (80077a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007692:	fba0 1202 	umull	r1, r2, r0, r2
 8007696:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007698:	460a      	mov	r2, r1
 800769a:	62ba      	str	r2, [r7, #40]	; 0x28
 800769c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800769e:	4413      	add	r3, r2
 80076a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a4:	2200      	movs	r2, #0
 80076a6:	61bb      	str	r3, [r7, #24]
 80076a8:	61fa      	str	r2, [r7, #28]
 80076aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80076b2:	f7f9 f91b 	bl	80008ec <__aeabi_uldivmod>
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	4613      	mov	r3, r2
 80076bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076be:	e053      	b.n	8007768 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076c0:	4b35      	ldr	r3, [pc, #212]	; (8007798 <HAL_RCC_GetSysClockFreq+0x180>)
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	099b      	lsrs	r3, r3, #6
 80076c6:	2200      	movs	r2, #0
 80076c8:	613b      	str	r3, [r7, #16]
 80076ca:	617a      	str	r2, [r7, #20]
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80076d2:	f04f 0b00 	mov.w	fp, #0
 80076d6:	4652      	mov	r2, sl
 80076d8:	465b      	mov	r3, fp
 80076da:	f04f 0000 	mov.w	r0, #0
 80076de:	f04f 0100 	mov.w	r1, #0
 80076e2:	0159      	lsls	r1, r3, #5
 80076e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076e8:	0150      	lsls	r0, r2, #5
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	ebb2 080a 	subs.w	r8, r2, sl
 80076f2:	eb63 090b 	sbc.w	r9, r3, fp
 80076f6:	f04f 0200 	mov.w	r2, #0
 80076fa:	f04f 0300 	mov.w	r3, #0
 80076fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007702:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007706:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800770a:	ebb2 0408 	subs.w	r4, r2, r8
 800770e:	eb63 0509 	sbc.w	r5, r3, r9
 8007712:	f04f 0200 	mov.w	r2, #0
 8007716:	f04f 0300 	mov.w	r3, #0
 800771a:	00eb      	lsls	r3, r5, #3
 800771c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007720:	00e2      	lsls	r2, r4, #3
 8007722:	4614      	mov	r4, r2
 8007724:	461d      	mov	r5, r3
 8007726:	eb14 030a 	adds.w	r3, r4, sl
 800772a:	603b      	str	r3, [r7, #0]
 800772c:	eb45 030b 	adc.w	r3, r5, fp
 8007730:	607b      	str	r3, [r7, #4]
 8007732:	f04f 0200 	mov.w	r2, #0
 8007736:	f04f 0300 	mov.w	r3, #0
 800773a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800773e:	4629      	mov	r1, r5
 8007740:	028b      	lsls	r3, r1, #10
 8007742:	4621      	mov	r1, r4
 8007744:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007748:	4621      	mov	r1, r4
 800774a:	028a      	lsls	r2, r1, #10
 800774c:	4610      	mov	r0, r2
 800774e:	4619      	mov	r1, r3
 8007750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007752:	2200      	movs	r2, #0
 8007754:	60bb      	str	r3, [r7, #8]
 8007756:	60fa      	str	r2, [r7, #12]
 8007758:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800775c:	f7f9 f8c6 	bl	80008ec <__aeabi_uldivmod>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	4613      	mov	r3, r2
 8007766:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007768:	4b0b      	ldr	r3, [pc, #44]	; (8007798 <HAL_RCC_GetSysClockFreq+0x180>)
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	0c1b      	lsrs	r3, r3, #16
 800776e:	f003 0303 	and.w	r3, r3, #3
 8007772:	3301      	adds	r3, #1
 8007774:	005b      	lsls	r3, r3, #1
 8007776:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007778:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007780:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007782:	e002      	b.n	800778a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007784:	4b05      	ldr	r3, [pc, #20]	; (800779c <HAL_RCC_GetSysClockFreq+0x184>)
 8007786:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800778a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800778c:	4618      	mov	r0, r3
 800778e:	3740      	adds	r7, #64	; 0x40
 8007790:	46bd      	mov	sp, r7
 8007792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007796:	bf00      	nop
 8007798:	40023800 	.word	0x40023800
 800779c:	00f42400 	.word	0x00f42400
 80077a0:	017d7840 	.word	0x017d7840

080077a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077a4:	b480      	push	{r7}
 80077a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077a8:	4b03      	ldr	r3, [pc, #12]	; (80077b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80077aa:	681b      	ldr	r3, [r3, #0]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	200006ec 	.word	0x200006ec

080077bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80077c0:	f7ff fff0 	bl	80077a4 <HAL_RCC_GetHCLKFreq>
 80077c4:	4602      	mov	r2, r0
 80077c6:	4b05      	ldr	r3, [pc, #20]	; (80077dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	0a9b      	lsrs	r3, r3, #10
 80077cc:	f003 0307 	and.w	r3, r3, #7
 80077d0:	4903      	ldr	r1, [pc, #12]	; (80077e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077d2:	5ccb      	ldrb	r3, [r1, r3]
 80077d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077d8:	4618      	mov	r0, r3
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	40023800 	.word	0x40023800
 80077e0:	0800b230 	.word	0x0800b230

080077e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e07b      	b.n	80078ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d108      	bne.n	8007810 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007806:	d009      	beq.n	800781c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	61da      	str	r2, [r3, #28]
 800780e:	e005      	b.n	800781c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d106      	bne.n	800783c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f7fc f9ce 	bl	8003bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2202      	movs	r2, #2
 8007840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007852:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007864:	431a      	orrs	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800786e:	431a      	orrs	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	f003 0302 	and.w	r3, r3, #2
 8007878:	431a      	orrs	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	431a      	orrs	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a0:	ea42 0103 	orr.w	r1, r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	430a      	orrs	r2, r1
 80078b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	0c1b      	lsrs	r3, r3, #16
 80078ba:	f003 0104 	and.w	r1, r3, #4
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c2:	f003 0210 	and.w	r2, r3, #16
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	69da      	ldr	r2, [r3, #28]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b088      	sub	sp, #32
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	60f8      	str	r0, [r7, #12]
 80078fe:	60b9      	str	r1, [r7, #8]
 8007900:	603b      	str	r3, [r7, #0]
 8007902:	4613      	mov	r3, r2
 8007904:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_SPI_Transmit+0x22>
 8007914:	2302      	movs	r3, #2
 8007916:	e126      	b.n	8007b66 <HAL_SPI_Transmit+0x270>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007920:	f7fc fc22 	bl	8004168 <HAL_GetTick>
 8007924:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007926:	88fb      	ldrh	r3, [r7, #6]
 8007928:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b01      	cmp	r3, #1
 8007934:	d002      	beq.n	800793c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007936:	2302      	movs	r3, #2
 8007938:	77fb      	strb	r3, [r7, #31]
    goto error;
 800793a:	e10b      	b.n	8007b54 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d002      	beq.n	8007948 <HAL_SPI_Transmit+0x52>
 8007942:	88fb      	ldrh	r3, [r7, #6]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d102      	bne.n	800794e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800794c:	e102      	b.n	8007b54 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2203      	movs	r2, #3
 8007952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	88fa      	ldrh	r2, [r7, #6]
 8007966:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	88fa      	ldrh	r2, [r7, #6]
 800796c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007994:	d10f      	bne.n	80079b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c0:	2b40      	cmp	r3, #64	; 0x40
 80079c2:	d007      	beq.n	80079d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079dc:	d14b      	bne.n	8007a76 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d002      	beq.n	80079ec <HAL_SPI_Transmit+0xf6>
 80079e6:	8afb      	ldrh	r3, [r7, #22]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d13e      	bne.n	8007a6a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f0:	881a      	ldrh	r2, [r3, #0]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fc:	1c9a      	adds	r2, r3, #2
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a10:	e02b      	b.n	8007a6a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f003 0302 	and.w	r3, r3, #2
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d112      	bne.n	8007a46 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a24:	881a      	ldrh	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a30:	1c9a      	adds	r2, r3, #2
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a44:	e011      	b.n	8007a6a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a46:	f7fc fb8f 	bl	8004168 <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d803      	bhi.n	8007a5e <HAL_SPI_Transmit+0x168>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5c:	d102      	bne.n	8007a64 <HAL_SPI_Transmit+0x16e>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d102      	bne.n	8007a6a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a68:	e074      	b.n	8007b54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1ce      	bne.n	8007a12 <HAL_SPI_Transmit+0x11c>
 8007a74:	e04c      	b.n	8007b10 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d002      	beq.n	8007a84 <HAL_SPI_Transmit+0x18e>
 8007a7e:	8afb      	ldrh	r3, [r7, #22]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d140      	bne.n	8007b06 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	330c      	adds	r3, #12
 8007a8e:	7812      	ldrb	r2, [r2, #0]
 8007a90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007aaa:	e02c      	b.n	8007b06 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d113      	bne.n	8007ae2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	330c      	adds	r3, #12
 8007ac4:	7812      	ldrb	r2, [r2, #0]
 8007ac6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007acc:	1c5a      	adds	r2, r3, #1
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	86da      	strh	r2, [r3, #54]	; 0x36
 8007ae0:	e011      	b.n	8007b06 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ae2:	f7fc fb41 	bl	8004168 <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d803      	bhi.n	8007afa <HAL_SPI_Transmit+0x204>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af8:	d102      	bne.n	8007b00 <HAL_SPI_Transmit+0x20a>
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d102      	bne.n	8007b06 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b04:	e026      	b.n	8007b54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1cd      	bne.n	8007aac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 fbcb 	bl	80082b0 <SPI_EndRxTxTransaction>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2220      	movs	r2, #32
 8007b24:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10a      	bne.n	8007b44 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b2e:	2300      	movs	r3, #0
 8007b30:	613b      	str	r3, [r7, #16]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	613b      	str	r3, [r7, #16]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	613b      	str	r3, [r7, #16]
 8007b42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d002      	beq.n	8007b52 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	77fb      	strb	r3, [r7, #31]
 8007b50:	e000      	b.n	8007b54 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007b52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b64:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3720      	adds	r7, #32
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b088      	sub	sp, #32
 8007b72:	af02      	add	r7, sp, #8
 8007b74:	60f8      	str	r0, [r7, #12]
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	603b      	str	r3, [r7, #0]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b8a:	d112      	bne.n	8007bb2 <HAL_SPI_Receive+0x44>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10e      	bne.n	8007bb2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2204      	movs	r2, #4
 8007b98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007b9c:	88fa      	ldrh	r2, [r7, #6]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	68b9      	ldr	r1, [r7, #8]
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 f8f1 	bl	8007d90 <HAL_SPI_TransmitReceive>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	e0ea      	b.n	8007d88 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <HAL_SPI_Receive+0x52>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e0e3      	b.n	8007d88 <HAL_SPI_Receive+0x21a>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bc8:	f7fc face 	bl	8004168 <HAL_GetTick>
 8007bcc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d002      	beq.n	8007be0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007bda:	2302      	movs	r3, #2
 8007bdc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007bde:	e0ca      	b.n	8007d76 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <HAL_SPI_Receive+0x7e>
 8007be6:	88fb      	ldrh	r3, [r7, #6]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d102      	bne.n	8007bf2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007bf0:	e0c1      	b.n	8007d76 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2204      	movs	r2, #4
 8007bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	88fa      	ldrh	r2, [r7, #6]
 8007c0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	88fa      	ldrh	r2, [r7, #6]
 8007c10:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c38:	d10f      	bne.n	8007c5a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007c58:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c64:	2b40      	cmp	r3, #64	; 0x40
 8007c66:	d007      	beq.n	8007c78 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c76:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d162      	bne.n	8007d46 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007c80:	e02e      	b.n	8007ce0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d115      	bne.n	8007cbc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f103 020c 	add.w	r2, r3, #12
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9c:	7812      	ldrb	r2, [r2, #0]
 8007c9e:	b2d2      	uxtb	r2, r2
 8007ca0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca6:	1c5a      	adds	r2, r3, #1
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007cba:	e011      	b.n	8007ce0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cbc:	f7fc fa54 	bl	8004168 <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d803      	bhi.n	8007cd4 <HAL_SPI_Receive+0x166>
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd2:	d102      	bne.n	8007cda <HAL_SPI_Receive+0x16c>
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d102      	bne.n	8007ce0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007cde:	e04a      	b.n	8007d76 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1cb      	bne.n	8007c82 <HAL_SPI_Receive+0x114>
 8007cea:	e031      	b.n	8007d50 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f003 0301 	and.w	r3, r3, #1
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d113      	bne.n	8007d22 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68da      	ldr	r2, [r3, #12]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	b292      	uxth	r2, r2
 8007d06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0c:	1c9a      	adds	r2, r3, #2
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d20:	e011      	b.n	8007d46 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d22:	f7fc fa21 	bl	8004168 <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d803      	bhi.n	8007d3a <HAL_SPI_Receive+0x1cc>
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d38:	d102      	bne.n	8007d40 <HAL_SPI_Receive+0x1d2>
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d102      	bne.n	8007d46 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007d44:	e017      	b.n	8007d76 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1cd      	bne.n	8007cec <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 fa45 	bl	80081e4 <SPI_EndRxTransaction>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d002      	beq.n	8007d66 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2220      	movs	r2, #32
 8007d64:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d002      	beq.n	8007d74 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	75fb      	strb	r3, [r7, #23]
 8007d72:	e000      	b.n	8007d76 <HAL_SPI_Receive+0x208>
  }

error :
 8007d74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3718      	adds	r7, #24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08c      	sub	sp, #48	; 0x30
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
 8007d9c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d101      	bne.n	8007db6 <HAL_SPI_TransmitReceive+0x26>
 8007db2:	2302      	movs	r3, #2
 8007db4:	e18a      	b.n	80080cc <HAL_SPI_TransmitReceive+0x33c>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007dbe:	f7fc f9d3 	bl	8004168 <HAL_GetTick>
 8007dc2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007dd4:	887b      	ldrh	r3, [r7, #2]
 8007dd6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007dd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d00f      	beq.n	8007e00 <HAL_SPI_TransmitReceive+0x70>
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007de6:	d107      	bne.n	8007df8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d103      	bne.n	8007df8 <HAL_SPI_TransmitReceive+0x68>
 8007df0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007df4:	2b04      	cmp	r3, #4
 8007df6:	d003      	beq.n	8007e00 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007df8:	2302      	movs	r3, #2
 8007dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007dfe:	e15b      	b.n	80080b8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d005      	beq.n	8007e12 <HAL_SPI_TransmitReceive+0x82>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <HAL_SPI_TransmitReceive+0x82>
 8007e0c:	887b      	ldrh	r3, [r7, #2]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d103      	bne.n	8007e1a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007e18:	e14e      	b.n	80080b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b04      	cmp	r3, #4
 8007e24:	d003      	beq.n	8007e2e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2205      	movs	r2, #5
 8007e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	887a      	ldrh	r2, [r7, #2]
 8007e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	887a      	ldrh	r2, [r7, #2]
 8007e44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	887a      	ldrh	r2, [r7, #2]
 8007e50:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	887a      	ldrh	r2, [r7, #2]
 8007e56:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6e:	2b40      	cmp	r3, #64	; 0x40
 8007e70:	d007      	beq.n	8007e82 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e8a:	d178      	bne.n	8007f7e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d002      	beq.n	8007e9a <HAL_SPI_TransmitReceive+0x10a>
 8007e94:	8b7b      	ldrh	r3, [r7, #26]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d166      	bne.n	8007f68 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e9e:	881a      	ldrh	r2, [r3, #0]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eaa:	1c9a      	adds	r2, r3, #2
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ebe:	e053      	b.n	8007f68 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f003 0302 	and.w	r3, r3, #2
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d11b      	bne.n	8007f06 <HAL_SPI_TransmitReceive+0x176>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d016      	beq.n	8007f06 <HAL_SPI_TransmitReceive+0x176>
 8007ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d113      	bne.n	8007f06 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee2:	881a      	ldrh	r2, [r3, #0]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eee:	1c9a      	adds	r2, r3, #2
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	3b01      	subs	r3, #1
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d119      	bne.n	8007f48 <HAL_SPI_TransmitReceive+0x1b8>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d014      	beq.n	8007f48 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68da      	ldr	r2, [r3, #12]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f28:	b292      	uxth	r2, r2
 8007f2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f30:	1c9a      	adds	r2, r3, #2
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f44:	2301      	movs	r3, #1
 8007f46:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f48:	f7fc f90e 	bl	8004168 <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d807      	bhi.n	8007f68 <HAL_SPI_TransmitReceive+0x1d8>
 8007f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5e:	d003      	beq.n	8007f68 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007f66:	e0a7      	b.n	80080b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1a6      	bne.n	8007ec0 <HAL_SPI_TransmitReceive+0x130>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1a1      	bne.n	8007ec0 <HAL_SPI_TransmitReceive+0x130>
 8007f7c:	e07c      	b.n	8008078 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d002      	beq.n	8007f8c <HAL_SPI_TransmitReceive+0x1fc>
 8007f86:	8b7b      	ldrh	r3, [r7, #26]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d16b      	bne.n	8008064 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	330c      	adds	r3, #12
 8007f96:	7812      	ldrb	r2, [r2, #0]
 8007f98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9e:	1c5a      	adds	r2, r3, #1
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	3b01      	subs	r3, #1
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fb2:	e057      	b.n	8008064 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d11c      	bne.n	8007ffc <HAL_SPI_TransmitReceive+0x26c>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d017      	beq.n	8007ffc <HAL_SPI_TransmitReceive+0x26c>
 8007fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d114      	bne.n	8007ffc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	330c      	adds	r3, #12
 8007fdc:	7812      	ldrb	r2, [r2, #0]
 8007fde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe4:	1c5a      	adds	r2, r3, #1
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b01      	cmp	r3, #1
 8008008:	d119      	bne.n	800803e <HAL_SPI_TransmitReceive+0x2ae>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800800e:	b29b      	uxth	r3, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d014      	beq.n	800803e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68da      	ldr	r2, [r3, #12]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801e:	b2d2      	uxtb	r2, r2
 8008020:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008030:	b29b      	uxth	r3, r3
 8008032:	3b01      	subs	r3, #1
 8008034:	b29a      	uxth	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800803a:	2301      	movs	r3, #1
 800803c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800803e:	f7fc f893 	bl	8004168 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800804a:	429a      	cmp	r2, r3
 800804c:	d803      	bhi.n	8008056 <HAL_SPI_TransmitReceive+0x2c6>
 800804e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008054:	d102      	bne.n	800805c <HAL_SPI_TransmitReceive+0x2cc>
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	2b00      	cmp	r3, #0
 800805a:	d103      	bne.n	8008064 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008062:	e029      	b.n	80080b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008068:	b29b      	uxth	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1a2      	bne.n	8007fb4 <HAL_SPI_TransmitReceive+0x224>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008072:	b29b      	uxth	r3, r3
 8008074:	2b00      	cmp	r3, #0
 8008076:	d19d      	bne.n	8007fb4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800807a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 f917 	bl	80082b0 <SPI_EndRxTxTransaction>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d006      	beq.n	8008096 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2220      	movs	r2, #32
 8008092:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008094:	e010      	b.n	80080b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10b      	bne.n	80080b6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800809e:	2300      	movs	r3, #0
 80080a0:	617b      	str	r3, [r7, #20]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	617b      	str	r3, [r7, #20]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	617b      	str	r3, [r7, #20]
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	e000      	b.n	80080b8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80080b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80080c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3730      	adds	r7, #48	; 0x30
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b088      	sub	sp, #32
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	603b      	str	r3, [r7, #0]
 80080e0:	4613      	mov	r3, r2
 80080e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080e4:	f7fc f840 	bl	8004168 <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ec:	1a9b      	subs	r3, r3, r2
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	4413      	add	r3, r2
 80080f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080f4:	f7fc f838 	bl	8004168 <HAL_GetTick>
 80080f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080fa:	4b39      	ldr	r3, [pc, #228]	; (80081e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	015b      	lsls	r3, r3, #5
 8008100:	0d1b      	lsrs	r3, r3, #20
 8008102:	69fa      	ldr	r2, [r7, #28]
 8008104:	fb02 f303 	mul.w	r3, r2, r3
 8008108:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800810a:	e054      	b.n	80081b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008112:	d050      	beq.n	80081b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008114:	f7fc f828 	bl	8004168 <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	69fa      	ldr	r2, [r7, #28]
 8008120:	429a      	cmp	r2, r3
 8008122:	d902      	bls.n	800812a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d13d      	bne.n	80081a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008138:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008142:	d111      	bne.n	8008168 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800814c:	d004      	beq.n	8008158 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008156:	d107      	bne.n	8008168 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008166:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008170:	d10f      	bne.n	8008192 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008190:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e017      	b.n	80081d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d101      	bne.n	80081b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689a      	ldr	r2, [r3, #8]
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	4013      	ands	r3, r2
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	bf0c      	ite	eq
 80081c6:	2301      	moveq	r3, #1
 80081c8:	2300      	movne	r3, #0
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	461a      	mov	r2, r3
 80081ce:	79fb      	ldrb	r3, [r7, #7]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d19b      	bne.n	800810c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3720      	adds	r7, #32
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	200006ec 	.word	0x200006ec

080081e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af02      	add	r7, sp, #8
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081f8:	d111      	bne.n	800821e <SPI_EndRxTransaction+0x3a>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008202:	d004      	beq.n	800820e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800820c:	d107      	bne.n	800821e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800821c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008226:	d12a      	bne.n	800827e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008230:	d012      	beq.n	8008258 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2200      	movs	r2, #0
 800823a:	2180      	movs	r1, #128	; 0x80
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f7ff ff49 	bl	80080d4 <SPI_WaitFlagStateUntilTimeout>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d02d      	beq.n	80082a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800824c:	f043 0220 	orr.w	r2, r3, #32
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e026      	b.n	80082a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	2200      	movs	r2, #0
 8008260:	2101      	movs	r1, #1
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f7ff ff36 	bl	80080d4 <SPI_WaitFlagStateUntilTimeout>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d01a      	beq.n	80082a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008272:	f043 0220 	orr.w	r2, r3, #32
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e013      	b.n	80082a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2200      	movs	r2, #0
 8008286:	2101      	movs	r1, #1
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f7ff ff23 	bl	80080d4 <SPI_WaitFlagStateUntilTimeout>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d007      	beq.n	80082a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008298:	f043 0220 	orr.w	r2, r3, #32
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e000      	b.n	80082a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
	...

080082b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b088      	sub	sp, #32
 80082b4:	af02      	add	r7, sp, #8
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80082bc:	4b1b      	ldr	r3, [pc, #108]	; (800832c <SPI_EndRxTxTransaction+0x7c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a1b      	ldr	r2, [pc, #108]	; (8008330 <SPI_EndRxTxTransaction+0x80>)
 80082c2:	fba2 2303 	umull	r2, r3, r2, r3
 80082c6:	0d5b      	lsrs	r3, r3, #21
 80082c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80082cc:	fb02 f303 	mul.w	r3, r2, r3
 80082d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082da:	d112      	bne.n	8008302 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	2200      	movs	r2, #0
 80082e4:	2180      	movs	r1, #128	; 0x80
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f7ff fef4 	bl	80080d4 <SPI_WaitFlagStateUntilTimeout>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d016      	beq.n	8008320 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f6:	f043 0220 	orr.w	r2, r3, #32
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e00f      	b.n	8008322 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00a      	beq.n	800831e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	3b01      	subs	r3, #1
 800830c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008318:	2b80      	cmp	r3, #128	; 0x80
 800831a:	d0f2      	beq.n	8008302 <SPI_EndRxTxTransaction+0x52>
 800831c:	e000      	b.n	8008320 <SPI_EndRxTxTransaction+0x70>
        break;
 800831e:	bf00      	nop
  }

  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3718      	adds	r7, #24
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	200006ec 	.word	0x200006ec
 8008330:	165e9f81 	.word	0x165e9f81

08008334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d101      	bne.n	8008346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e041      	b.n	80083ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d106      	bne.n	8008360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7fb fd36 	bl	8003dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2202      	movs	r2, #2
 8008364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	3304      	adds	r3, #4
 8008370:	4619      	mov	r1, r3
 8008372:	4610      	mov	r0, r2
 8008374:	f000 fd54 	bl	8008e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d001      	beq.n	80083ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e03c      	b.n	8008466 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2202      	movs	r2, #2
 80083f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a1e      	ldr	r2, [pc, #120]	; (8008474 <HAL_TIM_Base_Start+0xa0>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d018      	beq.n	8008430 <HAL_TIM_Base_Start+0x5c>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008406:	d013      	beq.n	8008430 <HAL_TIM_Base_Start+0x5c>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a1a      	ldr	r2, [pc, #104]	; (8008478 <HAL_TIM_Base_Start+0xa4>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d00e      	beq.n	8008430 <HAL_TIM_Base_Start+0x5c>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a19      	ldr	r2, [pc, #100]	; (800847c <HAL_TIM_Base_Start+0xa8>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d009      	beq.n	8008430 <HAL_TIM_Base_Start+0x5c>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a17      	ldr	r2, [pc, #92]	; (8008480 <HAL_TIM_Base_Start+0xac>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d004      	beq.n	8008430 <HAL_TIM_Base_Start+0x5c>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a16      	ldr	r2, [pc, #88]	; (8008484 <HAL_TIM_Base_Start+0xb0>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d111      	bne.n	8008454 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f003 0307 	and.w	r3, r3, #7
 800843a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b06      	cmp	r3, #6
 8008440:	d010      	beq.n	8008464 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f042 0201 	orr.w	r2, r2, #1
 8008450:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008452:	e007      	b.n	8008464 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0201 	orr.w	r2, r2, #1
 8008462:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	40010000 	.word	0x40010000
 8008478:	40000400 	.word	0x40000400
 800847c:	40000800 	.word	0x40000800
 8008480:	40000c00 	.word	0x40000c00
 8008484:	40014000 	.word	0x40014000

08008488 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b01      	cmp	r3, #1
 800849a:	d001      	beq.n	80084a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e044      	b.n	800852a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2202      	movs	r2, #2
 80084a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68da      	ldr	r2, [r3, #12]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f042 0201 	orr.w	r2, r2, #1
 80084b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a1e      	ldr	r2, [pc, #120]	; (8008538 <HAL_TIM_Base_Start_IT+0xb0>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d018      	beq.n	80084f4 <HAL_TIM_Base_Start_IT+0x6c>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ca:	d013      	beq.n	80084f4 <HAL_TIM_Base_Start_IT+0x6c>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a1a      	ldr	r2, [pc, #104]	; (800853c <HAL_TIM_Base_Start_IT+0xb4>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d00e      	beq.n	80084f4 <HAL_TIM_Base_Start_IT+0x6c>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a19      	ldr	r2, [pc, #100]	; (8008540 <HAL_TIM_Base_Start_IT+0xb8>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d009      	beq.n	80084f4 <HAL_TIM_Base_Start_IT+0x6c>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a17      	ldr	r2, [pc, #92]	; (8008544 <HAL_TIM_Base_Start_IT+0xbc>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d004      	beq.n	80084f4 <HAL_TIM_Base_Start_IT+0x6c>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a16      	ldr	r2, [pc, #88]	; (8008548 <HAL_TIM_Base_Start_IT+0xc0>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d111      	bne.n	8008518 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f003 0307 	and.w	r3, r3, #7
 80084fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b06      	cmp	r3, #6
 8008504:	d010      	beq.n	8008528 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f042 0201 	orr.w	r2, r2, #1
 8008514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008516:	e007      	b.n	8008528 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f042 0201 	orr.w	r2, r2, #1
 8008526:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3714      	adds	r7, #20
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	40010000 	.word	0x40010000
 800853c:	40000400 	.word	0x40000400
 8008540:	40000800 	.word	0x40000800
 8008544:	40000c00 	.word	0x40000c00
 8008548:	40014000 	.word	0x40014000

0800854c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e041      	b.n	80085e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d106      	bne.n	8008578 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f839 	bl	80085ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2202      	movs	r2, #2
 800857c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	3304      	adds	r3, #4
 8008588:	4619      	mov	r1, r3
 800858a:	4610      	mov	r0, r2
 800858c:	f000 fc48 	bl	8008e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b083      	sub	sp, #12
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
	...

08008600 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d109      	bne.n	8008624 <HAL_TIM_PWM_Start+0x24>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008616:	b2db      	uxtb	r3, r3
 8008618:	2b01      	cmp	r3, #1
 800861a:	bf14      	ite	ne
 800861c:	2301      	movne	r3, #1
 800861e:	2300      	moveq	r3, #0
 8008620:	b2db      	uxtb	r3, r3
 8008622:	e022      	b.n	800866a <HAL_TIM_PWM_Start+0x6a>
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	2b04      	cmp	r3, #4
 8008628:	d109      	bne.n	800863e <HAL_TIM_PWM_Start+0x3e>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b01      	cmp	r3, #1
 8008634:	bf14      	ite	ne
 8008636:	2301      	movne	r3, #1
 8008638:	2300      	moveq	r3, #0
 800863a:	b2db      	uxtb	r3, r3
 800863c:	e015      	b.n	800866a <HAL_TIM_PWM_Start+0x6a>
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	2b08      	cmp	r3, #8
 8008642:	d109      	bne.n	8008658 <HAL_TIM_PWM_Start+0x58>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b01      	cmp	r3, #1
 800864e:	bf14      	ite	ne
 8008650:	2301      	movne	r3, #1
 8008652:	2300      	moveq	r3, #0
 8008654:	b2db      	uxtb	r3, r3
 8008656:	e008      	b.n	800866a <HAL_TIM_PWM_Start+0x6a>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b01      	cmp	r3, #1
 8008662:	bf14      	ite	ne
 8008664:	2301      	movne	r3, #1
 8008666:	2300      	moveq	r3, #0
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e068      	b.n	8008744 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d104      	bne.n	8008682 <HAL_TIM_PWM_Start+0x82>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2202      	movs	r2, #2
 800867c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008680:	e013      	b.n	80086aa <HAL_TIM_PWM_Start+0xaa>
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	2b04      	cmp	r3, #4
 8008686:	d104      	bne.n	8008692 <HAL_TIM_PWM_Start+0x92>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2202      	movs	r2, #2
 800868c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008690:	e00b      	b.n	80086aa <HAL_TIM_PWM_Start+0xaa>
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b08      	cmp	r3, #8
 8008696:	d104      	bne.n	80086a2 <HAL_TIM_PWM_Start+0xa2>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2202      	movs	r2, #2
 800869c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086a0:	e003      	b.n	80086aa <HAL_TIM_PWM_Start+0xaa>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2202      	movs	r2, #2
 80086a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2201      	movs	r2, #1
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 fe5a 	bl	800936c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a23      	ldr	r2, [pc, #140]	; (800874c <HAL_TIM_PWM_Start+0x14c>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d107      	bne.n	80086d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a1d      	ldr	r2, [pc, #116]	; (800874c <HAL_TIM_PWM_Start+0x14c>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d018      	beq.n	800870e <HAL_TIM_PWM_Start+0x10e>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086e4:	d013      	beq.n	800870e <HAL_TIM_PWM_Start+0x10e>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a19      	ldr	r2, [pc, #100]	; (8008750 <HAL_TIM_PWM_Start+0x150>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d00e      	beq.n	800870e <HAL_TIM_PWM_Start+0x10e>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a17      	ldr	r2, [pc, #92]	; (8008754 <HAL_TIM_PWM_Start+0x154>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d009      	beq.n	800870e <HAL_TIM_PWM_Start+0x10e>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a16      	ldr	r2, [pc, #88]	; (8008758 <HAL_TIM_PWM_Start+0x158>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d004      	beq.n	800870e <HAL_TIM_PWM_Start+0x10e>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a14      	ldr	r2, [pc, #80]	; (800875c <HAL_TIM_PWM_Start+0x15c>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d111      	bne.n	8008732 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f003 0307 	and.w	r3, r3, #7
 8008718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2b06      	cmp	r3, #6
 800871e:	d010      	beq.n	8008742 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f042 0201 	orr.w	r2, r2, #1
 800872e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008730:	e007      	b.n	8008742 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f042 0201 	orr.w	r2, r2, #1
 8008740:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	40010000 	.word	0x40010000
 8008750:	40000400 	.word	0x40000400
 8008754:	40000800 	.word	0x40000800
 8008758:	40000c00 	.word	0x40000c00
 800875c:	40014000 	.word	0x40014000

08008760 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e097      	b.n	80088a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b00      	cmp	r3, #0
 800877e:	d106      	bne.n	800878e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7fb faa3 	bl	8003cd4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2202      	movs	r2, #2
 8008792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	6812      	ldr	r2, [r2, #0]
 80087a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087a4:	f023 0307 	bic.w	r3, r3, #7
 80087a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	3304      	adds	r3, #4
 80087b2:	4619      	mov	r1, r3
 80087b4:	4610      	mov	r0, r2
 80087b6:	f000 fb33 	bl	8008e20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	6a1b      	ldr	r3, [r3, #32]
 80087d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	4313      	orrs	r3, r2
 80087da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087e2:	f023 0303 	bic.w	r3, r3, #3
 80087e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	689a      	ldr	r2, [r3, #8]
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	021b      	lsls	r3, r3, #8
 80087f2:	4313      	orrs	r3, r2
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008800:	f023 030c 	bic.w	r3, r3, #12
 8008804:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800880c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008810:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	68da      	ldr	r2, [r3, #12]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	69db      	ldr	r3, [r3, #28]
 800881a:	021b      	lsls	r3, r3, #8
 800881c:	4313      	orrs	r3, r2
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	4313      	orrs	r3, r2
 8008822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	011a      	lsls	r2, r3, #4
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	031b      	lsls	r3, r3, #12
 8008830:	4313      	orrs	r3, r2
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	4313      	orrs	r3, r2
 8008836:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800883e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008846:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	011b      	lsls	r3, r3, #4
 8008852:	4313      	orrs	r3, r2
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2201      	movs	r2, #1
 8008886:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3718      	adds	r7, #24
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	f003 0302 	and.w	r3, r3, #2
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d122      	bne.n	8008908 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	f003 0302 	and.w	r3, r3, #2
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d11b      	bne.n	8008908 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f06f 0202 	mvn.w	r2, #2
 80088d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	f003 0303 	and.w	r3, r3, #3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d003      	beq.n	80088f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fa77 	bl	8008de2 <HAL_TIM_IC_CaptureCallback>
 80088f4:	e005      	b.n	8008902 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fa69 	bl	8008dce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fa7a 	bl	8008df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f003 0304 	and.w	r3, r3, #4
 8008912:	2b04      	cmp	r3, #4
 8008914:	d122      	bne.n	800895c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	f003 0304 	and.w	r3, r3, #4
 8008920:	2b04      	cmp	r3, #4
 8008922:	d11b      	bne.n	800895c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f06f 0204 	mvn.w	r2, #4
 800892c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2202      	movs	r2, #2
 8008932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fa4d 	bl	8008de2 <HAL_TIM_IC_CaptureCallback>
 8008948:	e005      	b.n	8008956 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fa3f 	bl	8008dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fa50 	bl	8008df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	f003 0308 	and.w	r3, r3, #8
 8008966:	2b08      	cmp	r3, #8
 8008968:	d122      	bne.n	80089b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	f003 0308 	and.w	r3, r3, #8
 8008974:	2b08      	cmp	r3, #8
 8008976:	d11b      	bne.n	80089b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f06f 0208 	mvn.w	r2, #8
 8008980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2204      	movs	r2, #4
 8008986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	69db      	ldr	r3, [r3, #28]
 800898e:	f003 0303 	and.w	r3, r3, #3
 8008992:	2b00      	cmp	r3, #0
 8008994:	d003      	beq.n	800899e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fa23 	bl	8008de2 <HAL_TIM_IC_CaptureCallback>
 800899c:	e005      	b.n	80089aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fa15 	bl	8008dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fa26 	bl	8008df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	f003 0310 	and.w	r3, r3, #16
 80089ba:	2b10      	cmp	r3, #16
 80089bc:	d122      	bne.n	8008a04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	f003 0310 	and.w	r3, r3, #16
 80089c8:	2b10      	cmp	r3, #16
 80089ca:	d11b      	bne.n	8008a04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f06f 0210 	mvn.w	r2, #16
 80089d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2208      	movs	r2, #8
 80089da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	69db      	ldr	r3, [r3, #28]
 80089e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f9f9 	bl	8008de2 <HAL_TIM_IC_CaptureCallback>
 80089f0:	e005      	b.n	80089fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f9eb 	bl	8008dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 f9fc 	bl	8008df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	f003 0301 	and.w	r3, r3, #1
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d10e      	bne.n	8008a30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	f003 0301 	and.w	r3, r3, #1
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d107      	bne.n	8008a30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f06f 0201 	mvn.w	r2, #1
 8008a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f7f8 f962 	bl	8000cf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a3a:	2b80      	cmp	r3, #128	; 0x80
 8008a3c:	d10e      	bne.n	8008a5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a48:	2b80      	cmp	r3, #128	; 0x80
 8008a4a:	d107      	bne.n	8008a5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fd26 	bl	80094a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a66:	2b40      	cmp	r3, #64	; 0x40
 8008a68:	d10e      	bne.n	8008a88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a74:	2b40      	cmp	r3, #64	; 0x40
 8008a76:	d107      	bne.n	8008a88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f9c1 	bl	8008e0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	f003 0320 	and.w	r3, r3, #32
 8008a92:	2b20      	cmp	r3, #32
 8008a94:	d10e      	bne.n	8008ab4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	f003 0320 	and.w	r3, r3, #32
 8008aa0:	2b20      	cmp	r3, #32
 8008aa2:	d107      	bne.n	8008ab4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f06f 0220 	mvn.w	r2, #32
 8008aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fcf0 	bl	8009494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ab4:	bf00      	nop
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d101      	bne.n	8008ada <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	e0ae      	b.n	8008c38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b0c      	cmp	r3, #12
 8008ae6:	f200 809f 	bhi.w	8008c28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008aea:	a201      	add	r2, pc, #4	; (adr r2, 8008af0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af0:	08008b25 	.word	0x08008b25
 8008af4:	08008c29 	.word	0x08008c29
 8008af8:	08008c29 	.word	0x08008c29
 8008afc:	08008c29 	.word	0x08008c29
 8008b00:	08008b65 	.word	0x08008b65
 8008b04:	08008c29 	.word	0x08008c29
 8008b08:	08008c29 	.word	0x08008c29
 8008b0c:	08008c29 	.word	0x08008c29
 8008b10:	08008ba7 	.word	0x08008ba7
 8008b14:	08008c29 	.word	0x08008c29
 8008b18:	08008c29 	.word	0x08008c29
 8008b1c:	08008c29 	.word	0x08008c29
 8008b20:	08008be7 	.word	0x08008be7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68b9      	ldr	r1, [r7, #8]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 f9f8 	bl	8008f20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	699a      	ldr	r2, [r3, #24]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f042 0208 	orr.w	r2, r2, #8
 8008b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	699a      	ldr	r2, [r3, #24]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f022 0204 	bic.w	r2, r2, #4
 8008b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6999      	ldr	r1, [r3, #24]
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	691a      	ldr	r2, [r3, #16]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	619a      	str	r2, [r3, #24]
      break;
 8008b62:	e064      	b.n	8008c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68b9      	ldr	r1, [r7, #8]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 fa3e 	bl	8008fec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	699a      	ldr	r2, [r3, #24]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	699a      	ldr	r2, [r3, #24]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6999      	ldr	r1, [r3, #24]
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	021a      	lsls	r2, r3, #8
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	619a      	str	r2, [r3, #24]
      break;
 8008ba4:	e043      	b.n	8008c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68b9      	ldr	r1, [r7, #8]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f000 fa89 	bl	80090c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	69da      	ldr	r2, [r3, #28]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f042 0208 	orr.w	r2, r2, #8
 8008bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	69da      	ldr	r2, [r3, #28]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f022 0204 	bic.w	r2, r2, #4
 8008bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	69d9      	ldr	r1, [r3, #28]
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	691a      	ldr	r2, [r3, #16]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	430a      	orrs	r2, r1
 8008be2:	61da      	str	r2, [r3, #28]
      break;
 8008be4:	e023      	b.n	8008c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68b9      	ldr	r1, [r7, #8]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 fad3 	bl	8009198 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	69da      	ldr	r2, [r3, #28]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	69da      	ldr	r2, [r3, #28]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	69d9      	ldr	r1, [r3, #28]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	021a      	lsls	r2, r3, #8
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	61da      	str	r2, [r3, #28]
      break;
 8008c26:	e002      	b.n	8008c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3718      	adds	r7, #24
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d101      	bne.n	8008c5c <HAL_TIM_ConfigClockSource+0x1c>
 8008c58:	2302      	movs	r3, #2
 8008c5a:	e0b4      	b.n	8008dc6 <HAL_TIM_ConfigClockSource+0x186>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2202      	movs	r2, #2
 8008c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c94:	d03e      	beq.n	8008d14 <HAL_TIM_ConfigClockSource+0xd4>
 8008c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c9a:	f200 8087 	bhi.w	8008dac <HAL_TIM_ConfigClockSource+0x16c>
 8008c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ca2:	f000 8086 	beq.w	8008db2 <HAL_TIM_ConfigClockSource+0x172>
 8008ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008caa:	d87f      	bhi.n	8008dac <HAL_TIM_ConfigClockSource+0x16c>
 8008cac:	2b70      	cmp	r3, #112	; 0x70
 8008cae:	d01a      	beq.n	8008ce6 <HAL_TIM_ConfigClockSource+0xa6>
 8008cb0:	2b70      	cmp	r3, #112	; 0x70
 8008cb2:	d87b      	bhi.n	8008dac <HAL_TIM_ConfigClockSource+0x16c>
 8008cb4:	2b60      	cmp	r3, #96	; 0x60
 8008cb6:	d050      	beq.n	8008d5a <HAL_TIM_ConfigClockSource+0x11a>
 8008cb8:	2b60      	cmp	r3, #96	; 0x60
 8008cba:	d877      	bhi.n	8008dac <HAL_TIM_ConfigClockSource+0x16c>
 8008cbc:	2b50      	cmp	r3, #80	; 0x50
 8008cbe:	d03c      	beq.n	8008d3a <HAL_TIM_ConfigClockSource+0xfa>
 8008cc0:	2b50      	cmp	r3, #80	; 0x50
 8008cc2:	d873      	bhi.n	8008dac <HAL_TIM_ConfigClockSource+0x16c>
 8008cc4:	2b40      	cmp	r3, #64	; 0x40
 8008cc6:	d058      	beq.n	8008d7a <HAL_TIM_ConfigClockSource+0x13a>
 8008cc8:	2b40      	cmp	r3, #64	; 0x40
 8008cca:	d86f      	bhi.n	8008dac <HAL_TIM_ConfigClockSource+0x16c>
 8008ccc:	2b30      	cmp	r3, #48	; 0x30
 8008cce:	d064      	beq.n	8008d9a <HAL_TIM_ConfigClockSource+0x15a>
 8008cd0:	2b30      	cmp	r3, #48	; 0x30
 8008cd2:	d86b      	bhi.n	8008dac <HAL_TIM_ConfigClockSource+0x16c>
 8008cd4:	2b20      	cmp	r3, #32
 8008cd6:	d060      	beq.n	8008d9a <HAL_TIM_ConfigClockSource+0x15a>
 8008cd8:	2b20      	cmp	r3, #32
 8008cda:	d867      	bhi.n	8008dac <HAL_TIM_ConfigClockSource+0x16c>
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d05c      	beq.n	8008d9a <HAL_TIM_ConfigClockSource+0x15a>
 8008ce0:	2b10      	cmp	r3, #16
 8008ce2:	d05a      	beq.n	8008d9a <HAL_TIM_ConfigClockSource+0x15a>
 8008ce4:	e062      	b.n	8008dac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6818      	ldr	r0, [r3, #0]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	6899      	ldr	r1, [r3, #8]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	685a      	ldr	r2, [r3, #4]
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	f000 fb19 	bl	800932c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	609a      	str	r2, [r3, #8]
      break;
 8008d12:	e04f      	b.n	8008db4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6818      	ldr	r0, [r3, #0]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	6899      	ldr	r1, [r3, #8]
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	685a      	ldr	r2, [r3, #4]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	f000 fb02 	bl	800932c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	689a      	ldr	r2, [r3, #8]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d36:	609a      	str	r2, [r3, #8]
      break;
 8008d38:	e03c      	b.n	8008db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6818      	ldr	r0, [r3, #0]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	6859      	ldr	r1, [r3, #4]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	461a      	mov	r2, r3
 8008d48:	f000 fa76 	bl	8009238 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2150      	movs	r1, #80	; 0x50
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 facf 	bl	80092f6 <TIM_ITRx_SetConfig>
      break;
 8008d58:	e02c      	b.n	8008db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6818      	ldr	r0, [r3, #0]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	6859      	ldr	r1, [r3, #4]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	461a      	mov	r2, r3
 8008d68:	f000 fa95 	bl	8009296 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2160      	movs	r1, #96	; 0x60
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 fabf 	bl	80092f6 <TIM_ITRx_SetConfig>
      break;
 8008d78:	e01c      	b.n	8008db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6818      	ldr	r0, [r3, #0]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	6859      	ldr	r1, [r3, #4]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	461a      	mov	r2, r3
 8008d88:	f000 fa56 	bl	8009238 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2140      	movs	r1, #64	; 0x40
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 faaf 	bl	80092f6 <TIM_ITRx_SetConfig>
      break;
 8008d98:	e00c      	b.n	8008db4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4619      	mov	r1, r3
 8008da4:	4610      	mov	r0, r2
 8008da6:	f000 faa6 	bl	80092f6 <TIM_ITRx_SetConfig>
      break;
 8008daa:	e003      	b.n	8008db4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	73fb      	strb	r3, [r7, #15]
      break;
 8008db0:	e000      	b.n	8008db4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008db2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b083      	sub	sp, #12
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008dd6:	bf00      	nop
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr

08008de2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b083      	sub	sp, #12
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008dea:	bf00      	nop
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008df6:	b480      	push	{r7}
 8008df8:	b083      	sub	sp, #12
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008dfe:	bf00      	nop
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b083      	sub	sp, #12
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e12:	bf00      	nop
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
	...

08008e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a34      	ldr	r2, [pc, #208]	; (8008f04 <TIM_Base_SetConfig+0xe4>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d00f      	beq.n	8008e58 <TIM_Base_SetConfig+0x38>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e3e:	d00b      	beq.n	8008e58 <TIM_Base_SetConfig+0x38>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a31      	ldr	r2, [pc, #196]	; (8008f08 <TIM_Base_SetConfig+0xe8>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d007      	beq.n	8008e58 <TIM_Base_SetConfig+0x38>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a30      	ldr	r2, [pc, #192]	; (8008f0c <TIM_Base_SetConfig+0xec>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d003      	beq.n	8008e58 <TIM_Base_SetConfig+0x38>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a2f      	ldr	r2, [pc, #188]	; (8008f10 <TIM_Base_SetConfig+0xf0>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d108      	bne.n	8008e6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a25      	ldr	r2, [pc, #148]	; (8008f04 <TIM_Base_SetConfig+0xe4>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d01b      	beq.n	8008eaa <TIM_Base_SetConfig+0x8a>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e78:	d017      	beq.n	8008eaa <TIM_Base_SetConfig+0x8a>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a22      	ldr	r2, [pc, #136]	; (8008f08 <TIM_Base_SetConfig+0xe8>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d013      	beq.n	8008eaa <TIM_Base_SetConfig+0x8a>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a21      	ldr	r2, [pc, #132]	; (8008f0c <TIM_Base_SetConfig+0xec>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d00f      	beq.n	8008eaa <TIM_Base_SetConfig+0x8a>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a20      	ldr	r2, [pc, #128]	; (8008f10 <TIM_Base_SetConfig+0xf0>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d00b      	beq.n	8008eaa <TIM_Base_SetConfig+0x8a>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a1f      	ldr	r2, [pc, #124]	; (8008f14 <TIM_Base_SetConfig+0xf4>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d007      	beq.n	8008eaa <TIM_Base_SetConfig+0x8a>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a1e      	ldr	r2, [pc, #120]	; (8008f18 <TIM_Base_SetConfig+0xf8>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d003      	beq.n	8008eaa <TIM_Base_SetConfig+0x8a>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a1d      	ldr	r2, [pc, #116]	; (8008f1c <TIM_Base_SetConfig+0xfc>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d108      	bne.n	8008ebc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	689a      	ldr	r2, [r3, #8]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a08      	ldr	r2, [pc, #32]	; (8008f04 <TIM_Base_SetConfig+0xe4>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d103      	bne.n	8008ef0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	691a      	ldr	r2, [r3, #16]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	615a      	str	r2, [r3, #20]
}
 8008ef6:	bf00      	nop
 8008ef8:	3714      	adds	r7, #20
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	40010000 	.word	0x40010000
 8008f08:	40000400 	.word	0x40000400
 8008f0c:	40000800 	.word	0x40000800
 8008f10:	40000c00 	.word	0x40000c00
 8008f14:	40014000 	.word	0x40014000
 8008f18:	40014400 	.word	0x40014400
 8008f1c:	40014800 	.word	0x40014800

08008f20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a1b      	ldr	r3, [r3, #32]
 8008f2e:	f023 0201 	bic.w	r2, r3, #1
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a1b      	ldr	r3, [r3, #32]
 8008f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f023 0303 	bic.w	r3, r3, #3
 8008f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	f023 0302 	bic.w	r3, r3, #2
 8008f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a1c      	ldr	r2, [pc, #112]	; (8008fe8 <TIM_OC1_SetConfig+0xc8>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d10c      	bne.n	8008f96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	f023 0308 	bic.w	r3, r3, #8
 8008f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f023 0304 	bic.w	r3, r3, #4
 8008f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a13      	ldr	r2, [pc, #76]	; (8008fe8 <TIM_OC1_SetConfig+0xc8>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d111      	bne.n	8008fc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	695b      	ldr	r3, [r3, #20]
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	693a      	ldr	r2, [r7, #16]
 8008fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	697a      	ldr	r2, [r7, #20]
 8008fda:	621a      	str	r2, [r3, #32]
}
 8008fdc:	bf00      	nop
 8008fde:	371c      	adds	r7, #28
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr
 8008fe8:	40010000 	.word	0x40010000

08008fec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b087      	sub	sp, #28
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a1b      	ldr	r3, [r3, #32]
 8008ffa:	f023 0210 	bic.w	r2, r3, #16
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a1b      	ldr	r3, [r3, #32]
 8009006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	699b      	ldr	r3, [r3, #24]
 8009012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800901a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	021b      	lsls	r3, r3, #8
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	4313      	orrs	r3, r2
 800902e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	f023 0320 	bic.w	r3, r3, #32
 8009036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	011b      	lsls	r3, r3, #4
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	4313      	orrs	r3, r2
 8009042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a1e      	ldr	r2, [pc, #120]	; (80090c0 <TIM_OC2_SetConfig+0xd4>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d10d      	bne.n	8009068 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	011b      	lsls	r3, r3, #4
 800905a:	697a      	ldr	r2, [r7, #20]
 800905c:	4313      	orrs	r3, r2
 800905e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009066:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a15      	ldr	r2, [pc, #84]	; (80090c0 <TIM_OC2_SetConfig+0xd4>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d113      	bne.n	8009098 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009076:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800907e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	4313      	orrs	r3, r2
 800908a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	693a      	ldr	r2, [r7, #16]
 8009094:	4313      	orrs	r3, r2
 8009096:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	693a      	ldr	r2, [r7, #16]
 800909c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	685a      	ldr	r2, [r3, #4]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	621a      	str	r2, [r3, #32]
}
 80090b2:	bf00      	nop
 80090b4:	371c      	adds	r7, #28
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	40010000 	.word	0x40010000

080090c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b087      	sub	sp, #28
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f023 0303 	bic.w	r3, r3, #3
 80090fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	4313      	orrs	r3, r2
 8009104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800910c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	021b      	lsls	r3, r3, #8
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	4313      	orrs	r3, r2
 8009118:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a1d      	ldr	r2, [pc, #116]	; (8009194 <TIM_OC3_SetConfig+0xd0>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d10d      	bne.n	800913e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009128:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	021b      	lsls	r3, r3, #8
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	4313      	orrs	r3, r2
 8009134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800913c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a14      	ldr	r2, [pc, #80]	; (8009194 <TIM_OC3_SetConfig+0xd0>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d113      	bne.n	800916e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800914c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	011b      	lsls	r3, r3, #4
 800915c:	693a      	ldr	r2, [r7, #16]
 800915e:	4313      	orrs	r3, r2
 8009160:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	011b      	lsls	r3, r3, #4
 8009168:	693a      	ldr	r2, [r7, #16]
 800916a:	4313      	orrs	r3, r2
 800916c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	621a      	str	r2, [r3, #32]
}
 8009188:	bf00      	nop
 800918a:	371c      	adds	r7, #28
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr
 8009194:	40010000 	.word	0x40010000

08009198 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009198:	b480      	push	{r7}
 800919a:	b087      	sub	sp, #28
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	69db      	ldr	r3, [r3, #28]
 80091be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	021b      	lsls	r3, r3, #8
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	4313      	orrs	r3, r2
 80091da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	031b      	lsls	r3, r3, #12
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a10      	ldr	r2, [pc, #64]	; (8009234 <TIM_OC4_SetConfig+0x9c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d109      	bne.n	800920c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	695b      	ldr	r3, [r3, #20]
 8009204:	019b      	lsls	r3, r3, #6
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	4313      	orrs	r3, r2
 800920a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	621a      	str	r2, [r3, #32]
}
 8009226:	bf00      	nop
 8009228:	371c      	adds	r7, #28
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	40010000 	.word	0x40010000

08009238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009238:	b480      	push	{r7}
 800923a:	b087      	sub	sp, #28
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6a1b      	ldr	r3, [r3, #32]
 8009248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6a1b      	ldr	r3, [r3, #32]
 800924e:	f023 0201 	bic.w	r2, r3, #1
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	011b      	lsls	r3, r3, #4
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	4313      	orrs	r3, r2
 800926c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f023 030a 	bic.w	r3, r3, #10
 8009274:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009276:	697a      	ldr	r2, [r7, #20]
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	4313      	orrs	r3, r2
 800927c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	621a      	str	r2, [r3, #32]
}
 800928a:	bf00      	nop
 800928c:	371c      	adds	r7, #28
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr

08009296 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009296:	b480      	push	{r7}
 8009298:	b087      	sub	sp, #28
 800929a:	af00      	add	r7, sp, #0
 800929c:	60f8      	str	r0, [r7, #12]
 800929e:	60b9      	str	r1, [r7, #8]
 80092a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6a1b      	ldr	r3, [r3, #32]
 80092a6:	f023 0210 	bic.w	r2, r3, #16
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6a1b      	ldr	r3, [r3, #32]
 80092b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	031b      	lsls	r3, r3, #12
 80092c6:	697a      	ldr	r2, [r7, #20]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	011b      	lsls	r3, r3, #4
 80092d8:	693a      	ldr	r2, [r7, #16]
 80092da:	4313      	orrs	r3, r2
 80092dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	697a      	ldr	r2, [r7, #20]
 80092e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	621a      	str	r2, [r3, #32]
}
 80092ea:	bf00      	nop
 80092ec:	371c      	adds	r7, #28
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b085      	sub	sp, #20
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800930c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800930e:	683a      	ldr	r2, [r7, #0]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4313      	orrs	r3, r2
 8009314:	f043 0307 	orr.w	r3, r3, #7
 8009318:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	609a      	str	r2, [r3, #8]
}
 8009320:	bf00      	nop
 8009322:	3714      	adds	r7, #20
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800932c:	b480      	push	{r7}
 800932e:	b087      	sub	sp, #28
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
 8009338:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009346:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	021a      	lsls	r2, r3, #8
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	431a      	orrs	r2, r3
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	4313      	orrs	r3, r2
 8009354:	697a      	ldr	r2, [r7, #20]
 8009356:	4313      	orrs	r3, r2
 8009358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	697a      	ldr	r2, [r7, #20]
 800935e:	609a      	str	r2, [r3, #8]
}
 8009360:	bf00      	nop
 8009362:	371c      	adds	r7, #28
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800936c:	b480      	push	{r7}
 800936e:	b087      	sub	sp, #28
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	f003 031f 	and.w	r3, r3, #31
 800937e:	2201      	movs	r2, #1
 8009380:	fa02 f303 	lsl.w	r3, r2, r3
 8009384:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6a1a      	ldr	r2, [r3, #32]
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	43db      	mvns	r3, r3
 800938e:	401a      	ands	r2, r3
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6a1a      	ldr	r2, [r3, #32]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	f003 031f 	and.w	r3, r3, #31
 800939e:	6879      	ldr	r1, [r7, #4]
 80093a0:	fa01 f303 	lsl.w	r3, r1, r3
 80093a4:	431a      	orrs	r2, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	621a      	str	r2, [r3, #32]
}
 80093aa:	bf00      	nop
 80093ac:	371c      	adds	r7, #28
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
	...

080093b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d101      	bne.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093cc:	2302      	movs	r3, #2
 80093ce:	e050      	b.n	8009472 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2202      	movs	r2, #2
 80093dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	4313      	orrs	r3, r2
 8009400:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a1c      	ldr	r2, [pc, #112]	; (8009480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d018      	beq.n	8009446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800941c:	d013      	beq.n	8009446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a18      	ldr	r2, [pc, #96]	; (8009484 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d00e      	beq.n	8009446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a16      	ldr	r2, [pc, #88]	; (8009488 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d009      	beq.n	8009446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a15      	ldr	r2, [pc, #84]	; (800948c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d004      	beq.n	8009446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a13      	ldr	r2, [pc, #76]	; (8009490 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d10c      	bne.n	8009460 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800944c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	4313      	orrs	r3, r2
 8009456:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3714      	adds	r7, #20
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop
 8009480:	40010000 	.word	0x40010000
 8009484:	40000400 	.word	0x40000400
 8009488:	40000800 	.word	0x40000800
 800948c:	40000c00 	.word	0x40000c00
 8009490:	40014000 	.word	0x40014000

08009494 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <arm_sin_f32>:
 80094bc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8009538 <arm_sin_f32+0x7c>
 80094c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80094c4:	ee20 7a07 	vmul.f32	s14, s0, s14
 80094c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094cc:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80094d0:	d42c      	bmi.n	800952c <arm_sin_f32+0x70>
 80094d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094d6:	eddf 6a19 	vldr	s13, [pc, #100]	; 800953c <arm_sin_f32+0x80>
 80094da:	4a19      	ldr	r2, [pc, #100]	; (8009540 <arm_sin_f32+0x84>)
 80094dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80094e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80094e8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80094ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f0:	bfa8      	it	ge
 80094f2:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 80094f6:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80094fa:	ee17 3a10 	vmov	r3, s14
 80094fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009502:	ee07 3a10 	vmov	s14, r3
 8009506:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800950a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800950e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009512:	edd1 6a01 	vldr	s13, [r1, #4]
 8009516:	ee30 7a67 	vsub.f32	s14, s0, s15
 800951a:	ed91 0a00 	vldr	s0, [r1]
 800951e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009522:	ee27 0a00 	vmul.f32	s0, s14, s0
 8009526:	ee30 0a27 	vadd.f32	s0, s0, s15
 800952a:	4770      	bx	lr
 800952c:	ee17 3a90 	vmov	r3, s15
 8009530:	3b01      	subs	r3, #1
 8009532:	ee07 3a90 	vmov	s15, r3
 8009536:	e7cc      	b.n	80094d2 <arm_sin_f32+0x16>
 8009538:	3e22f983 	.word	0x3e22f983
 800953c:	44000000 	.word	0x44000000
 8009540:	0800b240 	.word	0x0800b240

08009544 <__errno>:
 8009544:	4b01      	ldr	r3, [pc, #4]	; (800954c <__errno+0x8>)
 8009546:	6818      	ldr	r0, [r3, #0]
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	200006f8 	.word	0x200006f8

08009550 <__libc_init_array>:
 8009550:	b570      	push	{r4, r5, r6, lr}
 8009552:	4d0d      	ldr	r5, [pc, #52]	; (8009588 <__libc_init_array+0x38>)
 8009554:	4c0d      	ldr	r4, [pc, #52]	; (800958c <__libc_init_array+0x3c>)
 8009556:	1b64      	subs	r4, r4, r5
 8009558:	10a4      	asrs	r4, r4, #2
 800955a:	2600      	movs	r6, #0
 800955c:	42a6      	cmp	r6, r4
 800955e:	d109      	bne.n	8009574 <__libc_init_array+0x24>
 8009560:	4d0b      	ldr	r5, [pc, #44]	; (8009590 <__libc_init_array+0x40>)
 8009562:	4c0c      	ldr	r4, [pc, #48]	; (8009594 <__libc_init_array+0x44>)
 8009564:	f000 ffbc 	bl	800a4e0 <_init>
 8009568:	1b64      	subs	r4, r4, r5
 800956a:	10a4      	asrs	r4, r4, #2
 800956c:	2600      	movs	r6, #0
 800956e:	42a6      	cmp	r6, r4
 8009570:	d105      	bne.n	800957e <__libc_init_array+0x2e>
 8009572:	bd70      	pop	{r4, r5, r6, pc}
 8009574:	f855 3b04 	ldr.w	r3, [r5], #4
 8009578:	4798      	blx	r3
 800957a:	3601      	adds	r6, #1
 800957c:	e7ee      	b.n	800955c <__libc_init_array+0xc>
 800957e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009582:	4798      	blx	r3
 8009584:	3601      	adds	r6, #1
 8009586:	e7f2      	b.n	800956e <__libc_init_array+0x1e>
 8009588:	0800bae4 	.word	0x0800bae4
 800958c:	0800bae4 	.word	0x0800bae4
 8009590:	0800bae4 	.word	0x0800bae4
 8009594:	0800bae8 	.word	0x0800bae8

08009598 <memcpy>:
 8009598:	440a      	add	r2, r1
 800959a:	4291      	cmp	r1, r2
 800959c:	f100 33ff 	add.w	r3, r0, #4294967295
 80095a0:	d100      	bne.n	80095a4 <memcpy+0xc>
 80095a2:	4770      	bx	lr
 80095a4:	b510      	push	{r4, lr}
 80095a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095ae:	4291      	cmp	r1, r2
 80095b0:	d1f9      	bne.n	80095a6 <memcpy+0xe>
 80095b2:	bd10      	pop	{r4, pc}

080095b4 <memset>:
 80095b4:	4402      	add	r2, r0
 80095b6:	4603      	mov	r3, r0
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d100      	bne.n	80095be <memset+0xa>
 80095bc:	4770      	bx	lr
 80095be:	f803 1b01 	strb.w	r1, [r3], #1
 80095c2:	e7f9      	b.n	80095b8 <memset+0x4>

080095c4 <iprintf>:
 80095c4:	b40f      	push	{r0, r1, r2, r3}
 80095c6:	4b0a      	ldr	r3, [pc, #40]	; (80095f0 <iprintf+0x2c>)
 80095c8:	b513      	push	{r0, r1, r4, lr}
 80095ca:	681c      	ldr	r4, [r3, #0]
 80095cc:	b124      	cbz	r4, 80095d8 <iprintf+0x14>
 80095ce:	69a3      	ldr	r3, [r4, #24]
 80095d0:	b913      	cbnz	r3, 80095d8 <iprintf+0x14>
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 f866 	bl	80096a4 <__sinit>
 80095d8:	ab05      	add	r3, sp, #20
 80095da:	9a04      	ldr	r2, [sp, #16]
 80095dc:	68a1      	ldr	r1, [r4, #8]
 80095de:	9301      	str	r3, [sp, #4]
 80095e0:	4620      	mov	r0, r4
 80095e2:	f000 f9bd 	bl	8009960 <_vfiprintf_r>
 80095e6:	b002      	add	sp, #8
 80095e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095ec:	b004      	add	sp, #16
 80095ee:	4770      	bx	lr
 80095f0:	200006f8 	.word	0x200006f8

080095f4 <std>:
 80095f4:	2300      	movs	r3, #0
 80095f6:	b510      	push	{r4, lr}
 80095f8:	4604      	mov	r4, r0
 80095fa:	e9c0 3300 	strd	r3, r3, [r0]
 80095fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009602:	6083      	str	r3, [r0, #8]
 8009604:	8181      	strh	r1, [r0, #12]
 8009606:	6643      	str	r3, [r0, #100]	; 0x64
 8009608:	81c2      	strh	r2, [r0, #14]
 800960a:	6183      	str	r3, [r0, #24]
 800960c:	4619      	mov	r1, r3
 800960e:	2208      	movs	r2, #8
 8009610:	305c      	adds	r0, #92	; 0x5c
 8009612:	f7ff ffcf 	bl	80095b4 <memset>
 8009616:	4b05      	ldr	r3, [pc, #20]	; (800962c <std+0x38>)
 8009618:	6263      	str	r3, [r4, #36]	; 0x24
 800961a:	4b05      	ldr	r3, [pc, #20]	; (8009630 <std+0x3c>)
 800961c:	62a3      	str	r3, [r4, #40]	; 0x28
 800961e:	4b05      	ldr	r3, [pc, #20]	; (8009634 <std+0x40>)
 8009620:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009622:	4b05      	ldr	r3, [pc, #20]	; (8009638 <std+0x44>)
 8009624:	6224      	str	r4, [r4, #32]
 8009626:	6323      	str	r3, [r4, #48]	; 0x30
 8009628:	bd10      	pop	{r4, pc}
 800962a:	bf00      	nop
 800962c:	08009f09 	.word	0x08009f09
 8009630:	08009f2b 	.word	0x08009f2b
 8009634:	08009f63 	.word	0x08009f63
 8009638:	08009f87 	.word	0x08009f87

0800963c <_cleanup_r>:
 800963c:	4901      	ldr	r1, [pc, #4]	; (8009644 <_cleanup_r+0x8>)
 800963e:	f000 b8af 	b.w	80097a0 <_fwalk_reent>
 8009642:	bf00      	nop
 8009644:	0800a261 	.word	0x0800a261

08009648 <__sfmoreglue>:
 8009648:	b570      	push	{r4, r5, r6, lr}
 800964a:	2268      	movs	r2, #104	; 0x68
 800964c:	1e4d      	subs	r5, r1, #1
 800964e:	4355      	muls	r5, r2
 8009650:	460e      	mov	r6, r1
 8009652:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009656:	f000 f8e5 	bl	8009824 <_malloc_r>
 800965a:	4604      	mov	r4, r0
 800965c:	b140      	cbz	r0, 8009670 <__sfmoreglue+0x28>
 800965e:	2100      	movs	r1, #0
 8009660:	e9c0 1600 	strd	r1, r6, [r0]
 8009664:	300c      	adds	r0, #12
 8009666:	60a0      	str	r0, [r4, #8]
 8009668:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800966c:	f7ff ffa2 	bl	80095b4 <memset>
 8009670:	4620      	mov	r0, r4
 8009672:	bd70      	pop	{r4, r5, r6, pc}

08009674 <__sfp_lock_acquire>:
 8009674:	4801      	ldr	r0, [pc, #4]	; (800967c <__sfp_lock_acquire+0x8>)
 8009676:	f000 b8b3 	b.w	80097e0 <__retarget_lock_acquire_recursive>
 800967a:	bf00      	nop
 800967c:	200030a9 	.word	0x200030a9

08009680 <__sfp_lock_release>:
 8009680:	4801      	ldr	r0, [pc, #4]	; (8009688 <__sfp_lock_release+0x8>)
 8009682:	f000 b8ae 	b.w	80097e2 <__retarget_lock_release_recursive>
 8009686:	bf00      	nop
 8009688:	200030a9 	.word	0x200030a9

0800968c <__sinit_lock_acquire>:
 800968c:	4801      	ldr	r0, [pc, #4]	; (8009694 <__sinit_lock_acquire+0x8>)
 800968e:	f000 b8a7 	b.w	80097e0 <__retarget_lock_acquire_recursive>
 8009692:	bf00      	nop
 8009694:	200030aa 	.word	0x200030aa

08009698 <__sinit_lock_release>:
 8009698:	4801      	ldr	r0, [pc, #4]	; (80096a0 <__sinit_lock_release+0x8>)
 800969a:	f000 b8a2 	b.w	80097e2 <__retarget_lock_release_recursive>
 800969e:	bf00      	nop
 80096a0:	200030aa 	.word	0x200030aa

080096a4 <__sinit>:
 80096a4:	b510      	push	{r4, lr}
 80096a6:	4604      	mov	r4, r0
 80096a8:	f7ff fff0 	bl	800968c <__sinit_lock_acquire>
 80096ac:	69a3      	ldr	r3, [r4, #24]
 80096ae:	b11b      	cbz	r3, 80096b8 <__sinit+0x14>
 80096b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096b4:	f7ff bff0 	b.w	8009698 <__sinit_lock_release>
 80096b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096bc:	6523      	str	r3, [r4, #80]	; 0x50
 80096be:	4b13      	ldr	r3, [pc, #76]	; (800970c <__sinit+0x68>)
 80096c0:	4a13      	ldr	r2, [pc, #76]	; (8009710 <__sinit+0x6c>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80096c6:	42a3      	cmp	r3, r4
 80096c8:	bf04      	itt	eq
 80096ca:	2301      	moveq	r3, #1
 80096cc:	61a3      	streq	r3, [r4, #24]
 80096ce:	4620      	mov	r0, r4
 80096d0:	f000 f820 	bl	8009714 <__sfp>
 80096d4:	6060      	str	r0, [r4, #4]
 80096d6:	4620      	mov	r0, r4
 80096d8:	f000 f81c 	bl	8009714 <__sfp>
 80096dc:	60a0      	str	r0, [r4, #8]
 80096de:	4620      	mov	r0, r4
 80096e0:	f000 f818 	bl	8009714 <__sfp>
 80096e4:	2200      	movs	r2, #0
 80096e6:	60e0      	str	r0, [r4, #12]
 80096e8:	2104      	movs	r1, #4
 80096ea:	6860      	ldr	r0, [r4, #4]
 80096ec:	f7ff ff82 	bl	80095f4 <std>
 80096f0:	68a0      	ldr	r0, [r4, #8]
 80096f2:	2201      	movs	r2, #1
 80096f4:	2109      	movs	r1, #9
 80096f6:	f7ff ff7d 	bl	80095f4 <std>
 80096fa:	68e0      	ldr	r0, [r4, #12]
 80096fc:	2202      	movs	r2, #2
 80096fe:	2112      	movs	r1, #18
 8009700:	f7ff ff78 	bl	80095f4 <std>
 8009704:	2301      	movs	r3, #1
 8009706:	61a3      	str	r3, [r4, #24]
 8009708:	e7d2      	b.n	80096b0 <__sinit+0xc>
 800970a:	bf00      	nop
 800970c:	0800ba44 	.word	0x0800ba44
 8009710:	0800963d 	.word	0x0800963d

08009714 <__sfp>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	4607      	mov	r7, r0
 8009718:	f7ff ffac 	bl	8009674 <__sfp_lock_acquire>
 800971c:	4b1e      	ldr	r3, [pc, #120]	; (8009798 <__sfp+0x84>)
 800971e:	681e      	ldr	r6, [r3, #0]
 8009720:	69b3      	ldr	r3, [r6, #24]
 8009722:	b913      	cbnz	r3, 800972a <__sfp+0x16>
 8009724:	4630      	mov	r0, r6
 8009726:	f7ff ffbd 	bl	80096a4 <__sinit>
 800972a:	3648      	adds	r6, #72	; 0x48
 800972c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009730:	3b01      	subs	r3, #1
 8009732:	d503      	bpl.n	800973c <__sfp+0x28>
 8009734:	6833      	ldr	r3, [r6, #0]
 8009736:	b30b      	cbz	r3, 800977c <__sfp+0x68>
 8009738:	6836      	ldr	r6, [r6, #0]
 800973a:	e7f7      	b.n	800972c <__sfp+0x18>
 800973c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009740:	b9d5      	cbnz	r5, 8009778 <__sfp+0x64>
 8009742:	4b16      	ldr	r3, [pc, #88]	; (800979c <__sfp+0x88>)
 8009744:	60e3      	str	r3, [r4, #12]
 8009746:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800974a:	6665      	str	r5, [r4, #100]	; 0x64
 800974c:	f000 f847 	bl	80097de <__retarget_lock_init_recursive>
 8009750:	f7ff ff96 	bl	8009680 <__sfp_lock_release>
 8009754:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009758:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800975c:	6025      	str	r5, [r4, #0]
 800975e:	61a5      	str	r5, [r4, #24]
 8009760:	2208      	movs	r2, #8
 8009762:	4629      	mov	r1, r5
 8009764:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009768:	f7ff ff24 	bl	80095b4 <memset>
 800976c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009770:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009774:	4620      	mov	r0, r4
 8009776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009778:	3468      	adds	r4, #104	; 0x68
 800977a:	e7d9      	b.n	8009730 <__sfp+0x1c>
 800977c:	2104      	movs	r1, #4
 800977e:	4638      	mov	r0, r7
 8009780:	f7ff ff62 	bl	8009648 <__sfmoreglue>
 8009784:	4604      	mov	r4, r0
 8009786:	6030      	str	r0, [r6, #0]
 8009788:	2800      	cmp	r0, #0
 800978a:	d1d5      	bne.n	8009738 <__sfp+0x24>
 800978c:	f7ff ff78 	bl	8009680 <__sfp_lock_release>
 8009790:	230c      	movs	r3, #12
 8009792:	603b      	str	r3, [r7, #0]
 8009794:	e7ee      	b.n	8009774 <__sfp+0x60>
 8009796:	bf00      	nop
 8009798:	0800ba44 	.word	0x0800ba44
 800979c:	ffff0001 	.word	0xffff0001

080097a0 <_fwalk_reent>:
 80097a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097a4:	4606      	mov	r6, r0
 80097a6:	4688      	mov	r8, r1
 80097a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097ac:	2700      	movs	r7, #0
 80097ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097b2:	f1b9 0901 	subs.w	r9, r9, #1
 80097b6:	d505      	bpl.n	80097c4 <_fwalk_reent+0x24>
 80097b8:	6824      	ldr	r4, [r4, #0]
 80097ba:	2c00      	cmp	r4, #0
 80097bc:	d1f7      	bne.n	80097ae <_fwalk_reent+0xe>
 80097be:	4638      	mov	r0, r7
 80097c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097c4:	89ab      	ldrh	r3, [r5, #12]
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d907      	bls.n	80097da <_fwalk_reent+0x3a>
 80097ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097ce:	3301      	adds	r3, #1
 80097d0:	d003      	beq.n	80097da <_fwalk_reent+0x3a>
 80097d2:	4629      	mov	r1, r5
 80097d4:	4630      	mov	r0, r6
 80097d6:	47c0      	blx	r8
 80097d8:	4307      	orrs	r7, r0
 80097da:	3568      	adds	r5, #104	; 0x68
 80097dc:	e7e9      	b.n	80097b2 <_fwalk_reent+0x12>

080097de <__retarget_lock_init_recursive>:
 80097de:	4770      	bx	lr

080097e0 <__retarget_lock_acquire_recursive>:
 80097e0:	4770      	bx	lr

080097e2 <__retarget_lock_release_recursive>:
 80097e2:	4770      	bx	lr

080097e4 <sbrk_aligned>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	4e0e      	ldr	r6, [pc, #56]	; (8009820 <sbrk_aligned+0x3c>)
 80097e8:	460c      	mov	r4, r1
 80097ea:	6831      	ldr	r1, [r6, #0]
 80097ec:	4605      	mov	r5, r0
 80097ee:	b911      	cbnz	r1, 80097f6 <sbrk_aligned+0x12>
 80097f0:	f000 fb7a 	bl	8009ee8 <_sbrk_r>
 80097f4:	6030      	str	r0, [r6, #0]
 80097f6:	4621      	mov	r1, r4
 80097f8:	4628      	mov	r0, r5
 80097fa:	f000 fb75 	bl	8009ee8 <_sbrk_r>
 80097fe:	1c43      	adds	r3, r0, #1
 8009800:	d00a      	beq.n	8009818 <sbrk_aligned+0x34>
 8009802:	1cc4      	adds	r4, r0, #3
 8009804:	f024 0403 	bic.w	r4, r4, #3
 8009808:	42a0      	cmp	r0, r4
 800980a:	d007      	beq.n	800981c <sbrk_aligned+0x38>
 800980c:	1a21      	subs	r1, r4, r0
 800980e:	4628      	mov	r0, r5
 8009810:	f000 fb6a 	bl	8009ee8 <_sbrk_r>
 8009814:	3001      	adds	r0, #1
 8009816:	d101      	bne.n	800981c <sbrk_aligned+0x38>
 8009818:	f04f 34ff 	mov.w	r4, #4294967295
 800981c:	4620      	mov	r0, r4
 800981e:	bd70      	pop	{r4, r5, r6, pc}
 8009820:	200030b0 	.word	0x200030b0

08009824 <_malloc_r>:
 8009824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009828:	1ccd      	adds	r5, r1, #3
 800982a:	f025 0503 	bic.w	r5, r5, #3
 800982e:	3508      	adds	r5, #8
 8009830:	2d0c      	cmp	r5, #12
 8009832:	bf38      	it	cc
 8009834:	250c      	movcc	r5, #12
 8009836:	2d00      	cmp	r5, #0
 8009838:	4607      	mov	r7, r0
 800983a:	db01      	blt.n	8009840 <_malloc_r+0x1c>
 800983c:	42a9      	cmp	r1, r5
 800983e:	d905      	bls.n	800984c <_malloc_r+0x28>
 8009840:	230c      	movs	r3, #12
 8009842:	603b      	str	r3, [r7, #0]
 8009844:	2600      	movs	r6, #0
 8009846:	4630      	mov	r0, r6
 8009848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800984c:	4e2e      	ldr	r6, [pc, #184]	; (8009908 <_malloc_r+0xe4>)
 800984e:	f000 fdbb 	bl	800a3c8 <__malloc_lock>
 8009852:	6833      	ldr	r3, [r6, #0]
 8009854:	461c      	mov	r4, r3
 8009856:	bb34      	cbnz	r4, 80098a6 <_malloc_r+0x82>
 8009858:	4629      	mov	r1, r5
 800985a:	4638      	mov	r0, r7
 800985c:	f7ff ffc2 	bl	80097e4 <sbrk_aligned>
 8009860:	1c43      	adds	r3, r0, #1
 8009862:	4604      	mov	r4, r0
 8009864:	d14d      	bne.n	8009902 <_malloc_r+0xde>
 8009866:	6834      	ldr	r4, [r6, #0]
 8009868:	4626      	mov	r6, r4
 800986a:	2e00      	cmp	r6, #0
 800986c:	d140      	bne.n	80098f0 <_malloc_r+0xcc>
 800986e:	6823      	ldr	r3, [r4, #0]
 8009870:	4631      	mov	r1, r6
 8009872:	4638      	mov	r0, r7
 8009874:	eb04 0803 	add.w	r8, r4, r3
 8009878:	f000 fb36 	bl	8009ee8 <_sbrk_r>
 800987c:	4580      	cmp	r8, r0
 800987e:	d13a      	bne.n	80098f6 <_malloc_r+0xd2>
 8009880:	6821      	ldr	r1, [r4, #0]
 8009882:	3503      	adds	r5, #3
 8009884:	1a6d      	subs	r5, r5, r1
 8009886:	f025 0503 	bic.w	r5, r5, #3
 800988a:	3508      	adds	r5, #8
 800988c:	2d0c      	cmp	r5, #12
 800988e:	bf38      	it	cc
 8009890:	250c      	movcc	r5, #12
 8009892:	4629      	mov	r1, r5
 8009894:	4638      	mov	r0, r7
 8009896:	f7ff ffa5 	bl	80097e4 <sbrk_aligned>
 800989a:	3001      	adds	r0, #1
 800989c:	d02b      	beq.n	80098f6 <_malloc_r+0xd2>
 800989e:	6823      	ldr	r3, [r4, #0]
 80098a0:	442b      	add	r3, r5
 80098a2:	6023      	str	r3, [r4, #0]
 80098a4:	e00e      	b.n	80098c4 <_malloc_r+0xa0>
 80098a6:	6822      	ldr	r2, [r4, #0]
 80098a8:	1b52      	subs	r2, r2, r5
 80098aa:	d41e      	bmi.n	80098ea <_malloc_r+0xc6>
 80098ac:	2a0b      	cmp	r2, #11
 80098ae:	d916      	bls.n	80098de <_malloc_r+0xba>
 80098b0:	1961      	adds	r1, r4, r5
 80098b2:	42a3      	cmp	r3, r4
 80098b4:	6025      	str	r5, [r4, #0]
 80098b6:	bf18      	it	ne
 80098b8:	6059      	strne	r1, [r3, #4]
 80098ba:	6863      	ldr	r3, [r4, #4]
 80098bc:	bf08      	it	eq
 80098be:	6031      	streq	r1, [r6, #0]
 80098c0:	5162      	str	r2, [r4, r5]
 80098c2:	604b      	str	r3, [r1, #4]
 80098c4:	4638      	mov	r0, r7
 80098c6:	f104 060b 	add.w	r6, r4, #11
 80098ca:	f000 fd83 	bl	800a3d4 <__malloc_unlock>
 80098ce:	f026 0607 	bic.w	r6, r6, #7
 80098d2:	1d23      	adds	r3, r4, #4
 80098d4:	1af2      	subs	r2, r6, r3
 80098d6:	d0b6      	beq.n	8009846 <_malloc_r+0x22>
 80098d8:	1b9b      	subs	r3, r3, r6
 80098da:	50a3      	str	r3, [r4, r2]
 80098dc:	e7b3      	b.n	8009846 <_malloc_r+0x22>
 80098de:	6862      	ldr	r2, [r4, #4]
 80098e0:	42a3      	cmp	r3, r4
 80098e2:	bf0c      	ite	eq
 80098e4:	6032      	streq	r2, [r6, #0]
 80098e6:	605a      	strne	r2, [r3, #4]
 80098e8:	e7ec      	b.n	80098c4 <_malloc_r+0xa0>
 80098ea:	4623      	mov	r3, r4
 80098ec:	6864      	ldr	r4, [r4, #4]
 80098ee:	e7b2      	b.n	8009856 <_malloc_r+0x32>
 80098f0:	4634      	mov	r4, r6
 80098f2:	6876      	ldr	r6, [r6, #4]
 80098f4:	e7b9      	b.n	800986a <_malloc_r+0x46>
 80098f6:	230c      	movs	r3, #12
 80098f8:	603b      	str	r3, [r7, #0]
 80098fa:	4638      	mov	r0, r7
 80098fc:	f000 fd6a 	bl	800a3d4 <__malloc_unlock>
 8009900:	e7a1      	b.n	8009846 <_malloc_r+0x22>
 8009902:	6025      	str	r5, [r4, #0]
 8009904:	e7de      	b.n	80098c4 <_malloc_r+0xa0>
 8009906:	bf00      	nop
 8009908:	200030ac 	.word	0x200030ac

0800990c <__sfputc_r>:
 800990c:	6893      	ldr	r3, [r2, #8]
 800990e:	3b01      	subs	r3, #1
 8009910:	2b00      	cmp	r3, #0
 8009912:	b410      	push	{r4}
 8009914:	6093      	str	r3, [r2, #8]
 8009916:	da08      	bge.n	800992a <__sfputc_r+0x1e>
 8009918:	6994      	ldr	r4, [r2, #24]
 800991a:	42a3      	cmp	r3, r4
 800991c:	db01      	blt.n	8009922 <__sfputc_r+0x16>
 800991e:	290a      	cmp	r1, #10
 8009920:	d103      	bne.n	800992a <__sfputc_r+0x1e>
 8009922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009926:	f000 bb33 	b.w	8009f90 <__swbuf_r>
 800992a:	6813      	ldr	r3, [r2, #0]
 800992c:	1c58      	adds	r0, r3, #1
 800992e:	6010      	str	r0, [r2, #0]
 8009930:	7019      	strb	r1, [r3, #0]
 8009932:	4608      	mov	r0, r1
 8009934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009938:	4770      	bx	lr

0800993a <__sfputs_r>:
 800993a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993c:	4606      	mov	r6, r0
 800993e:	460f      	mov	r7, r1
 8009940:	4614      	mov	r4, r2
 8009942:	18d5      	adds	r5, r2, r3
 8009944:	42ac      	cmp	r4, r5
 8009946:	d101      	bne.n	800994c <__sfputs_r+0x12>
 8009948:	2000      	movs	r0, #0
 800994a:	e007      	b.n	800995c <__sfputs_r+0x22>
 800994c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009950:	463a      	mov	r2, r7
 8009952:	4630      	mov	r0, r6
 8009954:	f7ff ffda 	bl	800990c <__sfputc_r>
 8009958:	1c43      	adds	r3, r0, #1
 800995a:	d1f3      	bne.n	8009944 <__sfputs_r+0xa>
 800995c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009960 <_vfiprintf_r>:
 8009960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009964:	460d      	mov	r5, r1
 8009966:	b09d      	sub	sp, #116	; 0x74
 8009968:	4614      	mov	r4, r2
 800996a:	4698      	mov	r8, r3
 800996c:	4606      	mov	r6, r0
 800996e:	b118      	cbz	r0, 8009978 <_vfiprintf_r+0x18>
 8009970:	6983      	ldr	r3, [r0, #24]
 8009972:	b90b      	cbnz	r3, 8009978 <_vfiprintf_r+0x18>
 8009974:	f7ff fe96 	bl	80096a4 <__sinit>
 8009978:	4b89      	ldr	r3, [pc, #548]	; (8009ba0 <_vfiprintf_r+0x240>)
 800997a:	429d      	cmp	r5, r3
 800997c:	d11b      	bne.n	80099b6 <_vfiprintf_r+0x56>
 800997e:	6875      	ldr	r5, [r6, #4]
 8009980:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009982:	07d9      	lsls	r1, r3, #31
 8009984:	d405      	bmi.n	8009992 <_vfiprintf_r+0x32>
 8009986:	89ab      	ldrh	r3, [r5, #12]
 8009988:	059a      	lsls	r2, r3, #22
 800998a:	d402      	bmi.n	8009992 <_vfiprintf_r+0x32>
 800998c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800998e:	f7ff ff27 	bl	80097e0 <__retarget_lock_acquire_recursive>
 8009992:	89ab      	ldrh	r3, [r5, #12]
 8009994:	071b      	lsls	r3, r3, #28
 8009996:	d501      	bpl.n	800999c <_vfiprintf_r+0x3c>
 8009998:	692b      	ldr	r3, [r5, #16]
 800999a:	b9eb      	cbnz	r3, 80099d8 <_vfiprintf_r+0x78>
 800999c:	4629      	mov	r1, r5
 800999e:	4630      	mov	r0, r6
 80099a0:	f000 fb5a 	bl	800a058 <__swsetup_r>
 80099a4:	b1c0      	cbz	r0, 80099d8 <_vfiprintf_r+0x78>
 80099a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099a8:	07dc      	lsls	r4, r3, #31
 80099aa:	d50e      	bpl.n	80099ca <_vfiprintf_r+0x6a>
 80099ac:	f04f 30ff 	mov.w	r0, #4294967295
 80099b0:	b01d      	add	sp, #116	; 0x74
 80099b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b6:	4b7b      	ldr	r3, [pc, #492]	; (8009ba4 <_vfiprintf_r+0x244>)
 80099b8:	429d      	cmp	r5, r3
 80099ba:	d101      	bne.n	80099c0 <_vfiprintf_r+0x60>
 80099bc:	68b5      	ldr	r5, [r6, #8]
 80099be:	e7df      	b.n	8009980 <_vfiprintf_r+0x20>
 80099c0:	4b79      	ldr	r3, [pc, #484]	; (8009ba8 <_vfiprintf_r+0x248>)
 80099c2:	429d      	cmp	r5, r3
 80099c4:	bf08      	it	eq
 80099c6:	68f5      	ldreq	r5, [r6, #12]
 80099c8:	e7da      	b.n	8009980 <_vfiprintf_r+0x20>
 80099ca:	89ab      	ldrh	r3, [r5, #12]
 80099cc:	0598      	lsls	r0, r3, #22
 80099ce:	d4ed      	bmi.n	80099ac <_vfiprintf_r+0x4c>
 80099d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099d2:	f7ff ff06 	bl	80097e2 <__retarget_lock_release_recursive>
 80099d6:	e7e9      	b.n	80099ac <_vfiprintf_r+0x4c>
 80099d8:	2300      	movs	r3, #0
 80099da:	9309      	str	r3, [sp, #36]	; 0x24
 80099dc:	2320      	movs	r3, #32
 80099de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80099e6:	2330      	movs	r3, #48	; 0x30
 80099e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009bac <_vfiprintf_r+0x24c>
 80099ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099f0:	f04f 0901 	mov.w	r9, #1
 80099f4:	4623      	mov	r3, r4
 80099f6:	469a      	mov	sl, r3
 80099f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099fc:	b10a      	cbz	r2, 8009a02 <_vfiprintf_r+0xa2>
 80099fe:	2a25      	cmp	r2, #37	; 0x25
 8009a00:	d1f9      	bne.n	80099f6 <_vfiprintf_r+0x96>
 8009a02:	ebba 0b04 	subs.w	fp, sl, r4
 8009a06:	d00b      	beq.n	8009a20 <_vfiprintf_r+0xc0>
 8009a08:	465b      	mov	r3, fp
 8009a0a:	4622      	mov	r2, r4
 8009a0c:	4629      	mov	r1, r5
 8009a0e:	4630      	mov	r0, r6
 8009a10:	f7ff ff93 	bl	800993a <__sfputs_r>
 8009a14:	3001      	adds	r0, #1
 8009a16:	f000 80aa 	beq.w	8009b6e <_vfiprintf_r+0x20e>
 8009a1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a1c:	445a      	add	r2, fp
 8009a1e:	9209      	str	r2, [sp, #36]	; 0x24
 8009a20:	f89a 3000 	ldrb.w	r3, [sl]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f000 80a2 	beq.w	8009b6e <_vfiprintf_r+0x20e>
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a34:	f10a 0a01 	add.w	sl, sl, #1
 8009a38:	9304      	str	r3, [sp, #16]
 8009a3a:	9307      	str	r3, [sp, #28]
 8009a3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a40:	931a      	str	r3, [sp, #104]	; 0x68
 8009a42:	4654      	mov	r4, sl
 8009a44:	2205      	movs	r2, #5
 8009a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a4a:	4858      	ldr	r0, [pc, #352]	; (8009bac <_vfiprintf_r+0x24c>)
 8009a4c:	f7f6 fbc8 	bl	80001e0 <memchr>
 8009a50:	9a04      	ldr	r2, [sp, #16]
 8009a52:	b9d8      	cbnz	r0, 8009a8c <_vfiprintf_r+0x12c>
 8009a54:	06d1      	lsls	r1, r2, #27
 8009a56:	bf44      	itt	mi
 8009a58:	2320      	movmi	r3, #32
 8009a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a5e:	0713      	lsls	r3, r2, #28
 8009a60:	bf44      	itt	mi
 8009a62:	232b      	movmi	r3, #43	; 0x2b
 8009a64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a68:	f89a 3000 	ldrb.w	r3, [sl]
 8009a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8009a6e:	d015      	beq.n	8009a9c <_vfiprintf_r+0x13c>
 8009a70:	9a07      	ldr	r2, [sp, #28]
 8009a72:	4654      	mov	r4, sl
 8009a74:	2000      	movs	r0, #0
 8009a76:	f04f 0c0a 	mov.w	ip, #10
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a80:	3b30      	subs	r3, #48	; 0x30
 8009a82:	2b09      	cmp	r3, #9
 8009a84:	d94e      	bls.n	8009b24 <_vfiprintf_r+0x1c4>
 8009a86:	b1b0      	cbz	r0, 8009ab6 <_vfiprintf_r+0x156>
 8009a88:	9207      	str	r2, [sp, #28]
 8009a8a:	e014      	b.n	8009ab6 <_vfiprintf_r+0x156>
 8009a8c:	eba0 0308 	sub.w	r3, r0, r8
 8009a90:	fa09 f303 	lsl.w	r3, r9, r3
 8009a94:	4313      	orrs	r3, r2
 8009a96:	9304      	str	r3, [sp, #16]
 8009a98:	46a2      	mov	sl, r4
 8009a9a:	e7d2      	b.n	8009a42 <_vfiprintf_r+0xe2>
 8009a9c:	9b03      	ldr	r3, [sp, #12]
 8009a9e:	1d19      	adds	r1, r3, #4
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	9103      	str	r1, [sp, #12]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	bfbb      	ittet	lt
 8009aa8:	425b      	neglt	r3, r3
 8009aaa:	f042 0202 	orrlt.w	r2, r2, #2
 8009aae:	9307      	strge	r3, [sp, #28]
 8009ab0:	9307      	strlt	r3, [sp, #28]
 8009ab2:	bfb8      	it	lt
 8009ab4:	9204      	strlt	r2, [sp, #16]
 8009ab6:	7823      	ldrb	r3, [r4, #0]
 8009ab8:	2b2e      	cmp	r3, #46	; 0x2e
 8009aba:	d10c      	bne.n	8009ad6 <_vfiprintf_r+0x176>
 8009abc:	7863      	ldrb	r3, [r4, #1]
 8009abe:	2b2a      	cmp	r3, #42	; 0x2a
 8009ac0:	d135      	bne.n	8009b2e <_vfiprintf_r+0x1ce>
 8009ac2:	9b03      	ldr	r3, [sp, #12]
 8009ac4:	1d1a      	adds	r2, r3, #4
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	9203      	str	r2, [sp, #12]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	bfb8      	it	lt
 8009ace:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ad2:	3402      	adds	r4, #2
 8009ad4:	9305      	str	r3, [sp, #20]
 8009ad6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009bbc <_vfiprintf_r+0x25c>
 8009ada:	7821      	ldrb	r1, [r4, #0]
 8009adc:	2203      	movs	r2, #3
 8009ade:	4650      	mov	r0, sl
 8009ae0:	f7f6 fb7e 	bl	80001e0 <memchr>
 8009ae4:	b140      	cbz	r0, 8009af8 <_vfiprintf_r+0x198>
 8009ae6:	2340      	movs	r3, #64	; 0x40
 8009ae8:	eba0 000a 	sub.w	r0, r0, sl
 8009aec:	fa03 f000 	lsl.w	r0, r3, r0
 8009af0:	9b04      	ldr	r3, [sp, #16]
 8009af2:	4303      	orrs	r3, r0
 8009af4:	3401      	adds	r4, #1
 8009af6:	9304      	str	r3, [sp, #16]
 8009af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009afc:	482c      	ldr	r0, [pc, #176]	; (8009bb0 <_vfiprintf_r+0x250>)
 8009afe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b02:	2206      	movs	r2, #6
 8009b04:	f7f6 fb6c 	bl	80001e0 <memchr>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	d03f      	beq.n	8009b8c <_vfiprintf_r+0x22c>
 8009b0c:	4b29      	ldr	r3, [pc, #164]	; (8009bb4 <_vfiprintf_r+0x254>)
 8009b0e:	bb1b      	cbnz	r3, 8009b58 <_vfiprintf_r+0x1f8>
 8009b10:	9b03      	ldr	r3, [sp, #12]
 8009b12:	3307      	adds	r3, #7
 8009b14:	f023 0307 	bic.w	r3, r3, #7
 8009b18:	3308      	adds	r3, #8
 8009b1a:	9303      	str	r3, [sp, #12]
 8009b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b1e:	443b      	add	r3, r7
 8009b20:	9309      	str	r3, [sp, #36]	; 0x24
 8009b22:	e767      	b.n	80099f4 <_vfiprintf_r+0x94>
 8009b24:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b28:	460c      	mov	r4, r1
 8009b2a:	2001      	movs	r0, #1
 8009b2c:	e7a5      	b.n	8009a7a <_vfiprintf_r+0x11a>
 8009b2e:	2300      	movs	r3, #0
 8009b30:	3401      	adds	r4, #1
 8009b32:	9305      	str	r3, [sp, #20]
 8009b34:	4619      	mov	r1, r3
 8009b36:	f04f 0c0a 	mov.w	ip, #10
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b40:	3a30      	subs	r2, #48	; 0x30
 8009b42:	2a09      	cmp	r2, #9
 8009b44:	d903      	bls.n	8009b4e <_vfiprintf_r+0x1ee>
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d0c5      	beq.n	8009ad6 <_vfiprintf_r+0x176>
 8009b4a:	9105      	str	r1, [sp, #20]
 8009b4c:	e7c3      	b.n	8009ad6 <_vfiprintf_r+0x176>
 8009b4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b52:	4604      	mov	r4, r0
 8009b54:	2301      	movs	r3, #1
 8009b56:	e7f0      	b.n	8009b3a <_vfiprintf_r+0x1da>
 8009b58:	ab03      	add	r3, sp, #12
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	462a      	mov	r2, r5
 8009b5e:	4b16      	ldr	r3, [pc, #88]	; (8009bb8 <_vfiprintf_r+0x258>)
 8009b60:	a904      	add	r1, sp, #16
 8009b62:	4630      	mov	r0, r6
 8009b64:	f3af 8000 	nop.w
 8009b68:	4607      	mov	r7, r0
 8009b6a:	1c78      	adds	r0, r7, #1
 8009b6c:	d1d6      	bne.n	8009b1c <_vfiprintf_r+0x1bc>
 8009b6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b70:	07d9      	lsls	r1, r3, #31
 8009b72:	d405      	bmi.n	8009b80 <_vfiprintf_r+0x220>
 8009b74:	89ab      	ldrh	r3, [r5, #12]
 8009b76:	059a      	lsls	r2, r3, #22
 8009b78:	d402      	bmi.n	8009b80 <_vfiprintf_r+0x220>
 8009b7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b7c:	f7ff fe31 	bl	80097e2 <__retarget_lock_release_recursive>
 8009b80:	89ab      	ldrh	r3, [r5, #12]
 8009b82:	065b      	lsls	r3, r3, #25
 8009b84:	f53f af12 	bmi.w	80099ac <_vfiprintf_r+0x4c>
 8009b88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b8a:	e711      	b.n	80099b0 <_vfiprintf_r+0x50>
 8009b8c:	ab03      	add	r3, sp, #12
 8009b8e:	9300      	str	r3, [sp, #0]
 8009b90:	462a      	mov	r2, r5
 8009b92:	4b09      	ldr	r3, [pc, #36]	; (8009bb8 <_vfiprintf_r+0x258>)
 8009b94:	a904      	add	r1, sp, #16
 8009b96:	4630      	mov	r0, r6
 8009b98:	f000 f880 	bl	8009c9c <_printf_i>
 8009b9c:	e7e4      	b.n	8009b68 <_vfiprintf_r+0x208>
 8009b9e:	bf00      	nop
 8009ba0:	0800ba68 	.word	0x0800ba68
 8009ba4:	0800ba88 	.word	0x0800ba88
 8009ba8:	0800ba48 	.word	0x0800ba48
 8009bac:	0800baa8 	.word	0x0800baa8
 8009bb0:	0800bab2 	.word	0x0800bab2
 8009bb4:	00000000 	.word	0x00000000
 8009bb8:	0800993b 	.word	0x0800993b
 8009bbc:	0800baae 	.word	0x0800baae

08009bc0 <_printf_common>:
 8009bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc4:	4616      	mov	r6, r2
 8009bc6:	4699      	mov	r9, r3
 8009bc8:	688a      	ldr	r2, [r1, #8]
 8009bca:	690b      	ldr	r3, [r1, #16]
 8009bcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	bfb8      	it	lt
 8009bd4:	4613      	movlt	r3, r2
 8009bd6:	6033      	str	r3, [r6, #0]
 8009bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bdc:	4607      	mov	r7, r0
 8009bde:	460c      	mov	r4, r1
 8009be0:	b10a      	cbz	r2, 8009be6 <_printf_common+0x26>
 8009be2:	3301      	adds	r3, #1
 8009be4:	6033      	str	r3, [r6, #0]
 8009be6:	6823      	ldr	r3, [r4, #0]
 8009be8:	0699      	lsls	r1, r3, #26
 8009bea:	bf42      	ittt	mi
 8009bec:	6833      	ldrmi	r3, [r6, #0]
 8009bee:	3302      	addmi	r3, #2
 8009bf0:	6033      	strmi	r3, [r6, #0]
 8009bf2:	6825      	ldr	r5, [r4, #0]
 8009bf4:	f015 0506 	ands.w	r5, r5, #6
 8009bf8:	d106      	bne.n	8009c08 <_printf_common+0x48>
 8009bfa:	f104 0a19 	add.w	sl, r4, #25
 8009bfe:	68e3      	ldr	r3, [r4, #12]
 8009c00:	6832      	ldr	r2, [r6, #0]
 8009c02:	1a9b      	subs	r3, r3, r2
 8009c04:	42ab      	cmp	r3, r5
 8009c06:	dc26      	bgt.n	8009c56 <_printf_common+0x96>
 8009c08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c0c:	1e13      	subs	r3, r2, #0
 8009c0e:	6822      	ldr	r2, [r4, #0]
 8009c10:	bf18      	it	ne
 8009c12:	2301      	movne	r3, #1
 8009c14:	0692      	lsls	r2, r2, #26
 8009c16:	d42b      	bmi.n	8009c70 <_printf_common+0xb0>
 8009c18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c1c:	4649      	mov	r1, r9
 8009c1e:	4638      	mov	r0, r7
 8009c20:	47c0      	blx	r8
 8009c22:	3001      	adds	r0, #1
 8009c24:	d01e      	beq.n	8009c64 <_printf_common+0xa4>
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	68e5      	ldr	r5, [r4, #12]
 8009c2a:	6832      	ldr	r2, [r6, #0]
 8009c2c:	f003 0306 	and.w	r3, r3, #6
 8009c30:	2b04      	cmp	r3, #4
 8009c32:	bf08      	it	eq
 8009c34:	1aad      	subeq	r5, r5, r2
 8009c36:	68a3      	ldr	r3, [r4, #8]
 8009c38:	6922      	ldr	r2, [r4, #16]
 8009c3a:	bf0c      	ite	eq
 8009c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c40:	2500      	movne	r5, #0
 8009c42:	4293      	cmp	r3, r2
 8009c44:	bfc4      	itt	gt
 8009c46:	1a9b      	subgt	r3, r3, r2
 8009c48:	18ed      	addgt	r5, r5, r3
 8009c4a:	2600      	movs	r6, #0
 8009c4c:	341a      	adds	r4, #26
 8009c4e:	42b5      	cmp	r5, r6
 8009c50:	d11a      	bne.n	8009c88 <_printf_common+0xc8>
 8009c52:	2000      	movs	r0, #0
 8009c54:	e008      	b.n	8009c68 <_printf_common+0xa8>
 8009c56:	2301      	movs	r3, #1
 8009c58:	4652      	mov	r2, sl
 8009c5a:	4649      	mov	r1, r9
 8009c5c:	4638      	mov	r0, r7
 8009c5e:	47c0      	blx	r8
 8009c60:	3001      	adds	r0, #1
 8009c62:	d103      	bne.n	8009c6c <_printf_common+0xac>
 8009c64:	f04f 30ff 	mov.w	r0, #4294967295
 8009c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c6c:	3501      	adds	r5, #1
 8009c6e:	e7c6      	b.n	8009bfe <_printf_common+0x3e>
 8009c70:	18e1      	adds	r1, r4, r3
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	2030      	movs	r0, #48	; 0x30
 8009c76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c7a:	4422      	add	r2, r4
 8009c7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c84:	3302      	adds	r3, #2
 8009c86:	e7c7      	b.n	8009c18 <_printf_common+0x58>
 8009c88:	2301      	movs	r3, #1
 8009c8a:	4622      	mov	r2, r4
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	4638      	mov	r0, r7
 8009c90:	47c0      	blx	r8
 8009c92:	3001      	adds	r0, #1
 8009c94:	d0e6      	beq.n	8009c64 <_printf_common+0xa4>
 8009c96:	3601      	adds	r6, #1
 8009c98:	e7d9      	b.n	8009c4e <_printf_common+0x8e>
	...

08009c9c <_printf_i>:
 8009c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca0:	7e0f      	ldrb	r7, [r1, #24]
 8009ca2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ca4:	2f78      	cmp	r7, #120	; 0x78
 8009ca6:	4691      	mov	r9, r2
 8009ca8:	4680      	mov	r8, r0
 8009caa:	460c      	mov	r4, r1
 8009cac:	469a      	mov	sl, r3
 8009cae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009cb2:	d807      	bhi.n	8009cc4 <_printf_i+0x28>
 8009cb4:	2f62      	cmp	r7, #98	; 0x62
 8009cb6:	d80a      	bhi.n	8009cce <_printf_i+0x32>
 8009cb8:	2f00      	cmp	r7, #0
 8009cba:	f000 80d8 	beq.w	8009e6e <_printf_i+0x1d2>
 8009cbe:	2f58      	cmp	r7, #88	; 0x58
 8009cc0:	f000 80a3 	beq.w	8009e0a <_printf_i+0x16e>
 8009cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ccc:	e03a      	b.n	8009d44 <_printf_i+0xa8>
 8009cce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cd2:	2b15      	cmp	r3, #21
 8009cd4:	d8f6      	bhi.n	8009cc4 <_printf_i+0x28>
 8009cd6:	a101      	add	r1, pc, #4	; (adr r1, 8009cdc <_printf_i+0x40>)
 8009cd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cdc:	08009d35 	.word	0x08009d35
 8009ce0:	08009d49 	.word	0x08009d49
 8009ce4:	08009cc5 	.word	0x08009cc5
 8009ce8:	08009cc5 	.word	0x08009cc5
 8009cec:	08009cc5 	.word	0x08009cc5
 8009cf0:	08009cc5 	.word	0x08009cc5
 8009cf4:	08009d49 	.word	0x08009d49
 8009cf8:	08009cc5 	.word	0x08009cc5
 8009cfc:	08009cc5 	.word	0x08009cc5
 8009d00:	08009cc5 	.word	0x08009cc5
 8009d04:	08009cc5 	.word	0x08009cc5
 8009d08:	08009e55 	.word	0x08009e55
 8009d0c:	08009d79 	.word	0x08009d79
 8009d10:	08009e37 	.word	0x08009e37
 8009d14:	08009cc5 	.word	0x08009cc5
 8009d18:	08009cc5 	.word	0x08009cc5
 8009d1c:	08009e77 	.word	0x08009e77
 8009d20:	08009cc5 	.word	0x08009cc5
 8009d24:	08009d79 	.word	0x08009d79
 8009d28:	08009cc5 	.word	0x08009cc5
 8009d2c:	08009cc5 	.word	0x08009cc5
 8009d30:	08009e3f 	.word	0x08009e3f
 8009d34:	682b      	ldr	r3, [r5, #0]
 8009d36:	1d1a      	adds	r2, r3, #4
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	602a      	str	r2, [r5, #0]
 8009d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d44:	2301      	movs	r3, #1
 8009d46:	e0a3      	b.n	8009e90 <_printf_i+0x1f4>
 8009d48:	6820      	ldr	r0, [r4, #0]
 8009d4a:	6829      	ldr	r1, [r5, #0]
 8009d4c:	0606      	lsls	r6, r0, #24
 8009d4e:	f101 0304 	add.w	r3, r1, #4
 8009d52:	d50a      	bpl.n	8009d6a <_printf_i+0xce>
 8009d54:	680e      	ldr	r6, [r1, #0]
 8009d56:	602b      	str	r3, [r5, #0]
 8009d58:	2e00      	cmp	r6, #0
 8009d5a:	da03      	bge.n	8009d64 <_printf_i+0xc8>
 8009d5c:	232d      	movs	r3, #45	; 0x2d
 8009d5e:	4276      	negs	r6, r6
 8009d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d64:	485e      	ldr	r0, [pc, #376]	; (8009ee0 <_printf_i+0x244>)
 8009d66:	230a      	movs	r3, #10
 8009d68:	e019      	b.n	8009d9e <_printf_i+0x102>
 8009d6a:	680e      	ldr	r6, [r1, #0]
 8009d6c:	602b      	str	r3, [r5, #0]
 8009d6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d72:	bf18      	it	ne
 8009d74:	b236      	sxthne	r6, r6
 8009d76:	e7ef      	b.n	8009d58 <_printf_i+0xbc>
 8009d78:	682b      	ldr	r3, [r5, #0]
 8009d7a:	6820      	ldr	r0, [r4, #0]
 8009d7c:	1d19      	adds	r1, r3, #4
 8009d7e:	6029      	str	r1, [r5, #0]
 8009d80:	0601      	lsls	r1, r0, #24
 8009d82:	d501      	bpl.n	8009d88 <_printf_i+0xec>
 8009d84:	681e      	ldr	r6, [r3, #0]
 8009d86:	e002      	b.n	8009d8e <_printf_i+0xf2>
 8009d88:	0646      	lsls	r6, r0, #25
 8009d8a:	d5fb      	bpl.n	8009d84 <_printf_i+0xe8>
 8009d8c:	881e      	ldrh	r6, [r3, #0]
 8009d8e:	4854      	ldr	r0, [pc, #336]	; (8009ee0 <_printf_i+0x244>)
 8009d90:	2f6f      	cmp	r7, #111	; 0x6f
 8009d92:	bf0c      	ite	eq
 8009d94:	2308      	moveq	r3, #8
 8009d96:	230a      	movne	r3, #10
 8009d98:	2100      	movs	r1, #0
 8009d9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d9e:	6865      	ldr	r5, [r4, #4]
 8009da0:	60a5      	str	r5, [r4, #8]
 8009da2:	2d00      	cmp	r5, #0
 8009da4:	bfa2      	ittt	ge
 8009da6:	6821      	ldrge	r1, [r4, #0]
 8009da8:	f021 0104 	bicge.w	r1, r1, #4
 8009dac:	6021      	strge	r1, [r4, #0]
 8009dae:	b90e      	cbnz	r6, 8009db4 <_printf_i+0x118>
 8009db0:	2d00      	cmp	r5, #0
 8009db2:	d04d      	beq.n	8009e50 <_printf_i+0x1b4>
 8009db4:	4615      	mov	r5, r2
 8009db6:	fbb6 f1f3 	udiv	r1, r6, r3
 8009dba:	fb03 6711 	mls	r7, r3, r1, r6
 8009dbe:	5dc7      	ldrb	r7, [r0, r7]
 8009dc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009dc4:	4637      	mov	r7, r6
 8009dc6:	42bb      	cmp	r3, r7
 8009dc8:	460e      	mov	r6, r1
 8009dca:	d9f4      	bls.n	8009db6 <_printf_i+0x11a>
 8009dcc:	2b08      	cmp	r3, #8
 8009dce:	d10b      	bne.n	8009de8 <_printf_i+0x14c>
 8009dd0:	6823      	ldr	r3, [r4, #0]
 8009dd2:	07de      	lsls	r6, r3, #31
 8009dd4:	d508      	bpl.n	8009de8 <_printf_i+0x14c>
 8009dd6:	6923      	ldr	r3, [r4, #16]
 8009dd8:	6861      	ldr	r1, [r4, #4]
 8009dda:	4299      	cmp	r1, r3
 8009ddc:	bfde      	ittt	le
 8009dde:	2330      	movle	r3, #48	; 0x30
 8009de0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009de4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009de8:	1b52      	subs	r2, r2, r5
 8009dea:	6122      	str	r2, [r4, #16]
 8009dec:	f8cd a000 	str.w	sl, [sp]
 8009df0:	464b      	mov	r3, r9
 8009df2:	aa03      	add	r2, sp, #12
 8009df4:	4621      	mov	r1, r4
 8009df6:	4640      	mov	r0, r8
 8009df8:	f7ff fee2 	bl	8009bc0 <_printf_common>
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d14c      	bne.n	8009e9a <_printf_i+0x1fe>
 8009e00:	f04f 30ff 	mov.w	r0, #4294967295
 8009e04:	b004      	add	sp, #16
 8009e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e0a:	4835      	ldr	r0, [pc, #212]	; (8009ee0 <_printf_i+0x244>)
 8009e0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009e10:	6829      	ldr	r1, [r5, #0]
 8009e12:	6823      	ldr	r3, [r4, #0]
 8009e14:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e18:	6029      	str	r1, [r5, #0]
 8009e1a:	061d      	lsls	r5, r3, #24
 8009e1c:	d514      	bpl.n	8009e48 <_printf_i+0x1ac>
 8009e1e:	07df      	lsls	r7, r3, #31
 8009e20:	bf44      	itt	mi
 8009e22:	f043 0320 	orrmi.w	r3, r3, #32
 8009e26:	6023      	strmi	r3, [r4, #0]
 8009e28:	b91e      	cbnz	r6, 8009e32 <_printf_i+0x196>
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	f023 0320 	bic.w	r3, r3, #32
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	2310      	movs	r3, #16
 8009e34:	e7b0      	b.n	8009d98 <_printf_i+0xfc>
 8009e36:	6823      	ldr	r3, [r4, #0]
 8009e38:	f043 0320 	orr.w	r3, r3, #32
 8009e3c:	6023      	str	r3, [r4, #0]
 8009e3e:	2378      	movs	r3, #120	; 0x78
 8009e40:	4828      	ldr	r0, [pc, #160]	; (8009ee4 <_printf_i+0x248>)
 8009e42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e46:	e7e3      	b.n	8009e10 <_printf_i+0x174>
 8009e48:	0659      	lsls	r1, r3, #25
 8009e4a:	bf48      	it	mi
 8009e4c:	b2b6      	uxthmi	r6, r6
 8009e4e:	e7e6      	b.n	8009e1e <_printf_i+0x182>
 8009e50:	4615      	mov	r5, r2
 8009e52:	e7bb      	b.n	8009dcc <_printf_i+0x130>
 8009e54:	682b      	ldr	r3, [r5, #0]
 8009e56:	6826      	ldr	r6, [r4, #0]
 8009e58:	6961      	ldr	r1, [r4, #20]
 8009e5a:	1d18      	adds	r0, r3, #4
 8009e5c:	6028      	str	r0, [r5, #0]
 8009e5e:	0635      	lsls	r5, r6, #24
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	d501      	bpl.n	8009e68 <_printf_i+0x1cc>
 8009e64:	6019      	str	r1, [r3, #0]
 8009e66:	e002      	b.n	8009e6e <_printf_i+0x1d2>
 8009e68:	0670      	lsls	r0, r6, #25
 8009e6a:	d5fb      	bpl.n	8009e64 <_printf_i+0x1c8>
 8009e6c:	8019      	strh	r1, [r3, #0]
 8009e6e:	2300      	movs	r3, #0
 8009e70:	6123      	str	r3, [r4, #16]
 8009e72:	4615      	mov	r5, r2
 8009e74:	e7ba      	b.n	8009dec <_printf_i+0x150>
 8009e76:	682b      	ldr	r3, [r5, #0]
 8009e78:	1d1a      	adds	r2, r3, #4
 8009e7a:	602a      	str	r2, [r5, #0]
 8009e7c:	681d      	ldr	r5, [r3, #0]
 8009e7e:	6862      	ldr	r2, [r4, #4]
 8009e80:	2100      	movs	r1, #0
 8009e82:	4628      	mov	r0, r5
 8009e84:	f7f6 f9ac 	bl	80001e0 <memchr>
 8009e88:	b108      	cbz	r0, 8009e8e <_printf_i+0x1f2>
 8009e8a:	1b40      	subs	r0, r0, r5
 8009e8c:	6060      	str	r0, [r4, #4]
 8009e8e:	6863      	ldr	r3, [r4, #4]
 8009e90:	6123      	str	r3, [r4, #16]
 8009e92:	2300      	movs	r3, #0
 8009e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e98:	e7a8      	b.n	8009dec <_printf_i+0x150>
 8009e9a:	6923      	ldr	r3, [r4, #16]
 8009e9c:	462a      	mov	r2, r5
 8009e9e:	4649      	mov	r1, r9
 8009ea0:	4640      	mov	r0, r8
 8009ea2:	47d0      	blx	sl
 8009ea4:	3001      	adds	r0, #1
 8009ea6:	d0ab      	beq.n	8009e00 <_printf_i+0x164>
 8009ea8:	6823      	ldr	r3, [r4, #0]
 8009eaa:	079b      	lsls	r3, r3, #30
 8009eac:	d413      	bmi.n	8009ed6 <_printf_i+0x23a>
 8009eae:	68e0      	ldr	r0, [r4, #12]
 8009eb0:	9b03      	ldr	r3, [sp, #12]
 8009eb2:	4298      	cmp	r0, r3
 8009eb4:	bfb8      	it	lt
 8009eb6:	4618      	movlt	r0, r3
 8009eb8:	e7a4      	b.n	8009e04 <_printf_i+0x168>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	4632      	mov	r2, r6
 8009ebe:	4649      	mov	r1, r9
 8009ec0:	4640      	mov	r0, r8
 8009ec2:	47d0      	blx	sl
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	d09b      	beq.n	8009e00 <_printf_i+0x164>
 8009ec8:	3501      	adds	r5, #1
 8009eca:	68e3      	ldr	r3, [r4, #12]
 8009ecc:	9903      	ldr	r1, [sp, #12]
 8009ece:	1a5b      	subs	r3, r3, r1
 8009ed0:	42ab      	cmp	r3, r5
 8009ed2:	dcf2      	bgt.n	8009eba <_printf_i+0x21e>
 8009ed4:	e7eb      	b.n	8009eae <_printf_i+0x212>
 8009ed6:	2500      	movs	r5, #0
 8009ed8:	f104 0619 	add.w	r6, r4, #25
 8009edc:	e7f5      	b.n	8009eca <_printf_i+0x22e>
 8009ede:	bf00      	nop
 8009ee0:	0800bab9 	.word	0x0800bab9
 8009ee4:	0800baca 	.word	0x0800baca

08009ee8 <_sbrk_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d06      	ldr	r5, [pc, #24]	; (8009f04 <_sbrk_r+0x1c>)
 8009eec:	2300      	movs	r3, #0
 8009eee:	4604      	mov	r4, r0
 8009ef0:	4608      	mov	r0, r1
 8009ef2:	602b      	str	r3, [r5, #0]
 8009ef4:	f7fa f85c 	bl	8003fb0 <_sbrk>
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	d102      	bne.n	8009f02 <_sbrk_r+0x1a>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	b103      	cbz	r3, 8009f02 <_sbrk_r+0x1a>
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	bd38      	pop	{r3, r4, r5, pc}
 8009f04:	200030b4 	.word	0x200030b4

08009f08 <__sread>:
 8009f08:	b510      	push	{r4, lr}
 8009f0a:	460c      	mov	r4, r1
 8009f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f10:	f000 fab2 	bl	800a478 <_read_r>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	bfab      	itete	ge
 8009f18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f1a:	89a3      	ldrhlt	r3, [r4, #12]
 8009f1c:	181b      	addge	r3, r3, r0
 8009f1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f22:	bfac      	ite	ge
 8009f24:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f26:	81a3      	strhlt	r3, [r4, #12]
 8009f28:	bd10      	pop	{r4, pc}

08009f2a <__swrite>:
 8009f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2e:	461f      	mov	r7, r3
 8009f30:	898b      	ldrh	r3, [r1, #12]
 8009f32:	05db      	lsls	r3, r3, #23
 8009f34:	4605      	mov	r5, r0
 8009f36:	460c      	mov	r4, r1
 8009f38:	4616      	mov	r6, r2
 8009f3a:	d505      	bpl.n	8009f48 <__swrite+0x1e>
 8009f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f40:	2302      	movs	r3, #2
 8009f42:	2200      	movs	r2, #0
 8009f44:	f000 f9c8 	bl	800a2d8 <_lseek_r>
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f52:	81a3      	strh	r3, [r4, #12]
 8009f54:	4632      	mov	r2, r6
 8009f56:	463b      	mov	r3, r7
 8009f58:	4628      	mov	r0, r5
 8009f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f5e:	f000 b869 	b.w	800a034 <_write_r>

08009f62 <__sseek>:
 8009f62:	b510      	push	{r4, lr}
 8009f64:	460c      	mov	r4, r1
 8009f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f6a:	f000 f9b5 	bl	800a2d8 <_lseek_r>
 8009f6e:	1c43      	adds	r3, r0, #1
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	bf15      	itete	ne
 8009f74:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f7e:	81a3      	strheq	r3, [r4, #12]
 8009f80:	bf18      	it	ne
 8009f82:	81a3      	strhne	r3, [r4, #12]
 8009f84:	bd10      	pop	{r4, pc}

08009f86 <__sclose>:
 8009f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f8a:	f000 b8d3 	b.w	800a134 <_close_r>
	...

08009f90 <__swbuf_r>:
 8009f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f92:	460e      	mov	r6, r1
 8009f94:	4614      	mov	r4, r2
 8009f96:	4605      	mov	r5, r0
 8009f98:	b118      	cbz	r0, 8009fa2 <__swbuf_r+0x12>
 8009f9a:	6983      	ldr	r3, [r0, #24]
 8009f9c:	b90b      	cbnz	r3, 8009fa2 <__swbuf_r+0x12>
 8009f9e:	f7ff fb81 	bl	80096a4 <__sinit>
 8009fa2:	4b21      	ldr	r3, [pc, #132]	; (800a028 <__swbuf_r+0x98>)
 8009fa4:	429c      	cmp	r4, r3
 8009fa6:	d12b      	bne.n	800a000 <__swbuf_r+0x70>
 8009fa8:	686c      	ldr	r4, [r5, #4]
 8009faa:	69a3      	ldr	r3, [r4, #24]
 8009fac:	60a3      	str	r3, [r4, #8]
 8009fae:	89a3      	ldrh	r3, [r4, #12]
 8009fb0:	071a      	lsls	r2, r3, #28
 8009fb2:	d52f      	bpl.n	800a014 <__swbuf_r+0x84>
 8009fb4:	6923      	ldr	r3, [r4, #16]
 8009fb6:	b36b      	cbz	r3, 800a014 <__swbuf_r+0x84>
 8009fb8:	6923      	ldr	r3, [r4, #16]
 8009fba:	6820      	ldr	r0, [r4, #0]
 8009fbc:	1ac0      	subs	r0, r0, r3
 8009fbe:	6963      	ldr	r3, [r4, #20]
 8009fc0:	b2f6      	uxtb	r6, r6
 8009fc2:	4283      	cmp	r3, r0
 8009fc4:	4637      	mov	r7, r6
 8009fc6:	dc04      	bgt.n	8009fd2 <__swbuf_r+0x42>
 8009fc8:	4621      	mov	r1, r4
 8009fca:	4628      	mov	r0, r5
 8009fcc:	f000 f948 	bl	800a260 <_fflush_r>
 8009fd0:	bb30      	cbnz	r0, 800a020 <__swbuf_r+0x90>
 8009fd2:	68a3      	ldr	r3, [r4, #8]
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	60a3      	str	r3, [r4, #8]
 8009fd8:	6823      	ldr	r3, [r4, #0]
 8009fda:	1c5a      	adds	r2, r3, #1
 8009fdc:	6022      	str	r2, [r4, #0]
 8009fde:	701e      	strb	r6, [r3, #0]
 8009fe0:	6963      	ldr	r3, [r4, #20]
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	4283      	cmp	r3, r0
 8009fe6:	d004      	beq.n	8009ff2 <__swbuf_r+0x62>
 8009fe8:	89a3      	ldrh	r3, [r4, #12]
 8009fea:	07db      	lsls	r3, r3, #31
 8009fec:	d506      	bpl.n	8009ffc <__swbuf_r+0x6c>
 8009fee:	2e0a      	cmp	r6, #10
 8009ff0:	d104      	bne.n	8009ffc <__swbuf_r+0x6c>
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	f000 f933 	bl	800a260 <_fflush_r>
 8009ffa:	b988      	cbnz	r0, 800a020 <__swbuf_r+0x90>
 8009ffc:	4638      	mov	r0, r7
 8009ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a000:	4b0a      	ldr	r3, [pc, #40]	; (800a02c <__swbuf_r+0x9c>)
 800a002:	429c      	cmp	r4, r3
 800a004:	d101      	bne.n	800a00a <__swbuf_r+0x7a>
 800a006:	68ac      	ldr	r4, [r5, #8]
 800a008:	e7cf      	b.n	8009faa <__swbuf_r+0x1a>
 800a00a:	4b09      	ldr	r3, [pc, #36]	; (800a030 <__swbuf_r+0xa0>)
 800a00c:	429c      	cmp	r4, r3
 800a00e:	bf08      	it	eq
 800a010:	68ec      	ldreq	r4, [r5, #12]
 800a012:	e7ca      	b.n	8009faa <__swbuf_r+0x1a>
 800a014:	4621      	mov	r1, r4
 800a016:	4628      	mov	r0, r5
 800a018:	f000 f81e 	bl	800a058 <__swsetup_r>
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d0cb      	beq.n	8009fb8 <__swbuf_r+0x28>
 800a020:	f04f 37ff 	mov.w	r7, #4294967295
 800a024:	e7ea      	b.n	8009ffc <__swbuf_r+0x6c>
 800a026:	bf00      	nop
 800a028:	0800ba68 	.word	0x0800ba68
 800a02c:	0800ba88 	.word	0x0800ba88
 800a030:	0800ba48 	.word	0x0800ba48

0800a034 <_write_r>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	4d07      	ldr	r5, [pc, #28]	; (800a054 <_write_r+0x20>)
 800a038:	4604      	mov	r4, r0
 800a03a:	4608      	mov	r0, r1
 800a03c:	4611      	mov	r1, r2
 800a03e:	2200      	movs	r2, #0
 800a040:	602a      	str	r2, [r5, #0]
 800a042:	461a      	mov	r2, r3
 800a044:	f7f6 fdfb 	bl	8000c3e <_write>
 800a048:	1c43      	adds	r3, r0, #1
 800a04a:	d102      	bne.n	800a052 <_write_r+0x1e>
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	b103      	cbz	r3, 800a052 <_write_r+0x1e>
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	200030b4 	.word	0x200030b4

0800a058 <__swsetup_r>:
 800a058:	4b32      	ldr	r3, [pc, #200]	; (800a124 <__swsetup_r+0xcc>)
 800a05a:	b570      	push	{r4, r5, r6, lr}
 800a05c:	681d      	ldr	r5, [r3, #0]
 800a05e:	4606      	mov	r6, r0
 800a060:	460c      	mov	r4, r1
 800a062:	b125      	cbz	r5, 800a06e <__swsetup_r+0x16>
 800a064:	69ab      	ldr	r3, [r5, #24]
 800a066:	b913      	cbnz	r3, 800a06e <__swsetup_r+0x16>
 800a068:	4628      	mov	r0, r5
 800a06a:	f7ff fb1b 	bl	80096a4 <__sinit>
 800a06e:	4b2e      	ldr	r3, [pc, #184]	; (800a128 <__swsetup_r+0xd0>)
 800a070:	429c      	cmp	r4, r3
 800a072:	d10f      	bne.n	800a094 <__swsetup_r+0x3c>
 800a074:	686c      	ldr	r4, [r5, #4]
 800a076:	89a3      	ldrh	r3, [r4, #12]
 800a078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a07c:	0719      	lsls	r1, r3, #28
 800a07e:	d42c      	bmi.n	800a0da <__swsetup_r+0x82>
 800a080:	06dd      	lsls	r5, r3, #27
 800a082:	d411      	bmi.n	800a0a8 <__swsetup_r+0x50>
 800a084:	2309      	movs	r3, #9
 800a086:	6033      	str	r3, [r6, #0]
 800a088:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a08c:	81a3      	strh	r3, [r4, #12]
 800a08e:	f04f 30ff 	mov.w	r0, #4294967295
 800a092:	e03e      	b.n	800a112 <__swsetup_r+0xba>
 800a094:	4b25      	ldr	r3, [pc, #148]	; (800a12c <__swsetup_r+0xd4>)
 800a096:	429c      	cmp	r4, r3
 800a098:	d101      	bne.n	800a09e <__swsetup_r+0x46>
 800a09a:	68ac      	ldr	r4, [r5, #8]
 800a09c:	e7eb      	b.n	800a076 <__swsetup_r+0x1e>
 800a09e:	4b24      	ldr	r3, [pc, #144]	; (800a130 <__swsetup_r+0xd8>)
 800a0a0:	429c      	cmp	r4, r3
 800a0a2:	bf08      	it	eq
 800a0a4:	68ec      	ldreq	r4, [r5, #12]
 800a0a6:	e7e6      	b.n	800a076 <__swsetup_r+0x1e>
 800a0a8:	0758      	lsls	r0, r3, #29
 800a0aa:	d512      	bpl.n	800a0d2 <__swsetup_r+0x7a>
 800a0ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0ae:	b141      	cbz	r1, 800a0c2 <__swsetup_r+0x6a>
 800a0b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0b4:	4299      	cmp	r1, r3
 800a0b6:	d002      	beq.n	800a0be <__swsetup_r+0x66>
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f000 f991 	bl	800a3e0 <_free_r>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	6363      	str	r3, [r4, #52]	; 0x34
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0c8:	81a3      	strh	r3, [r4, #12]
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	6063      	str	r3, [r4, #4]
 800a0ce:	6923      	ldr	r3, [r4, #16]
 800a0d0:	6023      	str	r3, [r4, #0]
 800a0d2:	89a3      	ldrh	r3, [r4, #12]
 800a0d4:	f043 0308 	orr.w	r3, r3, #8
 800a0d8:	81a3      	strh	r3, [r4, #12]
 800a0da:	6923      	ldr	r3, [r4, #16]
 800a0dc:	b94b      	cbnz	r3, 800a0f2 <__swsetup_r+0x9a>
 800a0de:	89a3      	ldrh	r3, [r4, #12]
 800a0e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0e8:	d003      	beq.n	800a0f2 <__swsetup_r+0x9a>
 800a0ea:	4621      	mov	r1, r4
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	f000 f92b 	bl	800a348 <__smakebuf_r>
 800a0f2:	89a0      	ldrh	r0, [r4, #12]
 800a0f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0f8:	f010 0301 	ands.w	r3, r0, #1
 800a0fc:	d00a      	beq.n	800a114 <__swsetup_r+0xbc>
 800a0fe:	2300      	movs	r3, #0
 800a100:	60a3      	str	r3, [r4, #8]
 800a102:	6963      	ldr	r3, [r4, #20]
 800a104:	425b      	negs	r3, r3
 800a106:	61a3      	str	r3, [r4, #24]
 800a108:	6923      	ldr	r3, [r4, #16]
 800a10a:	b943      	cbnz	r3, 800a11e <__swsetup_r+0xc6>
 800a10c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a110:	d1ba      	bne.n	800a088 <__swsetup_r+0x30>
 800a112:	bd70      	pop	{r4, r5, r6, pc}
 800a114:	0781      	lsls	r1, r0, #30
 800a116:	bf58      	it	pl
 800a118:	6963      	ldrpl	r3, [r4, #20]
 800a11a:	60a3      	str	r3, [r4, #8]
 800a11c:	e7f4      	b.n	800a108 <__swsetup_r+0xb0>
 800a11e:	2000      	movs	r0, #0
 800a120:	e7f7      	b.n	800a112 <__swsetup_r+0xba>
 800a122:	bf00      	nop
 800a124:	200006f8 	.word	0x200006f8
 800a128:	0800ba68 	.word	0x0800ba68
 800a12c:	0800ba88 	.word	0x0800ba88
 800a130:	0800ba48 	.word	0x0800ba48

0800a134 <_close_r>:
 800a134:	b538      	push	{r3, r4, r5, lr}
 800a136:	4d06      	ldr	r5, [pc, #24]	; (800a150 <_close_r+0x1c>)
 800a138:	2300      	movs	r3, #0
 800a13a:	4604      	mov	r4, r0
 800a13c:	4608      	mov	r0, r1
 800a13e:	602b      	str	r3, [r5, #0]
 800a140:	f7f9 ff01 	bl	8003f46 <_close>
 800a144:	1c43      	adds	r3, r0, #1
 800a146:	d102      	bne.n	800a14e <_close_r+0x1a>
 800a148:	682b      	ldr	r3, [r5, #0]
 800a14a:	b103      	cbz	r3, 800a14e <_close_r+0x1a>
 800a14c:	6023      	str	r3, [r4, #0]
 800a14e:	bd38      	pop	{r3, r4, r5, pc}
 800a150:	200030b4 	.word	0x200030b4

0800a154 <__sflush_r>:
 800a154:	898a      	ldrh	r2, [r1, #12]
 800a156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a15a:	4605      	mov	r5, r0
 800a15c:	0710      	lsls	r0, r2, #28
 800a15e:	460c      	mov	r4, r1
 800a160:	d458      	bmi.n	800a214 <__sflush_r+0xc0>
 800a162:	684b      	ldr	r3, [r1, #4]
 800a164:	2b00      	cmp	r3, #0
 800a166:	dc05      	bgt.n	800a174 <__sflush_r+0x20>
 800a168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	dc02      	bgt.n	800a174 <__sflush_r+0x20>
 800a16e:	2000      	movs	r0, #0
 800a170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a176:	2e00      	cmp	r6, #0
 800a178:	d0f9      	beq.n	800a16e <__sflush_r+0x1a>
 800a17a:	2300      	movs	r3, #0
 800a17c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a180:	682f      	ldr	r7, [r5, #0]
 800a182:	602b      	str	r3, [r5, #0]
 800a184:	d032      	beq.n	800a1ec <__sflush_r+0x98>
 800a186:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a188:	89a3      	ldrh	r3, [r4, #12]
 800a18a:	075a      	lsls	r2, r3, #29
 800a18c:	d505      	bpl.n	800a19a <__sflush_r+0x46>
 800a18e:	6863      	ldr	r3, [r4, #4]
 800a190:	1ac0      	subs	r0, r0, r3
 800a192:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a194:	b10b      	cbz	r3, 800a19a <__sflush_r+0x46>
 800a196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a198:	1ac0      	subs	r0, r0, r3
 800a19a:	2300      	movs	r3, #0
 800a19c:	4602      	mov	r2, r0
 800a19e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1a0:	6a21      	ldr	r1, [r4, #32]
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	47b0      	blx	r6
 800a1a6:	1c43      	adds	r3, r0, #1
 800a1a8:	89a3      	ldrh	r3, [r4, #12]
 800a1aa:	d106      	bne.n	800a1ba <__sflush_r+0x66>
 800a1ac:	6829      	ldr	r1, [r5, #0]
 800a1ae:	291d      	cmp	r1, #29
 800a1b0:	d82c      	bhi.n	800a20c <__sflush_r+0xb8>
 800a1b2:	4a2a      	ldr	r2, [pc, #168]	; (800a25c <__sflush_r+0x108>)
 800a1b4:	40ca      	lsrs	r2, r1
 800a1b6:	07d6      	lsls	r6, r2, #31
 800a1b8:	d528      	bpl.n	800a20c <__sflush_r+0xb8>
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	6062      	str	r2, [r4, #4]
 800a1be:	04d9      	lsls	r1, r3, #19
 800a1c0:	6922      	ldr	r2, [r4, #16]
 800a1c2:	6022      	str	r2, [r4, #0]
 800a1c4:	d504      	bpl.n	800a1d0 <__sflush_r+0x7c>
 800a1c6:	1c42      	adds	r2, r0, #1
 800a1c8:	d101      	bne.n	800a1ce <__sflush_r+0x7a>
 800a1ca:	682b      	ldr	r3, [r5, #0]
 800a1cc:	b903      	cbnz	r3, 800a1d0 <__sflush_r+0x7c>
 800a1ce:	6560      	str	r0, [r4, #84]	; 0x54
 800a1d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1d2:	602f      	str	r7, [r5, #0]
 800a1d4:	2900      	cmp	r1, #0
 800a1d6:	d0ca      	beq.n	800a16e <__sflush_r+0x1a>
 800a1d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1dc:	4299      	cmp	r1, r3
 800a1de:	d002      	beq.n	800a1e6 <__sflush_r+0x92>
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	f000 f8fd 	bl	800a3e0 <_free_r>
 800a1e6:	2000      	movs	r0, #0
 800a1e8:	6360      	str	r0, [r4, #52]	; 0x34
 800a1ea:	e7c1      	b.n	800a170 <__sflush_r+0x1c>
 800a1ec:	6a21      	ldr	r1, [r4, #32]
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	47b0      	blx	r6
 800a1f4:	1c41      	adds	r1, r0, #1
 800a1f6:	d1c7      	bne.n	800a188 <__sflush_r+0x34>
 800a1f8:	682b      	ldr	r3, [r5, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d0c4      	beq.n	800a188 <__sflush_r+0x34>
 800a1fe:	2b1d      	cmp	r3, #29
 800a200:	d001      	beq.n	800a206 <__sflush_r+0xb2>
 800a202:	2b16      	cmp	r3, #22
 800a204:	d101      	bne.n	800a20a <__sflush_r+0xb6>
 800a206:	602f      	str	r7, [r5, #0]
 800a208:	e7b1      	b.n	800a16e <__sflush_r+0x1a>
 800a20a:	89a3      	ldrh	r3, [r4, #12]
 800a20c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a210:	81a3      	strh	r3, [r4, #12]
 800a212:	e7ad      	b.n	800a170 <__sflush_r+0x1c>
 800a214:	690f      	ldr	r7, [r1, #16]
 800a216:	2f00      	cmp	r7, #0
 800a218:	d0a9      	beq.n	800a16e <__sflush_r+0x1a>
 800a21a:	0793      	lsls	r3, r2, #30
 800a21c:	680e      	ldr	r6, [r1, #0]
 800a21e:	bf08      	it	eq
 800a220:	694b      	ldreq	r3, [r1, #20]
 800a222:	600f      	str	r7, [r1, #0]
 800a224:	bf18      	it	ne
 800a226:	2300      	movne	r3, #0
 800a228:	eba6 0807 	sub.w	r8, r6, r7
 800a22c:	608b      	str	r3, [r1, #8]
 800a22e:	f1b8 0f00 	cmp.w	r8, #0
 800a232:	dd9c      	ble.n	800a16e <__sflush_r+0x1a>
 800a234:	6a21      	ldr	r1, [r4, #32]
 800a236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a238:	4643      	mov	r3, r8
 800a23a:	463a      	mov	r2, r7
 800a23c:	4628      	mov	r0, r5
 800a23e:	47b0      	blx	r6
 800a240:	2800      	cmp	r0, #0
 800a242:	dc06      	bgt.n	800a252 <__sflush_r+0xfe>
 800a244:	89a3      	ldrh	r3, [r4, #12]
 800a246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a24a:	81a3      	strh	r3, [r4, #12]
 800a24c:	f04f 30ff 	mov.w	r0, #4294967295
 800a250:	e78e      	b.n	800a170 <__sflush_r+0x1c>
 800a252:	4407      	add	r7, r0
 800a254:	eba8 0800 	sub.w	r8, r8, r0
 800a258:	e7e9      	b.n	800a22e <__sflush_r+0xda>
 800a25a:	bf00      	nop
 800a25c:	20400001 	.word	0x20400001

0800a260 <_fflush_r>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	690b      	ldr	r3, [r1, #16]
 800a264:	4605      	mov	r5, r0
 800a266:	460c      	mov	r4, r1
 800a268:	b913      	cbnz	r3, 800a270 <_fflush_r+0x10>
 800a26a:	2500      	movs	r5, #0
 800a26c:	4628      	mov	r0, r5
 800a26e:	bd38      	pop	{r3, r4, r5, pc}
 800a270:	b118      	cbz	r0, 800a27a <_fflush_r+0x1a>
 800a272:	6983      	ldr	r3, [r0, #24]
 800a274:	b90b      	cbnz	r3, 800a27a <_fflush_r+0x1a>
 800a276:	f7ff fa15 	bl	80096a4 <__sinit>
 800a27a:	4b14      	ldr	r3, [pc, #80]	; (800a2cc <_fflush_r+0x6c>)
 800a27c:	429c      	cmp	r4, r3
 800a27e:	d11b      	bne.n	800a2b8 <_fflush_r+0x58>
 800a280:	686c      	ldr	r4, [r5, #4]
 800a282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d0ef      	beq.n	800a26a <_fflush_r+0xa>
 800a28a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a28c:	07d0      	lsls	r0, r2, #31
 800a28e:	d404      	bmi.n	800a29a <_fflush_r+0x3a>
 800a290:	0599      	lsls	r1, r3, #22
 800a292:	d402      	bmi.n	800a29a <_fflush_r+0x3a>
 800a294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a296:	f7ff faa3 	bl	80097e0 <__retarget_lock_acquire_recursive>
 800a29a:	4628      	mov	r0, r5
 800a29c:	4621      	mov	r1, r4
 800a29e:	f7ff ff59 	bl	800a154 <__sflush_r>
 800a2a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2a4:	07da      	lsls	r2, r3, #31
 800a2a6:	4605      	mov	r5, r0
 800a2a8:	d4e0      	bmi.n	800a26c <_fflush_r+0xc>
 800a2aa:	89a3      	ldrh	r3, [r4, #12]
 800a2ac:	059b      	lsls	r3, r3, #22
 800a2ae:	d4dd      	bmi.n	800a26c <_fflush_r+0xc>
 800a2b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2b2:	f7ff fa96 	bl	80097e2 <__retarget_lock_release_recursive>
 800a2b6:	e7d9      	b.n	800a26c <_fflush_r+0xc>
 800a2b8:	4b05      	ldr	r3, [pc, #20]	; (800a2d0 <_fflush_r+0x70>)
 800a2ba:	429c      	cmp	r4, r3
 800a2bc:	d101      	bne.n	800a2c2 <_fflush_r+0x62>
 800a2be:	68ac      	ldr	r4, [r5, #8]
 800a2c0:	e7df      	b.n	800a282 <_fflush_r+0x22>
 800a2c2:	4b04      	ldr	r3, [pc, #16]	; (800a2d4 <_fflush_r+0x74>)
 800a2c4:	429c      	cmp	r4, r3
 800a2c6:	bf08      	it	eq
 800a2c8:	68ec      	ldreq	r4, [r5, #12]
 800a2ca:	e7da      	b.n	800a282 <_fflush_r+0x22>
 800a2cc:	0800ba68 	.word	0x0800ba68
 800a2d0:	0800ba88 	.word	0x0800ba88
 800a2d4:	0800ba48 	.word	0x0800ba48

0800a2d8 <_lseek_r>:
 800a2d8:	b538      	push	{r3, r4, r5, lr}
 800a2da:	4d07      	ldr	r5, [pc, #28]	; (800a2f8 <_lseek_r+0x20>)
 800a2dc:	4604      	mov	r4, r0
 800a2de:	4608      	mov	r0, r1
 800a2e0:	4611      	mov	r1, r2
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	602a      	str	r2, [r5, #0]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	f7f9 fe54 	bl	8003f94 <_lseek>
 800a2ec:	1c43      	adds	r3, r0, #1
 800a2ee:	d102      	bne.n	800a2f6 <_lseek_r+0x1e>
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	b103      	cbz	r3, 800a2f6 <_lseek_r+0x1e>
 800a2f4:	6023      	str	r3, [r4, #0]
 800a2f6:	bd38      	pop	{r3, r4, r5, pc}
 800a2f8:	200030b4 	.word	0x200030b4

0800a2fc <__swhatbuf_r>:
 800a2fc:	b570      	push	{r4, r5, r6, lr}
 800a2fe:	460e      	mov	r6, r1
 800a300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a304:	2900      	cmp	r1, #0
 800a306:	b096      	sub	sp, #88	; 0x58
 800a308:	4614      	mov	r4, r2
 800a30a:	461d      	mov	r5, r3
 800a30c:	da08      	bge.n	800a320 <__swhatbuf_r+0x24>
 800a30e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	602a      	str	r2, [r5, #0]
 800a316:	061a      	lsls	r2, r3, #24
 800a318:	d410      	bmi.n	800a33c <__swhatbuf_r+0x40>
 800a31a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a31e:	e00e      	b.n	800a33e <__swhatbuf_r+0x42>
 800a320:	466a      	mov	r2, sp
 800a322:	f000 f8bb 	bl	800a49c <_fstat_r>
 800a326:	2800      	cmp	r0, #0
 800a328:	dbf1      	blt.n	800a30e <__swhatbuf_r+0x12>
 800a32a:	9a01      	ldr	r2, [sp, #4]
 800a32c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a330:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a334:	425a      	negs	r2, r3
 800a336:	415a      	adcs	r2, r3
 800a338:	602a      	str	r2, [r5, #0]
 800a33a:	e7ee      	b.n	800a31a <__swhatbuf_r+0x1e>
 800a33c:	2340      	movs	r3, #64	; 0x40
 800a33e:	2000      	movs	r0, #0
 800a340:	6023      	str	r3, [r4, #0]
 800a342:	b016      	add	sp, #88	; 0x58
 800a344:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a348 <__smakebuf_r>:
 800a348:	898b      	ldrh	r3, [r1, #12]
 800a34a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a34c:	079d      	lsls	r5, r3, #30
 800a34e:	4606      	mov	r6, r0
 800a350:	460c      	mov	r4, r1
 800a352:	d507      	bpl.n	800a364 <__smakebuf_r+0x1c>
 800a354:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	6123      	str	r3, [r4, #16]
 800a35c:	2301      	movs	r3, #1
 800a35e:	6163      	str	r3, [r4, #20]
 800a360:	b002      	add	sp, #8
 800a362:	bd70      	pop	{r4, r5, r6, pc}
 800a364:	ab01      	add	r3, sp, #4
 800a366:	466a      	mov	r2, sp
 800a368:	f7ff ffc8 	bl	800a2fc <__swhatbuf_r>
 800a36c:	9900      	ldr	r1, [sp, #0]
 800a36e:	4605      	mov	r5, r0
 800a370:	4630      	mov	r0, r6
 800a372:	f7ff fa57 	bl	8009824 <_malloc_r>
 800a376:	b948      	cbnz	r0, 800a38c <__smakebuf_r+0x44>
 800a378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a37c:	059a      	lsls	r2, r3, #22
 800a37e:	d4ef      	bmi.n	800a360 <__smakebuf_r+0x18>
 800a380:	f023 0303 	bic.w	r3, r3, #3
 800a384:	f043 0302 	orr.w	r3, r3, #2
 800a388:	81a3      	strh	r3, [r4, #12]
 800a38a:	e7e3      	b.n	800a354 <__smakebuf_r+0xc>
 800a38c:	4b0d      	ldr	r3, [pc, #52]	; (800a3c4 <__smakebuf_r+0x7c>)
 800a38e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a390:	89a3      	ldrh	r3, [r4, #12]
 800a392:	6020      	str	r0, [r4, #0]
 800a394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a398:	81a3      	strh	r3, [r4, #12]
 800a39a:	9b00      	ldr	r3, [sp, #0]
 800a39c:	6163      	str	r3, [r4, #20]
 800a39e:	9b01      	ldr	r3, [sp, #4]
 800a3a0:	6120      	str	r0, [r4, #16]
 800a3a2:	b15b      	cbz	r3, 800a3bc <__smakebuf_r+0x74>
 800a3a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	f000 f889 	bl	800a4c0 <_isatty_r>
 800a3ae:	b128      	cbz	r0, 800a3bc <__smakebuf_r+0x74>
 800a3b0:	89a3      	ldrh	r3, [r4, #12]
 800a3b2:	f023 0303 	bic.w	r3, r3, #3
 800a3b6:	f043 0301 	orr.w	r3, r3, #1
 800a3ba:	81a3      	strh	r3, [r4, #12]
 800a3bc:	89a0      	ldrh	r0, [r4, #12]
 800a3be:	4305      	orrs	r5, r0
 800a3c0:	81a5      	strh	r5, [r4, #12]
 800a3c2:	e7cd      	b.n	800a360 <__smakebuf_r+0x18>
 800a3c4:	0800963d 	.word	0x0800963d

0800a3c8 <__malloc_lock>:
 800a3c8:	4801      	ldr	r0, [pc, #4]	; (800a3d0 <__malloc_lock+0x8>)
 800a3ca:	f7ff ba09 	b.w	80097e0 <__retarget_lock_acquire_recursive>
 800a3ce:	bf00      	nop
 800a3d0:	200030a8 	.word	0x200030a8

0800a3d4 <__malloc_unlock>:
 800a3d4:	4801      	ldr	r0, [pc, #4]	; (800a3dc <__malloc_unlock+0x8>)
 800a3d6:	f7ff ba04 	b.w	80097e2 <__retarget_lock_release_recursive>
 800a3da:	bf00      	nop
 800a3dc:	200030a8 	.word	0x200030a8

0800a3e0 <_free_r>:
 800a3e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3e2:	2900      	cmp	r1, #0
 800a3e4:	d044      	beq.n	800a470 <_free_r+0x90>
 800a3e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ea:	9001      	str	r0, [sp, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f1a1 0404 	sub.w	r4, r1, #4
 800a3f2:	bfb8      	it	lt
 800a3f4:	18e4      	addlt	r4, r4, r3
 800a3f6:	f7ff ffe7 	bl	800a3c8 <__malloc_lock>
 800a3fa:	4a1e      	ldr	r2, [pc, #120]	; (800a474 <_free_r+0x94>)
 800a3fc:	9801      	ldr	r0, [sp, #4]
 800a3fe:	6813      	ldr	r3, [r2, #0]
 800a400:	b933      	cbnz	r3, 800a410 <_free_r+0x30>
 800a402:	6063      	str	r3, [r4, #4]
 800a404:	6014      	str	r4, [r2, #0]
 800a406:	b003      	add	sp, #12
 800a408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a40c:	f7ff bfe2 	b.w	800a3d4 <__malloc_unlock>
 800a410:	42a3      	cmp	r3, r4
 800a412:	d908      	bls.n	800a426 <_free_r+0x46>
 800a414:	6825      	ldr	r5, [r4, #0]
 800a416:	1961      	adds	r1, r4, r5
 800a418:	428b      	cmp	r3, r1
 800a41a:	bf01      	itttt	eq
 800a41c:	6819      	ldreq	r1, [r3, #0]
 800a41e:	685b      	ldreq	r3, [r3, #4]
 800a420:	1949      	addeq	r1, r1, r5
 800a422:	6021      	streq	r1, [r4, #0]
 800a424:	e7ed      	b.n	800a402 <_free_r+0x22>
 800a426:	461a      	mov	r2, r3
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	b10b      	cbz	r3, 800a430 <_free_r+0x50>
 800a42c:	42a3      	cmp	r3, r4
 800a42e:	d9fa      	bls.n	800a426 <_free_r+0x46>
 800a430:	6811      	ldr	r1, [r2, #0]
 800a432:	1855      	adds	r5, r2, r1
 800a434:	42a5      	cmp	r5, r4
 800a436:	d10b      	bne.n	800a450 <_free_r+0x70>
 800a438:	6824      	ldr	r4, [r4, #0]
 800a43a:	4421      	add	r1, r4
 800a43c:	1854      	adds	r4, r2, r1
 800a43e:	42a3      	cmp	r3, r4
 800a440:	6011      	str	r1, [r2, #0]
 800a442:	d1e0      	bne.n	800a406 <_free_r+0x26>
 800a444:	681c      	ldr	r4, [r3, #0]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	6053      	str	r3, [r2, #4]
 800a44a:	4421      	add	r1, r4
 800a44c:	6011      	str	r1, [r2, #0]
 800a44e:	e7da      	b.n	800a406 <_free_r+0x26>
 800a450:	d902      	bls.n	800a458 <_free_r+0x78>
 800a452:	230c      	movs	r3, #12
 800a454:	6003      	str	r3, [r0, #0]
 800a456:	e7d6      	b.n	800a406 <_free_r+0x26>
 800a458:	6825      	ldr	r5, [r4, #0]
 800a45a:	1961      	adds	r1, r4, r5
 800a45c:	428b      	cmp	r3, r1
 800a45e:	bf04      	itt	eq
 800a460:	6819      	ldreq	r1, [r3, #0]
 800a462:	685b      	ldreq	r3, [r3, #4]
 800a464:	6063      	str	r3, [r4, #4]
 800a466:	bf04      	itt	eq
 800a468:	1949      	addeq	r1, r1, r5
 800a46a:	6021      	streq	r1, [r4, #0]
 800a46c:	6054      	str	r4, [r2, #4]
 800a46e:	e7ca      	b.n	800a406 <_free_r+0x26>
 800a470:	b003      	add	sp, #12
 800a472:	bd30      	pop	{r4, r5, pc}
 800a474:	200030ac 	.word	0x200030ac

0800a478 <_read_r>:
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	4d07      	ldr	r5, [pc, #28]	; (800a498 <_read_r+0x20>)
 800a47c:	4604      	mov	r4, r0
 800a47e:	4608      	mov	r0, r1
 800a480:	4611      	mov	r1, r2
 800a482:	2200      	movs	r2, #0
 800a484:	602a      	str	r2, [r5, #0]
 800a486:	461a      	mov	r2, r3
 800a488:	f7f9 fd40 	bl	8003f0c <_read>
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	d102      	bne.n	800a496 <_read_r+0x1e>
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	b103      	cbz	r3, 800a496 <_read_r+0x1e>
 800a494:	6023      	str	r3, [r4, #0]
 800a496:	bd38      	pop	{r3, r4, r5, pc}
 800a498:	200030b4 	.word	0x200030b4

0800a49c <_fstat_r>:
 800a49c:	b538      	push	{r3, r4, r5, lr}
 800a49e:	4d07      	ldr	r5, [pc, #28]	; (800a4bc <_fstat_r+0x20>)
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	4608      	mov	r0, r1
 800a4a6:	4611      	mov	r1, r2
 800a4a8:	602b      	str	r3, [r5, #0]
 800a4aa:	f7f9 fd58 	bl	8003f5e <_fstat>
 800a4ae:	1c43      	adds	r3, r0, #1
 800a4b0:	d102      	bne.n	800a4b8 <_fstat_r+0x1c>
 800a4b2:	682b      	ldr	r3, [r5, #0]
 800a4b4:	b103      	cbz	r3, 800a4b8 <_fstat_r+0x1c>
 800a4b6:	6023      	str	r3, [r4, #0]
 800a4b8:	bd38      	pop	{r3, r4, r5, pc}
 800a4ba:	bf00      	nop
 800a4bc:	200030b4 	.word	0x200030b4

0800a4c0 <_isatty_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	4d06      	ldr	r5, [pc, #24]	; (800a4dc <_isatty_r+0x1c>)
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	4608      	mov	r0, r1
 800a4ca:	602b      	str	r3, [r5, #0]
 800a4cc:	f7f9 fd57 	bl	8003f7e <_isatty>
 800a4d0:	1c43      	adds	r3, r0, #1
 800a4d2:	d102      	bne.n	800a4da <_isatty_r+0x1a>
 800a4d4:	682b      	ldr	r3, [r5, #0]
 800a4d6:	b103      	cbz	r3, 800a4da <_isatty_r+0x1a>
 800a4d8:	6023      	str	r3, [r4, #0]
 800a4da:	bd38      	pop	{r3, r4, r5, pc}
 800a4dc:	200030b4 	.word	0x200030b4

0800a4e0 <_init>:
 800a4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e2:	bf00      	nop
 800a4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4e6:	bc08      	pop	{r3}
 800a4e8:	469e      	mov	lr, r3
 800a4ea:	4770      	bx	lr

0800a4ec <_fini>:
 800a4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ee:	bf00      	nop
 800a4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4f2:	bc08      	pop	{r3}
 800a4f4:	469e      	mov	lr, r3
 800a4f6:	4770      	bx	lr
