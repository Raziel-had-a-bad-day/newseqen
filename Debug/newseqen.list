
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000986c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001008  08009a04  08009a04  00019a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa0c  0800aa0c  00020914  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa0c  0800aa0c  0001aa0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa14  0800aa14  00020914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa14  0800aa14  0001aa14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa18  0800aa18  0001aa18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000914  20000000  0800aa1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003580  20000914  0800b330  00020914  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003e94  0800b330  00023e94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020914  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132cf  00000000  00000000  00020944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002488  00000000  00000000  00033c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  000360a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  000371c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018813  00000000  00000000  000381e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014949  00000000  00000000  000509fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e994  00000000  00000000  00065344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00103cd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b40  00000000  00000000  00103d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  001088d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000914 	.word	0x20000914
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080099ec 	.word	0x080099ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000918 	.word	0x20000918
 80001d4:	080099ec 	.word	0x080099ec

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295
 8000854:	f04f 30ff 	movne.w	r0, #4294967295
 8000858:	f000 b974 	b.w	8000b44 <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9d08      	ldr	r5, [sp, #32]
 800087a:	4604      	mov	r4, r0
 800087c:	468e      	mov	lr, r1
 800087e:	2b00      	cmp	r3, #0
 8000880:	d14d      	bne.n	800091e <__udivmoddi4+0xaa>
 8000882:	428a      	cmp	r2, r1
 8000884:	4694      	mov	ip, r2
 8000886:	d969      	bls.n	800095c <__udivmoddi4+0xe8>
 8000888:	fab2 f282 	clz	r2, r2
 800088c:	b152      	cbz	r2, 80008a4 <__udivmoddi4+0x30>
 800088e:	fa01 f302 	lsl.w	r3, r1, r2
 8000892:	f1c2 0120 	rsb	r1, r2, #32
 8000896:	fa20 f101 	lsr.w	r1, r0, r1
 800089a:	fa0c fc02 	lsl.w	ip, ip, r2
 800089e:	ea41 0e03 	orr.w	lr, r1, r3
 80008a2:	4094      	lsls	r4, r2
 80008a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a8:	0c21      	lsrs	r1, r4, #16
 80008aa:	fbbe f6f8 	udiv	r6, lr, r8
 80008ae:	fa1f f78c 	uxth.w	r7, ip
 80008b2:	fb08 e316 	mls	r3, r8, r6, lr
 80008b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ba:	fb06 f107 	mul.w	r1, r6, r7
 80008be:	4299      	cmp	r1, r3
 80008c0:	d90a      	bls.n	80008d8 <__udivmoddi4+0x64>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ca:	f080 811f 	bcs.w	8000b0c <__udivmoddi4+0x298>
 80008ce:	4299      	cmp	r1, r3
 80008d0:	f240 811c 	bls.w	8000b0c <__udivmoddi4+0x298>
 80008d4:	3e02      	subs	r6, #2
 80008d6:	4463      	add	r3, ip
 80008d8:	1a5b      	subs	r3, r3, r1
 80008da:	b2a4      	uxth	r4, r4
 80008dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008e0:	fb08 3310 	mls	r3, r8, r0, r3
 80008e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008e8:	fb00 f707 	mul.w	r7, r0, r7
 80008ec:	42a7      	cmp	r7, r4
 80008ee:	d90a      	bls.n	8000906 <__udivmoddi4+0x92>
 80008f0:	eb1c 0404 	adds.w	r4, ip, r4
 80008f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008f8:	f080 810a 	bcs.w	8000b10 <__udivmoddi4+0x29c>
 80008fc:	42a7      	cmp	r7, r4
 80008fe:	f240 8107 	bls.w	8000b10 <__udivmoddi4+0x29c>
 8000902:	4464      	add	r4, ip
 8000904:	3802      	subs	r0, #2
 8000906:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800090a:	1be4      	subs	r4, r4, r7
 800090c:	2600      	movs	r6, #0
 800090e:	b11d      	cbz	r5, 8000918 <__udivmoddi4+0xa4>
 8000910:	40d4      	lsrs	r4, r2
 8000912:	2300      	movs	r3, #0
 8000914:	e9c5 4300 	strd	r4, r3, [r5]
 8000918:	4631      	mov	r1, r6
 800091a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091e:	428b      	cmp	r3, r1
 8000920:	d909      	bls.n	8000936 <__udivmoddi4+0xc2>
 8000922:	2d00      	cmp	r5, #0
 8000924:	f000 80ef 	beq.w	8000b06 <__udivmoddi4+0x292>
 8000928:	2600      	movs	r6, #0
 800092a:	e9c5 0100 	strd	r0, r1, [r5]
 800092e:	4630      	mov	r0, r6
 8000930:	4631      	mov	r1, r6
 8000932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000936:	fab3 f683 	clz	r6, r3
 800093a:	2e00      	cmp	r6, #0
 800093c:	d14a      	bne.n	80009d4 <__udivmoddi4+0x160>
 800093e:	428b      	cmp	r3, r1
 8000940:	d302      	bcc.n	8000948 <__udivmoddi4+0xd4>
 8000942:	4282      	cmp	r2, r0
 8000944:	f200 80f9 	bhi.w	8000b3a <__udivmoddi4+0x2c6>
 8000948:	1a84      	subs	r4, r0, r2
 800094a:	eb61 0303 	sbc.w	r3, r1, r3
 800094e:	2001      	movs	r0, #1
 8000950:	469e      	mov	lr, r3
 8000952:	2d00      	cmp	r5, #0
 8000954:	d0e0      	beq.n	8000918 <__udivmoddi4+0xa4>
 8000956:	e9c5 4e00 	strd	r4, lr, [r5]
 800095a:	e7dd      	b.n	8000918 <__udivmoddi4+0xa4>
 800095c:	b902      	cbnz	r2, 8000960 <__udivmoddi4+0xec>
 800095e:	deff      	udf	#255	; 0xff
 8000960:	fab2 f282 	clz	r2, r2
 8000964:	2a00      	cmp	r2, #0
 8000966:	f040 8092 	bne.w	8000a8e <__udivmoddi4+0x21a>
 800096a:	eba1 010c 	sub.w	r1, r1, ip
 800096e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	2601      	movs	r6, #1
 8000978:	0c20      	lsrs	r0, r4, #16
 800097a:	fbb1 f3f7 	udiv	r3, r1, r7
 800097e:	fb07 1113 	mls	r1, r7, r3, r1
 8000982:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000986:	fb0e f003 	mul.w	r0, lr, r3
 800098a:	4288      	cmp	r0, r1
 800098c:	d908      	bls.n	80009a0 <__udivmoddi4+0x12c>
 800098e:	eb1c 0101 	adds.w	r1, ip, r1
 8000992:	f103 38ff 	add.w	r8, r3, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0x12a>
 8000998:	4288      	cmp	r0, r1
 800099a:	f200 80cb 	bhi.w	8000b34 <__udivmoddi4+0x2c0>
 800099e:	4643      	mov	r3, r8
 80009a0:	1a09      	subs	r1, r1, r0
 80009a2:	b2a4      	uxth	r4, r4
 80009a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009a8:	fb07 1110 	mls	r1, r7, r0, r1
 80009ac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009b0:	fb0e fe00 	mul.w	lr, lr, r0
 80009b4:	45a6      	cmp	lr, r4
 80009b6:	d908      	bls.n	80009ca <__udivmoddi4+0x156>
 80009b8:	eb1c 0404 	adds.w	r4, ip, r4
 80009bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80009c0:	d202      	bcs.n	80009c8 <__udivmoddi4+0x154>
 80009c2:	45a6      	cmp	lr, r4
 80009c4:	f200 80bb 	bhi.w	8000b3e <__udivmoddi4+0x2ca>
 80009c8:	4608      	mov	r0, r1
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009d2:	e79c      	b.n	800090e <__udivmoddi4+0x9a>
 80009d4:	f1c6 0720 	rsb	r7, r6, #32
 80009d8:	40b3      	lsls	r3, r6
 80009da:	fa22 fc07 	lsr.w	ip, r2, r7
 80009de:	ea4c 0c03 	orr.w	ip, ip, r3
 80009e2:	fa20 f407 	lsr.w	r4, r0, r7
 80009e6:	fa01 f306 	lsl.w	r3, r1, r6
 80009ea:	431c      	orrs	r4, r3
 80009ec:	40f9      	lsrs	r1, r7
 80009ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009f2:	fa00 f306 	lsl.w	r3, r0, r6
 80009f6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009fa:	0c20      	lsrs	r0, r4, #16
 80009fc:	fa1f fe8c 	uxth.w	lr, ip
 8000a00:	fb09 1118 	mls	r1, r9, r8, r1
 8000a04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a08:	fb08 f00e 	mul.w	r0, r8, lr
 8000a0c:	4288      	cmp	r0, r1
 8000a0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a12:	d90b      	bls.n	8000a2c <__udivmoddi4+0x1b8>
 8000a14:	eb1c 0101 	adds.w	r1, ip, r1
 8000a18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a1c:	f080 8088 	bcs.w	8000b30 <__udivmoddi4+0x2bc>
 8000a20:	4288      	cmp	r0, r1
 8000a22:	f240 8085 	bls.w	8000b30 <__udivmoddi4+0x2bc>
 8000a26:	f1a8 0802 	sub.w	r8, r8, #2
 8000a2a:	4461      	add	r1, ip
 8000a2c:	1a09      	subs	r1, r1, r0
 8000a2e:	b2a4      	uxth	r4, r4
 8000a30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a34:	fb09 1110 	mls	r1, r9, r0, r1
 8000a38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a40:	458e      	cmp	lr, r1
 8000a42:	d908      	bls.n	8000a56 <__udivmoddi4+0x1e2>
 8000a44:	eb1c 0101 	adds.w	r1, ip, r1
 8000a48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a4c:	d26c      	bcs.n	8000b28 <__udivmoddi4+0x2b4>
 8000a4e:	458e      	cmp	lr, r1
 8000a50:	d96a      	bls.n	8000b28 <__udivmoddi4+0x2b4>
 8000a52:	3802      	subs	r0, #2
 8000a54:	4461      	add	r1, ip
 8000a56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a5e:	eba1 010e 	sub.w	r1, r1, lr
 8000a62:	42a1      	cmp	r1, r4
 8000a64:	46c8      	mov	r8, r9
 8000a66:	46a6      	mov	lr, r4
 8000a68:	d356      	bcc.n	8000b18 <__udivmoddi4+0x2a4>
 8000a6a:	d053      	beq.n	8000b14 <__udivmoddi4+0x2a0>
 8000a6c:	b15d      	cbz	r5, 8000a86 <__udivmoddi4+0x212>
 8000a6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a72:	eb61 010e 	sbc.w	r1, r1, lr
 8000a76:	fa01 f707 	lsl.w	r7, r1, r7
 8000a7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a7e:	40f1      	lsrs	r1, r6
 8000a80:	431f      	orrs	r7, r3
 8000a82:	e9c5 7100 	strd	r7, r1, [r5]
 8000a86:	2600      	movs	r6, #0
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	f1c2 0320 	rsb	r3, r2, #32
 8000a92:	40d8      	lsrs	r0, r3
 8000a94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a98:	fa21 f303 	lsr.w	r3, r1, r3
 8000a9c:	4091      	lsls	r1, r2
 8000a9e:	4301      	orrs	r1, r0
 8000aa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000aac:	fb07 3610 	mls	r6, r7, r0, r3
 8000ab0:	0c0b      	lsrs	r3, r1, #16
 8000ab2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ab6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aba:	429e      	cmp	r6, r3
 8000abc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x260>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aca:	d22f      	bcs.n	8000b2c <__udivmoddi4+0x2b8>
 8000acc:	429e      	cmp	r6, r3
 8000ace:	d92d      	bls.n	8000b2c <__udivmoddi4+0x2b8>
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	4463      	add	r3, ip
 8000ad4:	1b9b      	subs	r3, r3, r6
 8000ad6:	b289      	uxth	r1, r1
 8000ad8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000adc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ae0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ae4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ae8:	428b      	cmp	r3, r1
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x28a>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000af4:	d216      	bcs.n	8000b24 <__udivmoddi4+0x2b0>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d914      	bls.n	8000b24 <__udivmoddi4+0x2b0>
 8000afa:	3e02      	subs	r6, #2
 8000afc:	4461      	add	r1, ip
 8000afe:	1ac9      	subs	r1, r1, r3
 8000b00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b04:	e738      	b.n	8000978 <__udivmoddi4+0x104>
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e705      	b.n	8000918 <__udivmoddi4+0xa4>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e3      	b.n	80008d8 <__udivmoddi4+0x64>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6f8      	b.n	8000906 <__udivmoddi4+0x92>
 8000b14:	454b      	cmp	r3, r9
 8000b16:	d2a9      	bcs.n	8000a6c <__udivmoddi4+0x1f8>
 8000b18:	ebb9 0802 	subs.w	r8, r9, r2
 8000b1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7a3      	b.n	8000a6c <__udivmoddi4+0x1f8>
 8000b24:	4646      	mov	r6, r8
 8000b26:	e7ea      	b.n	8000afe <__udivmoddi4+0x28a>
 8000b28:	4620      	mov	r0, r4
 8000b2a:	e794      	b.n	8000a56 <__udivmoddi4+0x1e2>
 8000b2c:	4640      	mov	r0, r8
 8000b2e:	e7d1      	b.n	8000ad4 <__udivmoddi4+0x260>
 8000b30:	46d0      	mov	r8, sl
 8000b32:	e77b      	b.n	8000a2c <__udivmoddi4+0x1b8>
 8000b34:	3b02      	subs	r3, #2
 8000b36:	4461      	add	r1, ip
 8000b38:	e732      	b.n	80009a0 <__udivmoddi4+0x12c>
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	e709      	b.n	8000952 <__udivmoddi4+0xde>
 8000b3e:	4464      	add	r4, ip
 8000b40:	3802      	subs	r0, #2
 8000b42:	e742      	b.n	80009ca <__udivmoddi4+0x156>

08000b44 <__aeabi_idiv0>:
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <menu_vars>:
void menu_vars(void){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0

	char menu_string[8];   // incoming string holder (single) , dont forget to get the
	char menu_string2[8];
	uint8_t var_index=menu_index_in&15;    //set var index ie  LFO[1].rate
 8000b4e:	4b9d      	ldr	r3, [pc, #628]	; (8000dc4 <menu_vars+0x27c>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	74fb      	strb	r3, [r7, #19]
	//uint8_t menu_count; // point to search result for var
	uint8_t *menu_vars_var1=NULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
	menu_countr =0;
 8000b5c:	4b9a      	ldr	r3, [pc, #616]	; (8000dc8 <menu_vars+0x280>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
	memcpy(menu_string, menu_vars_in, 8);    //copy 8 strings from incoing
 8000b62:	4a9a      	ldr	r2, [pc, #616]	; (8000dcc <menu_vars+0x284>)
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b6c:	e883 0003 	stmia.w	r3, {r0, r1}


	for (i = 0; i < 27; i++) {      // find menu location
 8000b70:	4b97      	ldr	r3, [pc, #604]	; (8000dd0 <menu_vars+0x288>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	801a      	strh	r2, [r3, #0]
 8000b76:	e025      	b.n	8000bc4 <menu_vars+0x7c>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000b78:	4b95      	ldr	r3, [pc, #596]	; (8000dd0 <menu_vars+0x288>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b95      	ldr	r3, [pc, #596]	; (8000dd4 <menu_vars+0x28c>)
 8000b80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b84:	463b      	mov	r3, r7
 8000b86:	6810      	ldr	r0, [r2, #0]
 8000b88:	6851      	ldr	r1, [r2, #4]
 8000b8a:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	f107 0308 	add.w	r3, r7, #8
 8000b92:	2208      	movs	r2, #8
 8000b94:	4618      	mov	r0, r3
 8000b96:	f008 fe89 	bl	80098ac <strncmp>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d10b      	bne.n	8000bb8 <menu_vars+0x70>
			menu_countr = i;
 8000ba0:	4b8b      	ldr	r3, [pc, #556]	; (8000dd0 <menu_vars+0x288>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4b88      	ldr	r3, [pc, #544]	; (8000dc8 <menu_vars+0x280>)
 8000ba8:	701a      	strb	r2, [r3, #0]
			menu_vars_menu=menu_titles_final+menu_countr; // copy pointer, ok
 8000baa:	4b87      	ldr	r3, [pc, #540]	; (8000dc8 <menu_vars+0x280>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4a88      	ldr	r2, [pc, #544]	; (8000dd4 <menu_vars+0x28c>)
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a88      	ldr	r2, [pc, #544]	; (8000dd8 <menu_vars+0x290>)
 8000bb6:	6013      	str	r3, [r2, #0]
	for (i = 0; i < 27; i++) {      // find menu location
 8000bb8:	4b85      	ldr	r3, [pc, #532]	; (8000dd0 <menu_vars+0x288>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	4b83      	ldr	r3, [pc, #524]	; (8000dd0 <menu_vars+0x288>)
 8000bc2:	801a      	strh	r2, [r3, #0]
 8000bc4:	4b82      	ldr	r3, [pc, #520]	; (8000dd0 <menu_vars+0x288>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	2b1a      	cmp	r3, #26
 8000bca:	d9d5      	bls.n	8000b78 <menu_vars+0x30>


		}
	}
	switch(menu_countr){
 8000bcc:	4b7e      	ldr	r3, [pc, #504]	; (8000dc8 <menu_vars+0x280>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b1a      	cmp	r3, #26
 8000bd2:	f200 80ed 	bhi.w	8000db0 <menu_vars+0x268>
 8000bd6:	a201      	add	r2, pc, #4	; (adr r2, 8000bdc <menu_vars+0x94>)
 8000bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bdc:	08000c49 	.word	0x08000c49
 8000be0:	08000c4f 	.word	0x08000c4f
 8000be4:	08000c5f 	.word	0x08000c5f
 8000be8:	08000c71 	.word	0x08000c71
 8000bec:	08000c83 	.word	0x08000c83
 8000bf0:	08000c95 	.word	0x08000c95
 8000bf4:	08000ca7 	.word	0x08000ca7
 8000bf8:	08000cad 	.word	0x08000cad
 8000bfc:	08000cbf 	.word	0x08000cbf
 8000c00:	08000cd3 	.word	0x08000cd3
 8000c04:	08000ce7 	.word	0x08000ce7
 8000c08:	08000cfb 	.word	0x08000cfb
 8000c0c:	08000d01 	.word	0x08000d01
 8000c10:	08000d0d 	.word	0x08000d0d
 8000c14:	08000d1b 	.word	0x08000d1b
 8000c18:	08000d29 	.word	0x08000d29
 8000c1c:	08000d37 	.word	0x08000d37
 8000c20:	08000d45 	.word	0x08000d45
 8000c24:	08000d53 	.word	0x08000d53
 8000c28:	08000d61 	.word	0x08000d61
 8000c2c:	08000d6f 	.word	0x08000d6f
 8000c30:	08000d7f 	.word	0x08000d7f
 8000c34:	08000d85 	.word	0x08000d85
 8000c38:	08000d8b 	.word	0x08000d8b
 8000c3c:	08000d91 	.word	0x08000d91
 8000c40:	08000d9d 	.word	0x08000d9d
 8000c44:	08000dab 	.word	0x08000dab
	case 0:     menu_vars_var1= NULL; break;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	e0b3      	b.n	8000db6 <menu_vars+0x26e>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000c4e:	7cfb      	ldrb	r3, [r7, #19]
 8000c50:	221a      	movs	r2, #26
 8000c52:	fb02 f303 	mul.w	r3, r2, r3
 8000c56:	4a61      	ldr	r2, [pc, #388]	; (8000ddc <menu_vars+0x294>)
 8000c58:	4413      	add	r3, r2
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	e0ab      	b.n	8000db6 <menu_vars+0x26e>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000c5e:	7cfb      	ldrb	r3, [r7, #19]
 8000c60:	221a      	movs	r2, #26
 8000c62:	fb02 f303 	mul.w	r3, r2, r3
 8000c66:	4a5d      	ldr	r2, [pc, #372]	; (8000ddc <menu_vars+0x294>)
 8000c68:	4413      	add	r3, r2
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	e0a2      	b.n	8000db6 <menu_vars+0x26e>
	case 3:     menu_vars_var1= &LFO[var_index].gain    ; break;
 8000c70:	7cfb      	ldrb	r3, [r7, #19]
 8000c72:	221a      	movs	r2, #26
 8000c74:	fb02 f303 	mul.w	r3, r2, r3
 8000c78:	4a58      	ldr	r2, [pc, #352]	; (8000ddc <menu_vars+0x294>)
 8000c7a:	4413      	add	r3, r2
 8000c7c:	3302      	adds	r3, #2
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	e099      	b.n	8000db6 <menu_vars+0x26e>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000c82:	7cfb      	ldrb	r3, [r7, #19]
 8000c84:	221a      	movs	r2, #26
 8000c86:	fb02 f303 	mul.w	r3, r2, r3
 8000c8a:	4a54      	ldr	r2, [pc, #336]	; (8000ddc <menu_vars+0x294>)
 8000c8c:	4413      	add	r3, r2
 8000c8e:	3303      	adds	r3, #3
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	e090      	b.n	8000db6 <menu_vars+0x26e>
	case 5:     menu_vars_var1= &LFO[var_index].target    ; break;
 8000c94:	7cfb      	ldrb	r3, [r7, #19]
 8000c96:	221a      	movs	r2, #26
 8000c98:	fb02 f303 	mul.w	r3, r2, r3
 8000c9c:	4a4f      	ldr	r2, [pc, #316]	; (8000ddc <menu_vars+0x294>)
 8000c9e:	4413      	add	r3, r2
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	e087      	b.n	8000db6 <menu_vars+0x26e>
	case 6:     menu_vars_var1= NULL   ; break;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	e084      	b.n	8000db6 <menu_vars+0x26e>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000cac:	7cfb      	ldrb	r3, [r7, #19]
 8000cae:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000cb2:	fb02 f303 	mul.w	r3, r2, r3
 8000cb6:	4a4a      	ldr	r2, [pc, #296]	; (8000de0 <menu_vars+0x298>)
 8000cb8:	4413      	add	r3, r2
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	e07b      	b.n	8000db6 <menu_vars+0x26e>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000cbe:	7cfb      	ldrb	r3, [r7, #19]
 8000cc0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000cc4:	fb02 f303 	mul.w	r3, r2, r3
 8000cc8:	4a45      	ldr	r2, [pc, #276]	; (8000de0 <menu_vars+0x298>)
 8000cca:	4413      	add	r3, r2
 8000ccc:	3301      	adds	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	e071      	b.n	8000db6 <menu_vars+0x26e>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000cd2:	7cfb      	ldrb	r3, [r7, #19]
 8000cd4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000cd8:	fb02 f303 	mul.w	r3, r2, r3
 8000cdc:	4a40      	ldr	r2, [pc, #256]	; (8000de0 <menu_vars+0x298>)
 8000cde:	4413      	add	r3, r2
 8000ce0:	3302      	adds	r3, #2
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	e067      	b.n	8000db6 <menu_vars+0x26e>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000ce6:	7cfb      	ldrb	r3, [r7, #19]
 8000ce8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000cec:	fb02 f303 	mul.w	r3, r2, r3
 8000cf0:	4a3b      	ldr	r2, [pc, #236]	; (8000de0 <menu_vars+0x298>)
 8000cf2:	4413      	add	r3, r2
 8000cf4:	3303      	adds	r3, #3
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	e05d      	b.n	8000db6 <menu_vars+0x26e>
	case 11:     menu_vars_var1= NULL  ; break;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	e05a      	b.n	8000db6 <menu_vars+0x26e>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000d00:	7cfb      	ldrb	r3, [r7, #19]
 8000d02:	011b      	lsls	r3, r3, #4
 8000d04:	4a37      	ldr	r2, [pc, #220]	; (8000de4 <menu_vars+0x29c>)
 8000d06:	4413      	add	r3, r2
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	e054      	b.n	8000db6 <menu_vars+0x26e>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000d0c:	7cfb      	ldrb	r3, [r7, #19]
 8000d0e:	011b      	lsls	r3, r3, #4
 8000d10:	4a34      	ldr	r2, [pc, #208]	; (8000de4 <menu_vars+0x29c>)
 8000d12:	4413      	add	r3, r2
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	e04d      	b.n	8000db6 <menu_vars+0x26e>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000d1a:	7cfb      	ldrb	r3, [r7, #19]
 8000d1c:	011b      	lsls	r3, r3, #4
 8000d1e:	4a31      	ldr	r2, [pc, #196]	; (8000de4 <menu_vars+0x29c>)
 8000d20:	4413      	add	r3, r2
 8000d22:	3302      	adds	r3, #2
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	e046      	b.n	8000db6 <menu_vars+0x26e>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000d28:	7cfb      	ldrb	r3, [r7, #19]
 8000d2a:	011b      	lsls	r3, r3, #4
 8000d2c:	4a2d      	ldr	r2, [pc, #180]	; (8000de4 <menu_vars+0x29c>)
 8000d2e:	4413      	add	r3, r2
 8000d30:	3303      	adds	r3, #3
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	e03f      	b.n	8000db6 <menu_vars+0x26e>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000d36:	7cfb      	ldrb	r3, [r7, #19]
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	4a2a      	ldr	r2, [pc, #168]	; (8000de4 <menu_vars+0x29c>)
 8000d3c:	4413      	add	r3, r2
 8000d3e:	3304      	adds	r3, #4
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	e038      	b.n	8000db6 <menu_vars+0x26e>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000d44:	7cfb      	ldrb	r3, [r7, #19]
 8000d46:	011b      	lsls	r3, r3, #4
 8000d48:	4a26      	ldr	r2, [pc, #152]	; (8000de4 <menu_vars+0x29c>)
 8000d4a:	4413      	add	r3, r2
 8000d4c:	3305      	adds	r3, #5
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	e031      	b.n	8000db6 <menu_vars+0x26e>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000d52:	7cfb      	ldrb	r3, [r7, #19]
 8000d54:	011b      	lsls	r3, r3, #4
 8000d56:	4a23      	ldr	r2, [pc, #140]	; (8000de4 <menu_vars+0x29c>)
 8000d58:	4413      	add	r3, r2
 8000d5a:	3306      	adds	r3, #6
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	e02a      	b.n	8000db6 <menu_vars+0x26e>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break;
 8000d60:	7cfb      	ldrb	r3, [r7, #19]
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	3308      	adds	r3, #8
 8000d66:	4a1f      	ldr	r2, [pc, #124]	; (8000de4 <menu_vars+0x29c>)
 8000d68:	4413      	add	r3, r2
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	e023      	b.n	8000db6 <menu_vars+0x26e>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000d6e:	7cfb      	ldrb	r3, [r7, #19]
 8000d70:	011b      	lsls	r3, r3, #4
 8000d72:	3308      	adds	r3, #8
 8000d74:	4a1b      	ldr	r2, [pc, #108]	; (8000de4 <menu_vars+0x29c>)
 8000d76:	4413      	add	r3, r2
 8000d78:	3302      	adds	r3, #2
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	e01b      	b.n	8000db6 <menu_vars+0x26e>
	case 21:     menu_vars_var1= NULL   ; break;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	e018      	b.n	8000db6 <menu_vars+0x26e>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <menu_vars+0x2a0>)
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	e015      	b.n	8000db6 <menu_vars+0x26e>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <menu_vars+0x2a4>)
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	e012      	b.n	8000db6 <menu_vars+0x26e>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000d90:	7cfb      	ldrb	r3, [r7, #19]
 8000d92:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <menu_vars+0x2a0>)
 8000d94:	4413      	add	r3, r2
 8000d96:	3302      	adds	r3, #2
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	e00c      	b.n	8000db6 <menu_vars+0x26e>
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000d9c:	7cfb      	ldrb	r3, [r7, #19]
 8000d9e:	3310      	adds	r3, #16
 8000da0:	4a11      	ldr	r2, [pc, #68]	; (8000de8 <menu_vars+0x2a0>)
 8000da2:	4413      	add	r3, r2
 8000da4:	3303      	adds	r3, #3
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	e005      	b.n	8000db6 <menu_vars+0x26e>
	case 26:     menu_vars_var1= &seq.loop    ; break;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <menu_vars+0x2a8>)
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	e002      	b.n	8000db6 <menu_vars+0x26e>
	default :		menu_vars_var1= NULL   ; break;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	bf00      	nop

	}

	menu_vars_var=menu_vars_var1;    // copy back address  ,ok
 8000db6:	4a0f      	ldr	r2, [pc, #60]	; (8000df4 <menu_vars+0x2ac>)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	6013      	str	r3, [r2, #0]

	//menu_vars_var= menu_vars_var1;

}
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20003b1c 	.word	0x20003b1c
 8000dc8:	20003ba0 	.word	0x20003ba0
 8000dcc:	20003b14 	.word	0x20003b14
 8000dd0:	20000c70 	.word	0x20000c70
 8000dd4:	200001bc 	.word	0x200001bc
 8000dd8:	20003b0c 	.word	0x20003b0c
 8000ddc:	20002e54 	.word	0x20002e54
 8000de0:	20002f58 	.word	0x20002f58
 8000de4:	200039e4 	.word	0x200039e4
 8000de8:	20003a54 	.word	0x20003a54
 8000dec:	20003a55 	.word	0x20003a55
 8000df0:	20003a78 	.word	0x20003a78
 8000df4:	20003b10 	.word	0x20003b10

08000df8 <menu_parser>:



void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0


	char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 8000dfe:	4a47      	ldr	r2, [pc, #284]	; (8000f1c <menu_parser+0x124>)
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e08:	e883 0003 	stmia.w	r3, {r0, r1}
	char menu_string2[8]="hhhhhhhh";
 8000e0c:	4a44      	ldr	r2, [pc, #272]	; (8000f20 <menu_parser+0x128>)
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e14:	e883 0003 	stmia.w	r3, {r0, r1}



	// strcpy(menu_string2,menu_out1[i]);
	uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 8000e18:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
 8000e1c:	82fb      	strh	r3, [r7, #22]


	if (string_search>menu_searchsize) {                    //this is ok
 8000e1e:	4b41      	ldr	r3, [pc, #260]	; (8000f24 <menu_parser+0x12c>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	8afa      	ldrh	r2, [r7, #22]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d374      	bcc.n	8000f12 <menu_parser+0x11a>


//	if ((!string_search) && menu_counter) {string_search=0; menu_title_count=0;
//	return;} // hold counter until menu writing was reset ,ok

	memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 8000e28:	4b3e      	ldr	r3, [pc, #248]	; (8000f24 <menu_parser+0x12c>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b3e      	ldr	r3, [pc, #248]	; (8000f28 <menu_parser+0x130>)
 8000e30:	441a      	add	r2, r3
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	6810      	ldr	r0, [r2, #0]
 8000e38:	6851      	ldr	r1, [r2, #4]
 8000e3a:	c303      	stmia	r3!, {r0, r1}
	////////////////////////////
	for (i=0;i<27;i++){    	// test a single menu entry  , for now only the first record
 8000e3c:	4b3b      	ldr	r3, [pc, #236]	; (8000f2c <menu_parser+0x134>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	801a      	strh	r2, [r3, #0]
 8000e42:	e04b      	b.n	8000edc <menu_parser+0xe4>

		memcpy(menu_string2,menu_titles_final[i],8);
 8000e44:	4b39      	ldr	r3, [pc, #228]	; (8000f2c <menu_parser+0x134>)
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b39      	ldr	r3, [pc, #228]	; (8000f30 <menu_parser+0x138>)
 8000e4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	6810      	ldr	r0, [r2, #0]
 8000e54:	6851      	ldr	r1, [r2, #4]
 8000e56:	c303      	stmia	r3!, {r0, r1}
		if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 8000e58:	1d39      	adds	r1, r7, #4
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	2208      	movs	r2, #8
 8000e60:	4618      	mov	r0, r3
 8000e62:	f008 fd23 	bl	80098ac <strncmp>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d131      	bne.n	8000ed0 <menu_parser+0xd8>
		{
			menu_title_lut[menu_title_count]=(i<<8)+menu_counter;   // search result  and disp lcd position counter
 8000e6c:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <menu_parser+0x134>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	4b2f      	ldr	r3, [pc, #188]	; (8000f34 <menu_parser+0x13c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	492f      	ldr	r1, [pc, #188]	; (8000f38 <menu_parser+0x140>)
 8000e7c:	7809      	ldrb	r1, [r1, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b2e      	ldr	r3, [pc, #184]	; (8000f3c <menu_parser+0x144>)
 8000e84:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]

			memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 8000e88:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <menu_parser+0x140>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b2b      	ldr	r3, [pc, #172]	; (8000f40 <menu_parser+0x148>)
 8000e92:	4413      	add	r3, r2
 8000e94:	4a23      	ldr	r2, [pc, #140]	; (8000f24 <menu_parser+0x12c>)
 8000e96:	8812      	ldrh	r2, [r2, #0]
 8000e98:	3a02      	subs	r2, #2
 8000e9a:	4923      	ldr	r1, [pc, #140]	; (8000f28 <menu_parser+0x130>)
 8000e9c:	440a      	add	r2, r1
 8000e9e:	8812      	ldrh	r2, [r2, #0]
 8000ea0:	b292      	uxth	r2, r2
 8000ea2:	801a      	strh	r2, [r3, #0]


			menu_title_count++;
 8000ea4:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <menu_parser+0x140>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <menu_parser+0x140>)
 8000eae:	701a      	strb	r2, [r3, #0]
			menu_counter++;
 8000eb0:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <menu_parser+0x13c>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <menu_parser+0x13c>)
 8000eba:	701a      	strb	r2, [r3, #0]
			space_check=0;
 8000ebc:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <menu_parser+0x14c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
			string_search=string_search+8;     // advance search position
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <menu_parser+0x12c>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	3308      	adds	r3, #8
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <menu_parser+0x12c>)
 8000ecc:	801a      	strh	r2, [r3, #0]

			return;}
 8000ece:	e021      	b.n	8000f14 <menu_parser+0x11c>
	for (i=0;i<27;i++){    	// test a single menu entry  , for now only the first record
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <menu_parser+0x134>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <menu_parser+0x134>)
 8000eda:	801a      	strh	r2, [r3, #0]
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <menu_parser+0x134>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	2b1a      	cmp	r3, #26
 8000ee2:	d9af      	bls.n	8000e44 <menu_parser+0x4c>
	}

	//string_value=255;    // no result use 255 for now
	//menu_title_lut[menu_title_count]=255;   // record for feedback line
	//menu_title_count++;
	if (space_check>1)  menu_counter++;   //this is ok
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <menu_parser+0x14c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d905      	bls.n	8000ef8 <menu_parser+0x100>
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <menu_parser+0x13c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <menu_parser+0x13c>)
 8000ef6:	701a      	strb	r2, [r3, #0]
	space_check++;  // count empty spaces or fill characters
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <menu_parser+0x14c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <menu_parser+0x14c>)
 8000f02:	701a      	strb	r2, [r3, #0]
	string_search++;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <menu_parser+0x12c>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <menu_parser+0x12c>)
 8000f0e:	801a      	strh	r2, [r3, #0]
	return;
 8000f10:	e000      	b.n	8000f14 <menu_parser+0x11c>
		return;    }    // check if bigger than search area
 8000f12:	bf00      	nop


}
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	08009b48 	.word	0x08009b48
 8000f20:	08009b50 	.word	0x08009b50
 8000f24:	20003a82 	.word	0x20003a82
 8000f28:	2000022c 	.word	0x2000022c
 8000f2c:	20000c70 	.word	0x20000c70
 8000f30:	200001bc 	.word	0x200001bc
 8000f34:	20003a84 	.word	0x20003a84
 8000f38:	20003b0a 	.word	0x20003b0a
 8000f3c:	20003a88 	.word	0x20003a88
 8000f40:	20003b20 	.word	0x20003b20
 8000f44:	20003a85 	.word	0x20003a85

08000f48 <SPI_command>:





void SPI_command(void){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <SPI_command+0x68>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d128      	bne.n	8000fa8 <SPI_command+0x60>
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <SPI_command+0x6c>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d124      	bne.n	8000fa8 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <SPI_command+0x70>)
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <SPI_command+0x2a>
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <SPI_command+0x74>)
 8000f6c:	22f8      	movs	r2, #248	; 0xf8
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	e002      	b.n	8000f78 <SPI_command+0x30>
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <SPI_command+0x74>)
 8000f74:	22fa      	movs	r2, #250	; 0xfa
 8000f76:	701a      	strb	r2, [r3, #0]
/*		bsrr_long=spi_byte<<16; // top byte for command 24-16, then 2 bytes of data 16-0
		spi_hold=(spi_hold&255);
		bsrr_long=bsrr_long+((spi_hold>>4)<<12); // 4 bits to top
		bsrr_long=bsrr_long+((spi_hold&15)<<4);	// 4 bits to top
*/
	spi_store[0]=spi_byte&255;
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <SPI_command+0x74>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <SPI_command+0x70>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	091b      	lsrs	r3, r3, #4
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <SPI_command+0x70>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	011b      	lsls	r3, r3, #4
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 8000f96:	4639      	mov	r1, r7
 8000f98:	2303      	movs	r3, #3
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <SPI_command+0x78>)
 8000f9e:	f006 fe1a 	bl	8007bd6 <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 8000fa2:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <SPI_command+0x68>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	801a      	strh	r2, [r3, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200020ca 	.word	0x200020ca
 8000fb4:	200020d0 	.word	0x200020d0
 8000fb8:	200020ce 	.word	0x200020ce
 8000fbc:	200020cc 	.word	0x200020cc
 8000fc0:	20003d00 	.word	0x20003d00

08000fc4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	time_proc++;
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000fd6:	801a      	strh	r2, [r3, #0]
	//if (((sample_point==511) || (sample_point==1022)) && (bank_write)  ) error_count++;

	if (sample_point==511) {bank_write=1; sample_pointD=0;  }
 8000fd8:	4b22      	ldr	r3, [pc, #136]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d105      	bne.n	8000ff2 <HAL_TIM_PeriodElapsedCallback+0x2e>
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	801a      	strh	r2, [r3, #0]
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	801a      	strh	r2, [r3, #0]
	if (sample_point==1022) {bank_write=1; sample_pointD=512; }
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d106      	bne.n	800100e <HAL_TIM_PeriodElapsedCallback+0x4a>
 8001000:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001002:	2201      	movs	r2, #1
 8001004:	801a      	strh	r2, [r3, #0]
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800100c:	801a      	strh	r2, [r3, #0]
	sample_point=sample_point & 1023;// this is 1
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001018:	b29a      	uxth	r2, r3
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800101c:	801a      	strh	r2, [r3, #0]
	play_hold=play_sample[sample_point]; // this is 2
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	b29b      	uxth	r3, r3
 8001024:	461a      	mov	r2, r3
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001028:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800102e:	801a      	strh	r2, [r3, #0]





	if(TIM3==htim->Instance)			// nothing here is consistent
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a10      	ldr	r2, [pc, #64]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d10b      	bne.n	8001052 <HAL_TIM_PeriodElapsedCallback+0x8e>
{


TIM3->CCR3=play_hold ;  // keep readin sample storage
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	b29a      	uxth	r2, r3
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001042:	63da      	str	r2, [r3, #60]	; 0x3c


//if (bs_count==255
	//	)  { bs_count=0; menu_store=(menuSelect>>2); } else bs_count++; // menu select, higher count just spills over  159 chamge to 128 2*64
//}
sample_point++; //this needs to be here or too fast and wrong sample rate
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	b29b      	uxth	r3, r3
 800104a:	3301      	adds	r3, #1
 800104c:	b29a      	uxth	r2, r3
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001050:	801a      	strh	r2, [r3, #0]

}

}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20002e50 	.word	0x20002e50
 8001064:	20001476 	.word	0x20001476
 8001068:	200001b2 	.word	0x200001b2
 800106c:	2000147a 	.word	0x2000147a
 8001070:	20000c74 	.word	0x20000c74
 8001074:	20001478 	.word	0x20001478
 8001078:	40000400 	.word	0x40000400

0800107c <analoginputloopb>:
						}  // get value this this on e is blank
		//HAL_ADC_Stop(&hadc1);
//for (i=0;i<3;i++){ adc_values[i]= (adc_values[i]>>8) &15; } // reduce value to 4 bit
}
*/
void analoginputloopb(void){  //works fine still
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
uint16_t menu_holder;



	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 8001082:	4b56      	ldr	r3, [pc, #344]	; (80011dc <analoginputloopb+0x160>)
 8001084:	889b      	ldrh	r3, [r3, #4]
 8001086:	091b      	lsrs	r3, r3, #4
 8001088:	b29b      	uxth	r3, r3
 800108a:	b2da      	uxtb	r2, r3
 800108c:	4b54      	ldr	r3, [pc, #336]	; (80011e0 <analoginputloopb+0x164>)
 800108e:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 8001090:	4b52      	ldr	r3, [pc, #328]	; (80011dc <analoginputloopb+0x160>)
 8001092:	889b      	ldrh	r3, [r3, #4]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b51      	ldr	r3, [pc, #324]	; (80011e4 <analoginputloopb+0x168>)
 800109e:	701a      	strb	r2, [r3, #0]
//	else menu_holder=disp_lut [(menuSelect)	] [15-adc_values[1]];  // grab disp lut value for pointer if valid then write for now

		//menu_holder=disp_lut [(menuSelect)	] [(15-adc_values[1])];   // value from disp lut
		//menu_holder=disp_lut [menuSelect] [menuSelectX];   // value from disp lut

		cursor_menu[1]=0;
 80010a0:	4b4e      	ldr	r3, [pc, #312]	; (80011dc <analoginputloopb+0x160>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	805a      	strh	r2, [r3, #2]
		//cursor_menu[2]=cursor_lookup[enc2_dir];
		// cursor_menu[2]=cursor_lookup[enc2_dir]; //needed for correct line sequence ,obsolete
		cursor_menu[2]=enc2_dir;
 80010a6:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <analoginputloopb+0x16c>)
 80010a8:	881a      	ldrh	r2, [r3, #0]
 80010aa:	4b4c      	ldr	r3, [pc, #304]	; (80011dc <analoginputloopb+0x160>)
 80010ac:	809a      	strh	r2, [r3, #4]


		//enc_dir=potSource[counterVarB];


	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 80010ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b4:	085b      	lsrs	r3, r3, #1
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4b4c      	ldr	r3, [pc, #304]	; (80011ec <analoginputloopb+0x170>)
 80010ba:	801a      	strh	r2, [r3, #0]
	enc2_store[enc2_store_count]=(TIM4->CNT)&255;  // read counter tim4, noisy
 80010bc:	4b4c      	ldr	r3, [pc, #304]	; (80011f0 <analoginputloopb+0x174>)
 80010be:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80010c0:	4b4c      	ldr	r3, [pc, #304]	; (80011f4 <analoginputloopb+0x178>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	b2c9      	uxtb	r1, r1
 80010c8:	4b4b      	ldr	r3, [pc, #300]	; (80011f8 <analoginputloopb+0x17c>)
 80010ca:	5499      	strb	r1, [r3, r2]
	uint16_t enc2_store2=0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	80fb      	strh	r3, [r7, #6]
	uint16_t enc2_store3=0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	80bb      	strh	r3, [r7, #4]
	if (enc2_store_count==3) enc2_store_count=0; else enc2_store_count++;
 80010d4:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <analoginputloopb+0x178>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d103      	bne.n	80010e4 <analoginputloopb+0x68>
 80010dc:	4b45      	ldr	r3, [pc, #276]	; (80011f4 <analoginputloopb+0x178>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	e005      	b.n	80010f0 <analoginputloopb+0x74>
 80010e4:	4b43      	ldr	r3, [pc, #268]	; (80011f4 <analoginputloopb+0x178>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <analoginputloopb+0x178>)
 80010ee:	701a      	strb	r2, [r3, #0]

	enc2_store2=enc2_store[0]+enc2_store[1]+enc2_store[2]+enc2_store[3];     // average filter hopefully
 80010f0:	4b41      	ldr	r3, [pc, #260]	; (80011f8 <analoginputloopb+0x17c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	4b40      	ldr	r3, [pc, #256]	; (80011f8 <analoginputloopb+0x17c>)
 80010f8:	785b      	ldrb	r3, [r3, #1]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	4413      	add	r3, r2
 80010fe:	b29a      	uxth	r2, r3
 8001100:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <analoginputloopb+0x17c>)
 8001102:	789b      	ldrb	r3, [r3, #2]
 8001104:	b29b      	uxth	r3, r3
 8001106:	4413      	add	r3, r2
 8001108:	b29a      	uxth	r2, r3
 800110a:	4b3b      	ldr	r3, [pc, #236]	; (80011f8 <analoginputloopb+0x17c>)
 800110c:	78db      	ldrb	r3, [r3, #3]
 800110e:	b29b      	uxth	r3, r3
 8001110:	4413      	add	r3, r2
 8001112:	80fb      	strh	r3, [r7, #6]
	enc2_store3=enc2_store2>>3;
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	08db      	lsrs	r3, r3, #3
 8001118:	80bb      	strh	r3, [r7, #4]
	enc2_temp=enc2_store3;
 800111a:	4a38      	ldr	r2, [pc, #224]	; (80011fc <analoginputloopb+0x180>)
 800111c:	88bb      	ldrh	r3, [r7, #4]
 800111e:	8013      	strh	r3, [r2, #0]
	//enc2_temp=enc2_temp&127; // fix overflow ? , dont need a lot because of skip


	//if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite
	//if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite , step multiplier setting
	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;
 8001120:	4b32      	ldr	r3, [pc, #200]	; (80011ec <analoginputloopb+0x170>)
 8001122:	881a      	ldrh	r2, [r3, #0]
 8001124:	4b36      	ldr	r3, [pc, #216]	; (8001200 <analoginputloopb+0x184>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	429a      	cmp	r2, r3
 800112a:	d908      	bls.n	800113e <analoginputloopb+0xc2>
 800112c:	4b35      	ldr	r3, [pc, #212]	; (8001204 <analoginputloopb+0x188>)
 800112e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001132:	b29b      	uxth	r3, r3
 8001134:	3b01      	subs	r3, #1
 8001136:	b29b      	uxth	r3, r3
 8001138:	b21a      	sxth	r2, r3
 800113a:	4b32      	ldr	r3, [pc, #200]	; (8001204 <analoginputloopb+0x188>)
 800113c:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <analoginputloopb+0x170>)
 8001140:	881a      	ldrh	r2, [r3, #0]
 8001142:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <analoginputloopb+0x184>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d208      	bcs.n	800115c <analoginputloopb+0xe0>
 800114a:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <analoginputloopb+0x188>)
 800114c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001150:	b29b      	uxth	r3, r3
 8001152:	3301      	adds	r3, #1
 8001154:	b29b      	uxth	r3, r3
 8001156:	b21a      	sxth	r2, r3
 8001158:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <analoginputloopb+0x188>)
 800115a:	801a      	strh	r2, [r3, #0]





  if (enc2_temp>383) enc2_temp=383;  //mem overflow somewhere
 800115c:	4b27      	ldr	r3, [pc, #156]	; (80011fc <analoginputloopb+0x180>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001164:	d303      	bcc.n	800116e <analoginputloopb+0xf2>
 8001166:	4b25      	ldr	r3, [pc, #148]	; (80011fc <analoginputloopb+0x180>)
 8001168:	f240 127f 	movw	r2, #383	; 0x17f
 800116c:	801a      	strh	r2, [r3, #0]
	if (enc_dir>160) enc_dir=160;
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <analoginputloopb+0x188>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	2ba0      	cmp	r3, #160	; 0xa0
 8001176:	dd02      	ble.n	800117e <analoginputloopb+0x102>
 8001178:	4b22      	ldr	r3, [pc, #136]	; (8001204 <analoginputloopb+0x188>)
 800117a:	22a0      	movs	r2, #160	; 0xa0
 800117c:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <analoginputloopb+0x188>)
 8001180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001184:	2b00      	cmp	r3, #0
 8001186:	da02      	bge.n	800118e <analoginputloopb+0x112>
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <analoginputloopb+0x188>)
 800118a:	2200      	movs	r2, #0
 800118c:	801a      	strh	r2, [r3, #0]
			//if (enc2_temp<16) enc_dir=(enc_dir<<2) & 127; // faster for notes on first row

			//potSource[counterVarB]=enc_dir;       // enter data into potsource
				//	enc_dir=0;
			enc_tempB=enc_temp;
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <analoginputloopb+0x170>)
 8001190:	881a      	ldrh	r2, [r3, #0]
 8001192:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <analoginputloopb+0x184>)
 8001194:	801a      	strh	r2, [r3, #0]




			//if (enc2_temp<enc2_tempB)	 enc2_dir--;
			enc2_dir=enc2_temp; //temp to try source data
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <analoginputloopb+0x180>)
 8001198:	881a      	ldrh	r2, [r3, #0]
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <analoginputloopb+0x16c>)
 800119c:	801a      	strh	r2, [r3, #0]
		//	if (enc2_dir>127) menu_page[1]=127; else if (enc2_dir>255)   menu_page[1]=255;				else menu_page[1]=0;
		//	menu_page[1]= (enc2_dir >>7) <<7;

			menu_page[1]=enc2_dir&384;  // single  for now
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <analoginputloopb+0x16c>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <analoginputloopb+0x18c>)
 80011aa:	805a      	strh	r2, [r3, #2]
			menu_page[1]=0; // force a single page for now
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <analoginputloopb+0x18c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	805a      	strh	r2, [r3, #2]
					//if ((enc2_temp<=383) && (enc2_tempB>383)) display_fill();
					//if ((enc2_temp<127) && (enc2_tempB>384)) display_fill();
					//if ((enc2_temp<=511) && (enc2_tempB<127)) display_fill();


					enc2_tempB=enc2_temp; // to effective as counter not getting reset
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <analoginputloopb+0x180>)
 80011b4:	881a      	ldrh	r2, [r3, #0]
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <analoginputloopb+0x190>)
 80011b8:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <analoginputloopb+0x194>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <analoginputloopb+0x198>)
 80011c2:	5c9b      	ldrb	r3, [r3, r2]
 80011c4:	4a12      	ldr	r2, [pc, #72]	; (8001210 <analoginputloopb+0x194>)
 80011c6:	8812      	ldrh	r2, [r2, #0]
 80011c8:	091b      	lsrs	r3, r3, #4
 80011ca:	b2d9      	uxtb	r1, r3
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <analoginputloopb+0x19c>)
 80011ce:	5499      	strb	r1, [r3, r2]

//potValues[counterVarB]=potSource[counterVarB] & 15 ;  // reduce values for now ,use original for others



}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	200020d4 	.word	0x200020d4
 80011e0:	20000c3e 	.word	0x20000c3e
 80011e4:	20000c3f 	.word	0x20000c3f
 80011e8:	200020c2 	.word	0x200020c2
 80011ec:	200020ba 	.word	0x200020ba
 80011f0:	40000800 	.word	0x40000800
 80011f4:	20003ba9 	.word	0x20003ba9
 80011f8:	20003ba4 	.word	0x20003ba4
 80011fc:	200020be 	.word	0x200020be
 8001200:	200020bc 	.word	0x200020bc
 8001204:	200020c4 	.word	0x200020c4
 8001208:	200020e4 	.word	0x200020e4
 800120c:	200020c0 	.word	0x200020c0
 8001210:	20000c44 	.word	0x20000c44
 8001214:	20000ab4 	.word	0x20000ab4
 8001218:	20000934 	.word	0x20000934

0800121c <display_init>:
void display_init(void){
 800121c:	b5b0      	push	{r4, r5, r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);


		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 8001222:	4b22      	ldr	r3, [pc, #136]	; (80012ac <display_init+0x90>)
 8001224:	1d3c      	adds	r4, r7, #4
 8001226:	461d      	mov	r5, r3
 8001228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001230:	682b      	ldr	r3, [r5, #0]
 8001232:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <display_init+0x94>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d132      	bne.n	80012a2 <display_init+0x86>


switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <display_init+0x98>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b29b      	uxth	r3, r3
 8001242:	3b06      	subs	r3, #6
 8001244:	b29a      	uxth	r2, r3
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <display_init+0x9c>)
 8001248:	801a      	strh	r2, [r3, #0]
 800124a:	f000 fa73 	bl	8001734 <displayBuffer2>
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <display_init+0x9c>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <display_init+0xa0>)
 8001256:	5c9b      	ldrb	r3, [r3, r2]
 8001258:	b29a      	uxth	r2, r3
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <display_init+0xa4>)
 800125c:	801a      	strh	r2, [r3, #0]
 800125e:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <display_init+0x98>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b05      	cmp	r3, #5
 8001266:	d80b      	bhi.n	8001280 <display_init+0x64>
 8001268:	2003      	movs	r0, #3
 800126a:	f003 f8f9 	bl	8004460 <HAL_Delay>
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <display_init+0x98>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	3328      	adds	r3, #40	; 0x28
 8001276:	443b      	add	r3, r7
 8001278:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800127c:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <display_init+0xa4>)
 800127e:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <display_init+0x98>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <display_init+0x98>)
 800128a:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <display_init+0x94>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
 8001292:	f7ff fe59 	bl	8000f48 <SPI_command>
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <display_init+0x94>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <display_init+0xa8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	801a      	strh	r2, [r3, #0]
		  }


}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	; 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bdb0      	pop	{r4, r5, r7, pc}
 80012aa:	bf00      	nop
 80012ac:	08009b58 	.word	0x08009b58
 80012b0:	200020d0 	.word	0x200020d0
 80012b4:	200020d1 	.word	0x200020d1
 80012b8:	200020d2 	.word	0x200020d2
 80012bc:	20000000 	.word	0x20000000
 80012c0:	200020ce 	.word	0x200020ce
 80012c4:	200020ca 	.word	0x200020ca

080012c8 <gfx_send>:


void gfx_send(void){         // send spi to lcd from gfx ram
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	71fb      	strb	r3, [r7, #7]

			uint8_t spi_store3=gfx_ram[gfx_send_counter];
 80012d2:	4b24      	ldr	r3, [pc, #144]	; (8001364 <gfx_send+0x9c>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <gfx_send+0xa0>)
 80012da:	5c9b      	ldrb	r3, [r3, r2]
 80012dc:	71bb      	strb	r3, [r7, #6]

			if (gfx_send_counter2<2) spi_store2=248; else {spi_store2=250;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 80012de:	4b23      	ldr	r3, [pc, #140]	; (800136c <gfx_send+0xa4>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d802      	bhi.n	80012ec <gfx_send+0x24>
 80012e6:	23f8      	movs	r3, #248	; 0xf8
 80012e8:	71fb      	strb	r3, [r7, #7]
 80012ea:	e001      	b.n	80012f0 <gfx_send+0x28>
 80012ec:	23fa      	movs	r3, #250	; 0xfa
 80012ee:	71fb      	strb	r3, [r7, #7]

					spi_store[0]=spi_store2;
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	703b      	strb	r3, [r7, #0]
					spi_store[1]=((spi_store3>>4)<<4);
 80012f4:	79bb      	ldrb	r3, [r7, #6]
 80012f6:	091b      	lsrs	r3, r3, #4
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	707b      	strb	r3, [r7, #1]
					spi_store[2]=((spi_store3&15)<<4);
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	b2db      	uxtb	r3, r3
 8001306:	70bb      	strb	r3, [r7, #2]

						//HAL_SPI_Transmit_DMA(&hdma_spi2_tx, spi_store, 3);    // ca 0.1ms in theory so one line should be about 2ms
						HAL_SPI_Transmit(&hspi2,spi_store,3,3);  // ok
 8001308:	4639      	mov	r1, r7
 800130a:	2303      	movs	r3, #3
 800130c:	2203      	movs	r2, #3
 800130e:	4818      	ldr	r0, [pc, #96]	; (8001370 <gfx_send+0xa8>)
 8001310:	f006 fc61 	bl	8007bd6 <HAL_SPI_Transmit>
					if (gfx_send_counter2==17 ) { gfx_send_counter2=0;    } else gfx_send_counter2++; // check elsewhere if changing gfx_send_counter
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <gfx_send+0xa4>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b11      	cmp	r3, #17
 800131a:	d103      	bne.n	8001324 <gfx_send+0x5c>
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <gfx_send+0xa4>)
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
 8001322:	e005      	b.n	8001330 <gfx_send+0x68>
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <gfx_send+0xa4>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	3301      	adds	r3, #1
 800132a:	b2da      	uxtb	r2, r3
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <gfx_send+0xa4>)
 800132e:	701a      	strb	r2, [r3, #0]
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++;
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <gfx_send+0x9c>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	f240 427f 	movw	r2, #1151	; 0x47f
 8001338:	4293      	cmp	r3, r2
 800133a:	d109      	bne.n	8001350 <gfx_send+0x88>
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <gfx_send+0x9c>)
 800133e:	2200      	movs	r2, #0
 8001340:	801a      	strh	r2, [r3, #0]
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <gfx_send+0xac>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <gfx_send+0xa4>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]

		}
 800134e:	e005      	b.n	800135c <gfx_send+0x94>
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++;
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <gfx_send+0x9c>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	b29a      	uxth	r2, r3
 8001358:	4b02      	ldr	r3, [pc, #8]	; (8001364 <gfx_send+0x9c>)
 800135a:	801a      	strh	r2, [r3, #0]
		}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200029fc 	.word	0x200029fc
 8001368:	2000257c 	.word	0x2000257c
 800136c:	200029fe 	.word	0x200029fe
 8001370:	20003d00 	.word	0x20003d00
 8001374:	20002a36 	.word	0x20002a36

08001378 <display_fill>:


void display_fill(void)  {     // full update of gfx memory
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
loop_counter3=1;
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <display_fill+0x5c>)
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
uint8_t fill_counter= menu_title_count;
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <display_fill+0x60>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	71fb      	strb	r3, [r7, #7]
if (!menu_title_count)    fill_counter=127;
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <display_fill+0x60>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <display_fill+0x1e>
 8001392:	237f      	movs	r3, #127	; 0x7f
 8001394:	71fb      	strb	r3, [r7, #7]
//uint16_t store_x;
//uint8_t d_count;

for (n=0;n<fill_counter;n++)	{ //just fills with blank character s
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <display_fill+0x64>)
 8001398:	2200      	movs	r2, #0
 800139a:	801a      	strh	r2, [r3, #0]
 800139c:	e00e      	b.n	80013bc <display_fill+0x44>

	disp_stepper=1;
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <display_fill+0x68>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]

	init_b=n;
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <display_fill+0x64>)
 80013a6:	881a      	ldrh	r2, [r3, #0]
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <display_fill+0x6c>)
 80013aa:	801a      	strh	r2, [r3, #0]
displayBuffer2();
 80013ac:	f000 f9c2 	bl	8001734 <displayBuffer2>
for (n=0;n<fill_counter;n++)	{ //just fills with blank character s
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <display_fill+0x64>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <display_fill+0x64>)
 80013ba:	801a      	strh	r2, [r3, #0]
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	b29a      	uxth	r2, r3
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <display_fill+0x64>)
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d8ea      	bhi.n	800139e <display_fill+0x26>



}
//enc2_dir=menu_page[1];  // end clean
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20002a37 	.word	0x20002a37
 80013d8:	20003b0a 	.word	0x20003b0a
 80013dc:	20000c4e 	.word	0x20000c4e
 80013e0:	200001b6 	.word	0x200001b6
 80013e4:	200020d2 	.word	0x200020d2

080013e8 <display_process>:





void display_process(void){							// keep data processing here
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0


	if ((enc2_tempC==enc2_dir) && (!enc2_add))  {
 80013ee:	4b9e      	ldr	r3, [pc, #632]	; (8001668 <display_process+0x280>)
 80013f0:	f993 3000 	ldrsb.w	r3, [r3]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b9d      	ldr	r3, [pc, #628]	; (800166c <display_process+0x284>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d10e      	bne.n	800141c <display_process+0x34>
 80013fe:	4b9c      	ldr	r3, [pc, #624]	; (8001670 <display_process+0x288>)
 8001400:	f993 3000 	ldrsb.w	r3, [r3]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d109      	bne.n	800141c <display_process+0x34>
		if (disp_stepper==5)  {enc2_add=2; 	disp_stepper=13;}   	 // wait till enc2_dir  hasn't changed ,jump and then change feedback
 8001408:	4b9a      	ldr	r3, [pc, #616]	; (8001674 <display_process+0x28c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b05      	cmp	r3, #5
 800140e:	d105      	bne.n	800141c <display_process+0x34>
 8001410:	4b97      	ldr	r3, [pc, #604]	; (8001670 <display_process+0x288>)
 8001412:	2202      	movs	r2, #2
 8001414:	701a      	strb	r2, [r3, #0]
 8001416:	4b97      	ldr	r3, [pc, #604]	; (8001674 <display_process+0x28c>)
 8001418:	220d      	movs	r2, #13
 800141a:	701a      	strb	r2, [r3, #0]
			}

	if (disp_stepper>1)	init_b=123+(disp_stepper);  // write lcd3
 800141c:	4b95      	ldr	r3, [pc, #596]	; (8001674 <display_process+0x28c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d906      	bls.n	8001432 <display_process+0x4a>
 8001424:	4b93      	ldr	r3, [pc, #588]	; (8001674 <display_process+0x28c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b29b      	uxth	r3, r3
 800142a:	337b      	adds	r3, #123	; 0x7b
 800142c:	b29a      	uxth	r2, r3
 800142e:	4b92      	ldr	r3, [pc, #584]	; (8001678 <display_process+0x290>)
 8001430:	801a      	strh	r2, [r3, #0]
	if (disp_stepper>4)	init_b=107+(disp_stepper);  // write feedback line
 8001432:	4b90      	ldr	r3, [pc, #576]	; (8001674 <display_process+0x28c>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b04      	cmp	r3, #4
 8001438:	d906      	bls.n	8001448 <display_process+0x60>
 800143a:	4b8e      	ldr	r3, [pc, #568]	; (8001674 <display_process+0x28c>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b29b      	uxth	r3, r3
 8001440:	336b      	adds	r3, #107	; 0x6b
 8001442:	b29a      	uxth	r2, r3
 8001444:	4b8c      	ldr	r3, [pc, #560]	; (8001678 <display_process+0x290>)
 8001446:	801a      	strh	r2, [r3, #0]

	if ((lcd_temp!=enc_dir)  && (enc2_tempC==enc2_dir) )   {*menu_vars_var=enc_dir;   // enc2_dir =same enc_dir=changed
 8001448:	4b8c      	ldr	r3, [pc, #560]	; (800167c <display_process+0x294>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	4b8c      	ldr	r3, [pc, #560]	; (8001680 <display_process+0x298>)
 8001450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001454:	429a      	cmp	r2, r3
 8001456:	d014      	beq.n	8001482 <display_process+0x9a>
 8001458:	4b83      	ldr	r3, [pc, #524]	; (8001668 <display_process+0x280>)
 800145a:	f993 3000 	ldrsb.w	r3, [r3]
 800145e:	461a      	mov	r2, r3
 8001460:	4b82      	ldr	r3, [pc, #520]	; (800166c <display_process+0x284>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	429a      	cmp	r2, r3
 8001466:	d10c      	bne.n	8001482 <display_process+0x9a>
 8001468:	4b85      	ldr	r3, [pc, #532]	; (8001680 <display_process+0x298>)
 800146a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800146e:	4b85      	ldr	r3, [pc, #532]	; (8001684 <display_process+0x29c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	701a      	strb	r2, [r3, #0]
	lcd_temp=enc_dir;  }
 8001476:	4b82      	ldr	r3, [pc, #520]	; (8001680 <display_process+0x298>)
 8001478:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4b7f      	ldr	r3, [pc, #508]	; (800167c <display_process+0x294>)
 8001480:	701a      	strb	r2, [r3, #0]



	if ((disp_stepper==0) && (enc2_tempC!=enc2_dir) && (!enc2_add))  {      // wait till loop end , ok
 8001482:	4b7c      	ldr	r3, [pc, #496]	; (8001674 <display_process+0x28c>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d159      	bne.n	800153e <display_process+0x156>
 800148a:	4b77      	ldr	r3, [pc, #476]	; (8001668 <display_process+0x280>)
 800148c:	f993 3000 	ldrsb.w	r3, [r3]
 8001490:	461a      	mov	r2, r3
 8001492:	4b76      	ldr	r3, [pc, #472]	; (800166c <display_process+0x284>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d051      	beq.n	800153e <display_process+0x156>
 800149a:	4b75      	ldr	r3, [pc, #468]	; (8001670 <display_process+0x288>)
 800149c:	f993 3000 	ldrsb.w	r3, [r3]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d14c      	bne.n	800153e <display_process+0x156>

	if  (enc2_tempC<enc2_dir)	 enc2_add=1;   									// use this to set up or down count for variables , might change
 80014a4:	4b70      	ldr	r3, [pc, #448]	; (8001668 <display_process+0x280>)
 80014a6:	f993 3000 	ldrsb.w	r3, [r3]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b6f      	ldr	r3, [pc, #444]	; (800166c <display_process+0x284>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	da02      	bge.n	80014ba <display_process+0xd2>
 80014b4:	4b6e      	ldr	r3, [pc, #440]	; (8001670 <display_process+0x288>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
		if  (enc2_tempC>enc2_dir)	 enc2_add=-1;    // slow but 1 step at a time
 80014ba:	4b6b      	ldr	r3, [pc, #428]	; (8001668 <display_process+0x280>)
 80014bc:	f993 3000 	ldrsb.w	r3, [r3]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b6a      	ldr	r3, [pc, #424]	; (800166c <display_process+0x284>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	dd02      	ble.n	80014d0 <display_process+0xe8>
 80014ca:	4b69      	ldr	r3, [pc, #420]	; (8001670 <display_process+0x288>)
 80014cc:	22ff      	movs	r2, #255	; 0xff
 80014ce:	701a      	strb	r2, [r3, #0]
		//if  (enc2_tempC<enc2_dir)	 enc2_add=+(enc2_dir-enc2_tempC);   	//  fast but skips

		//if  (enc2_tempC>enc2_dir)	 enc2_add=-(enc2_tempC-enc2_dir);


		enc2_tempC=enc2_dir;	   // loop back until change
 80014d0:	4b66      	ldr	r3, [pc, #408]	; (800166c <display_process+0x284>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	b25a      	sxtb	r2, r3
 80014d6:	4b64      	ldr	r3, [pc, #400]	; (8001668 <display_process+0x280>)
 80014d8:	701a      	strb	r2, [r3, #0]
		if ((enc_out1>=0)  &&  (enc_out1<=menu_title_count))    {enc_out1=enc_out1+enc2_add;}   // count up or down within limits
 80014da:	4b6b      	ldr	r3, [pc, #428]	; (8001688 <display_process+0x2a0>)
 80014dc:	f993 3000 	ldrsb.w	r3, [r3]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	db14      	blt.n	800150e <display_process+0x126>
 80014e4:	4b68      	ldr	r3, [pc, #416]	; (8001688 <display_process+0x2a0>)
 80014e6:	f993 3000 	ldrsb.w	r3, [r3]
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b67      	ldr	r3, [pc, #412]	; (800168c <display_process+0x2a4>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dc0c      	bgt.n	800150e <display_process+0x126>
 80014f4:	4b64      	ldr	r3, [pc, #400]	; (8001688 <display_process+0x2a0>)
 80014f6:	f993 3000 	ldrsb.w	r3, [r3]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	4b5c      	ldr	r3, [pc, #368]	; (8001670 <display_process+0x288>)
 80014fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4413      	add	r3, r2
 8001506:	b2db      	uxtb	r3, r3
 8001508:	b25a      	sxtb	r2, r3
 800150a:	4b5f      	ldr	r3, [pc, #380]	; (8001688 <display_process+0x2a0>)
 800150c:	701a      	strb	r2, [r3, #0]
		if (enc_out1<0)  {  enc_out1=0; }
 800150e:	4b5e      	ldr	r3, [pc, #376]	; (8001688 <display_process+0x2a0>)
 8001510:	f993 3000 	ldrsb.w	r3, [r3]
 8001514:	2b00      	cmp	r3, #0
 8001516:	da02      	bge.n	800151e <display_process+0x136>
 8001518:	4b5b      	ldr	r3, [pc, #364]	; (8001688 <display_process+0x2a0>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
		if (enc_out1>menu_title_count) enc_out1=menu_title_count;
 800151e:	4b5a      	ldr	r3, [pc, #360]	; (8001688 <display_process+0x2a0>)
 8001520:	f993 3000 	ldrsb.w	r3, [r3]
 8001524:	461a      	mov	r2, r3
 8001526:	4b59      	ldr	r3, [pc, #356]	; (800168c <display_process+0x2a4>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	dd04      	ble.n	8001538 <display_process+0x150>
 800152e:	4b57      	ldr	r3, [pc, #348]	; (800168c <display_process+0x2a4>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b25a      	sxtb	r2, r3
 8001534:	4b54      	ldr	r3, [pc, #336]	; (8001688 <display_process+0x2a0>)
 8001536:	701a      	strb	r2, [r3, #0]
		enc2_add=2;
 8001538:	4b4d      	ldr	r3, [pc, #308]	; (8001670 <display_process+0x288>)
 800153a:	2202      	movs	r2, #2
 800153c:	701a      	strb	r2, [r3, #0]
	}


	if ((disp_stepper==0) && (enc2_add==2))			// skip if no input for enc2 , also maybe wait till enc2 stopped moving
 800153e:	4b4d      	ldr	r3, [pc, #308]	; (8001674 <display_process+0x28c>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d144      	bne.n	80015d0 <display_process+0x1e8>
 8001546:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <display_process+0x288>)
 8001548:	f993 3000 	ldrsb.w	r3, [r3]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d13f      	bne.n	80015d0 <display_process+0x1e8>
	{



	uint8_t crap_hold9=menu_title_lut[enc_out1]>>8;   // look up up menu_titles_final
 8001550:	4b4d      	ldr	r3, [pc, #308]	; (8001688 <display_process+0x2a0>)
 8001552:	f993 3000 	ldrsb.w	r3, [r3]
 8001556:	461a      	mov	r2, r3
 8001558:	4b4d      	ldr	r3, [pc, #308]	; (8001690 <display_process+0x2a8>)
 800155a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800155e:	0a1b      	lsrs	r3, r3, #8
 8001560:	b29b      	uxth	r3, r3
 8001562:	71fb      	strb	r3, [r7, #7]
	// fetch values for last line or cursor

	 memcpy(default_menu3+112, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 8001564:	484b      	ldr	r0, [pc, #300]	; (8001694 <display_process+0x2ac>)
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4a4b      	ldr	r2, [pc, #300]	; (8001698 <display_process+0x2b0>)
 800156c:	4413      	add	r3, r2
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2208      	movs	r2, #8
 8001572:	4619      	mov	r1, r3
 8001574:	f008 f984 	bl	8009880 <memcpy>
	 memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4a46      	ldr	r2, [pc, #280]	; (8001698 <display_process+0x2b0>)
 800157e:	4413      	add	r3, r2
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4b46      	ldr	r3, [pc, #280]	; (800169c <display_process+0x2b4>)
 8001584:	6810      	ldr	r0, [r2, #0]
 8001586:	6851      	ldr	r1, [r2, #4]
 8001588:	c303      	stmia	r3!, {r0, r1}

	 char temp_char[]="  ";
 800158a:	4a45      	ldr	r2, [pc, #276]	; (80016a0 <display_process+0x2b8>)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	4611      	mov	r1, r2
 8001592:	8019      	strh	r1, [r3, #0]
 8001594:	3302      	adds	r3, #2
 8001596:	0c12      	lsrs	r2, r2, #16
 8001598:	701a      	strb	r2, [r3, #0]
	 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 800159a:	4b3b      	ldr	r3, [pc, #236]	; (8001688 <display_process+0x2a0>)
 800159c:	f993 3000 	ldrsb.w	r3, [r3]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <display_process+0x2bc>)
 80015a6:	4413      	add	r3, r2
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	80bb      	strh	r3, [r7, #4]
	 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4618      	mov	r0, r3
 80015b2:	f008 f937 	bl	8009824 <atoi>
 80015b6:	4603      	mov	r3, r0
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b3b      	ldr	r3, [pc, #236]	; (80016a8 <display_process+0x2c0>)
 80015bc:	701a      	strb	r2, [r3, #0]
	 menu_index_in=menu_index_in&15;  //for now , needs another limiter
 80015be:	4b3a      	ldr	r3, [pc, #232]	; (80016a8 <display_process+0x2c0>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	4b37      	ldr	r3, [pc, #220]	; (80016a8 <display_process+0x2c0>)
 80015ca:	701a      	strb	r2, [r3, #0]

	 menu_vars();		//test  for vars ok
 80015cc:	f7ff fabc 	bl	8000b48 <menu_vars>

	    // grab value on ptr address , also write first char , ok

	}

	if ((disp_stepper==0) || (disp_stepper==1))   // repeat first character
 80015d0:	4b28      	ldr	r3, [pc, #160]	; (8001674 <display_process+0x28c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <display_process+0x1f8>
 80015d8:	4b26      	ldr	r3, [pc, #152]	; (8001674 <display_process+0x28c>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d12b      	bne.n	8001638 <display_process+0x250>
	{ init_b= menu_title_lut[enc_out1]&127;    // max 127 for now , max is two pages
 80015e0:	4b29      	ldr	r3, [pc, #164]	; (8001688 <display_process+0x2a0>)
 80015e2:	f993 3000 	ldrsb.w	r3, [r3]
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b29      	ldr	r3, [pc, #164]	; (8001690 <display_process+0x2a8>)
 80015ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80015ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	4b20      	ldr	r3, [pc, #128]	; (8001678 <display_process+0x290>)
 80015f6:	801a      	strh	r2, [r3, #0]

	lcd_out3=*menu_vars_var;
 80015f8:	4b22      	ldr	r3, [pc, #136]	; (8001684 <display_process+0x29c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <display_process+0x2c4>)
 8001602:	801a      	strh	r2, [r3, #0]
	default_menu3[init_b]=((lcd_out3&255)>>4)+48; lcd_temp=lcd_out3&127; enc_dir=lcd_temp;       } // force enc_dir
 8001604:	4b29      	ldr	r3, [pc, #164]	; (80016ac <display_process+0x2c4>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	111b      	asrs	r3, r3, #4
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f003 030f 	and.w	r3, r3, #15
 8001610:	b2db      	uxtb	r3, r3
 8001612:	4a19      	ldr	r2, [pc, #100]	; (8001678 <display_process+0x290>)
 8001614:	8812      	ldrh	r2, [r2, #0]
 8001616:	3330      	adds	r3, #48	; 0x30
 8001618:	b2d9      	uxtb	r1, r3
 800161a:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <display_process+0x2c8>)
 800161c:	5499      	strb	r1, [r3, r2]
 800161e:	4b23      	ldr	r3, [pc, #140]	; (80016ac <display_process+0x2c4>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <display_process+0x294>)
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	4b13      	ldr	r3, [pc, #76]	; (800167c <display_process+0x294>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b21a      	sxth	r2, r3
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <display_process+0x298>)
 8001636:	801a      	strh	r2, [r3, #0]



	if (disp_stepper==11) default_menu3[119]=menu_index_list[enc_out1<<1];   // index char 0-10 normally
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <display_process+0x28c>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b0b      	cmp	r3, #11
 800163e:	d108      	bne.n	8001652 <display_process+0x26a>
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <display_process+0x2a0>)
 8001642:	f993 3000 	ldrsb.w	r3, [r3]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4a16      	ldr	r2, [pc, #88]	; (80016a4 <display_process+0x2bc>)
 800164a:	5cd2      	ldrb	r2, [r2, r3]
 800164c:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <display_process+0x2c8>)
 800164e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	if (disp_stepper==12) default_menu3[120]=menu_index_list[(enc_out1<<1)+1];
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <display_process+0x28c>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b0c      	cmp	r3, #12
 8001658:	d131      	bne.n	80016be <display_process+0x2d6>
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <display_process+0x2a0>)
 800165c:	f993 3000 	ldrsb.w	r3, [r3]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	3301      	adds	r3, #1
 8001664:	e026      	b.n	80016b4 <display_process+0x2cc>
 8001666:	bf00      	nop
 8001668:	200001b4 	.word	0x200001b4
 800166c:	200020c2 	.word	0x200020c2
 8001670:	200001b5 	.word	0x200001b5
 8001674:	200001b6 	.word	0x200001b6
 8001678:	200020d2 	.word	0x200020d2
 800167c:	20003baa 	.word	0x20003baa
 8001680:	200020c4 	.word	0x200020c4
 8001684:	20003b10 	.word	0x20003b10
 8001688:	20000228 	.word	0x20000228
 800168c:	20003b0a 	.word	0x20003b0a
 8001690:	20003a88 	.word	0x20003a88
 8001694:	2000047c 	.word	0x2000047c
 8001698:	200001bc 	.word	0x200001bc
 800169c:	20003b14 	.word	0x20003b14
 80016a0:	08009b7c 	.word	0x08009b7c
 80016a4:	20003b20 	.word	0x20003b20
 80016a8:	20003b1c 	.word	0x20003b1c
 80016ac:	20002a34 	.word	0x20002a34
 80016b0:	2000040c 	.word	0x2000040c
 80016b4:	4a19      	ldr	r2, [pc, #100]	; (800171c <display_process+0x334>)
 80016b6:	5cd2      	ldrb	r2, [r2, r3]
 80016b8:	4b19      	ldr	r3, [pc, #100]	; (8001720 <display_process+0x338>)
 80016ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	//if (disp_stepper==13) default_menu3[122]=47;

	if (disp_stepper==1)  gfx_send_cursor=(init_b>>4)&7 ;   //send cursor line
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <display_process+0x33c>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d109      	bne.n	80016da <display_process+0x2f2>
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <display_process+0x340>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <display_process+0x344>)
 80016d8:	701a      	strb	r2, [r3, #0]
	if (disp_stepper==2)  {
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <display_process+0x33c>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d117      	bne.n	8001712 <display_process+0x32a>

		default_menu3[125]=potSource[380]+48; default_menu3[126]=potSource[381]+48; default_menu3[127]=potSource[382]+48; }  // write this straight after start ,ok
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <display_process+0x348>)
 80016e4:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80016e8:	3330      	adds	r3, #48	; 0x30
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <display_process+0x338>)
 80016ee:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <display_process+0x348>)
 80016f4:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 80016f8:	3330      	adds	r3, #48	; 0x30
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <display_process+0x338>)
 80016fe:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <display_process+0x348>)
 8001704:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 8001708:	3330      	adds	r3, #48	; 0x30
 800170a:	b2da      	uxtb	r2, r3
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <display_process+0x338>)
 800170e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f

	}   // end o void
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20003b20 	.word	0x20003b20
 8001720:	2000040c 	.word	0x2000040c
 8001724:	200001b6 	.word	0x200001b6
 8001728:	200020d2 	.word	0x200020d2
 800172c:	200029ff 	.word	0x200029ff
 8001730:	20000ab4 	.word	0x20000ab4

08001734 <displayBuffer2>:





void displayBuffer2 (void){       // use only writing characters  ,nothing more  , init_b for selecting location
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
														//when scrolling maybe use this only until  settled


	uint8_t d_count;
uint16_t init_x=(init_b & 15)+2 ;    // +2 important  0-15 hor
 800173a:	4b3b      	ldr	r3, [pc, #236]	; (8001828 <displayBuffer2+0xf4>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	b29b      	uxth	r3, r3
 8001744:	3302      	adds	r3, #2
 8001746:	81bb      	strh	r3, [r7, #12]
uint8_t init_x2=(init_b>>4)<<3 ;  // 0-64  character address in gfx
 8001748:	4b37      	ldr	r3, [pc, #220]	; (8001828 <displayBuffer2+0xf4>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	b29b      	uxth	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	72fb      	strb	r3, [r7, #11]
uint16_t init_y=((init_x2)*18)+init_x;   //   works ok
 8001756:	7afb      	ldrb	r3, [r7, #11]
 8001758:	b29b      	uxth	r3, r3
 800175a:	461a      	mov	r2, r3
 800175c:	00d2      	lsls	r2, r2, #3
 800175e:	4413      	add	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	b29a      	uxth	r2, r3
 8001764:	89bb      	ldrh	r3, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	813b      	strh	r3, [r7, #8]
uint16_t store_x;


store_c= (default_menu3[init_b]-47)&127 ;    // grab char from mem
 800176a:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <displayBuffer2+0xf4>)
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	4b2e      	ldr	r3, [pc, #184]	; (800182c <displayBuffer2+0xf8>)
 8001772:	5c9b      	ldrb	r3, [r3, r2]
 8001774:	b29b      	uxth	r3, r3
 8001776:	3b2f      	subs	r3, #47	; 0x2f
 8001778:	b29b      	uxth	r3, r3
 800177a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800177e:	b29a      	uxth	r2, r3
 8001780:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <displayBuffer2+0xfc>)
 8001782:	801a      	strh	r2, [r3, #0]

store_x=(store_c*8);  // i line characters , might shrink it and use extr for other  visuals , old code but keep for now
 8001784:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <displayBuffer2+0xfc>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	80fb      	strh	r3, [r7, #6]


		if ( (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 800178c:	4b29      	ldr	r3, [pc, #164]	; (8001834 <displayBuffer2+0x100>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d11a      	bne.n	80017ca <displayBuffer2+0x96>
			for (d_count=0;d_count<8;d_count++){
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	e013      	b.n	80017c2 <displayBuffer2+0x8e>
				gfx_ram[init_y+(d_count*18) ]= gfx_char[d_count+store_x]^127; //write character to ram ,should be elsewhere , blank is correct
 800179a:	7bfa      	ldrb	r2, [r7, #15]
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	4413      	add	r3, r2
 80017a0:	4a25      	ldr	r2, [pc, #148]	; (8001838 <displayBuffer2+0x104>)
 80017a2:	5cd1      	ldrb	r1, [r2, r3]
 80017a4:	8938      	ldrh	r0, [r7, #8]
 80017a6:	7bfa      	ldrb	r2, [r7, #15]
 80017a8:	4613      	mov	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4413      	add	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4403      	add	r3, r0
 80017b2:	f081 027f 	eor.w	r2, r1, #127	; 0x7f
 80017b6:	b2d1      	uxtb	r1, r2
 80017b8:	4a20      	ldr	r2, [pc, #128]	; (800183c <displayBuffer2+0x108>)
 80017ba:	54d1      	strb	r1, [r2, r3]
			for (d_count=0;d_count<8;d_count++){
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	3301      	adds	r3, #1
 80017c0:	73fb      	strb	r3, [r7, #15]
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	2b07      	cmp	r3, #7
 80017c6:	d9e8      	bls.n	800179a <displayBuffer2+0x66>
 80017c8:	e016      	b.n	80017f8 <displayBuffer2+0xc4>
			}
		else for (d_count=0;d_count<8;d_count++){
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]
 80017ce:	e010      	b.n	80017f2 <displayBuffer2+0xbe>
			gfx_ram[init_y+(d_count*18) ]= gfx_char[d_count+store_x]; //write character to ram ,should be elsewhere , seems affected by later stufff
 80017d0:	7bfa      	ldrb	r2, [r7, #15]
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	18d1      	adds	r1, r2, r3
 80017d6:	8938      	ldrh	r0, [r7, #8]
 80017d8:	7bfa      	ldrb	r2, [r7, #15]
 80017da:	4613      	mov	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4413      	add	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4403      	add	r3, r0
 80017e4:	4a14      	ldr	r2, [pc, #80]	; (8001838 <displayBuffer2+0x104>)
 80017e6:	5c51      	ldrb	r1, [r2, r1]
 80017e8:	4a14      	ldr	r2, [pc, #80]	; (800183c <displayBuffer2+0x108>)
 80017ea:	54d1      	strb	r1, [r2, r3]
		else for (d_count=0;d_count<8;d_count++){
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	3301      	adds	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	2b07      	cmp	r3, #7
 80017f6:	d9eb      	bls.n	80017d0 <displayBuffer2+0x9c>
		}



if (disp_stepper==13) {disp_stepper=0;enc2_add=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <displayBuffer2+0x100>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b0d      	cmp	r3, #13
 80017fe:	d106      	bne.n	800180e <displayBuffer2+0xda>
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <displayBuffer2+0x100>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <displayBuffer2+0x10c>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]


}    // displayBuffer2
 800180c:	e005      	b.n	800181a <displayBuffer2+0xe6>
if (disp_stepper==13) {disp_stepper=0;enc2_add=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <displayBuffer2+0x100>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	3301      	adds	r3, #1
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <displayBuffer2+0x100>)
 8001818:	701a      	strb	r2, [r3, #0]
}    // displayBuffer2
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	200020d2 	.word	0x200020d2
 800182c:	2000040c 	.word	0x2000040c
 8001830:	20000c4c 	.word	0x20000c4c
 8001834:	200001b6 	.word	0x200001b6
 8001838:	200004a4 	.word	0x200004a4
 800183c:	2000257c 	.word	0x2000257c
 8001840:	200001b5 	.word	0x200001b5
 8001844:	00000000 	.word	0x00000000

08001848 <sampling>:

void sampling(void){						// 330 atm or 8.5ms
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 800184e:	af00      	add	r7, sp, #0


uint8_t mask_i;


bank_write=0;
 8001850:	4b93      	ldr	r3, [pc, #588]	; (8001aa0 <sampling+0x258>)
 8001852:	2200      	movs	r2, #0
 8001854:	801a      	strh	r2, [r3, #0]
//time_proc=0;   //millis

//adc_read();
//uint16_t isr_tempo=isrMask; // get tempo value
sample_pointB=sample_pointD;
 8001856:	4b93      	ldr	r3, [pc, #588]	; (8001aa4 <sampling+0x25c>)
 8001858:	881a      	ldrh	r2, [r3, #0]
 800185a:	4b93      	ldr	r3, [pc, #588]	; (8001aa8 <sampling+0x260>)
 800185c:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 800185e:	2300      	movs	r3, #0
 8001860:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001864:	f102 021c 	add.w	r2, r2, #28
 8001868:	8013      	strh	r3, [r2, #0]

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 800186a:	4b90      	ldr	r3, [pc, #576]	; (8001aac <sampling+0x264>)
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	461a      	mov	r2, r3
 8001870:	4b8f      	ldr	r3, [pc, #572]	; (8001ab0 <sampling+0x268>)
 8001872:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001876:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800187a:	f102 020c 	add.w	r2, r2, #12
 800187e:	8013      	strh	r3, [r2, #0]

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s
float freq_temp;	// (1/(bpm/60)) /0.00045712=tempo count ie 1093.8 for 120bpm
float freq2_temp;

float tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 8001880:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001884:	f103 030c 	add.w	r3, r3, #12
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	da00      	bge.n	8001890 <sampling+0x48>
 800188e:	331f      	adds	r3, #31
 8001890:	115b      	asrs	r3, r3, #5
 8001892:	461a      	mov	r2, r3
 8001894:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001898:	fb93 f3f2 	sdiv	r3, r3, r2
 800189c:	ee07 3a90 	vmov	s15, r3
 80018a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80018a8:	f103 0308 	add.w	r3, r3, #8
 80018ac:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 80018b0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80018b4:	f103 0308 	add.w	r3, r3, #8
 80018b8:	ed93 7a00 	vldr	s14, [r3]
 80018bc:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8001ab4 <sampling+0x26c>
 80018c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80018c8:	f103 0308 	add.w	r3, r3, #8
 80018cc:	edc3 7a00 	vstr	s15, [r3]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 80018d0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80018d4:	f103 0318 	add.w	r3, r3, #24
 80018d8:	2244      	movs	r2, #68	; 0x44
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f007 ffdd 	bl	800989c <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 80018e2:	4b75      	ldr	r3, [pc, #468]	; (8001ab8 <sampling+0x270>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	801a      	strh	r2, [r3, #0]
 80018e8:	e00e      	b.n	8001908 <sampling+0xc0>
 80018ea:	4b73      	ldr	r3, [pc, #460]	; (8001ab8 <sampling+0x270>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80018f4:	443b      	add	r3, r7
 80018f6:	2200      	movs	r2, #0
 80018f8:	f843 2c68 	str.w	r2, [r3, #-104]
 80018fc:	4b6e      	ldr	r3, [pc, #440]	; (8001ab8 <sampling+0x270>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	b29a      	uxth	r2, r3
 8001904:	4b6c      	ldr	r3, [pc, #432]	; (8001ab8 <sampling+0x270>)
 8001906:	801a      	strh	r2, [r3, #0]
 8001908:	4b6b      	ldr	r3, [pc, #428]	; (8001ab8 <sampling+0x270>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	2b0f      	cmp	r3, #15
 800190e:	d9ec      	bls.n	80018ea <sampling+0xa2>

//lcd_out3=menu_page[1]; // still goes to 15

//lcd_out3=adc_values[0]+adc_values[1]+adc_values[2]; // 3 digit read out , works ok,, [2] works but thats it
//lcd_out3=lcd_out3+180;
potSource[380]=(lcd_out3/100);  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 8001910:	4b6a      	ldr	r3, [pc, #424]	; (8001abc <sampling+0x274>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	4a6a      	ldr	r2, [pc, #424]	; (8001ac0 <sampling+0x278>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	b29b      	uxth	r3, r3
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b68      	ldr	r3, [pc, #416]	; (8001ac4 <sampling+0x27c>)
 8001922:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
potSource[381]=((lcd_out3 %100)/10);		 // 0-160 to 0-10
 8001926:	4b65      	ldr	r3, [pc, #404]	; (8001abc <sampling+0x274>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	4a65      	ldr	r2, [pc, #404]	; (8001ac0 <sampling+0x278>)
 800192c:	fba2 1203 	umull	r1, r2, r2, r3
 8001930:	0952      	lsrs	r2, r2, #5
 8001932:	2164      	movs	r1, #100	; 0x64
 8001934:	fb01 f202 	mul.w	r2, r1, r2
 8001938:	1a9b      	subs	r3, r3, r2
 800193a:	b29b      	uxth	r3, r3
 800193c:	4a62      	ldr	r2, [pc, #392]	; (8001ac8 <sampling+0x280>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	08db      	lsrs	r3, r3, #3
 8001944:	b29b      	uxth	r3, r3
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b5e      	ldr	r3, [pc, #376]	; (8001ac4 <sampling+0x27c>)
 800194a:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
potSource[382]=(lcd_out3%10);
 800194e:	4b5b      	ldr	r3, [pc, #364]	; (8001abc <sampling+0x274>)
 8001950:	881a      	ldrh	r2, [r3, #0]
 8001952:	4b5d      	ldr	r3, [pc, #372]	; (8001ac8 <sampling+0x280>)
 8001954:	fba3 1302 	umull	r1, r3, r3, r2
 8001958:	08d9      	lsrs	r1, r3, #3
 800195a:	460b      	mov	r3, r1
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	b29b      	uxth	r3, r3
 8001966:	b2da      	uxtb	r2, r3
 8001968:	4b56      	ldr	r3, [pc, #344]	; (8001ac4 <sampling+0x27c>)
 800196a:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e



note_holdA=0;
 800196e:	4b57      	ldr	r3, [pc, #348]	; (8001acc <sampling+0x284>)
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]

//sample_Accu2=0;
//printf (adc_values[0]," ",adc_values[1]," ",adc_values[2]," ","crap \n");
// some good phasin and delays here
uint8_t cross_fade[2];
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 8001974:	4b56      	ldr	r3, [pc, #344]	; (8001ad0 <sampling+0x288>)
 8001976:	f507 5480 	add.w	r4, r7, #4096	; 0x1000
 800197a:	461d      	mov	r5, r3
 800197c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800197e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001980:	682b      	ldr	r3, [r5, #0]
 8001982:	7023      	strb	r3, [r4, #0]
adc_values[2]= 15; //force for now
 8001984:	4b53      	ldr	r3, [pc, #332]	; (8001ad4 <sampling+0x28c>)
 8001986:	220f      	movs	r2, #15
 8001988:	809a      	strh	r2, [r3, #4]
if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader
 800198a:	4b52      	ldr	r3, [pc, #328]	; (8001ad4 <sampling+0x28c>)
 800198c:	889b      	ldrh	r3, [r3, #4]
 800198e:	f003 0310 	and.w	r3, r3, #16
 8001992:	2b00      	cmp	r3, #0
 8001994:	d017      	beq.n	80019c6 <sampling+0x17e>
 8001996:	4b4f      	ldr	r3, [pc, #316]	; (8001ad4 <sampling+0x28c>)
 8001998:	889b      	ldrh	r3, [r3, #4]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80019a2:	443b      	add	r3, r7
 80019a4:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 80019a8:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80019b2:	f102 0215 	add.w	r2, r2, #21
 80019b6:	7013      	strb	r3, [r2, #0]
 80019b8:	237f      	movs	r3, #127	; 0x7f
 80019ba:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80019be:	f102 0216 	add.w	r2, r2, #22
 80019c2:	7013      	strb	r3, [r2, #0]
 80019c4:	e013      	b.n	80019ee <sampling+0x1a6>
 80019c6:	4b43      	ldr	r3, [pc, #268]	; (8001ad4 <sampling+0x28c>)
 80019c8:	889b      	ldrh	r3, [r3, #4]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80019d2:	443b      	add	r3, r7
 80019d4:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 80019d8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80019dc:	f102 0216 	add.w	r2, r2, #22
 80019e0:	7013      	strb	r3, [r2, #0]
 80019e2:	237f      	movs	r3, #127	; 0x7f
 80019e4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80019e8:	f102 0215 	add.w	r2, r2, #21
 80019ec:	7013      	strb	r3, [r2, #0]

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (ADSR[0].attack_trigger==0) {		adsr_att=(161-ADSR[0].attack ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 80019ee:	4b3a      	ldr	r3, [pc, #232]	; (8001ad8 <sampling+0x290>)
 80019f0:	791b      	ldrb	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d146      	bne.n	8001a84 <sampling+0x23c>
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <sampling+0x290>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fe66 	bl	80006d0 <__aeabi_i2d>
 8001a04:	a322      	add	r3, pc, #136	; (adr r3, 8001a90 <sampling+0x248>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	f7fe fbe5 	bl	80001d8 <__aeabi_dmul>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f7fe fec5 	bl	80007a4 <__aeabi_d2f>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4a2f      	ldr	r2, [pc, #188]	; (8001adc <sampling+0x294>)
 8001a1e:	6013      	str	r3, [r2, #0]
ADSR[0].sustain_data=((161-ADSR[0].decay)*0.01);  // length and level this is ok is running 1/16 ish				ADSR[0].attack_data=ADSR[0].attack_data-ADSR[0].sustain_data;
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <sampling+0x290>)
 8001a22:	785b      	ldrb	r3, [r3, #1]
 8001a24:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fe51 	bl	80006d0 <__aeabi_i2d>
 8001a2e:	a31a      	add	r3, pc, #104	; (adr r3, 8001a98 <sampling+0x250>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe fbd0 	bl	80001d8 <__aeabi_dmul>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7fe feb0 	bl	80007a4 <__aeabi_d2f>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4a24      	ldr	r2, [pc, #144]	; (8001ad8 <sampling+0x290>)
 8001a48:	6113      	str	r3, [r2, #16]
adsr_att=adsr_att*adsr_att;
 8001a4a:	4b24      	ldr	r3, [pc, #144]	; (8001adc <sampling+0x294>)
 8001a4c:	ed93 7a00 	vldr	s14, [r3]
 8001a50:	4b22      	ldr	r3, [pc, #136]	; (8001adc <sampling+0x294>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <sampling+0x294>)
 8001a5c:	edc3 7a00 	vstr	s15, [r3]
ADSR[0].sustain_data=ADSR[0].sustain_data*ADSR[0].sustain_data;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <sampling+0x290>)
 8001a62:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <sampling+0x290>)
 8001a68:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <sampling+0x290>)
 8001a72:	edc3 7a04 	vstr	s15, [r3, #16]

ADSR[0].attack_trigger=1;
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <sampling+0x290>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	711a      	strb	r2, [r3, #4]
ADSR[0].attack_data=0;
 8001a7c:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <sampling+0x290>)
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
}

//float ADSR[0].buffer_temp;    // adsr

for (i=0;i<256;i++) {
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <sampling+0x270>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	801a      	strh	r2, [r3, #0]
 8001a8a:	e0e9      	b.n	8001c60 <sampling+0x418>
 8001a8c:	f3af 8000 	nop.w
 8001a90:	47ae147b 	.word	0x47ae147b
 8001a94:	3f947ae1 	.word	0x3f947ae1
 8001a98:	47ae147b 	.word	0x47ae147b
 8001a9c:	3f847ae1 	.word	0x3f847ae1
 8001aa0:	200001b2 	.word	0x200001b2
 8001aa4:	2000147a 	.word	0x2000147a
 8001aa8:	20000c6e 	.word	0x20000c6e
 8001aac:	20003a54 	.word	0x20003a54
 8001ab0:	20002438 	.word	0x20002438
 8001ab4:	42a00000 	.word	0x42a00000
 8001ab8:	20000c70 	.word	0x20000c70
 8001abc:	20002a34 	.word	0x20002a34
 8001ac0:	51eb851f 	.word	0x51eb851f
 8001ac4:	20000ab4 	.word	0x20000ab4
 8001ac8:	cccccccd 	.word	0xcccccccd
 8001acc:	2000209c 	.word	0x2000209c
 8001ad0:	08009b80 	.word	0x08009b80
 8001ad4:	200001a8 	.word	0x200001a8
 8001ad8:	20002f58 	.word	0x20002f58
 8001adc:	20002a30 	.word	0x20002a30

	if     (ADSR[0].attack_data<1000)    																		{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=ADSR[0].attack_data; } //0-1000
 8001ae0:	4b85      	ldr	r3, [pc, #532]	; (8001cf8 <sampling+0x4b0>)
 8001ae2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ae6:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8001cfc <sampling+0x4b4>
 8001aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af2:	d50e      	bpl.n	8001b12 <sampling+0x2ca>
 8001af4:	4b80      	ldr	r3, [pc, #512]	; (8001cf8 <sampling+0x4b0>)
 8001af6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001afa:	4b81      	ldr	r3, [pc, #516]	; (8001d00 <sampling+0x4b8>)
 8001afc:	edd3 7a00 	vldr	s15, [r3]
 8001b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b04:	4b7c      	ldr	r3, [pc, #496]	; (8001cf8 <sampling+0x4b0>)
 8001b06:	edc3 7a02 	vstr	s15, [r3, #8]
 8001b0a:	4b7b      	ldr	r3, [pc, #492]	; (8001cf8 <sampling+0x4b0>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	4a7a      	ldr	r2, [pc, #488]	; (8001cf8 <sampling+0x4b0>)
 8001b10:	6193      	str	r3, [r2, #24]
	 if  ((ADSR[0].attack_data<1500)  && (ADSR[0].attack_data>999))  					{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=1500-(ADSR[0].attack_data-500);  }  // 1000-500
 8001b12:	4b79      	ldr	r3, [pc, #484]	; (8001cf8 <sampling+0x4b0>)
 8001b14:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b18:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001d04 <sampling+0x4bc>
 8001b1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b24:	d522      	bpl.n	8001b6c <sampling+0x324>
 8001b26:	4b74      	ldr	r3, [pc, #464]	; (8001cf8 <sampling+0x4b0>)
 8001b28:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b2c:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001d08 <sampling+0x4c0>
 8001b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b38:	dd18      	ble.n	8001b6c <sampling+0x324>
 8001b3a:	4b6f      	ldr	r3, [pc, #444]	; (8001cf8 <sampling+0x4b0>)
 8001b3c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b40:	4b6f      	ldr	r3, [pc, #444]	; (8001d00 <sampling+0x4b8>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4a:	4b6b      	ldr	r3, [pc, #428]	; (8001cf8 <sampling+0x4b0>)
 8001b4c:	edc3 7a02 	vstr	s15, [r3, #8]
 8001b50:	4b69      	ldr	r3, [pc, #420]	; (8001cf8 <sampling+0x4b0>)
 8001b52:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b56:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001d0c <sampling+0x4c4>
 8001b5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b5e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001d04 <sampling+0x4bc>
 8001b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b66:	4b64      	ldr	r3, [pc, #400]	; (8001cf8 <sampling+0x4b0>)
 8001b68:	edc3 7a06 	vstr	s15, [r3, #24]
	 if ((ADSR[0].attack_data>1499)   && 		(ADSR[0].attack_data<2000)) 			{		ADSR[0].buffer_temp=500; 	ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data;}
 8001b6c:	4b62      	ldr	r3, [pc, #392]	; (8001cf8 <sampling+0x4b0>)
 8001b6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b72:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001d10 <sampling+0x4c8>
 8001b76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7e:	dd17      	ble.n	8001bb0 <sampling+0x368>
 8001b80:	4b5d      	ldr	r3, [pc, #372]	; (8001cf8 <sampling+0x4b0>)
 8001b82:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b86:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001d14 <sampling+0x4cc>
 8001b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b92:	d50d      	bpl.n	8001bb0 <sampling+0x368>
 8001b94:	4b58      	ldr	r3, [pc, #352]	; (8001cf8 <sampling+0x4b0>)
 8001b96:	4a60      	ldr	r2, [pc, #384]	; (8001d18 <sampling+0x4d0>)
 8001b98:	619a      	str	r2, [r3, #24]
 8001b9a:	4b57      	ldr	r3, [pc, #348]	; (8001cf8 <sampling+0x4b0>)
 8001b9c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ba0:	4b55      	ldr	r3, [pc, #340]	; (8001cf8 <sampling+0x4b0>)
 8001ba2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001baa:	4b53      	ldr	r3, [pc, #332]	; (8001cf8 <sampling+0x4b0>)
 8001bac:	edc3 7a02 	vstr	s15, [r3, #8]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)					{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
 8001bb0:	4b51      	ldr	r3, [pc, #324]	; (8001cf8 <sampling+0x4b0>)
 8001bb2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bb6:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001d1c <sampling+0x4d4>
 8001bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc2:	dd1e      	ble.n	8001c02 <sampling+0x3ba>
 8001bc4:	4b4c      	ldr	r3, [pc, #304]	; (8001cf8 <sampling+0x4b0>)
 8001bc6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bca:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001d20 <sampling+0x4d8>
 8001bce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd6:	d514      	bpl.n	8001c02 <sampling+0x3ba>
 8001bd8:	4b47      	ldr	r3, [pc, #284]	; (8001cf8 <sampling+0x4b0>)
 8001bda:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bde:	4b46      	ldr	r3, [pc, #280]	; (8001cf8 <sampling+0x4b0>)
 8001be0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be8:	4b43      	ldr	r3, [pc, #268]	; (8001cf8 <sampling+0x4b0>)
 8001bea:	edc3 7a02 	vstr	s15, [r3, #8]
 8001bee:	4b42      	ldr	r3, [pc, #264]	; (8001cf8 <sampling+0x4b0>)
 8001bf0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bf4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001d20 <sampling+0x4d8>
 8001bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bfc:	4b3e      	ldr	r3, [pc, #248]	; (8001cf8 <sampling+0x4b0>)
 8001bfe:	edc3 7a06 	vstr	s15, [r3, #24]
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END
 8001c02:	4b3d      	ldr	r3, [pc, #244]	; (8001cf8 <sampling+0x4b0>)
 8001c04:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c08:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001d24 <sampling+0x4dc>
 8001c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c14:	dd06      	ble.n	8001c24 <sampling+0x3dc>
 8001c16:	4b38      	ldr	r3, [pc, #224]	; (8001cf8 <sampling+0x4b0>)
 8001c18:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c1c:	619a      	str	r2, [r3, #24]
 8001c1e:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <sampling+0x4b0>)
 8001c20:	4a41      	ldr	r2, [pc, #260]	; (8001d28 <sampling+0x4e0>)
 8001c22:	609a      	str	r2, [r3, #8]

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
 8001c24:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <sampling+0x4b0>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fd63 	bl	80006f4 <__aeabi_f2d>
 8001c2e:	a330      	add	r3, pc, #192	; (adr r3, 8001cf0 <sampling+0x4a8>)
 8001c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c34:	f7fe fad0 	bl	80001d8 <__aeabi_dmul>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	493b      	ldr	r1, [pc, #236]	; (8001d2c <sampling+0x4e4>)
 8001c3e:	8809      	ldrh	r1, [r1, #0]
 8001c40:	460c      	mov	r4, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7fe fdad 	bl	80007a4 <__aeabi_d2f>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	4938      	ldr	r1, [pc, #224]	; (8001d30 <sampling+0x4e8>)
 8001c4e:	00a3      	lsls	r3, r4, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	601a      	str	r2, [r3, #0]
for (i=0;i<256;i++) {
 8001c54:	4b35      	ldr	r3, [pc, #212]	; (8001d2c <sampling+0x4e4>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <sampling+0x4e4>)
 8001c5e:	801a      	strh	r2, [r3, #0]
 8001c60:	4b32      	ldr	r3, [pc, #200]	; (8001d2c <sampling+0x4e4>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	2bff      	cmp	r3, #255	; 0xff
 8001c66:	f67f af3b 	bls.w	8001ae0 <sampling+0x298>


///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8001c6a:	4b30      	ldr	r3, [pc, #192]	; (8001d2c <sampling+0x4e4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	801a      	strh	r2, [r3, #0]
 8001c70:	e39c      	b.n	80023ac <sampling+0xb64>

	i_total=i+sample_pointB;
 8001c72:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <sampling+0x4e4>)
 8001c74:	881a      	ldrh	r2, [r3, #0]
 8001c76:	4b2f      	ldr	r3, [pc, #188]	; (8001d34 <sampling+0x4ec>)
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001c80:	f102 0202 	add.w	r2, r2, #2
 8001c84:	8013      	strh	r3, [r2, #0]
	i_frac=i>>6;   //   0-8 steps
 8001c86:	4b29      	ldr	r3, [pc, #164]	; (8001d2c <sampling+0x4e4>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	099b      	lsrs	r3, r3, #6
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <sampling+0x4f0>)
 8001c92:	701a      	strb	r2, [r3, #0]
	note_plain=seq.notes1[seq.pos & 7 ];
 8001c94:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <sampling+0x4f4>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	4a27      	ldr	r2, [pc, #156]	; (8001d3c <sampling+0x4f4>)
 8001c9e:	4413      	add	r3, r2
 8001ca0:	789b      	ldrb	r3, [r3, #2]
 8001ca2:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001ca6:	7013      	strb	r3, [r2, #0]
potValues[i&255]=potSource[i&255]>>4; //just to update values
 8001ca8:	4b20      	ldr	r3, [pc, #128]	; (8001d2c <sampling+0x4e4>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4a24      	ldr	r2, [pc, #144]	; (8001d40 <sampling+0x4f8>)
 8001cb0:	5cd2      	ldrb	r2, [r2, r3]
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <sampling+0x4e4>)
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	0912      	lsrs	r2, r2, #4
 8001cba:	b2d1      	uxtb	r1, r2
 8001cbc:	4a21      	ldr	r2, [pc, #132]	; (8001d44 <sampling+0x4fc>)
 8001cbe:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 8001cc0:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <sampling+0x500>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001cc8:	f102 020c 	add.w	r2, r2, #12
 8001ccc:	8812      	ldrh	r2, [r2, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d83e      	bhi.n	8001d50 <sampling+0x508>
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <sampling+0x504>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <sampling+0x504>)
 8001ce2:	801a      	strh	r2, [r3, #0]
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <sampling+0x500>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	801a      	strh	r2, [r3, #0]
 8001cea:	e037      	b.n	8001d5c <sampling+0x514>
 8001cec:	f3af 8000 	nop.w
 8001cf0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001cf4:	3f50624d 	.word	0x3f50624d
 8001cf8:	20002f58 	.word	0x20002f58
 8001cfc:	447a0000 	.word	0x447a0000
 8001d00:	20002a30 	.word	0x20002a30
 8001d04:	44bb8000 	.word	0x44bb8000
 8001d08:	4479c000 	.word	0x4479c000
 8001d0c:	43fa0000 	.word	0x43fa0000
 8001d10:	44bb6000 	.word	0x44bb6000
 8001d14:	44fa0000 	.word	0x44fa0000
 8001d18:	43fa0000 	.word	0x43fa0000
 8001d1c:	44f9e000 	.word	0x44f9e000
 8001d20:	451c4000 	.word	0x451c4000
 8001d24:	453b8000 	.word	0x453b8000
 8001d28:	457a0000 	.word	0x457a0000
 8001d2c:	20000c70 	.word	0x20000c70
 8001d30:	20001c84 	.word	0x20001c84
 8001d34:	20000c6e 	.word	0x20000c6e
 8001d38:	200021dc 	.word	0x200021dc
 8001d3c:	20003a54 	.word	0x20003a54
 8001d40:	20000ab4 	.word	0x20000ab4
 8001d44:	20000934 	.word	0x20000934
 8001d48:	200020c6 	.word	0x200020c6
 8001d4c:	2000209a 	.word	0x2000209a
 8001d50:	4ba4      	ldr	r3, [pc, #656]	; (8001fe4 <sampling+0x79c>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	3301      	adds	r3, #1
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	4ba2      	ldr	r3, [pc, #648]	; (8001fe4 <sampling+0x79c>)
 8001d5a:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001d62:	f102 021c 	add.w	r2, r2, #28
 8001d66:	8013      	strh	r3, [r2, #0]
	if ((next_isr>>4) != (seq.pos)) { 					// next note step 140ms
 8001d68:	4b9f      	ldr	r3, [pc, #636]	; (8001fe8 <sampling+0x7a0>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	4b9e      	ldr	r3, [pc, #632]	; (8001fec <sampling+0x7a4>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d00c      	beq.n	8001d94 <sampling+0x54c>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8001d7a:	4b9b      	ldr	r3, [pc, #620]	; (8001fe8 <sampling+0x7a0>)
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	4b99      	ldr	r3, [pc, #612]	; (8001fec <sampling+0x7a4>)
 8001d86:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001d8e:	f102 021c 	add.w	r2, r2, #28
 8001d92:	8013      	strh	r3, [r2, #0]
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos
 8001d94:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001d98:	f103 031c 	add.w	r3, r3, #28
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 8104 	beq.w	8001fac <sampling+0x764>
	{
	//printf("\n");//	ITM_SendChar( 65 );   //  Send ASCII code 65 = ’A’
	//printf("%d" ,note[].pitch[10]);


		note[2].timeshift=(adc_values[0]>>2)&15; //assigned pots to start of loopers 0-16,works
 8001da4:	4b92      	ldr	r3, [pc, #584]	; (8001ff0 <sampling+0x7a8>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	4b8f      	ldr	r3, [pc, #572]	; (8001ff4 <sampling+0x7ac>)
 8001db6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		note[3].timeshift=(adc_values[1]>>2)&15;
 8001dba:	4b8d      	ldr	r3, [pc, #564]	; (8001ff0 <sampling+0x7a8>)
 8001dbc:	885b      	ldrh	r3, [r3, #2]
 8001dbe:	089b      	lsrs	r3, r3, #2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b8a      	ldr	r3, [pc, #552]	; (8001ff4 <sampling+0x7ac>)
 8001dcc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36


		seq.loop[2]=((note[2].timeshift+(seq.pos&7))&15); // calc  8 note loop positions sets looping point in sequence
 8001dd0:	4b88      	ldr	r3, [pc, #544]	; (8001ff4 <sampling+0x7ac>)
 8001dd2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001dd6:	4b85      	ldr	r3, [pc, #532]	; (8001fec <sampling+0x7a4>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	4413      	add	r3, r2
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4b80      	ldr	r3, [pc, #512]	; (8001fec <sampling+0x7a4>)
 8001dec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

		//seq.loop[3]=(note[3].timeshift+(( seq.pos&31 ) >>2)) & 15;  // quater speed
			seq.loop[3]=((note[3].timeshift+(seq.pos&15))&15); //sets looping point in sequence this is full 16 note
 8001df0:	4b80      	ldr	r3, [pc, #512]	; (8001ff4 <sampling+0x7ac>)
 8001df2:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8001df6:	4b7d      	ldr	r3, [pc, #500]	; (8001fec <sampling+0x7a4>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b79      	ldr	r3, [pc, #484]	; (8001fec <sampling+0x7a4>)
 8001e06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

			seq.loop[4]=((note[2].timeshift+(seq.pos&7))&15);
 8001e0a:	4b7a      	ldr	r3, [pc, #488]	; (8001ff4 <sampling+0x7ac>)
 8001e0c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001e10:	4b76      	ldr	r3, [pc, #472]	; (8001fec <sampling+0x7a4>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b71      	ldr	r3, [pc, #452]	; (8001fec <sampling+0x7a4>)
 8001e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		//seq.loop[4]=((note[2].timeshift+((seq.pos&15)>>1))&15); // half speed

		note[2].pitch=(seq.notes2[seq.loop[2]]>>4)+(note[2].transpose>>4);  //loop 8 notes from pos and x times
 8001e2a:	4b70      	ldr	r3, [pc, #448]	; (8001fec <sampling+0x7a4>)
 8001e2c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b6e      	ldr	r3, [pc, #440]	; (8001fec <sampling+0x7a4>)
 8001e34:	4413      	add	r3, r2
 8001e36:	7cdb      	ldrb	r3, [r3, #19]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	4b6d      	ldr	r3, [pc, #436]	; (8001ff4 <sampling+0x7ac>)
 8001e3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e42:	091b      	lsrs	r3, r3, #4
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	4413      	add	r3, r2
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4b6a      	ldr	r3, [pc, #424]	; (8001ff4 <sampling+0x7ac>)
 8001e4c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		note[3].pitch=(seq.notes1[seq.loop[3]]>>4);  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8001e50:	4b66      	ldr	r3, [pc, #408]	; (8001fec <sampling+0x7a4>)
 8001e52:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001e56:	461a      	mov	r2, r3
 8001e58:	4b64      	ldr	r3, [pc, #400]	; (8001fec <sampling+0x7a4>)
 8001e5a:	4413      	add	r3, r2
 8001e5c:	789b      	ldrb	r3, [r3, #2]
 8001e5e:	091b      	lsrs	r3, r3, #4
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4b64      	ldr	r3, [pc, #400]	; (8001ff4 <sampling+0x7ac>)
 8001e64:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	if (note[3].pitch) 		{note[3].pitch=note[3].pitch+(note[3].transpose>>4);	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off
 8001e68:	4b62      	ldr	r3, [pc, #392]	; (8001ff4 <sampling+0x7ac>)
 8001e6a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d01f      	beq.n	8001eb2 <sampling+0x66a>
 8001e72:	4b60      	ldr	r3, [pc, #384]	; (8001ff4 <sampling+0x7ac>)
 8001e74:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8001e78:	4b5e      	ldr	r3, [pc, #376]	; (8001ff4 <sampling+0x7ac>)
 8001e7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	4413      	add	r3, r2
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4b5b      	ldr	r3, [pc, #364]	; (8001ff4 <sampling+0x7ac>)
 8001e88:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8001e8c:	4b5a      	ldr	r3, [pc, #360]	; (8001ff8 <sampling+0x7b0>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	80da      	strh	r2, [r3, #6]
 8001e92:	4b5a      	ldr	r3, [pc, #360]	; (8001ffc <sampling+0x7b4>)
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	4b57      	ldr	r3, [pc, #348]	; (8001ffc <sampling+0x7b4>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001eac:	443b      	add	r3, r7
 8001eae:	f843 2c68 	str.w	r2, [r3, #-104]


	//if ((note[5].pitch) && (adsr_toggle[5]==2)) {note[5].pitch=note[5].pitch; one_shot=0;}  // grab note when on ,one shot also , also delete


	note[5].pitch=(seq.notes2[seq.loop[2]]>>4)+(note[5].transpose>>4);  //
 8001eb2:	4b4e      	ldr	r3, [pc, #312]	; (8001fec <sampling+0x7a4>)
 8001eb4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b4c      	ldr	r3, [pc, #304]	; (8001fec <sampling+0x7a4>)
 8001ebc:	4413      	add	r3, r2
 8001ebe:	7cdb      	ldrb	r3, [r3, #19]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	4b4b      	ldr	r3, [pc, #300]	; (8001ff4 <sampling+0x7ac>)
 8001ec6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001eca:	091b      	lsrs	r3, r3, #4
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4b48      	ldr	r3, [pc, #288]	; (8001ff4 <sampling+0x7ac>)
 8001ed4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52





	note[5].pitch=MajorNote[note[5].pitch];    //this is for sine skip mask
 8001ed8:	4b46      	ldr	r3, [pc, #280]	; (8001ff4 <sampling+0x7ac>)
 8001eda:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b47      	ldr	r3, [pc, #284]	; (8002000 <sampling+0x7b8>)
 8001ee2:	5c9a      	ldrb	r2, [r3, r2]
 8001ee4:	4b43      	ldr	r3, [pc, #268]	; (8001ff4 <sampling+0x7ac>)
 8001ee6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	//note[5].pitch=11; // works ok with single note @24 but   fails on other
	note[5].tuned=sine_lut[note[5].pitch];	//sets freq ,1.0594  * 16536 =17518  ,
 8001eea:	4b42      	ldr	r3, [pc, #264]	; (8001ff4 <sampling+0x7ac>)
 8001eec:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b44      	ldr	r3, [pc, #272]	; (8002004 <sampling+0x7bc>)
 8001ef4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001ef8:	4b3e      	ldr	r3, [pc, #248]	; (8001ff4 <sampling+0x7ac>)
 8001efa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	note[5].tuned= (note[5].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
 8001efe:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <sampling+0x7ac>)
 8001f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8001f04:	461a      	mov	r2, r3
 8001f06:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001f0a:	fb02 f303 	mul.w	r3, r2, r3
 8001f0e:	129b      	asrs	r3, r3, #10
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <sampling+0x7ac>)
 8001f14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		mask_result =0;
 8001f18:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <sampling+0x7c0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	801a      	strh	r2, [r3, #0]
		sample_Accu[3]=0; // reset to 0 mani sample hold
		sample_Accu[4]=0; // reset to 0 mani sample hold
		sample_Accu[5]=0; // reset to 0 mani sample hold
*/

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001f24:	f102 021f 	add.w	r2, r2, #31
 8001f28:	7013      	strb	r3, [r2, #0]
 8001f2a:	e038      	b.n	8001f9e <sampling+0x756>

	if (note[mask_i].pitch) {tune_Accu=sample_Noteadd[MajorNote[note[mask_i].pitch]];   note[mask_i].tuned=(tune_Accu);       } // relies on note channel clear , not good , clear not channel straight after
 8001f2c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f30:	f103 031f 	add.w	r3, r3, #31
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	4a2f      	ldr	r2, [pc, #188]	; (8001ff4 <sampling+0x7ac>)
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d021      	beq.n	8001f88 <sampling+0x740>
 8001f44:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f48:	f103 031f 	add.w	r3, r3, #31
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	4a29      	ldr	r2, [pc, #164]	; (8001ff4 <sampling+0x7ac>)
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	4413      	add	r3, r2
 8001f54:	3302      	adds	r3, #2
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b29      	ldr	r3, [pc, #164]	; (8002000 <sampling+0x7b8>)
 8001f5c:	5c9b      	ldrb	r3, [r3, r2]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b2a      	ldr	r3, [pc, #168]	; (800200c <sampling+0x7c4>)
 8001f62:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f66:	461a      	mov	r2, r3
 8001f68:	4b29      	ldr	r3, [pc, #164]	; (8002010 <sampling+0x7c8>)
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	4b28      	ldr	r3, [pc, #160]	; (8002010 <sampling+0x7c8>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f74:	f103 031f 	add.w	r3, r3, #31
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b291      	uxth	r1, r2
 8001f7c:	4a1d      	ldr	r2, [pc, #116]	; (8001ff4 <sampling+0x7ac>)
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	4413      	add	r3, r2
 8001f82:	330e      	adds	r3, #14
 8001f84:	460a      	mov	r2, r1
 8001f86:	801a      	strh	r2, [r3, #0]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8001f88:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f8c:	f103 031f 	add.w	r3, r3, #31
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001f98:	f102 021f 	add.w	r2, r2, #31
 8001f9c:	7013      	strb	r3, [r2, #0]
 8001f9e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001fa2:	f103 031f 	add.w	r3, r3, #31
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d9bf      	bls.n	8001f2c <sampling+0x6e4>

  // calc freq 1/isr or 1/16 per note ,need for pitch bend and so on , change depending on decay

// lfo section

	if ((i&63)==0) {   // calculate lfo maybe 8 times for now , seems to fill up
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <sampling+0x7b4>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f040 81f3 	bne.w	80023a0 <sampling+0xb58>
freq_temp=0;
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001fc2:	f102 0214 	add.w	r2, r2, #20
 8001fc6:	6013      	str	r3, [r2, #0]
freq2_temp=0;
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001fd0:	f102 021c 	add.w	r2, r2, #28
 8001fd4:	6013      	str	r3, [r2, #0]

//uint8_t i_frac2=(i_frac+7)&7;  //previous value can change shape  , not  bad effect

		for (l=0;l<10;l++){   //current lfo setup , messy
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001fdc:	f102 021b 	add.w	r2, r2, #27
 8001fe0:	7013      	strb	r3, [r2, #0]
 8001fe2:	e19b      	b.n	800231c <sampling+0xad4>
 8001fe4:	200020c6 	.word	0x200020c6
 8001fe8:	2000209a 	.word	0x2000209a
 8001fec:	20003a54 	.word	0x20003a54
 8001ff0:	200001a8 	.word	0x200001a8
 8001ff4:	200039e4 	.word	0x200039e4
 8001ff8:	20002084 	.word	0x20002084
 8001ffc:	20000c70 	.word	0x20000c70
 8002000:	08009bb0 	.word	0x08009bb0
 8002004:	20000144 	.word	0x20000144
 8002008:	2000147c 	.word	0x2000147c
 800200c:	08009bcc 	.word	0x08009bcc
 8002010:	20000c48 	.word	0x20000c48
			//LFO[l].rate=potSource[130+l];   //grab dat for now
			freq_temp=LFO[l].rate +1;  // rate. this needs a little log
 8002014:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002018:	f103 031b 	add.w	r3, r3, #27
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	4a46      	ldr	r2, [pc, #280]	; (8002138 <sampling+0x8f0>)
 8002020:	211a      	movs	r1, #26
 8002022:	fb01 f303 	mul.w	r3, r1, r3
 8002026:	4413      	add	r3, r2
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	3301      	adds	r3, #1
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002034:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002038:	f103 0314 	add.w	r3, r3, #20
 800203c:	edc3 7a00 	vstr	s15, [r3]
			freq2_temp=freq_temp*freq_temp;
 8002040:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002044:	f103 0314 	add.w	r3, r3, #20
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002050:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002054:	f103 031c 	add.w	r3, r3, #28
 8002058:	edc3 7a00 	vstr	s15, [r3]
			freq_temp=freq2_temp/64;
 800205c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002060:	f103 031c 	add.w	r3, r3, #28
 8002064:	ed93 7a00 	vldr	s14, [r3]
 8002068:	eddf 6a34 	vldr	s13, [pc, #208]	; 800213c <sampling+0x8f4>
 800206c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002070:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002074:	f103 0314 	add.w	r3, r3, #20
 8002078:	edc3 7a00 	vstr	s15, [r3]
			freq2_temp=freq_temp*tempo_sync ; //correction to one note per cycle ,fixed , maybe loose this
 800207c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002080:	f103 0314 	add.w	r3, r3, #20
 8002084:	ed93 7a00 	vldr	s14, [r3]
 8002088:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800208c:	f103 0308 	add.w	r3, r3, #8
 8002090:	edd3 7a00 	vldr	s15, [r3]
 8002094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002098:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800209c:	f103 031c 	add.w	r3, r3, #28
 80020a0:	edc3 7a00 	vstr	s15, [r3]

			freq_temp=lfo_accu[l][i_frac]+ freq2_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 80020a4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020a8:	f103 031b 	add.w	r3, r3, #27
 80020ac:	781a      	ldrb	r2, [r3, #0]
 80020ae:	4b24      	ldr	r3, [pc, #144]	; (8002140 <sampling+0x8f8>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	4923      	ldr	r1, [pc, #140]	; (8002144 <sampling+0x8fc>)
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4403      	add	r3, r0
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	edd3 7a00 	vldr	s15, [r3]
 80020c8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80020cc:	f103 031c 	add.w	r3, r3, #28
 80020d0:	ed93 7a00 	vldr	s14, [r3]
 80020d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020dc:	f103 0314 	add.w	r3, r3, #20
 80020e0:	edc3 7a00 	vstr	s15, [r3]


//			if ((tempo_count<50) && ((next_isr&15)==15)) freq_temp=0;   // trying retrigger
		if (freq_temp>16384) lfo_accu[l][i_frac]=freq_temp-16384; else lfo_accu[l][i_frac]=freq_temp; // write back value
 80020e4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020e8:	f103 0314 	add.w	r3, r3, #20
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002148 <sampling+0x900>
 80020f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fc:	dd26      	ble.n	800214c <sampling+0x904>
 80020fe:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002102:	f103 031b 	add.w	r3, r3, #27
 8002106:	781a      	ldrb	r2, [r3, #0]
 8002108:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <sampling+0x8f8>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002112:	f103 0314 	add.w	r3, r3, #20
 8002116:	edd3 7a00 	vldr	s15, [r3]
 800211a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002148 <sampling+0x900>
 800211e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002122:	4908      	ldr	r1, [pc, #32]	; (8002144 <sampling+0x8fc>)
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4403      	add	r3, r0
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	edc3 7a00 	vstr	s15, [r3]
 8002136:	e01f      	b.n	8002178 <sampling+0x930>
 8002138:	20002e54 	.word	0x20002e54
 800213c:	42800000 	.word	0x42800000
 8002140:	200021dc 	.word	0x200021dc
 8002144:	200021e0 	.word	0x200021e0
 8002148:	46800000 	.word	0x46800000
 800214c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002150:	f103 031b 	add.w	r3, r3, #27
 8002154:	781a      	ldrb	r2, [r3, #0]
 8002156:	4b9e      	ldr	r3, [pc, #632]	; (80023d0 <sampling+0xb88>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	499d      	ldr	r1, [pc, #628]	; (80023d4 <sampling+0xb8c>)
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4403      	add	r3, r0
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002170:	f102 0214 	add.w	r2, r2, #20
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	601a      	str	r2, [r3, #0]
		freq_temp=lfo_accu[l][i_frac]; // 0-255 limit + above zero
 8002178:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800217c:	f103 031b 	add.w	r3, r3, #27
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	4b93      	ldr	r3, [pc, #588]	; (80023d0 <sampling+0xb88>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	4992      	ldr	r1, [pc, #584]	; (80023d4 <sampling+0xb8c>)
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4403      	add	r3, r0
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800219e:	f102 0214 	add.w	r2, r2, #20
 80021a2:	6013      	str	r3, [r2, #0]
		freq_temp=freq_temp*0.000383495;  // 0-255 , chang this for depth
 80021a4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80021a8:	f103 0314 	add.w	r3, r3, #20
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	f7fe faa1 	bl	80006f4 <__aeabi_f2d>
 80021b2:	a383      	add	r3, pc, #524	; (adr r3, 80023c0 <sampling+0xb78>)
 80021b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b8:	f7fe f80e 	bl	80001d8 <__aeabi_dmul>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	f7fe faee 	bl	80007a4 <__aeabi_d2f>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80021ce:	f102 0214 	add.w	r2, r2, #20
 80021d2:	6013      	str	r3, [r2, #0]
		freq2_temp =arm_sin_f32(freq_temp); // seems ok   , cmsis is ok
 80021d4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80021d8:	f103 0314 	add.w	r3, r3, #20
 80021dc:	ed93 0a00 	vldr	s0, [r3]
 80021e0:	f007 fadc 	bl	800979c <arm_sin_f32>
 80021e4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80021e8:	f103 031c 	add.w	r3, r3, #28
 80021ec:	ed83 0a00 	vstr	s0, [r3]
		freq_temp=freq2_temp*LFO[l].depth*51;   // depth
 80021f0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80021f4:	f103 031b 	add.w	r3, r3, #27
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	4a77      	ldr	r2, [pc, #476]	; (80023d8 <sampling+0xb90>)
 80021fc:	211a      	movs	r1, #26
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	3301      	adds	r3, #1
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	ee07 3a90 	vmov	s15, r3
 800220c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002210:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002214:	f103 031c 	add.w	r3, r3, #28
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002220:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80023dc <sampling+0xb94>
 8002224:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002228:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800222c:	f103 0314 	add.w	r3, r3, #20
 8002230:	edc3 7a00 	vstr	s15, [r3]
		if (freq_temp>8195)  freq_temp=8195;
 8002234:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002238:	f103 0314 	add.w	r3, r3, #20
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80023e0 <sampling+0xb98>
 8002244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224c:	dd05      	ble.n	800225a <sampling+0xa12>
 800224e:	4b65      	ldr	r3, [pc, #404]	; (80023e4 <sampling+0xb9c>)
 8002250:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002254:	f102 0214 	add.w	r2, r2, #20
 8002258:	6013      	str	r3, [r2, #0]
		if (freq_temp<-8195)  freq_temp=-8195;   // clip to 13bit
 800225a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800225e:	f103 0314 	add.w	r3, r3, #20
 8002262:	edd3 7a00 	vldr	s15, [r3]
 8002266:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80023e8 <sampling+0xba0>
 800226a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800226e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002272:	d505      	bpl.n	8002280 <sampling+0xa38>
 8002274:	4b5d      	ldr	r3, [pc, #372]	; (80023ec <sampling+0xba4>)
 8002276:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800227a:	f102 0214 	add.w	r2, r2, #20
 800227e:	6013      	str	r3, [r2, #0]
		lfo_out[l] [i_frac]=freq_temp+8195; // ok now     , 8 steps per i loop , 14 bit
 8002280:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002284:	f103 0314 	add.w	r3, r3, #20
 8002288:	edd3 7a00 	vldr	s15, [r3]
 800228c:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80023e0 <sampling+0xb98>
 8002290:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002294:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002298:	f103 031b 	add.w	r3, r3, #27
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	4b4c      	ldr	r3, [pc, #304]	; (80023d0 <sampling+0xb88>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	461c      	mov	r4, r3
 80022a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022a8:	ee17 3a90 	vmov	r3, s15
 80022ac:	b298      	uxth	r0, r3
 80022ae:	4950      	ldr	r1, [pc, #320]	; (80023f0 <sampling+0xba8>)
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4423      	add	r3, r4
 80022ba:	4602      	mov	r2, r0
 80022bc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		LFO[l].out[i_frac]=lfo_out[l] [i_frac];  // just copy for now
 80022c0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80022c4:	f103 031b 	add.w	r3, r3, #27
 80022c8:	7819      	ldrb	r1, [r3, #0]
 80022ca:	4b41      	ldr	r3, [pc, #260]	; (80023d0 <sampling+0xb88>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461d      	mov	r5, r3
 80022d0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80022d4:	f103 031b 	add.w	r3, r3, #27
 80022d8:	781a      	ldrb	r2, [r3, #0]
 80022da:	4b3d      	ldr	r3, [pc, #244]	; (80023d0 <sampling+0xb88>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	461c      	mov	r4, r3
 80022e0:	4843      	ldr	r0, [pc, #268]	; (80023f0 <sampling+0xba8>)
 80022e2:	460b      	mov	r3, r1
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	442b      	add	r3, r5
 80022ec:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80022f0:	4939      	ldr	r1, [pc, #228]	; (80023d8 <sampling+0xb90>)
 80022f2:	4613      	mov	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4413      	add	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	4423      	add	r3, r4
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	440b      	add	r3, r1
 8002302:	4602      	mov	r2, r0
 8002304:	80da      	strh	r2, [r3, #6]
		for (l=0;l<10;l++){   //current lfo setup , messy
 8002306:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800230a:	f103 031b 	add.w	r3, r3, #27
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002316:	f102 021b 	add.w	r2, r2, #27
 800231a:	7013      	strb	r3, [r2, #0]
 800231c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002320:	f103 031b 	add.w	r3, r3, #27
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b09      	cmp	r3, #9
 8002328:	f67f ae74 	bls.w	8002014 <sampling+0x7cc>
		} // lfo gen : 0=f1 , 1=tempo,2=pitch


			freq_pointer[0] [i_frac]=lfo_out [0][i_frac]*0.00006435; // problem was selecting accu instead of out , good now
 800232c:	4b28      	ldr	r3, [pc, #160]	; (80023d0 <sampling+0xb88>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	4b2f      	ldr	r3, [pc, #188]	; (80023f0 <sampling+0xba8>)
 8002334:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f9c9 	bl	80006d0 <__aeabi_i2d>
 800233e:	a322      	add	r3, pc, #136	; (adr r3, 80023c8 <sampling+0xb80>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fd ff48 	bl	80001d8 <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4920      	ldr	r1, [pc, #128]	; (80023d0 <sampling+0xb88>)
 800234e:	7809      	ldrb	r1, [r1, #0]
 8002350:	460c      	mov	r4, r1
 8002352:	4610      	mov	r0, r2
 8002354:	4619      	mov	r1, r3
 8002356:	f7fe fa25 	bl	80007a4 <__aeabi_d2f>
 800235a:	4602      	mov	r2, r0
 800235c:	4925      	ldr	r1, [pc, #148]	; (80023f4 <sampling+0xbac>)
 800235e:	00a3      	lsls	r3, r4, #2
 8002360:	440b      	add	r3, r1
 8002362:	601a      	str	r2, [r3, #0]
		freq_pointer[2] [i_frac] =lfo_out [3][i_frac]*0.00006435;; // filter lfos
 8002364:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <sampling+0xb88>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	4a21      	ldr	r2, [pc, #132]	; (80023f0 <sampling+0xba8>)
 800236a:	331e      	adds	r3, #30
 800236c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe f9ad 	bl	80006d0 <__aeabi_i2d>
 8002376:	a314      	add	r3, pc, #80	; (adr r3, 80023c8 <sampling+0xb80>)
 8002378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237c:	f7fd ff2c 	bl	80001d8 <__aeabi_dmul>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4912      	ldr	r1, [pc, #72]	; (80023d0 <sampling+0xb88>)
 8002386:	7809      	ldrb	r1, [r1, #0]
 8002388:	460c      	mov	r4, r1
 800238a:	4610      	mov	r0, r2
 800238c:	4619      	mov	r1, r3
 800238e:	f7fe fa09 	bl	80007a4 <__aeabi_d2f>
 8002392:	4602      	mov	r2, r0
 8002394:	4917      	ldr	r1, [pc, #92]	; (80023f4 <sampling+0xbac>)
 8002396:	f104 0312 	add.w	r3, r4, #18
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	601a      	str	r2, [r3, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 80023a0:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <sampling+0xbb0>)
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <sampling+0xbb0>)
 80023aa:	801a      	strh	r2, [r3, #0]
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <sampling+0xbb0>)
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b4:	f4ff ac5d 	bcc.w	8001c72 <sampling+0x42a>
// filter loop
int32_t play_holder1[512];    // data banks
int32_t play_holder2[512];
uint8_t sine_zero;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <sampling+0xbb0>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	801a      	strh	r2, [r3, #0]
 80023be:	e0fd      	b.n	80025bc <sampling+0xd74>
 80023c0:	7bb1a72c 	.word	0x7bb1a72c
 80023c4:	3f3921fa 	.word	0x3f3921fa
 80023c8:	94fd52a7 	.word	0x94fd52a7
 80023cc:	3f10de74 	.word	0x3f10de74
 80023d0:	200021dc 	.word	0x200021dc
 80023d4:	200021e0 	.word	0x200021e0
 80023d8:	20002e54 	.word	0x20002e54
 80023dc:	424c0000 	.word	0x424c0000
 80023e0:	46000c00 	.word	0x46000c00
 80023e4:	46000c00 	.word	0x46000c00
 80023e8:	c6000c00 	.word	0xc6000c00
 80023ec:	c6000c00 	.word	0xc6000c00
 80023f0:	20002370 	.word	0x20002370
 80023f4:	2000214c 	.word	0x2000214c
 80023f8:	20000c70 	.word	0x20000c70
	i_total=i+sample_pointB;
 80023fc:	4b7f      	ldr	r3, [pc, #508]	; (80025fc <sampling+0xdb4>)
 80023fe:	881a      	ldrh	r2, [r3, #0]
 8002400:	4b7f      	ldr	r3, [pc, #508]	; (8002600 <sampling+0xdb8>)
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	4413      	add	r3, r2
 8002406:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800240a:	f102 0202 	add.w	r2, r2, #2
 800240e:	8013      	strh	r3, [r2, #0]
	i_frac=(i>>6);
 8002410:	4b7a      	ldr	r3, [pc, #488]	; (80025fc <sampling+0xdb4>)
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	099b      	lsrs	r3, r3, #6
 8002416:	b29b      	uxth	r3, r3
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4b7a      	ldr	r3, [pc, #488]	; (8002604 <sampling+0xdbc>)
 800241c:	701a      	strb	r2, [r3, #0]
// every step   1,110,928   >>20  ,per note
// New oscillators , sync, trigger input , waveshape ,zero cross
	sample_accus[0] = sample_accus[0] + note[0].tuned; //careful with signed bit shift,better compare
 800241e:	4b7a      	ldr	r3, [pc, #488]	; (8002608 <sampling+0xdc0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a7a      	ldr	r2, [pc, #488]	; (800260c <sampling+0xdc4>)
 8002424:	89d2      	ldrh	r2, [r2, #14]
 8002426:	4413      	add	r3, r2
 8002428:	4a77      	ldr	r2, [pc, #476]	; (8002608 <sampling+0xdc0>)
 800242a:	6013      	str	r3, [r2, #0]

	if (sample_accus[0]>524287) sample_accus[0] =-sample_accus[0] ; // faster >  than &  ,strange
 800242c:	4b76      	ldr	r3, [pc, #472]	; (8002608 <sampling+0xdc0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002434:	db04      	blt.n	8002440 <sampling+0xbf8>
 8002436:	4b74      	ldr	r3, [pc, #464]	; (8002608 <sampling+0xdc0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	425b      	negs	r3, r3
 800243c:	4a72      	ldr	r2, [pc, #456]	; (8002608 <sampling+0xdc0>)
 800243e:	6013      	str	r3, [r2, #0]



	sample_accus[1] = sample_accus[1] + note[1].tuned;  // normal adder full volume
 8002440:	4b71      	ldr	r3, [pc, #452]	; (8002608 <sampling+0xdc0>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4a71      	ldr	r2, [pc, #452]	; (800260c <sampling+0xdc4>)
 8002446:	8bd2      	ldrh	r2, [r2, #30]
 8002448:	4413      	add	r3, r2
 800244a:	4a6f      	ldr	r2, [pc, #444]	; (8002608 <sampling+0xdc0>)
 800244c:	6053      	str	r3, [r2, #4]
		//	if (!(note[].pitch[0]))   sample_accus[1] =0;  // turn off with vel now , maybe use mask
			if (sample_accus[1]>524287) sample_accus[1] =-sample_accus[1] ; // faster >  than &  ,strange
 800244e:	4b6e      	ldr	r3, [pc, #440]	; (8002608 <sampling+0xdc0>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002456:	db04      	blt.n	8002462 <sampling+0xc1a>
 8002458:	4b6b      	ldr	r3, [pc, #428]	; (8002608 <sampling+0xdc0>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	425b      	negs	r3, r3
 800245e:	4a6a      	ldr	r2, [pc, #424]	; (8002608 <sampling+0xdc0>)
 8002460:	6053      	str	r3, [r2, #4]

			sample_accus[2] = sample_accus[2] + note[2].tuned;
 8002462:	4b69      	ldr	r3, [pc, #420]	; (8002608 <sampling+0xdc0>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	4a69      	ldr	r2, [pc, #420]	; (800260c <sampling+0xdc4>)
 8002468:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800246a:	4413      	add	r3, r2
 800246c:	4a66      	ldr	r2, [pc, #408]	; (8002608 <sampling+0xdc0>)
 800246e:	6093      	str	r3, [r2, #8]
			//		if (!(note[].pitch[0]))   sample_accus[2] =0;  // turn off with vel now , maybe use mask
					if (sample_accus[2]>524287) sample_accus[2] =-sample_accus[2] ; // faster >  than &  ,strange
 8002470:	4b65      	ldr	r3, [pc, #404]	; (8002608 <sampling+0xdc0>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002478:	db04      	blt.n	8002484 <sampling+0xc3c>
 800247a:	4b63      	ldr	r3, [pc, #396]	; (8002608 <sampling+0xdc0>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	425b      	negs	r3, r3
 8002480:	4a61      	ldr	r2, [pc, #388]	; (8002608 <sampling+0xdc0>)
 8002482:	6093      	str	r3, [r2, #8]

					sample_accus[3] = sample_accus[3] + note[3].tuned; // bouncing somewhere
 8002484:	4b60      	ldr	r3, [pc, #384]	; (8002608 <sampling+0xdc0>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4a60      	ldr	r2, [pc, #384]	; (800260c <sampling+0xdc4>)
 800248a:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 800248c:	4413      	add	r3, r2
 800248e:	4a5e      	ldr	r2, [pc, #376]	; (8002608 <sampling+0xdc0>)
 8002490:	60d3      	str	r3, [r2, #12]
					//sample_accus[3] = sample_accus[3] +4000;
					//	if (!(note[].pitch[0]))   sample_accus[3] =0;  // turn off with vel now , maybe use mask
							if (sample_accus[3]>524287) sample_accus[3] =-sample_accus[3] ; // faster >  than &  ,strange
 8002492:	4b5d      	ldr	r3, [pc, #372]	; (8002608 <sampling+0xdc0>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800249a:	db04      	blt.n	80024a6 <sampling+0xc5e>
 800249c:	4b5a      	ldr	r3, [pc, #360]	; (8002608 <sampling+0xdc0>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	425b      	negs	r3, r3
 80024a2:	4a59      	ldr	r2, [pc, #356]	; (8002608 <sampling+0xdc0>)
 80024a4:	60d3      	str	r3, [r2, #12]

							sample_accus[4] = sample_accus[4] + note[4].tuned;
 80024a6:	4b58      	ldr	r3, [pc, #352]	; (8002608 <sampling+0xdc0>)
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	4a58      	ldr	r2, [pc, #352]	; (800260c <sampling+0xdc4>)
 80024ac:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
 80024b0:	4413      	add	r3, r2
 80024b2:	4a55      	ldr	r2, [pc, #340]	; (8002608 <sampling+0xdc0>)
 80024b4:	6113      	str	r3, [r2, #16]
								//	if (!(note[].pitch[4]))   sample_accus[4] =0;  // turn off with vel now , maybe use mask
									if (sample_accus[4]>524287) sample_accus[4] =-sample_accus[4] ; // faster >  than &  ,strange
 80024b6:	4b54      	ldr	r3, [pc, #336]	; (8002608 <sampling+0xdc0>)
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024be:	db04      	blt.n	80024ca <sampling+0xc82>
 80024c0:	4b51      	ldr	r3, [pc, #324]	; (8002608 <sampling+0xdc0>)
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	425b      	negs	r3, r3
 80024c6:	4a50      	ldr	r2, [pc, #320]	; (8002608 <sampling+0xdc0>)
 80024c8:	6113      	str	r3, [r2, #16]

									sample_Accu[2] = 0;sample_Accu[0] =0;sample_Accu[3] =0; //all zeroed
 80024ca:	4b51      	ldr	r3, [pc, #324]	; (8002610 <sampling+0xdc8>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	4b4f      	ldr	r3, [pc, #316]	; (8002610 <sampling+0xdc8>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	4b4e      	ldr	r3, [pc, #312]	; (8002610 <sampling+0xdc8>)
 80024d8:	2200      	movs	r2, #0
 80024da:	60da      	str	r2, [r3, #12]
									//if (sample_accus[2]<0) sample_Accu[2]=+sample_accus[2]; else sample_Accu[2]=sample_accus[2]; // convert to triangle ?
									sample_Accu[0]=sample_accus[2]>>7; // needs cut a bit
 80024dc:	4b4a      	ldr	r3, [pc, #296]	; (8002608 <sampling+0xdc0>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	11db      	asrs	r3, r3, #7
 80024e2:	4a4b      	ldr	r2, [pc, #300]	; (8002610 <sampling+0xdc8>)
 80024e4:	6013      	str	r3, [r2, #0]

							sample_Accu[0] = ((sine_out+sample_Accu[0])*cross_fade[1]);   // sine input plus other
 80024e6:	4b4a      	ldr	r3, [pc, #296]	; (8002610 <sampling+0xdc8>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b4a      	ldr	r3, [pc, #296]	; (8002614 <sampling+0xdcc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80024f4:	f102 0215 	add.w	r2, r2, #21
 80024f8:	7812      	ldrb	r2, [r2, #0]
 80024fa:	fb02 f303 	mul.w	r3, r2, r3
 80024fe:	4a44      	ldr	r2, [pc, #272]	; (8002610 <sampling+0xdc8>)
 8002500:	6013      	str	r3, [r2, #0]
							//sample_Accu[0] = (sine_out*cross_fade[1]);  // sine out only
									//if (sample_accus[3]<0) sample_Accu[3]=+sample_accus[3]; else sample_Accu[3]=sample_accus[3]; // convert to triangle
									sample_Accu[3]=sample_accus[3];
 8002502:	4b41      	ldr	r3, [pc, #260]	; (8002608 <sampling+0xdc0>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	4a42      	ldr	r2, [pc, #264]	; (8002610 <sampling+0xdc8>)
 8002508:	60d3      	str	r3, [r2, #12]
									sample_Accu[2] = (sample_Accu[3]*cross_fade[2]);			//27b, 2 out f2  might do a crossfade here using pot 3
 800250a:	4b41      	ldr	r3, [pc, #260]	; (8002610 <sampling+0xdc8>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002512:	f102 0216 	add.w	r2, r2, #22
 8002516:	7812      	ldrb	r2, [r2, #0]
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	4a3c      	ldr	r2, [pc, #240]	; (8002610 <sampling+0xdc8>)
 800251e:	6093      	str	r3, [r2, #8]
									//	sample_Accu[5] = sample_Accu[4]+ (sample_accus[4]*4);			// drum and envelope

	//	sample_Accu=sample_Accu-(1<<21);


if (sine_counterB==0) 	sine_temp2=note[5].tuned;
 8002520:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <sampling+0xdd0>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d104      	bne.n	8002532 <sampling+0xcea>
 8002528:	4b38      	ldr	r3, [pc, #224]	; (800260c <sampling+0xdc4>)
 800252a:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800252e:	4b3b      	ldr	r3, [pc, #236]	; (800261c <sampling+0xdd4>)
 8002530:	801a      	strh	r2, [r3, #0]

	sine_counterB=sine_counterB+sine_temp2 ;  // sine up counter per cycle , however sine adder needs to wait
 8002532:	4b39      	ldr	r3, [pc, #228]	; (8002618 <sampling+0xdd0>)
 8002534:	881a      	ldrh	r2, [r3, #0]
 8002536:	4b39      	ldr	r3, [pc, #228]	; (800261c <sampling+0xdd4>)
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	4413      	add	r3, r2
 800253c:	b29a      	uxth	r2, r3
 800253e:	4b36      	ldr	r3, [pc, #216]	; (8002618 <sampling+0xdd0>)
 8002540:	801a      	strh	r2, [r3, #0]
	if (sine_counterB>>7) sine_zero=0; else sine_zero=1;
 8002542:	4b35      	ldr	r3, [pc, #212]	; (8002618 <sampling+0xdd0>)
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	09db      	lsrs	r3, r3, #7
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d006      	beq.n	800255c <sampling+0xd14>
 800254e:	2300      	movs	r3, #0
 8002550:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002554:	f102 0201 	add.w	r2, r2, #1
 8002558:	7013      	strb	r3, [r2, #0]
 800255a:	e005      	b.n	8002568 <sampling+0xd20>
 800255c:	2301      	movs	r3, #1
 800255e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002562:	f102 0201 	add.w	r2, r2, #1
 8002566:	7013      	strb	r3, [r2, #0]

if (sine_counterB>(sine_length<<5)) sine_counterB=0; //fixed for now
 8002568:	4b2b      	ldr	r3, [pc, #172]	; (8002618 <sampling+0xdd0>)
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	4b2c      	ldr	r3, [pc, #176]	; (8002620 <sampling+0xdd8>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	015b      	lsls	r3, r3, #5
 8002574:	429a      	cmp	r2, r3
 8002576:	dd02      	ble.n	800257e <sampling+0xd36>
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <sampling+0xdd0>)
 800257a:	2200      	movs	r2, #0
 800257c:	801a      	strh	r2, [r3, #0]
sine_count(); // calc sine   distortion out when hcagning note
 800257e:	f000 fae9 	bl	8002b54 <sine_count>
play_holder1[i]=sample_Accu[0];  // write to bank
 8002582:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <sampling+0xdb4>)
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	4619      	mov	r1, r3
 8002588:	4b21      	ldr	r3, [pc, #132]	; (8002610 <sampling+0xdc8>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002590:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 8002594:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
play_holder2[i]=sample_Accu[2];
 8002598:	4b18      	ldr	r3, [pc, #96]	; (80025fc <sampling+0xdb4>)
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <sampling+0xdc8>)
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80025a6:	4619      	mov	r1, r3
 80025a8:	0083      	lsls	r3, r0, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	f843 2c80 	str.w	r2, [r3, #-128]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <sampling+0xdb4>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	3301      	adds	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	4b10      	ldr	r3, [pc, #64]	; (80025fc <sampling+0xdb4>)
 80025ba:	801a      	strh	r2, [r3, #0]
 80025bc:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <sampling+0xdb4>)
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c4:	f4ff af1a 	bcc.w	80023fc <sampling+0xbb4>



//uint16_t* click=&input_holder[0];

uint16_t crap_hold=2000;
 80025c8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80025cc:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80025d0:	f102 0206 	add.w	r2, r2, #6
 80025d4:	8013      	strh	r3, [r2, #0]

				uint16_t crap_hold1=2000;
 80025d6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80025da:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80025de:	f102 020e 	add.w	r2, r2, #14
 80025e2:	8013      	strh	r3, [r2, #0]
				uint16_t crap_hold2=2000;
 80025e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80025e8:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80025ec:	f102 0204 	add.w	r2, r2, #4
 80025f0:	8013      	strh	r3, [r2, #0]




for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 80025f2:	4b02      	ldr	r3, [pc, #8]	; (80025fc <sampling+0xdb4>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	801a      	strh	r2, [r3, #0]
 80025f8:	e05a      	b.n	80026b0 <sampling+0xe68>
 80025fa:	bf00      	nop
 80025fc:	20000c70 	.word	0x20000c70
 8002600:	20000c6e 	.word	0x20000c6e
 8002604:	200021dc 	.word	0x200021dc
 8002608:	200020a0 	.word	0x200020a0
 800260c:	200039e4 	.word	0x200039e4
 8002610:	20000c50 	.word	0x20000c50
 8002614:	20000c38 	.word	0x20000c38
 8002618:	20000c36 	.word	0x20000c36
 800261c:	20000c3c 	.word	0x20000c3c
 8002620:	20000142 	.word	0x20000142
			{




				crap_hold=((input_holder[i]*7)+crap_hold2)>>3;
 8002624:	4b61      	ldr	r3, [pc, #388]	; (80027ac <sampling+0xf64>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	4b61      	ldr	r3, [pc, #388]	; (80027b0 <sampling+0xf68>)
 800262c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002630:	461a      	mov	r2, r3
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	1a9a      	subs	r2, r3, r2
 8002638:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800263c:	f103 0304 	add.w	r3, r3, #4
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	4413      	add	r3, r2
 8002644:	10db      	asrs	r3, r3, #3
 8002646:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800264a:	f102 0206 	add.w	r2, r2, #6
 800264e:	8013      	strh	r3, [r2, #0]
					crap_hold1=((crap_hold*7)+crap_hold1)>>3;
 8002650:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002654:	f103 0306 	add.w	r3, r3, #6
 8002658:	881a      	ldrh	r2, [r3, #0]
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	1a9a      	subs	r2, r3, r2
 8002660:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002664:	f103 030e 	add.w	r3, r3, #14
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	4413      	add	r3, r2
 800266c:	10db      	asrs	r3, r3, #3
 800266e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002672:	f102 020e 	add.w	r2, r2, #14
 8002676:	8013      	strh	r3, [r2, #0]
					input_holder[i] =((crap_hold1*7)+crap_hold2)>>3;
 8002678:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800267c:	f103 030e 	add.w	r3, r3, #14
 8002680:	881a      	ldrh	r2, [r3, #0]
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	1a9a      	subs	r2, r3, r2
 8002688:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800268c:	f103 0304 	add.w	r3, r3, #4
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	4413      	add	r3, r2
 8002694:	10d9      	asrs	r1, r3, #3
 8002696:	4b45      	ldr	r3, [pc, #276]	; (80027ac <sampling+0xf64>)
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	b289      	uxth	r1, r1
 800269e:	4b44      	ldr	r3, [pc, #272]	; (80027b0 <sampling+0xf68>)
 80026a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 80026a4:	4b41      	ldr	r3, [pc, #260]	; (80027ac <sampling+0xf64>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	3301      	adds	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	4b3f      	ldr	r3, [pc, #252]	; (80027ac <sampling+0xf64>)
 80026ae:	801a      	strh	r2, [r3, #0]
 80026b0:	4b3e      	ldr	r3, [pc, #248]	; (80027ac <sampling+0xf64>)
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b8:	d3b4      	bcc.n	8002624 <sampling+0xddc>
}
*/



for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 80026ba:	4b3c      	ldr	r3, [pc, #240]	; (80027ac <sampling+0xf64>)
 80026bc:	2200      	movs	r2, #0
 80026be:	801a      	strh	r2, [r3, #0]
 80026c0:	e228      	b.n	8002b14 <sampling+0x12cc>
	i_total=i+sample_pointB;
 80026c2:	4b3a      	ldr	r3, [pc, #232]	; (80027ac <sampling+0xf64>)
 80026c4:	881a      	ldrh	r2, [r3, #0]
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <sampling+0xf6c>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	4413      	add	r3, r2
 80026cc:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80026d0:	f102 0202 	add.w	r2, r2, #2
 80026d4:	8013      	strh	r3, [r2, #0]
i_frac=(i>>6);
 80026d6:	4b35      	ldr	r3, [pc, #212]	; (80027ac <sampling+0xf64>)
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	099b      	lsrs	r3, r3, #6
 80026dc:	b29b      	uxth	r3, r3
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	4b35      	ldr	r3, [pc, #212]	; (80027b8 <sampling+0xf70>)
 80026e2:	701a      	strb	r2, [r3, #0]

// filter 1
if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 80026e4:	4b31      	ldr	r3, [pc, #196]	; (80027ac <sampling+0xf64>)
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80026f2:	443b      	add	r3, r7
 80026f4:	f853 3c68 	ldr.w	r3, [r3, #-104]
 80026f8:	4a2c      	ldr	r2, [pc, #176]	; (80027ac <sampling+0xf64>)
 80026fa:	8812      	ldrh	r2, [r2, #0]
 80026fc:	f002 021f 	and.w	r2, r2, #31
 8002700:	2101      	movs	r1, #1
 8002702:	fa01 f202 	lsl.w	r2, r1, r2
 8002706:	4293      	cmp	r3, r2
 8002708:	d10f      	bne.n	800272a <sampling+0xee2>
 800270a:	4b2c      	ldr	r3, [pc, #176]	; (80027bc <sampling+0xf74>)
 800270c:	2200      	movs	r2, #0
 800270e:	711a      	strb	r2, [r3, #4]
 8002710:	4b2b      	ldr	r3, [pc, #172]	; (80027c0 <sampling+0xf78>)
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	3301      	adds	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	4b29      	ldr	r3, [pc, #164]	; (80027c0 <sampling+0xf78>)
 800271a:	801a      	strh	r2, [r3, #0]
 800271c:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <sampling+0xf78>)
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002724:	b29a      	uxth	r2, r3
 8002726:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <sampling+0xf78>)
 8002728:	801a      	strh	r2, [r3, #0]
//sample_Accu[1]=(sample_Accu[1]-2020)<<14; // shift to correct level



//sample_Accu[1]=sample_Accu[1]-60000;
sample_Accu[1]=play_holder1[i];  // sine input
 800272a:	4b20      	ldr	r3, [pc, #128]	; (80027ac <sampling+0xf64>)
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002734:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 8002738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800273c:	4a21      	ldr	r2, [pc, #132]	; (80027c4 <sampling+0xf7c>)
 800273e:	6053      	str	r3, [r2, #4]
sample_Accu[3]=play_holder2[i] >>5; // sine
 8002740:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <sampling+0xf64>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8002750:	115b      	asrs	r3, r3, #5
 8002752:	4a1c      	ldr	r2, [pc, #112]	; (80027c4 <sampling+0xf7c>)
 8002754:	60d3      	str	r3, [r2, #12]

// this section is about 100 tmr cycles

freq_point[0]=freq_pointer[0] [i_frac];; // load up coeffs
 8002756:	4b18      	ldr	r3, [pc, #96]	; (80027b8 <sampling+0xf70>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	4a1b      	ldr	r2, [pc, #108]	; (80027c8 <sampling+0xf80>)
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1a      	ldr	r2, [pc, #104]	; (80027cc <sampling+0xf84>)
 8002764:	6013      	str	r3, [r2, #0]
//freq_point[1]=freq_pointer[1] [i_frac];
freq_point[2]=freq_pointer[2] [i_frac];  // ok , array was too short
 8002766:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <sampling+0xf70>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <sampling+0xf80>)
 800276c:	3312      	adds	r3, #18
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a15      	ldr	r2, [pc, #84]	; (80027cc <sampling+0xf84>)
 8002776:	6093      	str	r3, [r2, #8]
//freq_point[3]=freq_pointer[3] [i_frac];
//freq_point[0]=0.5;  //was ok with this
	//	freq_point[2]=0.5;


adsr_level[3] = adsr_lut	[i>>1];
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <sampling+0xf64>)
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	b29b      	uxth	r3, r3
 8002780:	4a13      	ldr	r2, [pc, #76]	; (80027d0 <sampling+0xf88>)
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <sampling+0xf8c>)
 800278a:	60d3      	str	r3, [r2, #12]


if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 800278c:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <sampling+0xf84>)
 800278e:	edd3 7a00 	vldr	s15, [r3]
 8002792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800279a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279e:	dd1b      	ble.n	80027d8 <sampling+0xf90>
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <sampling+0xf84>)
 80027a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e022      	b.n	80027f0 <sampling+0xfa8>
 80027aa:	bf00      	nop
 80027ac:	20000c70 	.word	0x20000c70
 80027b0:	20002a38 	.word	0x20002a38
 80027b4:	20000c6e 	.word	0x20000c6e
 80027b8:	200021dc 	.word	0x200021dc
 80027bc:	20002f58 	.word	0x20002f58
 80027c0:	200021de 	.word	0x200021de
 80027c4:	20000c50 	.word	0x20000c50
 80027c8:	2000214c 	.word	0x2000214c
 80027cc:	2000213c 	.word	0x2000213c
 80027d0:	20001c84 	.word	0x20001c84
 80027d4:	20002a04 	.word	0x20002a04
 80027d8:	4bb3      	ldr	r3, [pc, #716]	; (8002aa8 <sampling+0x1260>)
 80027da:	edd3 7a00 	vldr	s15, [r3]
 80027de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e6:	d503      	bpl.n	80027f0 <sampling+0xfa8>
 80027e8:	4baf      	ldr	r3, [pc, #700]	; (8002aa8 <sampling+0x1260>)
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
		//freq_point[0]=0.50;
		freq_point[1]=1-freq_point[0];
 80027f0:	4bad      	ldr	r3, [pc, #692]	; (8002aa8 <sampling+0x1260>)
 80027f2:	edd3 7a00 	vldr	s15, [r3]
 80027f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027fe:	4baa      	ldr	r3, [pc, #680]	; (8002aa8 <sampling+0x1260>)
 8002800:	edc3 7a01 	vstr	s15, [r3, #4]
		sample_Accu[1] = sample_Accu[1]>>13;
 8002804:	4ba9      	ldr	r3, [pc, #676]	; (8002aac <sampling+0x1264>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	135b      	asrs	r3, r3, #13
 800280a:	4aa8      	ldr	r2, [pc, #672]	; (8002aac <sampling+0x1264>)
 800280c:	6053      	str	r3, [r2, #4]

		//int16_t  ADSR[0].buffer_temp2=lfo_out [1] [i>>6];

		//ADSR[0].buffer_temp2=ADSR[0].buffer_temp2-8195;
		//sample_Accu[1] = sample_Accu[1] *lfo_out [0] [i>>6];     // vol lfo
		sample_Accu[1] = sample_Accu[1] *LFO[0].out[i>>6];
 800280e:	4ba7      	ldr	r3, [pc, #668]	; (8002aac <sampling+0x1264>)
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	4ba7      	ldr	r3, [pc, #668]	; (8002ab0 <sampling+0x1268>)
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	099b      	lsrs	r3, r3, #6
 8002818:	b29b      	uxth	r3, r3
 800281a:	49a6      	ldr	r1, [pc, #664]	; (8002ab4 <sampling+0x126c>)
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	440b      	add	r3, r1
 8002820:	88db      	ldrh	r3, [r3, #6]
 8002822:	fb02 f303 	mul.w	r3, r2, r3
 8002826:	4aa1      	ldr	r2, [pc, #644]	; (8002aac <sampling+0x1264>)
 8002828:	6053      	str	r3, [r2, #4]



		//	filter_accus[1]=sample_Accu[1]+((filter_hold[0])*0.5); // saw
	//	filter_accus[1]=	filter_accus[1]*adsr_level[3][i_frac];
		filter_accus[1]=	filter_accus[1]*adsr_level[3];
 800282a:	4ba3      	ldr	r3, [pc, #652]	; (8002ab8 <sampling+0x1270>)
 800282c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002830:	4ba2      	ldr	r3, [pc, #648]	; (8002abc <sampling+0x1274>)
 8002832:	edd3 7a03 	vldr	s15, [r3, #12]
 8002836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283a:	4b9f      	ldr	r3, [pc, #636]	; (8002ab8 <sampling+0x1270>)
 800283c:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);					// maybe allow bandpass insted of lpf
 8002840:	4b9d      	ldr	r3, [pc, #628]	; (8002ab8 <sampling+0x1270>)
 8002842:	ed93 7a01 	vldr	s14, [r3, #4]
 8002846:	4b98      	ldr	r3, [pc, #608]	; (8002aa8 <sampling+0x1260>)
 8002848:	edd3 7a00 	vldr	s15, [r3]
 800284c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002850:	4b99      	ldr	r3, [pc, #612]	; (8002ab8 <sampling+0x1270>)
 8002852:	edd3 6a02 	vldr	s13, [r3, #8]
 8002856:	4b94      	ldr	r3, [pc, #592]	; (8002aa8 <sampling+0x1260>)
 8002858:	edd3 7a01 	vldr	s15, [r3, #4]
 800285c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002864:	4b94      	ldr	r3, [pc, #592]	; (8002ab8 <sampling+0x1270>)
 8002866:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);
 800286a:	4b93      	ldr	r3, [pc, #588]	; (8002ab8 <sampling+0x1270>)
 800286c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002870:	4b8d      	ldr	r3, [pc, #564]	; (8002aa8 <sampling+0x1260>)
 8002872:	edd3 7a00 	vldr	s15, [r3]
 8002876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800287a:	4b8f      	ldr	r3, [pc, #572]	; (8002ab8 <sampling+0x1270>)
 800287c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002880:	4b89      	ldr	r3, [pc, #548]	; (8002aa8 <sampling+0x1260>)
 8002882:	edd3 7a01 	vldr	s15, [r3, #4]
 8002886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800288a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800288e:	4b8a      	ldr	r3, [pc, #552]	; (8002ab8 <sampling+0x1270>)
 8002890:	edc3 7a03 	vstr	s15, [r3, #12]
		filter_accus[4]=(filter_accus[3]*freq_point[0])+(filter_accus[4]*freq_point[1]);
 8002894:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <sampling+0x1270>)
 8002896:	ed93 7a03 	vldr	s14, [r3, #12]
 800289a:	4b83      	ldr	r3, [pc, #524]	; (8002aa8 <sampling+0x1260>)
 800289c:	edd3 7a00 	vldr	s15, [r3]
 80028a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a4:	4b84      	ldr	r3, [pc, #528]	; (8002ab8 <sampling+0x1270>)
 80028a6:	edd3 6a04 	vldr	s13, [r3, #16]
 80028aa:	4b7f      	ldr	r3, [pc, #508]	; (8002aa8 <sampling+0x1260>)
 80028ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80028b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b8:	4b7f      	ldr	r3, [pc, #508]	; (8002ab8 <sampling+0x1270>)
 80028ba:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[0])+(filter_accus[5]*freq_point[1]);
 80028be:	4b7e      	ldr	r3, [pc, #504]	; (8002ab8 <sampling+0x1270>)
 80028c0:	ed93 7a04 	vldr	s14, [r3, #16]
 80028c4:	4b78      	ldr	r3, [pc, #480]	; (8002aa8 <sampling+0x1260>)
 80028c6:	edd3 7a00 	vldr	s15, [r3]
 80028ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ce:	4b7a      	ldr	r3, [pc, #488]	; (8002ab8 <sampling+0x1270>)
 80028d0:	edd3 6a05 	vldr	s13, [r3, #20]
 80028d4:	4b74      	ldr	r3, [pc, #464]	; (8002aa8 <sampling+0x1260>)
 80028d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80028da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e2:	4b75      	ldr	r3, [pc, #468]	; (8002ab8 <sampling+0x1270>)
 80028e4:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_hold[0]=(filter_accus[5]+filter_accus[11])*0.5; //half sample , nice
 80028e8:	4b73      	ldr	r3, [pc, #460]	; (8002ab8 <sampling+0x1270>)
 80028ea:	ed93 7a05 	vldr	s14, [r3, #20]
 80028ee:	4b72      	ldr	r3, [pc, #456]	; (8002ab8 <sampling+0x1270>)
 80028f0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80028f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002900:	4b6f      	ldr	r3, [pc, #444]	; (8002ac0 <sampling+0x1278>)
 8002902:	edc3 7a00 	vstr	s15, [r3]
		sample_Accu[0] =filter_accus[5]; // out
 8002906:	4b6c      	ldr	r3, [pc, #432]	; (8002ab8 <sampling+0x1270>)
 8002908:	edd3 7a05 	vldr	s15, [r3, #20]
 800290c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002910:	ee17 2a90 	vmov	r2, s15
 8002914:	4b65      	ldr	r3, [pc, #404]	; (8002aac <sampling+0x1264>)
 8002916:	601a      	str	r2, [r3, #0]
		filter_accus[11]=filter_accus[5]; //write back new value
 8002918:	4b67      	ldr	r3, [pc, #412]	; (8002ab8 <sampling+0x1270>)
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	4a66      	ldr	r2, [pc, #408]	; (8002ab8 <sampling+0x1270>)
 800291e:	62d3      	str	r3, [r2, #44]	; 0x2c
		//sample_Accu[0] =sample_Accu[1];

		//filter 2
		sample_Accu[3]=play_holder2[i] >>5; // sine
 8002920:	4b63      	ldr	r3, [pc, #396]	; (8002ab0 <sampling+0x1268>)
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8002930:	115b      	asrs	r3, r3, #5
 8002932:	4a5e      	ldr	r2, [pc, #376]	; (8002aac <sampling+0x1264>)
 8002934:	60d3      	str	r3, [r2, #12]


				if (freq_point[2]>1) freq_point[2]=1;
 8002936:	4b5c      	ldr	r3, [pc, #368]	; (8002aa8 <sampling+0x1260>)
 8002938:	edd3 7a02 	vldr	s15, [r3, #8]
 800293c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002940:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002948:	dd03      	ble.n	8002952 <sampling+0x110a>
 800294a:	4b57      	ldr	r3, [pc, #348]	; (8002aa8 <sampling+0x1260>)
 800294c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002950:	609a      	str	r2, [r3, #8]

				freq_point[3]=1-freq_point[2];
 8002952:	4b55      	ldr	r3, [pc, #340]	; (8002aa8 <sampling+0x1260>)
 8002954:	edd3 7a02 	vldr	s15, [r3, #8]
 8002958:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800295c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002960:	4b51      	ldr	r3, [pc, #324]	; (8002aa8 <sampling+0x1260>)
 8002962:	edc3 7a03 	vstr	s15, [r3, #12]
				filter_accus[6]=sample_Accu[3];
 8002966:	4b51      	ldr	r3, [pc, #324]	; (8002aac <sampling+0x1264>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	ee07 3a90 	vmov	s15, r3
 800296e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002972:	4b51      	ldr	r3, [pc, #324]	; (8002ab8 <sampling+0x1270>)
 8002974:	edc3 7a06 	vstr	s15, [r3, #24]
			//	filter_accus[6]= filter_accus[6]*adsr_level[3]; // add adsr envelope

				filter_accus[7]=(filter_accus[6]*freq_point[2])+(filter_accus[7]*freq_point[3]);
 8002978:	4b4f      	ldr	r3, [pc, #316]	; (8002ab8 <sampling+0x1270>)
 800297a:	ed93 7a06 	vldr	s14, [r3, #24]
 800297e:	4b4a      	ldr	r3, [pc, #296]	; (8002aa8 <sampling+0x1260>)
 8002980:	edd3 7a02 	vldr	s15, [r3, #8]
 8002984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002988:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <sampling+0x1270>)
 800298a:	edd3 6a07 	vldr	s13, [r3, #28]
 800298e:	4b46      	ldr	r3, [pc, #280]	; (8002aa8 <sampling+0x1260>)
 8002990:	edd3 7a03 	vldr	s15, [r3, #12]
 8002994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800299c:	4b46      	ldr	r3, [pc, #280]	; (8002ab8 <sampling+0x1270>)
 800299e:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[2])+(filter_accus[8]*freq_point[3]);
 80029a2:	4b45      	ldr	r3, [pc, #276]	; (8002ab8 <sampling+0x1270>)
 80029a4:	ed93 7a07 	vldr	s14, [r3, #28]
 80029a8:	4b3f      	ldr	r3, [pc, #252]	; (8002aa8 <sampling+0x1260>)
 80029aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80029ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b2:	4b41      	ldr	r3, [pc, #260]	; (8002ab8 <sampling+0x1270>)
 80029b4:	edd3 6a08 	vldr	s13, [r3, #32]
 80029b8:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <sampling+0x1260>)
 80029ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80029be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c6:	4b3c      	ldr	r3, [pc, #240]	; (8002ab8 <sampling+0x1270>)
 80029c8:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[2])+(filter_accus[9]*freq_point[3]);
 80029cc:	4b3a      	ldr	r3, [pc, #232]	; (8002ab8 <sampling+0x1270>)
 80029ce:	ed93 7a08 	vldr	s14, [r3, #32]
 80029d2:	4b35      	ldr	r3, [pc, #212]	; (8002aa8 <sampling+0x1260>)
 80029d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80029d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029dc:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <sampling+0x1270>)
 80029de:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80029e2:	4b31      	ldr	r3, [pc, #196]	; (8002aa8 <sampling+0x1260>)
 80029e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80029e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f0:	4b31      	ldr	r3, [pc, #196]	; (8002ab8 <sampling+0x1270>)
 80029f2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				filter_accus[10]=(filter_accus[9]*freq_point[2])+(filter_accus[10]*freq_point[3]);
 80029f6:	4b30      	ldr	r3, [pc, #192]	; (8002ab8 <sampling+0x1270>)
 80029f8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80029fc:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <sampling+0x1260>)
 80029fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a06:	4b2c      	ldr	r3, [pc, #176]	; (8002ab8 <sampling+0x1270>)
 8002a08:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002a0c:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <sampling+0x1260>)
 8002a0e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a1a:	4b27      	ldr	r3, [pc, #156]	; (8002ab8 <sampling+0x1270>)
 8002a1c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_hold[1]=(filter_accus[10]+filter_accus[12])*0.5; //half sample
 8002a20:	4b25      	ldr	r3, [pc, #148]	; (8002ab8 <sampling+0x1270>)
 8002a22:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002a26:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <sampling+0x1270>)
 8002a28:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a38:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <sampling+0x1278>)
 8002a3a:	edc3 7a01 	vstr	s15, [r3, #4]
				sample_Accu[2] =filter_accus[10]; //out
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <sampling+0x1270>)
 8002a40:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002a44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a48:	ee17 2a90 	vmov	r2, s15
 8002a4c:	4b17      	ldr	r3, [pc, #92]	; (8002aac <sampling+0x1264>)
 8002a4e:	609a      	str	r2, [r3, #8]
				filter_accus[12]=filter_accus[10]; //write back new value
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <sampling+0x1270>)
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	4a18      	ldr	r2, [pc, #96]	; (8002ab8 <sampling+0x1270>)
 8002a56:	6313      	str	r3, [r2, #48]	; 0x30


filter_Accu=0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002a5e:	f102 0210 	add.w	r2, r2, #16
 8002a62:	6013      	str	r3, [r2, #0]
//filter_Accu=(sample_Accu[0]+sample_Accu[2])>>8; //filter + drum out


//filter_Accu=(sample_Accu[1]+sample_Accu[3])>>8; //filter + drum out ,clean out
 filter_Accu=sample_Accu[1]>>7;
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <sampling+0x1264>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	11db      	asrs	r3, r3, #7
 8002a6a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002a6e:	f102 0210 	add.w	r2, r2, #16
 8002a72:	6013      	str	r3, [r2, #0]

// filter_Accu=sample_Accu[2]>>11;
//filter_Accu=(sample_Accu[1]>>7)+(sample_Accu[3]>>8); //filter + drum out
 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8002a74:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <sampling+0x127c>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2bc7      	cmp	r3, #199	; 0xc7
 8002a7a:	d005      	beq.n	8002a88 <sampling+0x1240>
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <sampling+0x127c>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	3301      	adds	r3, #1
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <sampling+0x127c>)
 8002a86:	701a      	strb	r2, [r3, #0]

 if (filter_Accu>0xFFFF) filter_Accu=0xFFFF; else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 8002a88:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002a8c:	f103 0310 	add.w	r3, r3, #16
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a96:	db17      	blt.n	8002ac8 <sampling+0x1280>
 8002a98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a9c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002aa0:	f102 0210 	add.w	r2, r2, #16
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e01d      	b.n	8002ae4 <sampling+0x129c>
 8002aa8:	2000213c 	.word	0x2000213c
 8002aac:	20000c50 	.word	0x20000c50
 8002ab0:	20000c70 	.word	0x20000c70
 8002ab4:	20002e54 	.word	0x20002e54
 8002ab8:	200020ec 	.word	0x200020ec
 8002abc:	20002a04 	.word	0x20002a04
 8002ac0:	20002128 	.word	0x20002128
 8002ac4:	200020b8 	.word	0x200020b8
 8002ac8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002acc:	f103 0310 	add.w	r3, r3, #16
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ad6:	dc05      	bgt.n	8002ae4 <sampling+0x129c>
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <sampling+0x12f8>)
 8002ada:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002ade:	f102 0210 	add.w	r2, r2, #16
 8002ae2:	6013      	str	r3, [r2, #0]


 play_sample[i_total]=(filter_Accu>>6)+1024;   // final output disable for now 2544
 8002ae4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002ae8:	f103 0310 	add.w	r3, r3, #16
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	119b      	asrs	r3, r3, #6
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002af6:	f103 0302 	add.w	r3, r3, #2
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b00:	b291      	uxth	r1, r2
 8002b02:	4a10      	ldr	r2, [pc, #64]	; (8002b44 <sampling+0x12fc>)
 8002b04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 8002b08:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <sampling+0x1300>)
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <sampling+0x1300>)
 8002b12:	801a      	strh	r2, [r3, #0]
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <sampling+0x1300>)
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b1c:	f4ff add1 	bcc.w	80026c2 <sampling+0xe7a>
} // end of filer


//time_final=time_proc;   // in samples

if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 8002b20:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <sampling+0x1304>)
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <sampling+0x12ec>
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <sampling+0x1308>)
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <sampling+0x1308>)
 8002b32:	801a      	strh	r2, [r3, #0]



//bank_write=0;   /// total 320 sample time (39khz)
}
 8002b34:	bf00      	nop
 8002b36:	f507 5784 	add.w	r7, r7, #4224	; 0x1080
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	ffff0001 	.word	0xffff0001
 8002b44:	20000c74 	.word	0x20000c74
 8002b48:	20000c70 	.word	0x20000c70
 8002b4c:	200001b2 	.word	0x200001b2
 8002b50:	20002e52 	.word	0x20002e52

08002b54 <sine_count>:
mask_result=mask_tempB &1;


}

void sine_count(void) {         // sine_out is the output 9  bit  , works
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
int32_t sine_tempA;
int32_t sine_tempB;
int8_t sine_frac;


sine_counter=(sine_counterB>>5);  // up countr controlled by counter
 8002b5a:	4b2f      	ldr	r3, [pc, #188]	; (8002c18 <sine_count+0xc4>)
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <sine_count+0xc8>)
 8002b64:	801a      	strh	r2, [r3, #0]
sine_frac=sine_counterB & 31;  // grab last 5 bits, actual position for linear interpol,fractional
 8002b66:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <sine_count+0xc4>)
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	b25b      	sxtb	r3, r3
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	73fb      	strb	r3, [r7, #15]

	if (sine_counter>sine_length) sine_counter = sine_length;		// seems to be faster than using a for loop to calculate both values
 8002b72:	4b2a      	ldr	r3, [pc, #168]	; (8002c1c <sine_count+0xc8>)
 8002b74:	881a      	ldrh	r2, [r3, #0]
 8002b76:	4b2a      	ldr	r3, [pc, #168]	; (8002c20 <sine_count+0xcc>)
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d903      	bls.n	8002b86 <sine_count+0x32>
 8002b7e:	4b28      	ldr	r3, [pc, #160]	; (8002c20 <sine_count+0xcc>)
 8002b80:	881a      	ldrh	r2, [r3, #0]
 8002b82:	4b26      	ldr	r3, [pc, #152]	; (8002c1c <sine_count+0xc8>)
 8002b84:	801a      	strh	r2, [r3, #0]

	sine_out = sine_block[sine_counter];  // 0- 40000
 8002b86:	4b25      	ldr	r3, [pc, #148]	; (8002c1c <sine_count+0xc8>)
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4b25      	ldr	r3, [pc, #148]	; (8002c24 <sine_count+0xd0>)
 8002b8e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002b92:	461a      	mov	r2, r3
 8002b94:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <sine_count+0xd4>)
 8002b96:	601a      	str	r2, [r3, #0]
	sine_tempA=sine_out; // grab first value , needs to be always plus
 8002b98:	4b23      	ldr	r3, [pc, #140]	; (8002c28 <sine_count+0xd4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60bb      	str	r3, [r7, #8]
	sine_tempA=sine_tempA-20000; //convert to signed
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002ba4:	3b20      	subs	r3, #32
 8002ba6:	60bb      	str	r3, [r7, #8]

	sine_counter++;
 8002ba8:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <sine_count+0xc8>)
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	3301      	adds	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <sine_count+0xc8>)
 8002bb2:	801a      	strh	r2, [r3, #0]
	if (sine_counter>=sine_length)  sine_counter=0; // set to sample length
 8002bb4:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <sine_count+0xc8>)
 8002bb6:	881a      	ldrh	r2, [r3, #0]
 8002bb8:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <sine_count+0xcc>)
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d302      	bcc.n	8002bc6 <sine_count+0x72>
 8002bc0:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <sine_count+0xc8>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	801a      	strh	r2, [r3, #0]

			sine_out = sine_block[sine_counter];  // grab second value
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <sine_count+0xc8>)
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <sine_count+0xd0>)
 8002bce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <sine_count+0xd4>)
 8002bd6:	601a      	str	r2, [r3, #0]

		sine_tempB=sine_out; // grab first value
 8002bd8:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <sine_count+0xd4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB-20000;  // convert to signed and +256 to -256
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002be4:	3b20      	subs	r3, #32
 8002be6:	607b      	str	r3, [r7, #4]

			sine_tempB=	sine_tempB-sine_tempA;   // calculate fraction then add
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB>>5; // div 32 or 32 upsample
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	115b      	asrs	r3, r3, #5
 8002bf4:	607b      	str	r3, [r7, #4]

			sine_tempB=sine_tempB*sine_frac; // mult by steps , can overshoot !!
 8002bf6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	fb02 f303 	mul.w	r3, r2, r3
 8002c00:	607b      	str	r3, [r7, #4]

			sine_out=(sine_tempA+sine_tempB);   // add back to start value
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4413      	add	r3, r2
 8002c08:	4a07      	ldr	r2, [pc, #28]	; (8002c28 <sine_count+0xd4>)
 8002c0a:	6013      	str	r3, [r2, #0]
			//sine_tempA=sine_tempA; //needs

			//sine_out=sine_tempA;


}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	20000c36 	.word	0x20000c36
 8002c1c:	20000c34 	.word	0x20000c34
 8002c20:	20000142 	.word	0x20000142
 8002c24:	08009c30 	.word	0x08009c30
 8002c28:	20000c38 	.word	0x20000c38
 8002c2c:	00000000 	.word	0x00000000

08002c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c32:	b0a3      	sub	sp, #140	; 0x8c
 8002c34:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c36:	f001 fba1 	bl	800437c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c3a:	f000 fd17 	bl	800366c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c3e:	f000 fff3 	bl	8003c28 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c42:	f000 ffbb 	bl	8003bbc <MX_DMA_Init>
  MX_ADC1_Init();
 8002c46:	f000 fd7b 	bl	8003740 <MX_ADC1_Init>
  MX_SPI2_Init();
 8002c4a:	f000 fe63 	bl	8003914 <MX_SPI2_Init>
  MX_TIM3_Init();
 8002c4e:	f000 feeb 	bl	8003a28 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002c52:	f000 ff5f 	bl	8003b14 <MX_TIM4_Init>
  MX_I2C2_Init();
 8002c56:	f000 fdf9 	bl	800384c <MX_I2C2_Init>
  MX_TIM2_Init();
 8002c5a:	f000 fe91 	bl	8003980 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002c5e:	f000 fe23 	bl	80038a8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8002c62:	4baa      	ldr	r3, [pc, #680]	; (8002f0c <main+0x2dc>)
 8002c64:	673b      	str	r3, [r7, #112]	; 0x70



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2); // write to register hspi2
 8002c66:	48aa      	ldr	r0, [pc, #680]	; (8002f10 <main+0x2e0>)
 8002c68:	f004 ff2c 	bl	8007ac4 <HAL_SPI_Init>
  HAL_SPI_Init(&hspi1); // write to register hspi2
 8002c6c:	48a9      	ldr	r0, [pc, #676]	; (8002f14 <main+0x2e4>)
 8002c6e:	f004 ff29 	bl	8007ac4 <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8002c72:	48a9      	ldr	r0, [pc, #676]	; (8002f18 <main+0x2e8>)
 8002c74:	f005 fd78 	bl	8008768 <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 8002c78:	4ba8      	ldr	r3, [pc, #672]	; (8002f1c <main+0x2ec>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 8002c7e:	48a8      	ldr	r0, [pc, #672]	; (8002f20 <main+0x2f0>)
 8002c80:	f005 fd18 	bl	80086b4 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 8002c84:	48a7      	ldr	r0, [pc, #668]	; (8002f24 <main+0x2f4>)
 8002c86:	f005 fd15 	bl	80086b4 <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8002c8a:	2108      	movs	r1, #8
 8002c8c:	48a2      	ldr	r0, [pc, #648]	; (8002f18 <main+0x2e8>)
 8002c8e:	f005 fe27 	bl	80088e0 <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 8002c92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c96:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 8002c9c:	48a2      	ldr	r0, [pc, #648]	; (8002f28 <main+0x2f8>)
 8002c9e:	f001 fc47 	bl	8004530 <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8002ca2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ca6:	49a1      	ldr	r1, [pc, #644]	; (8002f2c <main+0x2fc>)
 8002ca8:	489f      	ldr	r0, [pc, #636]	; (8002f28 <main+0x2f8>)
 8002caa:	f001 fd81 	bl	80047b0 <HAL_ADC_Start_DMA>
//HAL_DMA_Init(&hdma_spi2_tx);

HAL_I2C_MspInit(&hi2c2);
 8002cae:	48a0      	ldr	r0, [pc, #640]	; (8002f30 <main+0x300>)
 8002cb0:	f001 f8f4 	bl	8003e9c <HAL_I2C_MspInit>
uint8_t send_spi1[5]={0x90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
 8002cb4:	4a9f      	ldr	r2, [pc, #636]	; (8002f34 <main+0x304>)
 8002cb6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002cba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cbe:	6018      	str	r0, [r3, #0]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	7019      	strb	r1, [r3, #0]





HAL_Delay(5);
 8002cc4:	2005      	movs	r0, #5
 8002cc6:	f001 fbcb 	bl	8004460 <HAL_Delay>


send_spi1[0]=0x06; //enable write  , only lasts for single operation
 8002cca:	2306      	movs	r3, #6
 8002ccc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2110      	movs	r1, #16
 8002cd4:	4898      	ldr	r0, [pc, #608]	; (8002f38 <main+0x308>)
 8002cd6:	f003 fad7 	bl	8006288 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002cda:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	488b      	ldr	r0, [pc, #556]	; (8002f14 <main+0x2e4>)
 8002ce6:	f004 ff76 	bl	8007bd6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002cea:	2201      	movs	r2, #1
 8002cec:	2110      	movs	r1, #16
 8002cee:	4892      	ldr	r0, [pc, #584]	; (8002f38 <main+0x308>)
 8002cf0:	f003 faca 	bl	8006288 <HAL_GPIO_WritePin>
HAL_Delay(5);
 8002cf4:	2005      	movs	r0, #5
 8002cf6:	f001 fbb3 	bl	8004460 <HAL_Delay>
send_spi1[0]=0x20; //sector erase
 8002cfa:	2320      	movs	r3, #32
 8002cfc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
send_spi1[1]=0; //24bit address msb
 8002d00:	2300      	movs	r3, #0
 8002d02:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
send_spi1[2]=0; //24bit address
 8002d06:	2300      	movs	r3, #0
 8002d08:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
send_spi1[3]=1; //24bit address lsb
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 8002d12:	2200      	movs	r2, #0
 8002d14:	2110      	movs	r1, #16
 8002d16:	4888      	ldr	r0, [pc, #544]	; (8002f38 <main+0x308>)
 8002d18:	f003 fab6 	bl	8006288 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works
 8002d1c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d24:	2204      	movs	r2, #4
 8002d26:	487b      	ldr	r0, [pc, #492]	; (8002f14 <main+0x2e4>)
 8002d28:	f004 ff55 	bl	8007bd6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	2110      	movs	r1, #16
 8002d30:	4881      	ldr	r0, [pc, #516]	; (8002f38 <main+0x308>)
 8002d32:	f003 faa9 	bl	8006288 <HAL_GPIO_WritePin>


send_spi1[0]=0x05; //read status register  if writing
 8002d36:	2305      	movs	r3, #5
 8002d38:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
send_spi1[1]=0; //24bit address msb
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
status_reg[1]=1; // set busy on
 8002d42:	4b7e      	ldr	r3, [pc, #504]	; (8002f3c <main+0x30c>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	705a      	strb	r2, [r3, #1]

while (status_reg[1]&1){								// check if write busy
 8002d48:	e012      	b.n	8002d70 <main+0x140>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2110      	movs	r1, #16
 8002d4e:	487a      	ldr	r0, [pc, #488]	; (8002f38 <main+0x308>)
 8002d50:	f003 fa9a 	bl	8006288 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 8002d54:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002d58:	23c8      	movs	r3, #200	; 0xc8
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	4a77      	ldr	r2, [pc, #476]	; (8002f3c <main+0x30c>)
 8002d60:	486c      	ldr	r0, [pc, #432]	; (8002f14 <main+0x2e4>)
 8002d62:	f005 f985 	bl	8008070 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002d66:	2201      	movs	r2, #1
 8002d68:	2110      	movs	r1, #16
 8002d6a:	4873      	ldr	r0, [pc, #460]	; (8002f38 <main+0x308>)
 8002d6c:	f003 fa8c 	bl	8006288 <HAL_GPIO_WritePin>
while (status_reg[1]&1){								// check if write busy
 8002d70:	4b72      	ldr	r3, [pc, #456]	; (8002f3c <main+0x30c>)
 8002d72:	785b      	ldrb	r3, [r3, #1]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1e6      	bne.n	8002d4a <main+0x11a>
}

send_spi1[0]=0x06; //enable write again
 8002d7c:	2306      	movs	r3, #6
 8002d7e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002d82:	2200      	movs	r2, #0
 8002d84:	2110      	movs	r1, #16
 8002d86:	486c      	ldr	r0, [pc, #432]	; (8002f38 <main+0x308>)
 8002d88:	f003 fa7e 	bl	8006288 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002d8c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002d90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d94:	2201      	movs	r2, #1
 8002d96:	485f      	ldr	r0, [pc, #380]	; (8002f14 <main+0x2e4>)
 8002d98:	f004 ff1d 	bl	8007bd6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	2110      	movs	r1, #16
 8002da0:	4865      	ldr	r0, [pc, #404]	; (8002f38 <main+0x308>)
 8002da2:	f003 fa71 	bl	8006288 <HAL_GPIO_WritePin>
HAL_Delay(5);
 8002da6:	2005      	movs	r0, #5
 8002da8:	f001 fb5a 	bl	8004460 <HAL_Delay>




//uint8_t temp_spi1[]={0x02,0,0,1,"H","E","L","L","O"," ","W","O","R","L","D",250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
uint8_t temp_spi1[]={0x02,0,0,1,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
 8002dac:	4b64      	ldr	r3, [pc, #400]	; (8002f40 <main+0x310>)
 8002dae:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002db2:	461d      	mov	r5, r3
 8002db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002db8:	682b      	ldr	r3, [r5, #0]
 8002dba:	8023      	strh	r3, [r4, #0]
memcpy  (send_spi1,temp_spi1, 14);   // copy new array over old
 8002dbc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002dc0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002dc4:	220e      	movs	r2, #14
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f006 fd5a 	bl	8009880 <memcpy>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2110      	movs	r1, #16
 8002dd0:	4859      	ldr	r0, [pc, #356]	; (8002f38 <main+0x308>)
 8002dd2:	f003 fa59 	bl	8006288 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 14, 1000);  //address,page program
 8002dd6:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dde:	220e      	movs	r2, #14
 8002de0:	484c      	ldr	r0, [pc, #304]	; (8002f14 <main+0x2e4>)
 8002de2:	f004 fef8 	bl	8007bd6 <HAL_SPI_Transmit>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002de6:	2201      	movs	r2, #1
 8002de8:	2110      	movs	r1, #16
 8002dea:	4853      	ldr	r0, [pc, #332]	; (8002f38 <main+0x308>)
 8002dec:	f003 fa4c 	bl	8006288 <HAL_GPIO_WritePin>




HAL_Delay(25);
 8002df0:	2019      	movs	r0, #25
 8002df2:	f001 fb35 	bl	8004460 <HAL_Delay>
send_spi1[0]=0x04; //disable write
 8002df6:	2304      	movs	r3, #4
 8002df8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2110      	movs	r1, #16
 8002e00:	484d      	ldr	r0, [pc, #308]	; (8002f38 <main+0x308>)
 8002e02:	f003 fa41 	bl	8006288 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002e06:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4840      	ldr	r0, [pc, #256]	; (8002f14 <main+0x2e4>)
 8002e12:	f004 fee0 	bl	8007bd6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002e16:	2201      	movs	r2, #1
 8002e18:	2110      	movs	r1, #16
 8002e1a:	4847      	ldr	r0, [pc, #284]	; (8002f38 <main+0x308>)
 8002e1c:	f003 fa34 	bl	8006288 <HAL_GPIO_WritePin>

HAL_Delay(5);
 8002e20:	2005      	movs	r0, #5
 8002e22:	f001 fb1d 	bl	8004460 <HAL_Delay>
memcpy  (send_spi1,return_spi1, 14);   // clear out
 8002e26:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e2a:	220e      	movs	r2, #14
 8002e2c:	4945      	ldr	r1, [pc, #276]	; (8002f44 <main+0x314>)
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f006 fd26 	bl	8009880 <memcpy>
send_spi1[0]=0x03; //read page 1
 8002e34:	2303      	movs	r3, #3
 8002e36:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
send_spi1[1]=0; //24bit address msb
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
send_spi1[2]=0; //24bit address
 8002e40:	2300      	movs	r3, #0
 8002e42:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
send_spi1[3]=1; //24bit address lsb
 8002e46:	2301      	movs	r3, #1
 8002e48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2110      	movs	r1, #16
 8002e50:	4839      	ldr	r0, [pc, #228]	; (8002f38 <main+0x308>)
 8002e52:	f003 fa19 	bl	8006288 <HAL_GPIO_WritePin>

HAL_SPI_Transmit (&hspi1, send_spi1, 4, 100);
 8002e56:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002e5a:	2364      	movs	r3, #100	; 0x64
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	482d      	ldr	r0, [pc, #180]	; (8002f14 <main+0x2e4>)
 8002e60:	f004 feb9 	bl	8007bd6 <HAL_SPI_Transmit>
HAL_SPI_Receive (&hspi1, return_spi1, 10, 100);   // works fine
 8002e64:	2364      	movs	r3, #100	; 0x64
 8002e66:	220a      	movs	r2, #10
 8002e68:	4936      	ldr	r1, [pc, #216]	; (8002f44 <main+0x314>)
 8002e6a:	482a      	ldr	r0, [pc, #168]	; (8002f14 <main+0x2e4>)
 8002e6c:	f004 ffef 	bl	8007e4e <HAL_SPI_Receive>

//HAL_SPI_TransmitReceive(&hspi1, send_spi1, return_spi1,14, 100);  // better in case skip , 4 bytes is null then data , slow
//HAL_Delay(5);

//HAL_SPI_Receive(&hspi1, return_spi1, 12, 1000);  // reverse msb ?
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002e70:	2201      	movs	r2, #1
 8002e72:	2110      	movs	r1, #16
 8002e74:	4830      	ldr	r0, [pc, #192]	; (8002f38 <main+0x308>)
 8002e76:	f003 fa07 	bl	8006288 <HAL_GPIO_WritePin>



HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002e7a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e82:	2201      	movs	r2, #1
 8002e84:	4823      	ldr	r0, [pc, #140]	; (8002f14 <main+0x2e4>)
 8002e86:	f004 fea6 	bl	8007bd6 <HAL_SPI_Transmit>

uint8_t potSource2[64];



for(i=0;i<5;i++){     // 256
 8002e8a:	4b2f      	ldr	r3, [pc, #188]	; (8002f48 <main+0x318>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	801a      	strh	r2, [r3, #0]
 8002e90:	e02f      	b.n	8002ef2 <main+0x2c2>
HAL_I2C_Mem_Read(&hi2c2, 160, 64+(i*64), 2,&potSource2, 64,1000);		// all good readin eeprom  values
 8002e92:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <main+0x318>)
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	3301      	adds	r3, #1
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	019b      	lsls	r3, r3, #6
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ea2:	9302      	str	r3, [sp, #8]
 8002ea4:	2340      	movs	r3, #64	; 0x40
 8002ea6:	9301      	str	r3, [sp, #4]
 8002ea8:	f107 0308 	add.w	r3, r7, #8
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	2302      	movs	r3, #2
 8002eb0:	21a0      	movs	r1, #160	; 0xa0
 8002eb2:	481f      	ldr	r0, [pc, #124]	; (8002f30 <main+0x300>)
 8002eb4:	f003 fc40 	bl	8006738 <HAL_I2C_Mem_Read>

memcpy (potSource+(i*64),potSource2,sizeof(potSource2));   //this works  ok now
 8002eb8:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <main+0x318>)
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	019b      	lsls	r3, r3, #6
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4b22      	ldr	r3, [pc, #136]	; (8002f4c <main+0x31c>)
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f107 0408 	add.w	r4, r7, #8
 8002ec8:	469c      	mov	ip, r3
 8002eca:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8002ece:	4665      	mov	r5, ip
 8002ed0:	4626      	mov	r6, r4
 8002ed2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002ed4:	6028      	str	r0, [r5, #0]
 8002ed6:	6069      	str	r1, [r5, #4]
 8002ed8:	60aa      	str	r2, [r5, #8]
 8002eda:	60eb      	str	r3, [r5, #12]
 8002edc:	3410      	adds	r4, #16
 8002ede:	f10c 0c10 	add.w	ip, ip, #16
 8002ee2:	4574      	cmp	r4, lr
 8002ee4:	d1f3      	bne.n	8002ece <main+0x29e>
for(i=0;i<5;i++){     // 256
 8002ee6:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <main+0x318>)
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	3301      	adds	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <main+0x318>)
 8002ef0:	801a      	strh	r2, [r3, #0]
 8002ef2:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <main+0x318>)
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d9cb      	bls.n	8002e92 <main+0x262>


}

for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <main+0x318>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	801a      	strh	r2, [r3, #0]
 8002f00:	e07c      	b.n	8002ffc <main+0x3cc>

for 	(n=0;n<18;n++){					// this is ok
 8002f02:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <main+0x320>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	801a      	strh	r2, [r3, #0]
 8002f08:	e06e      	b.n	8002fe8 <main+0x3b8>
 8002f0a:	bf00      	nop
 8002f0c:	0800d2f0 	.word	0x0800d2f0
 8002f10:	20003d00 	.word	0x20003d00
 8002f14:	20003ca8 	.word	0x20003ca8
 8002f18:	20003e00 	.word	0x20003e00
 8002f1c:	40000400 	.word	0x40000400
 8002f20:	20003db8 	.word	0x20003db8
 8002f24:	20003e48 	.word	0x20003e48
 8002f28:	20003bac 	.word	0x20003bac
 8002f2c:	20001480 	.word	0x20001480
 8002f30:	20003c54 	.word	0x20003c54
 8002f34:	08009b94 	.word	0x08009b94
 8002f38:	40020000 	.word	0x40020000
 8002f3c:	200001b8 	.word	0x200001b8
 8002f40:	08009b9c 	.word	0x08009b9c
 8002f44:	20002e3c 	.word	0x20002e3c
 8002f48:	20000c70 	.word	0x20000c70
 8002f4c:	20000ab4 	.word	0x20000ab4
 8002f50:	20000c4e 	.word	0x20000c4e
	if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 8002f54:	4ba0      	ldr	r3, [pc, #640]	; (80031d8 <main+0x5a8>)
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d114      	bne.n	8002f86 <main+0x356>
 8002f5c:	4b9f      	ldr	r3, [pc, #636]	; (80031dc <main+0x5ac>)
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	4b9c      	ldr	r3, [pc, #624]	; (80031dc <main+0x5ac>)
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	460b      	mov	r3, r1
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	440b      	add	r3, r1
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	4619      	mov	r1, r3
 8002f78:	4b97      	ldr	r3, [pc, #604]	; (80031d8 <main+0x5a8>)
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3a80      	subs	r2, #128	; 0x80
 8002f80:	b2d1      	uxtb	r1, r2
 8002f82:	4a97      	ldr	r2, [pc, #604]	; (80031e0 <main+0x5b0>)
 8002f84:	54d1      	strb	r1, [r2, r3]
	if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 8002f86:	4b94      	ldr	r3, [pc, #592]	; (80031d8 <main+0x5a8>)
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d114      	bne.n	8002fb8 <main+0x388>
 8002f8e:	4b93      	ldr	r3, [pc, #588]	; (80031dc <main+0x5ac>)
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3310      	adds	r3, #16
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	4b90      	ldr	r3, [pc, #576]	; (80031dc <main+0x5ac>)
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	440b      	add	r3, r1
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4b8b      	ldr	r3, [pc, #556]	; (80031d8 <main+0x5a8>)
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	440b      	add	r3, r1
 8002fb0:	00d2      	lsls	r2, r2, #3
 8002fb2:	b2d1      	uxtb	r1, r2
 8002fb4:	4a8a      	ldr	r2, [pc, #552]	; (80031e0 <main+0x5b0>)
 8002fb6:	54d1      	strb	r1, [r2, r3]
	if (n>1)  gfx_ram[(i*18)+n] = 255;
 8002fb8:	4b87      	ldr	r3, [pc, #540]	; (80031d8 <main+0x5a8>)
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d90d      	bls.n	8002fdc <main+0x3ac>
 8002fc0:	4b86      	ldr	r3, [pc, #536]	; (80031dc <main+0x5ac>)
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4b81      	ldr	r3, [pc, #516]	; (80031d8 <main+0x5a8>)
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	4a82      	ldr	r2, [pc, #520]	; (80031e0 <main+0x5b0>)
 8002fd8:	21ff      	movs	r1, #255	; 0xff
 8002fda:	54d1      	strb	r1, [r2, r3]
for 	(n=0;n<18;n++){					// this is ok
 8002fdc:	4b7e      	ldr	r3, [pc, #504]	; (80031d8 <main+0x5a8>)
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	4b7c      	ldr	r3, [pc, #496]	; (80031d8 <main+0x5a8>)
 8002fe6:	801a      	strh	r2, [r3, #0]
 8002fe8:	4b7b      	ldr	r3, [pc, #492]	; (80031d8 <main+0x5a8>)
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	2b11      	cmp	r3, #17
 8002fee:	d9b1      	bls.n	8002f54 <main+0x324>
for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8002ff0:	4b7a      	ldr	r3, [pc, #488]	; (80031dc <main+0x5ac>)
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	4b78      	ldr	r3, [pc, #480]	; (80031dc <main+0x5ac>)
 8002ffa:	801a      	strh	r2, [r3, #0]
 8002ffc:	4b77      	ldr	r3, [pc, #476]	; (80031dc <main+0x5ac>)
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	2b3f      	cmp	r3, #63	; 0x3f
 8003002:	f67f af7e 	bls.w	8002f02 <main+0x2d2>

}



for(i=0;i<260;i++){			// write potvalues ,for display
 8003006:	4b75      	ldr	r3, [pc, #468]	; (80031dc <main+0x5ac>)
 8003008:	2200      	movs	r2, #0
 800300a:	801a      	strh	r2, [r3, #0]
 800300c:	e010      	b.n	8003030 <main+0x400>
	potValues[i]=potSource[i]>>4;
 800300e:	4b73      	ldr	r3, [pc, #460]	; (80031dc <main+0x5ac>)
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	4b73      	ldr	r3, [pc, #460]	; (80031e4 <main+0x5b4>)
 8003016:	5c9b      	ldrb	r3, [r3, r2]
 8003018:	4a70      	ldr	r2, [pc, #448]	; (80031dc <main+0x5ac>)
 800301a:	8812      	ldrh	r2, [r2, #0]
 800301c:	091b      	lsrs	r3, r3, #4
 800301e:	b2d9      	uxtb	r1, r3
 8003020:	4b71      	ldr	r3, [pc, #452]	; (80031e8 <main+0x5b8>)
 8003022:	5499      	strb	r1, [r3, r2]
for(i=0;i<260;i++){			// write potvalues ,for display
 8003024:	4b6d      	ldr	r3, [pc, #436]	; (80031dc <main+0x5ac>)
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	4b6b      	ldr	r3, [pc, #428]	; (80031dc <main+0x5ac>)
 800302e:	801a      	strh	r2, [r3, #0]
 8003030:	4b6a      	ldr	r3, [pc, #424]	; (80031dc <main+0x5ac>)
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003038:	d3e9      	bcc.n	800300e <main+0x3de>
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////// variable fill

memcpy(&seq,potSource,46 );  // load from potSource
 800303a:	4a6c      	ldr	r2, [pc, #432]	; (80031ec <main+0x5bc>)
 800303c:	4b69      	ldr	r3, [pc, #420]	; (80031e4 <main+0x5b4>)
 800303e:	4614      	mov	r4, r2
 8003040:	461d      	mov	r5, r3
 8003042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800304a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800304e:	c407      	stmia	r4!, {r0, r1, r2}
 8003050:	8023      	strh	r3, [r4, #0]


for(i=0;i<10;i++){
 8003052:	4b62      	ldr	r3, [pc, #392]	; (80031dc <main+0x5ac>)
 8003054:	2200      	movs	r2, #0
 8003056:	801a      	strh	r2, [r3, #0]
 8003058:	e047      	b.n	80030ea <main+0x4ba>
	if (i<8){    memcpy(&note[i],potSource+46+(i*14),14 );}  //grab note settings ,112 total , works ok
 800305a:	4b60      	ldr	r3, [pc, #384]	; (80031dc <main+0x5ac>)
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	2b07      	cmp	r3, #7
 8003060:	d812      	bhi.n	8003088 <main+0x458>
 8003062:	4b5e      	ldr	r3, [pc, #376]	; (80031dc <main+0x5ac>)
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	4a61      	ldr	r2, [pc, #388]	; (80031f0 <main+0x5c0>)
 800306a:	1898      	adds	r0, r3, r2
 800306c:	4b5b      	ldr	r3, [pc, #364]	; (80031dc <main+0x5ac>)
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	461a      	mov	r2, r3
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	332e      	adds	r3, #46	; 0x2e
 800307c:	4a59      	ldr	r2, [pc, #356]	; (80031e4 <main+0x5b4>)
 800307e:	4413      	add	r3, r2
 8003080:	220e      	movs	r2, #14
 8003082:	4619      	mov	r1, r3
 8003084:	f006 fbfc 	bl	8009880 <memcpy>

	memcpy(&LFO[i],potSource+158+(i*5),5 );  // + 50
 8003088:	4b54      	ldr	r3, [pc, #336]	; (80031dc <main+0x5ac>)
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	231a      	movs	r3, #26
 8003090:	fb02 f303 	mul.w	r3, r2, r3
 8003094:	4a57      	ldr	r2, [pc, #348]	; (80031f4 <main+0x5c4>)
 8003096:	1898      	adds	r0, r3, r2
 8003098:	4b50      	ldr	r3, [pc, #320]	; (80031dc <main+0x5ac>)
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	339e      	adds	r3, #158	; 0x9e
 80030a6:	4a4f      	ldr	r2, [pc, #316]	; (80031e4 <main+0x5b4>)
 80030a8:	4413      	add	r3, r2
 80030aa:	2205      	movs	r2, #5
 80030ac:	4619      	mov	r1, r3
 80030ae:	f006 fbe7 	bl	8009880 <memcpy>
	memcpy(&ADSR[i],potSource+208+(i*5),5 );  // +50  ,
 80030b2:	4b4a      	ldr	r3, [pc, #296]	; (80031dc <main+0x5ac>)
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	f44f 7307 	mov.w	r3, #540	; 0x21c
 80030bc:	fb02 f303 	mul.w	r3, r2, r3
 80030c0:	4a4d      	ldr	r2, [pc, #308]	; (80031f8 <main+0x5c8>)
 80030c2:	1898      	adds	r0, r3, r2
 80030c4:	4b45      	ldr	r3, [pc, #276]	; (80031dc <main+0x5ac>)
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	33d0      	adds	r3, #208	; 0xd0
 80030d2:	4a44      	ldr	r2, [pc, #272]	; (80031e4 <main+0x5b4>)
 80030d4:	4413      	add	r3, r2
 80030d6:	2205      	movs	r2, #5
 80030d8:	4619      	mov	r1, r3
 80030da:	f006 fbd1 	bl	8009880 <memcpy>
for(i=0;i<10;i++){
 80030de:	4b3f      	ldr	r3, [pc, #252]	; (80031dc <main+0x5ac>)
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	3301      	adds	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	4b3d      	ldr	r3, [pc, #244]	; (80031dc <main+0x5ac>)
 80030e8:	801a      	strh	r2, [r3, #0]
 80030ea:	4b3c      	ldr	r3, [pc, #240]	; (80031dc <main+0x5ac>)
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	2b09      	cmp	r3, #9
 80030f0:	d9b3      	bls.n	800305a <main+0x42a>




float tempo_hold;  // calculate tempo look up
for (i=0;i<161;i++) {
 80030f2:	4b3a      	ldr	r3, [pc, #232]	; (80031dc <main+0x5ac>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	801a      	strh	r2, [r3, #0]
 80030f8:	e03d      	b.n	8003176 <main+0x546>

tempo_hold=(i+180)*0.0166666666;
 80030fa:	4b38      	ldr	r3, [pc, #224]	; (80031dc <main+0x5ac>)
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	33b4      	adds	r3, #180	; 0xb4
 8003100:	4618      	mov	r0, r3
 8003102:	f7fd fae5 	bl	80006d0 <__aeabi_i2d>
 8003106:	a330      	add	r3, pc, #192	; (adr r3, 80031c8 <main+0x598>)
 8003108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310c:	f7fd f864 	bl	80001d8 <__aeabi_dmul>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4610      	mov	r0, r2
 8003116:	4619      	mov	r1, r3
 8003118:	f7fd fb44 	bl	80007a4 <__aeabi_d2f>
 800311c:	4603      	mov	r3, r0
 800311e:	667b      	str	r3, [r7, #100]	; 0x64

tempo_hold=	1/tempo_hold;
 8003120:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003124:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8003128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800312c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
//tempo_hold=	tempo_hold*2187.6*4;      // change for the sake of note length
tempo_hold=	tempo_hold*2187.6*1;      // change for the sake of note length
 8003130:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003132:	f7fd fadf 	bl	80006f4 <__aeabi_f2d>
 8003136:	a326      	add	r3, pc, #152	; (adr r3, 80031d0 <main+0x5a0>)
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	f7fd f84c 	bl	80001d8 <__aeabi_dmul>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	f7fd fb2c 	bl	80007a4 <__aeabi_d2f>
 800314c:	4603      	mov	r3, r0
 800314e:	667b      	str	r3, [r7, #100]	; 0x64
tempo_lut[i]=tempo_hold;
 8003150:	4b22      	ldr	r3, [pc, #136]	; (80031dc <main+0x5ac>)
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800315a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800315e:	ee17 3a90 	vmov	r3, s15
 8003162:	b299      	uxth	r1, r3
 8003164:	4b25      	ldr	r3, [pc, #148]	; (80031fc <main+0x5cc>)
 8003166:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<161;i++) {
 800316a:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <main+0x5ac>)
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	3301      	adds	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <main+0x5ac>)
 8003174:	801a      	strh	r2, [r3, #0]
 8003176:	4b19      	ldr	r3, [pc, #100]	; (80031dc <main+0x5ac>)
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	2ba0      	cmp	r3, #160	; 0xa0
 800317c:	d9bd      	bls.n	80030fa <main+0x4ca>
}
isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount
 800317e:	4b20      	ldr	r3, [pc, #128]	; (8003200 <main+0x5d0>)
 8003180:	f240 223b 	movw	r2, #571	; 0x23b
 8003184:	801a      	strh	r2, [r3, #0]

noteTiming=24;
 8003186:	4b1f      	ldr	r3, [pc, #124]	; (8003204 <main+0x5d4>)
 8003188:	2218      	movs	r2, #24
 800318a:	701a      	strb	r2, [r3, #0]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 800318c:	4b13      	ldr	r3, [pc, #76]	; (80031dc <main+0x5ac>)
 800318e:	2200      	movs	r2, #0
 8003190:	801a      	strh	r2, [r3, #0]
 8003192:	e00b      	b.n	80031ac <main+0x57c>
	spell[i]=67;
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <main+0x5ac>)
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <main+0x5d8>)
 800319c:	2143      	movs	r1, #67	; 0x43
 800319e:	5499      	strb	r1, [r3, r2]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 80031a0:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <main+0x5ac>)
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	3301      	adds	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <main+0x5ac>)
 80031aa:	801a      	strh	r2, [r3, #0]
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <main+0x5ac>)
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80031b4:	d3ee      	bcc.n	8003194 <main+0x564>

}

display_fill();
 80031b6:	f7fe f8df 	bl	8001378 <display_fill>
// build display, enc_lut2, works good

for (i=0;i<512;i++)	{gfx_char[i]=gfx_char[i];
 80031ba:	4b08      	ldr	r3, [pc, #32]	; (80031dc <main+0x5ac>)
 80031bc:	2200      	movs	r2, #0
 80031be:	801a      	strh	r2, [r3, #0]
 80031c0:	e034      	b.n	800322c <main+0x5fc>
 80031c2:	bf00      	nop
 80031c4:	f3af 8000 	nop.w
 80031c8:	0febdd13 	.word	0x0febdd13
 80031cc:	3f911111 	.word	0x3f911111
 80031d0:	33333333 	.word	0x33333333
 80031d4:	40a11733 	.word	0x40a11733
 80031d8:	20000c4e 	.word	0x20000c4e
 80031dc:	20000c70 	.word	0x20000c70
 80031e0:	2000257c 	.word	0x2000257c
 80031e4:	20000ab4 	.word	0x20000ab4
 80031e8:	20000934 	.word	0x20000934
 80031ec:	20003a54 	.word	0x20003a54
 80031f0:	200039e4 	.word	0x200039e4
 80031f4:	20002e54 	.word	0x20002e54
 80031f8:	20002f58 	.word	0x20002f58
 80031fc:	20002438 	.word	0x20002438
 8003200:	20000c40 	.word	0x20000c40
 8003204:	20000930 	.word	0x20000930
 8003208:	20000000 	.word	0x20000000
 800320c:	4b88      	ldr	r3, [pc, #544]	; (8003430 <main+0x800>)
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	4619      	mov	r1, r3
 8003212:	4b87      	ldr	r3, [pc, #540]	; (8003430 <main+0x800>)
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	4b86      	ldr	r3, [pc, #536]	; (8003434 <main+0x804>)
 800321a:	5c59      	ldrb	r1, [r3, r1]
 800321c:	4b85      	ldr	r3, [pc, #532]	; (8003434 <main+0x804>)
 800321e:	5499      	strb	r1, [r3, r2]
 8003220:	4b83      	ldr	r3, [pc, #524]	; (8003430 <main+0x800>)
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	3301      	adds	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	4b81      	ldr	r3, [pc, #516]	; (8003430 <main+0x800>)
 800322a:	801a      	strh	r2, [r3, #0]
 800322c:	4b80      	ldr	r3, [pc, #512]	; (8003430 <main+0x800>)
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003234:	d3ea      	bcc.n	800320c <main+0x5dc>


}    //font replace
//    Merge menu times   here    char , int8 ,int16  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
for (n=0;n<256;n++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8003236:	4b80      	ldr	r3, [pc, #512]	; (8003438 <main+0x808>)
 8003238:	2200      	movs	r2, #0
 800323a:	801a      	strh	r2, [r3, #0]
 800323c:	e00f      	b.n	800325e <main+0x62e>

	menu_parser();  // run it closer to default_menu size ,times
 800323e:	f7fd fddb 	bl	8000df8 <menu_parser>
	default_menu3[n>>1]=64;
 8003242:	4b7d      	ldr	r3, [pc, #500]	; (8003438 <main+0x808>)
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	085b      	lsrs	r3, r3, #1
 8003248:	b29b      	uxth	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	4b7b      	ldr	r3, [pc, #492]	; (800343c <main+0x80c>)
 800324e:	2140      	movs	r1, #64	; 0x40
 8003250:	5499      	strb	r1, [r3, r2]
for (n=0;n<256;n++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8003252:	4b79      	ldr	r3, [pc, #484]	; (8003438 <main+0x808>)
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	3301      	adds	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	4b77      	ldr	r3, [pc, #476]	; (8003438 <main+0x808>)
 800325c:	801a      	strh	r2, [r3, #0]
 800325e:	4b76      	ldr	r3, [pc, #472]	; (8003438 <main+0x808>)
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	2bff      	cmp	r3, #255	; 0xff
 8003264:	d9eb      	bls.n	800323e <main+0x60e>
}
menu_title_count--;  //count back one
 8003266:	4b76      	ldr	r3, [pc, #472]	; (8003440 <main+0x810>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	3b01      	subs	r3, #1
 800326c:	b2da      	uxtb	r2, r3
 800326e:	4b74      	ldr	r3, [pc, #464]	; (8003440 <main+0x810>)
 8003270:	701a      	strb	r2, [r3, #0]

//   produce extra menu pages here /////////////////////////////////////////////////////////////////////////////////
uint16_t lut_temp2=0;
 8003272:	2300      	movs	r3, #0
 8003274:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
uint16_t lut_temp3=0;
 8003278:	2300      	movs	r3, #0
 800327a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c


menuSelect=0;
 800327e:	4b71      	ldr	r3, [pc, #452]	; (8003444 <main+0x814>)
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 8003284:	4b70      	ldr	r3, [pc, #448]	; (8003448 <main+0x818>)
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 800328a:	4b70      	ldr	r3, [pc, #448]	; (800344c <main+0x81c>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	3301      	adds	r3, #1
 8003290:	b2da      	uxtb	r2, r3
 8003292:	4b6e      	ldr	r3, [pc, #440]	; (800344c <main+0x81c>)
 8003294:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 8003296:	4b6e      	ldr	r3, [pc, #440]	; (8003450 <main+0x820>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3301      	adds	r3, #1
 800329c:	4a6c      	ldr	r2, [pc, #432]	; (8003450 <main+0x820>)
 800329e:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing

	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 80032a0:	4b6b      	ldr	r3, [pc, #428]	; (8003450 <main+0x820>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	2b06      	cmp	r3, #6
 80032aa:	d101      	bne.n	80032b0 <main+0x680>
 80032ac:	f7fd fee6 	bl	800107c <analoginputloopb>


if (loop_counter2==4024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 80032b0:	4b67      	ldr	r3, [pc, #412]	; (8003450 <main+0x820>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f640 72b8 	movw	r2, #4024	; 0xfb8
 80032b8:	4293      	cmp	r3, r2
 80032ba:	f040 8090 	bne.w	80033de <main+0x7ae>
	  if (mem_count==255) mem_count=0; else mem_count++;  // write to first this was moved for no logical reason ?
 80032be:	4b65      	ldr	r3, [pc, #404]	; (8003454 <main+0x824>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2bff      	cmp	r3, #255	; 0xff
 80032c4:	d103      	bne.n	80032ce <main+0x69e>
 80032c6:	4b63      	ldr	r3, [pc, #396]	; (8003454 <main+0x824>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e005      	b.n	80032da <main+0x6aa>
 80032ce:	4b61      	ldr	r3, [pc, #388]	; (8003454 <main+0x824>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	3301      	adds	r3, #1
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	4b5f      	ldr	r3, [pc, #380]	; (8003454 <main+0x824>)
 80032d8:	701a      	strb	r2, [r3, #0]

	// read values from stored

memcpy(potSource,&seq,46); // about 46 bytes
 80032da:	4a5f      	ldr	r2, [pc, #380]	; (8003458 <main+0x828>)
 80032dc:	4b5f      	ldr	r3, [pc, #380]	; (800345c <main+0x82c>)
 80032de:	4614      	mov	r4, r2
 80032e0:	461d      	mov	r5, r3
 80032e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80032ee:	c407      	stmia	r4!, {r0, r1, r2}
 80032f0:	8023      	strh	r3, [r4, #0]

for(i=0;i<10;i++){
 80032f2:	4b4f      	ldr	r3, [pc, #316]	; (8003430 <main+0x800>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	801a      	strh	r2, [r3, #0]
 80032f8:	e047      	b.n	800338a <main+0x75a>
	if (i<8){    memcpy(potSource+46+(i*14),&note[i],14 );}  //grab note settings ,112 total , works
 80032fa:	4b4d      	ldr	r3, [pc, #308]	; (8003430 <main+0x800>)
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	2b07      	cmp	r3, #7
 8003300:	d812      	bhi.n	8003328 <main+0x6f8>
 8003302:	4b4b      	ldr	r3, [pc, #300]	; (8003430 <main+0x800>)
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	332e      	adds	r3, #46	; 0x2e
 8003312:	4a51      	ldr	r2, [pc, #324]	; (8003458 <main+0x828>)
 8003314:	1898      	adds	r0, r3, r2
 8003316:	4b46      	ldr	r3, [pc, #280]	; (8003430 <main+0x800>)
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	4a50      	ldr	r2, [pc, #320]	; (8003460 <main+0x830>)
 800331e:	4413      	add	r3, r2
 8003320:	220e      	movs	r2, #14
 8003322:	4619      	mov	r1, r3
 8003324:	f006 faac 	bl	8009880 <memcpy>

	memcpy(potSource+158+(i*5),&LFO[i],5 );  // + 50
 8003328:	4b41      	ldr	r3, [pc, #260]	; (8003430 <main+0x800>)
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	461a      	mov	r2, r3
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	339e      	adds	r3, #158	; 0x9e
 8003336:	4a48      	ldr	r2, [pc, #288]	; (8003458 <main+0x828>)
 8003338:	1898      	adds	r0, r3, r2
 800333a:	4b3d      	ldr	r3, [pc, #244]	; (8003430 <main+0x800>)
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	231a      	movs	r3, #26
 8003342:	fb02 f303 	mul.w	r3, r2, r3
 8003346:	4a47      	ldr	r2, [pc, #284]	; (8003464 <main+0x834>)
 8003348:	4413      	add	r3, r2
 800334a:	2205      	movs	r2, #5
 800334c:	4619      	mov	r1, r3
 800334e:	f006 fa97 	bl	8009880 <memcpy>
	memcpy(potSource+208+(i*5),&ADSR[i],5 );  // +50  ,
 8003352:	4b37      	ldr	r3, [pc, #220]	; (8003430 <main+0x800>)
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	33d0      	adds	r3, #208	; 0xd0
 8003360:	4a3d      	ldr	r2, [pc, #244]	; (8003458 <main+0x828>)
 8003362:	1898      	adds	r0, r3, r2
 8003364:	4b32      	ldr	r3, [pc, #200]	; (8003430 <main+0x800>)
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	f44f 7307 	mov.w	r3, #540	; 0x21c
 800336e:	fb02 f303 	mul.w	r3, r2, r3
 8003372:	4a3d      	ldr	r2, [pc, #244]	; (8003468 <main+0x838>)
 8003374:	4413      	add	r3, r2
 8003376:	2205      	movs	r2, #5
 8003378:	4619      	mov	r1, r3
 800337a:	f006 fa81 	bl	8009880 <memcpy>
for(i=0;i<10;i++){
 800337e:	4b2c      	ldr	r3, [pc, #176]	; (8003430 <main+0x800>)
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	3301      	adds	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	4b2a      	ldr	r3, [pc, #168]	; (8003430 <main+0x800>)
 8003388:	801a      	strh	r2, [r3, #0]
 800338a:	4b29      	ldr	r3, [pc, #164]	; (8003430 <main+0x800>)
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	2b09      	cmp	r3, #9
 8003390:	d9b3      	bls.n	80032fa <main+0x6ca>

}	// copy vars into potSource

mem_buf=potSource[mem_count];
 8003392:	4b30      	ldr	r3, [pc, #192]	; (8003454 <main+0x824>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <main+0x828>)
 800339a:	5c9a      	ldrb	r2, [r3, r2]
 800339c:	4b33      	ldr	r3, [pc, #204]	; (800346c <main+0x83c>)
 800339e:	701a      	strb	r2, [r3, #0]
//if (mem_buf>160) mem_buf=160;   // just in case , may be a problem

	HAL_I2C_Mem_Write(&hi2c2, 160, ((1+(mem_count>>6))<<6)+(mem_count&63), 2, &mem_buf, 1, 100);  // "&hi2c2"  actual register address
 80033a0:	4b2c      	ldr	r3, [pc, #176]	; (8003454 <main+0x824>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	099b      	lsrs	r3, r3, #6
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3301      	adds	r3, #1
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	019b      	lsls	r3, r3, #6
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	4b28      	ldr	r3, [pc, #160]	; (8003454 <main+0x824>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033bc:	b29b      	uxth	r3, r3
 80033be:	4413      	add	r3, r2
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	2364      	movs	r3, #100	; 0x64
 80033c4:	9302      	str	r3, [sp, #8]
 80033c6:	2301      	movs	r3, #1
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	4b28      	ldr	r3, [pc, #160]	; (800346c <main+0x83c>)
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	2302      	movs	r3, #2
 80033d0:	21a0      	movs	r1, #160	; 0xa0
 80033d2:	4827      	ldr	r0, [pc, #156]	; (8003470 <main+0x840>)
 80033d4:	f003 f8b6 	bl	8006544 <HAL_I2C_Mem_Write>
	//HAL_Delay(5); // this is slow , no bueno

	loop_counter2=0; //reset
 80033d8:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <main+0x820>)
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]

}


	  if (disp_end==1)	 {  // displaybuffer after each full screen update on spi  ,, no freezes here
 80033de:	4b25      	ldr	r3, [pc, #148]	; (8003474 <main+0x844>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d11c      	bne.n	8003420 <main+0x7f0>

		  for (i=0;i<14;i++) {   display_process();   displayBuffer2();} // 5 cycles max for the lot or  0.2ms
 80033e6:	4b12      	ldr	r3, [pc, #72]	; (8003430 <main+0x800>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	801a      	strh	r2, [r3, #0]
 80033ec:	e009      	b.n	8003402 <main+0x7d2>
 80033ee:	f7fd fffb 	bl	80013e8 <display_process>
 80033f2:	f7fe f99f 	bl	8001734 <displayBuffer2>
 80033f6:	4b0e      	ldr	r3, [pc, #56]	; (8003430 <main+0x800>)
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	3301      	adds	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <main+0x800>)
 8003400:	801a      	strh	r2, [r3, #0]
 8003402:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <main+0x800>)
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	2b0d      	cmp	r3, #13
 8003408:	d9f1      	bls.n	80033ee <main+0x7be>
		  gfx_send_swap=1;   // enable line swapping
 800340a:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <main+0x848>)
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
		  disp_end=0;   ///reset till next full page
 8003410:	4b18      	ldr	r3, [pc, #96]	; (8003474 <main+0x844>)
 8003412:	2200      	movs	r2, #0
 8003414:	701a      	strb	r2, [r3, #0]


		  if (!disp_stepper) break;
 8003416:	4b19      	ldr	r3, [pc, #100]	; (800347c <main+0x84c>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 80fb 	beq.w	8003616 <main+0x9e6>
	  }


	  if (init<6)				// after 6 its done for good   // no freeze here
 8003420:	4b17      	ldr	r3, [pc, #92]	; (8003480 <main+0x850>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b05      	cmp	r3, #5
 8003426:	d839      	bhi.n	800349c <main+0x86c>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8003428:	4b01      	ldr	r3, [pc, #4]	; (8003430 <main+0x800>)
 800342a:	2200      	movs	r2, #0
 800342c:	801a      	strh	r2, [r3, #0]
 800342e:	e031      	b.n	8003494 <main+0x864>
 8003430:	20000c70 	.word	0x20000c70
 8003434:	200004a4 	.word	0x200004a4
 8003438:	20000c4e 	.word	0x20000c4e
 800343c:	2000040c 	.word	0x2000040c
 8003440:	20003b0a 	.word	0x20003b0a
 8003444:	20000c3e 	.word	0x20000c3e
 8003448:	20000c42 	.word	0x20000c42
 800344c:	20000c6c 	.word	0x20000c6c
 8003450:	200020dc 	.word	0x200020dc
 8003454:	200020da 	.word	0x200020da
 8003458:	20000ab4 	.word	0x20000ab4
 800345c:	20003a54 	.word	0x20003a54
 8003460:	200039e4 	.word	0x200039e4
 8003464:	20002e54 	.word	0x20002e54
 8003468:	20002f58 	.word	0x20002f58
 800346c:	200020e0 	.word	0x200020e0
 8003470:	20003c54 	.word	0x20003c54
 8003474:	20002a36 	.word	0x20002a36
 8003478:	20002a00 	.word	0x20002a00
 800347c:	200001b6 	.word	0x200001b6
 8003480:	200020d1 	.word	0x200020d1
 8003484:	f7fd feca 	bl	800121c <display_init>
 8003488:	4b66      	ldr	r3, [pc, #408]	; (8003624 <main+0x9f4>)
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	3301      	adds	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	4b64      	ldr	r3, [pc, #400]	; (8003624 <main+0x9f4>)
 8003492:	801a      	strh	r2, [r3, #0]
 8003494:	4b63      	ldr	r3, [pc, #396]	; (8003624 <main+0x9f4>)
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	2b05      	cmp	r3, #5
 800349a:	d9f3      	bls.n	8003484 <main+0x854>
}

	  if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 800349c:	4b62      	ldr	r3, [pc, #392]	; (8003628 <main+0x9f8>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b05      	cmp	r3, #5
 80034a2:	d931      	bls.n	8003508 <main+0x8d8>
		  time_proc=0;
 80034a4:	4b61      	ldr	r3, [pc, #388]	; (800362c <main+0x9fc>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	801a      	strh	r2, [r3, #0]

		  if (gfx_send_swap==2) gfx_send_lines++;		// this is ok for now
 80034aa:	4b61      	ldr	r3, [pc, #388]	; (8003630 <main+0xa00>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d105      	bne.n	80034be <main+0x88e>
 80034b2:	4b60      	ldr	r3, [pc, #384]	; (8003634 <main+0xa04>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	3301      	adds	r3, #1
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	4b5e      	ldr	r3, [pc, #376]	; (8003634 <main+0xa04>)
 80034bc:	701a      	strb	r2, [r3, #0]
		  if (gfx_send_swap==1)  { gfx_send_counter=gfx_send_cursor*144; gfx_send_swap=2; } // jump to cursor pixel line
 80034be:	4b5c      	ldr	r3, [pc, #368]	; (8003630 <main+0xa00>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d10c      	bne.n	80034e0 <main+0x8b0>
 80034c6:	4b5c      	ldr	r3, [pc, #368]	; (8003638 <main+0xa08>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	00d2      	lsls	r2, r2, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	4b59      	ldr	r3, [pc, #356]	; (800363c <main+0xa0c>)
 80034d8:	801a      	strh	r2, [r3, #0]
 80034da:	4b55      	ldr	r3, [pc, #340]	; (8003630 <main+0xa00>)
 80034dc:	2202      	movs	r2, #2
 80034de:	701a      	strb	r2, [r3, #0]
		  if (gfx_send_lines==144)   { gfx_send_lines=0; gfx_send_counter=1008; gfx_send_swap=0;}  // skip to last char line
 80034e0:	4b54      	ldr	r3, [pc, #336]	; (8003634 <main+0xa04>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b90      	cmp	r3, #144	; 0x90
 80034e6:	d109      	bne.n	80034fc <main+0x8cc>
 80034e8:	4b52      	ldr	r3, [pc, #328]	; (8003634 <main+0xa04>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	701a      	strb	r2, [r3, #0]
 80034ee:	4b53      	ldr	r3, [pc, #332]	; (800363c <main+0xa0c>)
 80034f0:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80034f4:	801a      	strh	r2, [r3, #0]
 80034f6:	4b4e      	ldr	r3, [pc, #312]	; (8003630 <main+0xa00>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
				gfx_send();    // don't loop this without using dma  , just makes things really slow
 80034fc:	f7fd fee4 	bl	80012c8 <gfx_send>

				time_final[0]=time_proc;
 8003500:	4b4a      	ldr	r3, [pc, #296]	; (800362c <main+0x9fc>)
 8003502:	881a      	ldrh	r2, [r3, #0]
 8003504:	4b4e      	ldr	r3, [pc, #312]	; (8003640 <main+0xa10>)
 8003506:	801a      	strh	r2, [r3, #0]


	  // send spi line data every loop cycle ,
	  ///////////////////////////////////////////////////////////////////////////////

	  if (loop_counter == 255)	{ // grab adc readings + 3ms , 32 step  // no freeze
 8003508:	4b4e      	ldr	r3, [pc, #312]	; (8003644 <main+0xa14>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2bff      	cmp	r3, #255	; 0xff
 800350e:	d128      	bne.n	8003562 <main+0x932>



		  //HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

		  HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 8003510:	484d      	ldr	r0, [pc, #308]	; (8003648 <main+0xa18>)
 8003512:	f001 fd5b 	bl	8004fcc <HAL_ADCEx_InjectedStart>
		  uint16_t adc_temp1[4]={0,0,0,0};
 8003516:	463b      	mov	r3, r7
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	605a      	str	r2, [r3, #4]

		  HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 800351e:	2101      	movs	r1, #1
 8003520:	4849      	ldr	r0, [pc, #292]	; (8003648 <main+0xa18>)
 8003522:	f001 f8b9 	bl	8004698 <HAL_ADC_PollForConversion>

		  adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8003526:	2101      	movs	r1, #1
 8003528:	4847      	ldr	r0, [pc, #284]	; (8003648 <main+0xa18>)
 800352a:	f001 fe65 	bl	80051f8 <HAL_ADCEx_InjectedGetValue>
 800352e:	4603      	mov	r3, r0
 8003530:	b29b      	uxth	r3, r3
 8003532:	803b      	strh	r3, [r7, #0]
		  adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8003534:	2102      	movs	r1, #2
 8003536:	4844      	ldr	r0, [pc, #272]	; (8003648 <main+0xa18>)
 8003538:	f001 fe5e 	bl	80051f8 <HAL_ADCEx_InjectedGetValue>
 800353c:	4603      	mov	r3, r0
 800353e:	b29b      	uxth	r3, r3
 8003540:	807b      	strh	r3, [r7, #2]
		//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
		  adc_values[0]=	  adc_temp1[0]>>7;
 8003542:	883b      	ldrh	r3, [r7, #0]
 8003544:	09db      	lsrs	r3, r3, #7
 8003546:	b29a      	uxth	r2, r3
 8003548:	4b40      	ldr	r3, [pc, #256]	; (800364c <main+0xa1c>)
 800354a:	801a      	strh	r2, [r3, #0]
		  adc_values[1]=	  adc_temp1[1]>>7;
 800354c:	887b      	ldrh	r3, [r7, #2]
 800354e:	09db      	lsrs	r3, r3, #7
 8003550:	b29a      	uxth	r2, r3
 8003552:	4b3e      	ldr	r3, [pc, #248]	; (800364c <main+0xa1c>)
 8003554:	805a      	strh	r2, [r3, #2]
		//  adc_values[2]=	  adc_temp1[2]>>7;
		  HAL_ADCEx_InjectedStop(&hadc1) ;
 8003556:	483c      	ldr	r0, [pc, #240]	; (8003648 <main+0xa18>)
 8003558:	f001 fe02 	bl	8005160 <HAL_ADCEx_InjectedStop>


		  //HAL_ADC_Start_DMA(&hadc1, adc_source, 512);


	  	loop_counter=0;
 800355c:	4b39      	ldr	r3, [pc, #228]	; (8003644 <main+0xa14>)
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8003562:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <main+0xa20>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b07      	cmp	r3, #7
 8003568:	d106      	bne.n	8003578 <main+0x948>
 800356a:	4b3a      	ldr	r3, [pc, #232]	; (8003654 <main+0xa24>)
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d102      	bne.n	8003578 <main+0x948>
 8003572:	4b38      	ldr	r3, [pc, #224]	; (8003654 <main+0xa24>)
 8003574:	2201      	movs	r2, #1
 8003576:	801a      	strh	r2, [r3, #0]
	   if (promValue<64) promValue=promValue+1 ; else promValue=0;  // fetch eeprom   nogo
	  	  if ((promValues[promValue] ) !=(potValues[promValue]))  EEPROM.write(promValue,(potValues[promValue]));   //  not too happy can totally kill speed  will have to put elsewhere
	  	  promValues[promValue] =potValues[promValue];
	  	   */

	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 8003578:	4b35      	ldr	r3, [pc, #212]	; (8003650 <main+0xa20>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003588:	4833      	ldr	r0, [pc, #204]	; (8003658 <main+0xa28>)
 800358a:	f002 fe7d 	bl	8006288 <HAL_GPIO_WritePin>


	//  if (sample_pointB!=sample_pointD) bank_write=1; // set start of buffer ,grab , works ok

	  	//	adc_flag=0;
	  		if (adc_flag) {
 800358e:	4b33      	ldr	r3, [pc, #204]	; (800365c <main+0xa2c>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d03a      	beq.n	800360c <main+0x9dc>
	  		HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go
 8003596:	482c      	ldr	r0, [pc, #176]	; (8003648 <main+0xa18>)
 8003598:	f001 f9fa 	bl	8004990 <HAL_ADC_Stop_DMA>
	  		HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time
 800359c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035a0:	492f      	ldr	r1, [pc, #188]	; (8003660 <main+0xa30>)
 80035a2:	4829      	ldr	r0, [pc, #164]	; (8003648 <main+0xa18>)
 80035a4:	f001 f904 	bl	80047b0 <HAL_ADC_Start_DMA>

	  			uint16_t* click=&adc_source[0];
 80035a8:	4b2d      	ldr	r3, [pc, #180]	; (8003660 <main+0xa30>)
 80035aa:	677b      	str	r3, [r7, #116]	; 0x74

	  			for (i=0;i<512;i++)
 80035ac:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <main+0x9f4>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	801a      	strh	r2, [r3, #0]
 80035b2:	e023      	b.n	80035fc <main+0x9cc>
	  			{

	  				uint16_t crap_hold=*click;
 80035b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	  			uint16_t crap_hold1=*(++click);
 80035bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035be:	3302      	adds	r3, #2
 80035c0:	677b      	str	r3, [r7, #116]	; 0x74
 80035c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	  		click++;
 80035ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035cc:	3302      	adds	r3, #2
 80035ce:	677b      	str	r3, [r7, #116]	; 0x74

	  	//			uint16_t crap_hold=adc_source[i*2];

	  				 // 				uint16_t crap_hold1=adc_source[(i*2)+1];

	  				input_holder[i] = (crap_hold+crap_hold1 )>>1;
 80035d0:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80035d4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80035d8:	4413      	add	r3, r2
 80035da:	1059      	asrs	r1, r3, #1
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <main+0x9f4>)
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	b289      	uxth	r1, r1
 80035e4:	4b1f      	ldr	r3, [pc, #124]	; (8003664 <main+0xa34>)
 80035e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  				adc_flag=0;
 80035ea:	4b1c      	ldr	r3, [pc, #112]	; (800365c <main+0xa2c>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]
	  			for (i=0;i<512;i++)
 80035f0:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <main+0x9f4>)
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	3301      	adds	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <main+0x9f4>)
 80035fa:	801a      	strh	r2, [r3, #0]
 80035fc:	4b09      	ldr	r3, [pc, #36]	; (8003624 <main+0x9f4>)
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003604:	d3d6      	bcc.n	80035b4 <main+0x984>
	  			}
	  		}

	while  (bank_write)                         {							// wait for adc , priority
 8003606:	e001      	b.n	800360c <main+0x9dc>



		  //HAL_Delay(4);
	  		//sample_point=sample_point&768 ;
	  		sampling();
 8003608:	f7fe f91e 	bl	8001848 <sampling>
	while  (bank_write)                         {							// wait for adc , priority
 800360c:	4b16      	ldr	r3, [pc, #88]	; (8003668 <main+0xa38>)
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f9      	bne.n	8003608 <main+0x9d8>
	  loop_counter++ ;
 8003614:	e639      	b.n	800328a <main+0x65a>
		  if (!disp_stepper) break;
 8003616:	bf00      	nop
 8003618:	2300      	movs	r3, #0

	    }  // while loop , total 250/350  cycles/   5/7ms   , max allowed is 13ms


  /* USER CODE END 3 */
}
 800361a:	4618      	mov	r0, r3
 800361c:	377c      	adds	r7, #124	; 0x7c
 800361e:	46bd      	mov	sp, r7
 8003620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003622:	bf00      	nop
 8003624:	20000c70 	.word	0x20000c70
 8003628:	200020d1 	.word	0x200020d1
 800362c:	20002e50 	.word	0x20002e50
 8003630:	20002a00 	.word	0x20002a00
 8003634:	20002a01 	.word	0x20002a01
 8003638:	200029ff 	.word	0x200029ff
 800363c:	200029fc 	.word	0x200029fc
 8003640:	20002e4c 	.word	0x20002e4c
 8003644:	20000c6c 	.word	0x20000c6c
 8003648:	20003bac 	.word	0x20003bac
 800364c:	200001a8 	.word	0x200001a8
 8003650:	20003a54 	.word	0x20003a54
 8003654:	200020c8 	.word	0x200020c8
 8003658:	40020800 	.word	0x40020800
 800365c:	20002e38 	.word	0x20002e38
 8003660:	20001480 	.word	0x20001480
 8003664:	20002a38 	.word	0x20002a38
 8003668:	200001b2 	.word	0x200001b2

0800366c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b094      	sub	sp, #80	; 0x50
 8003670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003672:	f107 0320 	add.w	r3, r7, #32
 8003676:	2230      	movs	r2, #48	; 0x30
 8003678:	2100      	movs	r1, #0
 800367a:	4618      	mov	r0, r3
 800367c:	f006 f90e 	bl	800989c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003680:	f107 030c 	add.w	r3, r7, #12
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	605a      	str	r2, [r3, #4]
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	60da      	str	r2, [r3, #12]
 800368e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003690:	2300      	movs	r3, #0
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	4b28      	ldr	r3, [pc, #160]	; (8003738 <SystemClock_Config+0xcc>)
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	4a27      	ldr	r2, [pc, #156]	; (8003738 <SystemClock_Config+0xcc>)
 800369a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369e:	6413      	str	r3, [r2, #64]	; 0x40
 80036a0:	4b25      	ldr	r3, [pc, #148]	; (8003738 <SystemClock_Config+0xcc>)
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036ac:	2300      	movs	r3, #0
 80036ae:	607b      	str	r3, [r7, #4]
 80036b0:	4b22      	ldr	r3, [pc, #136]	; (800373c <SystemClock_Config+0xd0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a21      	ldr	r2, [pc, #132]	; (800373c <SystemClock_Config+0xd0>)
 80036b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	4b1f      	ldr	r3, [pc, #124]	; (800373c <SystemClock_Config+0xd0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80036c4:	607b      	str	r3, [r7, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036c8:	2302      	movs	r3, #2
 80036ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036cc:	2301      	movs	r3, #1
 80036ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036d0:	2310      	movs	r3, #16
 80036d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036d4:	2302      	movs	r3, #2
 80036d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036d8:	2300      	movs	r3, #0
 80036da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80036dc:	2308      	movs	r3, #8
 80036de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80036e0:	2364      	movs	r3, #100	; 0x64
 80036e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036e4:	2302      	movs	r3, #2
 80036e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80036e8:	2304      	movs	r3, #4
 80036ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036ec:	f107 0320 	add.w	r3, r7, #32
 80036f0:	4618      	mov	r0, r3
 80036f2:	f003 fda3 	bl	800723c <HAL_RCC_OscConfig>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80036fc:	f000 fb0c 	bl	8003d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003700:	230f      	movs	r3, #15
 8003702:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003704:	2302      	movs	r3, #2
 8003706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800370c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003716:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003718:	f107 030c 	add.w	r3, r7, #12
 800371c:	2103      	movs	r1, #3
 800371e:	4618      	mov	r0, r3
 8003720:	f004 f804 	bl	800772c <HAL_RCC_ClockConfig>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800372a:	f000 faf5 	bl	8003d18 <Error_Handler>
  }
}
 800372e:	bf00      	nop
 8003730:	3750      	adds	r7, #80	; 0x50
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800
 800373c:	40007000 	.word	0x40007000

08003740 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08c      	sub	sp, #48	; 0x30
 8003744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003746:	f107 0320 	add.w	r3, r7, #32
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	605a      	str	r2, [r3, #4]
 8003750:	609a      	str	r2, [r3, #8]
 8003752:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003754:	463b      	mov	r3, r7
 8003756:	2220      	movs	r2, #32
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f006 f89e 	bl	800989c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003760:	4b36      	ldr	r3, [pc, #216]	; (800383c <MX_ADC1_Init+0xfc>)
 8003762:	4a37      	ldr	r2, [pc, #220]	; (8003840 <MX_ADC1_Init+0x100>)
 8003764:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003766:	4b35      	ldr	r3, [pc, #212]	; (800383c <MX_ADC1_Init+0xfc>)
 8003768:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800376c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800376e:	4b33      	ldr	r3, [pc, #204]	; (800383c <MX_ADC1_Init+0xfc>)
 8003770:	2200      	movs	r2, #0
 8003772:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003774:	4b31      	ldr	r3, [pc, #196]	; (800383c <MX_ADC1_Init+0xfc>)
 8003776:	2201      	movs	r2, #1
 8003778:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800377a:	4b30      	ldr	r3, [pc, #192]	; (800383c <MX_ADC1_Init+0xfc>)
 800377c:	2201      	movs	r2, #1
 800377e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003780:	4b2e      	ldr	r3, [pc, #184]	; (800383c <MX_ADC1_Init+0xfc>)
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003788:	4b2c      	ldr	r3, [pc, #176]	; (800383c <MX_ADC1_Init+0xfc>)
 800378a:	2200      	movs	r2, #0
 800378c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800378e:	4b2b      	ldr	r3, [pc, #172]	; (800383c <MX_ADC1_Init+0xfc>)
 8003790:	4a2c      	ldr	r2, [pc, #176]	; (8003844 <MX_ADC1_Init+0x104>)
 8003792:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003794:	4b29      	ldr	r3, [pc, #164]	; (800383c <MX_ADC1_Init+0xfc>)
 8003796:	2200      	movs	r2, #0
 8003798:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800379a:	4b28      	ldr	r3, [pc, #160]	; (800383c <MX_ADC1_Init+0xfc>)
 800379c:	2201      	movs	r2, #1
 800379e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80037a0:	4b26      	ldr	r3, [pc, #152]	; (800383c <MX_ADC1_Init+0xfc>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80037a8:	4b24      	ldr	r3, [pc, #144]	; (800383c <MX_ADC1_Init+0xfc>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80037ae:	4823      	ldr	r0, [pc, #140]	; (800383c <MX_ADC1_Init+0xfc>)
 80037b0:	f000 fe7a 	bl	80044a8 <HAL_ADC_Init>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80037ba:	f000 faad 	bl	8003d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80037be:	2309      	movs	r3, #9
 80037c0:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80037c2:	2301      	movs	r3, #1
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80037c6:	2306      	movs	r3, #6
 80037c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037ca:	f107 0320 	add.w	r3, r7, #32
 80037ce:	4619      	mov	r1, r3
 80037d0:	481a      	ldr	r0, [pc, #104]	; (800383c <MX_ADC1_Init+0xfc>)
 80037d2:	f001 f94b 	bl	8004a6c <HAL_ADC_ConfigChannel>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80037dc:	f000 fa9c 	bl	8003d18 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80037e4:	2301      	movs	r3, #1
 80037e6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80037e8:	2302      	movs	r3, #2
 80037ea:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 80037ec:	2303      	movs	r3, #3
 80037ee:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80037f4:	4b14      	ldr	r3, [pc, #80]	; (8003848 <MX_ADC1_Init+0x108>)
 80037f6:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80037f8:	2300      	movs	r3, #0
 80037fa:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003804:	463b      	mov	r3, r7
 8003806:	4619      	mov	r1, r3
 8003808:	480c      	ldr	r0, [pc, #48]	; (800383c <MX_ADC1_Init+0xfc>)
 800380a:	f001 fd2d 	bl	8005268 <HAL_ADCEx_InjectedConfigChannel>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8003814:	f000 fa80 	bl	8003d18 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8003818:	2302      	movs	r3, #2
 800381a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 800381c:	2302      	movs	r3, #2
 800381e:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003820:	463b      	mov	r3, r7
 8003822:	4619      	mov	r1, r3
 8003824:	4805      	ldr	r0, [pc, #20]	; (800383c <MX_ADC1_Init+0xfc>)
 8003826:	f001 fd1f 	bl	8005268 <HAL_ADCEx_InjectedConfigChannel>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8003830:	f000 fa72 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003834:	bf00      	nop
 8003836:	3730      	adds	r7, #48	; 0x30
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20003bac 	.word	0x20003bac
 8003840:	40012000 	.word	0x40012000
 8003844:	0f000001 	.word	0x0f000001
 8003848:	000f0001 	.word	0x000f0001

0800384c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003850:	4b12      	ldr	r3, [pc, #72]	; (800389c <MX_I2C2_Init+0x50>)
 8003852:	4a13      	ldr	r2, [pc, #76]	; (80038a0 <MX_I2C2_Init+0x54>)
 8003854:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003856:	4b11      	ldr	r3, [pc, #68]	; (800389c <MX_I2C2_Init+0x50>)
 8003858:	4a12      	ldr	r2, [pc, #72]	; (80038a4 <MX_I2C2_Init+0x58>)
 800385a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800385c:	4b0f      	ldr	r3, [pc, #60]	; (800389c <MX_I2C2_Init+0x50>)
 800385e:	2200      	movs	r2, #0
 8003860:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003862:	4b0e      	ldr	r3, [pc, #56]	; (800389c <MX_I2C2_Init+0x50>)
 8003864:	2200      	movs	r2, #0
 8003866:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003868:	4b0c      	ldr	r3, [pc, #48]	; (800389c <MX_I2C2_Init+0x50>)
 800386a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800386e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003870:	4b0a      	ldr	r3, [pc, #40]	; (800389c <MX_I2C2_Init+0x50>)
 8003872:	2200      	movs	r2, #0
 8003874:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003876:	4b09      	ldr	r3, [pc, #36]	; (800389c <MX_I2C2_Init+0x50>)
 8003878:	2200      	movs	r2, #0
 800387a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800387c:	4b07      	ldr	r3, [pc, #28]	; (800389c <MX_I2C2_Init+0x50>)
 800387e:	2200      	movs	r2, #0
 8003880:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003882:	4b06      	ldr	r3, [pc, #24]	; (800389c <MX_I2C2_Init+0x50>)
 8003884:	2200      	movs	r2, #0
 8003886:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003888:	4804      	ldr	r0, [pc, #16]	; (800389c <MX_I2C2_Init+0x50>)
 800388a:	f002 fd17 	bl	80062bc <HAL_I2C_Init>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003894:	f000 fa40 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003898:	bf00      	nop
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20003c54 	.word	0x20003c54
 80038a0:	40005800 	.word	0x40005800
 80038a4:	00061a80 	.word	0x00061a80

080038a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80038ac:	4b17      	ldr	r3, [pc, #92]	; (800390c <MX_SPI1_Init+0x64>)
 80038ae:	4a18      	ldr	r2, [pc, #96]	; (8003910 <MX_SPI1_Init+0x68>)
 80038b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038b2:	4b16      	ldr	r3, [pc, #88]	; (800390c <MX_SPI1_Init+0x64>)
 80038b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038ba:	4b14      	ldr	r3, [pc, #80]	; (800390c <MX_SPI1_Init+0x64>)
 80038bc:	2200      	movs	r2, #0
 80038be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038c0:	4b12      	ldr	r3, [pc, #72]	; (800390c <MX_SPI1_Init+0x64>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038c6:	4b11      	ldr	r3, [pc, #68]	; (800390c <MX_SPI1_Init+0x64>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038cc:	4b0f      	ldr	r3, [pc, #60]	; (800390c <MX_SPI1_Init+0x64>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038d2:	4b0e      	ldr	r3, [pc, #56]	; (800390c <MX_SPI1_Init+0x64>)
 80038d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80038da:	4b0c      	ldr	r3, [pc, #48]	; (800390c <MX_SPI1_Init+0x64>)
 80038dc:	2208      	movs	r2, #8
 80038de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <MX_SPI1_Init+0x64>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038e6:	4b09      	ldr	r3, [pc, #36]	; (800390c <MX_SPI1_Init+0x64>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038ec:	4b07      	ldr	r3, [pc, #28]	; (800390c <MX_SPI1_Init+0x64>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80038f2:	4b06      	ldr	r3, [pc, #24]	; (800390c <MX_SPI1_Init+0x64>)
 80038f4:	220a      	movs	r2, #10
 80038f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038f8:	4804      	ldr	r0, [pc, #16]	; (800390c <MX_SPI1_Init+0x64>)
 80038fa:	f004 f8e3 	bl	8007ac4 <HAL_SPI_Init>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003904:	f000 fa08 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003908:	bf00      	nop
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20003ca8 	.word	0x20003ca8
 8003910:	40013000 	.word	0x40013000

08003914 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003918:	4b17      	ldr	r3, [pc, #92]	; (8003978 <MX_SPI2_Init+0x64>)
 800391a:	4a18      	ldr	r2, [pc, #96]	; (800397c <MX_SPI2_Init+0x68>)
 800391c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800391e:	4b16      	ldr	r3, [pc, #88]	; (8003978 <MX_SPI2_Init+0x64>)
 8003920:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003924:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003926:	4b14      	ldr	r3, [pc, #80]	; (8003978 <MX_SPI2_Init+0x64>)
 8003928:	2200      	movs	r2, #0
 800392a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800392c:	4b12      	ldr	r3, [pc, #72]	; (8003978 <MX_SPI2_Init+0x64>)
 800392e:	2200      	movs	r2, #0
 8003930:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003932:	4b11      	ldr	r3, [pc, #68]	; (8003978 <MX_SPI2_Init+0x64>)
 8003934:	2200      	movs	r2, #0
 8003936:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003938:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <MX_SPI2_Init+0x64>)
 800393a:	2200      	movs	r2, #0
 800393c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800393e:	4b0e      	ldr	r3, [pc, #56]	; (8003978 <MX_SPI2_Init+0x64>)
 8003940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003944:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <MX_SPI2_Init+0x64>)
 8003948:	2230      	movs	r2, #48	; 0x30
 800394a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <MX_SPI2_Init+0x64>)
 800394e:	2200      	movs	r2, #0
 8003950:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003952:	4b09      	ldr	r3, [pc, #36]	; (8003978 <MX_SPI2_Init+0x64>)
 8003954:	2200      	movs	r2, #0
 8003956:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003958:	4b07      	ldr	r3, [pc, #28]	; (8003978 <MX_SPI2_Init+0x64>)
 800395a:	2200      	movs	r2, #0
 800395c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <MX_SPI2_Init+0x64>)
 8003960:	220a      	movs	r2, #10
 8003962:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003964:	4804      	ldr	r0, [pc, #16]	; (8003978 <MX_SPI2_Init+0x64>)
 8003966:	f004 f8ad 	bl	8007ac4 <HAL_SPI_Init>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003970:	f000 f9d2 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003974:	bf00      	nop
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20003d00 	.word	0x20003d00
 800397c:	40003800 	.word	0x40003800

08003980 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08c      	sub	sp, #48	; 0x30
 8003984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003986:	f107 030c 	add.w	r3, r7, #12
 800398a:	2224      	movs	r2, #36	; 0x24
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f005 ff84 	bl	800989c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003994:	1d3b      	adds	r3, r7, #4
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800399c:	4b21      	ldr	r3, [pc, #132]	; (8003a24 <MX_TIM2_Init+0xa4>)
 800399e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80039a4:	4b1f      	ldr	r3, [pc, #124]	; (8003a24 <MX_TIM2_Init+0xa4>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039aa:	4b1e      	ldr	r3, [pc, #120]	; (8003a24 <MX_TIM2_Init+0xa4>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80039b0:	4b1c      	ldr	r3, [pc, #112]	; (8003a24 <MX_TIM2_Init+0xa4>)
 80039b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80039b8:	4b1a      	ldr	r3, [pc, #104]	; (8003a24 <MX_TIM2_Init+0xa4>)
 80039ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039c0:	4b18      	ldr	r3, [pc, #96]	; (8003a24 <MX_TIM2_Init+0xa4>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80039c6:	2301      	movs	r3, #1
 80039c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80039ca:	2302      	movs	r3, #2
 80039cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80039ce:	2301      	movs	r3, #1
 80039d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80039d6:	2302      	movs	r3, #2
 80039d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80039da:	2302      	movs	r3, #2
 80039dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80039de:	2301      	movs	r3, #1
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80039e2:	2300      	movs	r3, #0
 80039e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 80039e6:	2302      	movs	r3, #2
 80039e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80039ea:	f107 030c 	add.w	r3, r7, #12
 80039ee:	4619      	mov	r1, r3
 80039f0:	480c      	ldr	r0, [pc, #48]	; (8003a24 <MX_TIM2_Init+0xa4>)
 80039f2:	f005 f825 	bl	8008a40 <HAL_TIM_Encoder_Init>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80039fc:	f000 f98c 	bl	8003d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a00:	2300      	movs	r3, #0
 8003a02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a08:	1d3b      	adds	r3, r7, #4
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4805      	ldr	r0, [pc, #20]	; (8003a24 <MX_TIM2_Init+0xa4>)
 8003a0e:	f005 fe43 	bl	8009698 <HAL_TIMEx_MasterConfigSynchronization>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003a18:	f000 f97e 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a1c:	bf00      	nop
 8003a1e:	3730      	adds	r7, #48	; 0x30
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20003db8 	.word	0x20003db8

08003a28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08e      	sub	sp, #56	; 0x38
 8003a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	609a      	str	r2, [r3, #8]
 8003a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a3c:	f107 0320 	add.w	r3, r7, #32
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a46:	1d3b      	adds	r3, r7, #4
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	60da      	str	r2, [r3, #12]
 8003a52:	611a      	str	r2, [r3, #16]
 8003a54:	615a      	str	r2, [r3, #20]
 8003a56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a58:	4b2c      	ldr	r3, [pc, #176]	; (8003b0c <MX_TIM3_Init+0xe4>)
 8003a5a:	4a2d      	ldr	r2, [pc, #180]	; (8003b10 <MX_TIM3_Init+0xe8>)
 8003a5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003a5e:	4b2b      	ldr	r3, [pc, #172]	; (8003b0c <MX_TIM3_Init+0xe4>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a64:	4b29      	ldr	r3, [pc, #164]	; (8003b0c <MX_TIM3_Init+0xe4>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2544;
 8003a6a:	4b28      	ldr	r3, [pc, #160]	; (8003b0c <MX_TIM3_Init+0xe4>)
 8003a6c:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 8003a70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a72:	4b26      	ldr	r3, [pc, #152]	; (8003b0c <MX_TIM3_Init+0xe4>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a78:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <MX_TIM3_Init+0xe4>)
 8003a7a:	2280      	movs	r2, #128	; 0x80
 8003a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a7e:	4823      	ldr	r0, [pc, #140]	; (8003b0c <MX_TIM3_Init+0xe4>)
 8003a80:	f004 fdc8 	bl	8008614 <HAL_TIM_Base_Init>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003a8a:	f000 f945 	bl	8003d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a98:	4619      	mov	r1, r3
 8003a9a:	481c      	ldr	r0, [pc, #112]	; (8003b0c <MX_TIM3_Init+0xe4>)
 8003a9c:	f005 fa40 	bl	8008f20 <HAL_TIM_ConfigClockSource>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003aa6:	f000 f937 	bl	8003d18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003aaa:	4818      	ldr	r0, [pc, #96]	; (8003b0c <MX_TIM3_Init+0xe4>)
 8003aac:	f004 febe 	bl	800882c <HAL_TIM_PWM_Init>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003ab6:	f000 f92f 	bl	8003d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aba:	2300      	movs	r3, #0
 8003abc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ac2:	f107 0320 	add.w	r3, r7, #32
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4810      	ldr	r0, [pc, #64]	; (8003b0c <MX_TIM3_Init+0xe4>)
 8003aca:	f005 fde5 	bl	8009698 <HAL_TIMEx_MasterConfigSynchronization>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003ad4:	f000 f920 	bl	8003d18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003ad8:	2370      	movs	r3, #112	; 0x70
 8003ada:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ae8:	1d3b      	adds	r3, r7, #4
 8003aea:	2208      	movs	r2, #8
 8003aec:	4619      	mov	r1, r3
 8003aee:	4807      	ldr	r0, [pc, #28]	; (8003b0c <MX_TIM3_Init+0xe4>)
 8003af0:	f005 f954 	bl	8008d9c <HAL_TIM_PWM_ConfigChannel>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003afa:	f000 f90d 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003afe:	4803      	ldr	r0, [pc, #12]	; (8003b0c <MX_TIM3_Init+0xe4>)
 8003b00:	f000 fb7a 	bl	80041f8 <HAL_TIM_MspPostInit>

}
 8003b04:	bf00      	nop
 8003b06:	3738      	adds	r7, #56	; 0x38
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20003e00 	.word	0x20003e00
 8003b10:	40000400 	.word	0x40000400

08003b14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08c      	sub	sp, #48	; 0x30
 8003b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003b1a:	f107 030c 	add.w	r3, r7, #12
 8003b1e:	2224      	movs	r2, #36	; 0x24
 8003b20:	2100      	movs	r1, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f005 feba 	bl	800989c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b28:	1d3b      	adds	r3, r7, #4
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b30:	4b20      	ldr	r3, [pc, #128]	; (8003bb4 <MX_TIM4_Init+0xa0>)
 8003b32:	4a21      	ldr	r2, [pc, #132]	; (8003bb8 <MX_TIM4_Init+0xa4>)
 8003b34:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003b36:	4b1f      	ldr	r3, [pc, #124]	; (8003bb4 <MX_TIM4_Init+0xa0>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b3c:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <MX_TIM4_Init+0xa0>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003b42:	4b1c      	ldr	r3, [pc, #112]	; (8003bb4 <MX_TIM4_Init+0xa0>)
 8003b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b48:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b4a:	4b1a      	ldr	r3, [pc, #104]	; (8003bb4 <MX_TIM4_Init+0xa0>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b50:	4b18      	ldr	r3, [pc, #96]	; (8003bb4 <MX_TIM4_Init+0xa0>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003b56:	2301      	movs	r3, #1
 8003b58:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8003b66:	2302      	movs	r3, #2
 8003b68:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b72:	2300      	movs	r3, #0
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8003b76:	2302      	movs	r3, #2
 8003b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003b7a:	f107 030c 	add.w	r3, r7, #12
 8003b7e:	4619      	mov	r1, r3
 8003b80:	480c      	ldr	r0, [pc, #48]	; (8003bb4 <MX_TIM4_Init+0xa0>)
 8003b82:	f004 ff5d 	bl	8008a40 <HAL_TIM_Encoder_Init>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003b8c:	f000 f8c4 	bl	8003d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b90:	2300      	movs	r3, #0
 8003b92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b98:	1d3b      	adds	r3, r7, #4
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4805      	ldr	r0, [pc, #20]	; (8003bb4 <MX_TIM4_Init+0xa0>)
 8003b9e:	f005 fd7b 	bl	8009698 <HAL_TIMEx_MasterConfigSynchronization>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003ba8:	f000 f8b6 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003bac:	bf00      	nop
 8003bae:	3730      	adds	r7, #48	; 0x30
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20003e48 	.word	0x20003e48
 8003bb8:	40000800 	.word	0x40000800

08003bbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	607b      	str	r3, [r7, #4]
 8003bc6:	4b17      	ldr	r3, [pc, #92]	; (8003c24 <MX_DMA_Init+0x68>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	4a16      	ldr	r2, [pc, #88]	; (8003c24 <MX_DMA_Init+0x68>)
 8003bcc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd2:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <MX_DMA_Init+0x68>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bda:	607b      	str	r3, [r7, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bde:	2300      	movs	r3, #0
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <MX_DMA_Init+0x68>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	4a0f      	ldr	r2, [pc, #60]	; (8003c24 <MX_DMA_Init+0x68>)
 8003be8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bec:	6313      	str	r3, [r2, #48]	; 0x30
 8003bee:	4b0d      	ldr	r3, [pc, #52]	; (8003c24 <MX_DMA_Init+0x68>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	200f      	movs	r0, #15
 8003c00:	f001 fda7 	bl	8005752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003c04:	200f      	movs	r0, #15
 8003c06:	f001 fdc0 	bl	800578a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	203c      	movs	r0, #60	; 0x3c
 8003c10:	f001 fd9f 	bl	8005752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8003c14:	203c      	movs	r0, #60	; 0x3c
 8003c16:	f001 fdb8 	bl	800578a <HAL_NVIC_EnableIRQ>

}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800

08003c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c2e:	f107 030c 	add.w	r3, r7, #12
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	605a      	str	r2, [r3, #4]
 8003c38:	609a      	str	r2, [r3, #8]
 8003c3a:	60da      	str	r2, [r3, #12]
 8003c3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	4b2a      	ldr	r3, [pc, #168]	; (8003cec <MX_GPIO_Init+0xc4>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	4a29      	ldr	r2, [pc, #164]	; (8003cec <MX_GPIO_Init+0xc4>)
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4e:	4b27      	ldr	r3, [pc, #156]	; (8003cec <MX_GPIO_Init+0xc4>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	60bb      	str	r3, [r7, #8]
 8003c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	607b      	str	r3, [r7, #4]
 8003c5e:	4b23      	ldr	r3, [pc, #140]	; (8003cec <MX_GPIO_Init+0xc4>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	4a22      	ldr	r2, [pc, #136]	; (8003cec <MX_GPIO_Init+0xc4>)
 8003c64:	f043 0302 	orr.w	r3, r3, #2
 8003c68:	6313      	str	r3, [r2, #48]	; 0x30
 8003c6a:	4b20      	ldr	r3, [pc, #128]	; (8003cec <MX_GPIO_Init+0xc4>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	607b      	str	r3, [r7, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	4b1c      	ldr	r3, [pc, #112]	; (8003cec <MX_GPIO_Init+0xc4>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	4a1b      	ldr	r2, [pc, #108]	; (8003cec <MX_GPIO_Init+0xc4>)
 8003c80:	f043 0304 	orr.w	r3, r3, #4
 8003c84:	6313      	str	r3, [r2, #48]	; 0x30
 8003c86:	4b19      	ldr	r3, [pc, #100]	; (8003cec <MX_GPIO_Init+0xc4>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003c92:	2200      	movs	r2, #0
 8003c94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c98:	4815      	ldr	r0, [pc, #84]	; (8003cf0 <MX_GPIO_Init+0xc8>)
 8003c9a:	f002 faf5 	bl	8006288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	2110      	movs	r1, #16
 8003ca2:	4814      	ldr	r0, [pc, #80]	; (8003cf4 <MX_GPIO_Init+0xcc>)
 8003ca4:	f002 faf0 	bl	8006288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003ca8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003cba:	f107 030c 	add.w	r3, r7, #12
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	480b      	ldr	r0, [pc, #44]	; (8003cf0 <MX_GPIO_Init+0xc8>)
 8003cc2:	f002 f95d 	bl	8005f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 8003cc6:	2310      	movs	r3, #16
 8003cc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 8003cd6:	f107 030c 	add.w	r3, r7, #12
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4805      	ldr	r0, [pc, #20]	; (8003cf4 <MX_GPIO_Init+0xcc>)
 8003cde:	f002 f94f 	bl	8005f80 <HAL_GPIO_Init>

}
 8003ce2:	bf00      	nop
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	40020800 	.word	0x40020800
 8003cf4:	40020000 	.word	0x40020000

08003cf8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
adc_flag=1;
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <HAL_ADC_ConvCpltCallback+0x1c>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	701a      	strb	r2, [r3, #0]


}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20002e38 	.word	0x20002e38

08003d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d1c:	b672      	cpsid	i
}
 8003d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d20:	e7fe      	b.n	8003d20 <Error_Handler+0x8>
	...

08003d24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d32:	4a0f      	ldr	r2, [pc, #60]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d38:	6453      	str	r3, [r2, #68]	; 0x44
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	603b      	str	r3, [r7, #0]
 8003d4a:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	4a08      	ldr	r2, [pc, #32]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d54:	6413      	str	r3, [r2, #64]	; 0x40
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40023800 	.word	0x40023800

08003d74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08a      	sub	sp, #40	; 0x28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7c:	f107 0314 	add.w	r3, r7, #20
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	60da      	str	r2, [r3, #12]
 8003d8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a3c      	ldr	r2, [pc, #240]	; (8003e84 <HAL_ADC_MspInit+0x110>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d171      	bne.n	8003e7a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	4b3b      	ldr	r3, [pc, #236]	; (8003e88 <HAL_ADC_MspInit+0x114>)
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	4a3a      	ldr	r2, [pc, #232]	; (8003e88 <HAL_ADC_MspInit+0x114>)
 8003da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da4:	6453      	str	r3, [r2, #68]	; 0x44
 8003da6:	4b38      	ldr	r3, [pc, #224]	; (8003e88 <HAL_ADC_MspInit+0x114>)
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	4b34      	ldr	r3, [pc, #208]	; (8003e88 <HAL_ADC_MspInit+0x114>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	4a33      	ldr	r2, [pc, #204]	; (8003e88 <HAL_ADC_MspInit+0x114>)
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc2:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <HAL_ADC_MspInit+0x114>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	4b2d      	ldr	r3, [pc, #180]	; (8003e88 <HAL_ADC_MspInit+0x114>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	4a2c      	ldr	r2, [pc, #176]	; (8003e88 <HAL_ADC_MspInit+0x114>)
 8003dd8:	f043 0302 	orr.w	r3, r3, #2
 8003ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dde:	4b2a      	ldr	r3, [pc, #168]	; (8003e88 <HAL_ADC_MspInit+0x114>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	60bb      	str	r3, [r7, #8]
 8003de8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 8003dea:	2305      	movs	r3, #5
 8003dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dee:	2303      	movs	r3, #3
 8003df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003df6:	f107 0314 	add.w	r3, r7, #20
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4823      	ldr	r0, [pc, #140]	; (8003e8c <HAL_ADC_MspInit+0x118>)
 8003dfe:	f002 f8bf 	bl	8005f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e02:	2302      	movs	r3, #2
 8003e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e06:	2303      	movs	r3, #3
 8003e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e0e:	f107 0314 	add.w	r3, r7, #20
 8003e12:	4619      	mov	r1, r3
 8003e14:	481e      	ldr	r0, [pc, #120]	; (8003e90 <HAL_ADC_MspInit+0x11c>)
 8003e16:	f002 f8b3 	bl	8005f80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8003e1a:	4b1e      	ldr	r3, [pc, #120]	; (8003e94 <HAL_ADC_MspInit+0x120>)
 8003e1c:	4a1e      	ldr	r2, [pc, #120]	; (8003e98 <HAL_ADC_MspInit+0x124>)
 8003e1e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003e20:	4b1c      	ldr	r3, [pc, #112]	; (8003e94 <HAL_ADC_MspInit+0x120>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e26:	4b1b      	ldr	r3, [pc, #108]	; (8003e94 <HAL_ADC_MspInit+0x120>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e2c:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <HAL_ADC_MspInit+0x120>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003e32:	4b18      	ldr	r3, [pc, #96]	; (8003e94 <HAL_ADC_MspInit+0x120>)
 8003e34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e38:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e3a:	4b16      	ldr	r3, [pc, #88]	; (8003e94 <HAL_ADC_MspInit+0x120>)
 8003e3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e40:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e42:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <HAL_ADC_MspInit+0x120>)
 8003e44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003e4a:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <HAL_ADC_MspInit+0x120>)
 8003e4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e50:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003e52:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <HAL_ADC_MspInit+0x120>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e58:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <HAL_ADC_MspInit+0x120>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003e5e:	480d      	ldr	r0, [pc, #52]	; (8003e94 <HAL_ADC_MspInit+0x120>)
 8003e60:	f001 fcae 	bl	80057c0 <HAL_DMA_Init>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003e6a:	f7ff ff55 	bl	8003d18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a08      	ldr	r2, [pc, #32]	; (8003e94 <HAL_ADC_MspInit+0x120>)
 8003e72:	639a      	str	r2, [r3, #56]	; 0x38
 8003e74:	4a07      	ldr	r2, [pc, #28]	; (8003e94 <HAL_ADC_MspInit+0x120>)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e7a:	bf00      	nop
 8003e7c:	3728      	adds	r7, #40	; 0x28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40012000 	.word	0x40012000
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40020000 	.word	0x40020000
 8003e90:	40020400 	.word	0x40020400
 8003e94:	20003bf4 	.word	0x20003bf4
 8003e98:	40026470 	.word	0x40026470

08003e9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08a      	sub	sp, #40	; 0x28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea4:	f107 0314 	add.w	r3, r7, #20
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	605a      	str	r2, [r3, #4]
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	60da      	str	r2, [r3, #12]
 8003eb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a22      	ldr	r2, [pc, #136]	; (8003f44 <HAL_I2C_MspInit+0xa8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d13d      	bne.n	8003f3a <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <HAL_I2C_MspInit+0xac>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	4a20      	ldr	r2, [pc, #128]	; (8003f48 <HAL_I2C_MspInit+0xac>)
 8003ec8:	f043 0302 	orr.w	r3, r3, #2
 8003ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ece:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <HAL_I2C_MspInit+0xac>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ee0:	2312      	movs	r3, #18
 8003ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003eec:	2309      	movs	r3, #9
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ef0:	f107 0314 	add.w	r3, r7, #20
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4815      	ldr	r0, [pc, #84]	; (8003f4c <HAL_I2C_MspInit+0xb0>)
 8003ef8:	f002 f842 	bl	8005f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f02:	2312      	movs	r3, #18
 8003f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003f0e:	2304      	movs	r3, #4
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f12:	f107 0314 	add.w	r3, r7, #20
 8003f16:	4619      	mov	r1, r3
 8003f18:	480c      	ldr	r0, [pc, #48]	; (8003f4c <HAL_I2C_MspInit+0xb0>)
 8003f1a:	f002 f831 	bl	8005f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <HAL_I2C_MspInit+0xac>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	4a08      	ldr	r2, [pc, #32]	; (8003f48 <HAL_I2C_MspInit+0xac>)
 8003f28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_I2C_MspInit+0xac>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003f3a:	bf00      	nop
 8003f3c:	3728      	adds	r7, #40	; 0x28
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40005800 	.word	0x40005800
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40020400 	.word	0x40020400

08003f50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08c      	sub	sp, #48	; 0x30
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f58:	f107 031c 	add.w	r3, r7, #28
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	605a      	str	r2, [r3, #4]
 8003f62:	609a      	str	r2, [r3, #8]
 8003f64:	60da      	str	r2, [r3, #12]
 8003f66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a49      	ldr	r2, [pc, #292]	; (8004094 <HAL_SPI_MspInit+0x144>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d12c      	bne.n	8003fcc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	4b48      	ldr	r3, [pc, #288]	; (8004098 <HAL_SPI_MspInit+0x148>)
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	4a47      	ldr	r2, [pc, #284]	; (8004098 <HAL_SPI_MspInit+0x148>)
 8003f7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f80:	6453      	str	r3, [r2, #68]	; 0x44
 8003f82:	4b45      	ldr	r3, [pc, #276]	; (8004098 <HAL_SPI_MspInit+0x148>)
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f8a:	61bb      	str	r3, [r7, #24]
 8003f8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	4b41      	ldr	r3, [pc, #260]	; (8004098 <HAL_SPI_MspInit+0x148>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	4a40      	ldr	r2, [pc, #256]	; (8004098 <HAL_SPI_MspInit+0x148>)
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9e:	4b3e      	ldr	r3, [pc, #248]	; (8004098 <HAL_SPI_MspInit+0x148>)
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8003faa:	23e0      	movs	r3, #224	; 0xe0
 8003fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003fba:	2305      	movs	r3, #5
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fbe:	f107 031c 	add.w	r3, r7, #28
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4835      	ldr	r0, [pc, #212]	; (800409c <HAL_SPI_MspInit+0x14c>)
 8003fc6:	f001 ffdb 	bl	8005f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003fca:	e05e      	b.n	800408a <HAL_SPI_MspInit+0x13a>
  else if(hspi->Instance==SPI2)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a33      	ldr	r2, [pc, #204]	; (80040a0 <HAL_SPI_MspInit+0x150>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d159      	bne.n	800408a <HAL_SPI_MspInit+0x13a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	613b      	str	r3, [r7, #16]
 8003fda:	4b2f      	ldr	r3, [pc, #188]	; (8004098 <HAL_SPI_MspInit+0x148>)
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	4a2e      	ldr	r2, [pc, #184]	; (8004098 <HAL_SPI_MspInit+0x148>)
 8003fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fe6:	4b2c      	ldr	r3, [pc, #176]	; (8004098 <HAL_SPI_MspInit+0x148>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fee:	613b      	str	r3, [r7, #16]
 8003ff0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	4b28      	ldr	r3, [pc, #160]	; (8004098 <HAL_SPI_MspInit+0x148>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	4a27      	ldr	r2, [pc, #156]	; (8004098 <HAL_SPI_MspInit+0x148>)
 8003ffc:	f043 0302 	orr.w	r3, r3, #2
 8004000:	6313      	str	r3, [r2, #48]	; 0x30
 8004002:	4b25      	ldr	r3, [pc, #148]	; (8004098 <HAL_SPI_MspInit+0x148>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 800400e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004014:	2302      	movs	r3, #2
 8004016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004018:	2300      	movs	r3, #0
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800401c:	2303      	movs	r3, #3
 800401e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004020:	2305      	movs	r3, #5
 8004022:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004024:	f107 031c 	add.w	r3, r7, #28
 8004028:	4619      	mov	r1, r3
 800402a:	481e      	ldr	r0, [pc, #120]	; (80040a4 <HAL_SPI_MspInit+0x154>)
 800402c:	f001 ffa8 	bl	8005f80 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004030:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <HAL_SPI_MspInit+0x158>)
 8004032:	4a1e      	ldr	r2, [pc, #120]	; (80040ac <HAL_SPI_MspInit+0x15c>)
 8004034:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8004036:	4b1c      	ldr	r3, [pc, #112]	; (80040a8 <HAL_SPI_MspInit+0x158>)
 8004038:	2200      	movs	r2, #0
 800403a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800403c:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <HAL_SPI_MspInit+0x158>)
 800403e:	2240      	movs	r2, #64	; 0x40
 8004040:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004042:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <HAL_SPI_MspInit+0x158>)
 8004044:	2200      	movs	r2, #0
 8004046:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004048:	4b17      	ldr	r3, [pc, #92]	; (80040a8 <HAL_SPI_MspInit+0x158>)
 800404a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800404e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004050:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <HAL_SPI_MspInit+0x158>)
 8004052:	2200      	movs	r2, #0
 8004054:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004056:	4b14      	ldr	r3, [pc, #80]	; (80040a8 <HAL_SPI_MspInit+0x158>)
 8004058:	2200      	movs	r2, #0
 800405a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800405c:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <HAL_SPI_MspInit+0x158>)
 800405e:	2200      	movs	r2, #0
 8004060:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004062:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <HAL_SPI_MspInit+0x158>)
 8004064:	2200      	movs	r2, #0
 8004066:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004068:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <HAL_SPI_MspInit+0x158>)
 800406a:	2200      	movs	r2, #0
 800406c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800406e:	480e      	ldr	r0, [pc, #56]	; (80040a8 <HAL_SPI_MspInit+0x158>)
 8004070:	f001 fba6 	bl	80057c0 <HAL_DMA_Init>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 800407a:	f7ff fe4d 	bl	8003d18 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <HAL_SPI_MspInit+0x158>)
 8004082:	649a      	str	r2, [r3, #72]	; 0x48
 8004084:	4a08      	ldr	r2, [pc, #32]	; (80040a8 <HAL_SPI_MspInit+0x158>)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6393      	str	r3, [r2, #56]	; 0x38
}
 800408a:	bf00      	nop
 800408c:	3730      	adds	r7, #48	; 0x30
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40013000 	.word	0x40013000
 8004098:	40023800 	.word	0x40023800
 800409c:	40020000 	.word	0x40020000
 80040a0:	40003800 	.word	0x40003800
 80040a4:	40020400 	.word	0x40020400
 80040a8:	20003d58 	.word	0x20003d58
 80040ac:	40026070 	.word	0x40026070

080040b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08c      	sub	sp, #48	; 0x30
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b8:	f107 031c 	add.w	r3, r7, #28
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	605a      	str	r2, [r3, #4]
 80040c2:	609a      	str	r2, [r3, #8]
 80040c4:	60da      	str	r2, [r3, #12]
 80040c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d0:	d12d      	bne.n	800412e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040d2:	2300      	movs	r3, #0
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	4b30      	ldr	r3, [pc, #192]	; (8004198 <HAL_TIM_Encoder_MspInit+0xe8>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	4a2f      	ldr	r2, [pc, #188]	; (8004198 <HAL_TIM_Encoder_MspInit+0xe8>)
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	6413      	str	r3, [r2, #64]	; 0x40
 80040e2:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <HAL_TIM_Encoder_MspInit+0xe8>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	61bb      	str	r3, [r7, #24]
 80040ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	4b29      	ldr	r3, [pc, #164]	; (8004198 <HAL_TIM_Encoder_MspInit+0xe8>)
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	4a28      	ldr	r2, [pc, #160]	; (8004198 <HAL_TIM_Encoder_MspInit+0xe8>)
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	6313      	str	r3, [r2, #48]	; 0x30
 80040fe:	4b26      	ldr	r3, [pc, #152]	; (8004198 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 800410a:	f248 0302 	movw	r3, #32770	; 0x8002
 800410e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004110:	2302      	movs	r3, #2
 8004112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004114:	2301      	movs	r3, #1
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004118:	2300      	movs	r3, #0
 800411a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800411c:	2301      	movs	r3, #1
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004120:	f107 031c 	add.w	r3, r7, #28
 8004124:	4619      	mov	r1, r3
 8004126:	481d      	ldr	r0, [pc, #116]	; (800419c <HAL_TIM_Encoder_MspInit+0xec>)
 8004128:	f001 ff2a 	bl	8005f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800412c:	e030      	b.n	8004190 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1b      	ldr	r2, [pc, #108]	; (80041a0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d12b      	bne.n	8004190 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004138:	2300      	movs	r3, #0
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	4b16      	ldr	r3, [pc, #88]	; (8004198 <HAL_TIM_Encoder_MspInit+0xe8>)
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	4a15      	ldr	r2, [pc, #84]	; (8004198 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004142:	f043 0304 	orr.w	r3, r3, #4
 8004146:	6413      	str	r3, [r2, #64]	; 0x40
 8004148:	4b13      	ldr	r3, [pc, #76]	; (8004198 <HAL_TIM_Encoder_MspInit+0xe8>)
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <HAL_TIM_Encoder_MspInit+0xe8>)
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	4a0e      	ldr	r2, [pc, #56]	; (8004198 <HAL_TIM_Encoder_MspInit+0xe8>)
 800415e:	f043 0302 	orr.w	r3, r3, #2
 8004162:	6313      	str	r3, [r2, #48]	; 0x30
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004170:	23c0      	movs	r3, #192	; 0xc0
 8004172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004174:	2302      	movs	r3, #2
 8004176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004178:	2301      	movs	r3, #1
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417c:	2300      	movs	r3, #0
 800417e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004180:	2302      	movs	r3, #2
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004184:	f107 031c 	add.w	r3, r7, #28
 8004188:	4619      	mov	r1, r3
 800418a:	4806      	ldr	r0, [pc, #24]	; (80041a4 <HAL_TIM_Encoder_MspInit+0xf4>)
 800418c:	f001 fef8 	bl	8005f80 <HAL_GPIO_Init>
}
 8004190:	bf00      	nop
 8004192:	3730      	adds	r7, #48	; 0x30
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40023800 	.word	0x40023800
 800419c:	40020000 	.word	0x40020000
 80041a0:	40000800 	.word	0x40000800
 80041a4:	40020400 	.word	0x40020400

080041a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a0e      	ldr	r2, [pc, #56]	; (80041f0 <HAL_TIM_Base_MspInit+0x48>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d115      	bne.n	80041e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <HAL_TIM_Base_MspInit+0x4c>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	4a0c      	ldr	r2, [pc, #48]	; (80041f4 <HAL_TIM_Base_MspInit+0x4c>)
 80041c4:	f043 0302 	orr.w	r3, r3, #2
 80041c8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ca:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <HAL_TIM_Base_MspInit+0x4c>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80041d6:	2200      	movs	r2, #0
 80041d8:	2100      	movs	r1, #0
 80041da:	201d      	movs	r0, #29
 80041dc:	f001 fab9 	bl	8005752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80041e0:	201d      	movs	r0, #29
 80041e2:	f001 fad2 	bl	800578a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40000400 	.word	0x40000400
 80041f4:	40023800 	.word	0x40023800

080041f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004200:	f107 030c 	add.w	r3, r7, #12
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	609a      	str	r2, [r3, #8]
 800420c:	60da      	str	r2, [r3, #12]
 800420e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a12      	ldr	r2, [pc, #72]	; (8004260 <HAL_TIM_MspPostInit+0x68>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d11d      	bne.n	8004256 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800421a:	2300      	movs	r3, #0
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	4b11      	ldr	r3, [pc, #68]	; (8004264 <HAL_TIM_MspPostInit+0x6c>)
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	4a10      	ldr	r2, [pc, #64]	; (8004264 <HAL_TIM_MspPostInit+0x6c>)
 8004224:	f043 0302 	orr.w	r3, r3, #2
 8004228:	6313      	str	r3, [r2, #48]	; 0x30
 800422a:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <HAL_TIM_MspPostInit+0x6c>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004236:	2301      	movs	r3, #1
 8004238:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423a:	2302      	movs	r3, #2
 800423c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004242:	2300      	movs	r3, #0
 8004244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004246:	2302      	movs	r3, #2
 8004248:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800424a:	f107 030c 	add.w	r3, r7, #12
 800424e:	4619      	mov	r1, r3
 8004250:	4805      	ldr	r0, [pc, #20]	; (8004268 <HAL_TIM_MspPostInit+0x70>)
 8004252:	f001 fe95 	bl	8005f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004256:	bf00      	nop
 8004258:	3720      	adds	r7, #32
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40000400 	.word	0x40000400
 8004264:	40023800 	.word	0x40023800
 8004268:	40020400 	.word	0x40020400

0800426c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004270:	e7fe      	b.n	8004270 <NMI_Handler+0x4>

08004272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004272:	b480      	push	{r7}
 8004274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004276:	e7fe      	b.n	8004276 <HardFault_Handler+0x4>

08004278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800427c:	e7fe      	b.n	800427c <MemManage_Handler+0x4>

0800427e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800427e:	b480      	push	{r7}
 8004280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004282:	e7fe      	b.n	8004282 <BusFault_Handler+0x4>

08004284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004288:	e7fe      	b.n	8004288 <UsageFault_Handler+0x4>

0800428a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800428a:	b480      	push	{r7}
 800428c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800428e:	bf00      	nop
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800429c:	bf00      	nop
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042a6:	b480      	push	{r7}
 80042a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042aa:	bf00      	nop
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042b8:	f000 f8b2 	bl	8004420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042bc:	bf00      	nop
 80042be:	bd80      	pop	{r7, pc}

080042c0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80042c4:	4802      	ldr	r0, [pc, #8]	; (80042d0 <DMA1_Stream4_IRQHandler+0x10>)
 80042c6:	f001 fbf1 	bl	8005aac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20003d58 	.word	0x20003d58

080042d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80042d8:	4802      	ldr	r0, [pc, #8]	; (80042e4 <TIM3_IRQHandler+0x10>)
 80042da:	f004 fc57 	bl	8008b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80042de:	bf00      	nop
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20003e00 	.word	0x20003e00

080042e8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042ec:	4802      	ldr	r0, [pc, #8]	; (80042f8 <DMA2_Stream4_IRQHandler+0x10>)
 80042ee:	f001 fbdd 	bl	8005aac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20003bf4 	.word	0x20003bf4

080042fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004300:	4b08      	ldr	r3, [pc, #32]	; (8004324 <SystemInit+0x28>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004306:	4a07      	ldr	r2, [pc, #28]	; (8004324 <SystemInit+0x28>)
 8004308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800430c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004310:	4b04      	ldr	r3, [pc, #16]	; (8004324 <SystemInit+0x28>)
 8004312:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004316:	609a      	str	r2, [r3, #8]
#endif
}
 8004318:	bf00      	nop
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	e000ed00 	.word	0xe000ed00

08004328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004360 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800432c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800432e:	e003      	b.n	8004338 <LoopCopyDataInit>

08004330 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004330:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004332:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004334:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004336:	3104      	adds	r1, #4

08004338 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004338:	480b      	ldr	r0, [pc, #44]	; (8004368 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800433a:	4b0c      	ldr	r3, [pc, #48]	; (800436c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800433c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800433e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004340:	d3f6      	bcc.n	8004330 <CopyDataInit>
  ldr  r2, =_sbss
 8004342:	4a0b      	ldr	r2, [pc, #44]	; (8004370 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004344:	e002      	b.n	800434c <LoopFillZerobss>

08004346 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004346:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004348:	f842 3b04 	str.w	r3, [r2], #4

0800434c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800434c:	4b09      	ldr	r3, [pc, #36]	; (8004374 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800434e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004350:	d3f9      	bcc.n	8004346 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004352:	f7ff ffd3 	bl	80042fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004356:	f005 fa6f 	bl	8009838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800435a:	f7fe fc69 	bl	8002c30 <main>
  bx  lr    
 800435e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004360:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004364:	0800aa1c 	.word	0x0800aa1c
  ldr  r0, =_sdata
 8004368:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800436c:	20000914 	.word	0x20000914
  ldr  r2, =_sbss
 8004370:	20000914 	.word	0x20000914
  ldr  r3, = _ebss
 8004374:	20003e94 	.word	0x20003e94

08004378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004378:	e7fe      	b.n	8004378 <ADC_IRQHandler>
	...

0800437c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004380:	4b0e      	ldr	r3, [pc, #56]	; (80043bc <HAL_Init+0x40>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a0d      	ldr	r2, [pc, #52]	; (80043bc <HAL_Init+0x40>)
 8004386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800438a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <HAL_Init+0x40>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a0a      	ldr	r2, [pc, #40]	; (80043bc <HAL_Init+0x40>)
 8004392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004398:	4b08      	ldr	r3, [pc, #32]	; (80043bc <HAL_Init+0x40>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a07      	ldr	r2, [pc, #28]	; (80043bc <HAL_Init+0x40>)
 800439e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043a4:	2003      	movs	r0, #3
 80043a6:	f001 f9c9 	bl	800573c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043aa:	2000      	movs	r0, #0
 80043ac:	f000 f808 	bl	80043c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043b0:	f7ff fcb8 	bl	8003d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40023c00 	.word	0x40023c00

080043c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043c8:	4b12      	ldr	r3, [pc, #72]	; (8004414 <HAL_InitTick+0x54>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	4b12      	ldr	r3, [pc, #72]	; (8004418 <HAL_InitTick+0x58>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	4619      	mov	r1, r3
 80043d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80043da:	fbb2 f3f3 	udiv	r3, r2, r3
 80043de:	4618      	mov	r0, r3
 80043e0:	f001 f9e1 	bl	80057a6 <HAL_SYSTICK_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e00e      	b.n	800440c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b0f      	cmp	r3, #15
 80043f2:	d80a      	bhi.n	800440a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043f4:	2200      	movs	r2, #0
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295
 80043fc:	f001 f9a9 	bl	8005752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004400:	4a06      	ldr	r2, [pc, #24]	; (800441c <HAL_InitTick+0x5c>)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	e000      	b.n	800440c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
}
 800440c:	4618      	mov	r0, r3
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	200008a4 	.word	0x200008a4
 8004418:	200008ac 	.word	0x200008ac
 800441c:	200008a8 	.word	0x200008a8

08004420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004424:	4b06      	ldr	r3, [pc, #24]	; (8004440 <HAL_IncTick+0x20>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	4b06      	ldr	r3, [pc, #24]	; (8004444 <HAL_IncTick+0x24>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4413      	add	r3, r2
 8004430:	4a04      	ldr	r2, [pc, #16]	; (8004444 <HAL_IncTick+0x24>)
 8004432:	6013      	str	r3, [r2, #0]
}
 8004434:	bf00      	nop
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	200008ac 	.word	0x200008ac
 8004444:	20003e90 	.word	0x20003e90

08004448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  return uwTick;
 800444c:	4b03      	ldr	r3, [pc, #12]	; (800445c <HAL_GetTick+0x14>)
 800444e:	681b      	ldr	r3, [r3, #0]
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20003e90 	.word	0x20003e90

08004460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004468:	f7ff ffee 	bl	8004448 <HAL_GetTick>
 800446c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d005      	beq.n	8004486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800447a:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <HAL_Delay+0x44>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4413      	add	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004486:	bf00      	nop
 8004488:	f7ff ffde 	bl	8004448 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	429a      	cmp	r2, r3
 8004496:	d8f7      	bhi.n	8004488 <HAL_Delay+0x28>
  {
  }
}
 8004498:	bf00      	nop
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	200008ac 	.word	0x200008ac

080044a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e033      	b.n	8004526 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff fc54 	bl	8003d74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d118      	bne.n	8004518 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80044ee:	f023 0302 	bic.w	r3, r3, #2
 80044f2:	f043 0202 	orr.w	r2, r3, #2
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 fbe8 	bl	8004cd0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f023 0303 	bic.w	r3, r3, #3
 800450e:	f043 0201 	orr.w	r2, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	641a      	str	r2, [r3, #64]	; 0x40
 8004516:	e001      	b.n	800451c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004524:	7bfb      	ldrb	r3, [r7, #15]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_ADC_Start+0x1a>
 8004546:	2302      	movs	r3, #2
 8004548:	e097      	b.n	800467a <HAL_ADC_Start+0x14a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b01      	cmp	r3, #1
 800455e:	d018      	beq.n	8004592 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004570:	4b45      	ldr	r3, [pc, #276]	; (8004688 <HAL_ADC_Start+0x158>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a45      	ldr	r2, [pc, #276]	; (800468c <HAL_ADC_Start+0x15c>)
 8004576:	fba2 2303 	umull	r2, r3, r2, r3
 800457a:	0c9a      	lsrs	r2, r3, #18
 800457c:	4613      	mov	r3, r2
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	4413      	add	r3, r2
 8004582:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004584:	e002      	b.n	800458c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	3b01      	subs	r3, #1
 800458a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f9      	bne.n	8004586 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d15f      	bne.n	8004660 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80045ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045de:	d106      	bne.n	80045ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e4:	f023 0206 	bic.w	r2, r3, #6
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	645a      	str	r2, [r3, #68]	; 0x44
 80045ec:	e002      	b.n	80045f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045fc:	4b24      	ldr	r3, [pc, #144]	; (8004690 <HAL_ADC_Start+0x160>)
 80045fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004608:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f003 031f 	and.w	r3, r3, #31
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10f      	bne.n	8004636 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d129      	bne.n	8004678 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004632:	609a      	str	r2, [r3, #8]
 8004634:	e020      	b.n	8004678 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a16      	ldr	r2, [pc, #88]	; (8004694 <HAL_ADC_Start+0x164>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d11b      	bne.n	8004678 <HAL_ADC_Start+0x148>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d114      	bne.n	8004678 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800465c:	609a      	str	r2, [r3, #8]
 800465e:	e00b      	b.n	8004678 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	f043 0210 	orr.w	r2, r3, #16
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004670:	f043 0201 	orr.w	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	200008a4 	.word	0x200008a4
 800468c:	431bde83 	.word	0x431bde83
 8004690:	40012300 	.word	0x40012300
 8004694:	40012000 	.word	0x40012000

08004698 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b4:	d113      	bne.n	80046de <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80046c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c4:	d10b      	bne.n	80046de <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f043 0220 	orr.w	r2, r3, #32
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e063      	b.n	80047a6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80046de:	f7ff feb3 	bl	8004448 <HAL_GetTick>
 80046e2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80046e4:	e021      	b.n	800472a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ec:	d01d      	beq.n	800472a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d007      	beq.n	8004704 <HAL_ADC_PollForConversion+0x6c>
 80046f4:	f7ff fea8 	bl	8004448 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d212      	bcs.n	800472a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b02      	cmp	r3, #2
 8004710:	d00b      	beq.n	800472a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f043 0204 	orr.w	r2, r3, #4
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e03d      	b.n	80047a6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b02      	cmp	r3, #2
 8004736:	d1d6      	bne.n	80046e6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f06f 0212 	mvn.w	r2, #18
 8004740:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d123      	bne.n	80047a4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004760:	2b00      	cmp	r3, #0
 8004762:	d11f      	bne.n	80047a4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800476e:	2b00      	cmp	r3, #0
 8004770:	d006      	beq.n	8004780 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800477c:	2b00      	cmp	r3, #0
 800477e:	d111      	bne.n	80047a4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d105      	bne.n	80047a4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	f043 0201 	orr.w	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_ADC_Start_DMA+0x1e>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e0ce      	b.n	800496c <HAL_ADC_Start_DMA+0x1bc>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d018      	beq.n	8004816 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80047f4:	4b5f      	ldr	r3, [pc, #380]	; (8004974 <HAL_ADC_Start_DMA+0x1c4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a5f      	ldr	r2, [pc, #380]	; (8004978 <HAL_ADC_Start_DMA+0x1c8>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	0c9a      	lsrs	r2, r3, #18
 8004800:	4613      	mov	r3, r2
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	4413      	add	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004808:	e002      	b.n	8004810 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	3b01      	subs	r3, #1
 800480e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f9      	bne.n	800480a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004824:	d107      	bne.n	8004836 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004834:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b01      	cmp	r3, #1
 8004842:	f040 8086 	bne.w	8004952 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800484e:	f023 0301 	bic.w	r3, r3, #1
 8004852:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004864:	2b00      	cmp	r3, #0
 8004866:	d007      	beq.n	8004878 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004870:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004884:	d106      	bne.n	8004894 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	f023 0206 	bic.w	r2, r3, #6
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	645a      	str	r2, [r3, #68]	; 0x44
 8004892:	e002      	b.n	800489a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048a2:	4b36      	ldr	r3, [pc, #216]	; (800497c <HAL_ADC_Start_DMA+0x1cc>)
 80048a4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048aa:	4a35      	ldr	r2, [pc, #212]	; (8004980 <HAL_ADC_Start_DMA+0x1d0>)
 80048ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	4a34      	ldr	r2, [pc, #208]	; (8004984 <HAL_ADC_Start_DMA+0x1d4>)
 80048b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	4a33      	ldr	r2, [pc, #204]	; (8004988 <HAL_ADC_Start_DMA+0x1d8>)
 80048bc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80048c6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80048d6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048e6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	334c      	adds	r3, #76	; 0x4c
 80048f2:	4619      	mov	r1, r3
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f001 f810 	bl	800591c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 031f 	and.w	r3, r3, #31
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10f      	bne.n	8004928 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d129      	bne.n	800496a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004924:	609a      	str	r2, [r3, #8]
 8004926:	e020      	b.n	800496a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a17      	ldr	r2, [pc, #92]	; (800498c <HAL_ADC_Start_DMA+0x1dc>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d11b      	bne.n	800496a <HAL_ADC_Start_DMA+0x1ba>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d114      	bne.n	800496a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800494e:	609a      	str	r2, [r3, #8]
 8004950:	e00b      	b.n	800496a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f043 0210 	orr.w	r2, r3, #16
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	f043 0201 	orr.w	r2, r3, #1
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	200008a4 	.word	0x200008a4
 8004978:	431bde83 	.word	0x431bde83
 800497c:	40012300 	.word	0x40012300
 8004980:	08004ec9 	.word	0x08004ec9
 8004984:	08004f83 	.word	0x08004f83
 8004988:	08004f9f 	.word	0x08004f9f
 800498c:	40012000 	.word	0x40012000

08004990 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <HAL_ADC_Stop_DMA+0x1a>
 80049a6:	2302      	movs	r3, #2
 80049a8:	e048      	b.n	8004a3c <HAL_ADC_Stop_DMA+0xac>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0201 	bic.w	r2, r2, #1
 80049c0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d130      	bne.n	8004a32 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049de:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d10f      	bne.n	8004a0e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 ffea 	bl	80059cc <HAL_DMA_Abort>
 80049f8:	4603      	mov	r3, r0
 80049fa:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004a1c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a26:	f023 0301 	bic.w	r3, r3, #1
 8004a2a:	f043 0201 	orr.w	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_ADC_ConfigChannel+0x1c>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e113      	b.n	8004cb0 <HAL_ADC_ConfigChannel+0x244>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b09      	cmp	r3, #9
 8004a96:	d925      	bls.n	8004ae4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68d9      	ldr	r1, [r3, #12]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	4413      	add	r3, r2
 8004aac:	3b1e      	subs	r3, #30
 8004aae:	2207      	movs	r2, #7
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	43da      	mvns	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	400a      	ands	r2, r1
 8004abc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68d9      	ldr	r1, [r3, #12]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	4618      	mov	r0, r3
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	4403      	add	r3, r0
 8004ad6:	3b1e      	subs	r3, #30
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	60da      	str	r2, [r3, #12]
 8004ae2:	e022      	b.n	8004b2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6919      	ldr	r1, [r3, #16]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	461a      	mov	r2, r3
 8004af2:	4613      	mov	r3, r2
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	4413      	add	r3, r2
 8004af8:	2207      	movs	r2, #7
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	43da      	mvns	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	400a      	ands	r2, r1
 8004b06:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6919      	ldr	r1, [r3, #16]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	4618      	mov	r0, r3
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	4403      	add	r3, r0
 8004b20:	409a      	lsls	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b06      	cmp	r3, #6
 8004b30:	d824      	bhi.n	8004b7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	3b05      	subs	r3, #5
 8004b44:	221f      	movs	r2, #31
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	43da      	mvns	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	400a      	ands	r2, r1
 8004b52:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	4618      	mov	r0, r3
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	3b05      	subs	r3, #5
 8004b6e:	fa00 f203 	lsl.w	r2, r0, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	635a      	str	r2, [r3, #52]	; 0x34
 8004b7a:	e04c      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b0c      	cmp	r3, #12
 8004b82:	d824      	bhi.n	8004bce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	3b23      	subs	r3, #35	; 0x23
 8004b96:	221f      	movs	r2, #31
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	43da      	mvns	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	400a      	ands	r2, r1
 8004ba4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	3b23      	subs	r3, #35	; 0x23
 8004bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	631a      	str	r2, [r3, #48]	; 0x30
 8004bcc:	e023      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	3b41      	subs	r3, #65	; 0x41
 8004be0:	221f      	movs	r2, #31
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	43da      	mvns	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	400a      	ands	r2, r1
 8004bee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	3b41      	subs	r3, #65	; 0x41
 8004c0a:	fa00 f203 	lsl.w	r2, r0, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c16:	4b29      	ldr	r3, [pc, #164]	; (8004cbc <HAL_ADC_ConfigChannel+0x250>)
 8004c18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a28      	ldr	r2, [pc, #160]	; (8004cc0 <HAL_ADC_ConfigChannel+0x254>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d10f      	bne.n	8004c44 <HAL_ADC_ConfigChannel+0x1d8>
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b12      	cmp	r3, #18
 8004c2a:	d10b      	bne.n	8004c44 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a1d      	ldr	r2, [pc, #116]	; (8004cc0 <HAL_ADC_ConfigChannel+0x254>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d12b      	bne.n	8004ca6 <HAL_ADC_ConfigChannel+0x23a>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a1c      	ldr	r2, [pc, #112]	; (8004cc4 <HAL_ADC_ConfigChannel+0x258>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d003      	beq.n	8004c60 <HAL_ADC_ConfigChannel+0x1f4>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b11      	cmp	r3, #17
 8004c5e:	d122      	bne.n	8004ca6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a11      	ldr	r2, [pc, #68]	; (8004cc4 <HAL_ADC_ConfigChannel+0x258>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d111      	bne.n	8004ca6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c82:	4b11      	ldr	r3, [pc, #68]	; (8004cc8 <HAL_ADC_ConfigChannel+0x25c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a11      	ldr	r2, [pc, #68]	; (8004ccc <HAL_ADC_ConfigChannel+0x260>)
 8004c88:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8c:	0c9a      	lsrs	r2, r3, #18
 8004c8e:	4613      	mov	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004c98:	e002      	b.n	8004ca0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f9      	bne.n	8004c9a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	40012300 	.word	0x40012300
 8004cc0:	40012000 	.word	0x40012000
 8004cc4:	10000012 	.word	0x10000012
 8004cc8:	200008a4 	.word	0x200008a4
 8004ccc:	431bde83 	.word	0x431bde83

08004cd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cd8:	4b79      	ldr	r3, [pc, #484]	; (8004ec0 <ADC_Init+0x1f0>)
 8004cda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6859      	ldr	r1, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	021a      	lsls	r2, r3, #8
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004d28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6859      	ldr	r1, [r3, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6899      	ldr	r1, [r3, #8]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	4a58      	ldr	r2, [pc, #352]	; (8004ec4 <ADC_Init+0x1f4>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d022      	beq.n	8004dae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6899      	ldr	r1, [r3, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6899      	ldr	r1, [r3, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	609a      	str	r2, [r3, #8]
 8004dac:	e00f      	b.n	8004dce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004dbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004dcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0202 	bic.w	r2, r2, #2
 8004ddc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6899      	ldr	r1, [r3, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	7e1b      	ldrb	r3, [r3, #24]
 8004de8:	005a      	lsls	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d01b      	beq.n	8004e34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004e1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6859      	ldr	r1, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	3b01      	subs	r3, #1
 8004e28:	035a      	lsls	r2, r3, #13
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
 8004e32:	e007      	b.n	8004e44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004e52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	051a      	lsls	r2, r3, #20
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6899      	ldr	r1, [r3, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e86:	025a      	lsls	r2, r3, #9
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6899      	ldr	r1, [r3, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	029a      	lsls	r2, r3, #10
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	609a      	str	r2, [r3, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	40012300 	.word	0x40012300
 8004ec4:	0f000001 	.word	0x0f000001

08004ec8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d13c      	bne.n	8004f5c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d12b      	bne.n	8004f54 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d127      	bne.n	8004f54 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d006      	beq.n	8004f20 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d119      	bne.n	8004f54 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0220 	bic.w	r2, r2, #32
 8004f2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d105      	bne.n	8004f54 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	f043 0201 	orr.w	r2, r3, #1
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f7fe fecf 	bl	8003cf8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f5a:	e00e      	b.n	8004f7a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	f003 0310 	and.w	r3, r3, #16
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f7ff fd75 	bl	8004a58 <HAL_ADC_ErrorCallback>
}
 8004f6e:	e004      	b.n	8004f7a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	4798      	blx	r3
}
 8004f7a:	bf00      	nop
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f7ff fd57 	bl	8004a44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f96:	bf00      	nop
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2240      	movs	r2, #64	; 0x40
 8004fb0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb6:	f043 0204 	orr.w	r2, r3, #4
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f7ff fd4a 	bl	8004a58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fc4:	bf00      	nop
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d101      	bne.n	8004fee <HAL_ADCEx_InjectedStart+0x22>
 8004fea:	2302      	movs	r3, #2
 8004fec:	e0aa      	b.n	8005144 <HAL_ADCEx_InjectedStart+0x178>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b01      	cmp	r3, #1
 8005002:	d018      	beq.n	8005036 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005014:	4b4e      	ldr	r3, [pc, #312]	; (8005150 <HAL_ADCEx_InjectedStart+0x184>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a4e      	ldr	r2, [pc, #312]	; (8005154 <HAL_ADCEx_InjectedStart+0x188>)
 800501a:	fba2 2303 	umull	r2, r3, r2, r3
 800501e:	0c9a      	lsrs	r2, r3, #18
 8005020:	4613      	mov	r3, r2
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	4413      	add	r3, r2
 8005026:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005028:	e002      	b.n	8005030 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	3b01      	subs	r3, #1
 800502e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f9      	bne.n	800502a <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b01      	cmp	r3, #1
 8005042:	d172      	bne.n	800512a <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800504c:	f023 0301 	bic.w	r3, r3, #1
 8005050:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005060:	2b00      	cmp	r3, #0
 8005062:	d102      	bne.n	800506a <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f06f 0204 	mvn.w	r2, #4
 800507a:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800507c:	4b36      	ldr	r3, [pc, #216]	; (8005158 <HAL_ADCEx_InjectedStart+0x18c>)
 800507e:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 031f 	and.w	r3, r3, #31
 8005088:	2b00      	cmp	r3, #0
 800508a:	d124      	bne.n	80050d6 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005096:	2b00      	cmp	r3, #0
 8005098:	bf0c      	ite	eq
 800509a:	2301      	moveq	r3, #1
 800509c:	2300      	movne	r3, #0
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	bf0c      	ite	eq
 80050b0:	2301      	moveq	r3, #1
 80050b2:	2300      	movne	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d041      	beq.n	8005142 <HAL_ADCEx_InjectedStart+0x176>
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d03e      	beq.n	8005142 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80050d2:	609a      	str	r2, [r3, #8]
 80050d4:	e035      	b.n	8005142 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	bf0c      	ite	eq
 80050e4:	2301      	moveq	r3, #1
 80050e6:	2300      	movne	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	bf0c      	ite	eq
 80050fa:	2301      	moveq	r3, #1
 80050fc:	2300      	movne	r3, #0
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a15      	ldr	r2, [pc, #84]	; (800515c <HAL_ADCEx_InjectedStart+0x190>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d11a      	bne.n	8005142 <HAL_ADCEx_InjectedStart+0x176>
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d017      	beq.n	8005142 <HAL_ADCEx_InjectedStart+0x176>
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d014      	beq.n	8005142 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005126:	609a      	str	r2, [r3, #8]
 8005128:	e00b      	b.n	8005142 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	f043 0210 	orr.w	r2, r3, #16
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513a:	f043 0201 	orr.w	r2, r3, #1
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	371c      	adds	r7, #28
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	200008a4 	.word	0x200008a4
 8005154:	431bde83 	.word	0x431bde83
 8005158:	40012300 	.word	0x40012300
 800515c:	40012000 	.word	0x40012000

08005160 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_ADCEx_InjectedStop+0x1a>
 8005176:	2302      	movs	r3, #2
 8005178:	e037      	b.n	80051ea <HAL_ADCEx_InjectedStop+0x8a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518a:	2b00      	cmp	r3, #0
 800518c:	d120      	bne.n	80051d0 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8005198:	2b00      	cmp	r3, #0
 800519a:	d119      	bne.n	80051d0 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0201 	bic.w	r2, r2, #1
 80051aa:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d112      	bne.n	80051e0 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80051c2:	f023 0301 	bic.w	r3, r3, #1
 80051c6:	f043 0201 	orr.w	r2, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80051ce:	e007      	b.n	80051e0 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	f043 0220 	orr.w	r2, r3, #32
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
	...

080051f8 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f06f 0204 	mvn.w	r2, #4
 800520e:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	3b01      	subs	r3, #1
 8005214:	2b03      	cmp	r3, #3
 8005216:	d81f      	bhi.n	8005258 <HAL_ADCEx_InjectedGetValue+0x60>
 8005218:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <HAL_ADCEx_InjectedGetValue+0x28>)
 800521a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521e:	bf00      	nop
 8005220:	0800524f 	.word	0x0800524f
 8005224:	08005245 	.word	0x08005245
 8005228:	0800523b 	.word	0x0800523b
 800522c:	08005231 	.word	0x08005231
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005236:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8005238:	e00f      	b.n	800525a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005240:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8005242:	e00a      	b.n	800525a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	60fb      	str	r3, [r7, #12]
    }
    break;
 800524c:	e005      	b.n	800525a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005254:	60fb      	str	r3, [r7, #12]
    }
    break;
 8005256:	e000      	b.n	800525a <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8005258:	bf00      	nop
  }
  return tmp;
 800525a:	68fb      	ldr	r3, [r7, #12]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_ADCEx_InjectedConfigChannel+0x18>
 800527c:	2302      	movs	r3, #2
 800527e:	e17e      	b.n	800557e <HAL_ADCEx_InjectedConfigChannel+0x316>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b09      	cmp	r3, #9
 800528e:	d925      	bls.n	80052dc <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68d9      	ldr	r1, [r3, #12]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	b29b      	uxth	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	4613      	mov	r3, r2
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	4413      	add	r3, r2
 80052a4:	3b1e      	subs	r3, #30
 80052a6:	2207      	movs	r2, #7
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	43da      	mvns	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	400a      	ands	r2, r1
 80052b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68d9      	ldr	r1, [r3, #12]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	4618      	mov	r0, r3
 80052c8:	4603      	mov	r3, r0
 80052ca:	005b      	lsls	r3, r3, #1
 80052cc:	4403      	add	r3, r0
 80052ce:	3b1e      	subs	r3, #30
 80052d0:	409a      	lsls	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	60da      	str	r2, [r3, #12]
 80052da:	e022      	b.n	8005322 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6919      	ldr	r1, [r3, #16]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	4613      	mov	r3, r2
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	4413      	add	r3, r2
 80052f0:	2207      	movs	r2, #7
 80052f2:	fa02 f303 	lsl.w	r3, r2, r3
 80052f6:	43da      	mvns	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	400a      	ands	r2, r1
 80052fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6919      	ldr	r1, [r3, #16]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	b29b      	uxth	r3, r3
 8005310:	4618      	mov	r0, r3
 8005312:	4603      	mov	r3, r0
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	4403      	add	r3, r0
 8005318:	409a      	lsls	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005330:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	3b01      	subs	r3, #1
 800533e:	051a      	lsls	r2, r3, #20
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	b2da      	uxtb	r2, r3
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	b2db      	uxtb	r3, r3
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	b2db      	uxtb	r3, r3
 800535e:	3303      	adds	r3, #3
 8005360:	b2db      	uxtb	r3, r3
 8005362:	461a      	mov	r2, r3
 8005364:	4613      	mov	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	221f      	movs	r2, #31
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	43da      	mvns	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	400a      	ands	r2, r1
 8005378:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	4618      	mov	r0, r3
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	b2da      	uxtb	r2, r3
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	b2db      	uxtb	r3, r3
 8005398:	3303      	adds	r3, #3
 800539a:	b2db      	uxtb	r3, r3
 800539c:	461a      	mov	r2, r3
 800539e:	4613      	mov	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	fa00 f203 	lsl.w	r2, r0, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	4a75      	ldr	r2, [pc, #468]	; (800558c <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d022      	beq.n	8005400 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80053c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6899      	ldr	r1, [r3, #8]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	699a      	ldr	r2, [r3, #24]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80053ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6899      	ldr	r1, [r3, #8]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	69da      	ldr	r2, [r3, #28]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	609a      	str	r2, [r3, #8]
 80053fe:	e00f      	b.n	8005420 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800540e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800541e:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	7d5b      	ldrb	r3, [r3, #21]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d008      	beq.n	800543a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005436:	605a      	str	r2, [r3, #4]
 8005438:	e007      	b.n	800544a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005448:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	7d1b      	ldrb	r3, [r3, #20]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d008      	beq.n	8005464 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005460:	605a      	str	r2, [r3, #4]
 8005462:	e007      	b.n	8005474 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005472:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b03      	cmp	r3, #3
 800547a:	d02e      	beq.n	80054da <HAL_ADCEx_InjectedConfigChannel+0x272>
 800547c:	2b03      	cmp	r3, #3
 800547e:	d840      	bhi.n	8005502 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8005480:	2b01      	cmp	r3, #1
 8005482:	d002      	beq.n	800548a <HAL_ADCEx_InjectedConfigChannel+0x222>
 8005484:	2b02      	cmp	r3, #2
 8005486:	d014      	beq.n	80054b2 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8005488:	e03b      	b.n	8005502 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005498:	f023 030f 	bic.w	r3, r3, #15
 800549c:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6959      	ldr	r1, [r3, #20]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	615a      	str	r2, [r3, #20]
      break;
 80054b0:	e03b      	b.n	800552a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6812      	ldr	r2, [r2, #0]
 80054bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80054c0:	f023 030f 	bic.w	r3, r3, #15
 80054c4:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6999      	ldr	r1, [r3, #24]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	619a      	str	r2, [r3, #24]
      break;
 80054d8:	e027      	b.n	800552a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6812      	ldr	r2, [r2, #0]
 80054e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80054e8:	f023 030f 	bic.w	r3, r3, #15
 80054ec:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69d9      	ldr	r1, [r3, #28]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	61da      	str	r2, [r3, #28]
      break;
 8005500:	e013      	b.n	800552a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6812      	ldr	r2, [r2, #0]
 800550c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005510:	f023 030f 	bic.w	r3, r3, #15
 8005514:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6a19      	ldr	r1, [r3, #32]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	621a      	str	r2, [r3, #32]
      break;
 8005528:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800552a:	4b19      	ldr	r3, [pc, #100]	; (8005590 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800552c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a18      	ldr	r2, [pc, #96]	; (8005594 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d109      	bne.n	800554c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b12      	cmp	r3, #18
 800553e:	d105      	bne.n	800554c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a10      	ldr	r2, [pc, #64]	; (8005594 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d10e      	bne.n	8005574 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a0f      	ldr	r2, [pc, #60]	; (8005598 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d003      	beq.n	8005568 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b11      	cmp	r3, #17
 8005566:	d105      	bne.n	8005574 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	000f0001 	.word	0x000f0001
 8005590:	40012300 	.word	0x40012300
 8005594:	40012000 	.word	0x40012000
 8005598:	10000012 	.word	0x10000012

0800559c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055ac:	4b0c      	ldr	r3, [pc, #48]	; (80055e0 <__NVIC_SetPriorityGrouping+0x44>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055b8:	4013      	ands	r3, r2
 80055ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055ce:	4a04      	ldr	r2, [pc, #16]	; (80055e0 <__NVIC_SetPriorityGrouping+0x44>)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	60d3      	str	r3, [r2, #12]
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	e000ed00 	.word	0xe000ed00

080055e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055e4:	b480      	push	{r7}
 80055e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055e8:	4b04      	ldr	r3, [pc, #16]	; (80055fc <__NVIC_GetPriorityGrouping+0x18>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	0a1b      	lsrs	r3, r3, #8
 80055ee:	f003 0307 	and.w	r3, r3, #7
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	e000ed00 	.word	0xe000ed00

08005600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	4603      	mov	r3, r0
 8005608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800560a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560e:	2b00      	cmp	r3, #0
 8005610:	db0b      	blt.n	800562a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	f003 021f 	and.w	r2, r3, #31
 8005618:	4907      	ldr	r1, [pc, #28]	; (8005638 <__NVIC_EnableIRQ+0x38>)
 800561a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	2001      	movs	r0, #1
 8005622:	fa00 f202 	lsl.w	r2, r0, r2
 8005626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	e000e100 	.word	0xe000e100

0800563c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	4603      	mov	r3, r0
 8005644:	6039      	str	r1, [r7, #0]
 8005646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800564c:	2b00      	cmp	r3, #0
 800564e:	db0a      	blt.n	8005666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	b2da      	uxtb	r2, r3
 8005654:	490c      	ldr	r1, [pc, #48]	; (8005688 <__NVIC_SetPriority+0x4c>)
 8005656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800565a:	0112      	lsls	r2, r2, #4
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	440b      	add	r3, r1
 8005660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005664:	e00a      	b.n	800567c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	b2da      	uxtb	r2, r3
 800566a:	4908      	ldr	r1, [pc, #32]	; (800568c <__NVIC_SetPriority+0x50>)
 800566c:	79fb      	ldrb	r3, [r7, #7]
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	3b04      	subs	r3, #4
 8005674:	0112      	lsls	r2, r2, #4
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	440b      	add	r3, r1
 800567a:	761a      	strb	r2, [r3, #24]
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	e000e100 	.word	0xe000e100
 800568c:	e000ed00 	.word	0xe000ed00

08005690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005690:	b480      	push	{r7}
 8005692:	b089      	sub	sp, #36	; 0x24
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	f1c3 0307 	rsb	r3, r3, #7
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	bf28      	it	cs
 80056ae:	2304      	movcs	r3, #4
 80056b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	3304      	adds	r3, #4
 80056b6:	2b06      	cmp	r3, #6
 80056b8:	d902      	bls.n	80056c0 <NVIC_EncodePriority+0x30>
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	3b03      	subs	r3, #3
 80056be:	e000      	b.n	80056c2 <NVIC_EncodePriority+0x32>
 80056c0:	2300      	movs	r3, #0
 80056c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056c4:	f04f 32ff 	mov.w	r2, #4294967295
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	43da      	mvns	r2, r3
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	401a      	ands	r2, r3
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056d8:	f04f 31ff 	mov.w	r1, #4294967295
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	fa01 f303 	lsl.w	r3, r1, r3
 80056e2:	43d9      	mvns	r1, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056e8:	4313      	orrs	r3, r2
         );
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3724      	adds	r7, #36	; 0x24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
	...

080056f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3b01      	subs	r3, #1
 8005704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005708:	d301      	bcc.n	800570e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800570a:	2301      	movs	r3, #1
 800570c:	e00f      	b.n	800572e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800570e:	4a0a      	ldr	r2, [pc, #40]	; (8005738 <SysTick_Config+0x40>)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3b01      	subs	r3, #1
 8005714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005716:	210f      	movs	r1, #15
 8005718:	f04f 30ff 	mov.w	r0, #4294967295
 800571c:	f7ff ff8e 	bl	800563c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005720:	4b05      	ldr	r3, [pc, #20]	; (8005738 <SysTick_Config+0x40>)
 8005722:	2200      	movs	r2, #0
 8005724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005726:	4b04      	ldr	r3, [pc, #16]	; (8005738 <SysTick_Config+0x40>)
 8005728:	2207      	movs	r2, #7
 800572a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	e000e010 	.word	0xe000e010

0800573c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7ff ff29 	bl	800559c <__NVIC_SetPriorityGrouping>
}
 800574a:	bf00      	nop
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005752:	b580      	push	{r7, lr}
 8005754:	b086      	sub	sp, #24
 8005756:	af00      	add	r7, sp, #0
 8005758:	4603      	mov	r3, r0
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	607a      	str	r2, [r7, #4]
 800575e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005764:	f7ff ff3e 	bl	80055e4 <__NVIC_GetPriorityGrouping>
 8005768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	68b9      	ldr	r1, [r7, #8]
 800576e:	6978      	ldr	r0, [r7, #20]
 8005770:	f7ff ff8e 	bl	8005690 <NVIC_EncodePriority>
 8005774:	4602      	mov	r2, r0
 8005776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800577a:	4611      	mov	r1, r2
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff ff5d 	bl	800563c <__NVIC_SetPriority>
}
 8005782:	bf00      	nop
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b082      	sub	sp, #8
 800578e:	af00      	add	r7, sp, #0
 8005790:	4603      	mov	r3, r0
 8005792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff ff31 	bl	8005600 <__NVIC_EnableIRQ>
}
 800579e:	bf00      	nop
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff ffa2 	bl	80056f8 <SysTick_Config>
 80057b4:	4603      	mov	r3, r0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80057cc:	f7fe fe3c 	bl	8004448 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e099      	b.n	8005910 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0201 	bic.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057fc:	e00f      	b.n	800581e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057fe:	f7fe fe23 	bl	8004448 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b05      	cmp	r3, #5
 800580a:	d908      	bls.n	800581e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2220      	movs	r2, #32
 8005810:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2203      	movs	r2, #3
 8005816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e078      	b.n	8005910 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e8      	bne.n	80057fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4b38      	ldr	r3, [pc, #224]	; (8005918 <HAL_DMA_Init+0x158>)
 8005838:	4013      	ands	r3, r2
 800583a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800584a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005856:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005862:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	2b04      	cmp	r3, #4
 8005876:	d107      	bne.n	8005888 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005880:	4313      	orrs	r3, r2
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f023 0307 	bic.w	r3, r3, #7
 800589e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d117      	bne.n	80058e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00e      	beq.n	80058e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fadf 	bl	8005e88 <DMA_CheckFifoParam>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2240      	movs	r2, #64	; 0x40
 80058d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80058de:	2301      	movs	r3, #1
 80058e0:	e016      	b.n	8005910 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fa96 	bl	8005e1c <DMA_CalcBaseAndBitshift>
 80058f0:	4603      	mov	r3, r0
 80058f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f8:	223f      	movs	r2, #63	; 0x3f
 80058fa:	409a      	lsls	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	f010803f 	.word	0xf010803f

0800591c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005932:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_DMA_Start_IT+0x26>
 800593e:	2302      	movs	r3, #2
 8005940:	e040      	b.n	80059c4 <HAL_DMA_Start_IT+0xa8>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b01      	cmp	r3, #1
 8005954:	d12f      	bne.n	80059b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2202      	movs	r2, #2
 800595a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 fa28 	bl	8005dc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005974:	223f      	movs	r2, #63	; 0x3f
 8005976:	409a      	lsls	r2, r3
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0216 	orr.w	r2, r2, #22
 800598a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0208 	orr.w	r2, r2, #8
 80059a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f042 0201 	orr.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	e005      	b.n	80059c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80059be:	2302      	movs	r3, #2
 80059c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80059c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3718      	adds	r7, #24
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80059da:	f7fe fd35 	bl	8004448 <HAL_GetTick>
 80059de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d008      	beq.n	80059fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2280      	movs	r2, #128	; 0x80
 80059f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e052      	b.n	8005aa4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0216 	bic.w	r2, r2, #22
 8005a0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	695a      	ldr	r2, [r3, #20]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d103      	bne.n	8005a2e <HAL_DMA_Abort+0x62>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d007      	beq.n	8005a3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0208 	bic.w	r2, r2, #8
 8005a3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0201 	bic.w	r2, r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a4e:	e013      	b.n	8005a78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a50:	f7fe fcfa 	bl	8004448 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b05      	cmp	r3, #5
 8005a5c:	d90c      	bls.n	8005a78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2203      	movs	r2, #3
 8005a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e015      	b.n	8005aa4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e4      	bne.n	8005a50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a8a:	223f      	movs	r2, #63	; 0x3f
 8005a8c:	409a      	lsls	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ab8:	4b8e      	ldr	r3, [pc, #568]	; (8005cf4 <HAL_DMA_IRQHandler+0x248>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a8e      	ldr	r2, [pc, #568]	; (8005cf8 <HAL_DMA_IRQHandler+0x24c>)
 8005abe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac2:	0a9b      	lsrs	r3, r3, #10
 8005ac4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad6:	2208      	movs	r2, #8
 8005ad8:	409a      	lsls	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	4013      	ands	r3, r2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d01a      	beq.n	8005b18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d013      	beq.n	8005b18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0204 	bic.w	r2, r2, #4
 8005afe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b04:	2208      	movs	r2, #8
 8005b06:	409a      	lsls	r2, r3
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b10:	f043 0201 	orr.w	r2, r3, #1
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	409a      	lsls	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4013      	ands	r3, r2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d012      	beq.n	8005b4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00b      	beq.n	8005b4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	409a      	lsls	r2, r3
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b46:	f043 0202 	orr.w	r2, r3, #2
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b52:	2204      	movs	r2, #4
 8005b54:	409a      	lsls	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d012      	beq.n	8005b84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00b      	beq.n	8005b84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b70:	2204      	movs	r2, #4
 8005b72:	409a      	lsls	r2, r3
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b7c:	f043 0204 	orr.w	r2, r3, #4
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b88:	2210      	movs	r2, #16
 8005b8a:	409a      	lsls	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d043      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d03c      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba6:	2210      	movs	r2, #16
 8005ba8:	409a      	lsls	r2, r3
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d018      	beq.n	8005bee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d108      	bne.n	8005bdc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d024      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	4798      	blx	r3
 8005bda:	e01f      	b.n	8005c1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d01b      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	4798      	blx	r3
 8005bec:	e016      	b.n	8005c1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d107      	bne.n	8005c0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0208 	bic.w	r2, r2, #8
 8005c0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c20:	2220      	movs	r2, #32
 8005c22:	409a      	lsls	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4013      	ands	r3, r2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 808f 	beq.w	8005d4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 8087 	beq.w	8005d4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c42:	2220      	movs	r2, #32
 8005c44:	409a      	lsls	r2, r3
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b05      	cmp	r3, #5
 8005c54:	d136      	bne.n	8005cc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0216 	bic.w	r2, r2, #22
 8005c64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	695a      	ldr	r2, [r3, #20]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d103      	bne.n	8005c86 <HAL_DMA_IRQHandler+0x1da>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d007      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0208 	bic.w	r2, r2, #8
 8005c94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9a:	223f      	movs	r2, #63	; 0x3f
 8005c9c:	409a      	lsls	r2, r3
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d07e      	beq.n	8005db8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	4798      	blx	r3
        }
        return;
 8005cc2:	e079      	b.n	8005db8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01d      	beq.n	8005d0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10d      	bne.n	8005cfc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d031      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	4798      	blx	r3
 8005cf0:	e02c      	b.n	8005d4c <HAL_DMA_IRQHandler+0x2a0>
 8005cf2:	bf00      	nop
 8005cf4:	200008a4 	.word	0x200008a4
 8005cf8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d023      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	4798      	blx	r3
 8005d0c:	e01e      	b.n	8005d4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10f      	bne.n	8005d3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0210 	bic.w	r2, r2, #16
 8005d2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d032      	beq.n	8005dba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d022      	beq.n	8005da6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2205      	movs	r2, #5
 8005d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0201 	bic.w	r2, r2, #1
 8005d76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	60bb      	str	r3, [r7, #8]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d307      	bcc.n	8005d94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1f2      	bne.n	8005d78 <HAL_DMA_IRQHandler+0x2cc>
 8005d92:	e000      	b.n	8005d96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005d94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d005      	beq.n	8005dba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	4798      	blx	r3
 8005db6:	e000      	b.n	8005dba <HAL_DMA_IRQHandler+0x30e>
        return;
 8005db8:	bf00      	nop
    }
  }
}
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
 8005dcc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ddc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	2b40      	cmp	r3, #64	; 0x40
 8005dec:	d108      	bne.n	8005e00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005dfe:	e007      	b.n	8005e10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	60da      	str	r2, [r3, #12]
}
 8005e10:	bf00      	nop
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	3b10      	subs	r3, #16
 8005e2c:	4a14      	ldr	r2, [pc, #80]	; (8005e80 <DMA_CalcBaseAndBitshift+0x64>)
 8005e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e32:	091b      	lsrs	r3, r3, #4
 8005e34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005e36:	4a13      	ldr	r2, [pc, #76]	; (8005e84 <DMA_CalcBaseAndBitshift+0x68>)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d909      	bls.n	8005e5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e52:	f023 0303 	bic.w	r3, r3, #3
 8005e56:	1d1a      	adds	r2, r3, #4
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	659a      	str	r2, [r3, #88]	; 0x58
 8005e5c:	e007      	b.n	8005e6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e66:	f023 0303 	bic.w	r3, r3, #3
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	aaaaaaab 	.word	0xaaaaaaab
 8005e84:	0800a0fc 	.word	0x0800a0fc

08005e88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e90:	2300      	movs	r3, #0
 8005e92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d11f      	bne.n	8005ee2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b03      	cmp	r3, #3
 8005ea6:	d856      	bhi.n	8005f56 <DMA_CheckFifoParam+0xce>
 8005ea8:	a201      	add	r2, pc, #4	; (adr r2, 8005eb0 <DMA_CheckFifoParam+0x28>)
 8005eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eae:	bf00      	nop
 8005eb0:	08005ec1 	.word	0x08005ec1
 8005eb4:	08005ed3 	.word	0x08005ed3
 8005eb8:	08005ec1 	.word	0x08005ec1
 8005ebc:	08005f57 	.word	0x08005f57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d046      	beq.n	8005f5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ed0:	e043      	b.n	8005f5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005eda:	d140      	bne.n	8005f5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ee0:	e03d      	b.n	8005f5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eea:	d121      	bne.n	8005f30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d837      	bhi.n	8005f62 <DMA_CheckFifoParam+0xda>
 8005ef2:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <DMA_CheckFifoParam+0x70>)
 8005ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef8:	08005f09 	.word	0x08005f09
 8005efc:	08005f0f 	.word	0x08005f0f
 8005f00:	08005f09 	.word	0x08005f09
 8005f04:	08005f21 	.word	0x08005f21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f0c:	e030      	b.n	8005f70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d025      	beq.n	8005f66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f1e:	e022      	b.n	8005f66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f28:	d11f      	bne.n	8005f6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005f2e:	e01c      	b.n	8005f6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d903      	bls.n	8005f3e <DMA_CheckFifoParam+0xb6>
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	d003      	beq.n	8005f44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005f3c:	e018      	b.n	8005f70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	73fb      	strb	r3, [r7, #15]
      break;
 8005f42:	e015      	b.n	8005f70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00e      	beq.n	8005f6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	73fb      	strb	r3, [r7, #15]
      break;
 8005f54:	e00b      	b.n	8005f6e <DMA_CheckFifoParam+0xe6>
      break;
 8005f56:	bf00      	nop
 8005f58:	e00a      	b.n	8005f70 <DMA_CheckFifoParam+0xe8>
      break;
 8005f5a:	bf00      	nop
 8005f5c:	e008      	b.n	8005f70 <DMA_CheckFifoParam+0xe8>
      break;
 8005f5e:	bf00      	nop
 8005f60:	e006      	b.n	8005f70 <DMA_CheckFifoParam+0xe8>
      break;
 8005f62:	bf00      	nop
 8005f64:	e004      	b.n	8005f70 <DMA_CheckFifoParam+0xe8>
      break;
 8005f66:	bf00      	nop
 8005f68:	e002      	b.n	8005f70 <DMA_CheckFifoParam+0xe8>
      break;   
 8005f6a:	bf00      	nop
 8005f6c:	e000      	b.n	8005f70 <DMA_CheckFifoParam+0xe8>
      break;
 8005f6e:	bf00      	nop
    }
  } 
  
  return status; 
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop

08005f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b089      	sub	sp, #36	; 0x24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f96:	2300      	movs	r3, #0
 8005f98:	61fb      	str	r3, [r7, #28]
 8005f9a:	e159      	b.n	8006250 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4013      	ands	r3, r2
 8005fae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	f040 8148 	bne.w	800624a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d005      	beq.n	8005fd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d130      	bne.n	8006034 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	2203      	movs	r2, #3
 8005fde:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe2:	43db      	mvns	r3, r3
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006008:	2201      	movs	r2, #1
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	fa02 f303 	lsl.w	r3, r2, r3
 8006010:	43db      	mvns	r3, r3
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	4013      	ands	r3, r2
 8006016:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	091b      	lsrs	r3, r3, #4
 800601e:	f003 0201 	and.w	r2, r3, #1
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	fa02 f303 	lsl.w	r3, r2, r3
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	4313      	orrs	r3, r2
 800602c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f003 0303 	and.w	r3, r3, #3
 800603c:	2b03      	cmp	r3, #3
 800603e:	d017      	beq.n	8006070 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	2203      	movs	r2, #3
 800604c:	fa02 f303 	lsl.w	r3, r2, r3
 8006050:	43db      	mvns	r3, r3
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	4013      	ands	r3, r2
 8006056:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	fa02 f303 	lsl.w	r3, r2, r3
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	4313      	orrs	r3, r2
 8006068:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f003 0303 	and.w	r3, r3, #3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d123      	bne.n	80060c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	08da      	lsrs	r2, r3, #3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3208      	adds	r2, #8
 8006084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006088:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	220f      	movs	r2, #15
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	43db      	mvns	r3, r3
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	4013      	ands	r3, r2
 800609e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	08da      	lsrs	r2, r3, #3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	3208      	adds	r2, #8
 80060be:	69b9      	ldr	r1, [r7, #24]
 80060c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	2203      	movs	r2, #3
 80060d0:	fa02 f303 	lsl.w	r3, r2, r3
 80060d4:	43db      	mvns	r3, r3
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	4013      	ands	r3, r2
 80060da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f003 0203 	and.w	r2, r3, #3
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 80a2 	beq.w	800624a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006106:	2300      	movs	r3, #0
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	4b57      	ldr	r3, [pc, #348]	; (8006268 <HAL_GPIO_Init+0x2e8>)
 800610c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610e:	4a56      	ldr	r2, [pc, #344]	; (8006268 <HAL_GPIO_Init+0x2e8>)
 8006110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006114:	6453      	str	r3, [r2, #68]	; 0x44
 8006116:	4b54      	ldr	r3, [pc, #336]	; (8006268 <HAL_GPIO_Init+0x2e8>)
 8006118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006122:	4a52      	ldr	r2, [pc, #328]	; (800626c <HAL_GPIO_Init+0x2ec>)
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	089b      	lsrs	r3, r3, #2
 8006128:	3302      	adds	r3, #2
 800612a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800612e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	220f      	movs	r2, #15
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	43db      	mvns	r3, r3
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	4013      	ands	r3, r2
 8006144:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a49      	ldr	r2, [pc, #292]	; (8006270 <HAL_GPIO_Init+0x2f0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d019      	beq.n	8006182 <HAL_GPIO_Init+0x202>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a48      	ldr	r2, [pc, #288]	; (8006274 <HAL_GPIO_Init+0x2f4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d013      	beq.n	800617e <HAL_GPIO_Init+0x1fe>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a47      	ldr	r2, [pc, #284]	; (8006278 <HAL_GPIO_Init+0x2f8>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d00d      	beq.n	800617a <HAL_GPIO_Init+0x1fa>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a46      	ldr	r2, [pc, #280]	; (800627c <HAL_GPIO_Init+0x2fc>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d007      	beq.n	8006176 <HAL_GPIO_Init+0x1f6>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a45      	ldr	r2, [pc, #276]	; (8006280 <HAL_GPIO_Init+0x300>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d101      	bne.n	8006172 <HAL_GPIO_Init+0x1f2>
 800616e:	2304      	movs	r3, #4
 8006170:	e008      	b.n	8006184 <HAL_GPIO_Init+0x204>
 8006172:	2307      	movs	r3, #7
 8006174:	e006      	b.n	8006184 <HAL_GPIO_Init+0x204>
 8006176:	2303      	movs	r3, #3
 8006178:	e004      	b.n	8006184 <HAL_GPIO_Init+0x204>
 800617a:	2302      	movs	r3, #2
 800617c:	e002      	b.n	8006184 <HAL_GPIO_Init+0x204>
 800617e:	2301      	movs	r3, #1
 8006180:	e000      	b.n	8006184 <HAL_GPIO_Init+0x204>
 8006182:	2300      	movs	r3, #0
 8006184:	69fa      	ldr	r2, [r7, #28]
 8006186:	f002 0203 	and.w	r2, r2, #3
 800618a:	0092      	lsls	r2, r2, #2
 800618c:	4093      	lsls	r3, r2
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	4313      	orrs	r3, r2
 8006192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006194:	4935      	ldr	r1, [pc, #212]	; (800626c <HAL_GPIO_Init+0x2ec>)
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	089b      	lsrs	r3, r3, #2
 800619a:	3302      	adds	r3, #2
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80061a2:	4b38      	ldr	r3, [pc, #224]	; (8006284 <HAL_GPIO_Init+0x304>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	43db      	mvns	r3, r3
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	4013      	ands	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80061c6:	4a2f      	ldr	r2, [pc, #188]	; (8006284 <HAL_GPIO_Init+0x304>)
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80061cc:	4b2d      	ldr	r3, [pc, #180]	; (8006284 <HAL_GPIO_Init+0x304>)
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	43db      	mvns	r3, r3
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	4013      	ands	r3, r2
 80061da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d003      	beq.n	80061f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061f0:	4a24      	ldr	r2, [pc, #144]	; (8006284 <HAL_GPIO_Init+0x304>)
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80061f6:	4b23      	ldr	r3, [pc, #140]	; (8006284 <HAL_GPIO_Init+0x304>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	43db      	mvns	r3, r3
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	4013      	ands	r3, r2
 8006204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	4313      	orrs	r3, r2
 8006218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800621a:	4a1a      	ldr	r2, [pc, #104]	; (8006284 <HAL_GPIO_Init+0x304>)
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006220:	4b18      	ldr	r3, [pc, #96]	; (8006284 <HAL_GPIO_Init+0x304>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	43db      	mvns	r3, r3
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	4013      	ands	r3, r2
 800622e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d003      	beq.n	8006244 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006244:	4a0f      	ldr	r2, [pc, #60]	; (8006284 <HAL_GPIO_Init+0x304>)
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	3301      	adds	r3, #1
 800624e:	61fb      	str	r3, [r7, #28]
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	2b0f      	cmp	r3, #15
 8006254:	f67f aea2 	bls.w	8005f9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006258:	bf00      	nop
 800625a:	bf00      	nop
 800625c:	3724      	adds	r7, #36	; 0x24
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	40023800 	.word	0x40023800
 800626c:	40013800 	.word	0x40013800
 8006270:	40020000 	.word	0x40020000
 8006274:	40020400 	.word	0x40020400
 8006278:	40020800 	.word	0x40020800
 800627c:	40020c00 	.word	0x40020c00
 8006280:	40021000 	.word	0x40021000
 8006284:	40013c00 	.word	0x40013c00

08006288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	807b      	strh	r3, [r7, #2]
 8006294:	4613      	mov	r3, r2
 8006296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006298:	787b      	ldrb	r3, [r7, #1]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800629e:	887a      	ldrh	r2, [r7, #2]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80062a4:	e003      	b.n	80062ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80062a6:	887b      	ldrh	r3, [r7, #2]
 80062a8:	041a      	lsls	r2, r3, #16
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	619a      	str	r2, [r3, #24]
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
	...

080062bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e12b      	b.n	8006526 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fd fdda 	bl	8003e9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2224      	movs	r2, #36	; 0x24
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0201 	bic.w	r2, r2, #1
 80062fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800630e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800631e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006320:	f001 fbbc 	bl	8007a9c <HAL_RCC_GetPCLK1Freq>
 8006324:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	4a81      	ldr	r2, [pc, #516]	; (8006530 <HAL_I2C_Init+0x274>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d807      	bhi.n	8006340 <HAL_I2C_Init+0x84>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4a80      	ldr	r2, [pc, #512]	; (8006534 <HAL_I2C_Init+0x278>)
 8006334:	4293      	cmp	r3, r2
 8006336:	bf94      	ite	ls
 8006338:	2301      	movls	r3, #1
 800633a:	2300      	movhi	r3, #0
 800633c:	b2db      	uxtb	r3, r3
 800633e:	e006      	b.n	800634e <HAL_I2C_Init+0x92>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4a7d      	ldr	r2, [pc, #500]	; (8006538 <HAL_I2C_Init+0x27c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	bf94      	ite	ls
 8006348:	2301      	movls	r3, #1
 800634a:	2300      	movhi	r3, #0
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e0e7      	b.n	8006526 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4a78      	ldr	r2, [pc, #480]	; (800653c <HAL_I2C_Init+0x280>)
 800635a:	fba2 2303 	umull	r2, r3, r2, r3
 800635e:	0c9b      	lsrs	r3, r3, #18
 8006360:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	430a      	orrs	r2, r1
 8006374:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	4a6a      	ldr	r2, [pc, #424]	; (8006530 <HAL_I2C_Init+0x274>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d802      	bhi.n	8006390 <HAL_I2C_Init+0xd4>
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	3301      	adds	r3, #1
 800638e:	e009      	b.n	80063a4 <HAL_I2C_Init+0xe8>
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006396:	fb02 f303 	mul.w	r3, r2, r3
 800639a:	4a69      	ldr	r2, [pc, #420]	; (8006540 <HAL_I2C_Init+0x284>)
 800639c:	fba2 2303 	umull	r2, r3, r2, r3
 80063a0:	099b      	lsrs	r3, r3, #6
 80063a2:	3301      	adds	r3, #1
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6812      	ldr	r2, [r2, #0]
 80063a8:	430b      	orrs	r3, r1
 80063aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80063b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	495c      	ldr	r1, [pc, #368]	; (8006530 <HAL_I2C_Init+0x274>)
 80063c0:	428b      	cmp	r3, r1
 80063c2:	d819      	bhi.n	80063f8 <HAL_I2C_Init+0x13c>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	1e59      	subs	r1, r3, #1
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80063d2:	1c59      	adds	r1, r3, #1
 80063d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80063d8:	400b      	ands	r3, r1
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <HAL_I2C_Init+0x138>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	1e59      	subs	r1, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80063ec:	3301      	adds	r3, #1
 80063ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063f2:	e051      	b.n	8006498 <HAL_I2C_Init+0x1dc>
 80063f4:	2304      	movs	r3, #4
 80063f6:	e04f      	b.n	8006498 <HAL_I2C_Init+0x1dc>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d111      	bne.n	8006424 <HAL_I2C_Init+0x168>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	1e58      	subs	r0, r3, #1
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6859      	ldr	r1, [r3, #4]
 8006408:	460b      	mov	r3, r1
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	440b      	add	r3, r1
 800640e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006412:	3301      	adds	r3, #1
 8006414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006418:	2b00      	cmp	r3, #0
 800641a:	bf0c      	ite	eq
 800641c:	2301      	moveq	r3, #1
 800641e:	2300      	movne	r3, #0
 8006420:	b2db      	uxtb	r3, r3
 8006422:	e012      	b.n	800644a <HAL_I2C_Init+0x18e>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	1e58      	subs	r0, r3, #1
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6859      	ldr	r1, [r3, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	440b      	add	r3, r1
 8006432:	0099      	lsls	r1, r3, #2
 8006434:	440b      	add	r3, r1
 8006436:	fbb0 f3f3 	udiv	r3, r0, r3
 800643a:	3301      	adds	r3, #1
 800643c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006440:	2b00      	cmp	r3, #0
 8006442:	bf0c      	ite	eq
 8006444:	2301      	moveq	r3, #1
 8006446:	2300      	movne	r3, #0
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <HAL_I2C_Init+0x196>
 800644e:	2301      	movs	r3, #1
 8006450:	e022      	b.n	8006498 <HAL_I2C_Init+0x1dc>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10e      	bne.n	8006478 <HAL_I2C_Init+0x1bc>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	1e58      	subs	r0, r3, #1
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6859      	ldr	r1, [r3, #4]
 8006462:	460b      	mov	r3, r1
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	440b      	add	r3, r1
 8006468:	fbb0 f3f3 	udiv	r3, r0, r3
 800646c:	3301      	adds	r3, #1
 800646e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006476:	e00f      	b.n	8006498 <HAL_I2C_Init+0x1dc>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	1e58      	subs	r0, r3, #1
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6859      	ldr	r1, [r3, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	440b      	add	r3, r1
 8006486:	0099      	lsls	r1, r3, #2
 8006488:	440b      	add	r3, r1
 800648a:	fbb0 f3f3 	udiv	r3, r0, r3
 800648e:	3301      	adds	r3, #1
 8006490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006494:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	6809      	ldr	r1, [r1, #0]
 800649c:	4313      	orrs	r3, r2
 800649e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	69da      	ldr	r2, [r3, #28]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	431a      	orrs	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80064c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6911      	ldr	r1, [r2, #16]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	68d2      	ldr	r2, [r2, #12]
 80064d2:	4311      	orrs	r1, r2
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	6812      	ldr	r2, [r2, #0]
 80064d8:	430b      	orrs	r3, r1
 80064da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	695a      	ldr	r2, [r3, #20]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	431a      	orrs	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f042 0201 	orr.w	r2, r2, #1
 8006506:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	000186a0 	.word	0x000186a0
 8006534:	001e847f 	.word	0x001e847f
 8006538:	003d08ff 	.word	0x003d08ff
 800653c:	431bde83 	.word	0x431bde83
 8006540:	10624dd3 	.word	0x10624dd3

08006544 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af02      	add	r7, sp, #8
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	4608      	mov	r0, r1
 800654e:	4611      	mov	r1, r2
 8006550:	461a      	mov	r2, r3
 8006552:	4603      	mov	r3, r0
 8006554:	817b      	strh	r3, [r7, #10]
 8006556:	460b      	mov	r3, r1
 8006558:	813b      	strh	r3, [r7, #8]
 800655a:	4613      	mov	r3, r2
 800655c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800655e:	f7fd ff73 	bl	8004448 <HAL_GetTick>
 8006562:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b20      	cmp	r3, #32
 800656e:	f040 80d9 	bne.w	8006724 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	2319      	movs	r3, #25
 8006578:	2201      	movs	r2, #1
 800657a:	496d      	ldr	r1, [pc, #436]	; (8006730 <HAL_I2C_Mem_Write+0x1ec>)
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 fc7f 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006588:	2302      	movs	r3, #2
 800658a:	e0cc      	b.n	8006726 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006592:	2b01      	cmp	r3, #1
 8006594:	d101      	bne.n	800659a <HAL_I2C_Mem_Write+0x56>
 8006596:	2302      	movs	r3, #2
 8006598:	e0c5      	b.n	8006726 <HAL_I2C_Mem_Write+0x1e2>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d007      	beq.n	80065c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0201 	orr.w	r2, r2, #1
 80065be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2221      	movs	r2, #33	; 0x21
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2240      	movs	r2, #64	; 0x40
 80065dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6a3a      	ldr	r2, [r7, #32]
 80065ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4a4d      	ldr	r2, [pc, #308]	; (8006734 <HAL_I2C_Mem_Write+0x1f0>)
 8006600:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006602:	88f8      	ldrh	r0, [r7, #6]
 8006604:	893a      	ldrh	r2, [r7, #8]
 8006606:	8979      	ldrh	r1, [r7, #10]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	9301      	str	r3, [sp, #4]
 800660c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	4603      	mov	r3, r0
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 fab6 	bl	8006b84 <I2C_RequestMemoryWrite>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d052      	beq.n	80066c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e081      	b.n	8006726 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 fd00 	bl	800702c <I2C_WaitOnTXEFlagUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00d      	beq.n	800664e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	2b04      	cmp	r3, #4
 8006638:	d107      	bne.n	800664a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006648:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e06b      	b.n	8006726 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	781a      	ldrb	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	1c5a      	adds	r2, r3, #1
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006668:	3b01      	subs	r3, #1
 800666a:	b29a      	uxth	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006674:	b29b      	uxth	r3, r3
 8006676:	3b01      	subs	r3, #1
 8006678:	b29a      	uxth	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b04      	cmp	r3, #4
 800668a:	d11b      	bne.n	80066c4 <HAL_I2C_Mem_Write+0x180>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006690:	2b00      	cmp	r3, #0
 8006692:	d017      	beq.n	80066c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	781a      	ldrb	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	1c5a      	adds	r2, r3, #1
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	3b01      	subs	r3, #1
 80066be:	b29a      	uxth	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1aa      	bne.n	8006622 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 fcec 	bl	80070ae <I2C_WaitOnBTFFlagUntilTimeout>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00d      	beq.n	80066f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d107      	bne.n	80066f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e016      	b.n	8006726 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	e000      	b.n	8006726 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006724:	2302      	movs	r3, #2
  }
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	00100002 	.word	0x00100002
 8006734:	ffff0000 	.word	0xffff0000

08006738 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b08c      	sub	sp, #48	; 0x30
 800673c:	af02      	add	r7, sp, #8
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	4608      	mov	r0, r1
 8006742:	4611      	mov	r1, r2
 8006744:	461a      	mov	r2, r3
 8006746:	4603      	mov	r3, r0
 8006748:	817b      	strh	r3, [r7, #10]
 800674a:	460b      	mov	r3, r1
 800674c:	813b      	strh	r3, [r7, #8]
 800674e:	4613      	mov	r3, r2
 8006750:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006752:	f7fd fe79 	bl	8004448 <HAL_GetTick>
 8006756:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b20      	cmp	r3, #32
 8006762:	f040 8208 	bne.w	8006b76 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	2319      	movs	r3, #25
 800676c:	2201      	movs	r2, #1
 800676e:	497b      	ldr	r1, [pc, #492]	; (800695c <HAL_I2C_Mem_Read+0x224>)
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 fb85 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800677c:	2302      	movs	r3, #2
 800677e:	e1fb      	b.n	8006b78 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006786:	2b01      	cmp	r3, #1
 8006788:	d101      	bne.n	800678e <HAL_I2C_Mem_Read+0x56>
 800678a:	2302      	movs	r3, #2
 800678c:	e1f4      	b.n	8006b78 <HAL_I2C_Mem_Read+0x440>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d007      	beq.n	80067b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0201 	orr.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2222      	movs	r2, #34	; 0x22
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2240      	movs	r2, #64	; 0x40
 80067d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80067e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4a5b      	ldr	r2, [pc, #364]	; (8006960 <HAL_I2C_Mem_Read+0x228>)
 80067f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067f6:	88f8      	ldrh	r0, [r7, #6]
 80067f8:	893a      	ldrh	r2, [r7, #8]
 80067fa:	8979      	ldrh	r1, [r7, #10]
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	4603      	mov	r3, r0
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 fa52 	bl	8006cb0 <I2C_RequestMemoryRead>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e1b0      	b.n	8006b78 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681a:	2b00      	cmp	r3, #0
 800681c:	d113      	bne.n	8006846 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800681e:	2300      	movs	r3, #0
 8006820:	623b      	str	r3, [r7, #32]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	623b      	str	r3, [r7, #32]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	623b      	str	r3, [r7, #32]
 8006832:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	e184      	b.n	8006b50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800684a:	2b01      	cmp	r3, #1
 800684c:	d11b      	bne.n	8006886 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800685c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800685e:	2300      	movs	r3, #0
 8006860:	61fb      	str	r3, [r7, #28]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	61fb      	str	r3, [r7, #28]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	61fb      	str	r3, [r7, #28]
 8006872:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	e164      	b.n	8006b50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800688a:	2b02      	cmp	r3, #2
 800688c:	d11b      	bne.n	80068c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800689c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ae:	2300      	movs	r3, #0
 80068b0:	61bb      	str	r3, [r7, #24]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	61bb      	str	r3, [r7, #24]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	61bb      	str	r3, [r7, #24]
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	e144      	b.n	8006b50 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068c6:	2300      	movs	r3, #0
 80068c8:	617b      	str	r3, [r7, #20]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	617b      	str	r3, [r7, #20]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	617b      	str	r3, [r7, #20]
 80068da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80068dc:	e138      	b.n	8006b50 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	f200 80f1 	bhi.w	8006aca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d123      	bne.n	8006938 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 fc1b 	bl	8007130 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e139      	b.n	8006b78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	691a      	ldr	r2, [r3, #16]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	b2d2      	uxtb	r2, r2
 8006910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692c:	b29b      	uxth	r3, r3
 800692e:	3b01      	subs	r3, #1
 8006930:	b29a      	uxth	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006936:	e10b      	b.n	8006b50 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800693c:	2b02      	cmp	r3, #2
 800693e:	d14e      	bne.n	80069de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006946:	2200      	movs	r2, #0
 8006948:	4906      	ldr	r1, [pc, #24]	; (8006964 <HAL_I2C_Mem_Read+0x22c>)
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 fa98 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d008      	beq.n	8006968 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e10e      	b.n	8006b78 <HAL_I2C_Mem_Read+0x440>
 800695a:	bf00      	nop
 800695c:	00100002 	.word	0x00100002
 8006960:	ffff0000 	.word	0xffff0000
 8006964:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006976:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691a      	ldr	r2, [r3, #16]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006994:	3b01      	subs	r3, #1
 8006996:	b29a      	uxth	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	3b01      	subs	r3, #1
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	691a      	ldr	r2, [r3, #16]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	b2d2      	uxtb	r2, r2
 80069b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069bc:	1c5a      	adds	r2, r3, #1
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c6:	3b01      	subs	r3, #1
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	3b01      	subs	r3, #1
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069dc:	e0b8      	b.n	8006b50 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e4:	2200      	movs	r2, #0
 80069e6:	4966      	ldr	r1, [pc, #408]	; (8006b80 <HAL_I2C_Mem_Read+0x448>)
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 fa49 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e0bf      	b.n	8006b78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	691a      	ldr	r2, [r3, #16]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	3b01      	subs	r3, #1
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a40:	2200      	movs	r2, #0
 8006a42:	494f      	ldr	r1, [pc, #316]	; (8006b80 <HAL_I2C_Mem_Read+0x448>)
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 fa1b 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e091      	b.n	8006b78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	691a      	ldr	r2, [r3, #16]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a80:	3b01      	subs	r3, #1
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	691a      	ldr	r2, [r3, #16]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	b2d2      	uxtb	r2, r2
 8006aa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ac8:	e042      	b.n	8006b50 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006acc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 fb2e 	bl	8007130 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e04c      	b.n	8006b78 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	691a      	ldr	r2, [r3, #16]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	b2d2      	uxtb	r2, r2
 8006aea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006afa:	3b01      	subs	r3, #1
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	f003 0304 	and.w	r3, r3, #4
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	d118      	bne.n	8006b50 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691a      	ldr	r2, [r3, #16]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	b2d2      	uxtb	r2, r2
 8006b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	1c5a      	adds	r2, r3, #1
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f47f aec2 	bne.w	80068de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	e000      	b.n	8006b78 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006b76:	2302      	movs	r3, #2
  }
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3728      	adds	r7, #40	; 0x28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	00010004 	.word	0x00010004

08006b84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af02      	add	r7, sp, #8
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	4611      	mov	r1, r2
 8006b90:	461a      	mov	r2, r3
 8006b92:	4603      	mov	r3, r0
 8006b94:	817b      	strh	r3, [r7, #10]
 8006b96:	460b      	mov	r3, r1
 8006b98:	813b      	strh	r3, [r7, #8]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f000 f960 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00d      	beq.n	8006be2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bd4:	d103      	bne.n	8006bde <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e05f      	b.n	8006ca2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006be2:	897b      	ldrh	r3, [r7, #10]
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	461a      	mov	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bf0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	6a3a      	ldr	r2, [r7, #32]
 8006bf6:	492d      	ldr	r1, [pc, #180]	; (8006cac <I2C_RequestMemoryWrite+0x128>)
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 f998 	bl	8006f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e04c      	b.n	8006ca2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c08:	2300      	movs	r3, #0
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	617b      	str	r3, [r7, #20]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	617b      	str	r3, [r7, #20]
 8006c1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c20:	6a39      	ldr	r1, [r7, #32]
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 fa02 	bl	800702c <I2C_WaitOnTXEFlagUntilTimeout>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00d      	beq.n	8006c4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	2b04      	cmp	r3, #4
 8006c34:	d107      	bne.n	8006c46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e02b      	b.n	8006ca2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c4a:	88fb      	ldrh	r3, [r7, #6]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d105      	bne.n	8006c5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c50:	893b      	ldrh	r3, [r7, #8]
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	611a      	str	r2, [r3, #16]
 8006c5a:	e021      	b.n	8006ca0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c5c:	893b      	ldrh	r3, [r7, #8]
 8006c5e:	0a1b      	lsrs	r3, r3, #8
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c6c:	6a39      	ldr	r1, [r7, #32]
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f000 f9dc 	bl	800702c <I2C_WaitOnTXEFlagUntilTimeout>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00d      	beq.n	8006c96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d107      	bne.n	8006c92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e005      	b.n	8006ca2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c96:	893b      	ldrh	r3, [r7, #8]
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3718      	adds	r7, #24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	00010002 	.word	0x00010002

08006cb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b088      	sub	sp, #32
 8006cb4:	af02      	add	r7, sp, #8
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	4608      	mov	r0, r1
 8006cba:	4611      	mov	r1, r2
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	817b      	strh	r3, [r7, #10]
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	813b      	strh	r3, [r7, #8]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cd8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ce8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f000 f8c2 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00d      	beq.n	8006d1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d10:	d103      	bne.n	8006d1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e0aa      	b.n	8006e74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d1e:	897b      	ldrh	r3, [r7, #10]
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	461a      	mov	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	6a3a      	ldr	r2, [r7, #32]
 8006d32:	4952      	ldr	r1, [pc, #328]	; (8006e7c <I2C_RequestMemoryRead+0x1cc>)
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 f8fa 	bl	8006f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e097      	b.n	8006e74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d44:	2300      	movs	r3, #0
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5c:	6a39      	ldr	r1, [r7, #32]
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 f964 	bl	800702c <I2C_WaitOnTXEFlagUntilTimeout>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00d      	beq.n	8006d86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	d107      	bne.n	8006d82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e076      	b.n	8006e74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d105      	bne.n	8006d98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d8c:	893b      	ldrh	r3, [r7, #8]
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	611a      	str	r2, [r3, #16]
 8006d96:	e021      	b.n	8006ddc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d98:	893b      	ldrh	r3, [r7, #8]
 8006d9a:	0a1b      	lsrs	r3, r3, #8
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da8:	6a39      	ldr	r1, [r7, #32]
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 f93e 	bl	800702c <I2C_WaitOnTXEFlagUntilTimeout>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00d      	beq.n	8006dd2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	2b04      	cmp	r3, #4
 8006dbc:	d107      	bne.n	8006dce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e050      	b.n	8006e74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006dd2:	893b      	ldrh	r3, [r7, #8]
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dde:	6a39      	ldr	r1, [r7, #32]
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f000 f923 	bl	800702c <I2C_WaitOnTXEFlagUntilTimeout>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00d      	beq.n	8006e08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d107      	bne.n	8006e04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e035      	b.n	8006e74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 f82b 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00d      	beq.n	8006e4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3e:	d103      	bne.n	8006e48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e013      	b.n	8006e74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006e4c:	897b      	ldrh	r3, [r7, #10]
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	f043 0301 	orr.w	r3, r3, #1
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	6a3a      	ldr	r2, [r7, #32]
 8006e60:	4906      	ldr	r1, [pc, #24]	; (8006e7c <I2C_RequestMemoryRead+0x1cc>)
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 f863 	bl	8006f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e000      	b.n	8006e74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3718      	adds	r7, #24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	00010002 	.word	0x00010002

08006e80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	603b      	str	r3, [r7, #0]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e90:	e025      	b.n	8006ede <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e98:	d021      	beq.n	8006ede <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e9a:	f7fd fad5 	bl	8004448 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d302      	bcc.n	8006eb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d116      	bne.n	8006ede <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	f043 0220 	orr.w	r2, r3, #32
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e023      	b.n	8006f26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	0c1b      	lsrs	r3, r3, #16
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d10d      	bne.n	8006f04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	43da      	mvns	r2, r3
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	bf0c      	ite	eq
 8006efa:	2301      	moveq	r3, #1
 8006efc:	2300      	movne	r3, #0
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	461a      	mov	r2, r3
 8006f02:	e00c      	b.n	8006f1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	43da      	mvns	r2, r3
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	4013      	ands	r3, r2
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	bf0c      	ite	eq
 8006f16:	2301      	moveq	r3, #1
 8006f18:	2300      	movne	r3, #0
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d0b6      	beq.n	8006e92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	607a      	str	r2, [r7, #4]
 8006f3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f3c:	e051      	b.n	8006fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f4c:	d123      	bne.n	8006f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	f043 0204 	orr.w	r2, r3, #4
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e046      	b.n	8007024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9c:	d021      	beq.n	8006fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f9e:	f7fd fa53 	bl	8004448 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d302      	bcc.n	8006fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d116      	bne.n	8006fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	f043 0220 	orr.w	r2, r3, #32
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e020      	b.n	8007024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	0c1b      	lsrs	r3, r3, #16
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d10c      	bne.n	8007006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	43da      	mvns	r2, r3
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	bf14      	ite	ne
 8006ffe:	2301      	movne	r3, #1
 8007000:	2300      	moveq	r3, #0
 8007002:	b2db      	uxtb	r3, r3
 8007004:	e00b      	b.n	800701e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	43da      	mvns	r2, r3
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	4013      	ands	r3, r2
 8007012:	b29b      	uxth	r3, r3
 8007014:	2b00      	cmp	r3, #0
 8007016:	bf14      	ite	ne
 8007018:	2301      	movne	r3, #1
 800701a:	2300      	moveq	r3, #0
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d18d      	bne.n	8006f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007038:	e02d      	b.n	8007096 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 f8ce 	bl	80071dc <I2C_IsAcknowledgeFailed>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e02d      	b.n	80070a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007050:	d021      	beq.n	8007096 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007052:	f7fd f9f9 	bl	8004448 <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	429a      	cmp	r2, r3
 8007060:	d302      	bcc.n	8007068 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d116      	bne.n	8007096 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2220      	movs	r2, #32
 8007072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	f043 0220 	orr.w	r2, r3, #32
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e007      	b.n	80070a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	695b      	ldr	r3, [r3, #20]
 800709c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a0:	2b80      	cmp	r3, #128	; 0x80
 80070a2:	d1ca      	bne.n	800703a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b084      	sub	sp, #16
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	60f8      	str	r0, [r7, #12]
 80070b6:	60b9      	str	r1, [r7, #8]
 80070b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070ba:	e02d      	b.n	8007118 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 f88d 	bl	80071dc <I2C_IsAcknowledgeFailed>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e02d      	b.n	8007128 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d2:	d021      	beq.n	8007118 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070d4:	f7fd f9b8 	bl	8004448 <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d302      	bcc.n	80070ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d116      	bne.n	8007118 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007104:	f043 0220 	orr.w	r2, r3, #32
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e007      	b.n	8007128 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	f003 0304 	and.w	r3, r3, #4
 8007122:	2b04      	cmp	r3, #4
 8007124:	d1ca      	bne.n	80070bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800713c:	e042      	b.n	80071c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	f003 0310 	and.w	r3, r3, #16
 8007148:	2b10      	cmp	r3, #16
 800714a:	d119      	bne.n	8007180 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f06f 0210 	mvn.w	r2, #16
 8007154:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2220      	movs	r2, #32
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e029      	b.n	80071d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007180:	f7fd f962 	bl	8004448 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	429a      	cmp	r2, r3
 800718e:	d302      	bcc.n	8007196 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d116      	bne.n	80071c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2220      	movs	r2, #32
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b0:	f043 0220 	orr.w	r2, r3, #32
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e007      	b.n	80071d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ce:	2b40      	cmp	r3, #64	; 0x40
 80071d0:	d1b5      	bne.n	800713e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071f2:	d11b      	bne.n	800722c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2220      	movs	r2, #32
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007218:	f043 0204 	orr.w	r2, r3, #4
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e000      	b.n	800722e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
	...

0800723c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e267      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d075      	beq.n	8007346 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800725a:	4b88      	ldr	r3, [pc, #544]	; (800747c <HAL_RCC_OscConfig+0x240>)
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f003 030c 	and.w	r3, r3, #12
 8007262:	2b04      	cmp	r3, #4
 8007264:	d00c      	beq.n	8007280 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007266:	4b85      	ldr	r3, [pc, #532]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800726e:	2b08      	cmp	r3, #8
 8007270:	d112      	bne.n	8007298 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007272:	4b82      	ldr	r3, [pc, #520]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800727a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800727e:	d10b      	bne.n	8007298 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007280:	4b7e      	ldr	r3, [pc, #504]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d05b      	beq.n	8007344 <HAL_RCC_OscConfig+0x108>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d157      	bne.n	8007344 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e242      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072a0:	d106      	bne.n	80072b0 <HAL_RCC_OscConfig+0x74>
 80072a2:	4b76      	ldr	r3, [pc, #472]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a75      	ldr	r2, [pc, #468]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80072a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072ac:	6013      	str	r3, [r2, #0]
 80072ae:	e01d      	b.n	80072ec <HAL_RCC_OscConfig+0xb0>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072b8:	d10c      	bne.n	80072d4 <HAL_RCC_OscConfig+0x98>
 80072ba:	4b70      	ldr	r3, [pc, #448]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a6f      	ldr	r2, [pc, #444]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80072c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	4b6d      	ldr	r3, [pc, #436]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a6c      	ldr	r2, [pc, #432]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80072cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	e00b      	b.n	80072ec <HAL_RCC_OscConfig+0xb0>
 80072d4:	4b69      	ldr	r3, [pc, #420]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a68      	ldr	r2, [pc, #416]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80072da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	4b66      	ldr	r3, [pc, #408]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a65      	ldr	r2, [pc, #404]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80072e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d013      	beq.n	800731c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072f4:	f7fd f8a8 	bl	8004448 <HAL_GetTick>
 80072f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072fa:	e008      	b.n	800730e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072fc:	f7fd f8a4 	bl	8004448 <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	2b64      	cmp	r3, #100	; 0x64
 8007308:	d901      	bls.n	800730e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e207      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800730e:	4b5b      	ldr	r3, [pc, #364]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d0f0      	beq.n	80072fc <HAL_RCC_OscConfig+0xc0>
 800731a:	e014      	b.n	8007346 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800731c:	f7fd f894 	bl	8004448 <HAL_GetTick>
 8007320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007322:	e008      	b.n	8007336 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007324:	f7fd f890 	bl	8004448 <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b64      	cmp	r3, #100	; 0x64
 8007330:	d901      	bls.n	8007336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e1f3      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007336:	4b51      	ldr	r3, [pc, #324]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1f0      	bne.n	8007324 <HAL_RCC_OscConfig+0xe8>
 8007342:	e000      	b.n	8007346 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d063      	beq.n	800741a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007352:	4b4a      	ldr	r3, [pc, #296]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f003 030c 	and.w	r3, r3, #12
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00b      	beq.n	8007376 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800735e:	4b47      	ldr	r3, [pc, #284]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007366:	2b08      	cmp	r3, #8
 8007368:	d11c      	bne.n	80073a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800736a:	4b44      	ldr	r3, [pc, #272]	; (800747c <HAL_RCC_OscConfig+0x240>)
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d116      	bne.n	80073a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007376:	4b41      	ldr	r3, [pc, #260]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	2b00      	cmp	r3, #0
 8007380:	d005      	beq.n	800738e <HAL_RCC_OscConfig+0x152>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d001      	beq.n	800738e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e1c7      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800738e:	4b3b      	ldr	r3, [pc, #236]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	4937      	ldr	r1, [pc, #220]	; (800747c <HAL_RCC_OscConfig+0x240>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073a2:	e03a      	b.n	800741a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d020      	beq.n	80073ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073ac:	4b34      	ldr	r3, [pc, #208]	; (8007480 <HAL_RCC_OscConfig+0x244>)
 80073ae:	2201      	movs	r2, #1
 80073b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b2:	f7fd f849 	bl	8004448 <HAL_GetTick>
 80073b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073b8:	e008      	b.n	80073cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073ba:	f7fd f845 	bl	8004448 <HAL_GetTick>
 80073be:	4602      	mov	r2, r0
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d901      	bls.n	80073cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e1a8      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073cc:	4b2b      	ldr	r3, [pc, #172]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d0f0      	beq.n	80073ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073d8:	4b28      	ldr	r3, [pc, #160]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	00db      	lsls	r3, r3, #3
 80073e6:	4925      	ldr	r1, [pc, #148]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	600b      	str	r3, [r1, #0]
 80073ec:	e015      	b.n	800741a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073ee:	4b24      	ldr	r3, [pc, #144]	; (8007480 <HAL_RCC_OscConfig+0x244>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f4:	f7fd f828 	bl	8004448 <HAL_GetTick>
 80073f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073fa:	e008      	b.n	800740e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073fc:	f7fd f824 	bl	8004448 <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	2b02      	cmp	r3, #2
 8007408:	d901      	bls.n	800740e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e187      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800740e:	4b1b      	ldr	r3, [pc, #108]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0302 	and.w	r3, r3, #2
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1f0      	bne.n	80073fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0308 	and.w	r3, r3, #8
 8007422:	2b00      	cmp	r3, #0
 8007424:	d036      	beq.n	8007494 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d016      	beq.n	800745c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800742e:	4b15      	ldr	r3, [pc, #84]	; (8007484 <HAL_RCC_OscConfig+0x248>)
 8007430:	2201      	movs	r2, #1
 8007432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007434:	f7fd f808 	bl	8004448 <HAL_GetTick>
 8007438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800743a:	e008      	b.n	800744e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800743c:	f7fd f804 	bl	8004448 <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2b02      	cmp	r3, #2
 8007448:	d901      	bls.n	800744e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e167      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800744e:	4b0b      	ldr	r3, [pc, #44]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d0f0      	beq.n	800743c <HAL_RCC_OscConfig+0x200>
 800745a:	e01b      	b.n	8007494 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800745c:	4b09      	ldr	r3, [pc, #36]	; (8007484 <HAL_RCC_OscConfig+0x248>)
 800745e:	2200      	movs	r2, #0
 8007460:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007462:	f7fc fff1 	bl	8004448 <HAL_GetTick>
 8007466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007468:	e00e      	b.n	8007488 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800746a:	f7fc ffed 	bl	8004448 <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	2b02      	cmp	r3, #2
 8007476:	d907      	bls.n	8007488 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e150      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
 800747c:	40023800 	.word	0x40023800
 8007480:	42470000 	.word	0x42470000
 8007484:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007488:	4b88      	ldr	r3, [pc, #544]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 800748a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1ea      	bne.n	800746a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0304 	and.w	r3, r3, #4
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 8097 	beq.w	80075d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074a2:	2300      	movs	r3, #0
 80074a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074a6:	4b81      	ldr	r3, [pc, #516]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10f      	bne.n	80074d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074b2:	2300      	movs	r3, #0
 80074b4:	60bb      	str	r3, [r7, #8]
 80074b6:	4b7d      	ldr	r3, [pc, #500]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	4a7c      	ldr	r2, [pc, #496]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 80074bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074c0:	6413      	str	r3, [r2, #64]	; 0x40
 80074c2:	4b7a      	ldr	r3, [pc, #488]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ca:	60bb      	str	r3, [r7, #8]
 80074cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074ce:	2301      	movs	r3, #1
 80074d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074d2:	4b77      	ldr	r3, [pc, #476]	; (80076b0 <HAL_RCC_OscConfig+0x474>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d118      	bne.n	8007510 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074de:	4b74      	ldr	r3, [pc, #464]	; (80076b0 <HAL_RCC_OscConfig+0x474>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a73      	ldr	r2, [pc, #460]	; (80076b0 <HAL_RCC_OscConfig+0x474>)
 80074e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074ea:	f7fc ffad 	bl	8004448 <HAL_GetTick>
 80074ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074f0:	e008      	b.n	8007504 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074f2:	f7fc ffa9 	bl	8004448 <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d901      	bls.n	8007504 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e10c      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007504:	4b6a      	ldr	r3, [pc, #424]	; (80076b0 <HAL_RCC_OscConfig+0x474>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800750c:	2b00      	cmp	r3, #0
 800750e:	d0f0      	beq.n	80074f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d106      	bne.n	8007526 <HAL_RCC_OscConfig+0x2ea>
 8007518:	4b64      	ldr	r3, [pc, #400]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 800751a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751c:	4a63      	ldr	r2, [pc, #396]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 800751e:	f043 0301 	orr.w	r3, r3, #1
 8007522:	6713      	str	r3, [r2, #112]	; 0x70
 8007524:	e01c      	b.n	8007560 <HAL_RCC_OscConfig+0x324>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	2b05      	cmp	r3, #5
 800752c:	d10c      	bne.n	8007548 <HAL_RCC_OscConfig+0x30c>
 800752e:	4b5f      	ldr	r3, [pc, #380]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 8007530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007532:	4a5e      	ldr	r2, [pc, #376]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 8007534:	f043 0304 	orr.w	r3, r3, #4
 8007538:	6713      	str	r3, [r2, #112]	; 0x70
 800753a:	4b5c      	ldr	r3, [pc, #368]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 800753c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753e:	4a5b      	ldr	r2, [pc, #364]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 8007540:	f043 0301 	orr.w	r3, r3, #1
 8007544:	6713      	str	r3, [r2, #112]	; 0x70
 8007546:	e00b      	b.n	8007560 <HAL_RCC_OscConfig+0x324>
 8007548:	4b58      	ldr	r3, [pc, #352]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 800754a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800754c:	4a57      	ldr	r2, [pc, #348]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 800754e:	f023 0301 	bic.w	r3, r3, #1
 8007552:	6713      	str	r3, [r2, #112]	; 0x70
 8007554:	4b55      	ldr	r3, [pc, #340]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 8007556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007558:	4a54      	ldr	r2, [pc, #336]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 800755a:	f023 0304 	bic.w	r3, r3, #4
 800755e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d015      	beq.n	8007594 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007568:	f7fc ff6e 	bl	8004448 <HAL_GetTick>
 800756c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800756e:	e00a      	b.n	8007586 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007570:	f7fc ff6a 	bl	8004448 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	f241 3288 	movw	r2, #5000	; 0x1388
 800757e:	4293      	cmp	r3, r2
 8007580:	d901      	bls.n	8007586 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e0cb      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007586:	4b49      	ldr	r3, [pc, #292]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 8007588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b00      	cmp	r3, #0
 8007590:	d0ee      	beq.n	8007570 <HAL_RCC_OscConfig+0x334>
 8007592:	e014      	b.n	80075be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007594:	f7fc ff58 	bl	8004448 <HAL_GetTick>
 8007598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800759a:	e00a      	b.n	80075b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800759c:	f7fc ff54 	bl	8004448 <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d901      	bls.n	80075b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e0b5      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075b2:	4b3e      	ldr	r3, [pc, #248]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 80075b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b6:	f003 0302 	and.w	r3, r3, #2
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1ee      	bne.n	800759c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d105      	bne.n	80075d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075c4:	4b39      	ldr	r3, [pc, #228]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 80075c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c8:	4a38      	ldr	r2, [pc, #224]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 80075ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 80a1 	beq.w	800771c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80075da:	4b34      	ldr	r3, [pc, #208]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f003 030c 	and.w	r3, r3, #12
 80075e2:	2b08      	cmp	r3, #8
 80075e4:	d05c      	beq.n	80076a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d141      	bne.n	8007672 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075ee:	4b31      	ldr	r3, [pc, #196]	; (80076b4 <HAL_RCC_OscConfig+0x478>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075f4:	f7fc ff28 	bl	8004448 <HAL_GetTick>
 80075f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075fa:	e008      	b.n	800760e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075fc:	f7fc ff24 	bl	8004448 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2b02      	cmp	r3, #2
 8007608:	d901      	bls.n	800760e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e087      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800760e:	4b27      	ldr	r3, [pc, #156]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1f0      	bne.n	80075fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	69da      	ldr	r2, [r3, #28]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	431a      	orrs	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	019b      	lsls	r3, r3, #6
 800762a:	431a      	orrs	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007630:	085b      	lsrs	r3, r3, #1
 8007632:	3b01      	subs	r3, #1
 8007634:	041b      	lsls	r3, r3, #16
 8007636:	431a      	orrs	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	061b      	lsls	r3, r3, #24
 800763e:	491b      	ldr	r1, [pc, #108]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 8007640:	4313      	orrs	r3, r2
 8007642:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007644:	4b1b      	ldr	r3, [pc, #108]	; (80076b4 <HAL_RCC_OscConfig+0x478>)
 8007646:	2201      	movs	r2, #1
 8007648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800764a:	f7fc fefd 	bl	8004448 <HAL_GetTick>
 800764e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007650:	e008      	b.n	8007664 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007652:	f7fc fef9 	bl	8004448 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	2b02      	cmp	r3, #2
 800765e:	d901      	bls.n	8007664 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e05c      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007664:	4b11      	ldr	r3, [pc, #68]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d0f0      	beq.n	8007652 <HAL_RCC_OscConfig+0x416>
 8007670:	e054      	b.n	800771c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007672:	4b10      	ldr	r3, [pc, #64]	; (80076b4 <HAL_RCC_OscConfig+0x478>)
 8007674:	2200      	movs	r2, #0
 8007676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007678:	f7fc fee6 	bl	8004448 <HAL_GetTick>
 800767c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800767e:	e008      	b.n	8007692 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007680:	f7fc fee2 	bl	8004448 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	2b02      	cmp	r3, #2
 800768c:	d901      	bls.n	8007692 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e045      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007692:	4b06      	ldr	r3, [pc, #24]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1f0      	bne.n	8007680 <HAL_RCC_OscConfig+0x444>
 800769e:	e03d      	b.n	800771c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d107      	bne.n	80076b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e038      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
 80076ac:	40023800 	.word	0x40023800
 80076b0:	40007000 	.word	0x40007000
 80076b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80076b8:	4b1b      	ldr	r3, [pc, #108]	; (8007728 <HAL_RCC_OscConfig+0x4ec>)
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d028      	beq.n	8007718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d121      	bne.n	8007718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076de:	429a      	cmp	r2, r3
 80076e0:	d11a      	bne.n	8007718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076e8:	4013      	ands	r3, r2
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80076ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d111      	bne.n	8007718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fe:	085b      	lsrs	r3, r3, #1
 8007700:	3b01      	subs	r3, #1
 8007702:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007704:	429a      	cmp	r2, r3
 8007706:	d107      	bne.n	8007718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007712:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007714:	429a      	cmp	r2, r3
 8007716:	d001      	beq.n	800771c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e000      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	40023800 	.word	0x40023800

0800772c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e0cc      	b.n	80078da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007740:	4b68      	ldr	r3, [pc, #416]	; (80078e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0307 	and.w	r3, r3, #7
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	429a      	cmp	r2, r3
 800774c:	d90c      	bls.n	8007768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800774e:	4b65      	ldr	r3, [pc, #404]	; (80078e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	b2d2      	uxtb	r2, r2
 8007754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007756:	4b63      	ldr	r3, [pc, #396]	; (80078e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0307 	and.w	r3, r3, #7
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	429a      	cmp	r2, r3
 8007762:	d001      	beq.n	8007768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e0b8      	b.n	80078da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0302 	and.w	r3, r3, #2
 8007770:	2b00      	cmp	r3, #0
 8007772:	d020      	beq.n	80077b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b00      	cmp	r3, #0
 800777e:	d005      	beq.n	800778c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007780:	4b59      	ldr	r3, [pc, #356]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	4a58      	ldr	r2, [pc, #352]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007786:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800778a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0308 	and.w	r3, r3, #8
 8007794:	2b00      	cmp	r3, #0
 8007796:	d005      	beq.n	80077a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007798:	4b53      	ldr	r3, [pc, #332]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	4a52      	ldr	r2, [pc, #328]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 800779e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80077a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077a4:	4b50      	ldr	r3, [pc, #320]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	494d      	ldr	r1, [pc, #308]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d044      	beq.n	800784c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d107      	bne.n	80077da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077ca:	4b47      	ldr	r3, [pc, #284]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d119      	bne.n	800780a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e07f      	b.n	80078da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d003      	beq.n	80077ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d107      	bne.n	80077fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077ea:	4b3f      	ldr	r3, [pc, #252]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d109      	bne.n	800780a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e06f      	b.n	80078da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077fa:	4b3b      	ldr	r3, [pc, #236]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e067      	b.n	80078da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800780a:	4b37      	ldr	r3, [pc, #220]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f023 0203 	bic.w	r2, r3, #3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	4934      	ldr	r1, [pc, #208]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007818:	4313      	orrs	r3, r2
 800781a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800781c:	f7fc fe14 	bl	8004448 <HAL_GetTick>
 8007820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007822:	e00a      	b.n	800783a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007824:	f7fc fe10 	bl	8004448 <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007832:	4293      	cmp	r3, r2
 8007834:	d901      	bls.n	800783a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e04f      	b.n	80078da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800783a:	4b2b      	ldr	r3, [pc, #172]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f003 020c 	and.w	r2, r3, #12
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	429a      	cmp	r2, r3
 800784a:	d1eb      	bne.n	8007824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800784c:	4b25      	ldr	r3, [pc, #148]	; (80078e4 <HAL_RCC_ClockConfig+0x1b8>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0307 	and.w	r3, r3, #7
 8007854:	683a      	ldr	r2, [r7, #0]
 8007856:	429a      	cmp	r2, r3
 8007858:	d20c      	bcs.n	8007874 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800785a:	4b22      	ldr	r3, [pc, #136]	; (80078e4 <HAL_RCC_ClockConfig+0x1b8>)
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	b2d2      	uxtb	r2, r2
 8007860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007862:	4b20      	ldr	r3, [pc, #128]	; (80078e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	429a      	cmp	r2, r3
 800786e:	d001      	beq.n	8007874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e032      	b.n	80078da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0304 	and.w	r3, r3, #4
 800787c:	2b00      	cmp	r3, #0
 800787e:	d008      	beq.n	8007892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007880:	4b19      	ldr	r3, [pc, #100]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	4916      	ldr	r1, [pc, #88]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 800788e:	4313      	orrs	r3, r2
 8007890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0308 	and.w	r3, r3, #8
 800789a:	2b00      	cmp	r3, #0
 800789c:	d009      	beq.n	80078b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800789e:	4b12      	ldr	r3, [pc, #72]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	00db      	lsls	r3, r3, #3
 80078ac:	490e      	ldr	r1, [pc, #56]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80078b2:	f000 f821 	bl	80078f8 <HAL_RCC_GetSysClockFreq>
 80078b6:	4602      	mov	r2, r0
 80078b8:	4b0b      	ldr	r3, [pc, #44]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	091b      	lsrs	r3, r3, #4
 80078be:	f003 030f 	and.w	r3, r3, #15
 80078c2:	490a      	ldr	r1, [pc, #40]	; (80078ec <HAL_RCC_ClockConfig+0x1c0>)
 80078c4:	5ccb      	ldrb	r3, [r1, r3]
 80078c6:	fa22 f303 	lsr.w	r3, r2, r3
 80078ca:	4a09      	ldr	r2, [pc, #36]	; (80078f0 <HAL_RCC_ClockConfig+0x1c4>)
 80078cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80078ce:	4b09      	ldr	r3, [pc, #36]	; (80078f4 <HAL_RCC_ClockConfig+0x1c8>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fc fd74 	bl	80043c0 <HAL_InitTick>

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	40023c00 	.word	0x40023c00
 80078e8:	40023800 	.word	0x40023800
 80078ec:	0800a0e4 	.word	0x0800a0e4
 80078f0:	200008a4 	.word	0x200008a4
 80078f4:	200008a8 	.word	0x200008a8

080078f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078fc:	b090      	sub	sp, #64	; 0x40
 80078fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	637b      	str	r3, [r7, #52]	; 0x34
 8007904:	2300      	movs	r3, #0
 8007906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007908:	2300      	movs	r3, #0
 800790a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007910:	4b59      	ldr	r3, [pc, #356]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f003 030c 	and.w	r3, r3, #12
 8007918:	2b08      	cmp	r3, #8
 800791a:	d00d      	beq.n	8007938 <HAL_RCC_GetSysClockFreq+0x40>
 800791c:	2b08      	cmp	r3, #8
 800791e:	f200 80a1 	bhi.w	8007a64 <HAL_RCC_GetSysClockFreq+0x16c>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <HAL_RCC_GetSysClockFreq+0x34>
 8007926:	2b04      	cmp	r3, #4
 8007928:	d003      	beq.n	8007932 <HAL_RCC_GetSysClockFreq+0x3a>
 800792a:	e09b      	b.n	8007a64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800792c:	4b53      	ldr	r3, [pc, #332]	; (8007a7c <HAL_RCC_GetSysClockFreq+0x184>)
 800792e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007930:	e09b      	b.n	8007a6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007932:	4b53      	ldr	r3, [pc, #332]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x188>)
 8007934:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007936:	e098      	b.n	8007a6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007938:	4b4f      	ldr	r3, [pc, #316]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x180>)
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007940:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007942:	4b4d      	ldr	r3, [pc, #308]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d028      	beq.n	80079a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800794e:	4b4a      	ldr	r3, [pc, #296]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	099b      	lsrs	r3, r3, #6
 8007954:	2200      	movs	r2, #0
 8007956:	623b      	str	r3, [r7, #32]
 8007958:	627a      	str	r2, [r7, #36]	; 0x24
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007960:	2100      	movs	r1, #0
 8007962:	4b47      	ldr	r3, [pc, #284]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x188>)
 8007964:	fb03 f201 	mul.w	r2, r3, r1
 8007968:	2300      	movs	r3, #0
 800796a:	fb00 f303 	mul.w	r3, r0, r3
 800796e:	4413      	add	r3, r2
 8007970:	4a43      	ldr	r2, [pc, #268]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x188>)
 8007972:	fba0 1202 	umull	r1, r2, r0, r2
 8007976:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007978:	460a      	mov	r2, r1
 800797a:	62ba      	str	r2, [r7, #40]	; 0x28
 800797c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800797e:	4413      	add	r3, r2
 8007980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007984:	2200      	movs	r2, #0
 8007986:	61bb      	str	r3, [r7, #24]
 8007988:	61fa      	str	r2, [r7, #28]
 800798a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800798e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007992:	f7f8 ff57 	bl	8000844 <__aeabi_uldivmod>
 8007996:	4602      	mov	r2, r0
 8007998:	460b      	mov	r3, r1
 800799a:	4613      	mov	r3, r2
 800799c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800799e:	e053      	b.n	8007a48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079a0:	4b35      	ldr	r3, [pc, #212]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x180>)
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	099b      	lsrs	r3, r3, #6
 80079a6:	2200      	movs	r2, #0
 80079a8:	613b      	str	r3, [r7, #16]
 80079aa:	617a      	str	r2, [r7, #20]
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80079b2:	f04f 0b00 	mov.w	fp, #0
 80079b6:	4652      	mov	r2, sl
 80079b8:	465b      	mov	r3, fp
 80079ba:	f04f 0000 	mov.w	r0, #0
 80079be:	f04f 0100 	mov.w	r1, #0
 80079c2:	0159      	lsls	r1, r3, #5
 80079c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079c8:	0150      	lsls	r0, r2, #5
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	ebb2 080a 	subs.w	r8, r2, sl
 80079d2:	eb63 090b 	sbc.w	r9, r3, fp
 80079d6:	f04f 0200 	mov.w	r2, #0
 80079da:	f04f 0300 	mov.w	r3, #0
 80079de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80079e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80079e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80079ea:	ebb2 0408 	subs.w	r4, r2, r8
 80079ee:	eb63 0509 	sbc.w	r5, r3, r9
 80079f2:	f04f 0200 	mov.w	r2, #0
 80079f6:	f04f 0300 	mov.w	r3, #0
 80079fa:	00eb      	lsls	r3, r5, #3
 80079fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a00:	00e2      	lsls	r2, r4, #3
 8007a02:	4614      	mov	r4, r2
 8007a04:	461d      	mov	r5, r3
 8007a06:	eb14 030a 	adds.w	r3, r4, sl
 8007a0a:	603b      	str	r3, [r7, #0]
 8007a0c:	eb45 030b 	adc.w	r3, r5, fp
 8007a10:	607b      	str	r3, [r7, #4]
 8007a12:	f04f 0200 	mov.w	r2, #0
 8007a16:	f04f 0300 	mov.w	r3, #0
 8007a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a1e:	4629      	mov	r1, r5
 8007a20:	028b      	lsls	r3, r1, #10
 8007a22:	4621      	mov	r1, r4
 8007a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a28:	4621      	mov	r1, r4
 8007a2a:	028a      	lsls	r2, r1, #10
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a32:	2200      	movs	r2, #0
 8007a34:	60bb      	str	r3, [r7, #8]
 8007a36:	60fa      	str	r2, [r7, #12]
 8007a38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a3c:	f7f8 ff02 	bl	8000844 <__aeabi_uldivmod>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	4613      	mov	r3, r2
 8007a46:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a48:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	0c1b      	lsrs	r3, r3, #16
 8007a4e:	f003 0303 	and.w	r3, r3, #3
 8007a52:	3301      	adds	r3, #1
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007a58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007a62:	e002      	b.n	8007a6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a64:	4b05      	ldr	r3, [pc, #20]	; (8007a7c <HAL_RCC_GetSysClockFreq+0x184>)
 8007a66:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3740      	adds	r7, #64	; 0x40
 8007a70:	46bd      	mov	sp, r7
 8007a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a76:	bf00      	nop
 8007a78:	40023800 	.word	0x40023800
 8007a7c:	00f42400 	.word	0x00f42400
 8007a80:	017d7840 	.word	0x017d7840

08007a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a84:	b480      	push	{r7}
 8007a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a88:	4b03      	ldr	r3, [pc, #12]	; (8007a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	200008a4 	.word	0x200008a4

08007a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007aa0:	f7ff fff0 	bl	8007a84 <HAL_RCC_GetHCLKFreq>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	4b05      	ldr	r3, [pc, #20]	; (8007abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	0a9b      	lsrs	r3, r3, #10
 8007aac:	f003 0307 	and.w	r3, r3, #7
 8007ab0:	4903      	ldr	r1, [pc, #12]	; (8007ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ab2:	5ccb      	ldrb	r3, [r1, r3]
 8007ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	40023800 	.word	0x40023800
 8007ac0:	0800a0f4 	.word	0x0800a0f4

08007ac4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e07b      	b.n	8007bce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d108      	bne.n	8007af0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ae6:	d009      	beq.n	8007afc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	61da      	str	r2, [r3, #28]
 8007aee:	e005      	b.n	8007afc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d106      	bne.n	8007b1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7fc fa1a 	bl	8003f50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007b44:	431a      	orrs	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	431a      	orrs	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b76:	431a      	orrs	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b80:	ea42 0103 	orr.w	r1, r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	0c1b      	lsrs	r3, r3, #16
 8007b9a:	f003 0104 	and.w	r1, r3, #4
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	f003 0210 	and.w	r2, r3, #16
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	69da      	ldr	r2, [r3, #28]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b088      	sub	sp, #32
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	60f8      	str	r0, [r7, #12]
 8007bde:	60b9      	str	r1, [r7, #8]
 8007be0:	603b      	str	r3, [r7, #0]
 8007be2:	4613      	mov	r3, r2
 8007be4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d101      	bne.n	8007bf8 <HAL_SPI_Transmit+0x22>
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	e126      	b.n	8007e46 <HAL_SPI_Transmit+0x270>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c00:	f7fc fc22 	bl	8004448 <HAL_GetTick>
 8007c04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007c06:	88fb      	ldrh	r3, [r7, #6]
 8007c08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d002      	beq.n	8007c1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007c16:	2302      	movs	r3, #2
 8007c18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c1a:	e10b      	b.n	8007e34 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d002      	beq.n	8007c28 <HAL_SPI_Transmit+0x52>
 8007c22:	88fb      	ldrh	r3, [r7, #6]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d102      	bne.n	8007c2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c2c:	e102      	b.n	8007e34 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2203      	movs	r2, #3
 8007c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	88fa      	ldrh	r2, [r7, #6]
 8007c46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	88fa      	ldrh	r2, [r7, #6]
 8007c4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c74:	d10f      	bne.n	8007c96 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca0:	2b40      	cmp	r3, #64	; 0x40
 8007ca2:	d007      	beq.n	8007cb4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cbc:	d14b      	bne.n	8007d56 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <HAL_SPI_Transmit+0xf6>
 8007cc6:	8afb      	ldrh	r3, [r7, #22]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d13e      	bne.n	8007d4a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd0:	881a      	ldrh	r2, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cdc:	1c9a      	adds	r2, r3, #2
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007cf0:	e02b      	b.n	8007d4a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d112      	bne.n	8007d26 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d04:	881a      	ldrh	r2, [r3, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d10:	1c9a      	adds	r2, r3, #2
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	86da      	strh	r2, [r3, #54]	; 0x36
 8007d24:	e011      	b.n	8007d4a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d26:	f7fc fb8f 	bl	8004448 <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	683a      	ldr	r2, [r7, #0]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d803      	bhi.n	8007d3e <HAL_SPI_Transmit+0x168>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3c:	d102      	bne.n	8007d44 <HAL_SPI_Transmit+0x16e>
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d102      	bne.n	8007d4a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d48:	e074      	b.n	8007e34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1ce      	bne.n	8007cf2 <HAL_SPI_Transmit+0x11c>
 8007d54:	e04c      	b.n	8007df0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d002      	beq.n	8007d64 <HAL_SPI_Transmit+0x18e>
 8007d5e:	8afb      	ldrh	r3, [r7, #22]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d140      	bne.n	8007de6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	330c      	adds	r3, #12
 8007d6e:	7812      	ldrb	r2, [r2, #0]
 8007d70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	3b01      	subs	r3, #1
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007d8a:	e02c      	b.n	8007de6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d113      	bne.n	8007dc2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	330c      	adds	r3, #12
 8007da4:	7812      	ldrb	r2, [r2, #0]
 8007da6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dac:	1c5a      	adds	r2, r3, #1
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	3b01      	subs	r3, #1
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8007dc0:	e011      	b.n	8007de6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dc2:	f7fc fb41 	bl	8004448 <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d803      	bhi.n	8007dda <HAL_SPI_Transmit+0x204>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd8:	d102      	bne.n	8007de0 <HAL_SPI_Transmit+0x20a>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d102      	bne.n	8007de6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007de4:	e026      	b.n	8007e34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1cd      	bne.n	8007d8c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	6839      	ldr	r1, [r7, #0]
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f000 fbcb 	bl	8008590 <SPI_EndRxTxTransaction>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2220      	movs	r2, #32
 8007e04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10a      	bne.n	8007e24 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e0e:	2300      	movs	r3, #0
 8007e10:	613b      	str	r3, [r7, #16]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	613b      	str	r3, [r7, #16]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	613b      	str	r3, [r7, #16]
 8007e22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d002      	beq.n	8007e32 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	77fb      	strb	r3, [r7, #31]
 8007e30:	e000      	b.n	8007e34 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007e32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007e44:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3720      	adds	r7, #32
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b088      	sub	sp, #32
 8007e52:	af02      	add	r7, sp, #8
 8007e54:	60f8      	str	r0, [r7, #12]
 8007e56:	60b9      	str	r1, [r7, #8]
 8007e58:	603b      	str	r3, [r7, #0]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e6a:	d112      	bne.n	8007e92 <HAL_SPI_Receive+0x44>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10e      	bne.n	8007e92 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2204      	movs	r2, #4
 8007e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007e7c:	88fa      	ldrh	r2, [r7, #6]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	4613      	mov	r3, r2
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	68b9      	ldr	r1, [r7, #8]
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f000 f8f1 	bl	8008070 <HAL_SPI_TransmitReceive>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	e0ea      	b.n	8008068 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d101      	bne.n	8007ea0 <HAL_SPI_Receive+0x52>
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	e0e3      	b.n	8008068 <HAL_SPI_Receive+0x21a>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ea8:	f7fc face 	bl	8004448 <HAL_GetTick>
 8007eac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d002      	beq.n	8007ec0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007eba:	2302      	movs	r3, #2
 8007ebc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007ebe:	e0ca      	b.n	8008056 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d002      	beq.n	8007ecc <HAL_SPI_Receive+0x7e>
 8007ec6:	88fb      	ldrh	r3, [r7, #6]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d102      	bne.n	8007ed2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007ed0:	e0c1      	b.n	8008056 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2204      	movs	r2, #4
 8007ed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	88fa      	ldrh	r2, [r7, #6]
 8007eea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	88fa      	ldrh	r2, [r7, #6]
 8007ef0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f18:	d10f      	bne.n	8007f3a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007f38:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f44:	2b40      	cmp	r3, #64	; 0x40
 8007f46:	d007      	beq.n	8007f58 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d162      	bne.n	8008026 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007f60:	e02e      	b.n	8007fc0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d115      	bne.n	8007f9c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f103 020c 	add.w	r2, r3, #12
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7c:	7812      	ldrb	r2, [r2, #0]
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f86:	1c5a      	adds	r2, r3, #1
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	3b01      	subs	r3, #1
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f9a:	e011      	b.n	8007fc0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f9c:	f7fc fa54 	bl	8004448 <HAL_GetTick>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d803      	bhi.n	8007fb4 <HAL_SPI_Receive+0x166>
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb2:	d102      	bne.n	8007fba <HAL_SPI_Receive+0x16c>
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d102      	bne.n	8007fc0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007fbe:	e04a      	b.n	8008056 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1cb      	bne.n	8007f62 <HAL_SPI_Receive+0x114>
 8007fca:	e031      	b.n	8008030 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d113      	bne.n	8008002 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68da      	ldr	r2, [r3, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe4:	b292      	uxth	r2, r2
 8007fe6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fec:	1c9a      	adds	r2, r3, #2
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008000:	e011      	b.n	8008026 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008002:	f7fc fa21 	bl	8004448 <HAL_GetTick>
 8008006:	4602      	mov	r2, r0
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	429a      	cmp	r2, r3
 8008010:	d803      	bhi.n	800801a <HAL_SPI_Receive+0x1cc>
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008018:	d102      	bne.n	8008020 <HAL_SPI_Receive+0x1d2>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d102      	bne.n	8008026 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008024:	e017      	b.n	8008056 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800802a:	b29b      	uxth	r3, r3
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1cd      	bne.n	8007fcc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 fa45 	bl	80084c4 <SPI_EndRxTransaction>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2220      	movs	r2, #32
 8008044:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804a:	2b00      	cmp	r3, #0
 800804c:	d002      	beq.n	8008054 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	75fb      	strb	r3, [r7, #23]
 8008052:	e000      	b.n	8008056 <HAL_SPI_Receive+0x208>
  }

error :
 8008054:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008066:	7dfb      	ldrb	r3, [r7, #23]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3718      	adds	r7, #24
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b08c      	sub	sp, #48	; 0x30
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
 800807c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800807e:	2301      	movs	r3, #1
 8008080:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800808e:	2b01      	cmp	r3, #1
 8008090:	d101      	bne.n	8008096 <HAL_SPI_TransmitReceive+0x26>
 8008092:	2302      	movs	r3, #2
 8008094:	e18a      	b.n	80083ac <HAL_SPI_TransmitReceive+0x33c>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800809e:	f7fc f9d3 	bl	8004448 <HAL_GetTick>
 80080a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80080b4:	887b      	ldrh	r3, [r7, #2]
 80080b6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80080b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d00f      	beq.n	80080e0 <HAL_SPI_TransmitReceive+0x70>
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080c6:	d107      	bne.n	80080d8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d103      	bne.n	80080d8 <HAL_SPI_TransmitReceive+0x68>
 80080d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	d003      	beq.n	80080e0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80080d8:	2302      	movs	r3, #2
 80080da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80080de:	e15b      	b.n	8008398 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d005      	beq.n	80080f2 <HAL_SPI_TransmitReceive+0x82>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d002      	beq.n	80080f2 <HAL_SPI_TransmitReceive+0x82>
 80080ec:	887b      	ldrh	r3, [r7, #2]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d103      	bne.n	80080fa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80080f8:	e14e      	b.n	8008398 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b04      	cmp	r3, #4
 8008104:	d003      	beq.n	800810e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2205      	movs	r2, #5
 800810a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	887a      	ldrh	r2, [r7, #2]
 800811e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	887a      	ldrh	r2, [r7, #2]
 8008124:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	887a      	ldrh	r2, [r7, #2]
 8008130:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	887a      	ldrh	r2, [r7, #2]
 8008136:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800814e:	2b40      	cmp	r3, #64	; 0x40
 8008150:	d007      	beq.n	8008162 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008160:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800816a:	d178      	bne.n	800825e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <HAL_SPI_TransmitReceive+0x10a>
 8008174:	8b7b      	ldrh	r3, [r7, #26]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d166      	bne.n	8008248 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800817e:	881a      	ldrh	r2, [r3, #0]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818a:	1c9a      	adds	r2, r3, #2
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008194:	b29b      	uxth	r3, r3
 8008196:	3b01      	subs	r3, #1
 8008198:	b29a      	uxth	r2, r3
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800819e:	e053      	b.n	8008248 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	f003 0302 	and.w	r3, r3, #2
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d11b      	bne.n	80081e6 <HAL_SPI_TransmitReceive+0x176>
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d016      	beq.n	80081e6 <HAL_SPI_TransmitReceive+0x176>
 80081b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d113      	bne.n	80081e6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c2:	881a      	ldrh	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ce:	1c9a      	adds	r2, r3, #2
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081d8:	b29b      	uxth	r3, r3
 80081da:	3b01      	subs	r3, #1
 80081dc:	b29a      	uxth	r2, r3
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d119      	bne.n	8008228 <HAL_SPI_TransmitReceive+0x1b8>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d014      	beq.n	8008228 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68da      	ldr	r2, [r3, #12]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008208:	b292      	uxth	r2, r2
 800820a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008210:	1c9a      	adds	r2, r3, #2
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800821a:	b29b      	uxth	r3, r3
 800821c:	3b01      	subs	r3, #1
 800821e:	b29a      	uxth	r2, r3
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008224:	2301      	movs	r3, #1
 8008226:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008228:	f7fc f90e 	bl	8004448 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008234:	429a      	cmp	r2, r3
 8008236:	d807      	bhi.n	8008248 <HAL_SPI_TransmitReceive+0x1d8>
 8008238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800823e:	d003      	beq.n	8008248 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008246:	e0a7      	b.n	8008398 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800824c:	b29b      	uxth	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1a6      	bne.n	80081a0 <HAL_SPI_TransmitReceive+0x130>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008256:	b29b      	uxth	r3, r3
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1a1      	bne.n	80081a0 <HAL_SPI_TransmitReceive+0x130>
 800825c:	e07c      	b.n	8008358 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d002      	beq.n	800826c <HAL_SPI_TransmitReceive+0x1fc>
 8008266:	8b7b      	ldrh	r3, [r7, #26]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d16b      	bne.n	8008344 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	330c      	adds	r3, #12
 8008276:	7812      	ldrb	r2, [r2, #0]
 8008278:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827e:	1c5a      	adds	r2, r3, #1
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008288:	b29b      	uxth	r3, r3
 800828a:	3b01      	subs	r3, #1
 800828c:	b29a      	uxth	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008292:	e057      	b.n	8008344 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f003 0302 	and.w	r3, r3, #2
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d11c      	bne.n	80082dc <HAL_SPI_TransmitReceive+0x26c>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d017      	beq.n	80082dc <HAL_SPI_TransmitReceive+0x26c>
 80082ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d114      	bne.n	80082dc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	330c      	adds	r3, #12
 80082bc:	7812      	ldrb	r2, [r2, #0]
 80082be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c4:	1c5a      	adds	r2, r3, #1
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	3b01      	subs	r3, #1
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082d8:	2300      	movs	r3, #0
 80082da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d119      	bne.n	800831e <HAL_SPI_TransmitReceive+0x2ae>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d014      	beq.n	800831e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68da      	ldr	r2, [r3, #12]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fe:	b2d2      	uxtb	r2, r2
 8008300:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008306:	1c5a      	adds	r2, r3, #1
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008310:	b29b      	uxth	r3, r3
 8008312:	3b01      	subs	r3, #1
 8008314:	b29a      	uxth	r2, r3
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800831a:	2301      	movs	r3, #1
 800831c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800831e:	f7fc f893 	bl	8004448 <HAL_GetTick>
 8008322:	4602      	mov	r2, r0
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800832a:	429a      	cmp	r2, r3
 800832c:	d803      	bhi.n	8008336 <HAL_SPI_TransmitReceive+0x2c6>
 800832e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008334:	d102      	bne.n	800833c <HAL_SPI_TransmitReceive+0x2cc>
 8008336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008338:	2b00      	cmp	r3, #0
 800833a:	d103      	bne.n	8008344 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008342:	e029      	b.n	8008398 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008348:	b29b      	uxth	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1a2      	bne.n	8008294 <HAL_SPI_TransmitReceive+0x224>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008352:	b29b      	uxth	r3, r3
 8008354:	2b00      	cmp	r3, #0
 8008356:	d19d      	bne.n	8008294 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800835a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f000 f917 	bl	8008590 <SPI_EndRxTxTransaction>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d006      	beq.n	8008376 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2220      	movs	r2, #32
 8008372:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008374:	e010      	b.n	8008398 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10b      	bne.n	8008396 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800837e:	2300      	movs	r3, #0
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	617b      	str	r3, [r7, #20]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	617b      	str	r3, [r7, #20]
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	e000      	b.n	8008398 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008396:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80083a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3730      	adds	r7, #48	; 0x30
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	603b      	str	r3, [r7, #0]
 80083c0:	4613      	mov	r3, r2
 80083c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80083c4:	f7fc f840 	bl	8004448 <HAL_GetTick>
 80083c8:	4602      	mov	r2, r0
 80083ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083cc:	1a9b      	subs	r3, r3, r2
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	4413      	add	r3, r2
 80083d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80083d4:	f7fc f838 	bl	8004448 <HAL_GetTick>
 80083d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80083da:	4b39      	ldr	r3, [pc, #228]	; (80084c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	015b      	lsls	r3, r3, #5
 80083e0:	0d1b      	lsrs	r3, r3, #20
 80083e2:	69fa      	ldr	r2, [r7, #28]
 80083e4:	fb02 f303 	mul.w	r3, r2, r3
 80083e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083ea:	e054      	b.n	8008496 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f2:	d050      	beq.n	8008496 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083f4:	f7fc f828 	bl	8004448 <HAL_GetTick>
 80083f8:	4602      	mov	r2, r0
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	429a      	cmp	r2, r3
 8008402:	d902      	bls.n	800840a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d13d      	bne.n	8008486 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008418:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008422:	d111      	bne.n	8008448 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800842c:	d004      	beq.n	8008438 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008436:	d107      	bne.n	8008448 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008446:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008450:	d10f      	bne.n	8008472 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008460:	601a      	str	r2, [r3, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008470:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e017      	b.n	80084b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d101      	bne.n	8008490 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800848c:	2300      	movs	r3, #0
 800848e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	3b01      	subs	r3, #1
 8008494:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	4013      	ands	r3, r2
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	bf0c      	ite	eq
 80084a6:	2301      	moveq	r3, #1
 80084a8:	2300      	movne	r3, #0
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	461a      	mov	r2, r3
 80084ae:	79fb      	ldrb	r3, [r7, #7]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d19b      	bne.n	80083ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3720      	adds	r7, #32
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	200008a4 	.word	0x200008a4

080084c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af02      	add	r7, sp, #8
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084d8:	d111      	bne.n	80084fe <SPI_EndRxTransaction+0x3a>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084e2:	d004      	beq.n	80084ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ec:	d107      	bne.n	80084fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008506:	d12a      	bne.n	800855e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008510:	d012      	beq.n	8008538 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2200      	movs	r2, #0
 800851a:	2180      	movs	r1, #128	; 0x80
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f7ff ff49 	bl	80083b4 <SPI_WaitFlagStateUntilTimeout>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d02d      	beq.n	8008584 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800852c:	f043 0220 	orr.w	r2, r3, #32
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e026      	b.n	8008586 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2200      	movs	r2, #0
 8008540:	2101      	movs	r1, #1
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f7ff ff36 	bl	80083b4 <SPI_WaitFlagStateUntilTimeout>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d01a      	beq.n	8008584 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008552:	f043 0220 	orr.w	r2, r3, #32
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e013      	b.n	8008586 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	2200      	movs	r2, #0
 8008566:	2101      	movs	r1, #1
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f7ff ff23 	bl	80083b4 <SPI_WaitFlagStateUntilTimeout>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d007      	beq.n	8008584 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008578:	f043 0220 	orr.w	r2, r3, #32
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e000      	b.n	8008586 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
	...

08008590 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b088      	sub	sp, #32
 8008594:	af02      	add	r7, sp, #8
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800859c:	4b1b      	ldr	r3, [pc, #108]	; (800860c <SPI_EndRxTxTransaction+0x7c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a1b      	ldr	r2, [pc, #108]	; (8008610 <SPI_EndRxTxTransaction+0x80>)
 80085a2:	fba2 2303 	umull	r2, r3, r2, r3
 80085a6:	0d5b      	lsrs	r3, r3, #21
 80085a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80085ac:	fb02 f303 	mul.w	r3, r2, r3
 80085b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085ba:	d112      	bne.n	80085e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	2200      	movs	r2, #0
 80085c4:	2180      	movs	r1, #128	; 0x80
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f7ff fef4 	bl	80083b4 <SPI_WaitFlagStateUntilTimeout>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d016      	beq.n	8008600 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d6:	f043 0220 	orr.w	r2, r3, #32
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e00f      	b.n	8008602 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00a      	beq.n	80085fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f8:	2b80      	cmp	r3, #128	; 0x80
 80085fa:	d0f2      	beq.n	80085e2 <SPI_EndRxTxTransaction+0x52>
 80085fc:	e000      	b.n	8008600 <SPI_EndRxTxTransaction+0x70>
        break;
 80085fe:	bf00      	nop
  }

  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3718      	adds	r7, #24
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	200008a4 	.word	0x200008a4
 8008610:	165e9f81 	.word	0x165e9f81

08008614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e041      	b.n	80086aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800862c:	b2db      	uxtb	r3, r3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d106      	bne.n	8008640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7fb fdb4 	bl	80041a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2202      	movs	r2, #2
 8008644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	3304      	adds	r3, #4
 8008650:	4619      	mov	r1, r3
 8008652:	4610      	mov	r0, r2
 8008654:	f000 fd54 	bl	8009100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
	...

080086b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d001      	beq.n	80086cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e03c      	b.n	8008746 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2202      	movs	r2, #2
 80086d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a1e      	ldr	r2, [pc, #120]	; (8008754 <HAL_TIM_Base_Start+0xa0>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d018      	beq.n	8008710 <HAL_TIM_Base_Start+0x5c>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086e6:	d013      	beq.n	8008710 <HAL_TIM_Base_Start+0x5c>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a1a      	ldr	r2, [pc, #104]	; (8008758 <HAL_TIM_Base_Start+0xa4>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d00e      	beq.n	8008710 <HAL_TIM_Base_Start+0x5c>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a19      	ldr	r2, [pc, #100]	; (800875c <HAL_TIM_Base_Start+0xa8>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d009      	beq.n	8008710 <HAL_TIM_Base_Start+0x5c>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a17      	ldr	r2, [pc, #92]	; (8008760 <HAL_TIM_Base_Start+0xac>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d004      	beq.n	8008710 <HAL_TIM_Base_Start+0x5c>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a16      	ldr	r2, [pc, #88]	; (8008764 <HAL_TIM_Base_Start+0xb0>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d111      	bne.n	8008734 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f003 0307 	and.w	r3, r3, #7
 800871a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2b06      	cmp	r3, #6
 8008720:	d010      	beq.n	8008744 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f042 0201 	orr.w	r2, r2, #1
 8008730:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008732:	e007      	b.n	8008744 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f042 0201 	orr.w	r2, r2, #1
 8008742:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	40010000 	.word	0x40010000
 8008758:	40000400 	.word	0x40000400
 800875c:	40000800 	.word	0x40000800
 8008760:	40000c00 	.word	0x40000c00
 8008764:	40014000 	.word	0x40014000

08008768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b01      	cmp	r3, #1
 800877a:	d001      	beq.n	8008780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e044      	b.n	800880a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2202      	movs	r2, #2
 8008784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68da      	ldr	r2, [r3, #12]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0201 	orr.w	r2, r2, #1
 8008796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a1e      	ldr	r2, [pc, #120]	; (8008818 <HAL_TIM_Base_Start_IT+0xb0>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d018      	beq.n	80087d4 <HAL_TIM_Base_Start_IT+0x6c>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087aa:	d013      	beq.n	80087d4 <HAL_TIM_Base_Start_IT+0x6c>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a1a      	ldr	r2, [pc, #104]	; (800881c <HAL_TIM_Base_Start_IT+0xb4>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d00e      	beq.n	80087d4 <HAL_TIM_Base_Start_IT+0x6c>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a19      	ldr	r2, [pc, #100]	; (8008820 <HAL_TIM_Base_Start_IT+0xb8>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d009      	beq.n	80087d4 <HAL_TIM_Base_Start_IT+0x6c>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a17      	ldr	r2, [pc, #92]	; (8008824 <HAL_TIM_Base_Start_IT+0xbc>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d004      	beq.n	80087d4 <HAL_TIM_Base_Start_IT+0x6c>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a16      	ldr	r2, [pc, #88]	; (8008828 <HAL_TIM_Base_Start_IT+0xc0>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d111      	bne.n	80087f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f003 0307 	and.w	r3, r3, #7
 80087de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2b06      	cmp	r3, #6
 80087e4:	d010      	beq.n	8008808 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f042 0201 	orr.w	r2, r2, #1
 80087f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087f6:	e007      	b.n	8008808 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f042 0201 	orr.w	r2, r2, #1
 8008806:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	40010000 	.word	0x40010000
 800881c:	40000400 	.word	0x40000400
 8008820:	40000800 	.word	0x40000800
 8008824:	40000c00 	.word	0x40000c00
 8008828:	40014000 	.word	0x40014000

0800882c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d101      	bne.n	800883e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e041      	b.n	80088c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008844:	b2db      	uxtb	r3, r3
 8008846:	2b00      	cmp	r3, #0
 8008848:	d106      	bne.n	8008858 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f839 	bl	80088ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2202      	movs	r2, #2
 800885c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	3304      	adds	r3, #4
 8008868:	4619      	mov	r1, r3
 800886a:	4610      	mov	r0, r2
 800886c:	f000 fc48 	bl	8009100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b083      	sub	sp, #12
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80088d2:	bf00      	nop
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
	...

080088e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d109      	bne.n	8008904 <HAL_TIM_PWM_Start+0x24>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	bf14      	ite	ne
 80088fc:	2301      	movne	r3, #1
 80088fe:	2300      	moveq	r3, #0
 8008900:	b2db      	uxtb	r3, r3
 8008902:	e022      	b.n	800894a <HAL_TIM_PWM_Start+0x6a>
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	2b04      	cmp	r3, #4
 8008908:	d109      	bne.n	800891e <HAL_TIM_PWM_Start+0x3e>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b01      	cmp	r3, #1
 8008914:	bf14      	ite	ne
 8008916:	2301      	movne	r3, #1
 8008918:	2300      	moveq	r3, #0
 800891a:	b2db      	uxtb	r3, r3
 800891c:	e015      	b.n	800894a <HAL_TIM_PWM_Start+0x6a>
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	2b08      	cmp	r3, #8
 8008922:	d109      	bne.n	8008938 <HAL_TIM_PWM_Start+0x58>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b01      	cmp	r3, #1
 800892e:	bf14      	ite	ne
 8008930:	2301      	movne	r3, #1
 8008932:	2300      	moveq	r3, #0
 8008934:	b2db      	uxtb	r3, r3
 8008936:	e008      	b.n	800894a <HAL_TIM_PWM_Start+0x6a>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800893e:	b2db      	uxtb	r3, r3
 8008940:	2b01      	cmp	r3, #1
 8008942:	bf14      	ite	ne
 8008944:	2301      	movne	r3, #1
 8008946:	2300      	moveq	r3, #0
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e068      	b.n	8008a24 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d104      	bne.n	8008962 <HAL_TIM_PWM_Start+0x82>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2202      	movs	r2, #2
 800895c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008960:	e013      	b.n	800898a <HAL_TIM_PWM_Start+0xaa>
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b04      	cmp	r3, #4
 8008966:	d104      	bne.n	8008972 <HAL_TIM_PWM_Start+0x92>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2202      	movs	r2, #2
 800896c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008970:	e00b      	b.n	800898a <HAL_TIM_PWM_Start+0xaa>
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b08      	cmp	r3, #8
 8008976:	d104      	bne.n	8008982 <HAL_TIM_PWM_Start+0xa2>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2202      	movs	r2, #2
 800897c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008980:	e003      	b.n	800898a <HAL_TIM_PWM_Start+0xaa>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2202      	movs	r2, #2
 8008986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2201      	movs	r2, #1
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	4618      	mov	r0, r3
 8008994:	f000 fe5a 	bl	800964c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a23      	ldr	r2, [pc, #140]	; (8008a2c <HAL_TIM_PWM_Start+0x14c>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d107      	bne.n	80089b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a1d      	ldr	r2, [pc, #116]	; (8008a2c <HAL_TIM_PWM_Start+0x14c>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d018      	beq.n	80089ee <HAL_TIM_PWM_Start+0x10e>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089c4:	d013      	beq.n	80089ee <HAL_TIM_PWM_Start+0x10e>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a19      	ldr	r2, [pc, #100]	; (8008a30 <HAL_TIM_PWM_Start+0x150>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d00e      	beq.n	80089ee <HAL_TIM_PWM_Start+0x10e>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a17      	ldr	r2, [pc, #92]	; (8008a34 <HAL_TIM_PWM_Start+0x154>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d009      	beq.n	80089ee <HAL_TIM_PWM_Start+0x10e>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a16      	ldr	r2, [pc, #88]	; (8008a38 <HAL_TIM_PWM_Start+0x158>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d004      	beq.n	80089ee <HAL_TIM_PWM_Start+0x10e>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a14      	ldr	r2, [pc, #80]	; (8008a3c <HAL_TIM_PWM_Start+0x15c>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d111      	bne.n	8008a12 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f003 0307 	and.w	r3, r3, #7
 80089f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2b06      	cmp	r3, #6
 80089fe:	d010      	beq.n	8008a22 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f042 0201 	orr.w	r2, r2, #1
 8008a0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a10:	e007      	b.n	8008a22 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f042 0201 	orr.w	r2, r2, #1
 8008a20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	40010000 	.word	0x40010000
 8008a30:	40000400 	.word	0x40000400
 8008a34:	40000800 	.word	0x40000800
 8008a38:	40000c00 	.word	0x40000c00
 8008a3c:	40014000 	.word	0x40014000

08008a40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e097      	b.n	8008b84 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d106      	bne.n	8008a6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7fb fb21 	bl	80040b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2202      	movs	r2, #2
 8008a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	6812      	ldr	r2, [r2, #0]
 8008a80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a84:	f023 0307 	bic.w	r3, r3, #7
 8008a88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	3304      	adds	r3, #4
 8008a92:	4619      	mov	r1, r3
 8008a94:	4610      	mov	r0, r2
 8008a96:	f000 fb33 	bl	8009100 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6a1b      	ldr	r3, [r3, #32]
 8008ab0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ac2:	f023 0303 	bic.w	r3, r3, #3
 8008ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	689a      	ldr	r2, [r3, #8]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	021b      	lsls	r3, r3, #8
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008ae0:	f023 030c 	bic.w	r3, r3, #12
 8008ae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008aec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	68da      	ldr	r2, [r3, #12]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	69db      	ldr	r3, [r3, #28]
 8008afa:	021b      	lsls	r3, r3, #8
 8008afc:	4313      	orrs	r3, r2
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	011a      	lsls	r2, r3, #4
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	031b      	lsls	r3, r3, #12
 8008b10:	4313      	orrs	r3, r2
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008b1e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008b26:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	011b      	lsls	r3, r3, #4
 8008b32:	4313      	orrs	r3, r2
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3718      	adds	r7, #24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	f003 0302 	and.w	r3, r3, #2
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d122      	bne.n	8008be8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	f003 0302 	and.w	r3, r3, #2
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d11b      	bne.n	8008be8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f06f 0202 	mvn.w	r2, #2
 8008bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	f003 0303 	and.w	r3, r3, #3
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d003      	beq.n	8008bd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fa77 	bl	80090c2 <HAL_TIM_IC_CaptureCallback>
 8008bd4:	e005      	b.n	8008be2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fa69 	bl	80090ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fa7a 	bl	80090d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	f003 0304 	and.w	r3, r3, #4
 8008bf2:	2b04      	cmp	r3, #4
 8008bf4:	d122      	bne.n	8008c3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	f003 0304 	and.w	r3, r3, #4
 8008c00:	2b04      	cmp	r3, #4
 8008c02:	d11b      	bne.n	8008c3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f06f 0204 	mvn.w	r2, #4
 8008c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2202      	movs	r2, #2
 8008c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d003      	beq.n	8008c2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fa4d 	bl	80090c2 <HAL_TIM_IC_CaptureCallback>
 8008c28:	e005      	b.n	8008c36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fa3f 	bl	80090ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fa50 	bl	80090d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	f003 0308 	and.w	r3, r3, #8
 8008c46:	2b08      	cmp	r3, #8
 8008c48:	d122      	bne.n	8008c90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	f003 0308 	and.w	r3, r3, #8
 8008c54:	2b08      	cmp	r3, #8
 8008c56:	d11b      	bne.n	8008c90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f06f 0208 	mvn.w	r2, #8
 8008c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2204      	movs	r2, #4
 8008c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	69db      	ldr	r3, [r3, #28]
 8008c6e:	f003 0303 	and.w	r3, r3, #3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d003      	beq.n	8008c7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fa23 	bl	80090c2 <HAL_TIM_IC_CaptureCallback>
 8008c7c:	e005      	b.n	8008c8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fa15 	bl	80090ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 fa26 	bl	80090d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	f003 0310 	and.w	r3, r3, #16
 8008c9a:	2b10      	cmp	r3, #16
 8008c9c:	d122      	bne.n	8008ce4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	f003 0310 	and.w	r3, r3, #16
 8008ca8:	2b10      	cmp	r3, #16
 8008caa:	d11b      	bne.n	8008ce4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f06f 0210 	mvn.w	r2, #16
 8008cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2208      	movs	r2, #8
 8008cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f9f9 	bl	80090c2 <HAL_TIM_IC_CaptureCallback>
 8008cd0:	e005      	b.n	8008cde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f9eb 	bl	80090ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f9fc 	bl	80090d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d10e      	bne.n	8008d10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d107      	bne.n	8008d10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f06f 0201 	mvn.w	r2, #1
 8008d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7f8 f95a 	bl	8000fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d1a:	2b80      	cmp	r3, #128	; 0x80
 8008d1c:	d10e      	bne.n	8008d3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d28:	2b80      	cmp	r3, #128	; 0x80
 8008d2a:	d107      	bne.n	8008d3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fd26 	bl	8009788 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d46:	2b40      	cmp	r3, #64	; 0x40
 8008d48:	d10e      	bne.n	8008d68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d54:	2b40      	cmp	r3, #64	; 0x40
 8008d56:	d107      	bne.n	8008d68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f9c1 	bl	80090ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	f003 0320 	and.w	r3, r3, #32
 8008d72:	2b20      	cmp	r3, #32
 8008d74:	d10e      	bne.n	8008d94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	f003 0320 	and.w	r3, r3, #32
 8008d80:	2b20      	cmp	r3, #32
 8008d82:	d107      	bne.n	8008d94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f06f 0220 	mvn.w	r2, #32
 8008d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fcf0 	bl	8009774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d94:	bf00      	nop
 8008d96:	3708      	adds	r7, #8
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d101      	bne.n	8008dba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008db6:	2302      	movs	r3, #2
 8008db8:	e0ae      	b.n	8008f18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b0c      	cmp	r3, #12
 8008dc6:	f200 809f 	bhi.w	8008f08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008dca:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd0:	08008e05 	.word	0x08008e05
 8008dd4:	08008f09 	.word	0x08008f09
 8008dd8:	08008f09 	.word	0x08008f09
 8008ddc:	08008f09 	.word	0x08008f09
 8008de0:	08008e45 	.word	0x08008e45
 8008de4:	08008f09 	.word	0x08008f09
 8008de8:	08008f09 	.word	0x08008f09
 8008dec:	08008f09 	.word	0x08008f09
 8008df0:	08008e87 	.word	0x08008e87
 8008df4:	08008f09 	.word	0x08008f09
 8008df8:	08008f09 	.word	0x08008f09
 8008dfc:	08008f09 	.word	0x08008f09
 8008e00:	08008ec7 	.word	0x08008ec7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68b9      	ldr	r1, [r7, #8]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f000 f9f8 	bl	8009200 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	699a      	ldr	r2, [r3, #24]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f042 0208 	orr.w	r2, r2, #8
 8008e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	699a      	ldr	r2, [r3, #24]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f022 0204 	bic.w	r2, r2, #4
 8008e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6999      	ldr	r1, [r3, #24]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	691a      	ldr	r2, [r3, #16]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	619a      	str	r2, [r3, #24]
      break;
 8008e42:	e064      	b.n	8008f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68b9      	ldr	r1, [r7, #8]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 fa3e 	bl	80092cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	699a      	ldr	r2, [r3, #24]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	699a      	ldr	r2, [r3, #24]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6999      	ldr	r1, [r3, #24]
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	021a      	lsls	r2, r3, #8
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	430a      	orrs	r2, r1
 8008e82:	619a      	str	r2, [r3, #24]
      break;
 8008e84:	e043      	b.n	8008f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68b9      	ldr	r1, [r7, #8]
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f000 fa89 	bl	80093a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	69da      	ldr	r2, [r3, #28]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f042 0208 	orr.w	r2, r2, #8
 8008ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	69da      	ldr	r2, [r3, #28]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f022 0204 	bic.w	r2, r2, #4
 8008eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	69d9      	ldr	r1, [r3, #28]
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	691a      	ldr	r2, [r3, #16]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	430a      	orrs	r2, r1
 8008ec2:	61da      	str	r2, [r3, #28]
      break;
 8008ec4:	e023      	b.n	8008f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68b9      	ldr	r1, [r7, #8]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f000 fad3 	bl	8009478 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	69da      	ldr	r2, [r3, #28]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	69da      	ldr	r2, [r3, #28]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	69d9      	ldr	r1, [r3, #28]
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	021a      	lsls	r2, r3, #8
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	430a      	orrs	r2, r1
 8008f04:	61da      	str	r2, [r3, #28]
      break;
 8008f06:	e002      	b.n	8008f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3718      	adds	r7, #24
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d101      	bne.n	8008f3c <HAL_TIM_ConfigClockSource+0x1c>
 8008f38:	2302      	movs	r3, #2
 8008f3a:	e0b4      	b.n	80090a6 <HAL_TIM_ConfigClockSource+0x186>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2202      	movs	r2, #2
 8008f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f74:	d03e      	beq.n	8008ff4 <HAL_TIM_ConfigClockSource+0xd4>
 8008f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f7a:	f200 8087 	bhi.w	800908c <HAL_TIM_ConfigClockSource+0x16c>
 8008f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f82:	f000 8086 	beq.w	8009092 <HAL_TIM_ConfigClockSource+0x172>
 8008f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f8a:	d87f      	bhi.n	800908c <HAL_TIM_ConfigClockSource+0x16c>
 8008f8c:	2b70      	cmp	r3, #112	; 0x70
 8008f8e:	d01a      	beq.n	8008fc6 <HAL_TIM_ConfigClockSource+0xa6>
 8008f90:	2b70      	cmp	r3, #112	; 0x70
 8008f92:	d87b      	bhi.n	800908c <HAL_TIM_ConfigClockSource+0x16c>
 8008f94:	2b60      	cmp	r3, #96	; 0x60
 8008f96:	d050      	beq.n	800903a <HAL_TIM_ConfigClockSource+0x11a>
 8008f98:	2b60      	cmp	r3, #96	; 0x60
 8008f9a:	d877      	bhi.n	800908c <HAL_TIM_ConfigClockSource+0x16c>
 8008f9c:	2b50      	cmp	r3, #80	; 0x50
 8008f9e:	d03c      	beq.n	800901a <HAL_TIM_ConfigClockSource+0xfa>
 8008fa0:	2b50      	cmp	r3, #80	; 0x50
 8008fa2:	d873      	bhi.n	800908c <HAL_TIM_ConfigClockSource+0x16c>
 8008fa4:	2b40      	cmp	r3, #64	; 0x40
 8008fa6:	d058      	beq.n	800905a <HAL_TIM_ConfigClockSource+0x13a>
 8008fa8:	2b40      	cmp	r3, #64	; 0x40
 8008faa:	d86f      	bhi.n	800908c <HAL_TIM_ConfigClockSource+0x16c>
 8008fac:	2b30      	cmp	r3, #48	; 0x30
 8008fae:	d064      	beq.n	800907a <HAL_TIM_ConfigClockSource+0x15a>
 8008fb0:	2b30      	cmp	r3, #48	; 0x30
 8008fb2:	d86b      	bhi.n	800908c <HAL_TIM_ConfigClockSource+0x16c>
 8008fb4:	2b20      	cmp	r3, #32
 8008fb6:	d060      	beq.n	800907a <HAL_TIM_ConfigClockSource+0x15a>
 8008fb8:	2b20      	cmp	r3, #32
 8008fba:	d867      	bhi.n	800908c <HAL_TIM_ConfigClockSource+0x16c>
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d05c      	beq.n	800907a <HAL_TIM_ConfigClockSource+0x15a>
 8008fc0:	2b10      	cmp	r3, #16
 8008fc2:	d05a      	beq.n	800907a <HAL_TIM_ConfigClockSource+0x15a>
 8008fc4:	e062      	b.n	800908c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6818      	ldr	r0, [r3, #0]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	6899      	ldr	r1, [r3, #8]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	f000 fb19 	bl	800960c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008fe8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	609a      	str	r2, [r3, #8]
      break;
 8008ff2:	e04f      	b.n	8009094 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6818      	ldr	r0, [r3, #0]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	6899      	ldr	r1, [r3, #8]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	685a      	ldr	r2, [r3, #4]
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	f000 fb02 	bl	800960c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	689a      	ldr	r2, [r3, #8]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009016:	609a      	str	r2, [r3, #8]
      break;
 8009018:	e03c      	b.n	8009094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6818      	ldr	r0, [r3, #0]
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	6859      	ldr	r1, [r3, #4]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	461a      	mov	r2, r3
 8009028:	f000 fa76 	bl	8009518 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2150      	movs	r1, #80	; 0x50
 8009032:	4618      	mov	r0, r3
 8009034:	f000 facf 	bl	80095d6 <TIM_ITRx_SetConfig>
      break;
 8009038:	e02c      	b.n	8009094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6818      	ldr	r0, [r3, #0]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	6859      	ldr	r1, [r3, #4]
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	461a      	mov	r2, r3
 8009048:	f000 fa95 	bl	8009576 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2160      	movs	r1, #96	; 0x60
 8009052:	4618      	mov	r0, r3
 8009054:	f000 fabf 	bl	80095d6 <TIM_ITRx_SetConfig>
      break;
 8009058:	e01c      	b.n	8009094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6818      	ldr	r0, [r3, #0]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	6859      	ldr	r1, [r3, #4]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	461a      	mov	r2, r3
 8009068:	f000 fa56 	bl	8009518 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2140      	movs	r1, #64	; 0x40
 8009072:	4618      	mov	r0, r3
 8009074:	f000 faaf 	bl	80095d6 <TIM_ITRx_SetConfig>
      break;
 8009078:	e00c      	b.n	8009094 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4619      	mov	r1, r3
 8009084:	4610      	mov	r0, r2
 8009086:	f000 faa6 	bl	80095d6 <TIM_ITRx_SetConfig>
      break;
 800908a:	e003      	b.n	8009094 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	73fb      	strb	r3, [r7, #15]
      break;
 8009090:	e000      	b.n	8009094 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009092:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090ae:	b480      	push	{r7}
 80090b0:	b083      	sub	sp, #12
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090b6:	bf00      	nop
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090c2:	b480      	push	{r7}
 80090c4:	b083      	sub	sp, #12
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090ca:	bf00      	nop
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090d6:	b480      	push	{r7}
 80090d8:	b083      	sub	sp, #12
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090de:	bf00      	nop
 80090e0:	370c      	adds	r7, #12
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr

080090ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80090f2:	bf00      	nop
 80090f4:	370c      	adds	r7, #12
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
	...

08009100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a34      	ldr	r2, [pc, #208]	; (80091e4 <TIM_Base_SetConfig+0xe4>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d00f      	beq.n	8009138 <TIM_Base_SetConfig+0x38>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800911e:	d00b      	beq.n	8009138 <TIM_Base_SetConfig+0x38>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a31      	ldr	r2, [pc, #196]	; (80091e8 <TIM_Base_SetConfig+0xe8>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d007      	beq.n	8009138 <TIM_Base_SetConfig+0x38>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a30      	ldr	r2, [pc, #192]	; (80091ec <TIM_Base_SetConfig+0xec>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d003      	beq.n	8009138 <TIM_Base_SetConfig+0x38>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a2f      	ldr	r2, [pc, #188]	; (80091f0 <TIM_Base_SetConfig+0xf0>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d108      	bne.n	800914a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800913e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	4313      	orrs	r3, r2
 8009148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a25      	ldr	r2, [pc, #148]	; (80091e4 <TIM_Base_SetConfig+0xe4>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d01b      	beq.n	800918a <TIM_Base_SetConfig+0x8a>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009158:	d017      	beq.n	800918a <TIM_Base_SetConfig+0x8a>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a22      	ldr	r2, [pc, #136]	; (80091e8 <TIM_Base_SetConfig+0xe8>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d013      	beq.n	800918a <TIM_Base_SetConfig+0x8a>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a21      	ldr	r2, [pc, #132]	; (80091ec <TIM_Base_SetConfig+0xec>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d00f      	beq.n	800918a <TIM_Base_SetConfig+0x8a>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a20      	ldr	r2, [pc, #128]	; (80091f0 <TIM_Base_SetConfig+0xf0>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d00b      	beq.n	800918a <TIM_Base_SetConfig+0x8a>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a1f      	ldr	r2, [pc, #124]	; (80091f4 <TIM_Base_SetConfig+0xf4>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d007      	beq.n	800918a <TIM_Base_SetConfig+0x8a>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a1e      	ldr	r2, [pc, #120]	; (80091f8 <TIM_Base_SetConfig+0xf8>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d003      	beq.n	800918a <TIM_Base_SetConfig+0x8a>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a1d      	ldr	r2, [pc, #116]	; (80091fc <TIM_Base_SetConfig+0xfc>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d108      	bne.n	800919c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	4313      	orrs	r3, r2
 800919a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	689a      	ldr	r2, [r3, #8]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a08      	ldr	r2, [pc, #32]	; (80091e4 <TIM_Base_SetConfig+0xe4>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d103      	bne.n	80091d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	691a      	ldr	r2, [r3, #16]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	615a      	str	r2, [r3, #20]
}
 80091d6:	bf00      	nop
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	40010000 	.word	0x40010000
 80091e8:	40000400 	.word	0x40000400
 80091ec:	40000800 	.word	0x40000800
 80091f0:	40000c00 	.word	0x40000c00
 80091f4:	40014000 	.word	0x40014000
 80091f8:	40014400 	.word	0x40014400
 80091fc:	40014800 	.word	0x40014800

08009200 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009200:	b480      	push	{r7}
 8009202:	b087      	sub	sp, #28
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a1b      	ldr	r3, [r3, #32]
 800920e:	f023 0201 	bic.w	r2, r3, #1
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800922e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f023 0303 	bic.w	r3, r3, #3
 8009236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	4313      	orrs	r3, r2
 8009240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f023 0302 	bic.w	r3, r3, #2
 8009248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	697a      	ldr	r2, [r7, #20]
 8009250:	4313      	orrs	r3, r2
 8009252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a1c      	ldr	r2, [pc, #112]	; (80092c8 <TIM_OC1_SetConfig+0xc8>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d10c      	bne.n	8009276 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	f023 0308 	bic.w	r3, r3, #8
 8009262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	697a      	ldr	r2, [r7, #20]
 800926a:	4313      	orrs	r3, r2
 800926c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f023 0304 	bic.w	r3, r3, #4
 8009274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a13      	ldr	r2, [pc, #76]	; (80092c8 <TIM_OC1_SetConfig+0xc8>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d111      	bne.n	80092a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800928c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	695b      	ldr	r3, [r3, #20]
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	4313      	orrs	r3, r2
 8009296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	4313      	orrs	r3, r2
 80092a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	685a      	ldr	r2, [r3, #4]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	697a      	ldr	r2, [r7, #20]
 80092ba:	621a      	str	r2, [r3, #32]
}
 80092bc:	bf00      	nop
 80092be:	371c      	adds	r7, #28
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr
 80092c8:	40010000 	.word	0x40010000

080092cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b087      	sub	sp, #28
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	f023 0210 	bic.w	r2, r3, #16
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	699b      	ldr	r3, [r3, #24]
 80092f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	021b      	lsls	r3, r3, #8
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	4313      	orrs	r3, r2
 800930e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	f023 0320 	bic.w	r3, r3, #32
 8009316:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	011b      	lsls	r3, r3, #4
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	4313      	orrs	r3, r2
 8009322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a1e      	ldr	r2, [pc, #120]	; (80093a0 <TIM_OC2_SetConfig+0xd4>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d10d      	bne.n	8009348 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	011b      	lsls	r3, r3, #4
 800933a:	697a      	ldr	r2, [r7, #20]
 800933c:	4313      	orrs	r3, r2
 800933e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009346:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a15      	ldr	r2, [pc, #84]	; (80093a0 <TIM_OC2_SetConfig+0xd4>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d113      	bne.n	8009378 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009356:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800935e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	695b      	ldr	r3, [r3, #20]
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	693a      	ldr	r2, [r7, #16]
 8009368:	4313      	orrs	r3, r2
 800936a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	699b      	ldr	r3, [r3, #24]
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	693a      	ldr	r2, [r7, #16]
 8009374:	4313      	orrs	r3, r2
 8009376:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	685a      	ldr	r2, [r3, #4]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	697a      	ldr	r2, [r7, #20]
 8009390:	621a      	str	r2, [r3, #32]
}
 8009392:	bf00      	nop
 8009394:	371c      	adds	r7, #28
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	40010000 	.word	0x40010000

080093a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b087      	sub	sp, #28
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a1b      	ldr	r3, [r3, #32]
 80093b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a1b      	ldr	r3, [r3, #32]
 80093be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f023 0303 	bic.w	r3, r3, #3
 80093da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	021b      	lsls	r3, r3, #8
 80093f4:	697a      	ldr	r2, [r7, #20]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a1d      	ldr	r2, [pc, #116]	; (8009474 <TIM_OC3_SetConfig+0xd0>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d10d      	bne.n	800941e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009408:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	021b      	lsls	r3, r3, #8
 8009410:	697a      	ldr	r2, [r7, #20]
 8009412:	4313      	orrs	r3, r2
 8009414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800941c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a14      	ldr	r2, [pc, #80]	; (8009474 <TIM_OC3_SetConfig+0xd0>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d113      	bne.n	800944e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800942c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	695b      	ldr	r3, [r3, #20]
 800943a:	011b      	lsls	r3, r3, #4
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	4313      	orrs	r3, r2
 8009440:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	011b      	lsls	r3, r3, #4
 8009448:	693a      	ldr	r2, [r7, #16]
 800944a:	4313      	orrs	r3, r2
 800944c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	693a      	ldr	r2, [r7, #16]
 8009452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	685a      	ldr	r2, [r3, #4]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	621a      	str	r2, [r3, #32]
}
 8009468:	bf00      	nop
 800946a:	371c      	adds	r7, #28
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr
 8009474:	40010000 	.word	0x40010000

08009478 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009478:	b480      	push	{r7}
 800947a:	b087      	sub	sp, #28
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a1b      	ldr	r3, [r3, #32]
 8009486:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a1b      	ldr	r3, [r3, #32]
 8009492:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	69db      	ldr	r3, [r3, #28]
 800949e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	021b      	lsls	r3, r3, #8
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	031b      	lsls	r3, r3, #12
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a10      	ldr	r2, [pc, #64]	; (8009514 <TIM_OC4_SetConfig+0x9c>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d109      	bne.n	80094ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	695b      	ldr	r3, [r3, #20]
 80094e4:	019b      	lsls	r3, r3, #6
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	697a      	ldr	r2, [r7, #20]
 80094f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	685a      	ldr	r2, [r3, #4]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	693a      	ldr	r2, [r7, #16]
 8009504:	621a      	str	r2, [r3, #32]
}
 8009506:	bf00      	nop
 8009508:	371c      	adds	r7, #28
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	40010000 	.word	0x40010000

08009518 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009518:	b480      	push	{r7}
 800951a:	b087      	sub	sp, #28
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6a1b      	ldr	r3, [r3, #32]
 8009528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	f023 0201 	bic.w	r2, r3, #1
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	011b      	lsls	r3, r3, #4
 8009548:	693a      	ldr	r2, [r7, #16]
 800954a:	4313      	orrs	r3, r2
 800954c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	f023 030a 	bic.w	r3, r3, #10
 8009554:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	4313      	orrs	r3, r2
 800955c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	697a      	ldr	r2, [r7, #20]
 8009568:	621a      	str	r2, [r3, #32]
}
 800956a:	bf00      	nop
 800956c:	371c      	adds	r7, #28
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr

08009576 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009576:	b480      	push	{r7}
 8009578:	b087      	sub	sp, #28
 800957a:	af00      	add	r7, sp, #0
 800957c:	60f8      	str	r0, [r7, #12]
 800957e:	60b9      	str	r1, [r7, #8]
 8009580:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	f023 0210 	bic.w	r2, r3, #16
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6a1b      	ldr	r3, [r3, #32]
 8009598:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80095a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	031b      	lsls	r3, r3, #12
 80095a6:	697a      	ldr	r2, [r7, #20]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80095b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	011b      	lsls	r3, r3, #4
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	621a      	str	r2, [r3, #32]
}
 80095ca:	bf00      	nop
 80095cc:	371c      	adds	r7, #28
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr

080095d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095d6:	b480      	push	{r7}
 80095d8:	b085      	sub	sp, #20
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095ee:	683a      	ldr	r2, [r7, #0]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	f043 0307 	orr.w	r3, r3, #7
 80095f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	609a      	str	r2, [r3, #8]
}
 8009600:	bf00      	nop
 8009602:	3714      	adds	r7, #20
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800960c:	b480      	push	{r7}
 800960e:	b087      	sub	sp, #28
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
 8009618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009626:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	021a      	lsls	r2, r3, #8
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	431a      	orrs	r2, r3
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	4313      	orrs	r3, r2
 8009634:	697a      	ldr	r2, [r7, #20]
 8009636:	4313      	orrs	r3, r2
 8009638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	697a      	ldr	r2, [r7, #20]
 800963e:	609a      	str	r2, [r3, #8]
}
 8009640:	bf00      	nop
 8009642:	371c      	adds	r7, #28
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800964c:	b480      	push	{r7}
 800964e:	b087      	sub	sp, #28
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	f003 031f 	and.w	r3, r3, #31
 800965e:	2201      	movs	r2, #1
 8009660:	fa02 f303 	lsl.w	r3, r2, r3
 8009664:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6a1a      	ldr	r2, [r3, #32]
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	43db      	mvns	r3, r3
 800966e:	401a      	ands	r2, r3
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6a1a      	ldr	r2, [r3, #32]
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	f003 031f 	and.w	r3, r3, #31
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	fa01 f303 	lsl.w	r3, r1, r3
 8009684:	431a      	orrs	r2, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	621a      	str	r2, [r3, #32]
}
 800968a:	bf00      	nop
 800968c:	371c      	adds	r7, #28
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
	...

08009698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d101      	bne.n	80096b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80096ac:	2302      	movs	r3, #2
 80096ae:	e050      	b.n	8009752 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2202      	movs	r2, #2
 80096bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	4313      	orrs	r3, r2
 80096e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a1c      	ldr	r2, [pc, #112]	; (8009760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d018      	beq.n	8009726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096fc:	d013      	beq.n	8009726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a18      	ldr	r2, [pc, #96]	; (8009764 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d00e      	beq.n	8009726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a16      	ldr	r2, [pc, #88]	; (8009768 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d009      	beq.n	8009726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a15      	ldr	r2, [pc, #84]	; (800976c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d004      	beq.n	8009726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a13      	ldr	r2, [pc, #76]	; (8009770 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d10c      	bne.n	8009740 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800972c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	4313      	orrs	r3, r2
 8009736:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3714      	adds	r7, #20
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	40010000 	.word	0x40010000
 8009764:	40000400 	.word	0x40000400
 8009768:	40000800 	.word	0x40000800
 800976c:	40000c00 	.word	0x40000c00
 8009770:	40014000 	.word	0x40014000

08009774 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <arm_sin_f32>:
 800979c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8009818 <arm_sin_f32+0x7c>
 80097a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80097a4:	ee20 7a07 	vmul.f32	s14, s0, s14
 80097a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ac:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80097b0:	d42c      	bmi.n	800980c <arm_sin_f32+0x70>
 80097b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097b6:	eddf 6a19 	vldr	s13, [pc, #100]	; 800981c <arm_sin_f32+0x80>
 80097ba:	4a19      	ldr	r2, [pc, #100]	; (8009820 <arm_sin_f32+0x84>)
 80097bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80097c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80097c8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80097cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097d0:	bfa8      	it	ge
 80097d2:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 80097d6:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80097da:	ee17 3a10 	vmov	r3, s14
 80097de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097e2:	ee07 3a10 	vmov	s14, r3
 80097e6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80097ea:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80097ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80097f2:	edd1 6a01 	vldr	s13, [r1, #4]
 80097f6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80097fa:	ed91 0a00 	vldr	s0, [r1]
 80097fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009802:	ee27 0a00 	vmul.f32	s0, s14, s0
 8009806:	ee30 0a27 	vadd.f32	s0, s0, s15
 800980a:	4770      	bx	lr
 800980c:	ee17 3a90 	vmov	r3, s15
 8009810:	3b01      	subs	r3, #1
 8009812:	ee07 3a90 	vmov	s15, r3
 8009816:	e7cc      	b.n	80097b2 <arm_sin_f32+0x16>
 8009818:	3e22f983 	.word	0x3e22f983
 800981c:	44000000 	.word	0x44000000
 8009820:	0800a104 	.word	0x0800a104

08009824 <atoi>:
 8009824:	220a      	movs	r2, #10
 8009826:	2100      	movs	r1, #0
 8009828:	f000 b8d6 	b.w	80099d8 <strtol>

0800982c <__errno>:
 800982c:	4b01      	ldr	r3, [pc, #4]	; (8009834 <__errno+0x8>)
 800982e:	6818      	ldr	r0, [r3, #0]
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	200008b0 	.word	0x200008b0

08009838 <__libc_init_array>:
 8009838:	b570      	push	{r4, r5, r6, lr}
 800983a:	4d0d      	ldr	r5, [pc, #52]	; (8009870 <__libc_init_array+0x38>)
 800983c:	4c0d      	ldr	r4, [pc, #52]	; (8009874 <__libc_init_array+0x3c>)
 800983e:	1b64      	subs	r4, r4, r5
 8009840:	10a4      	asrs	r4, r4, #2
 8009842:	2600      	movs	r6, #0
 8009844:	42a6      	cmp	r6, r4
 8009846:	d109      	bne.n	800985c <__libc_init_array+0x24>
 8009848:	4d0b      	ldr	r5, [pc, #44]	; (8009878 <__libc_init_array+0x40>)
 800984a:	4c0c      	ldr	r4, [pc, #48]	; (800987c <__libc_init_array+0x44>)
 800984c:	f000 f8ce 	bl	80099ec <_init>
 8009850:	1b64      	subs	r4, r4, r5
 8009852:	10a4      	asrs	r4, r4, #2
 8009854:	2600      	movs	r6, #0
 8009856:	42a6      	cmp	r6, r4
 8009858:	d105      	bne.n	8009866 <__libc_init_array+0x2e>
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009860:	4798      	blx	r3
 8009862:	3601      	adds	r6, #1
 8009864:	e7ee      	b.n	8009844 <__libc_init_array+0xc>
 8009866:	f855 3b04 	ldr.w	r3, [r5], #4
 800986a:	4798      	blx	r3
 800986c:	3601      	adds	r6, #1
 800986e:	e7f2      	b.n	8009856 <__libc_init_array+0x1e>
 8009870:	0800aa14 	.word	0x0800aa14
 8009874:	0800aa14 	.word	0x0800aa14
 8009878:	0800aa14 	.word	0x0800aa14
 800987c:	0800aa18 	.word	0x0800aa18

08009880 <memcpy>:
 8009880:	440a      	add	r2, r1
 8009882:	4291      	cmp	r1, r2
 8009884:	f100 33ff 	add.w	r3, r0, #4294967295
 8009888:	d100      	bne.n	800988c <memcpy+0xc>
 800988a:	4770      	bx	lr
 800988c:	b510      	push	{r4, lr}
 800988e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009892:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009896:	4291      	cmp	r1, r2
 8009898:	d1f9      	bne.n	800988e <memcpy+0xe>
 800989a:	bd10      	pop	{r4, pc}

0800989c <memset>:
 800989c:	4402      	add	r2, r0
 800989e:	4603      	mov	r3, r0
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d100      	bne.n	80098a6 <memset+0xa>
 80098a4:	4770      	bx	lr
 80098a6:	f803 1b01 	strb.w	r1, [r3], #1
 80098aa:	e7f9      	b.n	80098a0 <memset+0x4>

080098ac <strncmp>:
 80098ac:	b510      	push	{r4, lr}
 80098ae:	b17a      	cbz	r2, 80098d0 <strncmp+0x24>
 80098b0:	4603      	mov	r3, r0
 80098b2:	3901      	subs	r1, #1
 80098b4:	1884      	adds	r4, r0, r2
 80098b6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80098ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80098be:	4290      	cmp	r0, r2
 80098c0:	d101      	bne.n	80098c6 <strncmp+0x1a>
 80098c2:	42a3      	cmp	r3, r4
 80098c4:	d101      	bne.n	80098ca <strncmp+0x1e>
 80098c6:	1a80      	subs	r0, r0, r2
 80098c8:	bd10      	pop	{r4, pc}
 80098ca:	2800      	cmp	r0, #0
 80098cc:	d1f3      	bne.n	80098b6 <strncmp+0xa>
 80098ce:	e7fa      	b.n	80098c6 <strncmp+0x1a>
 80098d0:	4610      	mov	r0, r2
 80098d2:	e7f9      	b.n	80098c8 <strncmp+0x1c>

080098d4 <_strtol_l.constprop.0>:
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098da:	d001      	beq.n	80098e0 <_strtol_l.constprop.0+0xc>
 80098dc:	2b24      	cmp	r3, #36	; 0x24
 80098de:	d906      	bls.n	80098ee <_strtol_l.constprop.0+0x1a>
 80098e0:	f7ff ffa4 	bl	800982c <__errno>
 80098e4:	2316      	movs	r3, #22
 80098e6:	6003      	str	r3, [r0, #0]
 80098e8:	2000      	movs	r0, #0
 80098ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80099d4 <_strtol_l.constprop.0+0x100>
 80098f2:	460d      	mov	r5, r1
 80098f4:	462e      	mov	r6, r5
 80098f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098fa:	f814 700c 	ldrb.w	r7, [r4, ip]
 80098fe:	f017 0708 	ands.w	r7, r7, #8
 8009902:	d1f7      	bne.n	80098f4 <_strtol_l.constprop.0+0x20>
 8009904:	2c2d      	cmp	r4, #45	; 0x2d
 8009906:	d132      	bne.n	800996e <_strtol_l.constprop.0+0x9a>
 8009908:	782c      	ldrb	r4, [r5, #0]
 800990a:	2701      	movs	r7, #1
 800990c:	1cb5      	adds	r5, r6, #2
 800990e:	2b00      	cmp	r3, #0
 8009910:	d05b      	beq.n	80099ca <_strtol_l.constprop.0+0xf6>
 8009912:	2b10      	cmp	r3, #16
 8009914:	d109      	bne.n	800992a <_strtol_l.constprop.0+0x56>
 8009916:	2c30      	cmp	r4, #48	; 0x30
 8009918:	d107      	bne.n	800992a <_strtol_l.constprop.0+0x56>
 800991a:	782c      	ldrb	r4, [r5, #0]
 800991c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009920:	2c58      	cmp	r4, #88	; 0x58
 8009922:	d14d      	bne.n	80099c0 <_strtol_l.constprop.0+0xec>
 8009924:	786c      	ldrb	r4, [r5, #1]
 8009926:	2310      	movs	r3, #16
 8009928:	3502      	adds	r5, #2
 800992a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800992e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009932:	f04f 0c00 	mov.w	ip, #0
 8009936:	fbb8 f9f3 	udiv	r9, r8, r3
 800993a:	4666      	mov	r6, ip
 800993c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009940:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009944:	f1be 0f09 	cmp.w	lr, #9
 8009948:	d816      	bhi.n	8009978 <_strtol_l.constprop.0+0xa4>
 800994a:	4674      	mov	r4, lr
 800994c:	42a3      	cmp	r3, r4
 800994e:	dd24      	ble.n	800999a <_strtol_l.constprop.0+0xc6>
 8009950:	f1bc 0f00 	cmp.w	ip, #0
 8009954:	db1e      	blt.n	8009994 <_strtol_l.constprop.0+0xc0>
 8009956:	45b1      	cmp	r9, r6
 8009958:	d31c      	bcc.n	8009994 <_strtol_l.constprop.0+0xc0>
 800995a:	d101      	bne.n	8009960 <_strtol_l.constprop.0+0x8c>
 800995c:	45a2      	cmp	sl, r4
 800995e:	db19      	blt.n	8009994 <_strtol_l.constprop.0+0xc0>
 8009960:	fb06 4603 	mla	r6, r6, r3, r4
 8009964:	f04f 0c01 	mov.w	ip, #1
 8009968:	f815 4b01 	ldrb.w	r4, [r5], #1
 800996c:	e7e8      	b.n	8009940 <_strtol_l.constprop.0+0x6c>
 800996e:	2c2b      	cmp	r4, #43	; 0x2b
 8009970:	bf04      	itt	eq
 8009972:	782c      	ldrbeq	r4, [r5, #0]
 8009974:	1cb5      	addeq	r5, r6, #2
 8009976:	e7ca      	b.n	800990e <_strtol_l.constprop.0+0x3a>
 8009978:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800997c:	f1be 0f19 	cmp.w	lr, #25
 8009980:	d801      	bhi.n	8009986 <_strtol_l.constprop.0+0xb2>
 8009982:	3c37      	subs	r4, #55	; 0x37
 8009984:	e7e2      	b.n	800994c <_strtol_l.constprop.0+0x78>
 8009986:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800998a:	f1be 0f19 	cmp.w	lr, #25
 800998e:	d804      	bhi.n	800999a <_strtol_l.constprop.0+0xc6>
 8009990:	3c57      	subs	r4, #87	; 0x57
 8009992:	e7db      	b.n	800994c <_strtol_l.constprop.0+0x78>
 8009994:	f04f 3cff 	mov.w	ip, #4294967295
 8009998:	e7e6      	b.n	8009968 <_strtol_l.constprop.0+0x94>
 800999a:	f1bc 0f00 	cmp.w	ip, #0
 800999e:	da05      	bge.n	80099ac <_strtol_l.constprop.0+0xd8>
 80099a0:	2322      	movs	r3, #34	; 0x22
 80099a2:	6003      	str	r3, [r0, #0]
 80099a4:	4646      	mov	r6, r8
 80099a6:	b942      	cbnz	r2, 80099ba <_strtol_l.constprop.0+0xe6>
 80099a8:	4630      	mov	r0, r6
 80099aa:	e79e      	b.n	80098ea <_strtol_l.constprop.0+0x16>
 80099ac:	b107      	cbz	r7, 80099b0 <_strtol_l.constprop.0+0xdc>
 80099ae:	4276      	negs	r6, r6
 80099b0:	2a00      	cmp	r2, #0
 80099b2:	d0f9      	beq.n	80099a8 <_strtol_l.constprop.0+0xd4>
 80099b4:	f1bc 0f00 	cmp.w	ip, #0
 80099b8:	d000      	beq.n	80099bc <_strtol_l.constprop.0+0xe8>
 80099ba:	1e69      	subs	r1, r5, #1
 80099bc:	6011      	str	r1, [r2, #0]
 80099be:	e7f3      	b.n	80099a8 <_strtol_l.constprop.0+0xd4>
 80099c0:	2430      	movs	r4, #48	; 0x30
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1b1      	bne.n	800992a <_strtol_l.constprop.0+0x56>
 80099c6:	2308      	movs	r3, #8
 80099c8:	e7af      	b.n	800992a <_strtol_l.constprop.0+0x56>
 80099ca:	2c30      	cmp	r4, #48	; 0x30
 80099cc:	d0a5      	beq.n	800991a <_strtol_l.constprop.0+0x46>
 80099ce:	230a      	movs	r3, #10
 80099d0:	e7ab      	b.n	800992a <_strtol_l.constprop.0+0x56>
 80099d2:	bf00      	nop
 80099d4:	0800a909 	.word	0x0800a909

080099d8 <strtol>:
 80099d8:	4613      	mov	r3, r2
 80099da:	460a      	mov	r2, r1
 80099dc:	4601      	mov	r1, r0
 80099de:	4802      	ldr	r0, [pc, #8]	; (80099e8 <strtol+0x10>)
 80099e0:	6800      	ldr	r0, [r0, #0]
 80099e2:	f7ff bf77 	b.w	80098d4 <_strtol_l.constprop.0>
 80099e6:	bf00      	nop
 80099e8:	200008b0 	.word	0x200008b0

080099ec <_init>:
 80099ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ee:	bf00      	nop
 80099f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099f2:	bc08      	pop	{r3}
 80099f4:	469e      	mov	lr, r3
 80099f6:	4770      	bx	lr

080099f8 <_fini>:
 80099f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fa:	bf00      	nop
 80099fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099fe:	bc08      	pop	{r3}
 8009a00:	469e      	mov	lr, r3
 8009a02:	4770      	bx	lr
